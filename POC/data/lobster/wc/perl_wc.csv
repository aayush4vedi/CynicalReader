ID,Source,Tag_Code,Tag_Name,Title,Url,ProcessdedTitle,WeightedContent,Content
1,Lobsters,perl,Perl,Hardening Perl’s Hash Function (2013),https://blog.booking.com/hardening-perls-hash-function.html,hardening perl hash function,hash implemented hash split memory exhaustion attack rehash mechanism multicollision attack explain change perl change oneatatime function reduce information leakage people complain randomization good anyway tangible attack perl hash function hash function dynamic language hvfunch afterwards bug filed perl original research,written yves ortonthe basic idea attack precompute set key would hash value thus storage bucket key would fed batch target would compare key previously stored key inserting new key effectively turning hash linked list changing performance profile inserting item amortized n mean practice loading argument getpost parameter hash provided vector denial service attack many httpbased applicationsas response perl implemented mechanism would detect long chain entry within bucket trigger hash split meant would double number bucket redistribute previously stored key required newly added bucket hash split chain still unacceptably long perl would cause hash go special mode rehash mode us perprocess random hash seed hash function switching normal hash special mode would cause perl allocate new bucket array recalculate previously stored key using random seed redistribute key old bucket array new one mitigated attack remapping previously colliding key well distributed set randomly chosen new bucketsat point perl community thought put subject hash collision attack behind u nearly year heard little subjectmemory exhaustion attack rehash mechanismover year occasionally subject changing hash function would come instance jarkko made number comment faster hash function response bit research subject little came workin changed working several project made heavy use perl hash function decided invest effort see hash function would provide performance improvement time people perl community becoming interested partly due work partly due publicity multicollision attack python ruby hash function murmurhash cityhash publicity actually notice pushed patch switch perl use murmurhash default hash something got reverted real fastin restructuring perl hash implementation easier test different hash function became well acquainted finer detail implementation rehash mechanism frankly got way wanted remove outright arguing whether could replaced conceptually simpler mechanism discovered defense put place strong previously believed fact provided whole new arguably dangerous attack vector original attack meant mitigate resulted security team announcing release security patch major perls version since problem rehash mechanism allowed attacker create set key would cause perl repeatedly double size hash table never trigger use randomized hash seed relatively key attacker could make perl allocate bucket array hash bucket many memory would allow even attack consume memory box would serious performance consequence perl remapped key ever increasing bucket array even fast hardware counting take issue affected version perl affect perl interested security patch version follows time perl installation securitypatched additionally official perl maintenance release published would like know vulnerable try following program perl le h qw h k r ad ao ax ay b ck cm cz ej fz hm ia ih iz jk kx lg lv lw nj oj pr ql rk sk td tz vy yc yw zj zu aad acp acq adm ajy alu apb apx asa asm atf axi ayl bbq bcs bdp bh bml print ok perl following statistic generated time program full attack oneliner perl without fix applied identicalzero line omitted laptop without fix patch user time second time second cpu job got elapsed wall clock time h mm s s resident set size kbytes reclaiming frame page fault context switch fix patch applied user time second time second cpu job got elapsed wall clock time h mm s s resident set size kbytes reclaiming frame page fault context switch explain change perl observant reader realized could patch older perls robust could also patched avoided problem caused changing perl hash function reason went even maintenance patch found perl le readily exploitable vulnerability attack wanted best fix allthis part story start ruslan zakirov posting report mailing list report outlined basis key discovery attack perl hash function first perl security team entirely convinced followed code demonstrated attack sound development meant choice random seed would make perl hash function robust attack attacker could relatively efficiently determine seed use knowledge construct set attack key could used attack hash functionnicholas clark ramped thing notch indepth analysis attack issue involved time ruslan conclusion analysis attack exploited multiple vulnerability perl hash data structure worked response would similarly require multipronged approachchanges oneatatime functionthe first vulnerability bob jenkins oneatatime hash perl used mix seed together hashed data well enough short key allows attacker mount key discovery attack using small set short key order stored probe seed eventually expose enough bit seed final collision attack could mountedwe addressed issue making perl append four digit randomly chosen suffix every string hashed mean always mix seed least time mix something attacker know effectively double number bit used secret state ensures short key leak information original seed reason use suffix adding prefix starting different initial seed state add extra security suffix modifies final state user input provided increase search space attacker must considerrelated change original oneatatime function potentially vulnerable multicollision attack attacker could precalculate one suffix thath x h concat x suffix would allow attacker trivially construct infinite set key would always collide bucket hardened hash mixing length key seed believe le eliminates possibility multicollision attack mean seed used calculate h concat x suffix would seed h concat x suffix suffix cryptographer invited prove u wrongreduce information leakagethe second vulnerability easy leak information hash function attacker instance web page might accept set parameter respond information parameter natural key order hash might provide enough information mount key discovery attackin order prevent information leakage randomize element order returned key function hash adding mask hash insert hash occurs modify mask pseudorandom way traversal iterate kth bucket xor iteration value mask result every time new key added hash order key change le completely mean natural key order hash expose almost useful data attacker seeing one key front another tell anything bucket key stored nice side effect use mask detect people inserting hash traversal generally indicates problem code produce quite surprising result difficult debug perl happens warn developer ita third vulnerability related case two key stored bucket case order key predictable recently added key would first key traversal allows small amount data leak potential adversary identifying case one could find two string least significant bit stuffing key hash triggering hash split attacker could determine newly added bit hash value different two key without keyorder randomization logic mentioned previously attacker could also determine two significant bit used part hash valuewhile yet able construct actual attack based information decided harden anyway done randomly choosing whether insert colliding key top bucket chain insert second top chain similarly hash split also make decision key collide remapped new bucket end result order two key colliding bucket le random although order two key notpeople complain randomization good anyway introduced randomization perl hash function order harden attack discovered positive consequence foreseethe first initially appeared downside perl hash function behaved consistently decade time perl developer inadvertently created dependency key order example found test file cpan module many u got lazy froze key order test code example embedding output data dumpercall one test however real bug reputable well tested modulesby making perl key order random dependency key order became instantly visible number bug probably manifested heisenbugs became regular occurrence much easier track identify estimate every two nonbugs thing like test code found one real bug identified well considering one perl core dbi personally consider good resultmany people object randomization like make debugging harder premise becomes difficult recreate bug thus debug believe practice opposite randomization like mean formerly rare bug becomes common turn mean becomes much obvious related subtle dependency key order effectively making much easier find problemsa last benefit randomizing hash function time change replace hash function perl built fact bundled multiple hash function including presumed cryptographically strong siphash since hash order random worry change function external code already robust hash order unpredictablehow tangible attack perl hash function lot discussion subject obviously erring side caution security matter right course action nevertheless lot debate practical attack like real production environment perl commonly used web server point keep mind perls hash algorithm us array bucket whose size always number key stored factor two larger mean hash key generally bucket key hash split bucket mean key inserted hash le likely key put bucket attacking hash make nonattack key slower attacker basically slows fetch except byproduct resource consumption affect requestsfor attack reach do proportion number item inserted hash would large modern cpu linked list thousand hundred thousand key would necessary serious degradation service point even attack unsuccessful term degrading perl hash algorithm would still function effectively dataflooding denial service attack therefore focusing hash complexity aspect attack seems unwarrantedrudimentary outofband measure sufficient mitigate attack hard restriction number key may accepted publicly facing process sufficient prevent attack causing damage instance apache default restricting number parameter accepts effectively hardens type attack one reason attack rehash mechanism important successful attack requires relatively key similarly well designed application would validate parameter receives put hash unless recognizedso long hash function chosen vulnerable multicollision attack simple perprocess hash seed randomization make job finding attack key set prohibitively difficult one must first perform hashseed discovery attack generate large set key restriction number key process accept place key must large collision would noticeable effect also make job finding colliding key expensivein many circumstance webservice provider host behind load balancer either mean every different web host us different hash seed making hash seed discovery attack difficult requires attacker open longrunning persistent session server wish attack easily preventable via normal monitoring proceduresfor reason appears hashcomplexity attack context perl web hosting environment limited interest long hash function allow multicollision attacksthe hash function us least perprocess hash seed randomizationthe interface untrusted potential attacker us simple hard limit number key acceptthese property relatively easy accomplish without resorting cryptographically strong hash function generally slow complicated measure prevent attack case perl rehashing flaw shown cure may worse disease code cve exploit attack added perl part attempt defend hypothetical attack vector excessive bucket collision time unaware real attack formhash function dynamic languagesit seems like bulk research hash function focused finding fast cryptographically secure hash function long string containing binary data however dynamic language like perl make heavy use hash function small string often restricted simple alphanumeric character example email address identifier like variable method name single character key list numeric id similar use case relatively short string use restricted set bit bytesso far appears bob jenkins oneatatimehash minor modification provides acceptable solution seems good distribution property reasonably fast short string hardening measure added perl appears robust attack analysis done security team suggests oneatatimehash intrinsically secure murmurhash however knowledge peerreviewed cryptanalysis prove itthere seems little research fast robust hash algorithm suitable dynamic language siphash notable exception step forward within perl community seems consensus currently slow least recommended incarnation also problematic current implementation support bit architecture doubt improve time perhaps even already universal hashing also seems promising theory unproven practice case like perl size hash table small input string variable size often selected restricted character set attempted implement number universal hashingstyle hash function perl disappointed extremely poor distribution bucket hash simple task like hashing randomly selected set integer text form may flaw implementation appeared universal hashing perform particularly well input byte evenly distributed least work required prove utility universal hashing dynamic language contextthe dynamicscripting language community need academic computing community provide better tool box peer reviewed string hash function offer speed good distribution restricted character set short string sufficiently hardened practical deployment robust direct attack security important theoretical attack require large volume keyresponse exchange trump requirement good distribution property acceptable performance characteristic perl make relatively easy add test new hash function see hvfunch would make nice test bed interested area researchafterwardsi would like thank nicholas clark ruslan zakirov jarkko hietaniemi contribution led change perl nicholas lot deep analysis provided motivation create attack proof ruslan provided analysis working keydiscovery attack script perl old hash function jarkko motivated look general subject see also bug filed perl original research anything attack might make access key part attack faster attack key cluster one bucket mean key much likely spread among remaining bucket fewer key average without attack
2,Lobsters,perl,Perl,Hacking with Environment Variables,https://www.elttam.com/blog/env/,hacking environment variable,introduction remote ldpreload exploitation perl exploit hacker fantastic blasty exploit solve ctf challenge justinsteven proof concept python making progress pythonwarnings guarded check variable antigravity module easter egg leveraging perl arbitrary code execution proof concept nodejs blog post michał bentkowski proc filesystem proof concept php php setting orange tsai great blog post brendan scarvell proof concept ruby proof concept conclusion,introduction recent project gained ability specify environment variable process executed also unable control content file disk bruteforcing process identifier pid file descriptor found interesting result eliminating remote ldpreload exploitation fortunately scripting language interpreter executed enabled u execute arbitrary command specifying particular environment variable blog post discus arbitrary command executed range scripting language interpreter supplied malicious environment variable perl quick read environment section perlrun man page reveals plenty environment variable worth investigating environment variable allows specifying commandline option restricted accepting option cdimtuwdmtw unfortunately mean e allows supplying perl code run lost though demonstrated exploit hacker fantastic exploit writes malicious perl module tmprootpm supply environment variable achieve arbitrary code execution however exploit local privilege escalation vulnerability generic technique ideally require access file system looking blasty exploit cve exploit require creating file used environment variable sh exit environment variable also used solve ctf challenge one final nicety generic technique would use single environment variable instead two justinsteven found possible leveraging either used load perl module option allows adding extra code module name proof concept arbitrary code execution achieved using environment variable perl running empty script devnull docker run env print id perl devnull root root root python reading environment variable section python man page pythonstartup initially appears like may piece straightforward solution allows specifying path python script executed prior displaying prompt interactive mode interactive mode requirement seem like would issue pythoninspect environment variable used enter interactive mode specifying command line however documentation option explains pythonstartup used python started script execute mean pythonstartup pythoninspect combined pythonstartup effect python repl immediately launched ultimately mean pythonstartup viable effect executing regular python script environment variable looked promising pythonhome pythonpath let gain arbitrary code execution require also able create directory file filesystem may possible loosen requirement use proc filesystem andor zip file majority remaining environment variable simply checked contain nonempty string toggle generally benign setting one rare exception pythonwarnings making progress pythonwarnings documentation pythonwarnings state equivalent specifying w option w option used warning control specify warning often printed full form argument action message category module line warning control seem like promising lead quickly changed checking implementation def getcategory category category return warning category import builtins klass category else module klass categoryrpartition try import module none none klass except importerror raise optionerror invalid module name r module none code show long specified category contains dot trigger import arbitrary python module next problem vast majority module python standard library run little code imported tend define class used later even provide code run code typically guarded check main variable detect file imported run directly unexpected exception antigravity module python developer included easter egg triggered running import antigravity import immediately open browser xkcd comic joked import antigravity python would grant ability fly antigravity module open browser us another module standard library called webbrowser module check path large variety browser including mosaic opera skipstone konqueror chrome chromium firefox link elinks lynx also accepts environment variable browser let specify process executed possible supply argument process environment variable xkcd comic url one hardcoded argument command ability turn arbitrary code execution depends executables available system leveraging perl arbitrary code execution one approach leverage perl commonly installed system even available standard python docker image however perl binary used first argument xkcd comic url comic url argument cause error process exit without environment variable used effect url passed perl docker run e print id exit perl http ca nt open perl script http file directory fortunately perl available also common default perl script available perldoc perlthanks script also error exit invalid argument error case happens later processing environment variable mean leverage perl environment variable payload detailed earlier blog post working intended perldoc perlthanks docker run e print id exit perldoc http root root root run e print id exit perlthanks http root root root proof concept arbitrary code execution achieved using multiple environment variable python python docker run e e browserperlthanks e print id exit python devnull root root root invalid w option ignored unknown warning category antigravityx docker run e e browserperlthanks e print id exit python devnull root root root invalid w option ignored unknown warning category antigravityx nodejs blog post michał bentkowski provided payload exploiting kibana prototype pollution vulnerability used set arbitrary environment variable resulted arbitrary command execution michał payload used nodeoptions environment variable proc filesystem specifically procselfenviron although michał technique creative worked perfectly vulnerability technique always guaranteed work constraint would nice remove first constraint using procselfenviron viable content made syntactically valid javascript requires able create environment variable appear first content procselfenviron knowingbruteforcing environment variable name appear first overwriting value another constraint first environment variable value finish single line comment therefore newline character environment variable likely cause syntax error prevent payload executing use multiline comment fix issue must closed syntactically valid therefore rare case environment variable contains newline character required knowbruteforce environment variable name overwrite value new value contain newline removing contraints exercise left reader proof concept achieving arbitrary code execution environment variable nodejs michał bentkowski docker run e nodeversionconsolelog require childprocess execsync id tostring e nodeoptions require procselfenviron node devnull root root root php run ltrace e getenv php devnull find php us phprc environment variable environment variable used attempting find load configuration file phpini exploit neex used series php setting achieve arbitrary code execution orange tsai also great blog post creating exploit cve us slightly different list setting using knowledge plus knowledge gained previous nodejs technique help brendan scarvell two environment variable solution found php constraint exist technique nodejs example proof concept achieving arbitrary code execution environment variable php docker run e nautoprependfileprocselfenvironn php die id e phprcprocselfenviron php devnull autoprependfileprocselfenviron root root root ruby generic solution ruby found yet ruby accept environment variable rubyopt specify commandline option man page state rubyopt contain e k r u v w w debug disablefeature enablefeature promising option r cause ruby load library using require however limited file extension rb example somewhat useful rb file found toolsserverrb json gem available installing ruby fedora system file required web server started shown using rubyopt environment variable cause ruby process start web server docker run env binbash c dnf install ruby devnull ruby devnull surf http info webrick info ruby info webrick httpserver start sticking fedora another approach leverage fact usrbinruby actually bash script start usrbinrubymri script call bash function overwritten environment variable proof concept using exported bash function run arbitrary command docker run env bashfuncdeclare id exit binbash c dnf install ruby devnull ruby devnull root root root conclusion post explored interesting use case environment variable could assist achieving arbitrary code execution various scripting language interpreter without writing file disk hopefully enjoyed reading inspired find share improved payload scripting language find generic technique work ruby would interested hearing achieved thanks reading ciao bella
3,Lobsters,perl,Perl,Perl7 is a fork of values,http://blogs.perl.org/users/leon_timmermans/2020/08/perl7-is-a-fork-of-values.html,fork value,video policy document nt aim bring new feature nt enable u anything nt possible without instead aim change perl culture know whole point radically choosing approachability stability also fork community ecosystem,reading watch video bryan cantrill explains valueconflict joyent nodejs believe similar problem defines list project value value important tension end one choose perl traditionally prioritized certain value others experience expressiveness extensibility stability expressiveness probably obvious one extensibility probably le obvious probably le concious choice feel like right pick language several oo framework custom keywords stability particular backwards compatibility thoroughly embedded policy document lately ignoring actively opposing compatibility earlier version perl come vogue sometimes change proposed want usurp syntax previously another meaning sometimes change want improve previouslycrazy semantics road lie madness doubt caution dictate favor backward compatibility using lexical pragma enable disable legacy behavior considered appropriate absence pragma legacy behavior enabled matter frustrating unintentional feature may u continue improve perl unintentional feature often deserve protection important existing software written perl continue work correctly major scripting language value keeping code working similar language especially python breaking relatively common construct regularly generally tried limit margin though certainly breakage major release nt mean subcommunities share exactly value though involved toolchain toolchain specific value robustness portability stability value sysadmins environment working thing keep working whereas example mojo community generally seems prioritize approachability expressiveness velocity value modern web development change constant mostly difference fine help lot community value overlap language value different community different value without biting said perl internal conflict value take language tension existed several year focused primarily around stability primary axis tension approachability versus stability simply put new feature default guarded version feature guard eg use use stability enabled default next perl version approachability nt aim bring new feature nt enable u anything nt possible without writing guard instead aim change perl culture know whole point radically choosing approachability stability crucial thing realize mean fork interpreter also fork community ecosystem extent fork postponed drop compatibility given new course inevitable join brave new world make fork value complete even value governance completely different mailing list open entire community historically perhaps bit open steering committee whose membership inviteonly post summary activity everyone wondering going crucial question going stop current official plan something repeated argued make sense sunsetting release experimental feature lacking executable box development continue something nt talked much sure yet happen pretty sure decision nt taken people nt want use nt know going even sure forking good bad long run could good managed well far nt terrifies
5,Lobsters,perl,Perl,Thinking about a new Type System for Perl/Cor,https://github.com/Ovid/Cor/wiki/Type-System,thinking new type system perlcor,click provide feedback opened ticket perl git repo type type system data type type programming language taint checking benefit type system detecting error context documentation safety preventing data written swap efficiency human versus computer type integer character array integer character pointer generic type hierarchy,click provide feedback cor need type system however probably turn hard b need type cor signature variable declaration whatever else forgotten variable declaration nt much discussion dave mitchell work type signature predates cor attempt declaring type compatible opened ticket perl git repo type absolutely ca nt type system cor nt integrated rest language discus want discus bit type system type system data type unfortunately data typed tend conflate type system data type people often think declaring int str make type system true purpose discussion borrow benjamin c pierce definition excellent book type programming language type system tractable syntactic method proving absense certain program behavior classifying phrase according kind value compute rephrase bit simply le accurately type system designed goal ensuring software exhibit certain unwanted behavior declare variable must contain instance datetime object assigning string foo throw exception whether compiletime runtime subject much debate largely skip aside mentioning check preferred make programming life harder also fan gradual typing get benefit quick coding solve immediate problem fall back rigorous restriction largescale system needed said let consider taint checking taint checking developer realize common behavior using data outside program affect thing inside program unless scrubbed outside data obviously gross oversimplication otherwise get failure happens runtime perl te arg shift say arg system arg say arg foo foo insecure env path running switch e line thus taint checking type system certain unwanted behavior avoided enabling stricture use strict enabling another type system amongst many thing force nonpackage variable predeclared way failure happens compiletime perl mstrict e foo say hello say foo global symbol foo requires explicit package name forget declare foo e line execution e aborted due compilation error perl developer quite happy compiletype type failure even nt always recognize type mean often thought cor perl general worth asking kind type system need future benefit type system drawn introduction type programming language book previously mentioned use cor type syntax example detecting error common problem many dynamic programming language python class point def init self x selfx x selfy def inverse self return point selfy selfx point point inverse print pointx pointx foo print pointx print foo python considered unpythonic validate data faced million line codebase supposed know class good core perl better code arguably much worse package point sub new class x return bless x x class sub x self shift self x shift return self x sub self shift self shift return self sub inverse self shift return point new self self x fortunately developer gotten tired related bug code protect programmer cor would something like class point x reader writer new isa num method invert return point new x x tried assign string foo x get exception however x isa int safety get standard perl would try throw away information language would return arguably wrong type system perl would suggest get exception least warning nt want float silently converted integer want type change coerce integer unfortunately yes context talking return value function complicated sub list return sub array array return array list list array array say list say array say list print say array print due weird combination context list array container list though container nasty habit handing naked list running away design system type safety face without gutting context retrofitting type system language explicitly designed one filled pitfall documentation consider x isa int method foo bar isa num baz isa str read code get reasonable idea kind data need unlike pod form documentation documentation get sync program program tool javadoc produce huge amount genuinely useful documentation variety format reading information would lovely future version perldoc could take advantage safety type system often guarantee various kind safety programming perl taint mode one type system however array bound checking another c language example expects check array boundary language throw bound exception compiletime harder sound runtime perl simply resizes array fly avoid overflow error type safety would could achieve though imagine secret modifier example proposed seriously password isa secret str readline wherever password printed resulting string would stack trace see printed command line interpolated string cor declared class secret might effectively add method like following final method tostring attempt override subclass role would fatal maybe could go preventing data written swap automatically clearing memory variable go scope sort safe thing decent type system would get original information secure way let say need salt run blowfish save result database make secret secure unusable make usable secure knowing fun trick play namespaces perl suspect naïve scheme protect data would fail still exactly sort safety decent type system improve though guarantee efficiency one might take time clear goal strive declare type integer lot internal stuff perl would longer need store scalar least would always return valid value iv slot never check another slot scalar however expect first implementation would actually slow perl hey got ta check type offering way turning type checking exhaustive testing shipping production would bad idea someone going propose human versus computer original version c even released type integer character array integer character pointer type really help human help computer however advent oo system could declare something instance class thus type system became bit humanfriendly type matched programmer need computer need though thing like bicycle yourbike new bicycle useful repetition bother raku avoid repetition operator bicycle yourbike new cor also humanfriendly though unclear best way implement could possibly implement form generic yourbike isa bicycle new would assign yourbike type get unclear gain u leaving type annotation alternatively could implement operator yourbike bicycle new args expect many perl developer would unhappy one tried hard limit adding new syntax language suggestion welcome improve typing without creating overly verbose language however many case type almost good enough quite want integer must greater given number steal raku age isa int minimumage get expressive type system geared human need computer need sure could implement minimumage class overkill many situation ultimately lead u road needing subtypes subtype minimumage isa int minimumage age isa minimumage generic want generic cor first glance simply omit type looked various example long data passing something typed omitting type annotation seems enough however love see counterexample type hierarchy yeah need think type hierarchy think one moose reasonable area expertise
6,Lobsters,perl,Perl,Zing - Actor Toolkit and Multi-Process Management System,https://github.com/iamalnewkirk/zing,zing actor toolkit multiprocess management system,name abstract synopsis description actor model inherits zing kernel library zing type attribute scheme method start zing kernel primatives messaging process readymade feature actormodel asynchronous atomicity redis chainable channel clusterable configuration distributed eventdriven fifoqueues hotreloadable logshipping mailbox management multitasking nonblocking parallelism supervisor virtualactors zing launcher zing spawner command zing start scheme stop log see also actor model concurrent computation concurrency goerlang akka project actorkit project orleans project pyakka project reactive manifesto disclosure redis json author license license file project wiki project initiative milestone contributing issue,name zing multiprocess management system abstract actor toolkit multiprocess management system synopsis use zing zing zing new scheme myapp zing execute description distribution includes actormodel architecture toolkit multiprocess management system provides primatives building resilient reactive concurrent distributed messagedriven application perl unfamiliar architectural pattern learn actor model inherits package inherits behavior zing kernel library package us type constraint zing type attribute package following attribute scheme scheme scheme attribute readonly accepts scheme value required method package implement following method start start kernel start method prepares zing kernel executes eventloop primatives distribution provides collection actormodel primitive used create sophisticated powerful distributed system organized within intricate process topology following directory primitive listed classification messaging class facilitate messagepassing communication process base class implement underlying process actor logic readymade class readymade process implementation using callback feature feature implemented using class object following list feature currently enabled toolkit actormodel use zing process zing process new zing process new send action greeting say recv action got distribution provides toolkit creating process actor run isolation communicate process messagepassing asynchronous process use zing domain use zing process zing domain new name peer zing process new name push mailbox mailbox term execute process use zing domain use zing process zing domain new name peer zing process new name mailbox get mailbox address mailbox send registered process message send address discovery mailbox term execute distribution provides multiprocess management system allows process deployed managed separately ability communicate across thread execution atomicity process use zing keyval kv zing keyval new name stash kv send random value data kv recv random process use zing keyval kv zing keyval new name stash kv send random value data kv recv random distribution provides data storage abstraction perform atomic read write leveraging redis default data storage backend chainable use zing process use zing ring zing process new name zing process new name ring zing ring new process ring execute distribution provides mechanism chaining ie joining two process together executing turnbased manner ability allows design complex hierarchical process topology channel process use zing channel chan zing channel new name chat data chan recv broadcast received warn data text process use zing channel chan zing channel new name chat data chan recv broadcast received warn data text distribution provides mean braodcasting communicating multiple process simulaneously channel similar fifo queue clusterable process cluster use zing queue queue zing queue new name task target global pull global queue queue recv process cluster use zing queue queue zing queue new name task target global pull global queue queue recv distribution provides support crosscluster communication thus operation using federated redis data storage backend mean scale deployment without changing implementation configuration configure namespace zingnsapp enable process debugging tracing configure namespace zingns default main zinghandleapp configure commandline tool find catridges zinghometmp configure hostname used process registration configure resource target eg distributing across multiple host zingtargetglobal local configure system datastore default zing redis zingstorezing redis configure redis driver without touching source code configure commandline tool find catridges pid file zingappdir zingpiddirtmp distribution provides environment variable let customize zing operates behaves without need modify source code attribute required fallback sane default distributed process n cluster use zing zing zing new scheme myapp zing execute process n cluster use zing zing zing new scheme myapp zing execute process n cluster use zing zing zing new scheme myapp zing execute distribution provides collection actormodel primitive used create sophisticated powerful distributed system organized within intricate process topology eventdriven process package myapp fileupoad use parent zing process sub receive self data react fileupload event return myapp fileupoad new execute process package myapp texttranslate use parent zing process sub receive self data react texttranslate event return myapp texttranslate new execute distribution provides prerequisite needed develop scalable reactive eventdriven application distributed across one several server fifoqueues process use zing queue queue zing queue new name task pull queue queue send command queue send command queue send command queue send command process use zing queue queue zing queue new name task pull fifo queue queue recv distribution provides highperformance fifo message queue enhance messaging across process order operation event critical duplicate ca nt tolerated hotreloadable use zing use zing daemon daemon zing daemon new name myappsleep app zing new scheme myapp sleep daemon execute pid kill distribution provides zerodowntime hotreloading process watcher supervisor keep app running gracefully reload child process runtime logshipping use zing zang zang zing zang new onperform sub self self log fatal something went wrong return zang execute tap log using commandline tool zing log distribution provides ability ship log individual process specific centralized channel tapped asynchronously especially commandline tool mailbox use zing process zing process new name zing process new name mailbox send mailbox term say ehlo message mailbox recv mailbox reply message say helo distribution provides every process unique mailbox receive message process mean cooperating message passing management use zing kernel kernel zing kernel new scheme myapp logger kernel execute distribution provides kernel process used manage deployment child process used wrap cartridge commandline tool daemonizing process multitasking use zing zang zang zing zang new onperform sub something onreceive sub handle something zang execute distribution provides process eventloop allows perform multiple operation sequence support operating nonblocking manner nonblocking use zing zang zang zing zang new onperform sub self self defer command return return onreceive sub self data return unless self term eq something return zang exercise distribution provides feature allow process operate nonblocking manner yielding deferring operation chunking workload parallelism use zing process zing process new spawn myapp id spawn myapp id distribution provides multiple way executing operation parallel including spawning process via forking guarantee creating zombie process supervisor use zing zang watcher zang zing zang watcher new scheme myapp zang exercise distribution provides watcher process supervise child process also capable multitasking performing operation monitoring supervised process virtualactors use zing zang spawner zang zing zang spawner new queue scheme zang exercise distribution provides ability use virtual actor process actor created ondemand result system event feature enabled zing launcher zing spawner superclass command given following process actor libmyapppm package myapp use parent zing single sub perform something application cartridge specifying fork appmyapp myapp zing commandline application let manage zing application commandline using command start zing start appmyapp start command load application cartridge return scheme run daemon stop zing stop appmyapp stop command find running application pid process id terminates process log zing log level fatal log command tap centralized log source output new event stdout standard output see also actor model concurrent computation concurrency goerlang akka project actorkit project orleans project pyakka project reactive manifesto disclosure following list known way zing like traditional actormodel system zing actor act independently nt beholden system manager zing actor always active run infinite eventloop zing actor communicate unrestricted approved communicator zing actor block using poll block default zing default datastorebackend redis mean system default subject guarantee limitation system data serialized json stored plaintext author al newkirk awncorp cpanorg license copyright c al newkirk et al free software redistribute andor modify term apache license version elucidated license file project wiki project initiative milestone contributing issue
7,Lobsters,perl,Perl,Perl is dying quick. Could be extinct by 2023,https://thehftguy.com/2019/10/07/perl-is-dying-quick-could-be-extinct-by-2023/,perl dying quick could extinct,perl function argument random character valid perl program plottwist http wwwperlcomarticleperlandcgi http http bug stats common language perl php python java c niche language delphi haskell cobol perl rust cobol delphi lifetime projection perl go away apple announced officially interpreter deprecated perl python ruby available o next version macos redhat announced officially python setup outofthebox rhel future version next logical step perl go away question future version macos include scripting language runtimes default hacker news python rhel conclusion thinking learning perl starting new project perl might want reconsider like,personal reflection evolution death programming language force circumstance reverse engineer decommission perl script old company earlier year make one wonder else still using perl remember last time heard perl want see number right away scroll next section young reader may never heard perl popular programming language year ago cobol rail used many language decade le professionally c c java python haskell ada php perl truly unique genuinely unique exotic example support function argument well like exists today mainstream language also based extensive use symbol whereas today language letter keywords variable name function name think fair say perl magic symbol stuff much random character valid perl program sample cgi script perl python php comparison straight copypaste perlcom stack overflow understand plottwist stack overflow answer never work time exception find bug answer end source http wwwperlcomarticleperlandcgi usrbinperl use strict use warning use cgi cgi cgi new param map scalar cgi param cgi param print cgi header type textplain print qq param n k sort key param print join k param k print n param foo bar source http import cgi import cgitb cgitbenable optional debugging print contenttype texthtml print argument cgifieldstorage argumentskeys print argument value source http php foreach get key value echo key value br rn bug http header must separated rn line ending script basic print generating n running linux output thus invalid although chance cgi server robust specific issue note php expose raw header avoid class issue entirely stats chart show programming language popularity relative one another data google trend common language link google trend perl php python java c interesting finding chart perl somewhat popular decade ago onpar c certainly popular enough considered among major programming language time perl decline reaching zero market share chart seeing onward single pixel google trend rounding nearzero value think fair say perl considered dead language definitely something use new project niche language let compare perl niche language low adoption link google trend delphi haskell cobol perl rust well still popular cobol cobol programming language running mainframe used financial application specifically designed support integer arithmetic transaction record often considered legacy really hard migrate large old critical typical application delphi programming language ide based pascal like c based c designed write desktop application ide gui editor drag drop widget efficient easy use maybe first provide good story came eclipsed c c java year perl conference lifetime projection curious dying faster cobol delphi perl let find graph show linear polynomial trend programming language note regression curve happen overlap cobol stable predictable language indeed believe linear projection perl could extinct month delphi cobol would outlive far go course language go extinct maybe think order magnitude le developer stage really much left typically makingselling languagetooling among last know well curious googlers unmaintained software decay hardware software evolution point suddenly stop working unfixable example executable run window ubuntu whatever reason looking turn compiler run anymore either ouch software lifecycle coupled lifecycle platform developed run strong risk associated little used divested platform perl go away perl python always come preinstalled linux remember well actually posix specification something requirement time changed though actively removed major o apple announced officially interpreter deprecated perl python ruby available o next version macos redhat announced officially python setup outofthebox rhel future version matter time distribution follow next logical step perl go away question apple announcement future version macos include scripting language runtimes default discussion hacker newsredhat announcement python rhel conclusion thinking learning perl starting new project perl might want reconsider nothing personal perl stats next need figure one took longer build microsoft window great pyramid like like loading
8,Lobsters,perl,Perl,Announcing Perl 7,https://www.perl.com/article/announcing-perl-7/,announcing perl,announcing perl brian foy darren wood perl conference cloud preparing perl perl going perl mostly free setting happening perl happening cpan porter jump major version raku disappearing appearing postfix dereferencing operator right turn indirect object notation preparing perl perl school bottom line,announcing perl jun brian foy image credit darren wood flickr morning perl conference cloud sawyer x announced perl new plan moving forward work perl already underway going huge change code syntax perl modern default set stage bigger change later latest book preparing perl go much detail perl going perl mostly perl going different saner modern default enable thing already enabled major version jump set boundary thing future remember perl mean language default probably wanted perl early day perl easy couple decade world complicated kept adding pragmas perl commitment backward compatibility change default setting back old day c include lot boilerplate start something use use strict use warning use open qw std feature qw indirect use feature qw signature warning qw experimental signature slightly better later get strict free using setting minimum version use use use warning use open qw std feature qw indirect use feature qw signature warning qw experimental signature perl chance make default even without specifying version perl still perl extreme backward compatibility behavior perl get modern practice minimal historical baggage personally hoping signature make cut still much done make unicode default probably need keep use use open qw std might miss seedier feature using anyway indirect object notation larry wall said something c programmer cgi new cgi indirect object perl cgi cgi new direct object feature really disappear perl already setting different default happening perl one taking perl away go long term maintenance lot longer two year rolling support two latest user version might decade half time perl already around happening work happening need worry six month first release candidate appear target user release perl within next year release candidate along way easy promise keep since perl mostly different default big rewrite new feature although currently experimental feature may stabilize please choose signature cpan comprehensive perl archive network cpan almost module maintained module people using still work rest compatibility mode remember perl mostly need change much may know porter test new version almost cpan long history tool check effect change may perl community module author often get message various people mostly andreas koenig slaven rezić weird thing module may break new perls usually something need update anyway tracking problem existing code solved problem fixing code onerous still perl better practice separate cpan perl one said jump perl developer want redo already working change manageable side quest possible also pause perl author upload server received quite bit love past couple year make easier adapt future need people working experienced talented made codebase much tractable jump major version major version different contract user major version jump change contract new default behavior even conflict past way reset setting old perl default like perl code still code mostly syntax behavior though sawyer speaks three major market segment perl user people never going change code people use new feature people starting scratch perl social contract extreme backward compatibility amazingly successful problem extreme backward compatibility work update code help two segment new feature crowd deal longer boilerplate section every program newbie wonder include much create program people stackoverflow hector missing pragmas two part answer first perl already taken known raku long time ago thought ambitious rewrite effort would replace short happened language gone live life next available number next cardinal number line unheard make jump php went directly time steal something community consider weird jump history solaris solaris java java postgres major version postgres major version window window xp vista tex new version closely approximates π least perl disappearing much thing disabled default essentially perl knob dial different place thing learn live without even perl land likely candidate first round change indirect object notation bareword filehandles except maybe standard filehandles fake multidimensional array hash old perl trick oldstyle prototype definition use prototype instead appearing much perl mostly perl feature enabled default anything get new feature postfix dereferencing new isa operator several feature benefit new social contract major version provides hard boundary new feature exist default one side without disturbing side right need older perl run code going fine old version going disappear like perl still available version wish run code run without problem stricture warning using modern perl style probably mostly good bareword filehandles start converting indirect object notation messy code luck compatibility mode assist transition perl perl pragma set knob dial back old setting one version thing use compat act like perl default module issue shake compatibility mechanism good news thing already tested major perl stakeholder production setting paper plan already happening rough edge sanded one knob dial place already turn indirect object notation expect two knob dial maybe like multidimensional bareword filehandle collecting information preparing perl latest offering perl school leanpub bottom line perl different setting code work mess expect user release within year
9,Lobsters,perl,Perl,Perl 5.32 released,https://metacpan.org/pod/release/XSAWYERX/perl-5.32.0/pod/perldelta.pod,perl released,name description core enhancement isa operator class instance operator perlop unicode supported http chained comparison capability perlop operator precedence associativity perlop new unicode property supported http http possible write comparison n p name perlunicode wildcards property value perlunicode improvement perllocale mbrlen mbrtowc wcrtomb alpha assertion longer experimental pla pattern perlre plb pattern perlre nla pattern perlre nlb pattern perlre script run longer experimental script run perlre feature check faster gh perl developed github http perlsec compiled pattern dumped optimization security buffer overflow caused crafted regular expression integer overflow via malformed bytecode produced crafted regular expression buffer overflow caused crafted regular expression additional note incompatible change certain pattern matching feature prohibited compiling unicode property value wildcard subpatterns wildcards property value perlunicode unused function removed bug fix may caused pattern longer compile selected bug fix property always override official unicode one userdefined character property perlunicode gh modifiable variable longer permitted constant perl use string code point forbidden use code point string bitwise operator perldeprecation accept argument plain string treated number range operator perl disallowed lookahead lookbehind assertion perl performance enhancement gh module pragmata updated module pragmata archive tar autodie b b deparse benchmark charnames class struct compress raw compress raw zlib cpan dbfile devel ppport diagnostics digest dumpvalue dynaloader encode encoding english exporter extutils cbuilder extutils makemaker feature indirect object syntax file find file glob file stat filter simple getopt long hash util gh langinfo langtags io io socket perl ipc cmd ipc json pp math bigint math bigint fastcalc module corelist module load conditional module metadata mro net ping opcode open overload parent perlfaq perlio perlio encoding perlio via pod html pod simple podlators posix safe scalar util selfloader socket storable test test perl sys hostname sys syslog term ansicolor test simple thread thread queue thread thread shared tie file tie hash namedcapture tie scalar tie stdhandle time hire perl time piece unicode normalize unicode ucd vms stdio warning file x apitest removed module pragmata documentation change existing documentation http plain old comment perlsyn plain old comment perlsyn plain old comment perlsyn updating link http searchcpanorg http metacpanorg gh extutils xssymset gh http rtperlorg diagnostics perldiag new diagnostics new error new warning change existing diagnostics character following c must printable ascii use instead sequence c invalid c c clearly written simply nonoctal character c terminates early resolved resolved nonoctal character c terminates early resolved perldiag use code point allowed permissible max x ca nt use global constant lexical variable potentially modified elsewhere longer permitted incompatible change utility change io compress base streamzip configuration compilation perl perl perlintern perlapi devel ppport perl testing gh platform support discontinued platform platformspecific note perl gh gh perl internal change perl perlapi perlapi perlapi devel ppport x code use various macro dealing perldeprecation parsesubsignature perl perl evalpv perl perl perl selected bug fix require perlfunc gh gh diagnostics gh gh gh gh gh gh gh gh gh gh gh gh perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl obituary acknowledgement reporting bug http http wwwperlorg http security vulnerability contact information perlsec give thanks see also,name perldelta new perl description document describes difference release release upgrading earlier release first read describes difference core enhancement isa operator new experimental infix operator called isa test whether given object instance given class class derived obj isa package name detail see class instance operator perlop unicode supported see http detail chained comparison capability comparison operator associativity chain operator precedence never operator different precedence x z behaves exactly like x z assuming simple scalar look read perlop operator precedence associativity perlop new unicode property identifierstatus identifiertype supported unicode process revising regular expression requirement http part wanting property exposed one nt part strict ucd unicode character database two used examining input security purpose detail usage http possible write qrp name qr p na smilinggrinning face unicode name property accessible regular expression pattern alternative n comparison two method given comparison n p name perlunicode second example show wildcard subpatterns also usable property see wildcards property value perlunicode improvement posix mblen mbtowc wctomb posix mblen mbtowc wctomb function work shift state locale threadsafe compiler executed platform locale threadsafety length parameter optional function always executed current c language locale see perllocale locale stateless notably rarely encountered iso maintain state call function previously state cleared every call state reset unless appropriate parameter undef threaded perls function mbrlen mbrtowc wcrtomb available substituted plain function make function threadsafe executing locale threadsafe platform string length parameter mblen mbtowc optional useful wish restrict length parsed source string le actual length alpha assertion longer experimental see pla pattern perlre plb pattern perlre nla pattern perlre nlb pattern perlre use longer generates warning existing code disables warning category experimental alphaassertions continue work without change needed enabling category effect script run longer experimental see script run perlre use longer generates warning existing code disables warning category experimental scriptrun continue work without change needed enabling category effect feature check faster previously feature check parser required hash lookup feature set outside feature bundle optimized bit mask check gh perl developed github perl developed github find u http nonsecurity bug reported via github security issue continue reported documented perlsec compiled pattern dumped optimization primarily useful tracking bug regular expression compiler dump happens ddebugging perls specify drv command line perl pattern compiled within scope use qw debug dumppreoptimize use qw debug compile extra second case display information well security buffer overflow caused crafted regular expression signed sizet integer overflow storage space calculation nested regular expression quantifier could cause heap buffer overflow perl regular expression compiler overwrites memory allocated regular expression storage space attacker supplied data target system need sufficient amount memory allocate partial expansion nested quantifier prior overflow occurring requirement unlikely met system discovered manhnd tarantula team vincss member vingroup integer overflow via malformed bytecode produced crafted regular expression integer overflow calculation offset instruction regular expression engine could cause corruption intermediate language state compiled regular expression attacker could abuse behaviour insert instruction compiled form perl regular expression discovered hugo van der sanden slaven rezic buffer overflow caused crafted regular expression recursive call sstudychunk perl regular expression compiler optimize intermediate language representation regular expression could cause corruption intermediate language state compiled regular expression discovered sergey aleynikov additional note application written perl would vulnerable flaw evaluates regular expression supplied attacker evaluating regular expression fashion known dangerous since regular expression engine protect denial service attack usage scenario incompatible change certain pattern matching feature prohibited compiling unicode property value wildcard subpatterns feature either inappropriate interfere algorithm used accomplish task complete list wildcards property value perlunicode unused function posix mbstowcs posix wcstombs removed function could never worked due defective interface specification clearly demand given one ever complained many year function claimed available hence socalled support dropped bug fix may caused pattern longer compile see selected bug fix heuristic previously used may let construct compile perhaps programmer intended effect error none known possible erroneous construct longer compile p userdefined property always override official unicode one previously userdefined property declared prior compilation regular expression pattern contains definition used instead official unicode property name always override official property change could break existing code relied likely unwittingly previous behavior without fix unicode released new version new property happens name one long using program would break upgraded perl used new unicode version see userdefined character property perlunicode gh modifiable variable longer permitted constant code like var sub sub var var referenced elsewhere sort modifiable context produce exception sub defined error avoided adding return sub definition sub sub return var deprecated since perl perl use vec string code point forbidden string represented internally vec bitoriented operation likely give unexpected result string deprecated perl use code point string bitwise operator us already illegal previous deprecation cycle remaining us prohibited deprecated perl see perldeprecation sys hostname hostname accept argument usage deprecated perl fatal plain string treated number range operator previously range would produce range numeric string produce empty list also mean produce list integer previously would produce list string due special case treated string starting string range like produced nt specially handle string perl k disallowed lookahead lookbehind assertion disallowed cause unexpected behaviour noone could define desired behaviour perl performance enhancement mystrnlen sped system nt strnlen implementation grokbinocthex grokbin grokoct grokhex sped groknumberflags sped sort noticeably faster case sort b sort b gh module pragmata updated module pragmata archive tar upgraded version autodie upgraded version b upgraded version b deparse upgraded version benchmark upgraded version charnames upgraded version class struct upgraded version compress raw upgraded version compress raw zlib upgraded version cpan upgraded version dbfile upgraded version devel ppport upgraded version test file generated identical generated posixlike system diagnostics upgraded version digest upgraded version dumpvalue upgraded version previously dumping element array encountering undefined value string printed would empty array changed apparently originally intended empty slot dynaloader upgraded version encode upgraded version encoding upgraded version english upgraded version exporter upgraded version extutils cbuilder upgraded version extutils makemaker upgraded version feature upgraded version new indirect feature added enabled default allows turning indirect object syntax file find upgraded version test longer require either file drive root directory writable root directory file glob upgraded version file stat upgraded version filter simple upgraded version getopt long upgraded version hash util upgraded version synopsis updated example code stopped working newer perls gh langinfo upgraded version langtags upgraded version document environment variable io upgraded version io socket longer cache zero protocol value since indicates implementation select protocol mean platform nt implement soprotocol given socket type protocol method may return undef supplied always honoured call send method perl iocompress upgraded version ipc cmd upgraded version ipc upgraded version json pp upgraded version math bigint upgraded version math bigint fastcalc upgraded version module corelist upgraded version module load conditional upgraded version module metadata upgraded version mro upgraded version net ping upgraded version opcode upgraded version open upgraded version overload upgraded version parent upgraded version perlfaq upgraded version perlio upgraded version perlio encoding upgraded version perlio via upgraded version pod html upgraded version pod simple upgraded version podlators upgraded version posix upgraded version upgraded version safe upgraded version scalar util upgraded version selfloader upgraded version socket upgraded version storable upgraded version use note test optional test work around circular dependency test installing old perls cpan vstring magic string disallowed regular expression object nt properly counted object id purpose retrieve would corrupt resulting structure cause runtime error case perl sys hostname upgraded version sys syslog upgraded version term ansicolor upgraded version test simple upgraded version thread upgraded version thread queue upgraded version thread upgraded version thread shared upgraded version tie file upgraded version tie hash namedcapture upgraded version tie scalar upgraded version tie stdhandle upgraded version time hire upgraded version removed obsolete code support perl classic macos perl time piece upgraded version unicode normalize upgraded version unicode ucd upgraded version vms stdio upgraded version warning upgraded version upgraded version file upgraded version x apitest upgraded version removed module pragmata documentation change existing documentation attempted update documentation reflect change listed document find missed open issue http additionally following selected change made simplify regnode definition update bound nbound definition add anyofhs regnode node like anyofhb used one leading byte matched code point anyofhb used avoid convert code point something wo nt match check first byte encoded target desired one thus ruling possible code point updated mention croak sv downgraded svsetpvn updated mention flag changed function terminating nul byte guaranteed documentation plphase added documentation grokbin grokoct grokhex updated clarified add documentation experimental isa operator experimental isa warning emitted use isa operator operator currently experimental behaviour may change future release perl caller like file line filename line number returned may altered mechanism described plain old comment perlsyn file altered mechanism described plain old comment perlsyn line altered mechanism described plain old comment perlsyn return mention return block open open section renovated significantly longer suggesting using perl malloc modern system malloc assumed much better perl implementation documentation embedfnc flag removed embedfnc sufficient comment within anyone changing file see comment first entry redundant updated documentation added missing apidoc line documentation surrounding open handle usage modernized prefer open lexical variable instead barewords various update fix including making example strictsafe replacing w use warning setlocale warning threaded build updated note apply perl later posix sigset new updated state throw error supplied signal added set additionally following selected change made updating link link defunct http searchcpanorg site point equivalent http metacpanorg url gh man page extutils xssymset installed vms platform module installed gh url changed http stale link updated applicable url documentation moved using http protocol http also affect location bug tracker http rtperlorg link library address sanitizer system tool gone stale updated working link link old email address gone stale updated working link diagnostics following addition change made diagnostic output including warning fatal error message complete list diagnostic message see perldiag new diagnostics new error new warning change existing diagnostics character following c must printable ascii extra text added end raised regular expression pattern compilation marking precisely pattern occurred use instead extra text added end raised regular expression pattern compilation marking precisely pattern occurred sequence c invalid extra text added end raised regular expression pattern compilation marking precisely pattern occurred c c clearly written simply extra text added end raised regular expression pattern compilation marking precisely pattern occurred nonoctal character c terminates early resolved includes phrase terminates early extra text added end raised regular expression pattern compilation marking precisely pattern occurred instance text resolution clarified resolved perl message longer generated instead nonoctal character c terminates early resolved perldiag used instead use code point allowed permissible max x instance message previously output hex digit b c e f lower case consistently upper case following three diagnostics removed replaced expecting interpolated extended charclass regex marked expecting close paren nested extended charclass regex marked expecting close paren wrapper nested extended charclass regex marked expecting flag regex marked code point x unicode portable warning removed line code point require larger bit word code point large longer legal platform ca nt use global error message slightly reformatted original ca nt use global particular misleading error message like ca nt use global rendered ca nt use global subroutine signature constant lexical variable potentially modified elsewhere longer permitted error message replaces former constant lexical variable potentially modified elsewhere deprecated allowed perl reflect fact previously deprecated usage transformed exception message classification also updated deprecated f fatal see also incompatible change n restricted one character emitted circumstance previously n inverted character class range endpoint restricted one character due new circumstance added perl nt covered earlier wording utility change new utility included part io compress base upgrade streamzip creates zip file stdin program read data stdin compress zip container default write streamed zip file stdout configuration compilation configure clang add include stdlibh configure probe futimes strtoll strtoul strtoull strtouq otherwise probe would fail compile use compile run test lchown satisfy clang reliably detect c compiler add include stdioh configure probe getpgrp setpgrp use printf c compiler may fail compilation instead warning check compiler handle inline attribute check character data alignment configure correctly handle previously interpreting turned fpccstructreturn perl longer probe defaulting define platform check errorprone done platform perl documentation hint building perl zos native ebcdic updated still work progress new probe mallocusablesize added improvement configure detection c clang work ongoing andy dougherty perl autodocpl tool regenerates perlintern perlapi overhauled significantly restoring consistency flag used embedfnc devel ppport allowing removal many redundant apidoc entry code echo macro defined used dtrace rule originally changed freebsd freebsd make apparently predefines solaris make predefine echo broke rule solaris perl bison version supported testing test added changed reflect addition change release furthermore significant change made trunswitchest longer us reuses tmpinplace directory may prevent spurious failure gh various bug posix mbtowc fixed potential race thread avoided previously returned wide character could well garbage various bug posix wctomb fixed potential race thread avoided previously would segfault string parameter shared nt preallocated string sufficient length hold result certain test output scalar containing control character unicode fixed ebcdic tcharsettoolspl avoid work ascii platform treregexpt speed many regex test ascii platform trepatt skip test nt work ebcdic platform support discontinued platform window ce support building perl window ce removed platformspecific note linux cc used populate plibpth cc clang perl netbsd fix compilation perl netbsd g gh window configuration ccflags optimize separate posix platform gh support building perl visual c removed locale test could crash due window bug separately due crt throwing exception locale name nt validly encoded current code page second decode locale name always decode perl topmagict could fail environment variable starting foo already existed mymalloc perlmalloc build fixed solaris configure find recent version oracle developer studio compiler found optdeveloperstudio configure us detected type gethostby function allowing perl compile certain configuration solaris vms release patch kit vsi provided support number previouslymissing feature system patch kit installed perl configuration process detect presence header stdinth following function fpclassify isblank isle llrint llrintl llround llroundl nearbyint round scalbn scalbnl default vms zos perl tested zos following caveat static build default build reliably using locale zos handle lcmessages category properly compiling perl add following configure option configure option accflagsdnolocalemessages zos support locale thread compiling threaded perl add following configure option configure configure option accflagsdnolocale cpan module shipped perl fail least one selftests archive tar config perl v cpan meta cpan meta yaml digest digest sha encode extutils makemaker extutils manifest http tiny io compress ipc cmd json pp libnet mime module metadata perlio viaquotedprint pod checker podlators pod simple socket test harness cause failure range selftest flawed module actually work fine module nt work ebcdic platform internal change savepvn len parameter sizet instead since handle longer string bit lexer perlyylex tokec previously single function relying heavily goto lot widelyscoped local variable work pulled apart dozen smaller static function largest remaining chunk yylwordorkeyword little line consists single switch statement whose case group independent much easier understand maintain oslevel signal handler type sighandlert used perl core declared three parameter o always told call one argument fixed declaring one parameter see merge commit full detail code handle tr extensively revised fixing various bug especially source andor replacement string contain character whose code point bug undocumented one circumstance squeezing done based source rather replacement documented bug got fixed perl new macro x writer dealing unicode string created perlapi safer face malformed input perlapi safe perlapi wo nt read past nul character backported devel ppport later added plcurstackinfo sicxsubix field record stack index recently pushed subformateval context set restored automatically cxpushsub cxpopsub etc would need manually managed unusual manipulation context stack various macro dealing character type classification changing case input encoded require extra parameter prevent potential read beyond end buffer use generated deprecation warning since perl detail x code use various macro dealing perldeprecation new parser function parsesubsignature allows keyword plugin parse subroutine signature use feature signature effect allows custom keywords implement semantics similar regular sub declaration include signature perl since platform need hold mutex temporarily switching locale new macro storelcnumericsettoneededin withlcnumericsettoneeded withlcnumericsettoneededin added make easier safely efficiently part perl memory bookkeeping overhead allocating op structure reduced byte per op system evalpv longer stringifies exception croakonerror true perl perldestructlevel environment variable formerly honoured perl binary built debugging support checked perl build normal use force perl individually free every block memory allocated exiting useful using automated leak detection tool valgrind api evalsv accepts grethrow flag flag set exception thrown compiling executing supplied code rethrown evalsv return perl part fix perl perlparse return nonzero exit called begin unitcheck check block function recursively walked op tree compilation made nonrecursive avoids segvs stack overflow op tree deeply nested n one n two especially code autogenerated particularly noticeable code compiled within separate thread thread tend small stack default selected bug fix previously require perlfunc would treat special builtin sv plsvundef value inc previous require failed treating undefined svs previous require succeeded could cause unexpected success require eg local inc inc fixed gh eval group regular expression longer unintentionally trigger eval without po change exceeded limit regex gh extended bracketed character class wrongly raise error case previouslycompiled class interpolated another heuristic previously used replaced reliable method hence diagnostics generated changed see diagnostics debug display say specifying dr use appropriate option compiled unicode property wildcard subpatterns longer extraneous output fix assertion failure regular expression engine gh fix coredump pphotc b unopaux auxlist gh loading io threadsafe gh p userdefined override official unicode gh prior patch override sometimes effect properly handle filled il regnodes multichar fold compilation error make minitest gh move implementation core read beyond buffer grokinfnan gh workaround glibc bug lcmessages gh printf sprintf n format could cause panic debugging build report incorrectly cached length value producing flagged string gh tokenizer extensively refactored gh gh use strict sub enforced bareword constant optimized multiconcat operator gh memory leak regular expression pattern fixed gh perl longer treat string starting hex binary number respectively converting string number reverts change behaviour inadvertently introduced perl intended improve precision converting string floating point number perl matching string regular expression containing unicode literal could leak sv match attempt perl overload octal binary floating point literal always passed string prefix instead appropriate prefix perl die correctly propagates exception instead ignoring perl longer asserts snoop perl exception thrown readonly could result infinite recursion perl tried update throw another exception resulting stack overflow perl replaces copy simple writable sv perl setting properly set supplementary group id necessary privilege perl close pipe preemptively clear perlio object io sv prevents second attempt close already closed perlio object signal handler call die exit close waiting child process complete perl sprintf x would cause buffer overflow due mishandling negative precision value perl scalar reference could cause erroneous assertion failure compilation perl captureall alias documented rather incorrectly alias perl capture nt work capture mentioned first similarly captureall captureall though captureall currently nt used perl extraordinarily large floating point format width could cause integer overflow underlying call snprintf resulting assertion formatted floating point width limited range int return value snprintf perl parsing following construct within subparse code code heree changed match parsed normally print fh longer produce syntax error code like time e properly produce ambiguous use time resolved time warning warning enabled x space subparse properly produce better written warning warning enabled attribute used subparse perl incomplete hex binary literal like treated x b part next token perl spurious subparse code heree code longer confuses parser previously subparse bracketed generated token spurious would close construct without normal subparse clean confusing parser possible causing assertion failure construct surrounded artificial token ca nt included source perl reference assignment sub foo bar silently nothing main package perl svgets recovers better target sv modified signal handler perl readline foo evaluates foo scalar context previously would evaluated list context since readline pop one argument stack stack could underflow left unexpected value stack perl parsing incomplete hex binary literal changed treat literal leaving following x b parsed part next token could lead silent change behaviour incomplete hex binary literal produce fatal error perl evalpv croakonerror flag throw even exception false overloaded value perl init block program longer run exit called within begin unitcheck check block perl open fh undef open temporary file append mode writes seek end file writing perl fixed segv searching source uninitialized value warning op whose subtree includes opmultideref perl obituary jeff goff jgoff drforr integral part perl raku community dear friend u passed away march drforr prominent member community attending speaking countless event contributing numerous project assisting helping way could passing leaf hole heart community sorely missed acknowledgement perl represents approximately month development since perl contains approximately line change across file author excluding autogenerated file documentation release tool approximately line change pm c h file perl continues flourish fourth decade thanks vibrant community user developer following people known contributed improvement became perl aaron crane alberto simões alexandr savca andreas könig andrew fresh andy dougherty ask bjørn hansen atsushi sugawara bernhard wiedemann brian foy bryan stenson chad granum chase whitener chris bingo williams craig berry dagfinn ilmari mannsåker dan book daniel dragan dan kogai dave cross dave rolsky david cantrell david mitchell dominic hargreaves e choroba felipe gasper florian weimer graham knop håkon hægland hauke hmerijn brand hugo van der sanden ichinose shogo james e keenan jason mcintosh jerome duval johan vromans john lightsey john paul adrian glaubitz kangmin liu karen etheridge karl williamson leon timmermans manuel mausz marc green matthew horsfall matt turner max maischein michael haardt nicholas clark nicolas r niko tyni pali paul evans paul johnson paul marquess peter eisentraut peter john acklam peter oliver petr písař renee baecker ricardo signes richard leach rus allbery samuel smith santtu ojanperä sawyer x sergey aleynikov sergiy borodych shirakata kentaro shlomi fish sisyphus slaven rezic smylers stefan seifert steve hay steve peter svyatoslav thibault duponchelle todd rinaldo tomasz konojacki tom hukins tony cook unicode consortium vanl vickenty fesunov vitali peil yves orton zefram list almost certainly incomplete automatically generated version control history particular include name much appreciated contributor reported issue perl bug tracker many change included version originated cpan module included perl core grateful entire cpan community helping perl flourish complete list perl historical contributor please see author file perl source distribution reporting bug find think bug might check perl bug database http may also information http wwwperlorg perl home page believe unreported bug please open issue http sure trim bug tiny sufficient test case bug reporting security implication make inappropriate send public issue tracker see security vulnerability contact information perlsec detail report issue give thanks wish thank perl porter work done perl running perlthanks program perlthanks send email perl porter list show thanks see also change file explanation view exhaustive detail changed install file build perl readme file general stuff artistic copying file copyright information
10,Lobsters,perl,Perl,Conference in the Cloud – A Perl & Raku Conference (June 24-26 2020),https://perlconference.us/tpc-2020-cloud/,conference cloud perl raku conference june,world clock meeting planner introduction go perl foundation register conference cost register speaker schedule session hosted youtube youtube youtube,kept u home however still great thing share perl raku join u event including interactive talk forum conference cloud expect see perl raku presentation core presentation topic past included perl perl raku organizer plan continue way moving forward like perl raku conference conference cloud organized run volunteer two presentation track minute talk variety technical topic throughout day conference date june order accommodate time zone possible decided host pm edt utc world clock meeting planner help visualize look like time zone also master class scheduled saturday june dave rolsky offer introduction go class edt cost per attendee proceeds go perl foundation purchase ticket register conference cost attendee want interact live speaker attendee bofs panel q need pay minor registration fee fee inclusive entire event fee help secure safe event help cover minor cost hosting register speaker presentation given volunteer speaker presentation conference submitted call presentation cfp selected organizer volunteered talkscommittee cfp ended check schedule session hosted conference organizer goal mind selecting online platform host conference cloud selected platform needed easytouse tool administrator well participant technical level needed offer operating support macos window also linux operating system given planning time constraint nature conference organizer decided ready box solution best choice perl raku conference cloud tprcic going online interactive event hosted zoom platform broadcast recorded streamed simultaneously youtube tprcic organizer going best set platform safely possible configured presenter ability talk present others muted need request access speak ask question make comment share video access interactive conference zoom granted people register advance agree code conduct pay minimal fee presentation streamed live youtube pay fee use zoom still access conference content bofs available youtube
11,Lobsters,perl,Perl,Find the most recent/dependent RFCs from a list,https://strayalpha.com/software/rfcwhatimean/rfc-what-i-mean.pl,find recentdependent rfcs list,,usrbinperl rfcwhatimean find recentdependent rfcs list j touch touch strayalphacom http wwwstrayalphacom copyright c revision date aug copyright c j touch right reserved permission use copy modify distribute software documentation source binary form noncommercial purpose without fee hereby granted provided copyright notice appear copy copyright notice permission notice appear supporting documentation documentation advertising material material related distribution use acknowledge software developed author name author may used endorse promote product derived software without specific prior written permission author make representation suitability software purpose software provided without express implied warranty including without limitation implied warranty merchantability fitness particular purpose usage rfcwhatimean rfcindextxt yourfiletxt outputfiletxt rfcindextxt rfc index file wwwrfceditororg yourfiletxt file rfcs check format rfcrfc output rfcs really mean two set first set one line rfc appropriate successor including update single line rfcs augment replace note indicates replace ie obsolated indicates also add ie updated second set one line sorted unique set rfcs want single line rfcs mean output may include warning error appear errorwarn version history nov initial release aug clarified updatedobsoleted support rfc number lengty global variable debug set print debugging statement rfc rfcindex entry index obsoletedby thing obsolete index updatedby thing update index numlen length rfc number debug print sub dprint name shift shift print name line sr n reset new rfc entry line whole prevents junk rfc rfc whole dprint readrfcs whole whole whole line grab last one got whole prevents junk hold rfc whole maxrfcnum hold maxrfcnum hold dprint readrfcs whole figure long largest rfc num numlen length sprintf maxrfcnum return rfc grab list rfc nums obsoletesupdates list used getstructure sub getlist shift result ienstdnicrtrrfc push result warn errorwarn getlist missed return result creates datastructure relate current rfcs right one sub getstructure populate obsoleteby updatedby k olist foreach k sort key rfc rfc k obsoletedsby olist getlist dprint getstructureobsoletedby k join olist rfc k obsoleted entry olist obsoletedby k join olist rfc k updatedsby olist getlist dprint getstructureupdatedby k join olist rfc k updated entry olist updatedby k join olist given desired rfcs find list really want sub findwhatimean shift outlist inlist finallist changed item updated dprint findwhatimean starting push inlist dprint findwhatimean repeat inlist join inlist outlist foreach item inlist dprint findwhatimean foreach changed dprint findwhatimean looking item check whether replace item defined obsoletedby item push outlist split obsoletedby item dprint findwhatimean item obsoletedby item changed else keep one dprint findwhatimean item ok item eq nt add wo nt show list yet add end citation updated else push finallist item check whether add item defined updatedby item dprint findwhatimean item updatedby item push outlist split updatedby item changed inlist outlist changed print rfcs replace finallist print replace updated join finallist n updated add current one list citation push finallist return finallist sort u sub findset inlist inset item foreach item inlist inset item return sort key inset main local infile yourfile list print rfcwhatimean die usage rfcindextxt yourfiletxtn argv open infile argv die rfcindextxt file argv could opened readrfcs infile getstructure get input file list open yourfile argv die file argv could opened dprint main reading argv line line line srfc make rfcs ndigit format per rfcindextxt sprintstring sprintf rfc dd numlen dprint main rfc list sprintf sprintstring push rfclist sprintf sprintstring print nrfcs augment updated replace obsoleted nn elt wholelist entry foreach elt sort rfclist push wholelist findwhatimean elt list findset wholelist print nnrfcs mean sorted list reference nn print join n list n
12,Lobsters,perl,Perl,Perl scripts for phylogenomic analysis,https://github.com/daisieh/phylogenomics,perl script phylogenomic analysis,join github today sign file permalink resource license reload reload,mostly perl script something related phylogenomic analysis dismiss join github today github home million developer working together host review code manage project build software together sign file permalink failed load latest commit information type name latest commit message commit time repo contains visualization analysis script written help perform phylogenomic analysis almost written perl require bioperl package script require bioperl package either call bio package directly require subfunctions file bioperlsubfuncspl might easiest include directory path various subfunction file easy interpreter find circlegraphpm objectoriented package make easier draw graph along circle make postscript object us postscript simple package subfuncspl random hodgepodge utility function write may move specific subfunction file reduce overhead bioperlsubfuncspl helper function require bioperl package circlegraphpl helper function draw specific kind circular graph subdirs contain script various task analysis script perform various analysis datasets introgression script calculate statistic introgression analysis selection script use bioperl paml hyphy analyze selection gene converting script convert file one format another combine file various way filtering script reduce complexity parsing us bioperl slice dice sequence file various way plastome script take input plastome draw circle graph represent data reporting script take vcf sequence file report statistic mostly perl script something related phylogenomic analysis resource license perform action time signed another tab window reload refresh session signed another tab window reload refresh session
13,Lobsters,perl,Perl,A Review of Perl 6 (Raku) (2017),https://www.evanmiller.org/a-review-of-perl-6.html,review perl raku,review perl raku evan miller update learning perlâ number perlâ website string regexes grammar note identifier array hash list itemization function way nativecall libxlsxwriter perl library xlsx writer perlâ library generating excel spreadsheet hack concurrency degree readstat library highlighting bug great come never heard note evanmillerorg twitter r wizard data le time communicate discovery visually back evan home page subscribe r twitter youtube,review perl raku evan miller august update feb perl called raku updated review title left review body intact amazing masterpiece said keeping eye fixed glass case artist little conrad lord jim perlâ reminds phd dissertation first five year would ask around christmas finished putting le le stock answer year wore lacking evidence dissertation form actually existed made completion date kind running joke familial version big dig new second avenue subway line enough selfimposed deadline came went stopped joking enough year stopped asking case missed think everyone perlâ released world year half ago christmas incidentally effort nominally spanning almost sixteen year think certain dissertation also completed point market new programming language write competitive impenetrable like freshly minted phd one seems sure perlâ market prospect like justturnedin dissertation one seems know whether fruit many labor actually worth damn help purveyor perlâ provide hint actually language besides facile answer whatever want perlâ multiparadigm maybe omniparadigm claim support objectoriented programming functional programming aspectoriented programming array programming good old procedural programming new language cleanedup version perl english german minus umlaut knowledge previous version ala get far token prejudice regarding preceding incarnation necessarily hold water follows attempt provide world honest incomplete assessment programming whitest elephant perlâ motivated following thought every sysadmin know least little perl know anyone know perlâ know anyone know anyone know perlâ never read anything perlâ longer punchline could equally imagine world perlâ heap rubbish one hope diamond language design one seems know one would know perlâ register written still waiting read number false start year finally managed spend enough time language say confidence familiar read cornucopia blog post devoured documentation written small perlâ library cursory test coverage still idea like use perlâ year even proper work week review le definitive testimonial like one momtrieslinux reaction video likely missing thing perlâ lack strong also kind slow therefore difficult impossible pique interest holdmybeer demonstration like one see learning perlâ instead start small example number perlâ easy enough install perlâ website unlike perl ship passable shell exit type exit interested version number perlâ people reading probably displayed shell greeting run version version rakudo version built moarvm version implementing perl perlâ really consists language specification perlâ c christmas compiler called rakudo virtual machine called moarvm reason multiplicity moniker perlâ folk believe implementation ought privileged tutorial teaser perlâ often begin first glance look like easiest math problem true language evaluate expression false tutorial go explain difference floatingpoint exact arithmetic perlâ treat number literal decimal dot rational quotient two integer rather inexact floatingpoint number perlâ objectoriented see class object method int rat num int integer rat rational exact fraction num doubleprecision float want floatingpoint behavior make num number adding num num num false scientific notation always produce floatingpoint num perlâ reason understand however sometimes seem add rational rather floatingpoint false true maybe someone explain discrepancy polite email anyway wholeheartedly endorse perlâ use rational number exact arithmetic think language could benefit similar implementation reference julia haskell builtin rational constructed respectively operator language library without support literal overall math support perlâ quite good complex number popular constant built right language identity correct decimal place rate e pi speaking frequently dealing floatingpoint number perlâ handy approximatelyequal operator measure thing within e pi true perlâ unicode everywhere wish also use place pi cutely superscript exponentiate integer however perlâ shell seem completely multibyteaware backspace unicode expression peril noninteractive compiler work fine aware choice numeric type significant impact performance example small script compute term harmonic series num total num total num num say total take second machine change num num take second first case perlâ construct rational represent num go straight floatingpoint representation num another oddity crop inspect total closely begin life int becomes rat first loop iteration converted num around iteration subtle type trickery going behind scene one sens benign presence larry wall whose skulduggery string number original version perl made hit programmer weary scanf sprintf small test version perlâ script still four time slower perl classic time slower c perl people often point speed improvement made since initial christmas release perhaps speed situation improve time overall come numerical computing guess could say perlâ perfectly capable heavy lifting lifting crew apparent hurry beginning worry way compute harmonic series perlâ compute thing hieroglyphic oneliner map trace mechanic code snippet take moment note among accomplishment larry wall creator perl designer perlâ twotime winner obfuscated c contest one final observation perlâ math although perlâ usual function mathh could certainly use string regexes perlâ string support unicode support particular best business unlike go javascript perlâ aware grapheme combining codepoints unlike python swift elixir perlâ access arbitrary grapheme position constant time rather iterating every grapheme access particular unicode identifier allowed custom unicode operator perlâ number builtin unicode operator ascii fallback thing like set operation equality test remember identity approximation test write like like e true perlâ allows form quotation construct recognized unicode standard following equivalent amazing amazing man amazing masterpiece perlâ philosophy expressed larry wall interview unicode symbol may difficult type technology improve future happy expressive unicode defining source code personally satisfied ascii variant perlâ parlance called texas symbol bigger get maybe people find unicode easier eye worth noting rumor eink keyboard upcoming apple hardware perhaps larry wall ahead particular curve back late perl introduced programming world regular expression least nonstackbased kind people might actually want use capture print stuff perlâ regexes change extending unicode support moving modifier around reassigning symbol also changing whitespace rule legible feel modern room breathe give example character class use instead range use instead z z capturing group still use parenthesis noncapturing group use plain square bracket space must made explicit malefemale catdog male female cat dog modifier caseinsenstive important one appear inside regex preceded colon example perl regex malefemale cc aa tt dd oo gg would translated perlâ male female cat dog match unicode digit balinese five thai three w match digit anything unicode considers letter including h match unicodedefined horizontal whitespace character want match space ascii typewriter choice c space x set character identified traditional perl grouping alnum xdigit using unicode general category lu uppercase letter sm math symbol alnum traditional character class name angle bracket lu unicode general category note colon additional set computed defining range set operator union intersection difference alnum alphanumerics excluding alnum sm alphanumerics plus unicodedefined math symbol alpha xdigit alphabetical hexadecimal digit f f dealt unicode text file regular basis likely feel feature grammar perlâ feature excited read fact initial reason drawn perlâ aside morbid curiosity inclusion grammar language good way ease grammar refactor regular expression example like regex sex male female regex specie cat dog male cat sex specie say sex sex say specie specie lc tilde perlâ string concatenation operator doubletilde context applies regular expression next group regexes grammar block providing special regex named top indicating parsing begin grammar animal regex sex male female regex specie cat dog regex top sex specie result animalparse male cat say sex result sex say specie result specie named regexes rule refer perlâ grammar engine used build recursivedescent parser use ragel number parsing task liked idea language something ragelish built afraid abandoning ragel anytime soon migrating perlâ least account grammar engine problem perlâ grammar engine perhaps shortcoming could addressed future version language parsing fails reason parse method simply return nil indication kind failure occurred kind nontrivial input grammar real pain debug single misplaced character kill whole parse report blank perlâ compiler written using perlâ grammar engine wondering perlâ parser produce line number error message started poking around grammar file like kid rifling bedside table regret ever idea bad enough perlâ grammar file foam party intermingled grammar code error message cherry top rule perlâ grammar file extra condition instead matching something throw exception exception handler pick apart internal state parser figure much input processed exception thrown work sort kludgy technique replicate want line number traditional parsergenerators much better job handling nonmatching input shortcoming explains part perlâ error message sometimes useless syntax error source code many perlâ error message helpful good example forget close quote perlâ tell error last line file course error likely near opening quote could anywhere file good luck finding perlâ exceptionthrowing parser provides nary clue longtime ragel addict really wanted like perlâ grammar engine lack decent failure handling mean endorse except refactorable regex machine perlâ could interesting platform prototyping new programming language example soon take look perlâ grammar file want close drawer go back innocent time note identifier get something way perlâ identifier contain dash whyhellothere hello perlâ call told good authority lisper use case convention never really meatrelated name kebab case preferred case convention perlâ standard library including function variable name eg isprime abignumber variable perlâ almost always start sigil dollar sign sign percent sign convention usually nt create ambiguity subtraction operation therefore terrible choice perlâ least consistent larry bet unicode bold vision one day able type hyphen minus sign computer separate character programmer show perlâ instantly recoil kebab case human flesh hanging personally grown like give screen full perlâ code distinct visual identity even dislike aesthetic admit easier shift finger either camelcase underscore course salutary effect health left pinky likely washed away perlâ variable sigils array hash perl array indicated indexed integer hash preceded keyed string block church perl built perlâ two data structure number modification noticeable syntactic change array written array value access use data sigil atsign percent sign rather scalar sigil dollar sign important semantic difference array hash parameterized value type example int array str hash declares array store integer hash store string hash key string default need parameterize literal array written square bracket array literal hash written different way following equivalent minute second minute second minute second minute second last form feel like hack guess preferable pineapple upsidedown ontology rail method like constructing hash brace used place unless brace contain default variable case perlâ get confused think block declared documentation discourages brace hash reason brace default representation perlâ print hash getting mixed message use tradition perl indeed one way case still looking satisfactory explanation seems perlâ endorsed one surrounding hash syntax outlawed saved countless stackoverflow question tagged newbie hash member accessed either hash key hash key cute feature hash look array key hash return value satisfied string key possible declare different type key inside brace hash int create hash keyed arbitrary object colonprefixed brace hash one hundred two hundred pi three point one four one five nine record literal syntax creating object hash weird prohibition applies note syntax necessarily preventing perlâ interpreting pi string rhetoric perlâ consistent perl sure lot little rule list technically perl third data structure list list could assigned array hash list value separated comma surrounded parenthesis immutable could explicitly bound variable list still present immutable perlâ departure predecessor language perlâ let bind list variable later reuse using bindto operator list one pi assigning item list result error list modify immutable int note error message indicates modify int modify list list contains variable modify content variable without changing actual list still contains variable value value pi â error modify immutable int pi â error modify immutable int pi work say say value weird huh sense list assumed immutable value assignment rerouted particular list member way list assignment follows somewhat naturally get excited though assignment behave expect reason clear lefthand side flattened assignment equivalent thus case get assigned get get nothing separate colon prefix destructuring assignment note bindto required usage line get becomes understand logic making syntactic distinction list assignment full destructuring assignment silently flattening lefthand list structure first case list contain list also array hash array hash contain array hash still perl also contain list last thing note list unrolled special pipe operator list say list say list come handy calling function talk talk something bothering itemization especially interested gory detail list differ array feel free skip section array list item within array hash behave differently item within list array list say arraywhat array say listwhat list say array int say list int say array varwhat scalar say list varwhat int array extra hidden layer indirection documentation call itemization unlike list array really full transparent container point actual value accessed var method assigning array member really modifies container whereas modifying list member attempt manipulate item however list also layer indirection permember basis using special dollar function still modify list itemized member protected listflattening operation itemization confusing part already complex language time method pas straight container itemized member list flattened listflat return nested list function expected aware member itemized based expect caller expect caller call listflat returned value got documentation provides five heuristic deciding item list returned function itemized dozen reading heuristic still mostly mumbojumbo think sticking simple list object array object function perlâ might favorite functiondispatching mechanism language used certainly flexible function argument named positional named argument preceded colon sub trianglearea base height return base height trianglearea height base trianglearea error many positionals passed signature destructure argument popular feature functional language sub firstitem head tail return head array firstitem array miss old perl convention putting parameter array use called slurpy sub addemup number return numberssum addemup return pipe operator mentioned previous section also used pas regular list argument list args addemup args equivalent addemup hash destructure sub volume length x width depth z return x z dimension depth length width volume dimension unrolled named parameter pipe operator sub trianglearea base height return base height dims base height trianglearea dims error many positionals passed trianglearea dims work multipledispatch occurs type like julia c also value elixir haskell often faster way compute factorial multi sub factorial return semicolon optional btw multi sub factorial int n n samewith factorial factorial type error note use samewith second clause feature pined erlang keyword perform recursion could rename function without change recursive call within welcome feature perlâ candidate clause evaluated order note might get unexpected result defining multipledispatch function inside perlâ shell clause seems aware clause preceded example switching two clause result runtime error switching order fine using regular couple place thus far used creates closure argument addtwo say addtwo pi whatever star skeleton key number strangelooking perlâ expression following incidentally strengthen case unicode operator map multiply first whatever second multiply map raise whatever power avoided whatever star addition making perlâ look like lineal descendant brainfuck governed rule subtle understanding following work thing compute square root list number map sqrt map sqrt map sqrt work map sqrt sure valid explanation discrepancy somewhere internet case like like say monad must acting move nativecall pleasant set surprise perlâ functioncalling fact pleasant surprise perlâ nearly frictionless interfacing c library get feel c interop decided use perlâ wrap one favorite c library libxlsxwriter c library ironically began life perl library later ported c ala never perlâ name implies libxlsxwriter used generate xmlbased excel document code came want follow along home xlsx writer perlâ library generating excel spreadsheet pardon seo keywords nativecall module perlâ unlocks kind dark magic calling c code declaring perlâ class opaque c pointer simple class writer workbook repr cpointer declaring c function return opaque pointer object matter sub workbooknew str encoded return writer workbook native xlsxwriter nativecall automatically convert perlâ string c string encoding choosing via encoded ellipsis brace literal ellipsis whatever star used place sure anyway workbooknew routine ready called method example make new method writer workbook class method new str path workbooknew path workbook opened script use writer workbook workbook writer workbooknew pathtoworkbookxlsx wrapping process quickly becomes kind threestep waltz declare c function subroutine make method nice oo interface add line test script onetwothree onetwothree c library requires knowledge c struct mirroring data layout fairly simple example c struct typedef struct lxwdatetime int year int month int day int hour int min double sec lxwdatetime becomes class writer cdatetime repr cstruct export year month day hour min sec alignment ok figure whether platformspecific c int type nativecall rust julia provide int bit modern computer lose sleep one particularly pleasant surprise nativecall us correct alignment rule pad data structure example sec field begin byte c perlâ structure even though byte five integer precede bullet dodged c struct initialized regular perlâ object datetimenow dt writer cdatetimenew year nowyear month nowmonth day nowday hour nowhour min nowminute sec nowsecond thing get interesting nativecall always pass pointer structs muck around pointer type perlâ code thus c function void workbooksetcreationdatetime lxwworkbook workbook lxwdatetime datetime would declared nicely neatly perlâ sub workbooksetcreationdatetime writer workbook writer cdatetime native xlsxwriter wrapped writer workbook method thus method setcreationdatetime dateish date dt writer cdatetimenew year dateyear month datemonth day dateday hour datehour min dateminute sec datesecond workbooksetcreationdatetime self dt called script wb writer workbooknew pathtoworkbookxlsx wbsetcreationdatetime datetimenow typemappings c perlâ automatic straightforward exception encountered type requires num floatingpoint type accept generic numeric num int rat num conversion method easy workaround mention one language feature make wrapping c library pleasant perlâ enum construct enum libraryerror lxwnoerror lxwerrormemorymallocfailed lxwerrorcreatingxlsxfile lxwerrorcreatingtmpfile many value enum really keyvalue pair beginning value zero nicety c function return integer perlâ side easily access symbolic representation sub somecfunction return native something int code somecfunction say libraryerror code lxwnoerror etc enums start value zero enum script superscript subscript specified value enum color black blue brown cyan hesitate suggest expanding language even tiny suggestion point may like mortal mint mr creosote meaning life one feature perlâ might borrow go incrementing enum value via bitshift ie toocleverbyhalf iota construct real qualm perlâ enum feature appears enum symbol must unique within declaring scope else get warning strange error prefer symbol exported scope access symbol via enum name libraryerror none color black etc right color libraryerror enums declared scope color none libraryerror none would create conflict either use cstyle globally unique name libraryerrornone librarycolornone feel perlish else put enum file import pretty inconvenient nonetheless wrapping c library perlâ painless experience even addictive one even pas perlâ function closure c callback using native type directly perlâ code however usefulness feature mitigated somewhat get perlâ object back void context pointer many c apis designed another limitation nativecall support passing returning c structs value course hack concurrency perlâ number abstraction dealing concurrency promise channel something called supply think helpful start picture perlâ execution model see abstraction really limitation perlâ run virtual machine moarvm thread scheduler garbage collector event loop unlike c implementation python ruby moarvm global interpreter lock perlâ code always execute concurrently inside single process writing perlâ thread map directly o thread behavior change upcoming perlâ release support degree n thread multiplexing perl thread storage able access object care must taken avoid race condition lock mechanism provided discouraged favor messagepassing abstraction fixed upper limit number o thread moarvm use number default changed environmental variable rakudomaxthreads code attempt start number background task using thread execution may deadlock garbage collector generational halt execution across thread run ie stoptheworld garbage collector multithreaded till time guarantee example garbage collector handle asynchronous io moarvm us libuv nodejs tried juggling thousand concurrent network connection singlethreaded perlâ server present insurmountable challenge way talk perlâ core concurrency abstraction promise channel supply start keyword kick code another thread assuming thread available shortcut promisestart met await task start say hello threadid say ahoy threadid await task run code see greeting initiated different thread message may appear either order note await return current thread perlâ might return different thread future version see thread pool action try starting task p map start say sleeping threadid sleep await p see resulting message two batch sixteen message immediately using every thread thread pool followed sixteen message second reusing thread imagine code might unexpectedly deadlock code waiting particular thread start available thread thread pool future version perlâ supposed alleviate threadexhaustion problem moving perlâ thread across o thread perlâ thread waiting message channel bring implementation closer concurrency model erlang go net channel since talking exist thread communication perlâ language includes reactwhenever keywords receiving message channel channel channelnew p start react whenever channel say hello threadid said message ahoy say threadid let send message buddy twice channelsend message channelsend message channelclose mandatory await p react blocking construct return every channel listening closed done explicitly called within react example failure close channel commenting line marked mandatory result start block never returning modified program hang call await channel perlâ similar channel messagepassing erlang important difference channel typed message patternmatched listener perlâ channel accept whatever sent go erlang timeout mechanism receiving end perlâ imagine perlâ community gain experience concurrent distributed system demand similar feature language final bit abstraction handling concurrency perlâ called supply supplier object emits via emit method sequence value supply object supply one listener called tap tap object rather callback function executed supplied value default tap called thread call supplieremit example supplier suppliernew supply suppliersupply supplytap say tap got threadid supplytap say tap got threadid say sending value threadid supplieremit hello run code see action happens single thread supply introduce concurrency curtain hiding example supplier emits value receives message channel say inside react block would ensure application logic occurred predictable order predictable thread one interesting application supply receiving data external program perl receiving data standard stream standard error stream headache perlâ get supply proc proc asyncnew r echo man amazing masterpiece procstdouttap say procstderrtap say err await procstart incidentally proc async class also write closestdin method facilitate twoway interaction external unix signal accessed supply signal sigint tap say perhaps artist little mad exit note example previous one emit called behind proscenium particular callback execute different thread main program concurrency easy language perlâ seems decent set abstraction writing complicated program without introducing race condition however threading model abstraction obvious first glance seems common source confusion stackoverflow also see much guidance exceptionhandling concurrent code common source bug deadlock outside sharednothing erlang diaspora finally totally sold rationale supply banner usecases signal handling stdoutstderr processing really require sequential execution different callback emit happens deep standard library callback end executing mystery thread far main application suspect supply usecases would better served channel capable broadcasting message multiple subscriber example following hypothetical api verbose would give clarity code executing thread proc proc asyncnew r echo man amazing masterpiece get channel external process output procstdoutchannel err procstderrchannel start worker thread listens channel worker start react whenever say print stdout worker whenever err say err also stderr worker run external program await procstart wait worker finish await worker right channel pick listener random deliver message even data stream delivered channel fake api able plug multiple receiver current channel design fit well workerthread design well event listener might guess perlâ mostly left object model class hierarchy arrayprogramming feature controlflow construct think covered enough territory offer general perspective language runtime put burning question bluntly perlâ good perlâ math support excellent complex rational number handled seamlessly afraid perlâ slow serious scientific numbercrunching keep jones would need either major investment native library like numpy builtin jit compiler like supposedly jit work appears work number year holding breath perlâ string handling particular unicode support unparalleled like new regex syntax however grammar engine bit disappointment despite initial enthusiasm replacing parsergenerators least toolkit compiling perlâ code processing text file disk relatively slow operation neither helped noninstantaneous vm start time perlâ likely hard time replacing perl unix pipeline least present form perlâ better concurrency ruby python highthroughput lowlatency application current release significantly behind go erlang net start catch release introduces n thread multiplexing vm still need serious battletesting battletuning claim compete platform testing easy put test script directory follow test module doc still sure preferred method writing function module documentation people seem put everything readmemd see anything extract api source code manner pydoc javadoc light foregoing hard time justifying perlâ current incarnation never thought ruby made sense server technology anything happen guess like writing perlâ program generic typechecking oo model inspire confidence little rascal clubhouse attitude perl stopping considerably short slaveryisfreedom mentality rust haskell perlâ functional feature let distill logic essential like easy write perlâ code difficult read personally prefer treated like responsible adult rather instance teenager trapped fatherknowsbest house go still language remains distressingly permissive outofbounds array access return nil two line code one two three one two three compile run fine would much comfortable compiler voiced least mild concern case since likely bug code thing perlâ wellnamed reliance sigils make many operator many many operator perlâ hard google sometimes feel like trying look swear word beetle bailey comic strip language single typed character convey world significance personally enjoy concise aesthetic also enjoy algebra problem people consider psychologically fit programmer prefer thing spelled modifier keywords might put perlâ loadbearing asterisk pipe symbol forth perlâ language large number trap door learning time feel like taking tour willy chocolate factory every room seems new treat strange effect factory floorplan viewed sufficient distance basically coherent even predictable found occasion correctly guessing syntactic construct thisorthat particularly fond perlâ function dispatching feel like erlang addition named parameter varargs builtin type checking probably start using perlâ sliceanddice system script way use ragel fleshing grammar julia exploring math problem perlâ best perhaps exciting everyone else immediate application mind gluing together c library writing commandline wrapper c library readstat library maintain happy replace hieronymous bosch hellscape bin directory nice clean nativeinterfacing perlâ script dream realized need aforementioned improvement nativecall passing structs value able convert context pointer perlâ object sound stupid fullscreen terminal program become popular perlâ concurrency strong system support would make excellent choice would port hecate hex editor hell heartbeat love see perlâ mail client text editor terminally insane programming movement sure catch fire day mention perlâ exceedingly clever come making commandline tool file sub main str inputfile int line say blah running script without argument give usage line int inputfile made smile right perlâ ruby rail commandline tool number unexpected surprise perlâ like commandline cushion tickled fancy others like rule inside hash brace anything itemization leave dumbfounded note creature comfort perlâ error message usually adequate sometimes incorrect irrelevant repl useful need better support multiline copypaste backspacing multibyte character default vim highlighter slow package annoying highlighting bug sitting open github almost year travis ci support perlâ download compile language time add several minute test run wild west exactly feel like momandpop hotel jiggle toilet handle maybe smack side tv screen picture clear great come never heard language inseparable community parting word found latenight moment bewilderment irc channel asking help finer point darker corner language response usually helpful always courteous least one cause confusion turned bug vm quickly discussion irc channel technical lurk long enough hard miss current frustration perlâ widely adopted kind righteous indignation language good dammit projecting people start taking u seriously spent long enough software business passing familiarity feeling nothing quite demoralizing spending year two something fifteen year case perlâ unable secure much five minute potential time explanation course banal geek writing correct computer code lot easier reprogramming perception feel qualified offer marketing suggestion perlâ people honor butterfly mascot winsome sprite named camelia belies sprawling netherworld complexity part way pointing great butterfly collector western literature character stein joseph lord jim stein right occasional conscience jim left film adaptation columbia picture stein story go spent youth late life adventure sailing high sea battling bandit living native east indie turning point character story set seven wouldbe assassin drop three successive shot revolver proceeds chase butterfly field finally catch help hat flop got got shook like leaf excitement opened beautiful wing made sure rare extraordinary perfect specimen head went round leg became weak emotion sit ground greatly desired posse specimen specie collecting professor took long journey underwent great privation dreamed sleep suddenly lord jim ch reread passage help think larry wall man certainly long journey underwent great pursuit dream redesigned think dissertationwriting uncle though afraid ask ever finished thing part certain age stein stopped pursuing wealth fame adventure order cultivate cherish iridescent beauty butterfly wonder sometimes software profession could use butterfly input commercial empire specimen study appreciate admire lamplit silence woodshelved room perlâ masterpiece sure instruction give foreman particular jury perlâ certainly alone audacity ambition sheer complexity language might sort thing impossible judge without using least year halfdecade afraid save final judgment future article meantime enough reason keep stable version perlâ rattling around usrlocal curio cabinet perlâ conquer world thing hard predict certain sense speaking frustrated member irc channel matter perlâ oneofakind one argue maybe enough captured something rare beautiful uncertain world sit ground hold finger little one specimen like london said bavarianborn stein lord narrator hand hovering glassencased butterfly bronze white yellow small native town collection shall bequeath something note reading evanmillerorg random collection math tech musing liked might also enjoy get new article published via twitter r want look statistical pattern mysql postgresql sqlite database desktop statistic software wizard help analyze data le time communicate discovery visually without spending day struggling pointless command syntax check back evan home page subscribe r twitter youtube
14,Lobsters,perl,Perl,Why does OpenBSD still include Perl in its base installation?,https://marc.info/?l=openbsd-misc&m=159041121804486&w=2,openbsd still include perl base installation,prev list next list prev thread openbsdmisc openbsd still include perl base installation marc espie espie nerim net nausicaa home message body prev list next list prev thread configure news add list korelogic,prev list next list prev thread next thread list openbsdmisc subject openbsd still include perl base installation marc espie espie nerim net date messageid nausicaa home download raw message body another thing consider perl base system assume need script language writing everything c cumbersome choice need something acceptable licence python artistic licence close enough need something build everywhere python hard build without dynamic library vax want modicum security shell tcl php awk would kind work except readable would nt scale thing use perl perl constituted great compromise back day chose replace pkgadd still great compromise large compared piece year thing moved back forth language language makewhatis used cshell became perl pure c integrated mandoc shudder think much time spent note ingo also moved etcsecurity shell perl adverse perl far concerned perl base system strength openbsd minimize number script language used port infrastructure compared language perl also impressive support tool base system port nytprof still best profiler ever seen language prev list next list prev thread next thread configure news add list sponsored korelogic
15,Lobsters,perl,Perl,WebPerl,https://webperl.zero-g.net/,webperl,using building note legal wiki welcome webperl webassembly emscripten notice webperl much beta new experimental perl support quick start http http serving webperl http wwwigbberlinde legal page http githubcomhaukexwebperlblobghpagesindexmd,using building note legal wiki welcome webperl webperl us power webassembly emscripten let run perl browser webperl translate perl code javascript instead port perl binary webassembly full power perl disposal notice webperl much beta thing may work yet part api may still change feedback always appreciated new experimental perl support script src webperljs script script type textperl print hello perl world n go javascript console default j document getelementbyid mybutton addeventlistener click sub j window alert clicked button script web application written webperl see quick start prerequisite perl recent version recommended eg cpanm easily install dependency otherwise see file cpanfile dependency use module installer choce shell wget http unzip cd cpanm installdeps plackup webperlpsgi http server psgi accepting connection http point browser http look source zip archive also contains several example access http may also host content zip archive webserver choice browser support opening file locally described serving webperl note webperldemohtml likely see ajax failed expected since webserver know handle example ajax request fun copyright c hauke daempfling haukex zerognet leibniz institute freshwater ecology inland fishery igb berlin germany http wwwigbberlinde please see legal page detail find source page http githubcomhaukexwebperlblobghpagesindexmd
16,Lobsters,perl,Perl,Should x < $foo < y read from $foo once or twice? Perl debates,https://github.com/Perl/perl5/issues/17692,x foo read foo twice perl debate,join github today sign reload reload,dismiss join github today github home million developer working together host review code manage project build software together sign perform action time signed another tab window reload refresh session signed another tab window reload refresh session
17,Lobsters,perl,Perl,You have to kill your perlings,http://nibblestew.blogspot.com/2020/05/you-have-to-kill-your-perlings.html,kill perlings,preface issue hand nt risky lot work,preface blog post deal social human aspect various technology technical merit programming language tech intend write scathing reddit comment along line guy idiot perl great language x z w please nt point post perl chosen canonical example mostly due prevalence point apply thing like corba tcl needing write xml file hand ridiculously long compilation time issue hand early lot code written fashionable time lot done using perl open source project chronically underfunded lot code still running fact lot core infrastructure debian bsds foundational project written perl told many people give project manager reply say since code exists work everything fine really find let look following graph see pool people willing work perl project shrinking fast major problem open source since healthy project requires steady influx new contributor developer volunteer first order approximation nobody age know code perl let alone would willing sacrifice free time one could go long debate discussion millennials killing open source everyone man start writing sigils variable name would pointless though reason people nt want perl irrelevant thing matter use perl actively driving away potential project contributor zeitgeist thing adapt mean migrating project perl something else nt risky lot work yes lot perl code foundational many case people wrote left noone touched year changing risky matter careful bug nasty bug hard trace bug bug work together bug cancel lot hard work price pay keep project vibrant alternative nothing project never need change might reasonable course action however something happens major change needed one thing learned year unexpected thing actually happen might end fo equivalent new jersey mayor trying find people code cobol free
18,Lobsters,perl,Perl,"Apocalypse 1: The Ugly, the Bad, and the Good (2001)",https://www.perl.com/pub/2001/04/02/wall.html/,apocalypse ugly bad good,apocalypse ugly bad good larry wall synopsis larry wall give annual entertaining talk state perl world covering perl perl year open source convention miss rare opportunity hear creator perl patch run share insight programming perl edition,apocalypse ugly bad good apr larry wall editor note apocalypse date remains historic reason see synopsis latest information people get scared hear word apocalypse mean good sense revealing apocalypse supposed reveal good news good people also happens reveal bad news bad people bad revealing column design perl accurately beginning design since design process certainly continue initial say matter omniscient rumor contrary notwithstanding job playing god little big nevertheless someone try best fake expect help process creating history bit free look history perl point see column subtitled ugly bad good rfc process last year ugly good sense brainstorming process mean deliberately sense incivility since rfc process fact surprisingly civil sense little coherent design suggestion rfcs frankly rfcs map without actually covering map contradictory rfcs missing rfcs many rfcs propose real problem go funny angle trying propose solution many patch symptom without curing underlying ailment larry wall give annual entertaining talk state perl world covering perl perl year open source convention miss rare opportunity hear creator perl patch run share insight also discovered larry first law language redesign everyone want colon ugly part bad part supposed take rfcs produce coherent design two week starting thinking could classify rfcs good bad ugly category somehow ended ugly category good one typically something wrong even bad one typically indicated problem could use thought even solution totally bogus five month later mulling coherence whole time definition mulling many know happens size perl process exceeds size physical start thrashing well basically happened get enough problem head make good progress actually good subdividing problem forte synthesis analysis help number distraction life selfinflicted go save unauthorized autobiography programming perl edition larry wall tom christiansen jon orwant edition july order number page come good part hope thinking lot lot many individual rfcs knowing start thinking whole occurred finally proper order think thing le order chapter camel book camel book order designed minimize forward reference explanation perl considering perl roughly order tend reduce number thing decide decided merrily classified rfcs chapter number look much manageable also restructured email look slice message ever talked particular rfc regardless mailing list message also big help intend produce one apocalypse chapter apocalypse corresponds chapter overview perl course book overview like small tutorial really complete analysis philosophical underpinnings perl nevertheless convenient place classify rfcs talk perl level today talking following rfcs rfc psa title bdb keep default perl free constraint warning strict ccb named operator versus function acc perl stay perl adb perl core function return object abr last major revision psa rating stand problem solution acceptance problem solution graded af scale often find grade problem higher solution acceptance rating one accepted wholeheartedly b accepted buts c accepted major caveat r rejected might point add deferred really think soon decide something initially inclined accept rfc decided reject theological ground apocalyptic literature number representing perfection number representing imperfection fact probably end converging version number pi rfc suggests rather would rather unfortunate perl last major revision fact perl perfect need revision perl merely prototype perl actually agree underlying sentiment rejected entertainment value want perl language continue evolve better fit problem people want solve end several design goal tend obscured peruse rfcs first perl support multiple syntax map onto single semantic model second single semantic model turn map multiple platform multiple syntax sound like evil thing really necessary evolution language extent already multisyntax model perl every time use pragma module warping language using long clear declaration top module version language using cause little problem particularly strong example support multiple syntax allow continued evolution migration perl perl see discussion rfc multiple backends necessity world live today perl must limited running platform programmed c must able run kind virtual machine supported java c fond hope fond perl fonder still perl said also hope perl continue trying thing people part perl accept rfc principle intend go raving mad major caveat think needlessly fearful several programming paradigm take design going happen part make perl perl intentionally multiparadigmatic might say perl allows paradigmatic without paradogmatic essence perl really context sensitivity syntactic context also semantic pragmatic cultural context overall philosophy going change perl although specific context sensitivity may come go current context sensitivity actually prevent u better job area intentionally breaking thing make perl understand mean even better specific example various way thing could improve muster courage break weird relationship foo foo true lose current slice notation replaced something better expect consistently treating foo utterance scalar context return array reference make subscript always take array reference among thing fix botch perl requires u distinguish foo foo discussion apocalypse dissect idea like rfc highlander variable type two mind good argument side read discussion argument forcefully made repeatedly specific discussion centered around issue strictness course title rfc claim general philosophical position ended apocalypse talk strictness warning moment also talk constraint general like take detour esoteric design issue first mind rfc one reacting example language designer like one judge right wrong simultaneously many rfcs stake polar position defend ably fail point possible area compromise sure right rfc focus particular area try everything rfcs written mostly design perl mind synthesize compromise even design perl make mandatory one overriding issue whether possible translate perl code perl code one particular place concern many oneliners embedded shell script really good way translate invocation requiring new command line switch set strict going fly closely related question perl going recognize accidentally fed perl code rather perl code would rather bad suddenly give working code brand new set semantics answer believe impossible definition accidentally feed perl code perl perl must assume fed perl code know otherwise implies must declaration unambiguously declares code perl right way wrong way peeved approach taken dec upgraded basicplus handle long variable name solution require every program using long variable name use command extend top henceforth forevermore every basicplus program extend top know whether call bad ugly certainly good better approach modify something would anyway go cpan look every single module see top answer package declaration break hereby declare package declaration front file unambiguously indicates parsing perl code want write perl module class start keyword module class know yet exact syntax module class declaration one thing know set current global namespace much like package declaration one fell swoop much problem programming large dealt simply making module class default strict warning note default main program one liner perl nonstrict definition still figure perl main program distinguish perl use maybe whether perl main program default strict think already see course instructor could threaten flunk anyone put module main front program never actually tell pupil want turn stricture warning approach possible lead u deeper issue issue project policy site policy people always hankering various file automatically read various location always steadfastly resisted make script implicitly nonportable however explicit nonportability okay reason hypothetical class instructor could insist program start use policy see lead even deeper language design issue real problem difficult write policy module perl really module metamodule want use strict use warning behalf student therefore one thing must implement perl ability write metause statement look like ordinary use statement turn around declare thing behalf user good user project site whatever policy wonk whether agree rfc really depends mean default like humpty dumpty make mean whatever think convenient context sensitivity work also happen agree rfc philosophical position morality work best chosen mandated nevertheless time morality strongly suggested think module class good place sure belongs overview nonetheless principle agree rfc course perl variable really object underneath rfc trivially true real question interesting object return given level performance perl object relatively heavyweight perl object heavy thing might bog thinking solution better abstract type support data value happen represented internally c structs get bogged try translate c struct struct tm actual hash value hand rather efficient translate struct tm struct tm since noop make struct look like perl object access efficiently attribute method real object typology hopefully mostly impose abstract overhead biggest overhead likely memory management struct int say overhead could go away much time amount contextually aware optimization event want point nobody panic talk making thing return object used return remember object define stringify numify overloadings whatever class like old code look like print scalar localtime continue run unchanged even though localtime might returning object scalar context another rfc think better place find rfc somewhat confusing abstract seems suggest something radical description describes ignore abstract pretty much agree already case perl distinguish operator function primarily called defined one place rfc could clarified perl distinguishes two class named operator named unary operator v list operator distinguished different precedence discus precedence reform apocalypse doubt combine two kind named operator teaser see way simplifying perl precedence table level level albeit damage c compatibility le frequently used ops later perl apocalypse rest apocalypse series found well article larry wall begin see selfappointed job much larger voting rfcs many big issue face simply covered rfcs decide much culture baggage thrown overboard much smooth migration perl perl prevent people using excuse adopt perl stare deep issue see underlying deeper issue issue depth understanding keep perl simple enough anyone pick start using get job done right stay tuned apocalypse wherein attempt vary variable question quote recontextualize context general set lexical stage everything follows
19,Lobsters,perl,Perl,"Larry Wall makes fun of Python, PostScript etc (2010)",https://www.youtube.com/watch?v=uzUTIffsc-M,larry wall make fun python postscript etc,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature larry wall go without saying youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature larry wall go without saying youtube
20,Lobsters,perl,Perl,preconfigured opinionated IkiWiki in a container,https://jmtd.net/log/opinionated_ikiwiki/,preconfigured opinionated ikiwiki container,ikiwiki debian ikiwiki old experiment mine opinionated ikiwiki check source github grab container image quayio http,various personal project thing past present including personal site use ikiwiki modern standard bit pain set maintain reason find hard recommend people would nice fire snapshot existing ikiwiki instance test outcome change might cumbersome enough moment nt bothered separately month ago routine upgrade debian web server running site ikiwiki installation broke first time ten year never issue like reason dusted old experiment mine renamed opinionated ikiwiki ikiwiki container configured usable outofthebox opinionated configuration decision made intention able fire container immediately useful ikiwiki instance work hopefully easier clone existing content configuration experimentation check source github grab container image quayio fire one immediately http something like podman run rm ti p quayiojdowlandopinionatedikiwiki latest good excuse learn multistage container build explore quayio feedback gratefully received github issue comment mail
21,Lobsters,perl,Perl,Simulated Losses to a Covid-19 Outbreak in the US Congress,https://www.dolthub.com/blog/2020-03-27-whos-at-risk-of-covid19-in-congress/,simulated loss outbreak u congress,overview result simulation introduction coronavirus dataset individual case detail available le reliable crowdsourced report kind elderly appears deadlier men well raw number almost twice deadly men woman simulating outbreak u congress poor taste u senator two member house simulation parameter age sex legislative representative percentage population get infected imperial college london mortality disease age bracket sex congressional demographic senate house representative dolt uscongress dataset propublica congress dataset one oldest male modeling percentage population infected infection rate nearly iran parliament reportedly infected modeling fatality rate age sex widelycirculated medium article dolt italian patient march simulation run getting input simulation simulation script simulation result discussion health care system completely overwhelmed doctor decide get ventilated without conclusion dolthub data set let u know dolt dolt dolt dolt,overview blog post discus approach simulating outbreak u congress long technical article data set epidemiology simulation feel free jump straight result simulation introduction dolthub tracking case several month coronavirus dataset addition pulling countrylevel aggregate source like john hopkins also aggregating individual case detail available several different source case detail government publication also put le reliable crowdsourced report nonmaster branch repository case detail interesting allow u break fatality rate virus age sex aware kind elderly le well known fact appears deadlier men well much deadly raw number case detail able collect doltsql select mortalityratebyagesex agerange null agerange agerange sex case death mortalityrate f f f f f f f f agerange decade corresponding patient age example corresponds patient year old see disease much deadlier older people especially older men italy far almost twice deadly men woman also worth pointing much worse disease seems men death italy time bulletin men diagnosed case male italian boy illness none died time bulletin male fatality aged female age also worth pointing definitely worse older people fatality rate pretty bad middleaged people simulating outbreak u congress knowing disease especially unkind older men obvious question ask would happen outbreak occurred place dominated older men example u congress poor taste tricky subject discus one hand speculating might die pandemic ghoulish morbid matter approach nt game poor taste discus like hand exercise nt idle thought experiment one u senator two member house already diagnosed likely others follow coming day week importantly legislative representative currently drafting debating legislation national response pandemic affect life hundred million american many thousand american decision literally matter life death important understand exactly risk disease pose american especially older american even talking make u uncomfortable even best medical care available outlook older people grim important legislator understand personally great risk counting make sensible policy choice crucial time skin game quantify much simulation parameter simulation run depends three input age sex legislative representative factor important predictor mortality percentage population get infected estimate many people immunologically naive population infected new disease range around imperial college london population reacts matter different behavior social distancing reduce number dramatically mortality disease age bracket sex see multiple competing estimate information first input independent variable simulation vary second two input give u idea outbreak might play different circumstance congressional demographic obtained wikipedia page senate house representative wrote quick dirty perl script parse text imported result dolt browse uscongress dataset online wikipedia nt include entry sex member congress keyed hand work discovered propublica congress dataset would much easier use live learn update u congress dataset come propublica current congress old congress tend relatively old compared general population one oldest oldest member senate congress old also male male doltsql select sex count senate group sex count f doltsql select sex count house group sex count f two factor put congress much greater risk general population represent modeling percentage population infected pure mathematical model estimate virus spread majority population running new host imperial college london predicts infection rate course epidemic public response including social distancing health care response hygiene practice could change number dramatically hand politician might among atrisk people planet owing nature job frequent facetoface interaction many different people well frequent air travel nearly iran parliament reportedly infected three week ago truth one know percentage people expect become infected point simply many variable account uncertainty run simulation three time three different estimate spread modeling fatality rate age sex fatality difficult estimate epidemic progress take week kill new case growing exponentially mean early estimate fatality might low case new patient eventually die nt yet succumbed disease might mean estimate high serious case diagnosed many milder case nt book tomas pueyo explored difficulty getting good estimate fatality widelycirculated medium article earlier month illustration estimated fatality rate changed time several country observed thing coronavirus data additional case reported observed fatality rate change dolt versioned query capability make easy see two query observed fatality rate day apart doltsql select mortalityratebyagesex agerange agerange sex case death mortalityrate f f f f f f f f doltsql select mortalityratebyagesex datesub interval day agerange agerange sex case death mortalityrate f f f f f f f f depending reading mortality estimate probably changed yet wo nt fully stabilize new case stop coming difficult find mortality estimate accurately broken age sex essential part analysis much uncertainty figure also run simulation three time mortality dimension twice using two mortality snapshot observed case detail published world government different point pandemic using information published aggregate form italy based italian patient march italy number similar one computed based individual case detail agerange sex case death mortalityrate f f f f f f f simulation run three different experimental value two independent input total nine simulated scenario one estimate many member major party house congress expect lose condition simulated getting input simulation get input simulation need generate datasets operate join across repository still work progress exported data coronavirus dataset import uscongress dataset easiest way exporting result csv file using r csv option dolt sql dolt sql r csv q select mortalityratebyagesex datesub interval day dolt sql r csv q select mortalityratebyagesex mortalityratesbyagesexcsv next created new branch uscongress dataset one different mortality rate estimate use simulation different branch different content mortalityratebyagesex table corresponding three different mortality rate estimate table cd uscongress dolt checkout b mortalitycasedetails dolt table import u mortalityratebyagesex mortalityratesbyagesexcsv dolt add dolt commit mortality rate dolt checkout master dolt checkout b dolt table import u mortalityratebyagesex dolt add dolt commit mortality rate one week ago dolt checkout master dolt checkout b mortalityitaly dolt table import u mortalityratebyagesex mortalityitalycsv dolt add dolt commit mortality rate italy dolt checkout master dolt branch master mortalitycasedetails mortalityitaly next need run couple query branch data set joining mortality rate estimate representative age sex note use select appropriate branch table join let keep master branch checked query table branch created doltsql select lastname state party ssex birthdate age mmortalityrate senate join mortalityratebyagesex mortalitycasedetails sbirthdate magerange ssex msex order mortalityrate desc age desc limit lastname state party sex age mortalityrate grassley iowa republican inhofe oklahoma republican shelby alabama republican robert kansa republican alexander tennessee republican leahy vermont democratic sander vermont independent mcconnell kentucky republican cardin maryland democratic risch idaho republican doltsql select firstname lastname state district hsex age party mortalityrate house h join mortalityratebyagesex mortalitycasedetails hsex msex floor magerange order mortalityrate desc limit firstname lastname state district sex age party mortalityrate young ak al republican alcee hastings fl democratic john lewis ga democratic hal rogers ky republican steny hoyer md democratic david price nc democratic bill pascrell nj democratic jim clyburn sc democratic tom ohalleran az democratic raul grijalva az democratic get final input simulation need full join representative mortality rate two chamber congress three mortality estimate total six input file simulation script want data csv form use r csv option dolt sql dolt sql r csv q select firstname lastname state district hsex age party mortalityrate house h join mortalityratebyagesex mortalitycasedetails hsex msex floor magerange order mortalityrate desc housecasedetailscsv dolt sql r csv q select lastname state party ssex birthdate age mmortalityrate senate join mortalityratebyagesex mortalitycasedetails sbirthdate magerange ssex msex order mortalityrate desc age desc senatecasedetailscsv dolt sql r csv q select firstname lastname state district hsex age party mortalityrate house h join mortalityratebyagesex hsex msex floor magerange order mortalityrate desc dolt sql r csv q select lastname state party ssex birthdate age mmortalityrate senate join mortality ratebyagesex sbirthdate magerange ssex msex order mortalityrate desc age desc dolt sql r csv q select firstname lastname state district hsex age party mortalityrate house h join mortalityratebyagesex mortalityitaly hsex msex floor magerange order mortalityrate desc houseitalycsv dolt sql r csv q select lastname state party ssex birthdate age mmortalityrate senate join mortalityratebyagesex mortalityitaly sbirthdate magerange ssex msex order mortalityrate desc age desc senateitalycsv produced input simulation script need run file three simulated spread f l csv simulationpl f f sout done done simulation script simulation iterates congressional representative expected mortality rate based age sex run decides whether particular representative lost u based spread disease expected chance recovery take median outcome simulated run two major party produce output relatively short perl script use warning use strict use parse csv use getopt long spread getoptions spreadsf spread die error command line args open fh encoding die numsims csv parse csv new handle fh name rep line csv fetch line loss push rep line loss republican democratic independent foreach numsims loss foreach rep rep rand spread rand rep mortalityrate rep loss push loss rep party losscount loss partylosses grep party eq party loss push losscount scalar partylosses party losscount loss sortedlosses sort losscount medianlosses sortedlosses numsims print party party lost median medianlosses representativesn finally used output produce diagram placing x appropriate side aisle simulation scenario simulation result discussion simulation demonstrate even conservative estimate spread fatality expect lose member congress worst case expect lose tragic number scenario number representative seriously ill therefore unable perform duty always higher number lose altogether nt nodebased simulation nt account representative spending time close contact one another account known diagnosis among legislator three date straightforward application stastical mortality rate applied evenly entire congress based age sex age sex distribution two party mean average republican risk senate democrat risk house virus nt care political ideology government response must rise division successfully fight important note reason believe thing wo nt bad even mildest simulation result italy mortality number bad least part health care system completely overwhelmed doctor decide get ventilated without report ground doctor often choosing ventilate patient better chance survival inflating already terrible fatality number elderly whatever happens pandemic tend believe every member congress highranking government official receive highest standard care substantially improve outcome relative general population still even caveat result chilling conclusion hope result demonstrate concisely seriously elected official taking threat pandemic endangering life countless ordinary american demographic characteristic legislative representative put disproportionate risk relative general population dolthub aggregating data set hope someone make use assist effort control ultimately end pandemic know data set please let u know better yet download dolt today clone data improve send update u pull request built dolt make easy collaborate data collaborate source code launched first beta year ago never imagined would spending much time compiling data global pandemic believe dolt best way produce distribute data set biggest hope effort contribute small way mitigating terrible effect pandemic would like help please download dolt join u building comprehensively useful dataset internet
22,Lobsters,perl,Perl,Natural Language Principles in Perl,http://www.wall.org/~larry/natural.html,natural language principle perl,natural language principle perl learn use many time learn go many acceptable level competence multiple way say thing shame borrowing indeterminate dimensionality local ambiguity okay punctuation prosody inflection disambiguation number case word order topicalization discourse structure pronominalization theoretical ax grind style enforced except peer pressure cooperative design inevitable divergence,natural language principle perl learn use many time learn natural language use many time lesson language designer language optimized expressive power rather ease learning easy learn drive golf cart hard express one learn go nt learn natural language even sense never stop learning nobody ever learned natural language completely unfortunately interest orthogonality many computer language designed every degree freedom dimension available everywhere good point understand whole language lead confusion nt like ignore dimension begin like able talk baby talk understood okay language difficult learn long nt learn many acceptable level competence sociological feature compared learn go psychological feature people nt mind speak subset natural language especially child foreigner except paris course language designed learn go expectation everyone learning okay multiple way say thing one anthropological feature people learn go come different background learn different subset language first officially okay perl realm program subset perl corresponding sed awk c shell basic lisp python fortran even perl melting pot computer language nt mean stir shame borrowing english language suffering identity crisis people nt mind swiping idea language making part language effort maintain purity language whether natural artificial succeed establishing elite class people know shibboleth ordinary folk know better even nt know shibboleth mean indeterminate dimensionality scientist like able locate thing giving vector list coordinate space known dimensionality one reason like orthogonality mean various component vector independent unfortunately real world usually set work way problem including linguistics problem matter getting geography inbetween heavy influence solution practical problem tend solved several level typical journey might involve leg car escalator moving sidewalk jet maybe moving sidewalk tram another jet taxi elevator level nt many right angle whole thing bit fractal nature term language say something get close want say start refining around edge would first plan itinerary major airport later worry get airport local ambiguity okay people thrive ambiguity long quickly resolved generally within natural language ambiguity resolved rapidly using recently spoken word topic pronoun like refer thing close syntactically speaking perl full little ambiguity people never even notice resolved rapidly instance many term operator perl begin identical character perl resolve based whether expecting see term operator person would say know bitwise say foo know calling subroutine foo contrast many strongly typed language distant ambiguity c one worst respect look b idea let alone defined send people graduate school learn resolve distant ambiguity punctuation prosody inflection natural language naturally punctuated pitch stress pause use indicate word related socalled body language also come play punctuation written english much approximated trend recent electronic communication invent various form punctuation computer language designer seem think punctuation evil doubt english teacher would agree disambiguation number case word order part reason language get away certain local ambiguity ambiguity suppressed various mechanism english us number word order vestige case system pronoun man looked men looked back perfectly clear sentence similarly perl number marker noun dog one pooch dog potentially many little like english perl also us word order sub use mean something quite different use sub perl nt much case distinction unlike shell make usevsmention distinction using prefix though guess allow could count perl quote form case marker slightly abstruse level perl operator sort case marker preposition indicating mention rather use computer language prepositional notion usually expressed position within argument list though certainly possible write call using named parameter perl key hash sometimes function preposition move rook qrpos topicalization regard topicalization point sentence start one topicalizer simply introduces subject intending talk several syntactic form english simplest one simply noun carrot hate em pascal clause function topicalizer topicalizers sometimes give list topic point see word like blah blah blah perl various thing work topicalizers say foreach dog print even used singularly somelongname sfoobarg trazaz print pattern match indeed conditionals tend function topicalizers perl subject print discourse structure discourse structure utterance longer sentence put together different language culture different rule tell joke story instance write book perl computer language rather fixed rule larger structure cobol pascal come mind perl tends pretty free order put statement except rather aristotelian requiring provide explicit beginning end larger structure using curlies could almost claim usrbinperl corresponds upon time end mean lived happily ever pronominalization know pronoun us number pronoun perl mean tends mean etc also pronominal reference back antecedent substring last pattern match mentioned function topicalizers within foreach loop grep copy item question alias similarly list reference function argument argument modified changing element theoretical ax grind natural language used people part nt give rip elegant design language except writer striving make point efficient way possible ordinary folk scatter sort redundancy throughout communication make sure understood use whatever word come hand get point across work till beat thing death normally ai nt problem quite willing learn new word occasionally see useful unlike lawyer computer scientist feel little need define lot new word say want say term computer language argues predefining commonly used concept people nt feel need make many definition quite perl script contain definition dare find c program without definition style enforced except peer pressure write like faulkner program like dijkstra gladly tell people programming style even tell think style unclear make jump mental hoop fellow programmer perl god language designer hope enforce style various typographical mean forcing le one statement per line well poetry nt think want force everyone write poetry perl stylistic limit selfimposed policed consensus among buddy cooperative design nobody design natural language unless name happens tolkien contribute design language borrowing coinage copying think cool eschewing think obfuscational best artificial language collaboration even language like perl one person seems charge perl good idea original came language suggestion made various folk went along consider language include various cultural trapping library bin directory go along language even language like c ada c even unix shell collaboration many many people perl exception inevitable divergence language designed many people language inevitably diverges dialect may possible delay living language force divergence nearly always stronger force convergence posix tried unify system v bsd soon squeezed thing together dimension number unix variant exploded several dimension lesson language designer build explicit mechanism easy identify variant language dealt perl explicit extension mechanism specify using use clause kind special semantics dialect going relying perl nt considerably pressure put various thing language nt belong core language hopefully stabilize basic perl le need invent oraperl sybperl isqlperl etc
23,Lobsters,perl,Perl,Testing Perl Clients and Go Servers,https://blog.afoolishmanifesto.com/posts/testing-perl-clients-golang-servers/,testing perl client go server,testing perl client go server work kind test githubcomsrcdgomysqlserver go programming language philosophy software design subscribe,testing perl client go serversat work recently built would normally forced integration test unit test awesome project working lower tolerance mistake leaning hard automated testing part testing go straightforward easy exists lot good builtin tooling run test get coverage etc first nongo code wrote project perl client access server writing perl web client cake wanted least exercise basic bit code since already infrastructure go test though perl client access go server test code go test extra comment clarity testperlclient run perl test child process run since caching need disabled func testperlclient testingt setup return special struct test starting actual server test port env setup nongo programmer defer used run code current function completes would destructor language reference counting defer envteardown ossetenv testmixer envhostname run actual perl test cmd execcommand perl test run current package dir hence slightly odd path applib mzr lib fooclientlib fooclienttclientt capture relay output emitting failure error err cmdcombinedoutput bufionewscanner bytesnewreader sscan tlogf perl stext serr nil terrorf got error scanner err err nil terrorf perl test failed err parse server memory log error page never got hit protect u something making perl test exit early var ran bool bufionewscanner envtestlogbuf sscan type access struct tag string json tag path string json uripath var v access err jsonunmarshal sbytes v err nil panic err vtag appfoo vpath mixjswebserp ran true break ran terror perl test never actually hit foo cool run given want run early build pipeline prevent larger error percolating mind built test binary ran perl image within docker build perl image go installed go image perl single binary make easy thread arg repo repogo latest builder copy gosrcgozrorg workdir gosrcgozrorg build test binary emitting mixertest run xyzzy say run test contain xyzzy string none run go test mixertest run xyzzy gozrorgjobservicesmixerpublicmixer start new perl image repoperl latest perltest copy varstarterview workdir varstarterviewjobservicesmixerpublicmixer copy binary image copy frombuilder mixertest run test binary disables caching testv run test verbose testrun perl run perl test run mixertest testv testrun perl kind test typically software industry group automated testing unit test integration test unit test fast stable since avoid network resource uncover regression caused change code dependency external service integration test tend flaky since fail due timeouts temporary failure may mean anything broke hand part integrating third party service want fail change way encode data authenticate many people balk testing strategy show since cross clearly delineated boundary would suggest fact unit test control side code fast flaky actually go step point expect code need talk mysql intend set githubcomsrcdgomysqlserver allows run process mysqlcompatible server allow skip database client mocking mean code stay simple mock hook test exercise code real client real query used usual code quickly validated become bit best practice go implement server protocol rather mocking client free improvement testing since end mocking away huge pile functionality thought crazy first learned really appreciate technique thanks john sj anderson reviewing post following contains affiliate link already know go definitely check go programming language great go book great programming book general generous dollop concurrency recently read philosophy software design really enjoyed likely whole blog post suggest reading itposted fri feb interested notified new post published subscribe get email week
24,Lobsters,perl,Perl,Lingua::Romana::Perligata -- Perl for the XXIimum Century,http://users.monash.edu/~damian/papers/HTML/Perligata.html,lingua romana perligata perl xxiimum century,lingua romana perligata perl xxiimum century damian conway school computer science software engineering monash university clayton australia abstract introduction le positional programming language semantic role mapping model latin lingua romana perligata variable subroutine builtin function operator block control structure miscellaneous feature number string reference boolean logic package class putting together greek algorithm latin implementation lingua romana perligata module filtering tokenization parsing translation execution conclusion acknowledgement appendix perligata dictionary appendix b perligata grammar,lingua romana perligata perl xxiimum century damian conway school computer science software engineering monash university clayton australia abstract paper describes perl module lingua romana perligata make possible write perl program latin plausible rationale wanting thing provided along comprehensive overview syntax semantics latinized perl paper also explains special source filtering parsing technique required efficiently interpret programming language syntax largely nonpositional introduction compared language modern ancient english comparatively weak lexical structure much grammatical load english sentence carried positional cue statement boy gave dog food make sense convention subject precedes verb precedes indirect object precedes direct object changing order food gave boy dog change meaning programming language use similar positional grammatical cue operation maximum next different meaning next maximum likewise function call push myassets yourmoney push yourmoney myassets generally speaking older natural language richer lexical structure inflexion noun number case therefore rely le word order example latin statement puer dedit cani escam escam dedit puer cani mean boy gave dog food indeed usual word order would reverse polish verb coming last puer cani escam dedit flexibility possible latin us inflexion position denote lexical role lack suffix denotes boy puer subject ending indicates dog cani indirect object whilst ending indicates food escam direct object say food gave boy dog one might write puero canem esca dedit ending denotes boy indirect object em ending indicates dog become direct object whilst ending indicates food subject le positional programming language reason programming language could also use inflexion rather position denote lexical role perl already make use idea requiring different prefix denote differing type symbol denote scalar denote array denote subroutine etc indeed reason certain builtin function bless block form map even push could allow argument specified order least case prefix lack thereof make role argument unambiguous obj bless classname obj square map number push moe larry curly stooge moreover since function name unambiguous role reason position need fixed either square number map moe larry curly stooge push perl already allows modicum flexibility form statement modifier next max max next max next next max paper describes new module lingua romana perligata explores alternative syntactic binding perl using inflexion based classical latin grammar inflexion subsume function standard perl prefix support new concept semantic role allows far greater freedom specification function operation respective argument semantic role perl rich variety operator provide assignment variant etc thus nearly half perl operator produce change one argument likewise many builtin perl function push pop open etc modify one argument case operand argument modified denoted positionally always left operand first argument furthermore argument always implicitly enreferenced prototype thus perl operand argument one two semantic role target data target passed reference modified evaluation operation function data passed value though value may reference control fuel modification target model possible recast almost builtin perl function operation procedure exactly two argument single reference target single list data sysopen target file data filename mode perm push target stooge data moe larry curly pop target stack data assign target max data nextval numlessthan target undef data max nextval assign target data time target undef data note many function either two standard argument may null mapping model latin map simplified model perl onto inflexionbased syntax necessary choose inflexion scheme differentiates three component function name target data consider assignment list array gunslinger good bad ugly semantic role notation assign target gunslinger data good bad ugly english would expressed assign gunslinger goody baddie mr ugly imperative verb assign specifies action performed noun gunslinger specifies indirect dative object action word recipient effect action target phrase goody baddie ugli specifies direct object action assigned word data direct indirect object distinguished order appear indirect object first english version also us plural inflexion goody baddie much way perl us prefix indicate multiplicity object involved latin instruction would loosely rendered bonos tum malos tum foedum pugnatoribus da direct object bonos good people accusative plural malos bad people accusative plural foedum mr ugly accusative singular indirect object pugnatoribus fighter dative plural verb da give present imperative conjunction tum mean conveys significance order direct object unlike english ending various latin suffix o um ibus specify number role case noun inflect mean position various object indeed verb matter sentence could equally well written pugnatoribus da bonos tum malos tum foedum da bonos tum malos tum foedum pugnatoribus semantically variant permutation verb object equivalent targetdata model assign target gunslinger data good bad ugly hence equivalent standard perl gunslinger good bad ugly thus possible write perl program latin lingua romana perligata lingua romana perligata module provides necessary translation service allow perl program written using syntactic binding perligatus modelled ancient lingua romana distinguish regular perl binding code specified henceforth referred perligata variable simplify mindnumbingly complex rule declension conjugation govern inflexion latin perligata treat userdefined scalar array variable neuter noun second declension singular scalar plural array minimizes number suffix must remembered hash represent something difficulty perligata latin lack obvious way distinguishing plural variable array solution adopted depart second declension represent hash masculine plural noun fourth declension hence type role type variable specified number case indicated table element array hash referred directly perl prefix container change surprising perligata also make use different inflexion distinguish case indexing operation array elem hash key might translated elem array key hash suggests array hash indexed name rendered genitive possessive case multilevel indexing operation array row column mean column row array hence first indexing variable must also rendered genitive table also summarizes role table perligata variable perligata number case declension perl role nextum accusative singular next scalar data nexta accusative plural next array data nextus accusative plural next hash data nexto dative singular next scalar target nextis dative plural next array target nextibus dative plural next hash target nexti genitive singular next indexed scalar nextorum genitive plural next indexed array nextuum genitive plural next indexed hash word scalar always singular noun array hash always plural different declension case noun specifies role accusative data dative target genitive indexed common punctuation variable special case often value implicit consideration eg pattern match loop rendered thing hoc data role huic target role huius indexed similarly implicitly list thing passed subroutine rendered thing haec data role target role horum indexed punctuation variable take latin form englishpm equivalent see appendix often large measure poetic licence example perligata rendered ianitorem gatekeeper numeral variable etc rendered synthetic compound parprimum equal first parsecundum equal second etc indexed take genitive form parprimi parsecundi etc since directly modified target action dative form local perligata modifier rendered surprisingly first person possessive pronoun meo conferring scalar context mei list context note modifier always applied dative hence declined case thus meo varo haec da var mei varo haec da var mei varis haec da var similarly modifier rendered nostro nostris depending desired context perl local modifier loco locis perligata loco varo haec da local var locis varo haec da local var locis varis haec da local var particularly felicitous loco latin term word local derives also mean place loco parentis meaning much closer actual behaviour local modifier namely temporarily install new symbol table entry place current one subroutine function operator userdefined subroutine represented verb situation verbal noun inflexion verb determines semantic role also call context userdefined subroutine simplest group avoid ambiguity treated verb third conjugation table illustrates various usage userdefined subroutine count table perligata subroutine perligata number mood etc perl role context countere infinitive sub count definition counte imperative sing count call void countementum acc sing resultant count calldata scalar countementa acc plur resultant count calldata list countemento dat sing resultant count calltarget scalar countementis dat plur resultant count calltarget list use infinitive subroutine definition obvious accipere would tell perligata accept spernere reject countere specifies count use imperative void context also straightforward accipe command perligata accept sperne tell reject counte bid count case instruction given void context backchat expected handling scalar list context little challenging corresponding latin must still verbal property since action performed upon object must also characteristic noun since result call used object ie target data verb fortunately latin rich assortment verbal noun far english could fill role since result subroutine call interest best solution use ementum suffix specifies singular accusative outcome action corresponds result subroutine called scalar context used data list data context plural suffix ementa used target dative form used emento ementis note ending completely consistent table builtin function operator builtin operator function could followed pattern subroutine example shift might shifte void context shiftementa used data array context shiftemento used target scalar context etc however latin already perfectly good verb meaning shift decapitare behead unfortunately verb first conjugation second hence imperative form decapita make look like perligata array data role orthogonality never perl highest design criterion perligata follows suit eschewing bland consistency favour aesthetic perligata keywords including function operator name therefore specified correct latin verb whatever conjugation required table show selection whilst appendix contains full list perligata keywords table sample perligata builtin function operator operator function rendered void context scalar data list data add adde addementum addementa give da damentum damenta conjoin sere serementum serementa enlist conscribe conscribementum conscribementa shift behead decapita decapitamentum decapitamenta push stack cumula cumulamentum cumulamenta pop unstack decumula decumulamentum decumulamenta grep winnow vanne vannementum vannementa print write scribe scribementum scribementa write write subscribe subscribementum subscribementa die die mori morimentum morimenta note however consistency entirely forsaken backformations inflexion scalar list context entirely regular consistent userdefined subroutine table perl builtin function po substr key used lvalues target action typically assignment perligata case written dative singular since lvalues always scalar note assignment lvalue function modifies first argument argument must target hence must written dative well thus nexto stringum reperimentum da next po string nextum stringo reperimento da po string next inserto stringum tum unum tum duo excerpementum da insert substr insertum stringo unum tum duo excerpemento da substr insert keyis hashus nominamentum da key key hash keya hashibus nominamento da key hash key block control structure natural language generally use parenthetical device parenthesis comma dash group separate collection phrase statement mechanism would obvious choice denoting perligata code block aesthetically pleasing solution perl block delimiters two particularly desirable property individually short collectively symmetrical considered important retain characteristic perligata latin word sic sense mean follows happily contranym ci meaning among others allure kind wordplay impossible resist perligata delimits block statement two word example sic loco ianitori local dato fonti perlegementum da data data ci control structure perligata rendered conditional clause latin english perl language may precede follow code block control table summarizes control structure perligata provides table perligata control structure perligata perl si fac nisi fac unless dum fac donec fac per quisque fac posterus next ultimus last reconatus redo confectus continue trailing fac imperative form facere used delimiter control statement condition choice dum donec completely arbitrary since latin distinguish abstraction way english dum donec mean latin relies context ie semantics distinguish impractical perligata always treat dum donec choice made order favour shorter term common type loop choice confectus continue seek convey function control structure literal meaning english word continue block specifies complete conficere iteration perligata support pure iterative form clike threepart syntax foreach var list mean variable list scalar variable must accusative governed preposition list must ablative denoting inclusion fortunately second declension inflexion ablative exactly dative giving per quisque varum listis mean extra inflexion learned use per loop better still list listis look like perligata array variable target role clearly since content may modified within loop miscellaneous feature number numeric literal perligata rendered roman numeral ii iii iv xv xlii etc however first number may also referred name unum duo tres quattuor quinque sex septem octo novem decem zero latin numeral rendered nullum noone nihil nothing might closer rendering indeclinable hence indistinguishable accusative genitive numeric literal used indexing operation must ordinal first second etc first ten ordinal named primum secundum tertium quartum quintum sextum septimum octavum nonum decimum accusative course since always data ordinal greater ten represented corresponding numeral suffix imum xvimum xliiimum etc analogy ordinal zero rendered invented form nullimum multilevel indexing operation ordinal may need specified genitive nulli primo secundi tertii quarti xvimi xliiimi etc example unimatrix would septimum noni tertii primo unimatrixorum seventh ninth third first unimatrix note order genitive significant reverse required perl floating point number expressed perligata latin fraction unum quartum mmmcxli mimum note numerator always cardinal denominator ordinal one fourth technically also feminine gender una quarta mmmcxli mimae latin rule enforced perligata string classical latin use punctuation denote direct quotation instead verb inquit said used report direct utterance hence perligata literal character string constructed quotation mark invoking verbal noun inquementum result saying data list literal interpolated example print stdout enter next word becomes enter tum next tum word inquementum tum biguttam egresso scribe note argument inquementum special treated literal punctuation string special name lacunam hole space stadium stride tabspace novumversum new verse newline biguttam two spot colon perligata provide interpolated quotation mechanism instead variable must concatenated string print stderr entered wordn becomes tum entered inquementum tum wordum tum novumversum oraculo scribe reference create reference variable data role target role variable automatically enreferenced variable prefaced preposition ad create reference subroutine associated verb inflected accusative suffix torem one produce corresponding nounofagency example val inquementum datuum ad datum da dat val data arg inquementum datuum ad arga da dat arg arg act inquementum datuum functorem da dat act func special case construction anonymous subroutine constructor factorem one equivalent sub perl anonymo da factorem sic haec mori ci anon sub die perl subroutine may invoked concatenating call specifier name variable holding reference anonymume no tum morituri inquementum anon no morituri note variable holding reference anonymum used data named accusative case subroutine reference target action dative suffix torus used instead benedictum functori classum bless func class benedictum factori sic mori ci classum bless sub die class boolean logic perl logical conjunctive disjunctive operator come two precedence curiously latin higher precedence perl operator represented perligata emphatic latin conjunction atque vel respectively lower precedence operator represented unemphatic conjunctive suffix que hence resulto damentum foundum atque defum result found def resulto damentum foundum defumque result found def resulto damentum foundum vel defum result found def resulto damentum foundum defumve result found def note latin suffix unemphatic conjunction always appended first word point conjunction would appear english thus result val max rendered resulto damentum valum parprimumve tum parsecundum maxementum proper latinate comparison would odious perligata require first argument expressed nominative would indicative would course improve positional independence language even allowing si valus praecedit datum val dat si praecedit datum valus val dat si datum valus praecedit val dat unfortunately also introduces another set case inflexion another verbal suffix worse would mean noun suffix longer unambiguous declension nominative plural end genitive singular nominative singular ending u accusative plural suffix fourth declension nominative used scalar could longer always distinguished array hash except context avoid problem perligata represents equality simple inequality operator three pair verbal noun described table table perligata comparison operator perligata meaning perl aequalitam equality aequalitas equality eq praestantiam precedence praestantias precedence lt comparitiam comparison comparitias comparison cmp operator take two data argument compare si valum tum datum aequalitam val dat si valum praestantias datum val lt dat digere sic aum comparitiam bum ci lista sort b list note although digere look like infinitive ie subroutine definition fact imperative digerere sort perligata keyword sort philosophically inclined might choose think confusion engenders form instant justice visited upon use sort void context effect comparison operator gt lt ne ge etc achieved appropriate ordering two argument combination logical negation operator non si valum datum non aequalitam val dat si datum praestantiam valum val dat si valum non praestantias datum val ge dat package class perligata keyword declare package domus literally house context name class follows keyword treated literal data argument inquementum explicitly specify variable subroutine belonging package preposition intra within used call subroutine method particular package object preposition apud house used perl bless function benedice perligata almost invariably used scalar data role benedictum thus domus specimen package specimen newere sub new sic mei datibus data counto intra specimen postincresce specimen count datibus nullum horum benedictum bless data ci printere sub print sic modus tum indefinitus inquementum mori die method undefined ci domus princeps package main meo objecto da object newementum apud specimen specimen new printe apud objectum object print putting together greek algorithm latin sieve eratosthenes one oldest wellknown algorithm better part roman culture borrowed greek perhaps fitting first ever perligata program well usrlocalbinperl w use lingua romana perligata maximum inquementum tum biguttam egresso scribe meo maximo vestibulo perlegamentum da da duo tum maximum conscribementa mei listis dum listis decapitamentum damentum nexto fac sic nextum tum novumversum scribe egresso lista sic hoc recidementum nextum ci vannementa da listis ci use lingua romana perligata statement cause remainder program translated following perl print stdout maximum maxim stdin list maxim next shift list print stdout next n list grep next list note last perligata statement lista sic hoc da listis use inflexion distinguishes list greped lista list assigned listis even though wrong end statement compared perl version implementation lingua romana perligata module module simple example source filter make use paul marquess filter util call module perligata parser invoked single subroutine called filter source code described following section filtering filter util call module greatly simplifies task prefiltering source code filtering module us filter util call simply add command filteradd import subroutine filtering module used code filter util call look filtering module namespace subroutine called filter call filter subroutine access source code file called filtering module modify code appropriate whatever string variable filter subroutine return passed compiler final program source tokenization lingua romana perligata filter subroutine conforms usual structure grammarbased parsertranslator first invokes tokenizer break perligata source code sequence token tokenizer simple split source whitespace period classifies word resulting list matching series increasingly general pattern keywords tested first followed number numeral punctuation variable userdefined function scalar list context userdefined subroutine void context variable target role ie dative finally variable data role accusative word classified converted object corresponding token type keyword number var sub etc object store original word corresponding perl construct example sequence dum maxo maxa maxamentum damentum would yield list equivalent bless raw dum perl conditional bless raw maxo perl max noundative bless raw maxa perl max nounaccusative bless raw maxamentum perl max verbresultative bless raw da perl verbimperative object form stream token passed parser parsing positionindependence much perligata grammar make task parsing quite challenging using standard tool typically predicated lexical component appearing rigidly defined sequence example write rule match perligata subroutine call following required action dative accusativelist verb accusativelist dative verb accusativelist verb dative dative verb accusativelist verb dative accusativelist verb accusativelist dative accusative verb accusative dative verb accusativelist verb verb dative verb accusativelist verb difficulty compounded fact target data also result positionindependent subroutine call produce leftrecursive grammar unusually large number shiftreduce reducereduce ambiguity make grammar sensitive subrule precedence ordering production within rule appendix b show full grammar cope efficiently constraint lalr parser built using françois désarménien excellent parse yapp module translation execution rule perligata grammar contains embedded action collectively action construct full parse tree source code grammar par node tree blessed object belonging class represents corresponding perl construct example parsed fragment dum maxo maxa maxamentum damentum converted following tree bless condition bless target bless raw maxo perl max vartarget data bless raw maxamentum perl max data bless raw maxa perl max vardata subcall assignment block undef whileloop tree constructed equivalent perl code obtained calling method codify root node tree recursively invokes codify method subnodes tree return string containing perl code fragment corresponding subtree node concatenating fragment string containing full perl program generated string assigned end filter subroutine compiled executed automatically filter util call conclusion latin surprisingly good fit perl rich case structure provides abundance plausible mapping perl data type subroutine call especially perl eclectic syntax semantics mapped onto regular actiontargetdata model use inflexion denote semantic role programming language offer interesting variation ubiquity positional syntax replacing requirement recall syntactic rule requirement remember suffix two task easier probably vary programmer programmer release module cpan author look forward advent truly epic perl poetry acknowledgement special thanks john crossley tom christiansen bennett todd invaluable feedback suggestion enduring gratitude david secomb deane blackman patience helping struggle perplexity lingua romana appendix perligata dictionary appendix list complete perligata vocabulary except roman numeral ii iii etc following table three column always perl construct perligata equivalent literal meaning perligata equivalent generally accusative form shown noun adjective imperative verb table value variable nullum noone unum one duo two tres three quattuor four quinque five sex six septem seven octo eight novem nine decem ten secundum second tertium third quartum fourth quintum fifth sextum sixth septimum seventh octavum eighth nonum ninth decimum tenth parprimum equal first parsecundum equal first partertium equal third parquartum equal fourth parquintum equal fifth parsextum equal sixth parseptimum equal seventh paroctavum equal eighth parnonum equal ninth pardecimum equal tenth ianitorem gatekeeper var admeta measure hochuic thing hishorum thing biguttam two spot lacunam gap stadium stride n novumversum new line local loco place meo nostro main princeps principal table quotelike operator inque say q inque say compara match substitue substitute tr converte translate converte translate table mathematical operator function adde add deme subtract nega negate multiplica multiply divide divide recide lop eleva raise preincresce increase beforehand postincresce increase afterwards predecresce decrease beforehand postdecresce decrease afterwards ab priva strip angula create angle sin oppone oppose co accuba lie beside int decolla behead log succide log tree sqrt fode root rand conice guess cast lot srand prosemina scatter seed table logical comparison operator non general negation atque empathic vel emphatic que praestantiam precedence lt praestantias precedence comparitiam comparison cmp comparitias comparison aequalitam equality eq aequalitas equality table string chomp morde bite chop praecide cut short chr inde give name hex senidemi sixteen time oct octoni eight time ord numera number lc deminue diminish lcfirst minue diminish uc amplifica increase ucfirst amplia increase quotemeta excipe make exception crypt huma inter length meta measure po reperi locate pack convasa pack baggage unpack deconvasa unpack split scinde split study stude study index scruta search join coniunge join substr excerpe extract table scalar array hash defined confirma verify undef iani empty make void scalar secerna distinguish isolate reset lusta cleanse pop decumula unstack push cumula stack shift decapita behead unshift caput crown splice iunge splice grep vanne winnow map applica apply sort digere sort reverse retexe reverse delete dele delete quisque exists adfirma confirm key nomina name value argue disclose content table io related open evolute open book close claude close book eof extremus end read lege read getc sublege pick something readline perlege read print scribe write printf describe describe sprintf rescribe rewrite write subscribe write format pinge paint formline distingue intersperse pipe inriga irrigate tell enunta tell seek conquire seek stdin vestibulo entrance stdout egresso exit stderr oraculo place doom pronounced data fonti wellspring table control sic ci follows fac sub factorem sic ci one follows eval aestima evaluate exit exi exit per foreach per quisque goto adi go si return redde return unless nisi donec dum wantarray deside want last ultimus final next posterus following redo reconatus trying continue confectus complete die mori die warn mone warn table package class module apud house intra within bless benedice bless caller memora recount history package domus house ref agnosce identify tie liga tie tied exhibe display something untie solve untie require require require use ute use table system filesystem interaction chdir demigrare migrate chmod permitte permit chown vende sell fcntl modera control flock confluee flock together glob inveni search ioctl impera command link copula link unlink decopula unlink mkdir aedifica build rename renomina rename rmdir excide raze stat exprime describe truncate trunca shorten alarm terre frighten dump mitte drop exec commuta transform fork furca fork kill interfice kill sleep dormi sleep system obsecra entreat higher power umask dissimula mask wait manta wait table miscellaneous operator tum sere conjoin conscribe enlist ad towards da give appendix b perligata grammar script statement statement conditional imperative data target conditional control block imperative control control dum data fac donec data fac si data fac nisi data fac unless per quisque nounaccusative target fac foreach b block sic script ci imperative data verb data target datalist verb datalist target verb datalist verb target target verb datalist verb target datalist verb datalist target verb target noundative possessive noundative local b etc block data resultativedative data target datalist resultativedative datalist target resultativedative datalist resultativedative target target resultativedative datalist resultativedative target datalist resultativedative datalist target target intra accusative b target apud dative b target noungenitive b factori block sub accusative nounaccusative ad accusative accusative intra accusative b accusative apud accusative b accusative noungenitive b factorem block sub data accusative nega data non data data resultativeaccusative data target datalist resultativeaccusative datalist target resultativeaccusative datalist resultativeaccusative target target resultativeaccusative datalist resultativeaccusative target datalist resultativeaccusative datalist target verb verb verb intra accusative b verb apud dative b resultativedative resultativedative resultativedative intra accusative resultativedative apud dative resultativeaccusative resultativedative resultativeaccusative intra accusative resultativeaccusative apud dative datalist datalist tum data data
25,Lobsters,perl,Perl,Higher-Order Perl,https://hop.perl.plover.com/,higherorder perl,higherorder perl mark jason dominus order online powell book download full text chineselanguage edition hop idea book table content recursion callback dispatch table caching memoization iterators recursion iterators infinite stream higherorder function parsing declarative programming chapter chapter chapter chapter chapter chapter fulltext search mailing list mjdbook complete archive past message mjdbooks complete archive past message hopdiscuss complete archive past message hopdiscussdigest hopvolunteer archived message submit form order online powell book mark dominus blog new page perl paraphernalia mjdperlhop plovercom,higherorder perl mark jason dominus order higherorder perl online powell book download full text current status book published march copy available bookstore u europe online bookseller second printing became available august chineselanguage edition hop translated mr teng jiahai published june china machine press available chineselanguage online bookseller idea book higherorder perl functional programming technique perl write function modify manufacture function would want way code flexible reusable instead writing ten similar function write general pattern framework generate function want generate function need according pattern program nt need know advance function necessary generate needed instead writing complete program get computer write table content recursion callback dispatch table caching memoization iterators recursion iterators infinite stream higherorder function parsing declarative programming hop full useful interesting example perl programmer want see chapter writing recursive function walk file system process recursivelystructured data html document chapter discus dispatch table context reading configuration file chapter concludes improved replacement www simplerobot module better functionality onethird code also contains basic database query system search http log file backwards delivering recent record first chapter discus frequently asked question generate list string match given regex provides astonishingly simple solution later chapter show build parser regexes attach string generator chapter present linogram complete constraintbased diagramdrawing system download publisher final pdf proof second printing download uncorrected manuscript copy mod format sorry delay hoped posted end oops also use fulltext search search book long time provisional title book perl advanced technique handbook never planned use title always planned change found something better mailing list mjdbook used send occasional report progress hop mailing list sent announcement since hop published possible send future example translation book published list extremely low volume quite possible never see another message complete archive past message mjdbooks working least one book announcement upcoming book book might write future subscribe list subscriber get see draft chapter course material related book goody list lowvolume complete archive past message hopdiscuss public discussion list hoprelated matter complete archive past message hopdiscussdigest digest version hopdiscuss instead one message time list receives message batch every day hopvolunteer would like help put hop online please read archived message subscribe subscribe list send mail submit form order higherorder perl online powell book return mark dominus blog new page perl paraphernalia mjdperlhop plovercom
26,Lobsters,perl,Perl,Hardening Perl’s Hash Function (2013),https://blog.booking.com/hardening-perls-hash-function.html,hardening perl hash function,hash implemented hash split memory exhaustion attack rehash mechanism multicollision attack explain change perl change oneatatime function reduce information leakage people complain randomization good anyway tangible attack perl hash function hash function dynamic language hvfunch afterwards bug filed perl original research,written yves ortonthe basic idea attack precompute set key would hash value thus storage bucket key would fed batch target would compare key previously stored key inserting new key effectively turning hash linked list changing performance profile inserting item amortized n mean practice loading argument getpost parameter hash provided vector denial service attack many httpbased applicationsas response perl implemented mechanism would detect long chain entry within bucket trigger hash split meant would double number bucket redistribute previously stored key required newly added bucket hash split chain still unacceptably long perl would cause hash go special mode rehash mode us perprocess random hash seed hash function switching normal hash special mode would cause perl allocate new bucket array recalculate previously stored key using random seed redistribute key old bucket array new one mitigated attack remapping previously colliding key well distributed set randomly chosen new bucketsat point perl community thought put subject hash collision attack behind u nearly year heard little subjectmemory exhaustion attack rehash mechanismover year occasionally subject changing hash function would come instance jarkko made number comment faster hash function response bit research subject little came workin changed working several project made heavy use perl hash function decided invest effort see hash function would provide performance improvement time people perl community becoming interested partly due work partly due publicity multicollision attack python ruby hash function murmurhash cityhash publicity actually notice pushed patch switch perl use murmurhash default hash something got reverted real fastin restructuring perl hash implementation easier test different hash function became well acquainted finer detail implementation rehash mechanism frankly got way wanted remove outright arguing whether could replaced conceptually simpler mechanism discovered defense put place strong previously believed fact provided whole new arguably dangerous attack vector original attack meant mitigate resulted security team announcing release security patch major perls version since problem rehash mechanism allowed attacker create set key would cause perl repeatedly double size hash table never trigger use randomized hash seed relatively key attacker could make perl allocate bucket array hash bucket many memory would allow even attack consume memory box would serious performance consequence perl remapped key ever increasing bucket array even fast hardware counting take issue affected version perl affect perl interested security patch version follows time perl installation securitypatched additionally official perl maintenance release published would like know vulnerable try following program perl le h qw h k r ad ao ax ay b ck cm cz ej fz hm ia ih iz jk kx lg lv lw nj oj pr ql rk sk td tz vy yc yw zj zu aad acp acq adm ajy alu apb apx asa asm atf axi ayl bbq bcs bdp bh bml print ok perl following statistic generated time program full attack oneliner perl without fix applied identicalzero line omitted laptop without fix patch user time second time second cpu job got elapsed wall clock time h mm s s resident set size kbytes reclaiming frame page fault context switch fix patch applied user time second time second cpu job got elapsed wall clock time h mm s s resident set size kbytes reclaiming frame page fault context switch explain change perl observant reader realized could patch older perls robust could also patched avoided problem caused changing perl hash function reason went even maintenance patch found perl le readily exploitable vulnerability attack wanted best fix allthis part story start ruslan zakirov posting report mailing list report outlined basis key discovery attack perl hash function first perl security team entirely convinced followed code demonstrated attack sound development meant choice random seed would make perl hash function robust attack attacker could relatively efficiently determine seed use knowledge construct set attack key could used attack hash functionnicholas clark ramped thing notch indepth analysis attack issue involved time ruslan conclusion analysis attack exploited multiple vulnerability perl hash data structure worked response would similarly require multipronged approachchanges oneatatime functionthe first vulnerability bob jenkins oneatatime hash perl used mix seed together hashed data well enough short key allows attacker mount key discovery attack using small set short key order stored probe seed eventually expose enough bit seed final collision attack could mountedwe addressed issue making perl append four digit randomly chosen suffix every string hashed mean always mix seed least time mix something attacker know effectively double number bit used secret state ensures short key leak information original seed reason use suffix adding prefix starting different initial seed state add extra security suffix modifies final state user input provided increase search space attacker must considerrelated change original oneatatime function potentially vulnerable multicollision attack attacker could precalculate one suffix thath x h concat x suffix would allow attacker trivially construct infinite set key would always collide bucket hardened hash mixing length key seed believe le eliminates possibility multicollision attack mean seed used calculate h concat x suffix would seed h concat x suffix suffix cryptographer invited prove u wrongreduce information leakagethe second vulnerability easy leak information hash function attacker instance web page might accept set parameter respond information parameter natural key order hash might provide enough information mount key discovery attackin order prevent information leakage randomize element order returned key function hash adding mask hash insert hash occurs modify mask pseudorandom way traversal iterate kth bucket xor iteration value mask result every time new key added hash order key change le completely mean natural key order hash expose almost useful data attacker seeing one key front another tell anything bucket key stored nice side effect use mask detect people inserting hash traversal generally indicates problem code produce quite surprising result difficult debug perl happens warn developer ita third vulnerability related case two key stored bucket case order key predictable recently added key would first key traversal allows small amount data leak potential adversary identifying case one could find two string least significant bit stuffing key hash triggering hash split attacker could determine newly added bit hash value different two key without keyorder randomization logic mentioned previously attacker could also determine two significant bit used part hash valuewhile yet able construct actual attack based information decided harden anyway done randomly choosing whether insert colliding key top bucket chain insert second top chain similarly hash split also make decision key collide remapped new bucket end result order two key colliding bucket le random although order two key notpeople complain randomization good anyway introduced randomization perl hash function order harden attack discovered positive consequence foreseethe first initially appeared downside perl hash function behaved consistently decade time perl developer inadvertently created dependency key order example found test file cpan module many u got lazy froze key order test code example embedding output data dumpercall one test however real bug reputable well tested modulesby making perl key order random dependency key order became instantly visible number bug probably manifested heisenbugs became regular occurrence much easier track identify estimate every two nonbugs thing like test code found one real bug identified well considering one perl core dbi personally consider good resultmany people object randomization like make debugging harder premise becomes difficult recreate bug thus debug believe practice opposite randomization like mean formerly rare bug becomes common turn mean becomes much obvious related subtle dependency key order effectively making much easier find problemsa last benefit randomizing hash function time change replace hash function perl built fact bundled multiple hash function including presumed cryptographically strong siphash since hash order random worry change function external code already robust hash order unpredictablehow tangible attack perl hash function lot discussion subject obviously erring side caution security matter right course action nevertheless lot debate practical attack like real production environment perl commonly used web server point keep mind perls hash algorithm us array bucket whose size always number key stored factor two larger mean hash key generally bucket key hash split bucket mean key inserted hash le likely key put bucket attacking hash make nonattack key slower attacker basically slows fetch except byproduct resource consumption affect requestsfor attack reach do proportion number item inserted hash would large modern cpu linked list thousand hundred thousand key would necessary serious degradation service point even attack unsuccessful term degrading perl hash algorithm would still function effectively dataflooding denial service attack therefore focusing hash complexity aspect attack seems unwarrantedrudimentary outofband measure sufficient mitigate attack hard restriction number key may accepted publicly facing process sufficient prevent attack causing damage instance apache default restricting number parameter accepts effectively hardens type attack one reason attack rehash mechanism important successful attack requires relatively key similarly well designed application would validate parameter receives put hash unless recognizedso long hash function chosen vulnerable multicollision attack simple perprocess hash seed randomization make job finding attack key set prohibitively difficult one must first perform hashseed discovery attack generate large set key restriction number key process accept place key must large collision would noticeable effect also make job finding colliding key expensivein many circumstance webservice provider host behind load balancer either mean every different web host us different hash seed making hash seed discovery attack difficult requires attacker open longrunning persistent session server wish attack easily preventable via normal monitoring proceduresfor reason appears hashcomplexity attack context perl web hosting environment limited interest long hash function allow multicollision attacksthe hash function us least perprocess hash seed randomizationthe interface untrusted potential attacker us simple hard limit number key acceptthese property relatively easy accomplish without resorting cryptographically strong hash function generally slow complicated measure prevent attack case perl rehashing flaw shown cure may worse disease code cve exploit attack added perl part attempt defend hypothetical attack vector excessive bucket collision time unaware real attack formhash function dynamic languagesit seems like bulk research hash function focused finding fast cryptographically secure hash function long string containing binary data however dynamic language like perl make heavy use hash function small string often restricted simple alphanumeric character example email address identifier like variable method name single character key list numeric id similar use case relatively short string use restricted set bit bytesso far appears bob jenkins oneatatimehash minor modification provides acceptable solution seems good distribution property reasonably fast short string hardening measure added perl appears robust attack analysis done security team suggests oneatatimehash intrinsically secure murmurhash however knowledge peerreviewed cryptanalysis prove itthere seems little research fast robust hash algorithm suitable dynamic language siphash notable exception step forward within perl community seems consensus currently slow least recommended incarnation also problematic current implementation support bit architecture doubt improve time perhaps even already universal hashing also seems promising theory unproven practice case like perl size hash table small input string variable size often selected restricted character set attempted implement number universal hashingstyle hash function perl disappointed extremely poor distribution bucket hash simple task like hashing randomly selected set integer text form may flaw implementation appeared universal hashing perform particularly well input byte evenly distributed least work required prove utility universal hashing dynamic language contextthe dynamicscripting language community need academic computing community provide better tool box peer reviewed string hash function offer speed good distribution restricted character set short string sufficiently hardened practical deployment robust direct attack security important theoretical attack require large volume keyresponse exchange trump requirement good distribution property acceptable performance characteristic perl make relatively easy add test new hash function see hvfunch would make nice test bed interested area researchafterwardsi would like thank nicholas clark ruslan zakirov jarkko hietaniemi contribution led change perl nicholas lot deep analysis provided motivation create attack proof ruslan provided analysis working keydiscovery attack script perl old hash function jarkko motivated look general subject see also bug filed perl original research anything attack might make access key part attack faster attack key cluster one bucket mean key much likely spread among remaining bucket fewer key average without attack
27,Lobsters,perl,Perl,Hacking with Environment Variables,https://www.elttam.com/blog/env/,hacking environment variable,introduction remote ldpreload exploitation perl exploit hacker fantastic blasty exploit solve ctf challenge justinsteven proof concept python making progress pythonwarnings guarded check variable antigravity module easter egg leveraging perl arbitrary code execution proof concept nodejs blog post michał bentkowski proc filesystem proof concept php php setting orange tsai great blog post brendan scarvell proof concept ruby proof concept conclusion,introduction recent project gained ability specify environment variable process executed also unable control content file disk bruteforcing process identifier pid file descriptor found interesting result eliminating remote ldpreload exploitation fortunately scripting language interpreter executed enabled u execute arbitrary command specifying particular environment variable blog post discus arbitrary command executed range scripting language interpreter supplied malicious environment variable perl quick read environment section perlrun man page reveals plenty environment variable worth investigating environment variable allows specifying commandline option restricted accepting option cdimtuwdmtw unfortunately mean e allows supplying perl code run lost though demonstrated exploit hacker fantastic exploit writes malicious perl module tmprootpm supply environment variable achieve arbitrary code execution however exploit local privilege escalation vulnerability generic technique ideally require access file system looking blasty exploit cve exploit require creating file used environment variable sh exit environment variable also used solve ctf challenge one final nicety generic technique would use single environment variable instead two justinsteven found possible leveraging either used load perl module option allows adding extra code module name proof concept arbitrary code execution achieved using environment variable perl running empty script devnull docker run env print id perl devnull root root root python reading environment variable section python man page pythonstartup initially appears like may piece straightforward solution allows specifying path python script executed prior displaying prompt interactive mode interactive mode requirement seem like would issue pythoninspect environment variable used enter interactive mode specifying command line however documentation option explains pythonstartup used python started script execute mean pythonstartup pythoninspect combined pythonstartup effect python repl immediately launched ultimately mean pythonstartup viable effect executing regular python script environment variable looked promising pythonhome pythonpath let gain arbitrary code execution require also able create directory file filesystem may possible loosen requirement use proc filesystem andor zip file majority remaining environment variable simply checked contain nonempty string toggle generally benign setting one rare exception pythonwarnings making progress pythonwarnings documentation pythonwarnings state equivalent specifying w option w option used warning control specify warning often printed full form argument action message category module line warning control seem like promising lead quickly changed checking implementation def getcategory category category return warning category import builtins klass category else module klass categoryrpartition try import module none none klass except importerror raise optionerror invalid module name r module none code show long specified category contains dot trigger import arbitrary python module next problem vast majority module python standard library run little code imported tend define class used later even provide code run code typically guarded check main variable detect file imported run directly unexpected exception antigravity module python developer included easter egg triggered running import antigravity import immediately open browser xkcd comic joked import antigravity python would grant ability fly antigravity module open browser us another module standard library called webbrowser module check path large variety browser including mosaic opera skipstone konqueror chrome chromium firefox link elinks lynx also accepts environment variable browser let specify process executed possible supply argument process environment variable xkcd comic url one hardcoded argument command ability turn arbitrary code execution depends executables available system leveraging perl arbitrary code execution one approach leverage perl commonly installed system even available standard python docker image however perl binary used first argument xkcd comic url comic url argument cause error process exit without environment variable used effect url passed perl docker run e print id exit perl http ca nt open perl script http file directory fortunately perl available also common default perl script available perldoc perlthanks script also error exit invalid argument error case happens later processing environment variable mean leverage perl environment variable payload detailed earlier blog post working intended perldoc perlthanks docker run e print id exit perldoc http root root root run e print id exit perlthanks http root root root proof concept arbitrary code execution achieved using multiple environment variable python python docker run e e browserperlthanks e print id exit python devnull root root root invalid w option ignored unknown warning category antigravityx docker run e e browserperlthanks e print id exit python devnull root root root invalid w option ignored unknown warning category antigravityx nodejs blog post michał bentkowski provided payload exploiting kibana prototype pollution vulnerability used set arbitrary environment variable resulted arbitrary command execution michał payload used nodeoptions environment variable proc filesystem specifically procselfenviron although michał technique creative worked perfectly vulnerability technique always guaranteed work constraint would nice remove first constraint using procselfenviron viable content made syntactically valid javascript requires able create environment variable appear first content procselfenviron knowingbruteforcing environment variable name appear first overwriting value another constraint first environment variable value finish single line comment therefore newline character environment variable likely cause syntax error prevent payload executing use multiline comment fix issue must closed syntactically valid therefore rare case environment variable contains newline character required knowbruteforce environment variable name overwrite value new value contain newline removing contraints exercise left reader proof concept achieving arbitrary code execution environment variable nodejs michał bentkowski docker run e nodeversionconsolelog require childprocess execsync id tostring e nodeoptions require procselfenviron node devnull root root root php run ltrace e getenv php devnull find php us phprc environment variable environment variable used attempting find load configuration file phpini exploit neex used series php setting achieve arbitrary code execution orange tsai also great blog post creating exploit cve us slightly different list setting using knowledge plus knowledge gained previous nodejs technique help brendan scarvell two environment variable solution found php constraint exist technique nodejs example proof concept achieving arbitrary code execution environment variable php docker run e nautoprependfileprocselfenvironn php die id e phprcprocselfenviron php devnull autoprependfileprocselfenviron root root root ruby generic solution ruby found yet ruby accept environment variable rubyopt specify commandline option man page state rubyopt contain e k r u v w w debug disablefeature enablefeature promising option r cause ruby load library using require however limited file extension rb example somewhat useful rb file found toolsserverrb json gem available installing ruby fedora system file required web server started shown using rubyopt environment variable cause ruby process start web server docker run env binbash c dnf install ruby devnull ruby devnull surf http info webrick info ruby info webrick httpserver start sticking fedora another approach leverage fact usrbinruby actually bash script start usrbinrubymri script call bash function overwritten environment variable proof concept using exported bash function run arbitrary command docker run env bashfuncdeclare id exit binbash c dnf install ruby devnull ruby devnull root root root conclusion post explored interesting use case environment variable could assist achieving arbitrary code execution various scripting language interpreter without writing file disk hopefully enjoyed reading inspired find share improved payload scripting language find generic technique work ruby would interested hearing achieved thanks reading ciao bella
28,Lobsters,perl,Perl,Perl7 is a fork of values,http://blogs.perl.org/users/leon_timmermans/2020/08/perl7-is-a-fork-of-values.html,fork value,video policy document nt aim bring new feature nt enable u anything nt possible without instead aim change perl culture know whole point radically choosing approachability stability also fork community ecosystem,reading watch video bryan cantrill explains valueconflict joyent nodejs believe similar problem defines list project value value important tension end one choose perl traditionally prioritized certain value others experience expressiveness extensibility stability expressiveness probably obvious one extensibility probably le obvious probably le concious choice feel like right pick language several oo framework custom keywords stability particular backwards compatibility thoroughly embedded policy document lately ignoring actively opposing compatibility earlier version perl come vogue sometimes change proposed want usurp syntax previously another meaning sometimes change want improve previouslycrazy semantics road lie madness doubt caution dictate favor backward compatibility using lexical pragma enable disable legacy behavior considered appropriate absence pragma legacy behavior enabled matter frustrating unintentional feature may u continue improve perl unintentional feature often deserve protection important existing software written perl continue work correctly major scripting language value keeping code working similar language especially python breaking relatively common construct regularly generally tried limit margin though certainly breakage major release nt mean subcommunities share exactly value though involved toolchain toolchain specific value robustness portability stability value sysadmins environment working thing keep working whereas example mojo community generally seems prioritize approachability expressiveness velocity value modern web development change constant mostly difference fine help lot community value overlap language value different community different value without biting said perl internal conflict value take language tension existed several year focused primarily around stability primary axis tension approachability versus stability simply put new feature default guarded version feature guard eg use use stability enabled default next perl version approachability nt aim bring new feature nt enable u anything nt possible without writing guard instead aim change perl culture know whole point radically choosing approachability stability crucial thing realize mean fork interpreter also fork community ecosystem extent fork postponed drop compatibility given new course inevitable join brave new world make fork value complete even value governance completely different mailing list open entire community historically perhaps bit open steering committee whose membership inviteonly post summary activity everyone wondering going crucial question going stop current official plan something repeated argued make sense sunsetting release experimental feature lacking executable box development continue something nt talked much sure yet happen pretty sure decision nt taken people nt want use nt know going even sure forking good bad long run could good managed well far nt terrifies
30,Lobsters,perl,Perl,Thinking about a new Type System for Perl/Cor,https://github.com/Ovid/Cor/wiki/Type-System,thinking new type system perlcor,click provide feedback opened ticket perl git repo type type system data type type programming language taint checking benefit type system detecting error context documentation safety preventing data written swap efficiency human versus computer type integer character array integer character pointer generic type hierarchy,click provide feedback cor need type system however probably turn hard b need type cor signature variable declaration whatever else forgotten variable declaration nt much discussion dave mitchell work type signature predates cor attempt declaring type compatible opened ticket perl git repo type absolutely ca nt type system cor nt integrated rest language discus want discus bit type system type system data type unfortunately data typed tend conflate type system data type people often think declaring int str make type system true purpose discussion borrow benjamin c pierce definition excellent book type programming language type system tractable syntactic method proving absense certain program behavior classifying phrase according kind value compute rephrase bit simply le accurately type system designed goal ensuring software exhibit certain unwanted behavior declare variable must contain instance datetime object assigning string foo throw exception whether compiletime runtime subject much debate largely skip aside mentioning check preferred make programming life harder also fan gradual typing get benefit quick coding solve immediate problem fall back rigorous restriction largescale system needed said let consider taint checking taint checking developer realize common behavior using data outside program affect thing inside program unless scrubbed outside data obviously gross oversimplication otherwise get failure happens runtime perl te arg shift say arg system arg say arg foo foo insecure env path running switch e line thus taint checking type system certain unwanted behavior avoided enabling stricture use strict enabling another type system amongst many thing force nonpackage variable predeclared way failure happens compiletime perl mstrict e foo say hello say foo global symbol foo requires explicit package name forget declare foo e line execution e aborted due compilation error perl developer quite happy compiletype type failure even nt always recognize type mean often thought cor perl general worth asking kind type system need future benefit type system drawn introduction type programming language book previously mentioned use cor type syntax example detecting error common problem many dynamic programming language python class point def init self x selfx x selfy def inverse self return point selfy selfx point point inverse print pointx pointx foo print pointx print foo python considered unpythonic validate data faced million line codebase supposed know class good core perl better code arguably much worse package point sub new class x return bless x x class sub x self shift self x shift return self x sub self shift self shift return self sub inverse self shift return point new self self x fortunately developer gotten tired related bug code protect programmer cor would something like class point x reader writer new isa num method invert return point new x x tried assign string foo x get exception however x isa int safety get standard perl would try throw away information language would return arguably wrong type system perl would suggest get exception least warning nt want float silently converted integer want type change coerce integer unfortunately yes context talking return value function complicated sub list return sub array array return array list list array array say list say array say list print say array print due weird combination context list array container list though container nasty habit handing naked list running away design system type safety face without gutting context retrofitting type system language explicitly designed one filled pitfall documentation consider x isa int method foo bar isa num baz isa str read code get reasonable idea kind data need unlike pod form documentation documentation get sync program program tool javadoc produce huge amount genuinely useful documentation variety format reading information would lovely future version perldoc could take advantage safety type system often guarantee various kind safety programming perl taint mode one type system however array bound checking another c language example expects check array boundary language throw bound exception compiletime harder sound runtime perl simply resizes array fly avoid overflow error type safety would could achieve though imagine secret modifier example proposed seriously password isa secret str readline wherever password printed resulting string would stack trace see printed command line interpolated string cor declared class secret might effectively add method like following final method tostring attempt override subclass role would fatal maybe could go preventing data written swap automatically clearing memory variable go scope sort safe thing decent type system would get original information secure way let say need salt run blowfish save result database make secret secure unusable make usable secure knowing fun trick play namespaces perl suspect naïve scheme protect data would fail still exactly sort safety decent type system improve though guarantee efficiency one might take time clear goal strive declare type integer lot internal stuff perl would longer need store scalar least would always return valid value iv slot never check another slot scalar however expect first implementation would actually slow perl hey got ta check type offering way turning type checking exhaustive testing shipping production would bad idea someone going propose human versus computer original version c even released type integer character array integer character pointer type really help human help computer however advent oo system could declare something instance class thus type system became bit humanfriendly type matched programmer need computer need though thing like bicycle yourbike new bicycle useful repetition bother raku avoid repetition operator bicycle yourbike new cor also humanfriendly though unclear best way implement could possibly implement form generic yourbike isa bicycle new would assign yourbike type get unclear gain u leaving type annotation alternatively could implement operator yourbike bicycle new args expect many perl developer would unhappy one tried hard limit adding new syntax language suggestion welcome improve typing without creating overly verbose language however many case type almost good enough quite want integer must greater given number steal raku age isa int minimumage get expressive type system geared human need computer need sure could implement minimumage class overkill many situation ultimately lead u road needing subtypes subtype minimumage isa int minimumage age isa minimumage generic want generic cor first glance simply omit type looked various example long data passing something typed omitting type annotation seems enough however love see counterexample type hierarchy yeah need think type hierarchy think one moose reasonable area expertise
31,Lobsters,perl,Perl,Zing - Actor Toolkit and Multi-Process Management System,https://github.com/iamalnewkirk/zing,zing actor toolkit multiprocess management system,name abstract synopsis description actor model inherits zing kernel library zing type attribute scheme method start zing kernel primatives messaging process readymade feature actormodel asynchronous atomicity redis chainable channel clusterable configuration distributed eventdriven fifoqueues hotreloadable logshipping mailbox management multitasking nonblocking parallelism supervisor virtualactors zing launcher zing spawner command zing start scheme stop log see also actor model concurrent computation concurrency goerlang akka project actorkit project orleans project pyakka project reactive manifesto disclosure redis json author license license file project wiki project initiative milestone contributing issue,name zing multiprocess management system abstract actor toolkit multiprocess management system synopsis use zing zing zing new scheme myapp zing execute description distribution includes actormodel architecture toolkit multiprocess management system provides primatives building resilient reactive concurrent distributed messagedriven application perl unfamiliar architectural pattern learn actor model inherits package inherits behavior zing kernel library package us type constraint zing type attribute package following attribute scheme scheme scheme attribute readonly accepts scheme value required method package implement following method start start kernel start method prepares zing kernel executes eventloop primatives distribution provides collection actormodel primitive used create sophisticated powerful distributed system organized within intricate process topology following directory primitive listed classification messaging class facilitate messagepassing communication process base class implement underlying process actor logic readymade class readymade process implementation using callback feature feature implemented using class object following list feature currently enabled toolkit actormodel use zing process zing process new zing process new send action greeting say recv action got distribution provides toolkit creating process actor run isolation communicate process messagepassing asynchronous process use zing domain use zing process zing domain new name peer zing process new name push mailbox mailbox term execute process use zing domain use zing process zing domain new name peer zing process new name mailbox get mailbox address mailbox send registered process message send address discovery mailbox term execute distribution provides multiprocess management system allows process deployed managed separately ability communicate across thread execution atomicity process use zing keyval kv zing keyval new name stash kv send random value data kv recv random process use zing keyval kv zing keyval new name stash kv send random value data kv recv random distribution provides data storage abstraction perform atomic read write leveraging redis default data storage backend chainable use zing process use zing ring zing process new name zing process new name ring zing ring new process ring execute distribution provides mechanism chaining ie joining two process together executing turnbased manner ability allows design complex hierarchical process topology channel process use zing channel chan zing channel new name chat data chan recv broadcast received warn data text process use zing channel chan zing channel new name chat data chan recv broadcast received warn data text distribution provides mean braodcasting communicating multiple process simulaneously channel similar fifo queue clusterable process cluster use zing queue queue zing queue new name task target global pull global queue queue recv process cluster use zing queue queue zing queue new name task target global pull global queue queue recv distribution provides support crosscluster communication thus operation using federated redis data storage backend mean scale deployment without changing implementation configuration configure namespace zingnsapp enable process debugging tracing configure namespace zingns default main zinghandleapp configure commandline tool find catridges zinghometmp configure hostname used process registration configure resource target eg distributing across multiple host zingtargetglobal local configure system datastore default zing redis zingstorezing redis configure redis driver without touching source code configure commandline tool find catridges pid file zingappdir zingpiddirtmp distribution provides environment variable let customize zing operates behaves without need modify source code attribute required fallback sane default distributed process n cluster use zing zing zing new scheme myapp zing execute process n cluster use zing zing zing new scheme myapp zing execute process n cluster use zing zing zing new scheme myapp zing execute distribution provides collection actormodel primitive used create sophisticated powerful distributed system organized within intricate process topology eventdriven process package myapp fileupoad use parent zing process sub receive self data react fileupload event return myapp fileupoad new execute process package myapp texttranslate use parent zing process sub receive self data react texttranslate event return myapp texttranslate new execute distribution provides prerequisite needed develop scalable reactive eventdriven application distributed across one several server fifoqueues process use zing queue queue zing queue new name task pull queue queue send command queue send command queue send command queue send command process use zing queue queue zing queue new name task pull fifo queue queue recv distribution provides highperformance fifo message queue enhance messaging across process order operation event critical duplicate ca nt tolerated hotreloadable use zing use zing daemon daemon zing daemon new name myappsleep app zing new scheme myapp sleep daemon execute pid kill distribution provides zerodowntime hotreloading process watcher supervisor keep app running gracefully reload child process runtime logshipping use zing zang zang zing zang new onperform sub self self log fatal something went wrong return zang execute tap log using commandline tool zing log distribution provides ability ship log individual process specific centralized channel tapped asynchronously especially commandline tool mailbox use zing process zing process new name zing process new name mailbox send mailbox term say ehlo message mailbox recv mailbox reply message say helo distribution provides every process unique mailbox receive message process mean cooperating message passing management use zing kernel kernel zing kernel new scheme myapp logger kernel execute distribution provides kernel process used manage deployment child process used wrap cartridge commandline tool daemonizing process multitasking use zing zang zang zing zang new onperform sub something onreceive sub handle something zang execute distribution provides process eventloop allows perform multiple operation sequence support operating nonblocking manner nonblocking use zing zang zang zing zang new onperform sub self self defer command return return onreceive sub self data return unless self term eq something return zang exercise distribution provides feature allow process operate nonblocking manner yielding deferring operation chunking workload parallelism use zing process zing process new spawn myapp id spawn myapp id distribution provides multiple way executing operation parallel including spawning process via forking guarantee creating zombie process supervisor use zing zang watcher zang zing zang watcher new scheme myapp zang exercise distribution provides watcher process supervise child process also capable multitasking performing operation monitoring supervised process virtualactors use zing zang spawner zang zing zang spawner new queue scheme zang exercise distribution provides ability use virtual actor process actor created ondemand result system event feature enabled zing launcher zing spawner superclass command given following process actor libmyapppm package myapp use parent zing single sub perform something application cartridge specifying fork appmyapp myapp zing commandline application let manage zing application commandline using command start zing start appmyapp start command load application cartridge return scheme run daemon stop zing stop appmyapp stop command find running application pid process id terminates process log zing log level fatal log command tap centralized log source output new event stdout standard output see also actor model concurrent computation concurrency goerlang akka project actorkit project orleans project pyakka project reactive manifesto disclosure following list known way zing like traditional actormodel system zing actor act independently nt beholden system manager zing actor always active run infinite eventloop zing actor communicate unrestricted approved communicator zing actor block using poll block default zing default datastorebackend redis mean system default subject guarantee limitation system data serialized json stored plaintext author al newkirk awncorp cpanorg license copyright c al newkirk et al free software redistribute andor modify term apache license version elucidated license file project wiki project initiative milestone contributing issue
32,Lobsters,perl,Perl,Perl is dying quick. Could be extinct by 2023,https://thehftguy.com/2019/10/07/perl-is-dying-quick-could-be-extinct-by-2023/,perl dying quick could extinct,perl function argument random character valid perl program plottwist http wwwperlcomarticleperlandcgi http http bug stats common language perl php python java c niche language delphi haskell cobol perl rust cobol delphi lifetime projection perl go away apple announced officially interpreter deprecated perl python ruby available o next version macos redhat announced officially python setup outofthebox rhel future version next logical step perl go away question future version macos include scripting language runtimes default hacker news python rhel conclusion thinking learning perl starting new project perl might want reconsider like,personal reflection evolution death programming language force circumstance reverse engineer decommission perl script old company earlier year make one wonder else still using perl remember last time heard perl want see number right away scroll next section young reader may never heard perl popular programming language year ago cobol rail used many language decade le professionally c c java python haskell ada php perl truly unique genuinely unique exotic example support function argument well like exists today mainstream language also based extensive use symbol whereas today language letter keywords variable name function name think fair say perl magic symbol stuff much random character valid perl program sample cgi script perl python php comparison straight copypaste perlcom stack overflow understand plottwist stack overflow answer never work time exception find bug answer end source http wwwperlcomarticleperlandcgi usrbinperl use strict use warning use cgi cgi cgi new param map scalar cgi param cgi param print cgi header type textplain print qq param n k sort key param print join k param k print n param foo bar source http import cgi import cgitb cgitbenable optional debugging print contenttype texthtml print argument cgifieldstorage argumentskeys print argument value source http php foreach get key value echo key value br rn bug http header must separated rn line ending script basic print generating n running linux output thus invalid although chance cgi server robust specific issue note php expose raw header avoid class issue entirely stats chart show programming language popularity relative one another data google trend common language link google trend perl php python java c interesting finding chart perl somewhat popular decade ago onpar c certainly popular enough considered among major programming language time perl decline reaching zero market share chart seeing onward single pixel google trend rounding nearzero value think fair say perl considered dead language definitely something use new project niche language let compare perl niche language low adoption link google trend delphi haskell cobol perl rust well still popular cobol cobol programming language running mainframe used financial application specifically designed support integer arithmetic transaction record often considered legacy really hard migrate large old critical typical application delphi programming language ide based pascal like c based c designed write desktop application ide gui editor drag drop widget efficient easy use maybe first provide good story came eclipsed c c java year perl conference lifetime projection curious dying faster cobol delphi perl let find graph show linear polynomial trend programming language note regression curve happen overlap cobol stable predictable language indeed believe linear projection perl could extinct month delphi cobol would outlive far go course language go extinct maybe think order magnitude le developer stage really much left typically makingselling languagetooling among last know well curious googlers unmaintained software decay hardware software evolution point suddenly stop working unfixable example executable run window ubuntu whatever reason looking turn compiler run anymore either ouch software lifecycle coupled lifecycle platform developed run strong risk associated little used divested platform perl go away perl python always come preinstalled linux remember well actually posix specification something requirement time changed though actively removed major o apple announced officially interpreter deprecated perl python ruby available o next version macos redhat announced officially python setup outofthebox rhel future version matter time distribution follow next logical step perl go away question apple announcement future version macos include scripting language runtimes default discussion hacker newsredhat announcement python rhel conclusion thinking learning perl starting new project perl might want reconsider nothing personal perl stats next need figure one took longer build microsoft window great pyramid like like loading
33,Lobsters,perl,Perl,Announcing Perl 7,https://www.perl.com/article/announcing-perl-7/,announcing perl,announcing perl brian foy darren wood perl conference cloud preparing perl perl going perl mostly free setting happening perl happening cpan porter jump major version raku disappearing appearing postfix dereferencing operator right turn indirect object notation preparing perl perl school bottom line,announcing perl jun brian foy image credit darren wood flickr morning perl conference cloud sawyer x announced perl new plan moving forward work perl already underway going huge change code syntax perl modern default set stage bigger change later latest book preparing perl go much detail perl going perl mostly perl going different saner modern default enable thing already enabled major version jump set boundary thing future remember perl mean language default probably wanted perl early day perl easy couple decade world complicated kept adding pragmas perl commitment backward compatibility change default setting back old day c include lot boilerplate start something use use strict use warning use open qw std feature qw indirect use feature qw signature warning qw experimental signature slightly better later get strict free using setting minimum version use use use warning use open qw std feature qw indirect use feature qw signature warning qw experimental signature perl chance make default even without specifying version perl still perl extreme backward compatibility behavior perl get modern practice minimal historical baggage personally hoping signature make cut still much done make unicode default probably need keep use use open qw std might miss seedier feature using anyway indirect object notation larry wall said something c programmer cgi new cgi indirect object perl cgi cgi new direct object feature really disappear perl already setting different default happening perl one taking perl away go long term maintenance lot longer two year rolling support two latest user version might decade half time perl already around happening work happening need worry six month first release candidate appear target user release perl within next year release candidate along way easy promise keep since perl mostly different default big rewrite new feature although currently experimental feature may stabilize please choose signature cpan comprehensive perl archive network cpan almost module maintained module people using still work rest compatibility mode remember perl mostly need change much may know porter test new version almost cpan long history tool check effect change may perl community module author often get message various people mostly andreas koenig slaven rezić weird thing module may break new perls usually something need update anyway tracking problem existing code solved problem fixing code onerous still perl better practice separate cpan perl one said jump perl developer want redo already working change manageable side quest possible also pause perl author upload server received quite bit love past couple year make easier adapt future need people working experienced talented made codebase much tractable jump major version major version different contract user major version jump change contract new default behavior even conflict past way reset setting old perl default like perl code still code mostly syntax behavior though sawyer speaks three major market segment perl user people never going change code people use new feature people starting scratch perl social contract extreme backward compatibility amazingly successful problem extreme backward compatibility work update code help two segment new feature crowd deal longer boilerplate section every program newbie wonder include much create program people stackoverflow hector missing pragmas two part answer first perl already taken known raku long time ago thought ambitious rewrite effort would replace short happened language gone live life next available number next cardinal number line unheard make jump php went directly time steal something community consider weird jump history solaris solaris java java postgres major version postgres major version window window xp vista tex new version closely approximates π least perl disappearing much thing disabled default essentially perl knob dial different place thing learn live without even perl land likely candidate first round change indirect object notation bareword filehandles except maybe standard filehandles fake multidimensional array hash old perl trick oldstyle prototype definition use prototype instead appearing much perl mostly perl feature enabled default anything get new feature postfix dereferencing new isa operator several feature benefit new social contract major version provides hard boundary new feature exist default one side without disturbing side right need older perl run code going fine old version going disappear like perl still available version wish run code run without problem stricture warning using modern perl style probably mostly good bareword filehandles start converting indirect object notation messy code luck compatibility mode assist transition perl perl pragma set knob dial back old setting one version thing use compat act like perl default module issue shake compatibility mechanism good news thing already tested major perl stakeholder production setting paper plan already happening rough edge sanded one knob dial place already turn indirect object notation expect two knob dial maybe like multidimensional bareword filehandle collecting information preparing perl latest offering perl school leanpub bottom line perl different setting code work mess expect user release within year
34,Lobsters,perl,Perl,Perl 5.32 released,https://metacpan.org/pod/release/XSAWYERX/perl-5.32.0/pod/perldelta.pod,perl released,name description core enhancement isa operator class instance operator perlop unicode supported http chained comparison capability perlop operator precedence associativity perlop new unicode property supported http http possible write comparison n p name perlunicode wildcards property value perlunicode improvement perllocale mbrlen mbrtowc wcrtomb alpha assertion longer experimental pla pattern perlre plb pattern perlre nla pattern perlre nlb pattern perlre script run longer experimental script run perlre feature check faster gh perl developed github http perlsec compiled pattern dumped optimization security buffer overflow caused crafted regular expression integer overflow via malformed bytecode produced crafted regular expression buffer overflow caused crafted regular expression additional note incompatible change certain pattern matching feature prohibited compiling unicode property value wildcard subpatterns wildcards property value perlunicode unused function removed bug fix may caused pattern longer compile selected bug fix property always override official unicode one userdefined character property perlunicode gh modifiable variable longer permitted constant perl use string code point forbidden use code point string bitwise operator perldeprecation accept argument plain string treated number range operator perl disallowed lookahead lookbehind assertion perl performance enhancement gh module pragmata updated module pragmata archive tar autodie b b deparse benchmark charnames class struct compress raw compress raw zlib cpan dbfile devel ppport diagnostics digest dumpvalue dynaloader encode encoding english exporter extutils cbuilder extutils makemaker feature indirect object syntax file find file glob file stat filter simple getopt long hash util gh langinfo langtags io io socket perl ipc cmd ipc json pp math bigint math bigint fastcalc module corelist module load conditional module metadata mro net ping opcode open overload parent perlfaq perlio perlio encoding perlio via pod html pod simple podlators posix safe scalar util selfloader socket storable test test perl sys hostname sys syslog term ansicolor test simple thread thread queue thread thread shared tie file tie hash namedcapture tie scalar tie stdhandle time hire perl time piece unicode normalize unicode ucd vms stdio warning file x apitest removed module pragmata documentation change existing documentation http plain old comment perlsyn plain old comment perlsyn plain old comment perlsyn updating link http searchcpanorg http metacpanorg gh extutils xssymset gh http rtperlorg diagnostics perldiag new diagnostics new error new warning change existing diagnostics character following c must printable ascii use instead sequence c invalid c c clearly written simply nonoctal character c terminates early resolved resolved nonoctal character c terminates early resolved perldiag use code point allowed permissible max x ca nt use global constant lexical variable potentially modified elsewhere longer permitted incompatible change utility change io compress base streamzip configuration compilation perl perl perlintern perlapi devel ppport perl testing gh platform support discontinued platform platformspecific note perl gh gh perl internal change perl perlapi perlapi perlapi devel ppport x code use various macro dealing perldeprecation parsesubsignature perl perl evalpv perl perl perl selected bug fix require perlfunc gh gh diagnostics gh gh gh gh gh gh gh gh gh gh gh gh perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl perl obituary acknowledgement reporting bug http http wwwperlorg http security vulnerability contact information perlsec give thanks see also,name perldelta new perl description document describes difference release release upgrading earlier release first read describes difference core enhancement isa operator new experimental infix operator called isa test whether given object instance given class class derived obj isa package name detail see class instance operator perlop unicode supported see http detail chained comparison capability comparison operator associativity chain operator precedence never operator different precedence x z behaves exactly like x z assuming simple scalar look read perlop operator precedence associativity perlop new unicode property identifierstatus identifiertype supported unicode process revising regular expression requirement http part wanting property exposed one nt part strict ucd unicode character database two used examining input security purpose detail usage http possible write qrp name qr p na smilinggrinning face unicode name property accessible regular expression pattern alternative n comparison two method given comparison n p name perlunicode second example show wildcard subpatterns also usable property see wildcards property value perlunicode improvement posix mblen mbtowc wctomb posix mblen mbtowc wctomb function work shift state locale threadsafe compiler executed platform locale threadsafety length parameter optional function always executed current c language locale see perllocale locale stateless notably rarely encountered iso maintain state call function previously state cleared every call state reset unless appropriate parameter undef threaded perls function mbrlen mbrtowc wcrtomb available substituted plain function make function threadsafe executing locale threadsafe platform string length parameter mblen mbtowc optional useful wish restrict length parsed source string le actual length alpha assertion longer experimental see pla pattern perlre plb pattern perlre nla pattern perlre nlb pattern perlre use longer generates warning existing code disables warning category experimental alphaassertions continue work without change needed enabling category effect script run longer experimental see script run perlre use longer generates warning existing code disables warning category experimental scriptrun continue work without change needed enabling category effect feature check faster previously feature check parser required hash lookup feature set outside feature bundle optimized bit mask check gh perl developed github perl developed github find u http nonsecurity bug reported via github security issue continue reported documented perlsec compiled pattern dumped optimization primarily useful tracking bug regular expression compiler dump happens ddebugging perls specify drv command line perl pattern compiled within scope use qw debug dumppreoptimize use qw debug compile extra second case display information well security buffer overflow caused crafted regular expression signed sizet integer overflow storage space calculation nested regular expression quantifier could cause heap buffer overflow perl regular expression compiler overwrites memory allocated regular expression storage space attacker supplied data target system need sufficient amount memory allocate partial expansion nested quantifier prior overflow occurring requirement unlikely met system discovered manhnd tarantula team vincss member vingroup integer overflow via malformed bytecode produced crafted regular expression integer overflow calculation offset instruction regular expression engine could cause corruption intermediate language state compiled regular expression attacker could abuse behaviour insert instruction compiled form perl regular expression discovered hugo van der sanden slaven rezic buffer overflow caused crafted regular expression recursive call sstudychunk perl regular expression compiler optimize intermediate language representation regular expression could cause corruption intermediate language state compiled regular expression discovered sergey aleynikov additional note application written perl would vulnerable flaw evaluates regular expression supplied attacker evaluating regular expression fashion known dangerous since regular expression engine protect denial service attack usage scenario incompatible change certain pattern matching feature prohibited compiling unicode property value wildcard subpatterns feature either inappropriate interfere algorithm used accomplish task complete list wildcards property value perlunicode unused function posix mbstowcs posix wcstombs removed function could never worked due defective interface specification clearly demand given one ever complained many year function claimed available hence socalled support dropped bug fix may caused pattern longer compile see selected bug fix heuristic previously used may let construct compile perhaps programmer intended effect error none known possible erroneous construct longer compile p userdefined property always override official unicode one previously userdefined property declared prior compilation regular expression pattern contains definition used instead official unicode property name always override official property change could break existing code relied likely unwittingly previous behavior without fix unicode released new version new property happens name one long using program would break upgraded perl used new unicode version see userdefined character property perlunicode gh modifiable variable longer permitted constant code like var sub sub var var referenced elsewhere sort modifiable context produce exception sub defined error avoided adding return sub definition sub sub return var deprecated since perl perl use vec string code point forbidden string represented internally vec bitoriented operation likely give unexpected result string deprecated perl use code point string bitwise operator us already illegal previous deprecation cycle remaining us prohibited deprecated perl see perldeprecation sys hostname hostname accept argument usage deprecated perl fatal plain string treated number range operator previously range would produce range numeric string produce empty list also mean produce list integer previously would produce list string due special case treated string starting string range like produced nt specially handle string perl k disallowed lookahead lookbehind assertion disallowed cause unexpected behaviour noone could define desired behaviour perl performance enhancement mystrnlen sped system nt strnlen implementation grokbinocthex grokbin grokoct grokhex sped groknumberflags sped sort noticeably faster case sort b sort b gh module pragmata updated module pragmata archive tar upgraded version autodie upgraded version b upgraded version b deparse upgraded version benchmark upgraded version charnames upgraded version class struct upgraded version compress raw upgraded version compress raw zlib upgraded version cpan upgraded version dbfile upgraded version devel ppport upgraded version test file generated identical generated posixlike system diagnostics upgraded version digest upgraded version dumpvalue upgraded version previously dumping element array encountering undefined value string printed would empty array changed apparently originally intended empty slot dynaloader upgraded version encode upgraded version encoding upgraded version english upgraded version exporter upgraded version extutils cbuilder upgraded version extutils makemaker upgraded version feature upgraded version new indirect feature added enabled default allows turning indirect object syntax file find upgraded version test longer require either file drive root directory writable root directory file glob upgraded version file stat upgraded version filter simple upgraded version getopt long upgraded version hash util upgraded version synopsis updated example code stopped working newer perls gh langinfo upgraded version langtags upgraded version document environment variable io upgraded version io socket longer cache zero protocol value since indicates implementation select protocol mean platform nt implement soprotocol given socket type protocol method may return undef supplied always honoured call send method perl iocompress upgraded version ipc cmd upgraded version ipc upgraded version json pp upgraded version math bigint upgraded version math bigint fastcalc upgraded version module corelist upgraded version module load conditional upgraded version module metadata upgraded version mro upgraded version net ping upgraded version opcode upgraded version open upgraded version overload upgraded version parent upgraded version perlfaq upgraded version perlio upgraded version perlio encoding upgraded version perlio via upgraded version pod html upgraded version pod simple upgraded version podlators upgraded version posix upgraded version upgraded version safe upgraded version scalar util upgraded version selfloader upgraded version socket upgraded version storable upgraded version use note test optional test work around circular dependency test installing old perls cpan vstring magic string disallowed regular expression object nt properly counted object id purpose retrieve would corrupt resulting structure cause runtime error case perl sys hostname upgraded version sys syslog upgraded version term ansicolor upgraded version test simple upgraded version thread upgraded version thread queue upgraded version thread upgraded version thread shared upgraded version tie file upgraded version tie hash namedcapture upgraded version tie scalar upgraded version tie stdhandle upgraded version time hire upgraded version removed obsolete code support perl classic macos perl time piece upgraded version unicode normalize upgraded version unicode ucd upgraded version vms stdio upgraded version warning upgraded version upgraded version file upgraded version x apitest upgraded version removed module pragmata documentation change existing documentation attempted update documentation reflect change listed document find missed open issue http additionally following selected change made simplify regnode definition update bound nbound definition add anyofhs regnode node like anyofhb used one leading byte matched code point anyofhb used avoid convert code point something wo nt match check first byte encoded target desired one thus ruling possible code point updated mention croak sv downgraded svsetpvn updated mention flag changed function terminating nul byte guaranteed documentation plphase added documentation grokbin grokoct grokhex updated clarified add documentation experimental isa operator experimental isa warning emitted use isa operator operator currently experimental behaviour may change future release perl caller like file line filename line number returned may altered mechanism described plain old comment perlsyn file altered mechanism described plain old comment perlsyn line altered mechanism described plain old comment perlsyn return mention return block open open section renovated significantly longer suggesting using perl malloc modern system malloc assumed much better perl implementation documentation embedfnc flag removed embedfnc sufficient comment within anyone changing file see comment first entry redundant updated documentation added missing apidoc line documentation surrounding open handle usage modernized prefer open lexical variable instead barewords various update fix including making example strictsafe replacing w use warning setlocale warning threaded build updated note apply perl later posix sigset new updated state throw error supplied signal added set additionally following selected change made updating link link defunct http searchcpanorg site point equivalent http metacpanorg url gh man page extutils xssymset installed vms platform module installed gh url changed http stale link updated applicable url documentation moved using http protocol http also affect location bug tracker http rtperlorg link library address sanitizer system tool gone stale updated working link link old email address gone stale updated working link diagnostics following addition change made diagnostic output including warning fatal error message complete list diagnostic message see perldiag new diagnostics new error new warning change existing diagnostics character following c must printable ascii extra text added end raised regular expression pattern compilation marking precisely pattern occurred use instead extra text added end raised regular expression pattern compilation marking precisely pattern occurred sequence c invalid extra text added end raised regular expression pattern compilation marking precisely pattern occurred c c clearly written simply extra text added end raised regular expression pattern compilation marking precisely pattern occurred nonoctal character c terminates early resolved includes phrase terminates early extra text added end raised regular expression pattern compilation marking precisely pattern occurred instance text resolution clarified resolved perl message longer generated instead nonoctal character c terminates early resolved perldiag used instead use code point allowed permissible max x instance message previously output hex digit b c e f lower case consistently upper case following three diagnostics removed replaced expecting interpolated extended charclass regex marked expecting close paren nested extended charclass regex marked expecting close paren wrapper nested extended charclass regex marked expecting flag regex marked code point x unicode portable warning removed line code point require larger bit word code point large longer legal platform ca nt use global error message slightly reformatted original ca nt use global particular misleading error message like ca nt use global rendered ca nt use global subroutine signature constant lexical variable potentially modified elsewhere longer permitted error message replaces former constant lexical variable potentially modified elsewhere deprecated allowed perl reflect fact previously deprecated usage transformed exception message classification also updated deprecated f fatal see also incompatible change n restricted one character emitted circumstance previously n inverted character class range endpoint restricted one character due new circumstance added perl nt covered earlier wording utility change new utility included part io compress base upgrade streamzip creates zip file stdin program read data stdin compress zip container default write streamed zip file stdout configuration compilation configure clang add include stdlibh configure probe futimes strtoll strtoul strtoull strtouq otherwise probe would fail compile use compile run test lchown satisfy clang reliably detect c compiler add include stdioh configure probe getpgrp setpgrp use printf c compiler may fail compilation instead warning check compiler handle inline attribute check character data alignment configure correctly handle previously interpreting turned fpccstructreturn perl longer probe defaulting define platform check errorprone done platform perl documentation hint building perl zos native ebcdic updated still work progress new probe mallocusablesize added improvement configure detection c clang work ongoing andy dougherty perl autodocpl tool regenerates perlintern perlapi overhauled significantly restoring consistency flag used embedfnc devel ppport allowing removal many redundant apidoc entry code echo macro defined used dtrace rule originally changed freebsd freebsd make apparently predefines solaris make predefine echo broke rule solaris perl bison version supported testing test added changed reflect addition change release furthermore significant change made trunswitchest longer us reuses tmpinplace directory may prevent spurious failure gh various bug posix mbtowc fixed potential race thread avoided previously returned wide character could well garbage various bug posix wctomb fixed potential race thread avoided previously would segfault string parameter shared nt preallocated string sufficient length hold result certain test output scalar containing control character unicode fixed ebcdic tcharsettoolspl avoid work ascii platform treregexpt speed many regex test ascii platform trepatt skip test nt work ebcdic platform support discontinued platform window ce support building perl window ce removed platformspecific note linux cc used populate plibpth cc clang perl netbsd fix compilation perl netbsd g gh window configuration ccflags optimize separate posix platform gh support building perl visual c removed locale test could crash due window bug separately due crt throwing exception locale name nt validly encoded current code page second decode locale name always decode perl topmagict could fail environment variable starting foo already existed mymalloc perlmalloc build fixed solaris configure find recent version oracle developer studio compiler found optdeveloperstudio configure us detected type gethostby function allowing perl compile certain configuration solaris vms release patch kit vsi provided support number previouslymissing feature system patch kit installed perl configuration process detect presence header stdinth following function fpclassify isblank isle llrint llrintl llround llroundl nearbyint round scalbn scalbnl default vms zos perl tested zos following caveat static build default build reliably using locale zos handle lcmessages category properly compiling perl add following configure option configure option accflagsdnolocalemessages zos support locale thread compiling threaded perl add following configure option configure configure option accflagsdnolocale cpan module shipped perl fail least one selftests archive tar config perl v cpan meta cpan meta yaml digest digest sha encode extutils makemaker extutils manifest http tiny io compress ipc cmd json pp libnet mime module metadata perlio viaquotedprint pod checker podlators pod simple socket test harness cause failure range selftest flawed module actually work fine module nt work ebcdic platform internal change savepvn len parameter sizet instead since handle longer string bit lexer perlyylex tokec previously single function relying heavily goto lot widelyscoped local variable work pulled apart dozen smaller static function largest remaining chunk yylwordorkeyword little line consists single switch statement whose case group independent much easier understand maintain oslevel signal handler type sighandlert used perl core declared three parameter o always told call one argument fixed declaring one parameter see merge commit full detail code handle tr extensively revised fixing various bug especially source andor replacement string contain character whose code point bug undocumented one circumstance squeezing done based source rather replacement documented bug got fixed perl new macro x writer dealing unicode string created perlapi safer face malformed input perlapi safe perlapi wo nt read past nul character backported devel ppport later added plcurstackinfo sicxsubix field record stack index recently pushed subformateval context set restored automatically cxpushsub cxpopsub etc would need manually managed unusual manipulation context stack various macro dealing character type classification changing case input encoded require extra parameter prevent potential read beyond end buffer use generated deprecation warning since perl detail x code use various macro dealing perldeprecation new parser function parsesubsignature allows keyword plugin parse subroutine signature use feature signature effect allows custom keywords implement semantics similar regular sub declaration include signature perl since platform need hold mutex temporarily switching locale new macro storelcnumericsettoneededin withlcnumericsettoneeded withlcnumericsettoneededin added make easier safely efficiently part perl memory bookkeeping overhead allocating op structure reduced byte per op system evalpv longer stringifies exception croakonerror true perl perldestructlevel environment variable formerly honoured perl binary built debugging support checked perl build normal use force perl individually free every block memory allocated exiting useful using automated leak detection tool valgrind api evalsv accepts grethrow flag flag set exception thrown compiling executing supplied code rethrown evalsv return perl part fix perl perlparse return nonzero exit called begin unitcheck check block function recursively walked op tree compilation made nonrecursive avoids segvs stack overflow op tree deeply nested n one n two especially code autogenerated particularly noticeable code compiled within separate thread thread tend small stack default selected bug fix previously require perlfunc would treat special builtin sv plsvundef value inc previous require failed treating undefined svs previous require succeeded could cause unexpected success require eg local inc inc fixed gh eval group regular expression longer unintentionally trigger eval without po change exceeded limit regex gh extended bracketed character class wrongly raise error case previouslycompiled class interpolated another heuristic previously used replaced reliable method hence diagnostics generated changed see diagnostics debug display say specifying dr use appropriate option compiled unicode property wildcard subpatterns longer extraneous output fix assertion failure regular expression engine gh fix coredump pphotc b unopaux auxlist gh loading io threadsafe gh p userdefined override official unicode gh prior patch override sometimes effect properly handle filled il regnodes multichar fold compilation error make minitest gh move implementation core read beyond buffer grokinfnan gh workaround glibc bug lcmessages gh printf sprintf n format could cause panic debugging build report incorrectly cached length value producing flagged string gh tokenizer extensively refactored gh gh use strict sub enforced bareword constant optimized multiconcat operator gh memory leak regular expression pattern fixed gh perl longer treat string starting hex binary number respectively converting string number reverts change behaviour inadvertently introduced perl intended improve precision converting string floating point number perl matching string regular expression containing unicode literal could leak sv match attempt perl overload octal binary floating point literal always passed string prefix instead appropriate prefix perl die correctly propagates exception instead ignoring perl longer asserts snoop perl exception thrown readonly could result infinite recursion perl tried update throw another exception resulting stack overflow perl replaces copy simple writable sv perl setting properly set supplementary group id necessary privilege perl close pipe preemptively clear perlio object io sv prevents second attempt close already closed perlio object signal handler call die exit close waiting child process complete perl sprintf x would cause buffer overflow due mishandling negative precision value perl scalar reference could cause erroneous assertion failure compilation perl captureall alias documented rather incorrectly alias perl capture nt work capture mentioned first similarly captureall captureall though captureall currently nt used perl extraordinarily large floating point format width could cause integer overflow underlying call snprintf resulting assertion formatted floating point width limited range int return value snprintf perl parsing following construct within subparse code code heree changed match parsed normally print fh longer produce syntax error code like time e properly produce ambiguous use time resolved time warning warning enabled x space subparse properly produce better written warning warning enabled attribute used subparse perl incomplete hex binary literal like treated x b part next token perl spurious subparse code heree code longer confuses parser previously subparse bracketed generated token spurious would close construct without normal subparse clean confusing parser possible causing assertion failure construct surrounded artificial token ca nt included source perl reference assignment sub foo bar silently nothing main package perl svgets recovers better target sv modified signal handler perl readline foo evaluates foo scalar context previously would evaluated list context since readline pop one argument stack stack could underflow left unexpected value stack perl parsing incomplete hex binary literal changed treat literal leaving following x b parsed part next token could lead silent change behaviour incomplete hex binary literal produce fatal error perl evalpv croakonerror flag throw even exception false overloaded value perl init block program longer run exit called within begin unitcheck check block perl open fh undef open temporary file append mode writes seek end file writing perl fixed segv searching source uninitialized value warning op whose subtree includes opmultideref perl obituary jeff goff jgoff drforr integral part perl raku community dear friend u passed away march drforr prominent member community attending speaking countless event contributing numerous project assisting helping way could passing leaf hole heart community sorely missed acknowledgement perl represents approximately month development since perl contains approximately line change across file author excluding autogenerated file documentation release tool approximately line change pm c h file perl continues flourish fourth decade thanks vibrant community user developer following people known contributed improvement became perl aaron crane alberto simões alexandr savca andreas könig andrew fresh andy dougherty ask bjørn hansen atsushi sugawara bernhard wiedemann brian foy bryan stenson chad granum chase whitener chris bingo williams craig berry dagfinn ilmari mannsåker dan book daniel dragan dan kogai dave cross dave rolsky david cantrell david mitchell dominic hargreaves e choroba felipe gasper florian weimer graham knop håkon hægland hauke hmerijn brand hugo van der sanden ichinose shogo james e keenan jason mcintosh jerome duval johan vromans john lightsey john paul adrian glaubitz kangmin liu karen etheridge karl williamson leon timmermans manuel mausz marc green matthew horsfall matt turner max maischein michael haardt nicholas clark nicolas r niko tyni pali paul evans paul johnson paul marquess peter eisentraut peter john acklam peter oliver petr písař renee baecker ricardo signes richard leach rus allbery samuel smith santtu ojanperä sawyer x sergey aleynikov sergiy borodych shirakata kentaro shlomi fish sisyphus slaven rezic smylers stefan seifert steve hay steve peter svyatoslav thibault duponchelle todd rinaldo tomasz konojacki tom hukins tony cook unicode consortium vanl vickenty fesunov vitali peil yves orton zefram list almost certainly incomplete automatically generated version control history particular include name much appreciated contributor reported issue perl bug tracker many change included version originated cpan module included perl core grateful entire cpan community helping perl flourish complete list perl historical contributor please see author file perl source distribution reporting bug find think bug might check perl bug database http may also information http wwwperlorg perl home page believe unreported bug please open issue http sure trim bug tiny sufficient test case bug reporting security implication make inappropriate send public issue tracker see security vulnerability contact information perlsec detail report issue give thanks wish thank perl porter work done perl running perlthanks program perlthanks send email perl porter list show thanks see also change file explanation view exhaustive detail changed install file build perl readme file general stuff artistic copying file copyright information
35,Lobsters,perl,Perl,Conference in the Cloud – A Perl & Raku Conference (June 24-26 2020),https://perlconference.us/tpc-2020-cloud/,conference cloud perl raku conference june,world clock meeting planner introduction go perl foundation register conference cost register speaker schedule session hosted youtube youtube youtube,kept u home however still great thing share perl raku join u event including interactive talk forum conference cloud expect see perl raku presentation core presentation topic past included perl perl raku organizer plan continue way moving forward like perl raku conference conference cloud organized run volunteer two presentation track minute talk variety technical topic throughout day conference date june order accommodate time zone possible decided host pm edt utc world clock meeting planner help visualize look like time zone also master class scheduled saturday june dave rolsky offer introduction go class edt cost per attendee proceeds go perl foundation purchase ticket register conference cost attendee want interact live speaker attendee bofs panel q need pay minor registration fee fee inclusive entire event fee help secure safe event help cover minor cost hosting register speaker presentation given volunteer speaker presentation conference submitted call presentation cfp selected organizer volunteered talkscommittee cfp ended check schedule session hosted conference organizer goal mind selecting online platform host conference cloud selected platform needed easytouse tool administrator well participant technical level needed offer operating support macos window also linux operating system given planning time constraint nature conference organizer decided ready box solution best choice perl raku conference cloud tprcic going online interactive event hosted zoom platform broadcast recorded streamed simultaneously youtube tprcic organizer going best set platform safely possible configured presenter ability talk present others muted need request access speak ask question make comment share video access interactive conference zoom granted people register advance agree code conduct pay minimal fee presentation streamed live youtube pay fee use zoom still access conference content bofs available youtube
36,Lobsters,perl,Perl,Find the most recent/dependent RFCs from a list,https://strayalpha.com/software/rfcwhatimean/rfc-what-i-mean.pl,find recentdependent rfcs list,,usrbinperl rfcwhatimean find recentdependent rfcs list j touch touch strayalphacom http wwwstrayalphacom copyright c revision date aug copyright c j touch right reserved permission use copy modify distribute software documentation source binary form noncommercial purpose without fee hereby granted provided copyright notice appear copy copyright notice permission notice appear supporting documentation documentation advertising material material related distribution use acknowledge software developed author name author may used endorse promote product derived software without specific prior written permission author make representation suitability software purpose software provided without express implied warranty including without limitation implied warranty merchantability fitness particular purpose usage rfcwhatimean rfcindextxt yourfiletxt outputfiletxt rfcindextxt rfc index file wwwrfceditororg yourfiletxt file rfcs check format rfcrfc output rfcs really mean two set first set one line rfc appropriate successor including update single line rfcs augment replace note indicates replace ie obsolated indicates also add ie updated second set one line sorted unique set rfcs want single line rfcs mean output may include warning error appear errorwarn version history nov initial release aug clarified updatedobsoleted support rfc number lengty global variable debug set print debugging statement rfc rfcindex entry index obsoletedby thing obsolete index updatedby thing update index numlen length rfc number debug print sub dprint name shift shift print name line sr n reset new rfc entry line whole prevents junk rfc rfc whole dprint readrfcs whole whole whole line grab last one got whole prevents junk hold rfc whole maxrfcnum hold maxrfcnum hold dprint readrfcs whole figure long largest rfc num numlen length sprintf maxrfcnum return rfc grab list rfc nums obsoletesupdates list used getstructure sub getlist shift result ienstdnicrtrrfc push result warn errorwarn getlist missed return result creates datastructure relate current rfcs right one sub getstructure populate obsoleteby updatedby k olist foreach k sort key rfc rfc k obsoletedsby olist getlist dprint getstructureobsoletedby k join olist rfc k obsoleted entry olist obsoletedby k join olist rfc k updatedsby olist getlist dprint getstructureupdatedby k join olist rfc k updated entry olist updatedby k join olist given desired rfcs find list really want sub findwhatimean shift outlist inlist finallist changed item updated dprint findwhatimean starting push inlist dprint findwhatimean repeat inlist join inlist outlist foreach item inlist dprint findwhatimean foreach changed dprint findwhatimean looking item check whether replace item defined obsoletedby item push outlist split obsoletedby item dprint findwhatimean item obsoletedby item changed else keep one dprint findwhatimean item ok item eq nt add wo nt show list yet add end citation updated else push finallist item check whether add item defined updatedby item dprint findwhatimean item updatedby item push outlist split updatedby item changed inlist outlist changed print rfcs replace finallist print replace updated join finallist n updated add current one list citation push finallist return finallist sort u sub findset inlist inset item foreach item inlist inset item return sort key inset main local infile yourfile list print rfcwhatimean die usage rfcindextxt yourfiletxtn argv open infile argv die rfcindextxt file argv could opened readrfcs infile getstructure get input file list open yourfile argv die file argv could opened dprint main reading argv line line line srfc make rfcs ndigit format per rfcindextxt sprintstring sprintf rfc dd numlen dprint main rfc list sprintf sprintstring push rfclist sprintf sprintstring print nrfcs augment updated replace obsoleted nn elt wholelist entry foreach elt sort rfclist push wholelist findwhatimean elt list findset wholelist print nnrfcs mean sorted list reference nn print join n list n
37,Lobsters,perl,Perl,Perl scripts for phylogenomic analysis,https://github.com/daisieh/phylogenomics,perl script phylogenomic analysis,join github today sign file permalink resource license reload reload,mostly perl script something related phylogenomic analysis dismiss join github today github home million developer working together host review code manage project build software together sign file permalink failed load latest commit information type name latest commit message commit time repo contains visualization analysis script written help perform phylogenomic analysis almost written perl require bioperl package script require bioperl package either call bio package directly require subfunctions file bioperlsubfuncspl might easiest include directory path various subfunction file easy interpreter find circlegraphpm objectoriented package make easier draw graph along circle make postscript object us postscript simple package subfuncspl random hodgepodge utility function write may move specific subfunction file reduce overhead bioperlsubfuncspl helper function require bioperl package circlegraphpl helper function draw specific kind circular graph subdirs contain script various task analysis script perform various analysis datasets introgression script calculate statistic introgression analysis selection script use bioperl paml hyphy analyze selection gene converting script convert file one format another combine file various way filtering script reduce complexity parsing us bioperl slice dice sequence file various way plastome script take input plastome draw circle graph represent data reporting script take vcf sequence file report statistic mostly perl script something related phylogenomic analysis resource license perform action time signed another tab window reload refresh session signed another tab window reload refresh session
38,Lobsters,perl,Perl,A Review of Perl 6 (Raku) (2017),https://www.evanmiller.org/a-review-of-perl-6.html,review perl raku,review perl raku evan miller update learning perlâ number perlâ website string regexes grammar note identifier array hash list itemization function way nativecall libxlsxwriter perl library xlsx writer perlâ library generating excel spreadsheet hack concurrency degree readstat library highlighting bug great come never heard note evanmillerorg twitter r wizard data le time communicate discovery visually back evan home page subscribe r twitter youtube,review perl raku evan miller august update feb perl called raku updated review title left review body intact amazing masterpiece said keeping eye fixed glass case artist little conrad lord jim perlâ reminds phd dissertation first five year would ask around christmas finished putting le le stock answer year wore lacking evidence dissertation form actually existed made completion date kind running joke familial version big dig new second avenue subway line enough selfimposed deadline came went stopped joking enough year stopped asking case missed think everyone perlâ released world year half ago christmas incidentally effort nominally spanning almost sixteen year think certain dissertation also completed point market new programming language write competitive impenetrable like freshly minted phd one seems sure perlâ market prospect like justturnedin dissertation one seems know whether fruit many labor actually worth damn help purveyor perlâ provide hint actually language besides facile answer whatever want perlâ multiparadigm maybe omniparadigm claim support objectoriented programming functional programming aspectoriented programming array programming good old procedural programming new language cleanedup version perl english german minus umlaut knowledge previous version ala get far token prejudice regarding preceding incarnation necessarily hold water follows attempt provide world honest incomplete assessment programming whitest elephant perlâ motivated following thought every sysadmin know least little perl know anyone know perlâ know anyone know anyone know perlâ never read anything perlâ longer punchline could equally imagine world perlâ heap rubbish one hope diamond language design one seems know one would know perlâ register written still waiting read number false start year finally managed spend enough time language say confidence familiar read cornucopia blog post devoured documentation written small perlâ library cursory test coverage still idea like use perlâ year even proper work week review le definitive testimonial like one momtrieslinux reaction video likely missing thing perlâ lack strong also kind slow therefore difficult impossible pique interest holdmybeer demonstration like one see learning perlâ instead start small example number perlâ easy enough install perlâ website unlike perl ship passable shell exit type exit interested version number perlâ people reading probably displayed shell greeting run version version rakudo version built moarvm version implementing perl perlâ really consists language specification perlâ c christmas compiler called rakudo virtual machine called moarvm reason multiplicity moniker perlâ folk believe implementation ought privileged tutorial teaser perlâ often begin first glance look like easiest math problem true language evaluate expression false tutorial go explain difference floatingpoint exact arithmetic perlâ treat number literal decimal dot rational quotient two integer rather inexact floatingpoint number perlâ objectoriented see class object method int rat num int integer rat rational exact fraction num doubleprecision float want floatingpoint behavior make num number adding num num num false scientific notation always produce floatingpoint num perlâ reason understand however sometimes seem add rational rather floatingpoint false true maybe someone explain discrepancy polite email anyway wholeheartedly endorse perlâ use rational number exact arithmetic think language could benefit similar implementation reference julia haskell builtin rational constructed respectively operator language library without support literal overall math support perlâ quite good complex number popular constant built right language identity correct decimal place rate e pi speaking frequently dealing floatingpoint number perlâ handy approximatelyequal operator measure thing within e pi true perlâ unicode everywhere wish also use place pi cutely superscript exponentiate integer however perlâ shell seem completely multibyteaware backspace unicode expression peril noninteractive compiler work fine aware choice numeric type significant impact performance example small script compute term harmonic series num total num total num num say total take second machine change num num take second first case perlâ construct rational represent num go straight floatingpoint representation num another oddity crop inspect total closely begin life int becomes rat first loop iteration converted num around iteration subtle type trickery going behind scene one sens benign presence larry wall whose skulduggery string number original version perl made hit programmer weary scanf sprintf small test version perlâ script still four time slower perl classic time slower c perl people often point speed improvement made since initial christmas release perhaps speed situation improve time overall come numerical computing guess could say perlâ perfectly capable heavy lifting lifting crew apparent hurry beginning worry way compute harmonic series perlâ compute thing hieroglyphic oneliner map trace mechanic code snippet take moment note among accomplishment larry wall creator perl designer perlâ twotime winner obfuscated c contest one final observation perlâ math although perlâ usual function mathh could certainly use string regexes perlâ string support unicode support particular best business unlike go javascript perlâ aware grapheme combining codepoints unlike python swift elixir perlâ access arbitrary grapheme position constant time rather iterating every grapheme access particular unicode identifier allowed custom unicode operator perlâ number builtin unicode operator ascii fallback thing like set operation equality test remember identity approximation test write like like e true perlâ allows form quotation construct recognized unicode standard following equivalent amazing amazing man amazing masterpiece perlâ philosophy expressed larry wall interview unicode symbol may difficult type technology improve future happy expressive unicode defining source code personally satisfied ascii variant perlâ parlance called texas symbol bigger get maybe people find unicode easier eye worth noting rumor eink keyboard upcoming apple hardware perhaps larry wall ahead particular curve back late perl introduced programming world regular expression least nonstackbased kind people might actually want use capture print stuff perlâ regexes change extending unicode support moving modifier around reassigning symbol also changing whitespace rule legible feel modern room breathe give example character class use instead range use instead z z capturing group still use parenthesis noncapturing group use plain square bracket space must made explicit malefemale catdog male female cat dog modifier caseinsenstive important one appear inside regex preceded colon example perl regex malefemale cc aa tt dd oo gg would translated perlâ male female cat dog match unicode digit balinese five thai three w match digit anything unicode considers letter including h match unicodedefined horizontal whitespace character want match space ascii typewriter choice c space x set character identified traditional perl grouping alnum xdigit using unicode general category lu uppercase letter sm math symbol alnum traditional character class name angle bracket lu unicode general category note colon additional set computed defining range set operator union intersection difference alnum alphanumerics excluding alnum sm alphanumerics plus unicodedefined math symbol alpha xdigit alphabetical hexadecimal digit f f dealt unicode text file regular basis likely feel feature grammar perlâ feature excited read fact initial reason drawn perlâ aside morbid curiosity inclusion grammar language good way ease grammar refactor regular expression example like regex sex male female regex specie cat dog male cat sex specie say sex sex say specie specie lc tilde perlâ string concatenation operator doubletilde context applies regular expression next group regexes grammar block providing special regex named top indicating parsing begin grammar animal regex sex male female regex specie cat dog regex top sex specie result animalparse male cat say sex result sex say specie result specie named regexes rule refer perlâ grammar engine used build recursivedescent parser use ragel number parsing task liked idea language something ragelish built afraid abandoning ragel anytime soon migrating perlâ least account grammar engine problem perlâ grammar engine perhaps shortcoming could addressed future version language parsing fails reason parse method simply return nil indication kind failure occurred kind nontrivial input grammar real pain debug single misplaced character kill whole parse report blank perlâ compiler written using perlâ grammar engine wondering perlâ parser produce line number error message started poking around grammar file like kid rifling bedside table regret ever idea bad enough perlâ grammar file foam party intermingled grammar code error message cherry top rule perlâ grammar file extra condition instead matching something throw exception exception handler pick apart internal state parser figure much input processed exception thrown work sort kludgy technique replicate want line number traditional parsergenerators much better job handling nonmatching input shortcoming explains part perlâ error message sometimes useless syntax error source code many perlâ error message helpful good example forget close quote perlâ tell error last line file course error likely near opening quote could anywhere file good luck finding perlâ exceptionthrowing parser provides nary clue longtime ragel addict really wanted like perlâ grammar engine lack decent failure handling mean endorse except refactorable regex machine perlâ could interesting platform prototyping new programming language example soon take look perlâ grammar file want close drawer go back innocent time note identifier get something way perlâ identifier contain dash whyhellothere hello perlâ call told good authority lisper use case convention never really meatrelated name kebab case preferred case convention perlâ standard library including function variable name eg isprime abignumber variable perlâ almost always start sigil dollar sign sign percent sign convention usually nt create ambiguity subtraction operation therefore terrible choice perlâ least consistent larry bet unicode bold vision one day able type hyphen minus sign computer separate character programmer show perlâ instantly recoil kebab case human flesh hanging personally grown like give screen full perlâ code distinct visual identity even dislike aesthetic admit easier shift finger either camelcase underscore course salutary effect health left pinky likely washed away perlâ variable sigils array hash perl array indicated indexed integer hash preceded keyed string block church perl built perlâ two data structure number modification noticeable syntactic change array written array value access use data sigil atsign percent sign rather scalar sigil dollar sign important semantic difference array hash parameterized value type example int array str hash declares array store integer hash store string hash key string default need parameterize literal array written square bracket array literal hash written different way following equivalent minute second minute second minute second minute second last form feel like hack guess preferable pineapple upsidedown ontology rail method like constructing hash brace used place unless brace contain default variable case perlâ get confused think block declared documentation discourages brace hash reason brace default representation perlâ print hash getting mixed message use tradition perl indeed one way case still looking satisfactory explanation seems perlâ endorsed one surrounding hash syntax outlawed saved countless stackoverflow question tagged newbie hash member accessed either hash key hash key cute feature hash look array key hash return value satisfied string key possible declare different type key inside brace hash int create hash keyed arbitrary object colonprefixed brace hash one hundred two hundred pi three point one four one five nine record literal syntax creating object hash weird prohibition applies note syntax necessarily preventing perlâ interpreting pi string rhetoric perlâ consistent perl sure lot little rule list technically perl third data structure list list could assigned array hash list value separated comma surrounded parenthesis immutable could explicitly bound variable list still present immutable perlâ departure predecessor language perlâ let bind list variable later reuse using bindto operator list one pi assigning item list result error list modify immutable int note error message indicates modify int modify list list contains variable modify content variable without changing actual list still contains variable value value pi â error modify immutable int pi â error modify immutable int pi work say say value weird huh sense list assumed immutable value assignment rerouted particular list member way list assignment follows somewhat naturally get excited though assignment behave expect reason clear lefthand side flattened assignment equivalent thus case get assigned get get nothing separate colon prefix destructuring assignment note bindto required usage line get becomes understand logic making syntactic distinction list assignment full destructuring assignment silently flattening lefthand list structure first case list contain list also array hash array hash contain array hash still perl also contain list last thing note list unrolled special pipe operator list say list say list come handy calling function talk talk something bothering itemization especially interested gory detail list differ array feel free skip section array list item within array hash behave differently item within list array list say arraywhat array say listwhat list say array int say list int say array varwhat scalar say list varwhat int array extra hidden layer indirection documentation call itemization unlike list array really full transparent container point actual value accessed var method assigning array member really modifies container whereas modifying list member attempt manipulate item however list also layer indirection permember basis using special dollar function still modify list itemized member protected listflattening operation itemization confusing part already complex language time method pas straight container itemized member list flattened listflat return nested list function expected aware member itemized based expect caller expect caller call listflat returned value got documentation provides five heuristic deciding item list returned function itemized dozen reading heuristic still mostly mumbojumbo think sticking simple list object array object function perlâ might favorite functiondispatching mechanism language used certainly flexible function argument named positional named argument preceded colon sub trianglearea base height return base height trianglearea height base trianglearea error many positionals passed signature destructure argument popular feature functional language sub firstitem head tail return head array firstitem array miss old perl convention putting parameter array use called slurpy sub addemup number return numberssum addemup return pipe operator mentioned previous section also used pas regular list argument list args addemup args equivalent addemup hash destructure sub volume length x width depth z return x z dimension depth length width volume dimension unrolled named parameter pipe operator sub trianglearea base height return base height dims base height trianglearea dims error many positionals passed trianglearea dims work multipledispatch occurs type like julia c also value elixir haskell often faster way compute factorial multi sub factorial return semicolon optional btw multi sub factorial int n n samewith factorial factorial type error note use samewith second clause feature pined erlang keyword perform recursion could rename function without change recursive call within welcome feature perlâ candidate clause evaluated order note might get unexpected result defining multipledispatch function inside perlâ shell clause seems aware clause preceded example switching two clause result runtime error switching order fine using regular couple place thus far used creates closure argument addtwo say addtwo pi whatever star skeleton key number strangelooking perlâ expression following incidentally strengthen case unicode operator map multiply first whatever second multiply map raise whatever power avoided whatever star addition making perlâ look like lineal descendant brainfuck governed rule subtle understanding following work thing compute square root list number map sqrt map sqrt map sqrt work map sqrt sure valid explanation discrepancy somewhere internet case like like say monad must acting move nativecall pleasant set surprise perlâ functioncalling fact pleasant surprise perlâ nearly frictionless interfacing c library get feel c interop decided use perlâ wrap one favorite c library libxlsxwriter c library ironically began life perl library later ported c ala never perlâ name implies libxlsxwriter used generate xmlbased excel document code came want follow along home xlsx writer perlâ library generating excel spreadsheet pardon seo keywords nativecall module perlâ unlocks kind dark magic calling c code declaring perlâ class opaque c pointer simple class writer workbook repr cpointer declaring c function return opaque pointer object matter sub workbooknew str encoded return writer workbook native xlsxwriter nativecall automatically convert perlâ string c string encoding choosing via encoded ellipsis brace literal ellipsis whatever star used place sure anyway workbooknew routine ready called method example make new method writer workbook class method new str path workbooknew path workbook opened script use writer workbook workbook writer workbooknew pathtoworkbookxlsx wrapping process quickly becomes kind threestep waltz declare c function subroutine make method nice oo interface add line test script onetwothree onetwothree c library requires knowledge c struct mirroring data layout fairly simple example c struct typedef struct lxwdatetime int year int month int day int hour int min double sec lxwdatetime becomes class writer cdatetime repr cstruct export year month day hour min sec alignment ok figure whether platformspecific c int type nativecall rust julia provide int bit modern computer lose sleep one particularly pleasant surprise nativecall us correct alignment rule pad data structure example sec field begin byte c perlâ structure even though byte five integer precede bullet dodged c struct initialized regular perlâ object datetimenow dt writer cdatetimenew year nowyear month nowmonth day nowday hour nowhour min nowminute sec nowsecond thing get interesting nativecall always pass pointer structs muck around pointer type perlâ code thus c function void workbooksetcreationdatetime lxwworkbook workbook lxwdatetime datetime would declared nicely neatly perlâ sub workbooksetcreationdatetime writer workbook writer cdatetime native xlsxwriter wrapped writer workbook method thus method setcreationdatetime dateish date dt writer cdatetimenew year dateyear month datemonth day dateday hour datehour min dateminute sec datesecond workbooksetcreationdatetime self dt called script wb writer workbooknew pathtoworkbookxlsx wbsetcreationdatetime datetimenow typemappings c perlâ automatic straightforward exception encountered type requires num floatingpoint type accept generic numeric num int rat num conversion method easy workaround mention one language feature make wrapping c library pleasant perlâ enum construct enum libraryerror lxwnoerror lxwerrormemorymallocfailed lxwerrorcreatingxlsxfile lxwerrorcreatingtmpfile many value enum really keyvalue pair beginning value zero nicety c function return integer perlâ side easily access symbolic representation sub somecfunction return native something int code somecfunction say libraryerror code lxwnoerror etc enums start value zero enum script superscript subscript specified value enum color black blue brown cyan hesitate suggest expanding language even tiny suggestion point may like mortal mint mr creosote meaning life one feature perlâ might borrow go incrementing enum value via bitshift ie toocleverbyhalf iota construct real qualm perlâ enum feature appears enum symbol must unique within declaring scope else get warning strange error prefer symbol exported scope access symbol via enum name libraryerror none color black etc right color libraryerror enums declared scope color none libraryerror none would create conflict either use cstyle globally unique name libraryerrornone librarycolornone feel perlish else put enum file import pretty inconvenient nonetheless wrapping c library perlâ painless experience even addictive one even pas perlâ function closure c callback using native type directly perlâ code however usefulness feature mitigated somewhat get perlâ object back void context pointer many c apis designed another limitation nativecall support passing returning c structs value course hack concurrency perlâ number abstraction dealing concurrency promise channel something called supply think helpful start picture perlâ execution model see abstraction really limitation perlâ run virtual machine moarvm thread scheduler garbage collector event loop unlike c implementation python ruby moarvm global interpreter lock perlâ code always execute concurrently inside single process writing perlâ thread map directly o thread behavior change upcoming perlâ release support degree n thread multiplexing perl thread storage able access object care must taken avoid race condition lock mechanism provided discouraged favor messagepassing abstraction fixed upper limit number o thread moarvm use number default changed environmental variable rakudomaxthreads code attempt start number background task using thread execution may deadlock garbage collector generational halt execution across thread run ie stoptheworld garbage collector multithreaded till time guarantee example garbage collector handle asynchronous io moarvm us libuv nodejs tried juggling thousand concurrent network connection singlethreaded perlâ server present insurmountable challenge way talk perlâ core concurrency abstraction promise channel supply start keyword kick code another thread assuming thread available shortcut promisestart met await task start say hello threadid say ahoy threadid await task run code see greeting initiated different thread message may appear either order note await return current thread perlâ might return different thread future version see thread pool action try starting task p map start say sleeping threadid sleep await p see resulting message two batch sixteen message immediately using every thread thread pool followed sixteen message second reusing thread imagine code might unexpectedly deadlock code waiting particular thread start available thread thread pool future version perlâ supposed alleviate threadexhaustion problem moving perlâ thread across o thread perlâ thread waiting message channel bring implementation closer concurrency model erlang go net channel since talking exist thread communication perlâ language includes reactwhenever keywords receiving message channel channel channelnew p start react whenever channel say hello threadid said message ahoy say threadid let send message buddy twice channelsend message channelsend message channelclose mandatory await p react blocking construct return every channel listening closed done explicitly called within react example failure close channel commenting line marked mandatory result start block never returning modified program hang call await channel perlâ similar channel messagepassing erlang important difference channel typed message patternmatched listener perlâ channel accept whatever sent go erlang timeout mechanism receiving end perlâ imagine perlâ community gain experience concurrent distributed system demand similar feature language final bit abstraction handling concurrency perlâ called supply supplier object emits via emit method sequence value supply object supply one listener called tap tap object rather callback function executed supplied value default tap called thread call supplieremit example supplier suppliernew supply suppliersupply supplytap say tap got threadid supplytap say tap got threadid say sending value threadid supplieremit hello run code see action happens single thread supply introduce concurrency curtain hiding example supplier emits value receives message channel say inside react block would ensure application logic occurred predictable order predictable thread one interesting application supply receiving data external program perl receiving data standard stream standard error stream headache perlâ get supply proc proc asyncnew r echo man amazing masterpiece procstdouttap say procstderrtap say err await procstart incidentally proc async class also write closestdin method facilitate twoway interaction external unix signal accessed supply signal sigint tap say perhaps artist little mad exit note example previous one emit called behind proscenium particular callback execute different thread main program concurrency easy language perlâ seems decent set abstraction writing complicated program without introducing race condition however threading model abstraction obvious first glance seems common source confusion stackoverflow also see much guidance exceptionhandling concurrent code common source bug deadlock outside sharednothing erlang diaspora finally totally sold rationale supply banner usecases signal handling stdoutstderr processing really require sequential execution different callback emit happens deep standard library callback end executing mystery thread far main application suspect supply usecases would better served channel capable broadcasting message multiple subscriber example following hypothetical api verbose would give clarity code executing thread proc proc asyncnew r echo man amazing masterpiece get channel external process output procstdoutchannel err procstderrchannel start worker thread listens channel worker start react whenever say print stdout worker whenever err say err also stderr worker run external program await procstart wait worker finish await worker right channel pick listener random deliver message even data stream delivered channel fake api able plug multiple receiver current channel design fit well workerthread design well event listener might guess perlâ mostly left object model class hierarchy arrayprogramming feature controlflow construct think covered enough territory offer general perspective language runtime put burning question bluntly perlâ good perlâ math support excellent complex rational number handled seamlessly afraid perlâ slow serious scientific numbercrunching keep jones would need either major investment native library like numpy builtin jit compiler like supposedly jit work appears work number year holding breath perlâ string handling particular unicode support unparalleled like new regex syntax however grammar engine bit disappointment despite initial enthusiasm replacing parsergenerators least toolkit compiling perlâ code processing text file disk relatively slow operation neither helped noninstantaneous vm start time perlâ likely hard time replacing perl unix pipeline least present form perlâ better concurrency ruby python highthroughput lowlatency application current release significantly behind go erlang net start catch release introduces n thread multiplexing vm still need serious battletesting battletuning claim compete platform testing easy put test script directory follow test module doc still sure preferred method writing function module documentation people seem put everything readmemd see anything extract api source code manner pydoc javadoc light foregoing hard time justifying perlâ current incarnation never thought ruby made sense server technology anything happen guess like writing perlâ program generic typechecking oo model inspire confidence little rascal clubhouse attitude perl stopping considerably short slaveryisfreedom mentality rust haskell perlâ functional feature let distill logic essential like easy write perlâ code difficult read personally prefer treated like responsible adult rather instance teenager trapped fatherknowsbest house go still language remains distressingly permissive outofbounds array access return nil two line code one two three one two three compile run fine would much comfortable compiler voiced least mild concern case since likely bug code thing perlâ wellnamed reliance sigils make many operator many many operator perlâ hard google sometimes feel like trying look swear word beetle bailey comic strip language single typed character convey world significance personally enjoy concise aesthetic also enjoy algebra problem people consider psychologically fit programmer prefer thing spelled modifier keywords might put perlâ loadbearing asterisk pipe symbol forth perlâ language large number trap door learning time feel like taking tour willy chocolate factory every room seems new treat strange effect factory floorplan viewed sufficient distance basically coherent even predictable found occasion correctly guessing syntactic construct thisorthat particularly fond perlâ function dispatching feel like erlang addition named parameter varargs builtin type checking probably start using perlâ sliceanddice system script way use ragel fleshing grammar julia exploring math problem perlâ best perhaps exciting everyone else immediate application mind gluing together c library writing commandline wrapper c library readstat library maintain happy replace hieronymous bosch hellscape bin directory nice clean nativeinterfacing perlâ script dream realized need aforementioned improvement nativecall passing structs value able convert context pointer perlâ object sound stupid fullscreen terminal program become popular perlâ concurrency strong system support would make excellent choice would port hecate hex editor hell heartbeat love see perlâ mail client text editor terminally insane programming movement sure catch fire day mention perlâ exceedingly clever come making commandline tool file sub main str inputfile int line say blah running script without argument give usage line int inputfile made smile right perlâ ruby rail commandline tool number unexpected surprise perlâ like commandline cushion tickled fancy others like rule inside hash brace anything itemization leave dumbfounded note creature comfort perlâ error message usually adequate sometimes incorrect irrelevant repl useful need better support multiline copypaste backspacing multibyte character default vim highlighter slow package annoying highlighting bug sitting open github almost year travis ci support perlâ download compile language time add several minute test run wild west exactly feel like momandpop hotel jiggle toilet handle maybe smack side tv screen picture clear great come never heard language inseparable community parting word found latenight moment bewilderment irc channel asking help finer point darker corner language response usually helpful always courteous least one cause confusion turned bug vm quickly discussion irc channel technical lurk long enough hard miss current frustration perlâ widely adopted kind righteous indignation language good dammit projecting people start taking u seriously spent long enough software business passing familiarity feeling nothing quite demoralizing spending year two something fifteen year case perlâ unable secure much five minute potential time explanation course banal geek writing correct computer code lot easier reprogramming perception feel qualified offer marketing suggestion perlâ people honor butterfly mascot winsome sprite named camelia belies sprawling netherworld complexity part way pointing great butterfly collector western literature character stein joseph lord jim stein right occasional conscience jim left film adaptation columbia picture stein story go spent youth late life adventure sailing high sea battling bandit living native east indie turning point character story set seven wouldbe assassin drop three successive shot revolver proceeds chase butterfly field finally catch help hat flop got got shook like leaf excitement opened beautiful wing made sure rare extraordinary perfect specimen head went round leg became weak emotion sit ground greatly desired posse specimen specie collecting professor took long journey underwent great privation dreamed sleep suddenly lord jim ch reread passage help think larry wall man certainly long journey underwent great pursuit dream redesigned think dissertationwriting uncle though afraid ask ever finished thing part certain age stein stopped pursuing wealth fame adventure order cultivate cherish iridescent beauty butterfly wonder sometimes software profession could use butterfly input commercial empire specimen study appreciate admire lamplit silence woodshelved room perlâ masterpiece sure instruction give foreman particular jury perlâ certainly alone audacity ambition sheer complexity language might sort thing impossible judge without using least year halfdecade afraid save final judgment future article meantime enough reason keep stable version perlâ rattling around usrlocal curio cabinet perlâ conquer world thing hard predict certain sense speaking frustrated member irc channel matter perlâ oneofakind one argue maybe enough captured something rare beautiful uncertain world sit ground hold finger little one specimen like london said bavarianborn stein lord narrator hand hovering glassencased butterfly bronze white yellow small native town collection shall bequeath something note reading evanmillerorg random collection math tech musing liked might also enjoy get new article published via twitter r want look statistical pattern mysql postgresql sqlite database desktop statistic software wizard help analyze data le time communicate discovery visually without spending day struggling pointless command syntax check back evan home page subscribe r twitter youtube
39,Lobsters,perl,Perl,Why does OpenBSD still include Perl in its base installation?,https://marc.info/?l=openbsd-misc&m=159041121804486&w=2,openbsd still include perl base installation,prev list next list prev thread openbsdmisc openbsd still include perl base installation marc espie espie nerim net nausicaa home message body prev list next list prev thread configure news add list korelogic,prev list next list prev thread next thread list openbsdmisc subject openbsd still include perl base installation marc espie espie nerim net date messageid nausicaa home download raw message body another thing consider perl base system assume need script language writing everything c cumbersome choice need something acceptable licence python artistic licence close enough need something build everywhere python hard build without dynamic library vax want modicum security shell tcl php awk would kind work except readable would nt scale thing use perl perl constituted great compromise back day chose replace pkgadd still great compromise large compared piece year thing moved back forth language language makewhatis used cshell became perl pure c integrated mandoc shudder think much time spent note ingo also moved etcsecurity shell perl adverse perl far concerned perl base system strength openbsd minimize number script language used port infrastructure compared language perl also impressive support tool base system port nytprof still best profiler ever seen language prev list next list prev thread next thread configure news add list sponsored korelogic
40,Lobsters,perl,Perl,WebPerl,https://webperl.zero-g.net/,webperl,using building note legal wiki welcome webperl webassembly emscripten notice webperl much beta new experimental perl support quick start http http serving webperl http wwwigbberlinde legal page http githubcomhaukexwebperlblobghpagesindexmd,using building note legal wiki welcome webperl webperl us power webassembly emscripten let run perl browser webperl translate perl code javascript instead port perl binary webassembly full power perl disposal notice webperl much beta thing may work yet part api may still change feedback always appreciated new experimental perl support script src webperljs script script type textperl print hello perl world n go javascript console default j document getelementbyid mybutton addeventlistener click sub j window alert clicked button script web application written webperl see quick start prerequisite perl recent version recommended eg cpanm easily install dependency otherwise see file cpanfile dependency use module installer choce shell wget http unzip cd cpanm installdeps plackup webperlpsgi http server psgi accepting connection http point browser http look source zip archive also contains several example access http may also host content zip archive webserver choice browser support opening file locally described serving webperl note webperldemohtml likely see ajax failed expected since webserver know handle example ajax request fun copyright c hauke daempfling haukex zerognet leibniz institute freshwater ecology inland fishery igb berlin germany http wwwigbberlinde please see legal page detail find source page http githubcomhaukexwebperlblobghpagesindexmd
41,Lobsters,perl,Perl,Should x < $foo < y read from $foo once or twice? Perl debates,https://github.com/Perl/perl5/issues/17692,x foo read foo twice perl debate,join github today sign reload reload,dismiss join github today github home million developer working together host review code manage project build software together sign perform action time signed another tab window reload refresh session signed another tab window reload refresh session
42,Lobsters,perl,Perl,You have to kill your perlings,http://nibblestew.blogspot.com/2020/05/you-have-to-kill-your-perlings.html,kill perlings,preface issue hand nt risky lot work,preface blog post deal social human aspect various technology technical merit programming language tech intend write scathing reddit comment along line guy idiot perl great language x z w please nt point post perl chosen canonical example mostly due prevalence point apply thing like corba tcl needing write xml file hand ridiculously long compilation time issue hand early lot code written fashionable time lot done using perl open source project chronically underfunded lot code still running fact lot core infrastructure debian bsds foundational project written perl told many people give project manager reply say since code exists work everything fine really find let look following graph see pool people willing work perl project shrinking fast major problem open source since healthy project requires steady influx new contributor developer volunteer first order approximation nobody age know code perl let alone would willing sacrifice free time one could go long debate discussion millennials killing open source everyone man start writing sigils variable name would pointless though reason people nt want perl irrelevant thing matter use perl actively driving away potential project contributor zeitgeist thing adapt mean migrating project perl something else nt risky lot work yes lot perl code foundational many case people wrote left noone touched year changing risky matter careful bug nasty bug hard trace bug bug work together bug cancel lot hard work price pay keep project vibrant alternative nothing project never need change might reasonable course action however something happens major change needed one thing learned year unexpected thing actually happen might end fo equivalent new jersey mayor trying find people code cobol free
43,Lobsters,perl,Perl,"Apocalypse 1: The Ugly, the Bad, and the Good (2001)",https://www.perl.com/pub/2001/04/02/wall.html/,apocalypse ugly bad good,apocalypse ugly bad good larry wall synopsis larry wall give annual entertaining talk state perl world covering perl perl year open source convention miss rare opportunity hear creator perl patch run share insight programming perl edition,apocalypse ugly bad good apr larry wall editor note apocalypse date remains historic reason see synopsis latest information people get scared hear word apocalypse mean good sense revealing apocalypse supposed reveal good news good people also happens reveal bad news bad people bad revealing column design perl accurately beginning design since design process certainly continue initial say matter omniscient rumor contrary notwithstanding job playing god little big nevertheless someone try best fake expect help process creating history bit free look history perl point see column subtitled ugly bad good rfc process last year ugly good sense brainstorming process mean deliberately sense incivility since rfc process fact surprisingly civil sense little coherent design suggestion rfcs frankly rfcs map without actually covering map contradictory rfcs missing rfcs many rfcs propose real problem go funny angle trying propose solution many patch symptom without curing underlying ailment larry wall give annual entertaining talk state perl world covering perl perl year open source convention miss rare opportunity hear creator perl patch run share insight also discovered larry first law language redesign everyone want colon ugly part bad part supposed take rfcs produce coherent design two week starting thinking could classify rfcs good bad ugly category somehow ended ugly category good one typically something wrong even bad one typically indicated problem could use thought even solution totally bogus five month later mulling coherence whole time definition mulling many know happens size perl process exceeds size physical start thrashing well basically happened get enough problem head make good progress actually good subdividing problem forte synthesis analysis help number distraction life selfinflicted go save unauthorized autobiography programming perl edition larry wall tom christiansen jon orwant edition july order number page come good part hope thinking lot lot many individual rfcs knowing start thinking whole occurred finally proper order think thing le order chapter camel book camel book order designed minimize forward reference explanation perl considering perl roughly order tend reduce number thing decide decided merrily classified rfcs chapter number look much manageable also restructured email look slice message ever talked particular rfc regardless mailing list message also big help intend produce one apocalypse chapter apocalypse corresponds chapter overview perl course book overview like small tutorial really complete analysis philosophical underpinnings perl nevertheless convenient place classify rfcs talk perl level today talking following rfcs rfc psa title bdb keep default perl free constraint warning strict ccb named operator versus function acc perl stay perl adb perl core function return object abr last major revision psa rating stand problem solution acceptance problem solution graded af scale often find grade problem higher solution acceptance rating one accepted wholeheartedly b accepted buts c accepted major caveat r rejected might point add deferred really think soon decide something initially inclined accept rfc decided reject theological ground apocalyptic literature number representing perfection number representing imperfection fact probably end converging version number pi rfc suggests rather would rather unfortunate perl last major revision fact perl perfect need revision perl merely prototype perl actually agree underlying sentiment rejected entertainment value want perl language continue evolve better fit problem people want solve end several design goal tend obscured peruse rfcs first perl support multiple syntax map onto single semantic model second single semantic model turn map multiple platform multiple syntax sound like evil thing really necessary evolution language extent already multisyntax model perl every time use pragma module warping language using long clear declaration top module version language using cause little problem particularly strong example support multiple syntax allow continued evolution migration perl perl see discussion rfc multiple backends necessity world live today perl must limited running platform programmed c must able run kind virtual machine supported java c fond hope fond perl fonder still perl said also hope perl continue trying thing people part perl accept rfc principle intend go raving mad major caveat think needlessly fearful several programming paradigm take design going happen part make perl perl intentionally multiparadigmatic might say perl allows paradigmatic without paradogmatic essence perl really context sensitivity syntactic context also semantic pragmatic cultural context overall philosophy going change perl although specific context sensitivity may come go current context sensitivity actually prevent u better job area intentionally breaking thing make perl understand mean even better specific example various way thing could improve muster courage break weird relationship foo foo true lose current slice notation replaced something better expect consistently treating foo utterance scalar context return array reference make subscript always take array reference among thing fix botch perl requires u distinguish foo foo discussion apocalypse dissect idea like rfc highlander variable type two mind good argument side read discussion argument forcefully made repeatedly specific discussion centered around issue strictness course title rfc claim general philosophical position ended apocalypse talk strictness warning moment also talk constraint general like take detour esoteric design issue first mind rfc one reacting example language designer like one judge right wrong simultaneously many rfcs stake polar position defend ably fail point possible area compromise sure right rfc focus particular area try everything rfcs written mostly design perl mind synthesize compromise even design perl make mandatory one overriding issue whether possible translate perl code perl code one particular place concern many oneliners embedded shell script really good way translate invocation requiring new command line switch set strict going fly closely related question perl going recognize accidentally fed perl code rather perl code would rather bad suddenly give working code brand new set semantics answer believe impossible definition accidentally feed perl code perl perl must assume fed perl code know otherwise implies must declaration unambiguously declares code perl right way wrong way peeved approach taken dec upgraded basicplus handle long variable name solution require every program using long variable name use command extend top henceforth forevermore every basicplus program extend top know whether call bad ugly certainly good better approach modify something would anyway go cpan look every single module see top answer package declaration break hereby declare package declaration front file unambiguously indicates parsing perl code want write perl module class start keyword module class know yet exact syntax module class declaration one thing know set current global namespace much like package declaration one fell swoop much problem programming large dealt simply making module class default strict warning note default main program one liner perl nonstrict definition still figure perl main program distinguish perl use maybe whether perl main program default strict think already see course instructor could threaten flunk anyone put module main front program never actually tell pupil want turn stricture warning approach possible lead u deeper issue issue project policy site policy people always hankering various file automatically read various location always steadfastly resisted make script implicitly nonportable however explicit nonportability okay reason hypothetical class instructor could insist program start use policy see lead even deeper language design issue real problem difficult write policy module perl really module metamodule want use strict use warning behalf student therefore one thing must implement perl ability write metause statement look like ordinary use statement turn around declare thing behalf user good user project site whatever policy wonk whether agree rfc really depends mean default like humpty dumpty make mean whatever think convenient context sensitivity work also happen agree rfc philosophical position morality work best chosen mandated nevertheless time morality strongly suggested think module class good place sure belongs overview nonetheless principle agree rfc course perl variable really object underneath rfc trivially true real question interesting object return given level performance perl object relatively heavyweight perl object heavy thing might bog thinking solution better abstract type support data value happen represented internally c structs get bogged try translate c struct struct tm actual hash value hand rather efficient translate struct tm struct tm since noop make struct look like perl object access efficiently attribute method real object typology hopefully mostly impose abstract overhead biggest overhead likely memory management struct int say overhead could go away much time amount contextually aware optimization event want point nobody panic talk making thing return object used return remember object define stringify numify overloadings whatever class like old code look like print scalar localtime continue run unchanged even though localtime might returning object scalar context another rfc think better place find rfc somewhat confusing abstract seems suggest something radical description describes ignore abstract pretty much agree already case perl distinguish operator function primarily called defined one place rfc could clarified perl distinguishes two class named operator named unary operator v list operator distinguished different precedence discus precedence reform apocalypse doubt combine two kind named operator teaser see way simplifying perl precedence table level level albeit damage c compatibility le frequently used ops later perl apocalypse rest apocalypse series found well article larry wall begin see selfappointed job much larger voting rfcs many big issue face simply covered rfcs decide much culture baggage thrown overboard much smooth migration perl perl prevent people using excuse adopt perl stare deep issue see underlying deeper issue issue depth understanding keep perl simple enough anyone pick start using get job done right stay tuned apocalypse wherein attempt vary variable question quote recontextualize context general set lexical stage everything follows
44,Lobsters,perl,Perl,"Larry Wall makes fun of Python, PostScript etc (2010)",https://www.youtube.com/watch?v=uzUTIffsc-M,larry wall make fun python postscript etc,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature larry wall go without saying youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature larry wall go without saying youtube
45,Lobsters,perl,Perl,preconfigured opinionated IkiWiki in a container,https://jmtd.net/log/opinionated_ikiwiki/,preconfigured opinionated ikiwiki container,ikiwiki debian ikiwiki old experiment mine opinionated ikiwiki check source github grab container image quayio http,various personal project thing past present including personal site use ikiwiki modern standard bit pain set maintain reason find hard recommend people would nice fire snapshot existing ikiwiki instance test outcome change might cumbersome enough moment nt bothered separately month ago routine upgrade debian web server running site ikiwiki installation broke first time ten year never issue like reason dusted old experiment mine renamed opinionated ikiwiki ikiwiki container configured usable outofthebox opinionated configuration decision made intention able fire container immediately useful ikiwiki instance work hopefully easier clone existing content configuration experimentation check source github grab container image quayio fire one immediately http something like podman run rm ti p quayiojdowlandopinionatedikiwiki latest good excuse learn multistage container build explore quayio feedback gratefully received github issue comment mail
46,Lobsters,perl,Perl,Simulated Losses to a Covid-19 Outbreak in the US Congress,https://www.dolthub.com/blog/2020-03-27-whos-at-risk-of-covid19-in-congress/,simulated loss outbreak u congress,overview result simulation introduction coronavirus dataset individual case detail available le reliable crowdsourced report kind elderly appears deadlier men well raw number almost twice deadly men woman simulating outbreak u congress poor taste u senator two member house simulation parameter age sex legislative representative percentage population get infected imperial college london mortality disease age bracket sex congressional demographic senate house representative dolt uscongress dataset propublica congress dataset one oldest male modeling percentage population infected infection rate nearly iran parliament reportedly infected modeling fatality rate age sex widelycirculated medium article dolt italian patient march simulation run getting input simulation simulation script simulation result discussion health care system completely overwhelmed doctor decide get ventilated without conclusion dolthub data set let u know dolt dolt dolt dolt,overview blog post discus approach simulating outbreak u congress long technical article data set epidemiology simulation feel free jump straight result simulation introduction dolthub tracking case several month coronavirus dataset addition pulling countrylevel aggregate source like john hopkins also aggregating individual case detail available several different source case detail government publication also put le reliable crowdsourced report nonmaster branch repository case detail interesting allow u break fatality rate virus age sex aware kind elderly le well known fact appears deadlier men well much deadly raw number case detail able collect doltsql select mortalityratebyagesex agerange null agerange agerange sex case death mortalityrate f f f f f f f f agerange decade corresponding patient age example corresponds patient year old see disease much deadlier older people especially older men italy far almost twice deadly men woman also worth pointing much worse disease seems men death italy time bulletin men diagnosed case male italian boy illness none died time bulletin male fatality aged female age also worth pointing definitely worse older people fatality rate pretty bad middleaged people simulating outbreak u congress knowing disease especially unkind older men obvious question ask would happen outbreak occurred place dominated older men example u congress poor taste tricky subject discus one hand speculating might die pandemic ghoulish morbid matter approach nt game poor taste discus like hand exercise nt idle thought experiment one u senator two member house already diagnosed likely others follow coming day week importantly legislative representative currently drafting debating legislation national response pandemic affect life hundred million american many thousand american decision literally matter life death important understand exactly risk disease pose american especially older american even talking make u uncomfortable even best medical care available outlook older people grim important legislator understand personally great risk counting make sensible policy choice crucial time skin game quantify much simulation parameter simulation run depends three input age sex legislative representative factor important predictor mortality percentage population get infected estimate many people immunologically naive population infected new disease range around imperial college london population reacts matter different behavior social distancing reduce number dramatically mortality disease age bracket sex see multiple competing estimate information first input independent variable simulation vary second two input give u idea outbreak might play different circumstance congressional demographic obtained wikipedia page senate house representative wrote quick dirty perl script parse text imported result dolt browse uscongress dataset online wikipedia nt include entry sex member congress keyed hand work discovered propublica congress dataset would much easier use live learn update u congress dataset come propublica current congress old congress tend relatively old compared general population one oldest oldest member senate congress old also male male doltsql select sex count senate group sex count f doltsql select sex count house group sex count f two factor put congress much greater risk general population represent modeling percentage population infected pure mathematical model estimate virus spread majority population running new host imperial college london predicts infection rate course epidemic public response including social distancing health care response hygiene practice could change number dramatically hand politician might among atrisk people planet owing nature job frequent facetoface interaction many different people well frequent air travel nearly iran parliament reportedly infected three week ago truth one know percentage people expect become infected point simply many variable account uncertainty run simulation three time three different estimate spread modeling fatality rate age sex fatality difficult estimate epidemic progress take week kill new case growing exponentially mean early estimate fatality might low case new patient eventually die nt yet succumbed disease might mean estimate high serious case diagnosed many milder case nt book tomas pueyo explored difficulty getting good estimate fatality widelycirculated medium article earlier month illustration estimated fatality rate changed time several country observed thing coronavirus data additional case reported observed fatality rate change dolt versioned query capability make easy see two query observed fatality rate day apart doltsql select mortalityratebyagesex agerange agerange sex case death mortalityrate f f f f f f f f doltsql select mortalityratebyagesex datesub interval day agerange agerange sex case death mortalityrate f f f f f f f f depending reading mortality estimate probably changed yet wo nt fully stabilize new case stop coming difficult find mortality estimate accurately broken age sex essential part analysis much uncertainty figure also run simulation three time mortality dimension twice using two mortality snapshot observed case detail published world government different point pandemic using information published aggregate form italy based italian patient march italy number similar one computed based individual case detail agerange sex case death mortalityrate f f f f f f f simulation run three different experimental value two independent input total nine simulated scenario one estimate many member major party house congress expect lose condition simulated getting input simulation get input simulation need generate datasets operate join across repository still work progress exported data coronavirus dataset import uscongress dataset easiest way exporting result csv file using r csv option dolt sql dolt sql r csv q select mortalityratebyagesex datesub interval day dolt sql r csv q select mortalityratebyagesex mortalityratesbyagesexcsv next created new branch uscongress dataset one different mortality rate estimate use simulation different branch different content mortalityratebyagesex table corresponding three different mortality rate estimate table cd uscongress dolt checkout b mortalitycasedetails dolt table import u mortalityratebyagesex mortalityratesbyagesexcsv dolt add dolt commit mortality rate dolt checkout master dolt checkout b dolt table import u mortalityratebyagesex dolt add dolt commit mortality rate one week ago dolt checkout master dolt checkout b mortalityitaly dolt table import u mortalityratebyagesex mortalityitalycsv dolt add dolt commit mortality rate italy dolt checkout master dolt branch master mortalitycasedetails mortalityitaly next need run couple query branch data set joining mortality rate estimate representative age sex note use select appropriate branch table join let keep master branch checked query table branch created doltsql select lastname state party ssex birthdate age mmortalityrate senate join mortalityratebyagesex mortalitycasedetails sbirthdate magerange ssex msex order mortalityrate desc age desc limit lastname state party sex age mortalityrate grassley iowa republican inhofe oklahoma republican shelby alabama republican robert kansa republican alexander tennessee republican leahy vermont democratic sander vermont independent mcconnell kentucky republican cardin maryland democratic risch idaho republican doltsql select firstname lastname state district hsex age party mortalityrate house h join mortalityratebyagesex mortalitycasedetails hsex msex floor magerange order mortalityrate desc limit firstname lastname state district sex age party mortalityrate young ak al republican alcee hastings fl democratic john lewis ga democratic hal rogers ky republican steny hoyer md democratic david price nc democratic bill pascrell nj democratic jim clyburn sc democratic tom ohalleran az democratic raul grijalva az democratic get final input simulation need full join representative mortality rate two chamber congress three mortality estimate total six input file simulation script want data csv form use r csv option dolt sql dolt sql r csv q select firstname lastname state district hsex age party mortalityrate house h join mortalityratebyagesex mortalitycasedetails hsex msex floor magerange order mortalityrate desc housecasedetailscsv dolt sql r csv q select lastname state party ssex birthdate age mmortalityrate senate join mortalityratebyagesex mortalitycasedetails sbirthdate magerange ssex msex order mortalityrate desc age desc senatecasedetailscsv dolt sql r csv q select firstname lastname state district hsex age party mortalityrate house h join mortalityratebyagesex hsex msex floor magerange order mortalityrate desc dolt sql r csv q select lastname state party ssex birthdate age mmortalityrate senate join mortality ratebyagesex sbirthdate magerange ssex msex order mortalityrate desc age desc dolt sql r csv q select firstname lastname state district hsex age party mortalityrate house h join mortalityratebyagesex mortalityitaly hsex msex floor magerange order mortalityrate desc houseitalycsv dolt sql r csv q select lastname state party ssex birthdate age mmortalityrate senate join mortalityratebyagesex mortalityitaly sbirthdate magerange ssex msex order mortalityrate desc age desc senateitalycsv produced input simulation script need run file three simulated spread f l csv simulationpl f f sout done done simulation script simulation iterates congressional representative expected mortality rate based age sex run decides whether particular representative lost u based spread disease expected chance recovery take median outcome simulated run two major party produce output relatively short perl script use warning use strict use parse csv use getopt long spread getoptions spreadsf spread die error command line args open fh encoding die numsims csv parse csv new handle fh name rep line csv fetch line loss push rep line loss republican democratic independent foreach numsims loss foreach rep rep rand spread rand rep mortalityrate rep loss push loss rep party losscount loss partylosses grep party eq party loss push losscount scalar partylosses party losscount loss sortedlosses sort losscount medianlosses sortedlosses numsims print party party lost median medianlosses representativesn finally used output produce diagram placing x appropriate side aisle simulation scenario simulation result discussion simulation demonstrate even conservative estimate spread fatality expect lose member congress worst case expect lose tragic number scenario number representative seriously ill therefore unable perform duty always higher number lose altogether nt nodebased simulation nt account representative spending time close contact one another account known diagnosis among legislator three date straightforward application stastical mortality rate applied evenly entire congress based age sex age sex distribution two party mean average republican risk senate democrat risk house virus nt care political ideology government response must rise division successfully fight important note reason believe thing wo nt bad even mildest simulation result italy mortality number bad least part health care system completely overwhelmed doctor decide get ventilated without report ground doctor often choosing ventilate patient better chance survival inflating already terrible fatality number elderly whatever happens pandemic tend believe every member congress highranking government official receive highest standard care substantially improve outcome relative general population still even caveat result chilling conclusion hope result demonstrate concisely seriously elected official taking threat pandemic endangering life countless ordinary american demographic characteristic legislative representative put disproportionate risk relative general population dolthub aggregating data set hope someone make use assist effort control ultimately end pandemic know data set please let u know better yet download dolt today clone data improve send update u pull request built dolt make easy collaborate data collaborate source code launched first beta year ago never imagined would spending much time compiling data global pandemic believe dolt best way produce distribute data set biggest hope effort contribute small way mitigating terrible effect pandemic would like help please download dolt join u building comprehensively useful dataset internet
47,Lobsters,perl,Perl,Natural Language Principles in Perl,http://www.wall.org/~larry/natural.html,natural language principle perl,natural language principle perl learn use many time learn go many acceptable level competence multiple way say thing shame borrowing indeterminate dimensionality local ambiguity okay punctuation prosody inflection disambiguation number case word order topicalization discourse structure pronominalization theoretical ax grind style enforced except peer pressure cooperative design inevitable divergence,natural language principle perl learn use many time learn natural language use many time lesson language designer language optimized expressive power rather ease learning easy learn drive golf cart hard express one learn go nt learn natural language even sense never stop learning nobody ever learned natural language completely unfortunately interest orthogonality many computer language designed every degree freedom dimension available everywhere good point understand whole language lead confusion nt like ignore dimension begin like able talk baby talk understood okay language difficult learn long nt learn many acceptable level competence sociological feature compared learn go psychological feature people nt mind speak subset natural language especially child foreigner except paris course language designed learn go expectation everyone learning okay multiple way say thing one anthropological feature people learn go come different background learn different subset language first officially okay perl realm program subset perl corresponding sed awk c shell basic lisp python fortran even perl melting pot computer language nt mean stir shame borrowing english language suffering identity crisis people nt mind swiping idea language making part language effort maintain purity language whether natural artificial succeed establishing elite class people know shibboleth ordinary folk know better even nt know shibboleth mean indeterminate dimensionality scientist like able locate thing giving vector list coordinate space known dimensionality one reason like orthogonality mean various component vector independent unfortunately real world usually set work way problem including linguistics problem matter getting geography inbetween heavy influence solution practical problem tend solved several level typical journey might involve leg car escalator moving sidewalk jet maybe moving sidewalk tram another jet taxi elevator level nt many right angle whole thing bit fractal nature term language say something get close want say start refining around edge would first plan itinerary major airport later worry get airport local ambiguity okay people thrive ambiguity long quickly resolved generally within natural language ambiguity resolved rapidly using recently spoken word topic pronoun like refer thing close syntactically speaking perl full little ambiguity people never even notice resolved rapidly instance many term operator perl begin identical character perl resolve based whether expecting see term operator person would say know bitwise say foo know calling subroutine foo contrast many strongly typed language distant ambiguity c one worst respect look b idea let alone defined send people graduate school learn resolve distant ambiguity punctuation prosody inflection natural language naturally punctuated pitch stress pause use indicate word related socalled body language also come play punctuation written english much approximated trend recent electronic communication invent various form punctuation computer language designer seem think punctuation evil doubt english teacher would agree disambiguation number case word order part reason language get away certain local ambiguity ambiguity suppressed various mechanism english us number word order vestige case system pronoun man looked men looked back perfectly clear sentence similarly perl number marker noun dog one pooch dog potentially many little like english perl also us word order sub use mean something quite different use sub perl nt much case distinction unlike shell make usevsmention distinction using prefix though guess allow could count perl quote form case marker slightly abstruse level perl operator sort case marker preposition indicating mention rather use computer language prepositional notion usually expressed position within argument list though certainly possible write call using named parameter perl key hash sometimes function preposition move rook qrpos topicalization regard topicalization point sentence start one topicalizer simply introduces subject intending talk several syntactic form english simplest one simply noun carrot hate em pascal clause function topicalizer topicalizers sometimes give list topic point see word like blah blah blah perl various thing work topicalizers say foreach dog print even used singularly somelongname sfoobarg trazaz print pattern match indeed conditionals tend function topicalizers perl subject print discourse structure discourse structure utterance longer sentence put together different language culture different rule tell joke story instance write book perl computer language rather fixed rule larger structure cobol pascal come mind perl tends pretty free order put statement except rather aristotelian requiring provide explicit beginning end larger structure using curlies could almost claim usrbinperl corresponds upon time end mean lived happily ever pronominalization know pronoun us number pronoun perl mean tends mean etc also pronominal reference back antecedent substring last pattern match mentioned function topicalizers within foreach loop grep copy item question alias similarly list reference function argument argument modified changing element theoretical ax grind natural language used people part nt give rip elegant design language except writer striving make point efficient way possible ordinary folk scatter sort redundancy throughout communication make sure understood use whatever word come hand get point across work till beat thing death normally ai nt problem quite willing learn new word occasionally see useful unlike lawyer computer scientist feel little need define lot new word say want say term computer language argues predefining commonly used concept people nt feel need make many definition quite perl script contain definition dare find c program without definition style enforced except peer pressure write like faulkner program like dijkstra gladly tell people programming style even tell think style unclear make jump mental hoop fellow programmer perl god language designer hope enforce style various typographical mean forcing le one statement per line well poetry nt think want force everyone write poetry perl stylistic limit selfimposed policed consensus among buddy cooperative design nobody design natural language unless name happens tolkien contribute design language borrowing coinage copying think cool eschewing think obfuscational best artificial language collaboration even language like perl one person seems charge perl good idea original came language suggestion made various folk went along consider language include various cultural trapping library bin directory go along language even language like c ada c even unix shell collaboration many many people perl exception inevitable divergence language designed many people language inevitably diverges dialect may possible delay living language force divergence nearly always stronger force convergence posix tried unify system v bsd soon squeezed thing together dimension number unix variant exploded several dimension lesson language designer build explicit mechanism easy identify variant language dealt perl explicit extension mechanism specify using use clause kind special semantics dialect going relying perl nt considerably pressure put various thing language nt belong core language hopefully stabilize basic perl le need invent oraperl sybperl isqlperl etc
48,Lobsters,perl,Perl,Testing Perl Clients and Go Servers,https://blog.afoolishmanifesto.com/posts/testing-perl-clients-golang-servers/,testing perl client go server,testing perl client go server work kind test githubcomsrcdgomysqlserver go programming language philosophy software design subscribe,testing perl client go serversat work recently built would normally forced integration test unit test awesome project working lower tolerance mistake leaning hard automated testing part testing go straightforward easy exists lot good builtin tooling run test get coverage etc first nongo code wrote project perl client access server writing perl web client cake wanted least exercise basic bit code since already infrastructure go test though perl client access go server test code go test extra comment clarity testperlclient run perl test child process run since caching need disabled func testperlclient testingt setup return special struct test starting actual server test port env setup nongo programmer defer used run code current function completes would destructor language reference counting defer envteardown ossetenv testmixer envhostname run actual perl test cmd execcommand perl test run current package dir hence slightly odd path applib mzr lib fooclientlib fooclienttclientt capture relay output emitting failure error err cmdcombinedoutput bufionewscanner bytesnewreader sscan tlogf perl stext serr nil terrorf got error scanner err err nil terrorf perl test failed err parse server memory log error page never got hit protect u something making perl test exit early var ran bool bufionewscanner envtestlogbuf sscan type access struct tag string json tag path string json uripath var v access err jsonunmarshal sbytes v err nil panic err vtag appfoo vpath mixjswebserp ran true break ran terror perl test never actually hit foo cool run given want run early build pipeline prevent larger error percolating mind built test binary ran perl image within docker build perl image go installed go image perl single binary make easy thread arg repo repogo latest builder copy gosrcgozrorg workdir gosrcgozrorg build test binary emitting mixertest run xyzzy say run test contain xyzzy string none run go test mixertest run xyzzy gozrorgjobservicesmixerpublicmixer start new perl image repoperl latest perltest copy varstarterview workdir varstarterviewjobservicesmixerpublicmixer copy binary image copy frombuilder mixertest run test binary disables caching testv run test verbose testrun perl run perl test run mixertest testv testrun perl kind test typically software industry group automated testing unit test integration test unit test fast stable since avoid network resource uncover regression caused change code dependency external service integration test tend flaky since fail due timeouts temporary failure may mean anything broke hand part integrating third party service want fail change way encode data authenticate many people balk testing strategy show since cross clearly delineated boundary would suggest fact unit test control side code fast flaky actually go step point expect code need talk mysql intend set githubcomsrcdgomysqlserver allows run process mysqlcompatible server allow skip database client mocking mean code stay simple mock hook test exercise code real client real query used usual code quickly validated become bit best practice go implement server protocol rather mocking client free improvement testing since end mocking away huge pile functionality thought crazy first learned really appreciate technique thanks john sj anderson reviewing post following contains affiliate link already know go definitely check go programming language great go book great programming book general generous dollop concurrency recently read philosophy software design really enjoyed likely whole blog post suggest reading itposted fri feb interested notified new post published subscribe get email week
49,Lobsters,perl,Perl,Lingua::Romana::Perligata -- Perl for the XXIimum Century,http://users.monash.edu/~damian/papers/HTML/Perligata.html,lingua romana perligata perl xxiimum century,lingua romana perligata perl xxiimum century damian conway school computer science software engineering monash university clayton australia abstract introduction le positional programming language semantic role mapping model latin lingua romana perligata variable subroutine builtin function operator block control structure miscellaneous feature number string reference boolean logic package class putting together greek algorithm latin implementation lingua romana perligata module filtering tokenization parsing translation execution conclusion acknowledgement appendix perligata dictionary appendix b perligata grammar,lingua romana perligata perl xxiimum century damian conway school computer science software engineering monash university clayton australia abstract paper describes perl module lingua romana perligata make possible write perl program latin plausible rationale wanting thing provided along comprehensive overview syntax semantics latinized perl paper also explains special source filtering parsing technique required efficiently interpret programming language syntax largely nonpositional introduction compared language modern ancient english comparatively weak lexical structure much grammatical load english sentence carried positional cue statement boy gave dog food make sense convention subject precedes verb precedes indirect object precedes direct object changing order food gave boy dog change meaning programming language use similar positional grammatical cue operation maximum next different meaning next maximum likewise function call push myassets yourmoney push yourmoney myassets generally speaking older natural language richer lexical structure inflexion noun number case therefore rely le word order example latin statement puer dedit cani escam escam dedit puer cani mean boy gave dog food indeed usual word order would reverse polish verb coming last puer cani escam dedit flexibility possible latin us inflexion position denote lexical role lack suffix denotes boy puer subject ending indicates dog cani indirect object whilst ending indicates food escam direct object say food gave boy dog one might write puero canem esca dedit ending denotes boy indirect object em ending indicates dog become direct object whilst ending indicates food subject le positional programming language reason programming language could also use inflexion rather position denote lexical role perl already make use idea requiring different prefix denote differing type symbol denote scalar denote array denote subroutine etc indeed reason certain builtin function bless block form map even push could allow argument specified order least case prefix lack thereof make role argument unambiguous obj bless classname obj square map number push moe larry curly stooge moreover since function name unambiguous role reason position need fixed either square number map moe larry curly stooge push perl already allows modicum flexibility form statement modifier next max max next max next next max paper describes new module lingua romana perligata explores alternative syntactic binding perl using inflexion based classical latin grammar inflexion subsume function standard perl prefix support new concept semantic role allows far greater freedom specification function operation respective argument semantic role perl rich variety operator provide assignment variant etc thus nearly half perl operator produce change one argument likewise many builtin perl function push pop open etc modify one argument case operand argument modified denoted positionally always left operand first argument furthermore argument always implicitly enreferenced prototype thus perl operand argument one two semantic role target data target passed reference modified evaluation operation function data passed value though value may reference control fuel modification target model possible recast almost builtin perl function operation procedure exactly two argument single reference target single list data sysopen target file data filename mode perm push target stooge data moe larry curly pop target stack data assign target max data nextval numlessthan target undef data max nextval assign target data time target undef data note many function either two standard argument may null mapping model latin map simplified model perl onto inflexionbased syntax necessary choose inflexion scheme differentiates three component function name target data consider assignment list array gunslinger good bad ugly semantic role notation assign target gunslinger data good bad ugly english would expressed assign gunslinger goody baddie mr ugly imperative verb assign specifies action performed noun gunslinger specifies indirect dative object action word recipient effect action target phrase goody baddie ugli specifies direct object action assigned word data direct indirect object distinguished order appear indirect object first english version also us plural inflexion goody baddie much way perl us prefix indicate multiplicity object involved latin instruction would loosely rendered bonos tum malos tum foedum pugnatoribus da direct object bonos good people accusative plural malos bad people accusative plural foedum mr ugly accusative singular indirect object pugnatoribus fighter dative plural verb da give present imperative conjunction tum mean conveys significance order direct object unlike english ending various latin suffix o um ibus specify number role case noun inflect mean position various object indeed verb matter sentence could equally well written pugnatoribus da bonos tum malos tum foedum da bonos tum malos tum foedum pugnatoribus semantically variant permutation verb object equivalent targetdata model assign target gunslinger data good bad ugly hence equivalent standard perl gunslinger good bad ugly thus possible write perl program latin lingua romana perligata lingua romana perligata module provides necessary translation service allow perl program written using syntactic binding perligatus modelled ancient lingua romana distinguish regular perl binding code specified henceforth referred perligata variable simplify mindnumbingly complex rule declension conjugation govern inflexion latin perligata treat userdefined scalar array variable neuter noun second declension singular scalar plural array minimizes number suffix must remembered hash represent something difficulty perligata latin lack obvious way distinguishing plural variable array solution adopted depart second declension represent hash masculine plural noun fourth declension hence type role type variable specified number case indicated table element array hash referred directly perl prefix container change surprising perligata also make use different inflexion distinguish case indexing operation array elem hash key might translated elem array key hash suggests array hash indexed name rendered genitive possessive case multilevel indexing operation array row column mean column row array hence first indexing variable must also rendered genitive table also summarizes role table perligata variable perligata number case declension perl role nextum accusative singular next scalar data nexta accusative plural next array data nextus accusative plural next hash data nexto dative singular next scalar target nextis dative plural next array target nextibus dative plural next hash target nexti genitive singular next indexed scalar nextorum genitive plural next indexed array nextuum genitive plural next indexed hash word scalar always singular noun array hash always plural different declension case noun specifies role accusative data dative target genitive indexed common punctuation variable special case often value implicit consideration eg pattern match loop rendered thing hoc data role huic target role huius indexed similarly implicitly list thing passed subroutine rendered thing haec data role target role horum indexed punctuation variable take latin form englishpm equivalent see appendix often large measure poetic licence example perligata rendered ianitorem gatekeeper numeral variable etc rendered synthetic compound parprimum equal first parsecundum equal second etc indexed take genitive form parprimi parsecundi etc since directly modified target action dative form local perligata modifier rendered surprisingly first person possessive pronoun meo conferring scalar context mei list context note modifier always applied dative hence declined case thus meo varo haec da var mei varo haec da var mei varis haec da var similarly modifier rendered nostro nostris depending desired context perl local modifier loco locis perligata loco varo haec da local var locis varo haec da local var locis varis haec da local var particularly felicitous loco latin term word local derives also mean place loco parentis meaning much closer actual behaviour local modifier namely temporarily install new symbol table entry place current one subroutine function operator userdefined subroutine represented verb situation verbal noun inflexion verb determines semantic role also call context userdefined subroutine simplest group avoid ambiguity treated verb third conjugation table illustrates various usage userdefined subroutine count table perligata subroutine perligata number mood etc perl role context countere infinitive sub count definition counte imperative sing count call void countementum acc sing resultant count calldata scalar countementa acc plur resultant count calldata list countemento dat sing resultant count calltarget scalar countementis dat plur resultant count calltarget list use infinitive subroutine definition obvious accipere would tell perligata accept spernere reject countere specifies count use imperative void context also straightforward accipe command perligata accept sperne tell reject counte bid count case instruction given void context backchat expected handling scalar list context little challenging corresponding latin must still verbal property since action performed upon object must also characteristic noun since result call used object ie target data verb fortunately latin rich assortment verbal noun far english could fill role since result subroutine call interest best solution use ementum suffix specifies singular accusative outcome action corresponds result subroutine called scalar context used data list data context plural suffix ementa used target dative form used emento ementis note ending completely consistent table builtin function operator builtin operator function could followed pattern subroutine example shift might shifte void context shiftementa used data array context shiftemento used target scalar context etc however latin already perfectly good verb meaning shift decapitare behead unfortunately verb first conjugation second hence imperative form decapita make look like perligata array data role orthogonality never perl highest design criterion perligata follows suit eschewing bland consistency favour aesthetic perligata keywords including function operator name therefore specified correct latin verb whatever conjugation required table show selection whilst appendix contains full list perligata keywords table sample perligata builtin function operator operator function rendered void context scalar data list data add adde addementum addementa give da damentum damenta conjoin sere serementum serementa enlist conscribe conscribementum conscribementa shift behead decapita decapitamentum decapitamenta push stack cumula cumulamentum cumulamenta pop unstack decumula decumulamentum decumulamenta grep winnow vanne vannementum vannementa print write scribe scribementum scribementa write write subscribe subscribementum subscribementa die die mori morimentum morimenta note however consistency entirely forsaken backformations inflexion scalar list context entirely regular consistent userdefined subroutine table perl builtin function po substr key used lvalues target action typically assignment perligata case written dative singular since lvalues always scalar note assignment lvalue function modifies first argument argument must target hence must written dative well thus nexto stringum reperimentum da next po string nextum stringo reperimento da po string next inserto stringum tum unum tum duo excerpementum da insert substr insertum stringo unum tum duo excerpemento da substr insert keyis hashus nominamentum da key key hash keya hashibus nominamento da key hash key block control structure natural language generally use parenthetical device parenthesis comma dash group separate collection phrase statement mechanism would obvious choice denoting perligata code block aesthetically pleasing solution perl block delimiters two particularly desirable property individually short collectively symmetrical considered important retain characteristic perligata latin word sic sense mean follows happily contranym ci meaning among others allure kind wordplay impossible resist perligata delimits block statement two word example sic loco ianitori local dato fonti perlegementum da data data ci control structure perligata rendered conditional clause latin english perl language may precede follow code block control table summarizes control structure perligata provides table perligata control structure perligata perl si fac nisi fac unless dum fac donec fac per quisque fac posterus next ultimus last reconatus redo confectus continue trailing fac imperative form facere used delimiter control statement condition choice dum donec completely arbitrary since latin distinguish abstraction way english dum donec mean latin relies context ie semantics distinguish impractical perligata always treat dum donec choice made order favour shorter term common type loop choice confectus continue seek convey function control structure literal meaning english word continue block specifies complete conficere iteration perligata support pure iterative form clike threepart syntax foreach var list mean variable list scalar variable must accusative governed preposition list must ablative denoting inclusion fortunately second declension inflexion ablative exactly dative giving per quisque varum listis mean extra inflexion learned use per loop better still list listis look like perligata array variable target role clearly since content may modified within loop miscellaneous feature number numeric literal perligata rendered roman numeral ii iii iv xv xlii etc however first number may also referred name unum duo tres quattuor quinque sex septem octo novem decem zero latin numeral rendered nullum noone nihil nothing might closer rendering indeclinable hence indistinguishable accusative genitive numeric literal used indexing operation must ordinal first second etc first ten ordinal named primum secundum tertium quartum quintum sextum septimum octavum nonum decimum accusative course since always data ordinal greater ten represented corresponding numeral suffix imum xvimum xliiimum etc analogy ordinal zero rendered invented form nullimum multilevel indexing operation ordinal may need specified genitive nulli primo secundi tertii quarti xvimi xliiimi etc example unimatrix would septimum noni tertii primo unimatrixorum seventh ninth third first unimatrix note order genitive significant reverse required perl floating point number expressed perligata latin fraction unum quartum mmmcxli mimum note numerator always cardinal denominator ordinal one fourth technically also feminine gender una quarta mmmcxli mimae latin rule enforced perligata string classical latin use punctuation denote direct quotation instead verb inquit said used report direct utterance hence perligata literal character string constructed quotation mark invoking verbal noun inquementum result saying data list literal interpolated example print stdout enter next word becomes enter tum next tum word inquementum tum biguttam egresso scribe note argument inquementum special treated literal punctuation string special name lacunam hole space stadium stride tabspace novumversum new verse newline biguttam two spot colon perligata provide interpolated quotation mechanism instead variable must concatenated string print stderr entered wordn becomes tum entered inquementum tum wordum tum novumversum oraculo scribe reference create reference variable data role target role variable automatically enreferenced variable prefaced preposition ad create reference subroutine associated verb inflected accusative suffix torem one produce corresponding nounofagency example val inquementum datuum ad datum da dat val data arg inquementum datuum ad arga da dat arg arg act inquementum datuum functorem da dat act func special case construction anonymous subroutine constructor factorem one equivalent sub perl anonymo da factorem sic haec mori ci anon sub die perl subroutine may invoked concatenating call specifier name variable holding reference anonymume no tum morituri inquementum anon no morituri note variable holding reference anonymum used data named accusative case subroutine reference target action dative suffix torus used instead benedictum functori classum bless func class benedictum factori sic mori ci classum bless sub die class boolean logic perl logical conjunctive disjunctive operator come two precedence curiously latin higher precedence perl operator represented perligata emphatic latin conjunction atque vel respectively lower precedence operator represented unemphatic conjunctive suffix que hence resulto damentum foundum atque defum result found def resulto damentum foundum defumque result found def resulto damentum foundum vel defum result found def resulto damentum foundum defumve result found def note latin suffix unemphatic conjunction always appended first word point conjunction would appear english thus result val max rendered resulto damentum valum parprimumve tum parsecundum maxementum proper latinate comparison would odious perligata require first argument expressed nominative would indicative would course improve positional independence language even allowing si valus praecedit datum val dat si praecedit datum valus val dat si datum valus praecedit val dat unfortunately also introduces another set case inflexion another verbal suffix worse would mean noun suffix longer unambiguous declension nominative plural end genitive singular nominative singular ending u accusative plural suffix fourth declension nominative used scalar could longer always distinguished array hash except context avoid problem perligata represents equality simple inequality operator three pair verbal noun described table table perligata comparison operator perligata meaning perl aequalitam equality aequalitas equality eq praestantiam precedence praestantias precedence lt comparitiam comparison comparitias comparison cmp operator take two data argument compare si valum tum datum aequalitam val dat si valum praestantias datum val lt dat digere sic aum comparitiam bum ci lista sort b list note although digere look like infinitive ie subroutine definition fact imperative digerere sort perligata keyword sort philosophically inclined might choose think confusion engenders form instant justice visited upon use sort void context effect comparison operator gt lt ne ge etc achieved appropriate ordering two argument combination logical negation operator non si valum datum non aequalitam val dat si datum praestantiam valum val dat si valum non praestantias datum val ge dat package class perligata keyword declare package domus literally house context name class follows keyword treated literal data argument inquementum explicitly specify variable subroutine belonging package preposition intra within used call subroutine method particular package object preposition apud house used perl bless function benedice perligata almost invariably used scalar data role benedictum thus domus specimen package specimen newere sub new sic mei datibus data counto intra specimen postincresce specimen count datibus nullum horum benedictum bless data ci printere sub print sic modus tum indefinitus inquementum mori die method undefined ci domus princeps package main meo objecto da object newementum apud specimen specimen new printe apud objectum object print putting together greek algorithm latin sieve eratosthenes one oldest wellknown algorithm better part roman culture borrowed greek perhaps fitting first ever perligata program well usrlocalbinperl w use lingua romana perligata maximum inquementum tum biguttam egresso scribe meo maximo vestibulo perlegamentum da da duo tum maximum conscribementa mei listis dum listis decapitamentum damentum nexto fac sic nextum tum novumversum scribe egresso lista sic hoc recidementum nextum ci vannementa da listis ci use lingua romana perligata statement cause remainder program translated following perl print stdout maximum maxim stdin list maxim next shift list print stdout next n list grep next list note last perligata statement lista sic hoc da listis use inflexion distinguishes list greped lista list assigned listis even though wrong end statement compared perl version implementation lingua romana perligata module module simple example source filter make use paul marquess filter util call module perligata parser invoked single subroutine called filter source code described following section filtering filter util call module greatly simplifies task prefiltering source code filtering module us filter util call simply add command filteradd import subroutine filtering module used code filter util call look filtering module namespace subroutine called filter call filter subroutine access source code file called filtering module modify code appropriate whatever string variable filter subroutine return passed compiler final program source tokenization lingua romana perligata filter subroutine conforms usual structure grammarbased parsertranslator first invokes tokenizer break perligata source code sequence token tokenizer simple split source whitespace period classifies word resulting list matching series increasingly general pattern keywords tested first followed number numeral punctuation variable userdefined function scalar list context userdefined subroutine void context variable target role ie dative finally variable data role accusative word classified converted object corresponding token type keyword number var sub etc object store original word corresponding perl construct example sequence dum maxo maxa maxamentum damentum would yield list equivalent bless raw dum perl conditional bless raw maxo perl max noundative bless raw maxa perl max nounaccusative bless raw maxamentum perl max verbresultative bless raw da perl verbimperative object form stream token passed parser parsing positionindependence much perligata grammar make task parsing quite challenging using standard tool typically predicated lexical component appearing rigidly defined sequence example write rule match perligata subroutine call following required action dative accusativelist verb accusativelist dative verb accusativelist verb dative dative verb accusativelist verb dative accusativelist verb accusativelist dative accusative verb accusative dative verb accusativelist verb verb dative verb accusativelist verb difficulty compounded fact target data also result positionindependent subroutine call produce leftrecursive grammar unusually large number shiftreduce reducereduce ambiguity make grammar sensitive subrule precedence ordering production within rule appendix b show full grammar cope efficiently constraint lalr parser built using françois désarménien excellent parse yapp module translation execution rule perligata grammar contains embedded action collectively action construct full parse tree source code grammar par node tree blessed object belonging class represents corresponding perl construct example parsed fragment dum maxo maxa maxamentum damentum converted following tree bless condition bless target bless raw maxo perl max vartarget data bless raw maxamentum perl max data bless raw maxa perl max vardata subcall assignment block undef whileloop tree constructed equivalent perl code obtained calling method codify root node tree recursively invokes codify method subnodes tree return string containing perl code fragment corresponding subtree node concatenating fragment string containing full perl program generated string assigned end filter subroutine compiled executed automatically filter util call conclusion latin surprisingly good fit perl rich case structure provides abundance plausible mapping perl data type subroutine call especially perl eclectic syntax semantics mapped onto regular actiontargetdata model use inflexion denote semantic role programming language offer interesting variation ubiquity positional syntax replacing requirement recall syntactic rule requirement remember suffix two task easier probably vary programmer programmer release module cpan author look forward advent truly epic perl poetry acknowledgement special thanks john crossley tom christiansen bennett todd invaluable feedback suggestion enduring gratitude david secomb deane blackman patience helping struggle perplexity lingua romana appendix perligata dictionary appendix list complete perligata vocabulary except roman numeral ii iii etc following table three column always perl construct perligata equivalent literal meaning perligata equivalent generally accusative form shown noun adjective imperative verb table value variable nullum noone unum one duo two tres three quattuor four quinque five sex six septem seven octo eight novem nine decem ten secundum second tertium third quartum fourth quintum fifth sextum sixth septimum seventh octavum eighth nonum ninth decimum tenth parprimum equal first parsecundum equal first partertium equal third parquartum equal fourth parquintum equal fifth parsextum equal sixth parseptimum equal seventh paroctavum equal eighth parnonum equal ninth pardecimum equal tenth ianitorem gatekeeper var admeta measure hochuic thing hishorum thing biguttam two spot lacunam gap stadium stride n novumversum new line local loco place meo nostro main princeps principal table quotelike operator inque say q inque say compara match substitue substitute tr converte translate converte translate table mathematical operator function adde add deme subtract nega negate multiplica multiply divide divide recide lop eleva raise preincresce increase beforehand postincresce increase afterwards predecresce decrease beforehand postdecresce decrease afterwards ab priva strip angula create angle sin oppone oppose co accuba lie beside int decolla behead log succide log tree sqrt fode root rand conice guess cast lot srand prosemina scatter seed table logical comparison operator non general negation atque empathic vel emphatic que praestantiam precedence lt praestantias precedence comparitiam comparison cmp comparitias comparison aequalitam equality eq aequalitas equality table string chomp morde bite chop praecide cut short chr inde give name hex senidemi sixteen time oct octoni eight time ord numera number lc deminue diminish lcfirst minue diminish uc amplifica increase ucfirst amplia increase quotemeta excipe make exception crypt huma inter length meta measure po reperi locate pack convasa pack baggage unpack deconvasa unpack split scinde split study stude study index scruta search join coniunge join substr excerpe extract table scalar array hash defined confirma verify undef iani empty make void scalar secerna distinguish isolate reset lusta cleanse pop decumula unstack push cumula stack shift decapita behead unshift caput crown splice iunge splice grep vanne winnow map applica apply sort digere sort reverse retexe reverse delete dele delete quisque exists adfirma confirm key nomina name value argue disclose content table io related open evolute open book close claude close book eof extremus end read lege read getc sublege pick something readline perlege read print scribe write printf describe describe sprintf rescribe rewrite write subscribe write format pinge paint formline distingue intersperse pipe inriga irrigate tell enunta tell seek conquire seek stdin vestibulo entrance stdout egresso exit stderr oraculo place doom pronounced data fonti wellspring table control sic ci follows fac sub factorem sic ci one follows eval aestima evaluate exit exi exit per foreach per quisque goto adi go si return redde return unless nisi donec dum wantarray deside want last ultimus final next posterus following redo reconatus trying continue confectus complete die mori die warn mone warn table package class module apud house intra within bless benedice bless caller memora recount history package domus house ref agnosce identify tie liga tie tied exhibe display something untie solve untie require require require use ute use table system filesystem interaction chdir demigrare migrate chmod permitte permit chown vende sell fcntl modera control flock confluee flock together glob inveni search ioctl impera command link copula link unlink decopula unlink mkdir aedifica build rename renomina rename rmdir excide raze stat exprime describe truncate trunca shorten alarm terre frighten dump mitte drop exec commuta transform fork furca fork kill interfice kill sleep dormi sleep system obsecra entreat higher power umask dissimula mask wait manta wait table miscellaneous operator tum sere conjoin conscribe enlist ad towards da give appendix b perligata grammar script statement statement conditional imperative data target conditional control block imperative control control dum data fac donec data fac si data fac nisi data fac unless per quisque nounaccusative target fac foreach b block sic script ci imperative data verb data target datalist verb datalist target verb datalist verb target target verb datalist verb target datalist verb datalist target verb target noundative possessive noundative local b etc block data resultativedative data target datalist resultativedative datalist target resultativedative datalist resultativedative target target resultativedative datalist resultativedative target datalist resultativedative datalist target target intra accusative b target apud dative b target noungenitive b factori block sub accusative nounaccusative ad accusative accusative intra accusative b accusative apud accusative b accusative noungenitive b factorem block sub data accusative nega data non data data resultativeaccusative data target datalist resultativeaccusative datalist target resultativeaccusative datalist resultativeaccusative target target resultativeaccusative datalist resultativeaccusative target datalist resultativeaccusative datalist target verb verb verb intra accusative b verb apud dative b resultativedative resultativedative resultativedative intra accusative resultativedative apud dative resultativeaccusative resultativedative resultativeaccusative intra accusative resultativeaccusative apud dative datalist datalist tum data data
50,Lobsters,perl,Perl,Higher-Order Perl,https://hop.perl.plover.com/,higherorder perl,higherorder perl mark jason dominus order online powell book download full text chineselanguage edition hop idea book table content recursion callback dispatch table caching memoization iterators recursion iterators infinite stream higherorder function parsing declarative programming chapter chapter chapter chapter chapter chapter fulltext search mailing list mjdbook complete archive past message mjdbooks complete archive past message hopdiscuss complete archive past message hopdiscussdigest hopvolunteer archived message submit form order online powell book mark dominus blog new page perl paraphernalia mjdperlhop plovercom,higherorder perl mark jason dominus order higherorder perl online powell book download full text current status book published march copy available bookstore u europe online bookseller second printing became available august chineselanguage edition hop translated mr teng jiahai published june china machine press available chineselanguage online bookseller idea book higherorder perl functional programming technique perl write function modify manufacture function would want way code flexible reusable instead writing ten similar function write general pattern framework generate function want generate function need according pattern program nt need know advance function necessary generate needed instead writing complete program get computer write table content recursion callback dispatch table caching memoization iterators recursion iterators infinite stream higherorder function parsing declarative programming hop full useful interesting example perl programmer want see chapter writing recursive function walk file system process recursivelystructured data html document chapter discus dispatch table context reading configuration file chapter concludes improved replacement www simplerobot module better functionality onethird code also contains basic database query system search http log file backwards delivering recent record first chapter discus frequently asked question generate list string match given regex provides astonishingly simple solution later chapter show build parser regexes attach string generator chapter present linogram complete constraintbased diagramdrawing system download publisher final pdf proof second printing download uncorrected manuscript copy mod format sorry delay hoped posted end oops also use fulltext search search book long time provisional title book perl advanced technique handbook never planned use title always planned change found something better mailing list mjdbook used send occasional report progress hop mailing list sent announcement since hop published possible send future example translation book published list extremely low volume quite possible never see another message complete archive past message mjdbooks working least one book announcement upcoming book book might write future subscribe list subscriber get see draft chapter course material related book goody list lowvolume complete archive past message hopdiscuss public discussion list hoprelated matter complete archive past message hopdiscussdigest digest version hopdiscuss instead one message time list receives message batch every day hopvolunteer would like help put hop online please read archived message subscribe subscribe list send mail submit form order higherorder perl online powell book return mark dominus blog new page perl paraphernalia mjdperlhop plovercom
51,Lobsters,perl,Perl,"Moonpig, a billing system that doesn't suck (2013)",https://blog.plover.com/prog/Moonpig.html,moonpig billing system nt suck,moonpig billing system nt suck talk slide poboxcom listboxcom unnecessarily convoluted handling time zone method provides almost never actually want use rik good story horrible bug roach motel affine space available cpan kiokudb sqlite perl lousy garbage collection rik strategy good one detailed description account surprisingly similar system article category prog permanent link,moonpig billing system nt suck amsterdam bookingcom brought tell moonpig billing accounting system rik signes wrote talk mostly rehash one gave pittsburgh perl workshop couple month ago think general interest assumption behind talk nobody want hear billing system actually work people either billing system already else nt need one think could good threehour talk internals moonpig would interesting right group people would small group instead talk last le hour takeaway talk list several basic design decision rik made building moonpig nt obviously good idea time turned well hindsight part think everyone learn may ever need write billing system chance point consider using orm might useful voice head say dominus say might better something completely different instead wonder one time think talk pretty good fresh mind right going try write talk slide want see talk mostly structured around long list thing suck tried design moonpig eliminate avoid least mitigate thing moonpig however suck sometimes see people fuck project say could better get chance try discover lot harder thought realize people tried stupid believed happen time moonpig really good billing system hard get right guy really stupid thought tell people working ic group frown nt heard quite often say ic group run poboxcom people smile say oh pobox icg first wave dotcom late ninety people would often email employer school would switch job graduate email address would go away basic idea pobox small fee something like per year could get poboxcom address would forward mail real email address changed job school could tell pobox change forwarding record friend would continue send email poboxcom address later icg offered mail storage web mail listboxcom mailing list management bulk email delivery moonpig named year year project write started icg billing accounting system already terrible one icg employee would sometimes talk hypothetical future accounting system would solve problem current one accounting system called moonpig seemed clear would never actually written pig could fly fact moonpig would nt written except existing system severely constrained sort pricing structure deal could actually executed go even first choice outsource billing accounting function company specialized thing moonpig project started last resort icg president tried month find someone take billing collecting unsuccessful billing provider would seem perfect turn bizarre shortcoming rendered unsuitable icg need one remember one everything wanted except would handle check nt worry said nobody pay check well happened many customer including largest institutional one gotten memo fact pay check reluctance gave asked rik write replacement billing accounting system mentioned always wanted clear idea dating back many year mistake would make ever called upon write billing system example many time received threatening notice sort account currently past due pay outstanding balance forced refer account collection believe happened idiot programmer know money amount formatted decimal point decides denominate money float amount paid round little differently amount actually owed result subtraction roundoff error leaf nominal debt order dollar said many time ever asked write billing system going use fucking float meeting ceo told rik would write nearly first word mouth fucking float try keep short possible including much absolutely required understand interesting generally applicable material later icg two basic use case one pobox address mailbox customer pay u certain amount money forward store mail certain amount time typically year listbox mailing list customer pay u certain amount attempt certain number bulk email delivery behalf life cycle typical service look like customer pay u money flat fee pobox account larger smaller pile listbox bulk mailing service depending much mail need u send deliver service point fund customer account start run low send invoice extension service pay go back continue provide service process repeat stop providing service top basic model special case customer might cancel service early pobox longstanding deal get sixth year free pay five year service front sometimes customer email forwarding per year want upgrade account one storage provides webmail access per year viceversa middle year case business rule dictate apply current balance new service properly prorated day service remaining downgrade service day service left well nt bad except let customer know new expiration date also service expire sooner would give chance pay extend service back old date deal properly payment nonpayment also something done free year might nt want someone sign year service get sixth year free downgrade account either get full free year service get full free year service frac five full year sometimes customer get refund sometimes screw give people credit free service apology unlike regular credit refundable customer get gratis account cofounder icg used hand party number case coupon discount example refer friend sign get sort credit nonprofit institution get sort discount regular rate customer pay many account get sort bulk discount forget detail customer get service cut nt pay certain large longstanding customer treated peremptorily allowed run deficit infinity beyond moonpig data store mostly organized huge pile ledger represents single customer account contains contact information record transaction associated customer history invoice ever sent customer forth ledger also contains consumer object consumer represents service promised perform exchange money consumer method call say performed certain amount service please charge accordingly method calculating much money allotted much left fast consuming fund long expects last expects run money method constructing replacement handing control replacement necessary every day cron job sends heartbeat event ledger ledger nt anything heartbeat job propagate event subcomponents turn ignore heartbeat event entirely consumer handle heartbeat consumer wake calculate much longer expects live pobox consumer simple arithmetic mailinglist consumer guess based much mail sent recently notice going run money soon creates successor take gone successor immediately sends customer invoice hey service running want renew eventually consumer run money time hand responsibility replacement replacement expire last thing expires terminate service somewhere machine run daily cron job heartbeat ledger one day machine sometimes cron job never run machine crash cron job running cron job time heartbeat ledger system perfect world every component would able depend exactly one heartbeat arriving every day nt live world ironclad rule moonpig development anything handle heartbeat event must prepared deal missing heartbeat duplicate heartbeat anything else could screw consumer get heartbeat must cheerfully say oh dawn new day charge day worth service must look current date charge record decide basis whether time charge day worth service answer question paragraph earlier quite simple machine cron job never run perfectly acceptable response nothing job run next day time everything date customer whose service terminated today terminated tomorrow instead received free day service acceptable loss customer received invoice today receive tomorrow invoice although generated sent day late nevertheless show right date amount also acceptable outcome cron job crash heartbeating ledger acceptable response nothing next day heartbeat bring remaining ledger date everything even better response available simply rerun job ledger receive event twice ignore second time contrast world heartbeat mistakenly assumed reliable world programming staff must determine precisely ledger received event crash either trawling log file grovelling ledger data someone hack program send heartbeat ledger still need stiff deadline get done tomorrow heartbeat issue making everything robust face heartbeat failure little work front cost recouped first time something go wrong heartbeat process instead panicking smile open another beer let n number failure manual repair required someone enough make heartbeat handling code robust hypothesize tell lot organization value n example sort code required nonrobust version code would look something like sub charge self event self chargeoneday code implemented role called moonpig role consumer chargesperiodically actually look something like lastchargedate sub charge self event moonpig env charge self nextchargedate follows next self nextchargedate self chargeoneday self lastchargedate next self isexpired self replacement handleevent event self replacement last charge lastchargedate member record last time consumer actually issued charge nextchargedate method consults value return next day consumer issue necessarily following day since consumer might issue weekly monthly charge consumer issue charge charge nextchargedate future stop run loop using chargeoneday issue another charge time updating lastchargedate time nextchargedate future one tricky part block consumer might run money loop completes case pass heartbeat event successor replacement quits loop replacement run loop remaining period customer pay u cover service day business rule say receive first invoice day current service expires day going test invoice fact sent precisely day later well put like answer obvious testing system must somehow mock time obvious seen many many test made method call sleep waiting hoping event looking would occurred reporting false positive system slow making everyone much le likely actually run test also seen lot test crossed finger hoped certain block code would execute two tick clock failed nondeterministically nt happen another ironclad law moonpig design object ever allowed call time function find time actually instead get current time object must call moonpig env test run test environment test environment moonpig env return moonpig env test object contains fake clock stopclock method stop clock elapsetime method force clock forward certain amount need check something happens day call moonpig env elapsetime likely moonpig env elapsetime testledger heartbeat production environment environment object still method one return true current time system clock trying stop clock production environment fatal error similarly moonpig object ever interacts directly database instead must always go mediator returned moonpig env storage test fake storage object whatever needed shocking many test seen begin allocating new mysql instance executing huge pile ddl folk write test moonpig object ever post email asks moonpig env emailsender post email behalf test us cpan email sender transport suite test code interrogate emailsender see exactly email would sent never anything required filesystem access would moonpig env f opening writing file moonpig env object make easy get right hard screw code act outside world becomes red flag nt going environment object going test already complained loathe floatingpoint number want add although probably use case floatingpoint arithmetic nt actually know pretty long varied programming career far legitimate us floating point number seem really complicated fraught trap say mathematical expert much stronger mathematical background programmer law adopted moonpig money amount integer money amount integral number millicents abbreviated worth cent turn u dollar fractional millicents allowed division must rounded appropriate number millicents usually customer favor although practice nt matter much amount small example pobox account actually bill leftlfloorfrac rightrfloor day leap year since nt want clutter test code bunch number like two utterly trivial utility subroutine sub cent sub dollar written dollar dealt floatingpoint number would tempting write test code looked like cmpok ab actualamount expectedamount epsilon float hard sure wo nt end leftover something write test ignore small discrepancy lead overlooking certain real error happen result small discrepancy integer amount discrepancy nowhere hide sometimes happened would write test money amount end would wrong using float might shrugged attributed incomprehensible roundoff error integer difference shrug incomprehensible roundoff error calculation exact integer reason tiny discrepancy usually pointed serious design implementation error contrast test would show gigantic discrepancy million bug always quite easy find fix still roundoff error unavoidable example consumer pobox account bill per year error customer favor per account year customer accumulated enough error pay extra year service business icg size loss deemed acceptable larger business could significant imagine customer time case would keep approach denominate everything microcents instead happily moonpig deal multiple currency would added tremendous complexity financial calculation confident rik could gotten right time available date time terribly complicated partly astronomical motion model complicated mostly world bureaucrat keep putting finger suggested recently identify whether someone programmer asking opinion time zone programmer get red face pound fist table wrote sentence wrote word right way think date time calculation spare going try keep turning article way people screw date time calculation skipping argument stating main point datetime value kind number considered particular datetime value inside program immutable single canonical representation datetime value program chosen ease calculation program deal datetime value representation convert canonical representation soon possible canonical representation late possible event avoid letting noncanonical value percolate around program canonical representation chose datetime object utc time requiring program deal utc eliminates many stupid question time zone dst correction simplifies rest much simplified also avoids datetime unnecessarily convoluted handling time zone held nose chose use datetime grudging approval large side helping qualification internal part okay method provides almost never actually want use example provides set mutators per item datetime value number ought immutable rik good story horrible bug caused accidentally called subtract method widelyshared datetime value mutated causing unexpected change behavior widelyseparated part program consulted afterward instead using raw datetime wrapped derived class called moonpig datetime removed mutators also made couple convenient change shortly describe pair datetime object want know much time separate two instant represent several choice return datetime duration object choice wrong datetime duration object useless kind roach motel date time information data check nt check going discus would take article show simple example showed talk datetime new month day year hour minute second datetime elapsed print elapsed inunits second n might think looking code might print number second elapsed unspecified time zone current moment would mistaken failed reckon elapsed object datetime duration computing object seems reasonable far know nothing throw away start way extract elapsed amount time indeed anything else value event print print correct number second instead print cago en la leche discovered spanish shit milk much datetime duration b moonpig datetime object ab return number second elapsed two time simple divide get number day arithmetic similarly overloaded number ai ai time obtained adding subtracting second respectively c programmer note analogy pointer arithmetic c pointer datetime example mathematical structure called affine space study theory affine space tell rule object obey hope discus length another time going along arithmetic family trivial convenience function sub hour sub day use day find time day programmer amsterdam talk worried leap second correct name day quite honest promise deliver exactly day ca nt definition day varies widely place place time time ca nt know long day unless know nt even make sense ask right aware add day resulting time might time day day later indeed local date time law sufficiently bizarre could principle completely wrong since moonpig datetime object always reckoned utc never one second wrong anyway afraid moonpig datetime would turn leaky abstraction producing pleasantly easy correct result thirty time thirtyone annoyingly wrong bizarre result time surprised never caused problem least none come light working releasing module cpan name datetime moonpig addendum datetime moonpig available cpan left talk mistake good place mention mutable data often bad idea billing system wanted avoid accountability reason never wanted customer service agent position unable explain customer thought owed u instead claimed owed never wanted position trying track billing system bug find trail erased one maxim rik repeated freqently moving finger writes writ move moonpig full method name like isexpired issuperseded iscanceled isclosed isobsolete isabandoned forth representing entity replaced entity retained part historical record example consumer successor hand responsibility fund exhausted customer change mind future service successor might replaced different one replaced none nt delete destroy old successor instead mark old successor superseded simultaneously recording supersession time push new successor undef none onto end target consumer replacementhistory array ask current successor getting final element array pattern appeared several place particularly simple example ledger required contain contact object contact information customer pertained contact nt simply contact rw isa roletype moonpig role contact required instead array replacing contact actually pushed new contact onto end array contact accessor returned final element contacthistory ro isa arrayref roletype moonpig role contact required trait array handle contact get replacecontact push similarly happens send customer invoice three service inform customer service want continue two service cancel third need throw away old invoice never paid issue new one old invoice remains system marked abandoned pointer new invoice use relational database anyway cleanly clearly model data want store lightning fast data truly relational nice flat rectangle record field rdbs terrific moonpig nt much relational data basic datum ledger bunch disparate subcomponents principally heterogeneous collection consumer object would guess program nt deal relational data like moonpig deal sort object network nevertheless try represent data relationally relational database hammer go around hammering everything whether thing need hammering object model mature locked modeling object relationally made work object model evolving disaster relational database schema change every time object model change find way migrate existing data forward old schema worse likely become reluctant let object model evolve reflecting evolution rdb painful rdb becomes ball chain locked program ankle preventing going need go every change difficult painful avoid change opposite way design good program program light airy object model like string pearl theory mapping rdb object transparent taken care seamlessly orm layer would awesome world live nt live may never right principal value orm software seems program fast need slower orm really good since speed benefit rdb providing first place attached two large complex inflexible system program gotten nothing return watching orm try model object somewhere hilariously pathetic crushingly miserable perl dbix class extent succeeds succeeds nt even try model object database instead present object represent database row nt row need modeled row interesting behavior speak object access point method generate sql dbix class modeling object generating sql realized recently angrily shouted dbix class expert expecting denunciation met rage denial smiled amusement yes said dbix class expert one occasion exactly correct well rik believe maybe project trying store object rdb orm layer mediating program rdb bad bad move determined something else eventually brewed object store part project least proud object store bad idea believe probably made every possible mistake could made even one everyone writing object store already know make example object store method retrieveledger take ledger id number read saved ledger data disk return live ledger object must make sure every call return ledger object right data object otherwise two part program different object represent data one part modify object part looking different object see change see took u figure problem like really know done instead building object store use someone else object store kiokudb frequently mentioned context first gave talk people asked nt use kiokudb hearing said sound lot like kiokudb get rik remind nt use kiokudb considered decided technical political reason ceo made unpleasant decision rik write new billing system wanted see progress asked u first week accomplished said well spent week figuring kiokudb head might exploded instead able say got object store threequarters finished long run probably expensive result certainly good short run kept customer happy important thing say entirely earnest without either sarcasm bitterness hand ran article rik pointed kiokudb later become essentially unmaintained used would become principal maintainer large complex system help design implement moonpig object store may technically inferior rik beginning understands thoroughly said object store worked bottom layer ordinary relational database single table test phase database sqlite production ic group preexisting mysql instance table two field guid globallyunique identifier one side side copy corresponding ledger object serialized perl storable module retrieve ledger look table guid retrieve list ledger query guid field cover two main usecases customer service looking customer account history running daily heartbeat job subsidiary table mapped ic group customer account number ledger guids storage engine could look particular customer ledger starting account number account number actually associated consumer right ledger simple method call ledger retrieve consumer object finding right ledger requires table couple table sort overall small thing fine point consider example choose whether store object data code well choice clear must store data code otherwise would update stored object every time made code change bug fix clear would discouraged bug fix gone way project would ended pile smoking rubble since code stored database object store must responsible whenever load object making sure correct class object actually exists solution along every object stored list role must perform object load time object class nt exist yet object store retrieves list role stored third column parallel object data us moosex classcompositor module create new class role moosex classcompositor something rik wrote purpose seems generally useful application every may make upwardincompatible change object format renaming object field change since field must renamed existing object adding new field nt unless field mandatory le often might wrote little job update stored object occurred seven time life project update program short also make change way object stored bookingcom sereal module released project going switched use place storable also one customer ledger object grew big store database field could serious problem able defer dealing problem using gzip compress serialized data storing use rdb engine underlying storage got u mysql implementation transaction atomicity guarantee trusted gave u firm foundation build higher function without guarantee nothing impossible build reliable system since could build higherlevel transactional system top example used opportunistic locking scheme prevent race condition updating single ledger performance reason typically nt want force update done single process although made work see rochkind advanced unix programming optimistic locking scheme store version number record suppose lowlevel storage manager get request update ledger certain id instead update ledger set serializeddata ledgerid update ledger set serializeddata version ledgerid version check return value sql see many record actually updated answer must well report successful update back caller mean process got first updated ledger changing version number expecting something bigger change limbo applied version object longer current throw exception exception safe caller previously made change database rolled back ledger failed save problem exposed rdb transaction caller caller requested transaction begun propagated request rdb layer exception aborted caller transaction previous work done behalf aborted back start rdb transaction one wanted caller even option catch exception without allowing abort rdb transaction retry failed operation major drawback object store difficult aggregate data across ledger thaw ledger one time traverse object structure looking data want aggregate planned became important could method ledger subobjects called would store relevant numeric data right place conventional rdb table would available usual select group operation storage engine would call whenever wrote modified ledger back object store rdb table would readonly view part data needed building report related problem kind data really relational store object form extremely inefficient rdb terrible impedance mismatch kind objectoriented programming kind main example come mind every ledger contains transaction log every transaction ever performed consumer deducts transaction every day consumer add one ledger transaction log large ledger many consumer grow rapidly planned first transaction data would someday move ledger entirely single table rdb access would mediated separate object called accountant present accountant store transaction data inside instead external table design object store greatly simplified fact data divided disjoint ledger ledger could stored retrieved minor limitation design way object contain pointer ledger object either one pointer would spoiled perl lousy garbage collection nt going anyway practice place code needed refer another ledger store ledger guid instead looked needed fact every significant object given guid used needed rik strategy good one surprised find often useful simple reliable identifier every object much time formerly spent programming problem would trivially solved object guids think object store technique worked well smart choice went strongly prevailing practice would recommend technique similar project except part wrote object store instead using one written already tried use orm backed relational database think project would taken least third longer tried use rdb without orm think would finished using moose couple year including moonpig project rik asked thought lukewarm introduces lot convenience common operation also hide lot complexity hood complexity always stay wellhidden big slow start whole said could take leave oh added except role role awesome long section talk good role moved separate talk going take hint theory date time present thesis save argument another post objectoriented programming centered around object encapsulated group related data around method opaque function operating particular kind object oop mandate particular theory inheritance either single multiple classbased prototype based etc indeed oop system object method pretty much inheritance system past year oop many theory inheritance tried serious problem alternative inheritance would struggle inheritance however role good alternative inheritance every problem solved inheritance solved least well role many problem solved inheritance solved role many problem introduced inheritance arise using role role introduce problem none bad problem introduced inheritance time give inheritance worth try tried hard could thirty year nt work going repeat inheritance nt work time give moonpig nt use inheritance except moonpig datetime inherits datetime nt control every class moonpig composed role nt policy avoid inheritance role everything needed usually simple straightforward way plan write extensively later section end thing want excoriate note transition multiple inheritance tremendous waste everyone time role opinion tremendous success right thing gosh gotten right first place look much trouble would saved moonpig web api moonpig application customer service dashboard heartbeat job invoke moonpig function api api built using system developed parallel moonpig called stick socalled ic group tried develop simple web api system none good enough stick one hoped would stick basic principle stick distributed routing allows object uri delegate control uris underneath object participate web api object must compose stick role routable role requires provide subroute method method called array containing path component uri subroute method examines array least first element decides whether handle route refuse throw exception return undefined value turn error web protocol handle path remove part handled array return another object handle rest nothing left public resource sort former case routing process continues remaining route component passed subroute method next object route used last object chain checked make sure composes stick role publicresource role prevent accidentally exposing object web api private stick invokes one final method public resource either resourceget resourcepost similar stick collect return value method serializes sends network response example suppose ledger want provide access consumer might implement subroute like sub subroute self route route eq consumer shift route consumerid shift route return self findconsumer id consumerid else return pathtoledger uri lead certain ledger valid uri specified ledger consumer id request pathtoledgerfoopdedoop yield error request whenever findconsumer id return undefined common pattern path invokes method target object example suppose ledger object already addressable certain uris one would like expose api ability tell ledger handle heartbeat event stick incredibly easy implement publish heartbeat httpmethod post sub self self handleevent event heartbeat creates ordinary method called heartbeat called usual way also invoked whenever http post request arrives appropriate uri appropriate uri anything form pathtoledgerheartbeat default case publish method expected get case one omit mentioning publish amountdue sub self return ab due avail complicated published method may receive argument stick take care deserializing checking type correct invoking published method ledger method updating contact information publish replacecontact path contact httpmethod put attribute hashref sub self arg contact class contact new arg attribute self replacecontact contact return contact although method named replacecontact available web api via put request pathtoledgercontact rather one pathtoledgerreplacecontact contact information supplied http request data accepted class contact new ledger contact updated class contact utility method return name class represents contact probably string moonpig class contact case ledger entire family subobjects example ledger may many consumer case also equipped collection object manages consumer ledger use collection object convenient way look consumer need collection object also provides routing ledger get request route begin consumer strip consumer return consumer collection object handle path guidxxxx locating returning appropriate consumer collection object repository sort convenient behavior example one composes stick role collection mutable role onto gain support post request handled appropriately adding new api method object trivial matter adding new published method unpublished method accessible web api wrote talk wished written talk stick instead still hoping write one present yapc orlando summer unit test often lot repeated code set test instance run set check several different condition rik test routine make test program class class instantiated test method run test object instance test method invoke one another test object attribute available test method good place put test data object initializer set required test data test easily load run test usual way like oostyle programming like thing building test test routine stuff available free open license really long article thanks sticking header article named anchor case want refer someone particular section suppose fair chance wind hacker news know much kid hacker news love dress play ceo scary corporate lawyer enjoy posting dire tuttuttings whether disclosure icg secret actionable reluctant would hire anyone tell story previous employer may well spoil fun mentioning received approval icg ceo posted addendum detailed description datetime moonpig available addendum jesper andersen written account surprisingly similar system wrote erlang addendum connection class modeling object generating see troublesome active record pattern http calpatersoncomactiverecordhtml come similar conclusion intelligently reasoned technical detail paterson say workable alternative make query first class dbix class doesâ article category prog permanent link
52,Lobsters,perl,Perl,The joy of Perl (1998),https://www.salon.com/1998/10/13/feature_269/,joy perl,free softwareopen source movement wallace gromit eric raymond linux richard stallman gpl,larry wall smile recall message yahoo cofounder david filo sent several year ago shortly yahoo go public yahoo wrote filo could never started without perl allpurpose programming language wall invented would larry like buy cheap preipo stock back early absolute height silicon valley internet ipo madness offer akin asking would accept dump truck delivery solid gold ingot front lawn wall money never primary motivation though widely acclaimed author one valuable tool hacker anywhere wall life modestly suburban mountain view calif tooling around town wellworn honda accord perl never money wall created language solve programming problem faced day job getgo made sure source code perl would freely available people always allowed tinker perl regardless whether use construct multibilliondollar internet directory company get survey form working home page still wall may frugal stupid accepted offer bought yahoo stock daughter enough pay college education better example internet old gift economy ethic could hardly imagined give unto net shall receive larry wall like call perl humble language softspoken voice describes perl meek obeisant servant existing let bend us legion perl hacker swarm web le modest perl declare indispensable duct tape glue hold entire web together yahoo amazon million site without perl larry wall perl advocate argue net would pale shadow current self wall played important role spurring forward web evolution also burgeoning free softwareopen source movement responsible much internet structure plumbing even though peer hail one paramount chief wise elder freesoftware culture wall version leadership utterly selfeffacing character trait set apart leader movement son grandson preacher wall religious man mission say friend close perl collaborator tom christiansen act belief people working together project inner vision selfless work mutual benefit onto perl wo nt allow drawn petty religious war plague world programming endless dispute issue whether one programming language operating system inherently better another flame war favorite hobby hacker fond declaiming term allow wiggle room ambiguity foreign fundamental eitheror yesno zeroone digitalness computing universe wall perl wiggle room messy imperfection fuzzy creativity duct tape valuable offer perfect solution plumbing problem get job done perl eye may seem elegant wall concern humble goal useful help people need facilitate interconnection programming language hardware platform assorted software universe people working together one cosmic entity think web accident perl wall first invented decade ago nt really start explode web took web hackedtogether messy adhoc creation requires fast thinking faster reaction time perl web hacker best friend try get right amount levity gravity simultaneously say wall sitting moderately cluttered living room mountain view home talking specifically perl attitude built infrastructure daily life wall caller id hooked computer instructed emit unique sound incoming call good caller id asks wall walk way telephone see calling likewise pressing doorbell set sequence dialogue wallace gromit claymation cartoon dryer hidden away garage finish cycle whistling sound shoot entire house wall professional background system administrator rather software engineer sysadmins tend take utilitarian attitude toward programming technology focus keeping balky network running solving pressing problem hacking fly wall whole life programmer devoted solving kind problem perl recent tool personally crafted arsenal year dreamed perl already achieved hacker renown writing rn program reading usenet newsgroups rn early prototype called free software open source model software development farflung programmer collaborate across net improving product whose code remains accessible wall wrote rn program released source code internet started work upgraded version incorporated suggestion bug fix fellow hacker thenfledgling universe cyberspace back nt easy distribute upgrade across net often people would connecting via slow modem simply could fling megabyte source code back forth carefree manner commonplace wall wrote tiny program called patch patch took compact new code upgrade applied old source code patch could bring old code speed even smart enough take account change hacked old code hacker go wall reasonably circumspect man nt mean unfailingly modest patch say wall changed culture computing believed year patch single important contribution opensource culture though never attracted kind notice bigger sexier project like perl rn say eric raymond one vocal leader open source movement patch may successful hack time say raymond larry effectively created least critically enabled modern style highly distributed development exemplified linux perl came patch surface completely different beast highly complex scripting language aimed programmer need write short burst code automate task connect incompatible program system otherwise solve persnickety problem perl inception date wall worked system administrator subsidiary burroughs time engaged secret project nsa involved synchronizing information exchange computer santa monica calif paoli pa nsa nt want information synchronized also wanted report generated exchange none wall existing tool seemed fit task getting everything together required juryrigged solution hack eventually became perl practical extraction report language realized point huge ecological niche c language unix shell say wall c good manipulating complex thing call manipulexity shell good whipping thing call whipupitude big blank area neither c shell good aimed perl point wall focused spare time energy exploiting need language could connect dot across big blank area computing universe people always looking interstice say wall always looking new ecological niche speed move ecological niche really important first person niche often winner perl winner wall ensured perl particular strong point text processing flexibility vast tool kit builtin feature quickanddirty problemsolving made knowledge perl essential programmer hurry people like david filo jerry yang two stanford university graduate student created yahoo found perl indispensable used generate web page write code datacollecting web robot maintain database web address relied lot say filo quick development time could thing really fast yahoo experience far unique say tim oreilly founder ceo computer book publishing company oreilly associate oreilly publish bestselling perl computer book also hired wall three year ago fulltime evangelist perl perl great winging say oreilly perl much accessible traditional programming language think key part enabled people start building envisioning web let amateur nt professional programmer even though perl difficult reputation sort obscure also pretty accessible kind thing people want throw thing together quickly get work done exactly perl different really host computer language vying supremacy digital sun java python tcl perl say fan swiss army chain saw tool anything brute efficiency one nt kind programming genius think java c able use perl although flexibility make confusing especially hardcore programmer accustomed one right way something perl greatest advantage lie way function bridge computer language perl always continues archetypal glue language say chip salzenberg one perl leading code contributor evolution design driven need real programmer face daytoday challenge making complex uncooperative system work together larry wall belief evolutionary process mirror real world work perl lot handholding say wall give good feedback think wrong program rapid turnaround trying develop something quickly try something break fix grow evolve program write lot people write think perl reflection real life humanism say wall built deep philosophical structure language perl first postmodern computer language say wall artificial natural language imitates programmer think deep structure language always central concern wall committed lifetime system administration associated hacking wife graduate student linguistics department ucberkeley plan say wall become field missionary dedicated assisting bible translation would go live tribe written language learn scratch write help translate bible language wife abandoned mission replaced another assisting people everrelevant goal connecting one another useful thing came creating programming language instead building something totally new ground wall inspired linguistics training chose build something replicated real human thought acted first foremost meant providing number different approach solving every possible problem led perl battle cry one way think human language artistic medium say wall give room creativity want able optimize different thing want able write recipe poetry newspaper column magazine article language flexibility antithesis people taught computer science people taught redundancy evil wicked coming natural language perspective nt buy perl evolved way real language assimilating chunk language time little unix little c little basic little little anyone else came something new useful perl would incorporate wall invokes concept postmodernism referring perl eclectic inclusive approach ability find little bit truth every nook cranny without time pinning one grand truth come computer language try make programmer think like computer say wall tried make computer think little like programmer degree success question master despite perl popularity language without detractor marc ewing chief technical officer red hat leading distributor commercial version linux prefers working python infoseek internet search engine company us python internal development work perhaps pointed criticism come eric raymond long touted perl one great success story open source movement design language showing age significant sign bloat say raymond perl never pretty elegant language lure lay brute usefulness time problem consequent larry early choice seem accumulating reinforcing one another little faster benefit pile problem created significant brain drain away perl scripting language say raymond part trend personally essentially abandoned perl python younger language similar application range much cleaner design expect perl relative importance probably decline future even developer base continues increase absolute size competitor grow faster perl perl anything clean indeed perl hacker use word messy almost point praise perl detractor especially python devotee messiness next programming godliness one complaint perl hear frequently perl user also use python often always prefer python even perl code hard read back away let alone someone else perl code say guido van rossum python principal author much le problem old unfamiliar python code perl proponent make big effort encourage perl user write clean perl newer perl version contain feature help perl insistence value messiness mean always problem perl one level perlpython debate another example endless jockeying supremacy characterizes hacker discourse core tension real tension seek purity content utilitarian efficacy language purist always said perl ugly say oreilly perl kitchen sink language perl would collapse weight yet perl go solving problem scripting language put together sell bestselling book perl python add oreilly see continued healthy growth use perl python use flat perl order magnitude widely used python see sign changing least based book sale perl suffering brain drain magnitude add salzenberg could say language growing time perl continues grow fine perl glue language useful lot thing need gluing perl continue become whatever needed connect everything everything else wall let others man defense perl assailant asked response pointbypoint critique raymond sent oneline email quoting leo tolstoy amazing wrote tolstoy complete delusion beauty goodness wall goodness making connection beauty perl glue world c programmer world unix shell digital severity computing world inchoate confusion human reality perl also bridge gap separating two extreme free software world commercial pragmatist represented volubly raymond espouse free software principle produce best software radical moralist led free software foundation richard stallman believe free software absolute good wish modify change perl choose restriction imposed two different license operate gpl extremely strict license created stallman fsf aimed ensuring free software always remains free choose wall artistic license forgiving set rule mean wall say essentially anything want perl long leave artistic control enough sneak fsf without raising hackle say wall actual fact artistic license closer feeling subject want perl used perl open possibility seeming deadend alley one major reason many perl hacker asked love perl simply reply fun asked larry wall thought perl fun let creative say give choice typical computer language like train take anywhere long track already perl like offroad vehicle get going even official way get facilitate kind pathfinding reap sow larry wall sitting living room mountain view petting cat listening weird sound ricocheting around house look like pretty happy guy given something valuable web web wo nt let forget hardly day go somebody nt write message saying love stuff say larry wall changed life used hate programming programming fun
53,Lobsters,perl,Perl,An unexpected benefit of thinking functional in Perl,https://blog.petdance.com/2019/12/04/thinking-functional-in-perl/,unexpected benefit thinking functional perl,,reading functional programming past year working python many thing immutable trying incorporate perl code probably biggest influence functional try call verb possible example code codebase work got push got book list bwanted push got ebooks list ewanted user canorderebooks eq push got av item list awanted three different call push three line code similar need pattern push string left got condition right true created function called mapxify handle letting rewrite line got mapxify book list bwanted ebooks list ewanted user canorderebooks eq av item list awanted instance push declaring condition result work done hidden inside function setting content got one time focus data function simple use list util qw pairmap sub mapxify return pairmap b happy name mapxify please email idea better name standard name operation happy refactoring got better ran perlcritic code analyzer original pm file helpfully informed got declared used code better cleanedup code code throw away got new message variable prohibitunusedvarsstricter policy installed since one place got referenced policy knew used another win thinking functional another win running perlcritic often
54,Lobsters,perl,Perl,An introduction to Raku,https://www.slideshare.net/SimonProctor8/an-introduction-to-raku-196440606,introduction raku,user agreement privacy policy privacy policy user agreement,slideshare us cooky improve functionality performance provide relevant advertising continue browsing site agree use cooky website see user agreement privacy policy slideshare us cooky improve functionality performance provide relevant advertising continue browsing site agree use cooky website see privacy policy user agreement detail
55,Lobsters,perl,Perl,Functional Perl release,https://marc.info/?l=perl5-porters&m=157442915530310&w=2,functional perl release,prev list next list next thread functional perl release christian jaeger chrjae gmail com mail gmail com message body http metacpanorgpodfunctionalperl http githubcompflanzefunctionalperl http functionalperlorgdocsideasxhtml http functionalperlorgdocstodoxhtml prev list next list next thread configure news add list korelogic,prev list next list prev thread next thread list subject functional perl release christian jaeger chrjae gmail com date messageid mail gmail com download raw message body hello everybody picked development functional perl project started year ago finally released cpan http metacpanorgpodfunctionalperl fixing test failure show cpan tester take bit get green state quite lot test commits git repository since last posted change include structural improvement including proper enforced interface better name various module data structure enforce immutability new example script updated intro text script improved pod documentation code snippet pod documentation automatically tested part test suite project currently contains perl module around subroutine method definition additional documentation file markdown nothing perfect yet ca nt sit forever various thing know well want improve example working implementing optional runtime type check function method plan also add possibility add type information interface declaration check implementation interface load time two approach make chain sequence operation efficient chunking nonimmediate mode immutable arraylike data structure efficient update random location called fp vec smooth interoperation various implementation sequence say update purearray convert fp vec possibly sharing original also thing know project could benefit lot nt started working yet lexical variable lifetime analysis make lazy evaluation functional stream ergonomic use plan implement subset scheme translate perl got proof concept implementing analysis perl op tree possibly tweaking interpreter actually consistently let go reference told tail call could benefit pragma optimizes automatically similar approach also know lot work gone designing raku capability including sequence operation currently know little raku background scheme clojure previously imperative perl anyone raku knowledge interested explaining willing collaborate look cpan page linked website linked website generated file contained distribution idea page todo list project still need work become stable need feedback please start playing tell experience company interested using let know may available part full time cheer christian http githubcompflanzefunctionalperl http functionalperlorgdocsideasxhtml http functionalperlorgdocstodoxhtml prev list next list prev thread next thread configure news add list sponsored korelogic
56,Lobsters,perl,Perl,Tabs or spaces for indentation? Statistics on 3.8 million Perl files created in 24 years,https://squareperl.com/en/tabs-vs-spaces-in-millions-of-perl-files,tab space indentation statistic million perl file created year,tab space indentation statistic million perl file created year writing code script result work filldb space tab tab space data author script file github jupyter notebook time script jupyter notebook space hypothesis number module install space hypothesis number space hypothesis number data script factor affecting validity data backpan source code summary article http translateyandexcom,tab space indentation statistic million perl file created year one eternal question programming character use program code indentation tab space sometimes choice example makefile sure use tab language programming go official utility gofmt code format utility us tab indenting b esoteric programming language whitespace tab space replace many programming language impose choice allow programmer decide character use quite popular opinion character use indenting opinion following matter whether use importantly consistency use tab always need use use space use space never use tab even comic comic comic subject two people completely disagree whether use tab space absolutely agree necessary use one thing real world actually used easy enough find need take source code program calculate character used look result article result little research use tab space world perl programming language huge repository store perl library cpan downloaded version library cpan thousand decided character used indentation read suggest minute think try assume popular indentation taba gap mixture tab space writing code challenge clear need take library cpan check used indent first need download whole cpan done one command time usrbinrsync av delete cpanrsyncperlorg cpan projectcpan hour downloaded cpan take gb cpan collection file organized certain structure snippet cpanauthorsid â aa â â aadler â â â checksum â â â â â â â â â â â â example aadler login author release cpan thousand author downloaded library cpan order store thousand folder folder added level version control system git store data similar way cpan download library packed different archivers started counted number different file extension folder cpanauthorsid script result work top extension archive targz tgz zip gz targz win margin decided would enough count character used indent library packed targz wrote script initially end clear want get data tab space decided make system consisting several component first preprocess thousand file release put information tab space database expect long use data database order quickly obtain data different format end script filldb script filled data base little five hour five oclock everything debugged first time script worked main problem unicode first problem release author apeiron problem file release author bigj end problem solved script successfully made targz release script targz file cpan unpacks targz temporary folder find temporary folder file whose extension pm pl pod read indent check indentation space tab release file decided limited file clearly relate perl result script table database example data mysql select release limit releaseid author filename timestamp ruff row set sec mysql select file releaseid fileid releaseid filename size hasspacebeginning hastabbeginning djabberdauthendovecotlibdjabberdauthendovecotpm djabberdauthendovecottcompilest row set sec mysql mysql selec release count row set sec mysql select count file count row set sec space tab tab space total database file release flag use space indent use tab indentation respectively two flag combination used space tab use space used tab used space tab first three option completely expected situation wanted find find popular option nt use neither tab space thinking turned happening ask example mysql select releasesreleaseid filesfilename filessize hasspacebeginning hastabbeginning release join file releasesreleaseid filesreleaseid author koha releaseid filename size hasspacebeginning hastabbeginning row set sec author koha release release file extension list pm pl pod file database written indent space tab turn elementary look file simply indentation example content file tbundlekohasupportt use test test begin useok bundle kohasupport addition three unexpected situation use space used tab used space tab use space use tab data author processed data database decided watch author us padding expect popular use space second place popularity using tab third place popularity simultaneous use tab space turned completely wrong wrote script script checked character used author file pm pl pod release cpan cat appdatauserslog perl nale say nothing tab space data absolutely expected author use mixture space tab indenting space second place slightly author use tab le percent number author use padding almost number author use tab full list author breakdown pro team file github jupyter notebook built pie chart data generated release cpan release created last year may time ratio somehow changing time every file release cpan modification time time release uploaded cpan data loaded database old cpan release uploaded cpan mysql select author filename fromunixtime timestamp release timestamp select min timestamp release author filename fromunixtime timestamp kjalb row set sec day filled release mysql select release fromunixtime timestamp order timestamp releaseid author filename timestamp kjalb tyemq cpanauthorsidttytyemqfilekglobtargz wps kjalb micb micb gboss jkast row set sec decided see distribution use different character indentation time wrote script snippet data file created script cat appdatareleasesdatecsv head ie date starting provides information much release fact character used indenting indentation space tab indentation used tab indent use space atsuta used tab space wrote jupyter notebook drew graph chart display absolute number release type indentation percentage total number release day graph show almost thousand day evident trend graph noisy bad see everything instead day grouped release month surprising trend number release use tab indent virtually unchanged proportion release use space constantly growing growth due proportion release use mixture tab space space hypothesis number looked data one hypothesis decreasing number release use problem tab thought perl library module install writing library use module install cpan release included file library file us mixture space tab example file module install release mysql select file releaseid filename like incmoduleinstall fileid releaseid filename size hasspacebeginning hastabbeginning row set sec hypothesis developer use space indentation due fact release module install recorded statistic space tab module install steel le use sort dist zilla dist milla minilla therefore module install stopped giving distortion hypothesis need checked first decided see module install used le le built schedule point number release month used module install see part hypothesis correct indeed module install steel use le whether use module install affect utilization space tab space indent order find drew two graphic number different type padding release month first chart release use module install second chart release use see indeed use library module install often library used mixture tab space chart display release use module install compare schedule schedule apply release difference nothing change turn hypothesis wrong release us module install release often fall group tab space account release use module install still trend proportion release use tab indentation increase expense proportion release used mixture tab space space hypothesis number growing number release use tab may excess active author producing many release author effect statistic tried check drew graph show share release use space first letter author name indeed author made large contribution overall statistic kind line sharply went chart saw line plus minus even confirm hypothesis able get space hypothesis number graph show time becomes release space indentation share growing expense release mixture space tab first assumption happens due fact release actively included code library module install used mixture space tab library use smaller therefore proportion release use mixture tab gap reduced part truth even remove review release use module install overall trend change still share release gap growing expense share release us mixture space tab second assumption influence statistic small set active author could nt find confirmation hypothesis third hypothesis author appear convenient text editor ide easier use grease space mixture space tab unfortunately idea test hypothesis data lie cpan information editor used create release looked release date popular editorside emacs vim intellij idea januaray eclipse november sublime text january atom february v code april data previous graph show time becomes release space mix tab space decided look distribution type margin used writer account release data result running script cat perl nale say nothing tab space compare data provide data year see percentage author us tab change proportion author use space increased dramatically source pie chart factor affecting validity data formation number graph used targz release cpan time writing addition release perl programming language cpan allows delete release data shown article remote release participate unclear much change data consider character padding already removed release possible data change much archive backpan store release ever cpan theory possibility convert number based release cpan second point affect data accuracy something taken account symbol indentation release packed targz archive type archive used vast majority release targz made assumption count data archive data surely change assume change percent source code whole set script used collect data data jupyter notebook available repository github code written far perfect written written idea quickly possible get result create perfect code summary time writing repository perl cpan library thousand release first release made year ago release almost million file extension pm pl pod consider data time turn author margin use mixture space tab used indentation space tab consider data becomes author use space indentation still majority us mix tab space use tab space space gap tab look graph percentage change using different type indent see share use space growing share growing expense share us mixture tab space indentation known percentage increasing possible due fact author use convenient text editor make easier safer install character use indenting article part page machine translated powered yandextranslate http translateyandexcom
57,Lobsters,perl,Perl,An Evening on Modern Programming Languages (2019-11-21),https://ossg.bcs.org/blog/event/modern-languages/,evening modern programming language,oshug note http introduction simon proctor perl simon proctor julia fresh approach numerical computing avik sengupta julia julia julia avik sengupta evolving language step go charles forsyth squeak newsqueak alef limbo go dr charles forsyth vita nuova,november pm pm bcs london copthall ave london evening held jointly oshug look latest open source programming language three talk three highly respected speaker note new bcs london office copthall ave teacoffee served talk talk last around minute including question shall livestreaming recording talk later posting youtube via gotowebinar please register http introduction simon proctor introduction newest version perl emphasis neat feature year professional web developer range language year fun simon proctor started understand occasion known take thing seriously julia fresh approach numerical computing avik sengupta talk avik demonstrate julia combine dynamic high level source high performance runtime code show make julia unique among programming language enables high quality numeric computing library survey machine learning deep learning ecosystem julia talk extended new kind modelling using differentiable programming talk begin introduction language finish showing open new paradigm computing julia fastest high performance open source computing language data analytics algorithmic trading machine learning artificial intelligence many field julia solves two language problem combining ease use python r speed c avik sengupta head product development software engineering julia computing contributor open source julia maintainer several julia package avik author julia high performance cofounder two artificial intelligence startup financial service sector creator large complex trading system world leading investment bank prior julia computing avik cofounder cto algocircle itellix director head algorithmic solution decimal point analytics avik earned m computational finance carnegie mellon mba finance indian institute management bangalore evolving language step go charles forsyth go latest sequence closely related concurrent programming language squeak newsqueak alef limbo go one strictly followed predecessor occupy similar space cspinspired concurrent language squeak vaguely similar syntax perhaps suggesting gradual refinement incremental evolution take closer look revealing significant difference especially type system runtime environment reflecting effect different design choice satisfy requirement larger surrounding system dr charles forsyth founder technical director vita nuova specialises system software distributed system interested compiler operating system networking protocol service security distributed system algorithm specialises design implementation system software lowlevel driver compiler whole operating system published paper operating system ada compilation worstcase execution analyser safetycritical application resource file development computational grid
58,Lobsters,perl,Perl,London Perl Workshop 2019 Videos,https://www.youtube.com/channel/UCn7t_JB2atzCs_K4V1EwPyg,london perl workshop video,,
59,Lobsters,perl,Perl,Larry Wall approves of renaming Perl 6 to Raku,https://github.com/perl6/problem-solving/pull/89#pullrequestreview-300789072,larry wall approves renaming perl raku,,please note initial version pr intended internal discussion augmentation turned real draft pr wider discussion voting
60,Lobsters,perl,Perl,93% of Paint Splatters are Valid Perl Programs,https://famicol.in/sigbovik/,paint splatter valid perl program,paint splatter valid perl program read paper view gallery pretty perl program google doc pdf entire sigbovik proceeding supplementary material paint splatter tarball paintsplatter image erratum,paint splatter valid perl program published april tldr read paper view gallery pretty perl program paper aim answer longstanding open problem programming language community possible smear paint wall without creating valid perl answer question affirmative possible smear paint wall without creating valid perl program employ empirical approach using optical character recognition ocr software find merely paint splatter parse valid perl analyze property paintsplatter perl program present seven example paint splatter valid perl program accepted publication sigbovik held april pittsburgh winner unwitting participation ribbon unwelcome brand affixed paper determined careful scrutiny included genuine artifact thereby furthering admirable cause open science fruitful procrastination read google doc download pdf grab entire sigbovik proceeding page supplementary material paint splatter single page along valid perl source code corresponding valid written red image parse valid perl program different ocr setting recognized multiple valid perl program chose one seemed interesting according aesthetic sense tarball paintsplatter image used main dataset paper source code available yet bad github erratum paint splatter perl program nt recognize interesting sigbovik submission deadline example splatter recognized ocr string lerzfijglpfijij evaluates number perl image recognized string also evaluates number perl another surprising program shown ocr recognizes image string c z fn evaluates string c perl finally image recognized string e evaluates string e perl
61,Lobsters,perl,Perl,To compute a constant of calculus (A treatise on multiple ways),http://blogs.perl.org/users/damian_conway/2019/09/to-compute-a-constant-of-calculusa-treatise-on-multiple-ways.html,compute constant calculus treatise multiple way,weekly challenge published scientific paper timed expensivefunc type system role thunk leave say value took enter second x introspection method parameterized submethod handle width char handle blockline blockwhy published refined reduction x n xchars palindromic fractional approximation discovered hyperoperator progressively add operator method converge converge selfreferential description published website identity euler formula operator,economics first task weekly challenge old one find would eventually become known number story start back jacob bernoulli investigation mathematics loan sharking example suppose offered oneyear loan interest payable annually obviously end year markclient pay back plus interest say sweet racket get thinking interest got charged every six month case six month already owe interest x amount immediately start charging interest well final six month owe original plus first six month interest plus second six month interest plus second six month interest first six month interest even sweeter racket course easier calculate owe mathematically added come charging half yearly interest every six month power come charging interest twice year stop charge interest monthly instead get back original plus interest ie first month plus interest second month ie plus interest third month ie et cetera word x nice charged interest daily get back ie x charged hourly get back ie x charged minute get back ie x bernoulli asked obvious question absolute could squeeze outa deese pidgeons much would get back charged interest continuously word multiplier initial charge accumulate interest every instant mathematically speaking limit x answer question transcendental numeric constant named leonhard euler instead jacob bernoulli euler first person use explicitly published scientific paper b really make everything much simpler name everything euler elapsed given limit x increasingly large value x could compute progressively accurate approximation constant x say x produce easy solution great one iteration still accurate five decimal place importantly slow solution slow whip integrated timing mechanism tell u evaluate block add timing info result sub prefix timed code block represent added timing info role timed store actual timing duration timing stringified append timing constant format method str sprintf format callsame timing method gist selfstr evaluate block mixing timing info result return block timed enter create new highprecedence prefix operator timed genuine operator even though symbol also proper identifier could easily named ascii unicode symbol wanted vaguely like clock face sub prefix â â code block exactly like stopwatch sub prefix â â code block even without fancy symbol still want operator rather subroutine precedence regular subroutine call low timed declared sub timed able place timed block surrounding argument list call timed would attempt gobble following argument discover allowed one say timed expensivefunc finished many positionals passed expected argument got sub timed line making timed prefix operator allows compiler know ever take single argument inline call like one work fine note feeling need little extra discipline today going make use type system strictly type every variable parameter use course static typing gradual code would still work exactly later removed every one type declaration except compiler would able protect u quite well stupidity timed operator take code object argument executes block augments result extra timing information return augmented result type timing information added result mixing returned object extra capability defined generic class component role named timed role confers ability store access duration duration timing well method enhancing timed object stringified printed method str method gist overridden str method call object original version method callsame actual work appends timing information neatly formatted sprintf overridden gist reuses str interesting feature add timing information result block timed calculate duration execution subtracting instant block executes current instant surrounding subroutine entered enter prefixing expression enter set yeah know incurable geek phaser block thunk executes surrounding block entered enter remembers value generated thunk evaluates surrounding code executes case try subtract value enter value use technique anywhere raku handy way time particular block code also use phasers leave executes control leaf surrounding block inline entire operation easily pasteable snippet example time iteration loop could add single line start loop block value value leave say value took enter second dosomethingexpensivewith value dosomethingelseprotractedwith value dothelastcostlythingwith value easily time block code simply prefixing block timed operator calculation loop x say timed x find going waiting exponentially long time better accuracy clearly need much better algorithm extremum great problem elementary mathematics heinrich show x lower bound x upper bound get much better approximation value n taking average two bounding value x say timed sum x produce ten correct decimal digit hit exponential wall better still nearly good enough evaluation look like going need try lot different technique wide range value would handy simpler way specifying series test like better way seeing well poorly perform going create framework let u test various technique simply like bernoulli limit ass x x bound ass x sum x prefer specify appropriate range trial value like bound ass x sum x either way ass function calculate result determine give slow computation tabulate outcome colourcode accuracy print neatly labelled like bernoulli limit x x x x x x x x x x x x x x x x x x bound x x x x x x x x x x x x x x x x x x implement start generic class component ie another role suitable storing vetting formatting whatever data collecting define new type code take exactly one parameter subset unary code signatureparams reportable value assessed target role reportable cool target track reportable object eventually display state reportable report end reportsâ display reportsâ widthmax add reportable object tracking list validate submethod tweak unary check true reportspush self check self report description value str desc handle width char cool value handle display report two column method display int width printf sn width desc assessvalue colourcode value display method assessvalue find leading character match target int correct value target match char split value accordingly valuegist good correct bad etc correct char blue incorrect char red use terminal ansicolor return colored good str blue colored bad str red etc start creating new subtype subset unary builtin code type ie general type block lambda subroutine etc new subtype requires code object must take exactly one argument signatureparams almost everything raku object easy language provide type detailed introspection method value variable type code next create pluggable component role reportable building class generate selforganizing report role parameterized take named value target subsequently used ass accuracy individual value reported target value specified type cool allows string number boolean duration hash list type automatically convertible string number type constraint ensure value reported later able assessed correctly target parameter optional default target empty string reportable role going automatically track reportable object u generate aggregrated report end program declare shared variable hold report state reportable report type specifier requires element array able perform reportable role ensure report eventually printed add end phaser end reportsâ display reportsâ widthmax end execution statement call display method report reportsâ display passing maximum width report description reportsâ widthmax format report two clean column accumulate report arrange reportable object automatically add shared report array constructed declaring tweak submethod submethod classspecific noninherited method suitable specifying perclass initializers tweak submethod called automatically object created usually adjust initial value test integrity way submethod add object report list reportspush self applying check code passed constructor check self allows user pas arbitrary test constructor call applied object object initialized see shortly useful report consists string description value cool type need perobject attribute store declare keyword secondary sigil make public str desc cool value also need able access string width description could declare method provide information method width descchars forwarding request reportable object desc object inside much easier way achieve effect simply tell desc attribute handle objectlevel call width calling char method like str desc handle width char significantly also need able forward method value attribute example interrogate timing information know kind object value may case apart generically cool know advance method may need forward simply tell value handle whatever surrounding object like cool value handle need implement display method end phaser use output reportable object method take width description formatted print justified width using printf also print value preprocessed using assessvalue method assessvalue work well value match target taking characterwise xor two value target every character digit stringified number match xor produce null character every character differs resulting xor character something else determine many initial character value match target counting many leading character xor produce match char split value string three substring using regex colouring leading match blue trailing mismatch red using terminal ansicolor module role available build couple reportable class suited actual data result produce need assessed accurate representation class result reportable target also want format report empty line various technique reporting need reportable class whose display method overridden print empty line class spacer reportable method display int say finally build ass subroutine constant timeout second evaluate block range input report sub ass unary block introspect block single parameter parameter param blocksignatureparams bool istopic paramname eq extract normalize range test value value given try paramdefault defined istopic empty defined infinite min default seq introspect test description doc comment str label blockline blockwhy trim new paragraph report spacernew run test value z label value label resultnew desc label paramname value value timed block value check last timing timeout value resultnew desc label value timed block empty subroutine take single argument code object take single parameter enforce giving parameter type unary immediately introspect one parameter blocksignatureparams naturally parameter object store suitably typed variable parameter param also need know whether parameter implicit topic variable aka test parameter need determine whether caller gave default value represent set value ass code block passed ass word user writes ass somefunctionof n need extract default value iterate value pas turn block extract default value calling appropriate introspection method paramdefault return another code object produce default value called hence get actual default value need call default call code default return paramdefault course parameter may default value case default return undefined value attempting second call undefined value would fatal make attempt inside try convert exception yet another undefined value test extracted default value determine mean defined istopic empty defined infinite min default seq undefined default specified either use empty list test value parameter implicit topic case parameterless oneoff trial else use endlessly doubling sequence using sequence instead give u reasonable coverage every numeric order magnitude without tedium trying every single possible value default range infinity infinite adjust similar sequence doubling value infinity starting lower bound min value anything else use asis converting sequence seq test value need description overall test could simply added second parameter ass powerful introspective capability raku offer interesting alternative need convey three piece information line number call ass made description trial assessed trial value trial however avoid uncomely redundancy first trial need labelled line number description subsequent trial need show next trial value get line number introspecting code block blockline get description well read directly comment raku comment start vertical bar ie comment special form documentation known declarator block specify comment content automatically attached first declaration following comment might variable declared subroutine declared sub multi case anonymous block code declared two brace word write bernoulli limit ass x x string bernoulli limit automatically attached block passed ass could also put documentation comment block using comment introducer instead ass x x bernoulli limit either way advanced introspective facility mean retrieve documentation program execution simply calling method comment supposed tell generate description asking block line number documentation making empty string documentation comment supplied blockline blockwhy ready run test generate report start inserting empty line report declaring spacer object iterate list value associated label interleaving two operator z label initial label built earlier empty string tell zip operator reuse preceding empty string many time necessary match remaining element value way get full label first line trial repeat thereafter zip produce series twoelement array one value one label iterate building appropriate result object test resultnew desc label paramname value value timed block value check last timing timeout description report label followed parameter name paramname current trial value passed iteration value value report timed result calling block current trial value passed timed block value also want stop testing test get slow pas result constructor check argument well cause tweak submethod execute check block result added report list arrange check block terminate surrounding loop ielast timing new object exceeds chosen timeout call timing invoked result object timing method delegate call value attribute specified handle method object deal thing left cover edgecase user provides test value ie value iterate happen either explicit empty list default value passed assert block passed explicitly declare parameter therefore default implicit topic parameter either case need call block exactly without argument array test value element valueselems instantiate single result object passing full label timed result calling block literally empty argument list value resultnew desc label value timed block empty done introspective compact way performing multiple trial block across range suitable value either explicit inferred automatic timing timeouts trial get back computing value eversion constant associated jacob bernoulli another entirely unrelated way posthumous publication ar conjectandi bernoulli explored mathematics binomial trial random experiment result strictly binary success failure true false yes head tail one result binomial theory probability extremely bad luck conduct random binomial trial probability success probability failure must mean repeat random trial k time probability failing every time k k grows larger probability increase zero gradually converging asymptotic value value exactly mean k must tend towards k tends try bernoulli trial ass k tell u bernoulli trial k k k k k k k k k k k k k k k k k sadly converges faster original loan sharking scheme exclamation despite disappointing performance bernoulli trial approach highlight useful idea constant appears great many mathematical equation could rearrange produce formula starting example abraham de moivre first published asymptotic approximation factorial function day later refined james stirling approximation named approximation n n approximation becoming accurate n becomes larger rearranging equation get going need nth root operator factorial operator missing standard raku trivially easy add nth root x sub infix int n int x numeric tighter x factorial x sub postfix int x int x new infix operator specified precedence higher existing exponentiation operator tighter simply raise value reciprocal value new postfix operator multiplies together number le equal single argument x using reduction multiplication two new operator available write de moivrestirling approximation ass n n unfortunately result le satisfactory de moivrestirling approximation n n n n n n n n n n n approach converges even slower previous one first time raku actually failed u come numerical calculation zero indicating compiler unable take root factorial deeper root higher number computed factorial ie without difficulty taking root huge number raising power failed incorrectly produced value whereupon n divided wrong result produced zero point failure seems around look suspiciously like internal floatingpoint representation limit course could work around limitation changing way compute nth root example nth root number also given could try nth root x sub infix int n int x numeric tighter x n get exactly problem builtin function break around meaning apply factorial number greater x integer surprisingly good approximation limitation simply count number digit x subtract worst case result mean average error sufficiently large range value zero using approximation nth root nth root x sub infix int n int x numeric tighter xchars n extend assessment de moivrestirling approximation far beyond case find de moivrestirling approximation n n n n n n n n n n n n n n n disgust convergence approach clearly accelerate higher value n fact even n million result still accurate three decimal place worse even classic palindromic fractional approximation palindromic fraction ass give u palindromic fraction ala search continues estimation switch back probability theory imagine series uniformly distributed random number range example start adding number many term series need add together total greater example need add first three value exceed random sequence need add two term eg occasionally need add quite eg large number trial however average number random value required sum exceed guessed source uniform random value range could get approximate value repeatedly adding sufficient random value exceed averaging number value required time multiple trial look like raku stochastic approximation ass trial sum trial map rand xx first k trial conduct specified number trial trial trial map generate infinite number uniform random value rand xx convert list progressive partial sum look first partial sum exceeds first find index list k add index start zero count start result list count many random value required exceed one trial average count sum divide number trial find stochastic approximation trial trial trial trial trial pretty good random guessing kept running greater number trial eventually gotten reasonable accuracy unreliable sometimes losing accuracy number trial increase slow three digit accuracy million trial second computation get useful number correct digit need billion possibly trillion trial would require ten thousand hour computation go efficiency rather back go back isaac newton mathematical genius isaac newton manuscript entitled de analysi per aequationes numero terminorum infinitas newton set general approach solving equation infinite series approach implies highly efficient way determining specifically k try newton series ass sum k â â compute taking increasingly longer subset length k infinite series term take index chosen term k â take factorial factorial â take reciprocal result list successive term finally add together sum get newton series k k k k k k k k k k k k k k k k k k k k k finally real progress summing term infinite series correct decimal place last reasonably accurate value even better decomposed many infinite summation example harlan brother discovered could ass brother series ass sum â k â â â â â k â making every arithmetic operator hyperoperator compute entire series k term single vector expression sum get code brother formula might little uglier original make converging twice fast giving u correct decimal place first ten term series brother series k k k k k k k k k k k epsilon making solid progress accurate computation two newtonian series ugly possibly scary hyperoperated assessment code still kinda irritating easy get wrong given efficient method work summing initial subset infinite series would better function u would certainly better function could work exactly much initial subset series actually need include order produce accurate answer rather requiring u manually comb result multiple trial discover often raku surprisingly easy build need sub unary block numeric map block produce converge call subroutine usual mathematical notation function okay yes specify take oneargument block return numeric value unary block numeric return value representing summation series specified block accomplish first build infinite list term index pass turn block map block build successive partial sum resulting term produce block k list created map would produce method call would progressively add producing list set calculation way need able work stop adding term successive element produce list converge consistent value word two successive value differ inconsequential amount conveniently raku operator tell u precisely isapproximatelyequalto operator ascii equivalent could write subroutine take list return first value like sub converge iterable list numeric listrotor first head tail tail rotor method extract sublists n element list tell extract two element time also make overlap stepping back one place extraction result list get list list every pair adjacent value simply step list list looking first sublist head tail element approximately equal first head tail give u back single sublist extract moreaccurate tail element tail apply function list partial sum produced map block produce converge conveniently lefttoright way passing entire list converge course could also written normal namearglist style subroutine call converge map block produce make u comfortable insanely cool thing reason work every component two methodcall chain within converge lazily evaluated mean map actually execute block value produce progressively add together rotor extract overlapping pair first search unless final result requires map invokes block many time necessary get enough value produce add get enough value rotor extract get enough value first find first approximately equal pair truly love raku allow write code concise expressive elegant concise expressive elegant code naturally efficient well meanwhile much better ie concise expressive elegant way generating highly accurate value newton series ass k k brother series ass k give u straightforward answer looking newton series brother series epigram would end story except still ignored half possibility every technique tried far mathematical nature raku algebraist statistician probability theorist also linguist author poet lover natural language could use natural language compute accurate value well turn algebraist statistician probability theorist century spent several hour day week manually calculating first eight digit never want come mnemonic sentence help remember hardwon digit mnemonic kind work encoding digit length successive word example remember constant might encode local aussie abacist publicly count letter word extract digit usual trivial implement raku sub mnemonic str text str textwordsâ trans punct â char return head tail join first extract word text textwords â remove punctuation character translating empty string trans punct finally count number remaining character word â char take first element list word length head add dot append concatenation rest character count tail join return string representation resulting number test mnemonic test ass mnemonic local aussie abacist publicly available print mnemonic test clearly poor approximation three century people making better one one widely used slightly selfdeprecating modern mnemonic ass mnemonic enables numskull remember sequence numeral give u nine correct decimal place modern mnemonic need accuracy compose longer sentence example titular mnemonic ass mnemonic compute constant calculus treatise multiple way produce one additional digit titular mnemonic better accuracy mathematical approach far could use zeev selfreferential description extended mnemonic ass mnemonic present mnemonic memorize constant exciting euler exclaimed first found yes loudly student perhaps compute e via power taylor series easy summation formula obvious clear elegant give u far accuracy ever actually need extended mnemonic eclectic even end story like main rival awesome mathematical constant exerts strange fascination mathematically whimsical example dario castellanos published following identity translated raku castellano coincidence ass â give u seven decimal place accuracy castellano coincidence u remember digit know aussie abacist use richard formula sabey digit ass fittingly give u nine correct digit total sabey digit curiosity nothing compared true highland exploration example maksymilian piskorowski found happen spare eight compute accurate little million decimal place could translate easily enough raku piskorowski eight ass ala assessment fails eventually producing disappointing piskorowski eight value vanishingly small adding raku merely produce still incalculable â billion decimal place accuracy seemed like il logical endpoint quest aforesaid richard sabey spoiled game everyone reformulating aforementioned pandigital formulation accurate staggering decimal place octillion digit tragically immediately underflows numeric representation attempting compute initial raku unable accurately represent meanwhile like explore exotica check erich mesmerizing math magic website exquisite still one higher mathematical summit u surmount quest pinnacle mathematical elegance peak arithmetical pulchritude single beautiful equation mathematics identity leonhard euler published masterwork introductio analysin infinitorum included first mention general euler formula co x sin x although explicitly mentioned treatise formula implies remarkable special case specialcase equality nowadays usually written thereby uniting five important constant mathematics quite apart extraordinarily lovely unification mathematical fundamental purpose significant point one five component rearrange formula isolate constant get easily ass raku euler identity ass unfortunately raku yet smart enough infer imaginary exponent need use complex version operator well yes course complex mathematics already built raku get back euler identity nan noncomplex exponentiation fails given complex exponent producing value nannani start suitably version ie like euler identity ass get correct complex arithmetic highly accurate answer euler identity effortless fitting come full circle finding number special case formula identity ouroboros effort end le back started highly appropriate started already answer built first form standard exp function return value could tried builtin exp function ass exp x would given u builtin exp function x even considerably effort actually need raku course constant also built right language builtin e constant ass e produce equally accurate result builtin e constant optimal solution original task five character long say e shall henceforth known damian
62,Lobsters,perl,Perl,Is Perl 6 Being Renamed?,http://blogs.perl.org/users/ovid/2019/08/is-perl-6-being-renamed.html,perl renamed,perl name perl confusing irritating damian conway made strong argument favor raku mongodb claim client nt developing new project perl confusing similarity neo matrix update,many seen perl github issue perl name perl confusing irritating issue suggested renaming perl may think name issue trolling offensive actual issue created elizabeth liz mattijsen one core perl developer longtime perl developer spouse wendy long enthusiastic support perl trolling lot deep thought careful discussion genuine desire find way bypass deeply divisive issue perl community proposed name camelia damian conway made strong argument favor raku appears community leaning towards name various reason post attempt summarize going missed error course damian kidding follows nt fact opinion someone feel x awesome nt matter disagree still opinion try change mind aware someone strongly disagrees usually want start discussion point agree slowly move point disagree however story perl people disagree immediately jump disagreement rather trying find common ground far far terse backstory perl community seems split view perl sister language perl view perl successor perl perl community meanwhile split f ck yeah f ck say issue bitterly divisive would understatement perl announced seen way perl perl perl perl seen replacement version time became clear though perl family perl straightforward migration path unlikely one need look problem python python upgrade obstacle minor syntactic difference understand upgrade perl perl nt trivial mistaken remember damian fault carl person first suggested perl considered sister language perl way c might sister language c though upgrade path latter probably easier nt satisfy people fact wereare still people perl community view perl successor language many people perl community say perl dead wait perl many perl developer offended effectively told perl developer language dead dying realworld financial consequence ca nt tell many time talked potential client told yeah perl codebase old want upgrade wait next version perl upgrade throwing money away waiting two decade many stopped waiting abandoned perl bbc world largest broadcaster perl everywhere decided ditch mongodb claim client nt developing new project perl ditching perl support company continuing trend potential client told tired waiting perl think perl successor perl given name make perfect sense combine negative press perl get nobody got fired buying ibm territory sperl otherlanguageg also ca nt remember said publicly suggested perl solution rejected hand perl liz summed succinctly follows perl initially conceived next version perl took way long mature initial release meanwhile people interested taking perl along took back reign continued developing perl two programming language sufficiently different source compatible differ many perceive version number hurting image perl perl world since word perl still perceived perl world seems fair perl change name since larry indicated video message participant perlcon riga two sister language old wise enough take care name change would longer require approval bdfl video refers video emoji response initial post clearly supportive unsupportive neutral worse perl often tainted name perl routinely see numerous online discussion people refuse even consider perl hate perl younger people think perl grandfather language much way people generation view cobol people perl community want change name simply avoid unjustified negative perception language fact suggested rename perl might allow people come language sidestepping issue yeah bitterness perl community need heal need find way forward language suggestion change name perl raku effectively designed make happen perl figure get beyond branding issue plaguing perl thing perl performance gotten point often comparable perl surpasses still need work area work clear goal straightforward perl going easily oustrip perl term performance perl community want rename perhaps perfect time nt look like bad choice performance primary concern brings important point bubble reading probably part perl commmunity said nt news outside community people sign contract people decide next project built people decide going rebuild legacy perl system perl language nt justify boss short many people debate come whether financial future working language love nt get make decision people control purse string trademark law often deal concept confusing similarity market easily get confused two name similar competent salesperson tell customer confused nt buy confusing issue appears much perl community agrees need sorted much perl community appears feel way none intended critique gone past frankly nt think anyone expected confusion would drag two decade various shift made time successor sister language creating alias language led point would definitely program perl could make living right possible still developing perl think perl corrects many core issue perl powerful oo gradual typing working concurrency robust signature cleaner syntax etc also love quirk perl sue let end quote neo matrix know feel know afraid afraid u afraid change nt know future nt come tell going end came tell going begin going hang phone going show people nt want see going show world without world without rule control without border boundary world anything possible go choice leave update quote matrix intended solely vaguely humorous vaguely relevant serious however old daughter quick remind joke nt funny papa daughter please take joke lay twitched though suspect would nt phrase thing quite way
63,Lobsters,perl,Perl,From SQL to Nested Data Structures,https://dev.yorhel.nl/doc/sqlobject,sql nested data structure,sql nested data structure dbix simple orms constructing sql query perl sql interp sql interpolate structured document nesting variation complex example final note vndborg ecto little script,sql nested data structure published typical problem find every application talk sql database want fetch listing kind database entry entry may contain nested structured data demonstrate mean let start simple example game database table row toplevel game entry table release said game onetomany relation game release create table game gameid integer primary key title text create table release releaseid integer primary key gameid integer reference game releasedate date suppose want display listing game release date would nice database could give u single json document following structure gameid title tsukihime release releaseid releasedate releaseid releasedate relational database designed deal row column getting json structure single query going happen database support structured column type dynamically constructing unwieldy andor slow common simple approach fetch nested data first fetch list game database iterate resulting row fetch relevant release entry iteration using perl dbix simple article idea translate dynamic programming language example iteration game db query select gameid title game hash game game game release db query select releaseid releasedate release gameid game gameid hash game requested structure approach work super convenient really slow fetching many row course new problem almost every programming language several library framework available help fetching complex data structure sql database ranging helper function complete orms propose groundbreaking new technique going pitch particular library instead describe simple yet generic api deal problem constructing sql query perl get solution let first briefly cover one dynamically construct compose sql query abstraction useful general concept also simplify rest article sql query treated string programming language one dynamically construct compose query simple string concatenation several problem actually constructing query way purpose almost suffices almost biggest problem term composability need concatenate string get final query also need keep track bind parameter get annoying real quick query dynamic simple example using string interpolation abstract common functionality separate function without losing much flexibility abstraction fetch game entry sub fetchgames gameids shift db query select game gameid gameids could transformation sorting pagination fetching extra information etc use function fetch game already released id select gameid release releasedate currentdate releasedgames fetchgames id wanted replace currentdate userprovided value without fear arbitrary sql injection involves using bind parameter fetchgames function nt support fortunately solution rather many solution let stick one familiar sql interp module provides among thing wonderful function called sql take list sql string variable reference converted bind parameter return single value interpolated elsewhere let use transform example use sql inerp sql sub fetchgames gameids shift note use iquery instead query dbix simple wrapper around sqlinterp db iquery select game gameid gameids latestdate user input sql bind parameter single variable id sql select gameid release releasedate latestdate passed fetchgames gameswithreleasebeforelatestdate fetchgames id give u safe variable interpolation sql query compose query normal string lot powerful query construction trick sql interp cover documentation several example hint even fun trick sql interpolate doc different older module example easily ported structured document way go back fetching nested structure relational database let build upon iteration example given earlier improve performance instead running separate query fetch release game let fetch release relevant game single query select necessary row clause merge returned data back game structure follows game db query select gameid title game hash list gameids use clause gameids map gameid game fetch release linked gameids release db iquery select gameid releaseid releasedate release gameid gameids hash create gameid release lookup table quick access release release release add release release remove gameid column needed merging step push release delete release gameid release merge release information back game game game game release release game gameid game requested structure work beautifully fast also verbose something like type every time want query database okay admit verbose necessary wanted code readable people nt expert perl done le code number step wo nt change much rather playing code golf let every sensible programmer notice repetition let abstract repeated bit separate function let first define input function need game list object want extend release name field adding game object gameid column used querying merging function given list game id return query fetching release information function would return modified list object new information embedded inside since passing object function reference since easier modify data inplace perl functional language may easier avoid mutating given object return list fresh new object instead function look like exactly code listed figure get away shorter slightly le readable version time sub enrich fieldname mergefield sql object id map mergefield object return key id result db iquery sql key id hash push id delete mergefield result fieldname id mergefield object rewrite previous example using function game db query select gameid title game hash enrich release gameid sub sql select gameid releaseid releasedate release gameid game game requested structure short fast readable least get used enrich function admit may intuitive first time see nesting let expand example database new table release may available one platform create table releasesplatforms releaseid integer reference release platform text also want list platform included nested data structure look like gameid title tsukihime release releaseid releasedate platform platform linux platform window fortunately enrich function easily handle nested object pas list release object enrich instead game object simple map enrich platform releaseid sub sql select releaseid platform releasesplatforms releaseid map release game data structure described possible nest arbitrarily deep approach work enrich modifies data structure inplace version copy given data structure would slightly complex surmountable problem variation array platform object previous example verbose like would nicer could flatten array platform string release object look like releaseid releasedate platform linux window course variation enrich could written quite easily sub enrichflatten original enrich fieldname mergefield sql object id map mergefield object return key id result db iquery sql key id hash actual merge strategy modify slightly push id delete mergefield value result fieldname id mergefield object usage exactly enrichflatten platform releaseid sub sql select releaseid platform releasesplatforms releaseid map release game merge strategy could implemented way example one could imagine scenario instead onetomany relation previous example onetoone mapping list object query result alternative merge strategy case could copy column new query already existing object could achieve exact effect original sql query adding plain old join dynamic applicationlevel join could still us abstracting common functionality structuring larger code base version enrich limitation mergefield used identify field original object column query result fine example database deliberately used full gameid releaseid column name rather calling id doubt come time limitation start get annoying want support different column name object result query easy support case complex example enrich function cute example given far implemented easily average orm yet important difference apart one le dependency enrich provides easier adhoc flexibility meaning use full power sql enrichment query let add join filter example let say want following structure gameid title tsukihime platform window linux release releaseid releasedate platformcount want pergame platform array rather perrelease instead platform list release want single platformcount let say want list release ordered release date also want able filter release date full example achieve game db query select gameid title game hash pergame platform list enrichflatten platform gameid sub sql select distinct gameid platform release join releasesplatforms using releaseid gameid game latestdate user input release list enrich release gameid sub sql select gameid releaseid releasedate select count releasesplatforms rp rpreleaseid rreleaseid platformcount release r gameid releasedate latestdate order releasedate game elegant piece code ever written trick alternative nt likely much better final note using approach slightly different api experimental rewrite vndborg happy result main advantage enrich family function easily efficiently run complex query merge result construct complex json document adhoc without boilerplate need define declare even name data structure front sometimes make harder follow code may visualize monstrously complex data structure mind approach incredibly helpful quick prototyping good documentation andor good debugging strategy make lack boilerplate exact api enrich function something fully decided yet put much thought order argument need variation different scenario could reduced adding merge strategy separate argument point named argument may necessary keep thing readable etc exact api nt matter much idea matter mentioned introduction using perl example convinced idea easily ported dynamic language fact experiment porting idea elixir every bit convenient way ecto builtin orm functionality nt quite possible abstraction already available language library missed also possible fact terrible idea long run way find give try note feel like playing around example article wrote little script test example actually work also make good base quick experimentation
64,Lobsters,perl,Perl,With friends like these,http://blogs.perl.org/users/damian_conway/2019/08/with-friends-like-these.html,friend like,corralling dittoed letter weekly challenge amicable number friend friend enemy zero ø partial formula improved upon missing builtin syntactic honey proper nontrivial operator explicit prebinding infix assuming n n sub n divisorsofn getting root problem vector operator thinking big plenty alternative technique algorithm perl conference keynote code operation simple possible simpler combinatorial explosion integerweighted set list comprehension best world constant small constant big big small meanwhile parallel universe concurrency hyper extra parameter method hyper infinity beyond,corralling dittoed letter going focus week first task weekly challenge say task break string specified commandline run identical character toolless oo e s subbookkeeper u bb oo kk ee p e r committee c mm tt ee utterly trivial raku use sub main str say strcomb almost easy perl use str argv die usage n str n say str gx case regex simply match character rematch exactly character zeroormore time match operation strcomb str produce list matched string output say say much say either case instead turned attention second task locate print first pair amicable number friend friend enemy amicable number pair integer set proper divisor ie every smaller number evenly divisible happen add number example number divisible sum meanwhile number divisible sum guessed pair number uncommon five among first thousand integer thirteen thousand fortyone million go scarcer become pair le trillion asymptotically average density amongst positive integer converges zero known universal formula finding amicable number though century islamic scholar ø discover partial formula euler course subsequently improved upon year later rare unpredictable especially hard find number theory function giving sum proper divisor n known divisor denoted n sub n sum divisor n proper trailing proper applied call divisor n telling function return proper divisor ie exclude n list yeah unicode italic using function name restricted divisor function defined could simply iterate integer infinity finding checking see sumofdivisors number ie identical original number need find first pair amicable number number friend number say number friend exit number friend friend number output stop one result harder find amicable number number friend number say number friend number friend friend number note amicable relationship number definition symmetrical changed number friend test number friend prevent loop printing pair twice et cetera cetera et missing builtin would end story except one small problem somewhat surprisingly raku divisor builtin need implement function going build one fact going build quite divisor whole number integer divided leaving remainder includes number integer number divisor except number divisor except say divisor say divisor proper say divisor nontrivial second third alternative funky adverbial modifier really syntactic honey normal call divisor additional named argument say divisor say divisor proper say divisor nontrivial raku easiest implement kind function using multiple dispatch special case unique required named argument multi divisor n proper divisor n grep n multi divisor n nontrivial divisor n grep n within body special case divisor call regular variant function ie divisor n grep unwanted endpoint operator generates range excludes upper limit operator generates range excludes bound yes also variant exclude lower bound proper option specified filter full list returned divisor n omit number grep n likewise exclude extremal value nontrivial option included grep n original unfiltered list divisor get first place way generate full list divisor number n known simply walk number n keeping divide n remainder easy test raku isdivisibleby operator multi divisor n track divisor found far divisor every potential divisor n skip actual divisor next unless n otherwise add list divisorspush deliver result return divisor except cave dweller nt need rub stick together like number theory counting toe get result far elegantly multi divisor n n grep n simply filter list potential divisor n keeping evenly divide n grep n n test shorthand creating code object take one argument represented return n argument word creates oneargument function prebinding first operand infix operator n little syntactically mellifluous could also written explicit prebinding operator n grep infix assuming n lambda n grep n anonymous subroutine n grep sub n named subroutine sub divisorsofn n n grep divisorsofn raku aim let u express whichever notation find convenient comfortable comprehensible getting root problem hard imagine simpler solution problem finding divisor multi divisor n n grep n also hard imagine le efficient one example order find eight divisor number check potential divisor wasted effort even number like thirtysix still throwing away n sequence bigger number smaller relative number divisor longer take find must better way course simplest improvement make first published back fibonacci magnum opus liber abbaci start observing divisor number always come complementary pair pair multiply together produce number example divisor divisor divisor notice case top row divisor always contains integer greater squareroot original number bottom row consists entirely n divided corresponding toprow divisor could find half divisor searching range sqrt n step find half subtracting element list n also step raku look like multi divisor n smalldivisors sqrt n grep n bigdivisors n â divâ smalldivisors return unique flat smalldivisors bigdivisors div operator integer division putting double angle around make vector operator divide n element list smalldivisors flat needed two list object smalldivisors bigdivisors automatically single list raku unique needed n perfect square would otherwise get two copy squareroot example among divisorpairs thinking big great able improve n algorithm easily even get u far performance divisor function divisor entirely acceptable second start fall rapidly point want function usable large number need better algorithm happily world cryptography obsessed factoring number provides plenty alternative technique ranging merely complex positively eldritch one easier approach understand code algorithm explained briefly part perl conference keynote year ago stephen schulze subsequently made available primefactors function raku module named prime factor plan explain algorithm even discus excellent implementation though definitely worth exploring code especially sublime shortcut us n gcd instantly detect number prime factor le suffice say module find prime factor large number quickly example whereas previous implementation divisor would take around five second find divisor trillion primefactors function find prime factor number le second problem prime factor number divisor divisor trillion number evenly divisible namely integer contrast prime factor number unique set usually repeated prime multiplied together reconstitute original number number trillion unique set prime find amicable pair need divisor prime factor fortunately hard extract one multiplying complete list prime factor produce original number select various subset prime factor instead get actual divisor select power set prime factor ie every possible subset get every possible divisor need take complete list prime factor produced primefactors generate every possible combination element list multiply element combination together keep unique result raku use prime factor multi divisor n primefactors n combinationsâ reduce unique combination method produce list list inner list one possible combination unique subset original list prime factor something like â reduce method call vector form operation insert specified operator every element list list called case inserting infix multiplication via infix operator abbreviate get something like cull duplicate result final call unique simple possible simpler test shiny new primefactor based algorithm weep discover catastrophically slower original trial division approach problem use combination method leading combinatorial explosion case found complete set divisor taking possible subset prime factor also mean took subset like fact took distinct subset mention subset subset total prime factor trillion produce power set distinct subset whittle distinct divisor word combination build return list subset â reduce process unique immediately throw away clearly need much better way combining factor divisor happily one rewrite multiplication much compact observe get unique subset simply varying exponent two prime zero maximum allowed value case general number prime factor pmj pnk complete set divisor given pm j pn k mean find like multi divisor n find count prime factor n factor bag primefactors n shortcut n prime return n factorstotal extract list unique prime factor plpmpn factorskeys xx build unique combination exponent x value factor divisor return list plpmpn â â get list prime factor previous version primefactors n put straight bag data structure bag primefactors n integerweighted set special kind hash key original element list value count many time distinct value appears ie list example prime factor put list bag get equivalent converting list prime factor bag give u easy efficient way determining unique prime involved power prime must raised however one prime key resulting bag corresponding count original number must prime raised power case know divisor original number immediately return return n factorstotal total method simply sum integer weight bag total one element weight otherwise one key bag factorskeys list prime factor original number pl pm pn extract store appropriate unicodenamed variable plpmpn note need multiple identical copy primefactor list one every possible combination exponent know yet many combination ensure enough simply make list infinitely long factorskeys xx example would produce list factor list like get list exponent set need every combination possible exponent j k zero maximum count prime example need express concisely need crossproduct ie x operator valid range exponent x x x x maximal exponent value bag prime factor factorsvalues get list required exponent range converting value count range value factor note raku loop within parenthesis produce list final value iteration loop think construct list comprehension python range value value factorsvalues le prosy haskell value value elems factor le line noise take resulting list range compute nary crossproduct reducing list x operator x value factor store resulting list j k exponent list suitably named variable yes superscript letter perfectly valid unicode alphabetics certainly use identifier point almost hard work done list prime factor plpmpn list unique combination exponent produce distinct divisor need raise set number first list various set exponent second list using vector exponentiation operator plpmpn â â multiply list value produced exponentiation list another list comprehension produce list divisor five line instead one multi divisor n factor bag primefactors n return n factorstotal plpmpn factorskeys xx x value factor return list plpmpn â â combinatorial explosive lurking inside instead building subset factor directly build n subset respective exponent test shinier newer divisor implementation weep tear relief find scale ridiculously better previous one also vastly better original trial division solution mission accomplished best world except zoom start graph see new performance eventually better due relatively high computational overhead algorithm heart need build exponentiate multiply together power set prime factor performance version divisor marginally worse simple trial division least number le ideally could somehow employ algorithm use trial division number prime factoring everything bigger trivially easy raku muddling together kind frankenstein function multi divisor n n smalldivisors sqrt n grep n bigdivisors n â divâ smalldivisors return unique flat smalldivisors bigdivisors else factor bag primefactors n return n factorstotal plpmpn factorskeys xx x value factor return list plpmpn â â instead implement approach independently separate multis previously modify signature tell compiler range n value applied constant small constant big multi divisor n big factor bag primefactors n return n factorstotal plpmpn factorskeys xx x value factor return list plpmpn â â multi divisor n small smalldivisors sqrt n grep n bigdivisors n â divâ smalldivisors return unique flat smalldivisors bigdivisors actual improvement particular case slight perhaps slight worth bother maintaining two variant function principle demonstrated important raku multiple dispatch mechanism make easy inject specialcase optimization existing function without making original source code complex slower le maintainable meanwhile parallel universe efficient way find proper divisor number start locating amicable pair using code shown earlier number friend number say number friend number friend friend number find first pair printed quickly thing start slow noticeably might start looking yet another way accelerate search might example notice iteration loop entirely independent outside information required test particular amicable pair persistent state need passed iteration iteration would quickly realize mean perfect opportunity introduce little concurrency many language converting simple linear loop kind concurrent search would require shambling mound extra code schedule create orchestrate manage coordinate synchronize terminate collection thread thread object raku though mean need add single fiveletter modifier existing loop hyper number friend number say number friend number friend friend number hyper prefix tell compiler particular loop need iterate sequentially iteration executed whatever degree concurrency compiler deems appropriate default four parallel thread though extra parameter allow tune degree concurrency match capacity hardware hyper prefix really shorthand adding call hyper method list iterated method convert iterator object one iterate concurrently could also write concurrent loop like hyper number friend number say number friend number friend friend number note whichever way write parallel loop multiple iteration happening parallel result longer guaranteed printed strictly increasing order practice however low density amicable pair amongst integer make extremely likely anyway convert previous loop hyper performance loop double example regular loop find every amicable pair million little hour hyper loop minute infinity beyond finally constructed optimized component finder lost amity begin search earnest first amicable pair first amicable pair one thousand one million one billion one trillion et cetera convert sub order n ncharspredtrans every power min concurrently find first amicable pair range min hyper number friend number next number friend friend number report go next power say first amicable pair order min number friend last reveals first amicable pair first amicable pair first amicable pair first amicable pair first amicable pair et cetera well reveals eventually damian
65,Lobsters,perl,Perl,HN&&LO - a webpage with submissions common to Hacker News and Lobste.rs,http://gerikson.com/hnlo/,hn lo webpage submission common hacker news lobster,hn lo proggit lobster hacker news rprogramming c r project changelog monthly archive lobster nt name class pattern mostly geoffwozniak hacker news nt name class pattern mostly todsacerdoti hacker news excuse lazy load image lobster native image lazyloading web lobster friendlysock hacker news todsacerdoti lobster great rubykon benchmark cruby v jruby v truffleruby pragtob hacker news great rubykon benchmark cruby v jruby v truffleruby fniephaus hacker news motoko programming language building directly internet rprogramming motoko programming language building directly internet stack overflow blog lobster motoko programming language building directly internet knl hacker news icfp live registration required mseri lobster icfp session mseri lobster helped fix covid alert app scoates hacker news helped fix covid alert app todsacerdoti hacker news visualizing progress refactoring hexagonal architecture jqassistant torstenmandry lobster visualizing progress refactoring hexagonal architecture using jqassistant tma hacker news hood simple dns server scriptnull lobster hood simple dns server friendlysock lobster optical mouse early biomimetic embedded vision calvin hacker news optical mouse early biomimetic embedded vision pdf todsacerdoti rprogramming recognize device linux usb id repository initcommit lobster recognize device linux usb id repository initialcommit knowledge mapping lobster knowledge mapping zorbash hacker news knowledge mapping todsacerdoti lobster stand free allocator inclusive stl crazyloglad hacker news stand free noexcept allocator inclusive c stl lobster solaris zone illumos tribblix vermaden hacker news solaris zone illumos tribblix todsacerdoti lobster tale webpage speed throwing away react piranha hacker news tale webpage speed throwing away react todsacerdoti rprogramming tale webpage speed throwing away react hacker news btrfs coming fedora caution lobster btrfs coming fedora christiano hacker news pneumaticat lobster pushcx rprogramming iamkeyur lobster good commit message lazau hacker news good commit message thedripper rprogramming good commit message speckz lobster javascript generator meet xpath jswrenn hacker news javascript generator meet xpath todsacerdoti hacker news javascript generator meet xpath hacker news build fpga hinzundcode lobster build fpga craftyguy hacker news log time series otoolep rprogramming log time series lobster log time series calvin lobster mantis reactive programmable switch calvin hacker news mantis reactive programmable switch pdf todsacerdoti lobster tale tail hardware o applicationlevel source tail latency redblackbit hacker news tale tail hardware o applicationlevel source tail latency pdf todsacerdoti lobster local incremental backup google photo ubuntu gphotossync raymii hacker news local incremental backup google photo ubuntu gphotossync todsacerdoti hacker news never run downloads folder ingve rprogramming never run downloads folder wizzerking lobster never run downloads folder calvin rprogramming never run downloads folder coldestsummer hacker news make android selfhosting lobster make android selfhosting hacker news going full static zola figbert lobster going full static zola figbert hacker news cost mobile data country feb vanillaalmond lobster worldwide mobile data pricing cost mobile data country vermaden lobster clean start web stchris hacker news clean start web simantel rprogramming clean start web macwrightcom earthboundkid hacker news clean start web scraplab hacker news clean start web tannhaeuser lobster reverseengineering arithmeticlogic unit die photo calvin hacker news reverseengineering arithmeticlogic unit die photo abbeyj hacker news cryptography dispatch registry considered harmful philip lobster cryptography dispatch registry considered harmful siosm hacker news cryptography dispatch registry considered harmful wyclif rprogramming cryptography dispatch registry considered harmful pimterry rprogramming blockchain amazing solution almost nothing jessefrederik hacker news blockchain solution almost nothing shuckschu lobster blockchain amazing solution almost nothing yonkeltron hacker news blockchain solution almost nothing prostoalex lobster coding adventure atmosphere awn hacker news coding adventure atmosphere tosh hacker news coding adventure atmosphere withinboredom hacker news audio scratch go waveform synthesis insanity hacker news audio scratch go waveform synthesis insanity rprogramming audio scratch go waveform synthesis mooreds lobster audio scratch go waveform synthesis calvin rprogramming git get name initcommit lobster git get name initialcommit hacker news git get name initialcommit lobster rolling crypto gone wrong look net branca implementation brycx hacker news rolling crypto gone wrong look net branca implementation todsacerdoti rprogramming rolling crypto gone wrong look net branca implementation xwyvii lobster introducing versioned christiano hacker news versioned todsacerdoti hacker news simple constraint programming implementation lobster simple constraint programming implementation rprogramming macro stackoverflooooooow lobster macro pxlet hacker news macro todsacerdoti lobster building modern backend typescript postgresql prisma rest api validation testing tuhaj hacker news building modern back end typescript postgresql prisma rest api piotrzientara lobster anatomy malicious package calvin hacker news anatomy malicious package todsacerdoti hacker news anatomy malicious npm package oedmarap lobster debian janitor lintian tag automatically fixed jelmer hacker news debian janitor lintian issue automatically fixed zdw hacker news debian janitor lintian issue automatically fixed jelmer hacker news thing string lobster thing string frantic rprogramming thing string frantic hacker news thing string hacker news panfrost performance counter perfetto mfilion lobster panfrost performance counter perfetto mfilion hacker news panfrost hardware counter google perfetto mfilion lobster defmt highly efficient rust logging framework embedded device skade hacker news defmt highly efficient rust logging framework embedded device todsacerdoti hacker news defmt highly efficient rust logging framework embedded device hacker news deal message passing anyway azhenley rprogramming deal message passing anyway alexeyr lobster deal message passing anyway hwayne hacker news deal message passing anyway hacker news nat traversal work psanford lobster nat traversal work danderson hacker news nat traversal work rprogramming nat traversal work alexeyr rprogramming guids globally unique substring guids nt alexeyr lobster guids globally unique substring guids nt drgomesp hacker news guids globally unique substring guids hacker news guids globally unique substring guids nt whack hacker news filesystem ingve lobster filesystem calvin hacker news filesystem pagetablecom atesti hacker news paving way high bitrate video streaming gstreamer rtp element mfilion lobster paving way high bitrate video streaming gstreamer rtp element mfilion hacker news paving way high bitrate video streaming gstreamer rtp element mfilion hacker news high bitrate video streaming gstreamer rtp mfilion lobster securing react native oauth mooreds hacker news securing react native oauth mooreds rprogramming securing react native oauth mooreds hacker news securely implement oauth react native application mooreds hacker news react native authorization code grant mooreds hacker news go use pointer instead copy struct deanstag lobster go use pointer instead copy struct pxlet hacker news fairness machine learning textbook draft natcombs lobster fairness machine learning mooreds hacker news fairness machine learning limitation opportunity yarapavan lobster login regression user nonascii name rtxb hacker news login regression user nonascii name todsacerdoti rprogramming login regression user nonascii name mooreds hacker news good riddance internet explorer gaellelo lobster good riddance internet explorer cnst hacker news good riddance internet explorer cnst hacker news golden age computer user group hacker news golden age computer user group rbanffy lobster golden age computer user group calvin hacker news golden age computer user group rbanffy hacker news golden age computer user group yarapavan hacker news golden age computer user group oedmarap hacker news implementing traceroute go inetenbr hacker news implementing traceroute go blog rbanffy lobster implementing traceroute go pxlet hacker news backblaze hard drive stats caution lobster backblaze hard drive stats vermaden hacker news interface hdk lobster interface danburzo hacker news angular security best practice blog cheatsheet pdf download lirantal hacker news angular security best practice mooreds lobster angular security best practice mooreds hacker news small web tbassetto lobster small web chobeat hacker news small web wyclif hacker news small web lobster dnjs subset javascript isomorphic html templating configuration leontrolski hacker news dnjs subset javascript isomorphic html templating configuration todsacerdoti hacker news dnjs pure subset javascript want replace configuration language tudorizer lobster dynamic multilevel bayesian model predict u presidential election jperras hacker news dynamic multilevel bayesian model predict u presidential election nromiun hacker news code economist election model personofcolor lobster make pythonstyle class much javascript leontrolski hacker news make pythonstyle class much javascript leontrolski hacker news ciphey automated decryption tool nmstoker hacker news ciphey automated decryption tool using ai nlp lobster automated decryption tool using ai nlp similar cyberchef magic skerritt hacker news ciphey fully automated decryption tool using common sense nlp ai dragonsh lobster ventoy multiiso bootable usbs pistos hacker news ventoy new bootable usb solution mmphosis hacker news turn shell command http apis rprogramming turn shell command http apis mooreds lobster turn shell command apis mooreds hacker news script http kapow jerodsanto hacker news kapow script http sharjeelsayed hacker news radicle link peertopeer code collaboration protocol built git cloudhead lobster radicle link peertopeer code collaboration protocol built git hacker news radicle mzehrer hacker news radiclelink git network discovery lftherios lobster deep dive openbsd malloc internals hacker news tale openbsd secure memory allocator internals malloc zdw rprogramming deep dive openbsd malloc internals oherrala lobster powertoys window system utility maximize productivity steinuil hacker news microsoft powertoys window tomrod hacker news web browser privacy browser say phone home pdf hacker news web browser privacy browser say phone home pdf notrobot hacker news web browser privacy browser saywhen phone home pdf lobster web browser privacy browser say phone home cnst hacker news video language making movie brudgers lobster video language language multimedia creation zem lobster mkws made website adriangrigore rprogramming mkws made web site adriangrigore hacker news mkws made web site adriangrigore hacker news mkws make website mpweiher lobster mkws added linux version updated website adriangrigore hacker news mkws generate static website minimum line code zeveb hacker news mkws posix compliant sh fast extensible simple static site generator adriangrigore hacker news mkws fast simple static site generator based sh hacker news architecture decision record adr dyslexicatheist hacker news architecture decision record randomkris hacker news architecture decision record adr template pavanyara lobster architecture decision record adr example mooreds hacker news architecture decision record adr example software planning leadership msolujic hacker news ray tracing one weekend azhenley hacker news ray tracing one weekend tleb lobster ray tracing one weekend nalzok,hn lo proggit link shared lobster hacker news rprogramming last day entry contains link submission site submission score number comment ratio comment score sum score comment greater page generated usually update hourly project changelog monthly archive first seen lobster nt name class pattern mostly aug submitted geoffwozniak appeared hacker news later nt name class pattern mostly submitted todsacerdoti first seen hacker news excuse lazy load image aug submitted appeared lobster later native image lazyloading web submitted tildehome game first seen lobster aug submitted friendlysock appeared hacker news later submitted todsacerdoti first seen lobster great rubykon benchmark cruby v jruby v truffleruby aug submitted pragtob appeared hacker news later great rubykon benchmark cruby v jruby v truffleruby submitted fniephaus first seen hacker news motoko programming language building directly internet aug submitted appeared rprogramming later motoko programming language building directly internet stack overflow blog submitted appeared lobster later motoko programming language building directly internet submitted knl first seen hacker news icfp live registration required aug submitted mseri appeared lobster later icfp session submitted mseri first seen lobster helped fix covid alert app aug submitted scoates appeared hacker news later helped fix covid alert app submitted todsacerdoti first seen hacker news visualizing progress refactoring hexagonal architecture jqassistant aug submitted torstenmandry appeared lobster later visualizing progress refactoring hexagonal architecture using jqassistant submitted tma first seen hacker news hood simple dns server aug submitted scriptnull appeared lobster later hood simple dns server submitted friendlysock first seen lobster optical mouse early biomimetic embedded vision aug submitted calvin appeared hacker news later optical mouse early biomimetic embedded vision pdf submitted todsacerdoti first seen rprogramming recognize device linux usb id repository aug submitted initcommit appeared lobster le minute later recognize device linux usb id repository submitted initialcommit knowledge mapping zorbashcom education javascript visualization first seen lobster knowledge mapping aug submitted zorbash appeared hacker news later knowledge mapping submitted todsacerdoti first seen lobster stand free allocator inclusive stl aug submitted crazyloglad appeared hacker news later stand free noexcept allocator inclusive c stl submitted first seen lobster solaris zone illumos tribblix aug submitted vermaden appeared hacker news later solaris zone illumos tribblix submitted todsacerdoti first seen lobster tale webpage speed throwing away react aug submitted piranha appeared hacker news later tale webpage speed throwing away react submitted todsacerdoti appeared rprogramming later tale webpage speed throwing away react submitted first seen hacker news btrfs coming fedora aug submitted caution appeared lobster later btrfs coming fedora submitted christiano first seen hacker news aug submitted pneumaticat appeared lobster later submitted pushcx appeared rprogramming later submitted iamkeyur first seen lobster good commit message aug submitted lazau appeared hacker news later good commit message submitted thedripper appeared rprogramming later good commit message submitted speckz first seen lobster javascript generator meet xpath aug submitted jswrenn appeared hacker news later javascript generator meet xpath submitted todsacerdoti appeared hacker news later javascript generator meet xpath submitted first seen hacker news build fpga aug submitted hinzundcode appeared lobster later build fpga submitted craftyguy first seen hacker news log time series aug submitted otoolep appeared rprogramming later log time series submitted appeared lobster later log time series submitted calvin first seen lobster mantis reactive programmable switch aug submitted calvin appeared hacker news later mantis reactive programmable switch pdf submitted todsacerdoti first seen lobster tale tail hardware o applicationlevel source tail latency aug submitted redblackbit appeared hacker news later tale tail hardware o applicationlevel source tail latency pdf submitted todsacerdoti first seen lobster local incremental backup google photo ubuntu gphotossync aug submitted raymii appeared hacker news later local incremental backup google photo ubuntu gphotossync submitted todsacerdoti first seen hacker news never run downloads folder aug submitted ingve appeared rprogramming later never run downloads folder submitted wizzerking appeared lobster later never run downloads folder submitted calvin appeared rprogramming later never run downloads folder submitted coldestsummer first seen hacker news make android selfhosting aug submitted appeared lobster later make android selfhosting submitted first seen hacker news going full static zola aug submitted figbert appeared lobster later going full static zola submitted figbert first seen hacker news cost mobile data country feb aug submitted vanillaalmond appeared lobster day later worldwide mobile data pricing cost mobile data country submitted vermaden first seen lobster clean start web aug submitted stchris appeared hacker news later clean start web submitted simantel appeared rprogramming later clean start web macwrightcom submitted earthboundkid appeared hacker news later clean start web submitted scraplab appeared hacker news later clean start web submitted tannhaeuser first seen lobster reverseengineering arithmeticlogic unit die photo aug submitted calvin appeared hacker news later reverseengineering arithmeticlogic unit die photo submitted abbeyj first seen hacker news cryptography dispatch registry considered harmful aug submitted philip appeared lobster later cryptography dispatch registry considered harmful submitted siosm appeared hacker news later cryptography dispatch registry considered harmful submitted wyclif appeared rprogramming later cryptography dispatch registry considered harmful submitted pimterry first seen rprogramming blockchain amazing solution almost nothing aug submitted jessefrederik appeared hacker news later blockchain solution almost nothing submitted shuckschu appeared lobster later blockchain amazing solution almost nothing submitted yonkeltron appeared hacker news later blockchain solution almost nothing submitted prostoalex first seen lobster coding adventure atmosphere aug submitted awn appeared hacker news later coding adventure atmosphere submitted tosh appeared hacker news day later coding adventure atmosphere submitted withinboredom first seen hacker news audio scratch go waveform synthesis aug submitted insanity appeared hacker news later audio scratch go waveform synthesis submitted insanity appeared rprogramming later audio scratch go waveform synthesis submitted mooreds appeared lobster later audio scratch go waveform synthesis submitted calvin first seen rprogramming git get name aug submitted initcommit appeared lobster le minute later git get name submitted initialcommit appeared hacker news later git get name submitted initialcommit first seen lobster rolling crypto gone wrong look net branca implementation aug submitted brycx appeared hacker news later rolling crypto gone wrong look net branca implementation submitted todsacerdoti appeared rprogramming later rolling crypto gone wrong look net branca implementation submitted xwyvii first seen lobster introducing versioned aug submitted christiano appeared hacker news later versioned submitted todsacerdoti first seen hacker news simple constraint programming implementation aug submitted appeared lobster later simple constraint programming implementation submitted first seen rprogramming macro aug submitted stackoverflooooooow appeared lobster later macro submitted pxlet appeared hacker news later macro submitted todsacerdoti first seen lobster building modern backend typescript postgresql prisma rest api validation testing aug submitted tuhaj appeared hacker news later building modern back end typescript postgresql prisma rest api submitted piotrzientara first seen lobster anatomy malicious package aug submitted calvin appeared hacker news later anatomy malicious package submitted todsacerdoti appeared hacker news later anatomy malicious npm package submitted oedmarap first seen lobster debian janitor lintian tag automatically fixed aug submitted jelmer appeared hacker news later debian janitor lintian issue automatically fixed submitted zdw appeared hacker news later debian janitor lintian issue automatically fixed submitted jelmer first seen hacker news thing string aug submitted appeared lobster later thing string submitted frantic appeared rprogramming le minute later thing string submitted frantic appeared hacker news later thing string submitted first seen hacker news panfrost performance counter perfetto aug submitted mfilion appeared lobster later panfrost performance counter perfetto submitted mfilion appeared hacker news day later panfrost hardware counter google perfetto submitted mfilion first seen lobster defmt highly efficient rust logging framework embedded device aug submitted skade appeared hacker news later defmt highly efficient rust logging framework embedded device submitted todsacerdoti appeared hacker news later defmt highly efficient rust logging framework embedded device submitted first seen hacker news deal message passing anyway aug submitted azhenley appeared rprogramming later deal message passing anyway submitted alexeyr appeared lobster later deal message passing anyway submitted hwayne appeared hacker news later deal message passing anyway submitted first seen hacker news nat traversal work aug submitted psanford appeared lobster later nat traversal work submitted danderson appeared hacker news later nat traversal work submitted appeared rprogramming later nat traversal work submitted alexeyr first seen rprogramming guids globally unique substring guids nt aug submitted alexeyr appeared lobster later guids globally unique substring guids nt submitted drgomesp appeared hacker news later guids globally unique substring guids submitted appeared hacker news day later guids globally unique substring guids nt submitted whack first seen hacker news filesystem aug submitted ingve appeared lobster later filesystem submitted calvin appeared hacker news day later filesystem pagetablecom submitted atesti first seen hacker news paving way high bitrate video streaming gstreamer rtp element aug submitted mfilion appeared lobster later paving way high bitrate video streaming gstreamer rtp element submitted mfilion appeared hacker news later paving way high bitrate video streaming gstreamer rtp element submitted mfilion appeared hacker news day later high bitrate video streaming gstreamer rtp submitted mfilion first seen lobster securing react native oauth aug submitted mooreds appeared hacker news le minute later securing react native oauth submitted mooreds appeared rprogramming le minute later securing react native oauth submitted mooreds appeared hacker news day later securely implement oauth react native application submitted mooreds appeared hacker news day later react native authorization code grant submitted mooreds first seen hacker news go use pointer instead copy struct aug submitted deanstag appeared lobster day later go use pointer instead copy struct submitted pxlet first seen hacker news fairness machine learning textbook draft aug submitted natcombs appeared lobster day later fairness machine learning submitted mooreds appeared hacker news later fairness machine learning limitation opportunity submitted yarapavan first seen lobster login regression user nonascii name aug submitted rtxb appeared hacker news later login regression user nonascii name submitted todsacerdoti appeared rprogramming day later login regression user nonascii name submitted mooreds first seen hacker news good riddance internet explorer aug submitted gaellelo appeared lobster day later good riddance internet explorer submitted cnst appeared hacker news later good riddance internet explorer submitted cnst first seen hacker news golden age computer user group aug submitted appeared hacker news later golden age computer user group submitted rbanffy appeared lobster later golden age computer user group submitted calvin appeared hacker news later golden age computer user group submitted rbanffy appeared hacker news later golden age computer user group submitted yarapavan appeared hacker news day later golden age computer user group submitted oedmarap first seen hacker news implementing traceroute go aug submitted inetenbr appeared hacker news day later implementing traceroute go blog submitted rbanffy appeared lobster later implementing traceroute go submitted pxlet first seen hacker news backblaze hard drive stats aug submitted caution appeared lobster day later backblaze hard drive stats submitted vermaden first seen hacker news interface aug submitted hdk appeared lobster day later interface submitted danburzo first seen hacker news angular security best practice blog cheatsheet pdf download aug submitted lirantal appeared hacker news day later angular security best practice submitted mooreds appeared lobster day later angular security best practice submitted mooreds first seen hacker news small web aug submitted tbassetto appeared lobster day later small web submitted chobeat appeared hacker news later small web submitted wyclif appeared hacker news later small web submitted first seen lobster dnjs subset javascript isomorphic html templating configuration jul submitted leontrolski appeared hacker news later dnjs subset javascript isomorphic html templating configuration submitted todsacerdoti appeared hacker news day later dnjs pure subset javascript want replace configuration language submitted tudorizer first seen lobster dynamic multilevel bayesian model predict u presidential election jun submitted jperras appeared hacker news day later dynamic multilevel bayesian model predict u presidential election submitted nromiun appeared hacker news day later code economist election model submitted personofcolor first seen lobster make pythonstyle class much javascript jun submitted leontrolski appeared hacker news day later make pythonstyle class much javascript submitted leontrolski first seen hacker news ciphey automated decryption tool jun submitted nmstoker appeared hacker news day later ciphey automated decryption tool using ai nlp submitted appeared lobster later automated decryption tool using ai nlp similar cyberchef magic submitted skerritt appeared hacker news day later ciphey fully automated decryption tool using common sense nlp ai submitted dragonsh first seen lobster ventoy multiiso bootable usbs may submitted pistos appeared hacker news day later ventoy new bootable usb solution submitted mmphosis first seen hacker news turn shell command http apis apr submitted appeared rprogramming day later turn shell command http apis submitted mooreds appeared lobster day later turn shell command apis submitted mooreds appeared hacker news later script http kapow submitted jerodsanto appeared hacker news day later kapow script http submitted sharjeelsayed first seen hacker news radicle link peertopeer code collaboration protocol built git apr submitted cloudhead appeared lobster later radicle link peertopeer code collaboration protocol built git submitted appeared hacker news later radicle submitted mzehrer appeared hacker news day later radiclelink git network discovery submitted lftherios first seen lobster deep dive openbsd malloc internals mar submitted appeared hacker news later tale openbsd secure memory allocator internals malloc submitted zdw appeared rprogramming day later deep dive openbsd malloc internals submitted oherrala first seen lobster powertoys window system utility maximize productivity mar submitted steinuil appeared hacker news day later microsoft powertoys window submitted tomrod first seen hacker news web browser privacy browser say phone home pdf feb submitted appeared hacker news day later web browser privacy browser say phone home pdf submitted notrobot appeared hacker news day later web browser privacy browser saywhen phone home pdf submitted appeared lobster day later web browser privacy browser say phone home submitted cnst first seen hacker news video language making movie dec submitted brudgers appeared lobster day later video language language multimedia creation submitted zem first seen lobster mkws made website dec submitted adriangrigore appeared rprogramming later mkws made web site submitted adriangrigore appeared hacker news later mkws made web site submitted adriangrigore appeared hacker news later mkws make website submitted mpweiher appeared lobster day later mkws added linux version updated website submitted adriangrigore appeared hacker news day later mkws generate static website minimum line code submitted zeveb appeared hacker news day later mkws posix compliant sh fast extensible simple static site generator submitted adriangrigore appeared hacker news day later mkws fast simple static site generator based sh submitted first seen hacker news architecture decision record adr nov submitted dyslexicatheist appeared hacker news day later architecture decision record submitted randomkris appeared hacker news day later architecture decision record adr template submitted pavanyara appeared lobster later architecture decision record adr example submitted mooreds appeared hacker news day later architecture decision record adr example software planning leadership submitted msolujic first seen hacker news ray tracing one weekend sep submitted azhenley appeared hacker news day later ray tracing one weekend submitted tleb appeared lobster day later ray tracing one weekend submitted nalzok lovingly handcrafted perl using emacs scheduling service generously provided vixie cron
67,Lobsters,perl,Perl,PerlCon 2019 in Rīga,https://domm.plix.at/perl/2019_08_perlcon_riga.html,perlcon rīga,perlcon discussion participate andrew shitov venue note quote managed remember sawyerx jonathan testing lie ligtning talk console oriented site critique featherless biped atrium young game developer progressive web application perl module gong live stream dump shadowcat system social great dalmuti talk acme returnvalues http returnvaluesplixat future perlcon europe foundation amsterdam cyprus perlcon wiki venue thanks edits,perlcon rä ga year perl conference took place rä ga new improved name perlcon improving name generally hot topic wo nt go detail please checkout discussion participate andrew shitov grigorii filomafitskii great job organizing another wonderful perl conference second time rä ga venue also hotel small spa water kind javascript expecting attendee show bathrobe talk happen note quote managed remember perl test suite run test sawyerx impressive jonathan want get people say write prettier code faster curtis repeat question moron poe warns u always suspicious people saying always talk testing lie irc like slack without gifs job ligtning talk curl wttrin lot fun console oriented site run igor chubin ab using braille console font generate graph critique captchas fun featuring rubber chicken featherless biped ai interpreting painting certain nearly year old crucifixion person posing picture atrium showed u various perl game engine sadly none really suited attract young game developer use perl postgresql fast box oracle expensive box cutis ovid poe lightningfast lightning talk tps thing screwdriver everything screwed jonathan keynote perl concurrency wonderful view office wonder robert acock relaxed enough work progressive web application even come perl module help u generate necessary javascript gong traveled km missed quite lot talk looking forward video talk currently live stream dump available near future get access distinct talk youtube thanks lot video team shadowcat system people helping record video social usual wonderful time chatting old new friend hallway track coffee break lunch attendee dinner loud official unofficial game night great dalmuti still one best game crowd casual non gamers walking rä ga quite impressed language skill year old artist soontobe dalmuti grandmaster estonia whose name unfortunately could remember sign drawing talk also two lightning talk one new tattoo rather old project acme returnvalues accompanying website http returnvaluesplixat future perlcon yapc europe foundation quite dead least practical way nobody choose location next year conference therefore task handed attendee could decide two proposal amsterdam cyprus two short presentation everybody got glass token put one two plastic box transparent election went surprisingly fast end amsterdam tight margin vote amsterdam cyprus wo nt see attendee bath trunk next year please also check general perlcon wiki try amass knowledge needed continue great perl conference want participate help please join venue mailinglist thanks thanks orgas speaker attendee course sponsor see next year amsterdam edits add source postgresoracle quote add source ircslack quote
68,Lobsters,perl,Perl,"Proposal to rename ""Perl 6"" to ""Camelia""",https://github.com/perl6/problem-solving/issues/81,proposal rename perl camelia,join github today sign comment lizmat reload reload,dismiss join github today github home million developer working together host review code manage project build software together sign comment lizmat changed title perl name perl source confusion irritation perl name perl confusing irritating aug perform action time signed another tab window reload refresh session signed another tab window reload refresh session
69,Lobsters,perl,Perl,Your Regex Here,http://ajs.github.io/tools/your-regex-here/,regex,repository toward languageneutral generation code string keywords whitespace ratcheting adverb significant whitespace literal simple nonliterals character class quantifier conjunction anchor grouping capturing named capture adverb subrules code interpolation integration concern action unicode dropped full perl regex grammar pod bit marketing cleanliness full parser formal language debugging regex example edition creative common attributionsharealike international license artistic license,document updated maintained repository version remain historical purpose post intended proposal develop extend maintain language perl could adapt perl regexes aka rule language full json parser end article written specification syntax know anything perl regexes look like might good glance continuing measure regular expression epoch generation zeroth generation purely mathematical idea regular expression early day unix program used arcane syntax heard match text included ed grep soon followed ex vi friend long regular expression standardized extending changingmutilating syntax posix regular expression standard entered boom time regular expression development perl introduced improvement traditional unix posix regular expression perl tcl pcre python java hand evolution basic third generation regular expression call fourth generation regular expression probably familiar today include feature like named group first introduced python implementation extension full unicode support including matching property code block etc along came perl perl call system regexes technically full grammar engine frequently ignored favor treating soupedupregexes use term regex document mean perhaps future generation convention note outside document many people use regex refer legacy regular expression syntax toward languageneutral generation goal come core perl regexes order allow future innovator language move toward generation perl enhanced regular expression back early nothing meant locked perllike syntax example brace used enclose rule default nothing stopping language like python defining rule term indentation level dollar sign used backreferencing thought part regex syntax generic variable naming convention backslashed backreferences treated previous implementation code string many language implement regular expression string parsed runtime produce matching structure regexes like designed firstclass code native language fail time rest program parsed malformed include nested code execution thinking regexes way misleading however ephemeral nature execution unlike form code execution possibility backtracking within regex potentially undoing binding created within match object invalidating previous state regexes difficult someone familiar simple regular expression library understand bear thought one thing proposal try limit impact complexity hide everything away behind grammar keyword indeed though keyword one could imagine language implementation even gating access behind librarymodule inclusion keywords whitespace perl free introducing keywords namespace pretty well guarded userdefined value rarely conflict keywords profusion way introduce regex going use three basic keywords grammar something like class modern oo language body set property method rather regexes rule introduces regex us significant whitespace default occurs within grammar token introduces regex use significant whitespace default occurs within grammar ratcheting substantial difference rule token user older relgular expression engine might expect backtrack default merely seek longest match want backtracking enable ratchet described adverb section example rule token never match aab unless enable backtracking mode consumes aa second ruletoken match ratcheting way useful parsing rarely traditional regular expression user expect whatever mechanism language us integrate regexes appears traditional regularexpressionlike probably enable ratcheting perl provides additional keyword regex enables backtracking default addition turning significant whitespace significant whitespace significant whitespace thing example may help typical regex modern language read language one digit followed literal space followed one digit inside rule actually shorthand cover specific mean later understand mean match whitespace smartly token however literal whitespace completely ignored unless quote escaped core difference two keywords comment also allowed going go funky perl style comment format simply include comment simply ignored much like whitespace token literal word character includes alphanumeric character underscore simply matched asis anything complex must escaped prefixed characterby character quoted token equivalent simple nonliterals regular expression format match chararcter including newlines use n nonnewlines various character class escape match whitespace w match word character alphanumeric underscore n match newlines actually logical newline platformagnostic match tab h match horizontal whitespace v match vertical whitespace match digit also negated using uppercase equivalent eg match word character followed nonwhitespace also verbose form many builtin named subrules alpha alphabetic character digit digit xdigit hexadecimal digit alnum w word character punct punctuation character graph alnum punct space whitespace character cntrl control character print graph space cntrl blank h horizontal whitespace lower lowercase upper uppercase two character wb word boundary w smart whitespace match whitespace andor word boundary ww match within word used outside character class subrules see may preceded within order avoid capturing matched value like subrule used chracter class eg within combined character class freely except wb w ww character class unicode property also matched character class example match character unicode script property latin match character basic latin block term unicode standard perl following property supported short long version property letter l casedletter lc uppercaseletter lu lowercaseletter titlecaseletter lt modifierletter lm otherletter lo mark nonspacingmark mn spacingmark mc enclosingmark number n decimalnumber digit nd letternumber nl othernumber punctuation punct p connectorpunctuation pc dashpunctuation pd openpunctuation p closepunctuation pe initialpunctuation pi finalpunctuation pf otherpunctuation po symbol mathsymbol sm currencysymbol sc modifiersymbol sk othersymbol separator z spaceseparator z lineseparator zl paragraphseparator zp c control cntrl cc format cf surrogate c privateuse co unassigned cn directly unicode specification might match titlecase string token titlestring titlecaseletter lowercaseletter negate property simply follow colon character class use characterselecting subrules character class construction ever match single character built piece character class explicit list character z lower ascii alpha constructed class alpha uppercaseletter say alpha class excluding upper case letter unicode codepoints also referenced hexadecimal number always four digit name c greek small letter alpha quantifier everything described called atom group also atom atom made optional repeating regex typical regular expression quantifier supported match preceding atom single matching literal group subrule class one time match preceding atom zero time min max match preceding atom min max mean forever time construct modify preceding quantifier match nongreedily match greedily default perform backtracking previous quantifier match preceding atom quantifier separated following atom eg string match commaseparated string subrule match allows trailing separator example match one character match zero word character match shortest sequence end finally special syntax matching balanced expression match subrule expression enclosed parenthesis substantially different allow system provide useful diagnostics know intent user match balanced beginning ending token conjunction regular expression syntax match first matching alternative left right hand side aa never match right match longest two bnflike parser specification expect aa match right input aa conjunction requires left right hand side match substring mostly identical differs nominally allow evaluation left right hand side order carry chain operator enhancing potential parallelization anchor start string end string start newlineseparated line within string end newlineseparated line within string wb word boundary wb word boundary ww within word boundary ww within word left word boundary nonword character start string left word character right right word boundary word character left nonword character end string right note construct match anchor condition text zerowidth zerowidth assertion complex already seen example lookaround assertion form class positive lookaround class negated lookaround latter example confuse lookaround consume character input negative character class class negative character class consume matched character lookaround match appear match nonzerowidth entity consume technically zerowidth also turn full regex zerowidth assertion two way apple match apple eat apple match apple eat latter case previous part regex already consumed character matched body change zerowidth assertion assertion text matched without change current position match negated grouping capturing group specified parenthesis like old style regular expression fruit apple pear match fruit apple fruit pear parenthesis always capture match numbered match placeholder n n associated parenthetical group following way counting openparens lefttoright alternation reset numbering alternation differing number group longest win sense subsequent group numbered highest number used thus far example b c e would match abe capturing b leaving undefined capturing e captured value matched later would match even number f note perl requires code assertion group backreference order cause backreference available part generalized specification considered implementation detail perl also noncapturing group case grouping performed capture saved improve performance simplify access captured group named capture also save match whether capturing specific name fruit fruit apple pear case name fruit associated following group atom subrule see adverb adverb colonprefixed directive change behavior regex engine effect last end innermost group rule token within appear include ignorecase match upper lowercase interchangeably ignoremark match base unicode character ignoring combining element eg u would match ü ratchet r perform backtracking default sigspace treat whitespace rule exhaustive e perform possible backtracking even successful match adverb may negated using eg fruit ignorecase apple ignorecase fruitclass would match fruit apple fruit fruitclass fruit fruitclass seen adverb go token v rule token identical rule foo sigspace ratchet rule identical token foo sigspace ratchet subrules subrule like subroutine call rule token block introduce subrule referenced subrule using anglebrackets rule identifier word number token word w token number subrules capture default saving result name subrule subrule matched quantifier capture list match example code also included rule sequence identifier commaseparated list identifier would matched named capture identifier containing list match occurred captured match nested think match data structure contains numbered set index named set index independently implemented languagespecific match contain whole tree match subrules indeed grammar work turning input text tree match result transformed ast directly acted upon turn capturing place period subrule name token octet resulting match object contain octet entry would otherwise created hand want rename entry match use equal sign token byteoctet recursion allowed recursive parsing performed eg rule expr term term leftop expr rule term literal expr code interpolation several way interpolate native language structure code regex execute enclosed expression ignore result execute enclosed expression match evaluates true false used variable content variable coerced regex languagespecific way interpolated current regex variable content variable coerced list regexes languagespecific way interpolated current regex alternation word expression used mean reinterpreted languagespecific way interpolation external code save numbered group within parens named like name code name variable result discarded prefixing period like subrule integration concern rest document considers regex section consider take construct integrate larger language simplest way via form method invocation grammar object example perl treat toplevel rule top special invoking via method parse like mygrammarparse string ideally method return match object contains tree result final match another way would integrate regexes existing basic regular expression language support eg perl syntax start expression rule mygrammar expression interesting approach might treat grammar special way defining class simply allow subrule invoked directly method perhaps even allow nonregex method defined grammar work mean language specific action perl grammar tightly coupled concept action method class associated grammar whose name name subrules grammar thus subrule match occurrs corresponding action invoked common reason allow action augment replace match object example performing first step code generation pas language creating formal abstract syntax tree action make regexes full parser specification system implementation considered carefully implementation regexes unicode regexes tightly coupled unicode hard choice made integrating two perl obviates many concern transforming string form called nfg done mean outside scope document least implication matching character unicode string might contain many composing codepoints must addressed implementation dropped look full perl regex grammar course written perl regex using subset language known nqp see many specific skipped might added back later make sense outside perl interesting question mark try outline high point protosym bit like function overloading multiple definition name ar declared different parameter example core nqp definition regexes proto token metachar token metachar sym nibbler sigok token metachar sym nibbler sigok token metachar sym quoteexpr q sigok token metachar sym quoteexpr qq sigok token metachar sym sym sigok inline comment perl allows comment appear inline using bracketing apple comment pear pod anglebracket quoting list string alternation eg oh happy day match oh happy day programatic range repetition count eg foo minfoo maxfoo repetition quantifier variant eg foo foo etc several adverb though perhaps larger context pcre might value nth friend continue continue po p exhaustive ex global g overlap substitutionspecific adverb samecase ii samemark mm samespace s ability associate adverb tokenrule declaration perl langauge syntax really regex syntax similarly additional syntatic element declaration grammar eg export many keywords syntax defining regexes regex rx bracketing type accompany unicode property uniondifference zp z zl redundant character class uniondifference unicodeequivalent operator w alias wb bit marketing whole lot focus document drumming adoption presumption target audience understands full grammar specification would radically improve capability programming language remaining question relate difficulty implementation disruption langauge element attempted address let take momemnt consider benefit make sure everyone page cleanliness regular expression might find modern language e perl best practice document suggests render perl regex token sign token decimal token exponent e sign decimal token float ratchet sign decimal decimal exponent think see readable full parser stressed enough perl regexes new syntax basic regular expression fullfledged parser shown json example end document even embedded code fully contextsensitive parser mean formal language specify quantitative difference space possible problem solve debugging regexes firstclass language component debuggable ordinary code reason debugger could step form ordinary code regex enclosed regular code also produce compiletime error many high level language today compiletimeruntime distinction fuzzy least compiletime implies syntax must correct example consider python code import def foo return rematch rfo perfectly valid python code unless test coverage manages find specific case bad value passed rematch trivial obviously trivial example may find error long time regex scenario def foo grammar foo token tfoo fo return footfoo would result compiletime error anyone tried execute code regex first step porting spec language going modify languagespecific end want start document latest version repository http example following complete parser edition json specification grammar json rule top value rule value object array number string name rule name true false null token true true token false false token null null rule object string value rule array value token number digit digit e digit token digit token string stringbody token stringbody anything nonspecial x x valid escape escape token escape escaped special sort bfnr unicode codepoint u f document distributed creative common attributionsharealike international license code sample herein alternately licensed artistic license
70,Lobsters,perl,Perl,PFT 1.4.1 is released,https://dacav.roundhousecode.com/blog/2019-07/26-pft-1-4-1.html,pft released,pft cpan note makemaker file honored filesystem position,pleased announce availability new release pft new version come additional r feed generation see pftgenrss bash completion reviewed improved man page minor fix improvement pft currently available cpan fedora rawhide note bash completion automatically installed cpan distribution pft reason nt know makemaker well enough figure properly nt want go home made hack lurk spare time short prefer use something else order enable bash completion pft copy file one honored filesystem position r feed feature suggested anton later also doshirae upon second request thought â â took chance also flush bunch fix pipe thank
71,Lobsters,perl,Perl,The Perl Family Queue,http://ajs.github.io//tools/perl-family-queue/,perl family queue,weighed resolution name raku queue version numbering perl interesting numbering convention registration process recent proposal pythonlike perl variant perl perl bit family question name,nothing anymore babylon became clear perl going next version perl language community began rumble discussion whether rename language early today perl released first major postrelease update community want rename larry creator resolution name raku late last year reflecting though seems bit late rename perl name language embedded source dozen library third party tool markupdown system online forum book etc like rms attempt rebrand linux system gnulinux still echo today many user end wondering ubuntu gnulinux red hat differ fundamentally redhat lacking essential gnu tool perl syntax plugin editor work raku import perl module rakudo raku raku rakudo program know nonsensical question user year decade regardless many blog post try explain history frankly skeptical declarative name change would take even good rub good idea break perl nonperl simply larry made initial comment long ago think actually solved problem said quite register everyone one followed logical conclusion said perl perl member perl family language going capitalize perl family name whole collective tremendous implication perl asyet unspecified language pet language perllike need look like would major revision perl language stem perl numbered expectation language perl family initiated development team existing version see introduces question answer think bad thing indeed perl innovation goal answer question set groundwork arrive next one queue larry use word family brings mind group people related choice might necessarily get along agree many convention instead like agree view family queue one expectation possible get pushed onto queue electively case receive largest index perl day making plan available going propose two part solution first conservative least impactful part address today though plenty impact second bit speculative machinery may may appeal everyone version numbering accept perl name language becomes impossible language ever change major version number stunt language unreasonable way think need realign expectation around reality recalibrate versioning remedy constraint like propose following versioning scheme across perl family language queue version number language name perl language id major version minor version patch release mean mean across language queue expectation valid constraint process user reasonable expectation patch release breaking code due specification change minor release sort deprecation cycle way ensuring jump minor version possible reasonable language id unique integer key identifies language ordered time respect entry identifier issued may may related directly age language see relate within queue care specification existence one implementation implementation specification might perl might closely related separate perl could even broadly detached ansi c spec gcc language queue need know spec stand perl interesting numbering convention reserve odd numbered major number development release feeling obviously good thing maintained pushed one level would production release would development release mean bump major number could flag incompatible change replacement major component object system convention entirely language would make sense would give everyone plenty room breathe perl using nonnumeric version like also fine would seem reasonable require numeric sort version component stable respect release date eg perl majorparsebase increase subsequent major version component think queue care requirement version use digit identifier course perl mostly history violation specification registration process bit speculative well aware might broadly accepted option please bear end see think whole thing would operate queue composed sequential numeric language identifier kind number obviously real imaginary part think fact think solves major problem idea perl family language queue fact language idea come go ephemerally language consider real fewer let take point view aspiring language designer first need compose basic outline language name goal ancestry within family major technical feature perl might initial announcement rfc connected state onion high bar might language meeting bar never get line code much le productionready implementation subjected basic amount scrutiny community assigned complex number form n monotonically increasing integer value assigned new language proposal current next unallocated entry queue time eg currently thus recent proposal pythonlike perl variant might come free keep bumping version normal remain versioning forever wish however language quasistable implementation let say perl back pug day perl apply actually allocate next available number without imaginary component time perhaps language matured faster perhaps perl become stable enough moved perl language move officially becomes perl mean perl ready prime time mean demonstrated level seriousness perl family ready begin allocating prime real estate versioning landscape requires registrar manage cpan shared resource perl think possible manage version number allocation also bit hokey accidental strongly believe sense getting one imaginary identifier feel le permanent case applying become fully realized pun intended language perl family feel like unnecessary extra step every imaginary perl family language want grow real language okay enough maybe bit proposal thought family constitutes perl family member language hard think requires thing specification wholly within another language simple slang perl perl perl might get implementation slang perl stand well probably hardest part get right fuzzy border definite black white area well think work highpass filter practical connection ancestor language language queue eg smaller number reasonable expectation composed feature either emulate consciously drop improve seek correct feature language example one could see argument php ruby within perl family sense retroactively deciding call respectively invite apply real version number java certainly take perl account much much clearly branch cc portion language space must trivial modification existing language perl moose builtin langauge specification might first step creating one need use moose meet criterion question arising question would jsonlike specification perl data allowed apply number dsl get namespace eg perl dsl matter inclined latter case like ruby new language real pretense perl family member happens someone applies would make le sense imaginary language get real part bumped whenever new language id allocated reasonable level disruption given language still early specification stage agree imaginary language exist sparse namespace new spec claim nowrealized language id name requirement language treat perl family queue identifier name perl might widely known world gueuze might complicated perl world perl spec also known raku many implementation current obsolete name perl family merely mean language considered fundamentally perlish mean anyone ever call maiden
72,Lobsters,perl,Perl,Using generate_series and daterange for fun and profit,https://domm.plix.at/perl/2019_07_render_availabily_schedule.html,using generateseries daterange fun profit,screenshot time vuetify calendar data display time common table expression daterange convert list day generateseries run finally perl,using generateseries daterange fun profit working project company renting professional movie equipment needed display calendar view availability status given thing eg camera availability status stored table bit like create table schedule id integer null type integer null reference type id thing integer reference thing id begin timestamp time zone null timestamp time zone null state text null example type thing begin state rented reserved reserved rented returned infinity damaged see three different camera thing camera type type id also see camera rented camera rented day also two reservation yet unspecified camera camera team get decided checkout camera returned ie back company yet ready use camera inspected away declared damaged stay state forever infinity different state hopefully repaired set screenshot time currently look bit like using vuetify calendar render data showing day number available rented reserved etc item data display vuetify calendar need data completely different format want hash containing key day arrayref event value json returned perl backend api calendar count state rented count state reserved count state returned count state available count state damaged count state reserved convert data db rather verbose data structure could probably muck around app code much prefer use database engine postgres else hard lifting sql time bound select date lower date upper select generateseries greatest boundslower sbegin least boundsupper suntil day interval date day sstate count sstate count schedule bound stype daterange sbegin date suntil date daterange boundslower boundsupper group day sstate order day state might bit hard grok let break bit three interesting part cte beginning generateseries select list daterange query clause cte common table expression bound select date lower date upper use simple common table expression cte alias query parameter convert proper date object code execute query like sth execute startdate ymd enddate ymd thing startdate ymd something like using technique refer parameter make manual testing query easier daterange let jump daterange clause first stype daterange sbegin date suntil date daterange boundslower boundsupper daterange generates date range good naming two date third parameter case specifies startend date inclusive exclusive case inclusive exclusive use round bracket construct two date range one begin date stored event another one lower upper date specified user using operator tell postgres select row two date range overlap see operator query selects event given type stype fall partly completely requested date range even one event date infinity yay convert list day generateseries need blow date range distinct day display calendar easy generateseries greatest boundslower sbegin least boundsupper suntil day interval date day generateseries generates series good naming value start stop value also pas step interval third value via day interval greatest least return biggest smallest value list pas using limit list day tightest amount day still generating day needed display calendar run full query params bound select date lower date upper select generateseries greatest boundslower sbegin least boundsupper suntil day interval date day sstate count sstate count schedule bound stype daterange sbegin date suntil date daterange boundslower boundsupper group day sstate order day state return day state count rented rented rented rented reserved returned reserved returned damaged reserved nearly finally perl attentive might noticed one thing nowhere storing actual available item nt need item state given time frame considered available still want display count available item calendar fill gap need iterate result returned db model tiny bit data munging sth execute startdate ymd enddate ymd type calendar currentday dayavailable total r sth fetchrowhashref r day ne currentday self fillavailable calendar currentday dayavailable currentday r day dayavailable total push calendar r day state r state count r count dayavailable r count clean last iteration self fillavailable calendar currentday dayavailable return calendar total contains total number available item given type example specific camera start invalid currentday loop data got db currentday changed call fillavailable push fake state available onto start current day list event push state count current db row onto list event current day decrement number item available day loop call fillavailable one time add last day data making far another screenshot reward
73,Lobsters,perl,Perl,OpenBSD::Unveil(3p) added to -current,http://undeadly.org/cgi?action=article;sid=20190712101304,openbsd unveil added current,rueda committed perl unveil,contributed rueda openbsd pledge makesafriend dept andrew fresh committed openbsd unveil perl interface unveil cvsroot cv module name src change cvsopenbsdorg added file gnuusrbinperlcpanopenbsdunveil unveilxs gnuusrbinperlcpanopenbsdunveillibopenbsd unveilpm gnuusrbinperlcpanopenbsdunveilt openbsdunveilt log message add openbsd unveil perl interface unveil ok brynet bluhm parallel openbsd pledge pledge
74,Lobsters,perl,Perl,Infinite work is less work with Perl,http://blogs.perl.org/users/damian_conway/2019/07/infinite-work-is-less-work.html,infinite work le work perl,last week weekly challenge pairsgrep key strong map value pairsgrep key weak map value kvmap n strong n kvmap n weak n p n n p n p n n p,first task last week weekly challenge print first ten strong weak prime prime pn strong larger average two neighbouring prime ie pn prime weak smaller average two neighbour course challenge would trivial happened list prime number filter first ten strong first ten weak fact would even easier happened list strong prime list weak one print first ten infinite number prime weak prime possibly strong prime though still conjectured building complete list various subspecies prime impractical programming language yet another thing love raku well handle infinite list sequence worry finite upper limit simplifies large number task one sequence prime sequence positive integer filtered grep keep one prime course raku already prime number tester builtin isprime function sequence prime never change declare constant constant p grep isprime need extract strong weak prime given earlier definition strong weak get sub strong n n p n p sub weak n n p n p note p list p n two neighbour add together sum average two strength test operate prime index value generate full list strong weak prime need take index pkeys filter keep one strong weak another grep map index back corresponding prime give u constant strongp pkeysgrep strong map n p n constant weakp pkeysgrep weak map n p n work fine little clunky convert prime p back index key later convert index back corresponding prime map n p n instead could convert prime p keyvalue pair grep key map value like constant strongp ppairsgrep key strong map value constant weakp ppairsgrep key weak map value key strong shorthand pair strong pairkey word filter pair whose key passed strong return true even simply could filter test index value single mapping using readable name current prime index like constant strongp pkvmap n strong n constant weakp pkvmap n weak n take infinite list prime p convert infinite list alternating keythenvalue pkv indexthenprime call index n prime map n keep appropriate strength strong n weak n whichever way generate infinite strongp weakp list printing first ten trivial say strong prime strongp say weak prime weakp note code shown greps map work lazily ondemand justintime grep map iterates many list element required produce value index actually query case value index take work operate infinite list would use finite list fact generally take le work preferred work finite list prime need magically know advance ie guess many prime required guarantee list contain least ten strong ten weak prime example might reasonably assume first integer would probably contain least strong weak prime could try constant p grep isprime indeed would work fine except ten time much work actually required might guessed tighter upper limit instead constant p grep isprime would eliminated extra work work happy accident strong prime test strongness correctly need following prime well however stopped generating prime strong subroutine would received undefined value requested prime used number undefined value would convert zero average two prime neighbour would computed certainly le would erroneously correctly indicate strong prime science voodoo want avoid extra work using extremely conservative upper limit risk error notion extremely conservative nt quite conservative enough need another approach need iterate successive integer locating successive prime testing strength absolutely sure enough would look something like various list prime initially empty p strongp weakp definition strong weak sub strong n n p n p sub weak n n p n p try every integer potential prime actually prime isprime add list known prime ppush enough known prime test strength pelems test secondlast prime list n pend add appropriate list strong n strongppush p n elsif weak n weakppush p n stop least subspecies last strongp weakp print first ten say strong prime strongp say weak prime weakp work correctly unnecessary calculation much harder write much harder read verify maintain compared prime constant p grep isprime definition strong weak sub strong n n p n p sub weak n n p n p strong weak prime constant strongp pkvmap n strong n constant weakp pkvmap n weak n print first ten say strong prime strongp say weak prime weakp oh declarative version also four time faster iterative solution raku infinite work often le work damian p already familiar perl might noticed complete absence sigiled variable n p example course raku sigiled variable required use use sigilless variable instead declared leading backslash p sub strong n used without leading punctuation whatsoever sub strong n n p n p isprime ppush thing holding back experimenting amazing new language pathological fearutterly rational dislike punctuated variable maybe time give raku try
76,Lobsters,perl,Perl,As simple as possible...but no simpler,http://blogs.perl.org/users/damian_conway/2019/07/as-simple-as-possiblebut-no-simpler.html,simple possible simpler,last week weekly challenge sequence operator variadic array parameter lorentz contraction n n,first task last week weekly challenge generate van eck sequence first challenge understand van eck sequence various online explanation le instantly helpful van eck sequence list integer starting zero next number sequence given distance current number nearest preceding occurrence number example current number index n let call compute number index look back sequence recent preceding occurrence earlier index next number sequence simply distance two occurrence namely n complication prior occurrence current number anywhere preceding sequence next number simply zero le arbitrary might suppose think zero value distance preceding occurrence possible candidate preceding occurrence distance case n n zero okay van eck sequence generate raku following recent blog post probably wo nt come much surprise learn raku appropriate builtin tool let u accomplish entire task single statement tool sequence operator sequence operator take initial list value followed code object ie block subroutine followed termination condition sequence initiallist codeobj termination build sequence literally object class seq starting initial value generates extra value initial list calling code object repeatedly final element initial list time code object called value return appended sequence value returned smartmatches termination condition point sequence complete example initial codeobj termination oddnums n npowers n x n fibonacci b example differ van eck sequence one important respect us one preceding value case fibonacci two order compute next next number van eck sequence depends immediate preceding value entire sequence must searched locate appropriate previous occurrence naturally raku support kind sequence code object us special array parameter indeed variadic array parameter passed entire preceding sequence every time need build code object case subroutine passed entire preceding sequence computes next van eck number might look like sub nextvaneck n end try first n return n else return final index current sequence given end like perl current n position find nearest preceding identical number walk backwards index zero looking first index value index ie equal value index n ie n return nm found zero otherwise way block convenient shorthand mdefined try prefix search handle edgecase n zero case would produce negative array index would raise exceptionyes perfectly okay use apostrophe hyphen subroutine name identifier raku provided surrounded normal identifier character ca nt confused start character string code object calculates next van eck number entire van eck sequence constant vaneck nextvaneck fine let sequence run infinity generates value lazily computing many element actually needed meet given request constant sequence ask particular index point nextvaneck called many time necessary compute requested value say vaneck print certainly clean compact uncluttered solution accomplished advertised single statement however version starting point numerous improvement could make thinking coding rakuishly start often red flag piece code iterates though index look corresponding array element raku particular make easy iterate array element directly find corresponding index need version sub nextvaneck n end head first tail end k return n else return version find index taking element list prior last head searching first element equal final element first tail need closest preceding match need search backwards prior element add end adverb tell first search end find match need position match found value found add k adverb tell first return matching key ie index match occurred instead matching value new way locating index requires marginally le code le prone offbyone error real benefit also significantly faster iterating array element instead array index nt two explicit array lookup order compare every prior element final element another minor code optimization possible saw back beginning exploration special case returning zero index equivalent setting n case return nm without ever needing test special case like version sub nextvaneck n end head first tail end k n return n first search fails find preceding match return undefined value instead trailing definedor simply use n value instead case nm zero required course already reduced code much reason persevere n variable selfdocumentation otherwise could simply replace n end new headfirsttail search expression producing version sub nextvaneck end head first tail end k end point hardly need named subroutine either instead constant vaneck nextvaneck could simply inline subroutine body code block producing genuine singlestatement solution constant vaneck end head first tail end k end job done sure write say vaneck print get printed expected happens write say vaneck print well get printed eventually minute later tried vaneck time long leisurely lunch break restaurant hour away wanted vaneck would quite literally come back next week managed make solution simple possible cost truly woeful completely nonscalable runtime performance stop think surprising run poorly generate next van eck number code look potentially every one earlier number comparing recent number sequence word computing single van eck number take n operation computing n must hence minute find mere thousand number sequence several hour find first thousand nearly seven day find first million obviously reap countless benefit unlimited supply van eck number going need find way eliminate repeated n search inside code object happily difficult kind algorithmic lorentz contraction often apply kind situation literally shrink time dimension expanding space dimension prosaically trade memory extra speed trick case permanently track static variable index recent prior instance number sequence far encounter number perform single lookup variable find mostrecent prior index number update remembered value time since seen number later index n nextvaneck subroutine based approach would look like version sub nextvaneck state n end tail n tail n return n array track recent prior index previous value need value compute next number simply look location directly tail update array new mostrecent position current value tail n running sequence operation version subroutine compute vaneck second instead fourfold improvement performance always gratifying much better passing entire preceding sequence access final value tail current value n end occurs could instead simply pas final value directly value n merely increment call could track trivially another state variable look like version sub nextvaneck state n n n n return n subroutine take single argument yes raku allows subscripted alphanumerics identifier time sequence operator generates new value pass code object final value sequence far also track current index incrementing n time subroutine called determine value update return newly computed next value sequence operator longer need pas entire sequencesofar subroutine every new number generates cost call nextvaneck drop significantly version subroutine compute vaneck approximately time faster previously second find vaneck second vaneck second vastly faster previous approach completely different order complexity clearly n linear time rather quadratic massive improvement performance however free array consistently long sequence though slightly sparse may require much space nevertheless mean memory footprint solution effectively doubled compared version situation though perfectly acceptable tradeoff memory relatively cheap time priceless could also code version single statement course simply inline subroutine code block constant vaneck state n n n n n course started sprung warning explanation quite justified complaining scary incomprehensible gasp different new concept new approach new tool new syntax always challenging especially four come understand power expressiveness raku perhaps solution like scary start see possible write code look much like original description problem something like original notation problem hence actually comprehensible anyone already familiar task domain always one way raku still perfectly fine write final version constant vaneck nextvaneck hiding away algorithm optimization inside subroutine later changing within subroutine find cleverer approach better algorithm even efficient lorentzian tradeoff perl raku cop lot flak unapologetically one way philosophy flexible transparadigm nature two language simply mean never stuck inadequate concept inefficient algorithm inconvenient software tool intrinsic performance limitation someone else hardwired one right way make choice raku simple possible
77,Lobsters,perl,Perl,Coding with an even fuller toolset,http://blogs.perl.org/users/damian_conway/2019/06/coding-with-an-even-fuller-toolset.html,coding even fuller toolset,writing last week weekly challenge euclid number triangular reduction metaoperator,sigh always way nt sooner get done writing right tool make particular coding task trivially easy realize right next door much better example could used make exactly point longest initial subpath example talked previous post challenge last week weekly challenge challenge week make even clearer much right tool simplify task challenge find smallest euclid number nt prime nth euclid number given product first n prime plus one sequence euclid number sequence would simple compute easy way build sequence partial product another list eg partial product prime number course raku tool built right core language called triangular reduction metaoperator ordinary reduction operator raku product nums insert bracketed operator every two element list written product nums nums nums nums example computes product number hand triangular reduction metaoperator example triangular product operator product n moreorless thing instead returning final calculation return progressive list partial result successive multiplicative step written product n n n n n n might seem like arcane useless feature course precisely arcane useless feature actually need order build list euclid number list prime remember looking first nonprime euclid number first nonprime number number one greater sequence cumulative partial product prime number infinity description translates directly single line raku say first isprime print first nonprime map number one greater cumulative product grep isprime prime number inf infinity course yet familiar raku sandwiched middle statement might seem darn scary happily solution also happens pure functional easy factor offending linenoise hide away function soothing name sub partialproductsof list could write say first isprime print first nonprime map number one greater partialproductsof cumulative product grep isprime prime number inf infinity still arcane comfort could go whole hog refactor entire thing way plain english sub successorof listmap sub theprimes inf grep isprime sub firstnonprime listfirst isprime give u say firstnonprime successorof partialproductsof theprimes code nt get much declarative selfdocumenting unless course also happen know definition euclid number sub euclidnumber successorof partialproductsof theprimes case entire solution original description problem say firstnonprime euclidnumber raku grandparent executable linenoise damian
78,Lobsters,perl,Perl,Scripting Languages to Be Removed,https://mjtsai.com/blog/2019/06/04/scripting-languages-to-be-removed/,scripting language removed,xcode beta release note lean marcin krzyzanowski joe groff wood borer lobster reddit hacker news dr drang microsoft hacker news python store page kyle crawford curtis wilcox brett terpstra brent simmons peter n lewis brent simmons brent simmons nick heer applescript mac macos catalina perl programming pyobjc python ruby top post unix window comment r feed,xcode beta release note scripting language runtimes python ruby perl included macos compatibility legacy software future version macos scripting language runtimes available default may require install additional package software depends scripting language recommended bundle runtime within app use python recommended version included macos compatibility legacy software future version macos include python instead recommended run terminal big deal term philosophy apple touted builtin unix tool suite mac advantage also mean lot practical change installers applescripts longer lean scripting language marcin krzyzanowski year microsoft proud add new terminal app full support bash everything please developer apple decided deprecate scripting macos replace bash zsh explanation given curious maybe valid reason joe groff downside stuff getting included could never upgraded apps would depend exact version shipped decade ago still make sense scripting language huge apple update remove old version timetotime previously update wood borer guess kid think good change one old version python perl instead ten play path pick right one like window update see also lobster reddit hacker news update dr drang one great value apple providing scripting language macos make easy regular user turn occasional scripters people program time seem forget terrifying idea writing code never done even power user quail idea scripting done time survived first step learning script install python via homebrew simply going pas new scripters care example applesupplied python date reason python perfectly good starting point perl ruby removing scripting language also mean u know use send script friend help automate task perfectly happy slum python oh dear use format function instead fstrings take microsoft via hacker news microsoft involved python community twelve year currently employ four key contributor language primary runtime growth python incredible find home among data scientist web developer system administrator student roughly half work already happening window finally may window update completing picture python continues remain completely independent operating system every install window include python command take directly python store page update kyle crawford scripting runtimes bridge included o like swift comfortable swift also like ruby python often better fit job written lot swift still write lot ruby python update curtis wilcox although multiple apps needing copy perl instance might seem inefficient developer need include runtime exact library use full scripting language installation apps already taken route keep using java many modern apps rely electron framework includes node run javascript look size different part installation see shipping separate copy runtime would ever come ahead electron framework single app larger entire systemprovided perl brett terpstra considering integral runtimes daily use mac real annoyance fully capable installing still find decision baffling might huge blow impediment anyone us project terminal nerd question wrap head around real benefit apple line reasoning great keeping runtimes date actually boon requiring le effort keep script working every o release runtimes even touted selling point past microsoft starting add tool like default window install including sexy terminal apple moving opposite direction brent simmons one people use whatever system peter n lewis something occurred break every single script usrbinperl irretrievably since usrbin sip protected directory every one need edited brent simmons install pythonrubyetc manually gatekeeping might easy pro easy everybody brent simmons going ask person figure install ruby oneclick installers going ask figure one actually reputable safe curiosity like one way new developer made worry le mac tinkerable outofthebox fewer developer get nick heer something feel arbitrary inherently wrong beautiful thing macos visually coherent interaction layer user spend time anyone including lunkhead like fire terminal time run script capability one fingertip surface well program like homebrew macports make mac feel limitless applescript mac macos catalina perl programming pyobjc python ruby top post unix window stay uptodate subscribing comment r feed post
79,Lobsters,perl,Perl,Why I love Perl 6,http://blogs.perl.org/users/damian_conway/2019/05/why-i-love-perl-6.html,love perl,weekly challenge,quietly playing along home weekly challenge week first task write script find first square number least distinct digit solution obviously lazily square every number infinity comb square digit looking five unique numeral immediately output first square find translates directly raku map first combunique say elegance solution love raku love raku solution seems scary infinite lazy concurrent pipelined unicoded declarative functional much like something erlang guru would code raku equally allow write plain simple version one imperative iterative block structured variabledriven pure ascii moreorless exactly write perl even c loop n nsquared n uniquedigits split nsquared skipempty uniquedigits uniquedigits say nsquared last could easily write solution somewhere two extreme whatever level complexity decomposition happens sweet spot personal comfort zone example sub findspecialsquare inf n return say findspecialsquare language know raku let write code precisely way suit best whatever happens team current level coding sophistication whichever style later find readable therefore easiest maintain love raku damian
80,Lobsters,perl,Perl,Perl 5.30 released,https://metacpan.org/pod/release/XSAWYERX/perl-5.30.0/pod/perldelta.pod,perl released,name description notice perl core enhancement limited variable length lookbehind regular expression pattern matching experimentally supported pattern perlre pattern perlre upper limit specifiable regular expression quantifier form doubled unicode supported http http http wildcards unicode property value specification partially supported wildcards property value perlunicode qrn name supported turkic locale seamlessly supported possible compile perl always use threadsafe locale operation eliminate opassign macro usage core mean something build incompatible change assigning nonzero fatal assigning nonzero fatal perldeprecation delimiters must grapheme use unassigned code point nonstandalone grapheme delimiter perldeprecation formerly deprecated us unescaped left brace regular expression pattern illegal unescaped left brace regular expression perldeprecation previously deprecated sysread syswrite handle fatal perl false conditional prohibited perl fatalize perl fatalize unqualified use dump perl remove file glob glob perl longer return malformed perl set digit common script legal script run another script perl json pp enables allownonref default deprecation x code use various macro dealing perldeprecation performance enhancement perl perl perl http modetree perl perl module pragmata updated module pragmata archive tar b b concise b deparse bignum byte carp compress raw compress raw zlib config extension config perl v cpan data dumper data dumper dbfile deprecate devel peek devel ppport digest sha encode errno experimental extutils cbuilder extutils manifest extutils miniperl extutils parsexs perl feature file copy file find perl file glob file path file spec cwd file temp filter util call gdbmfile http tiny langinfo io ipc cmd json pp json pp lib locale code math bigint cpan math bigint fastcalc math bigrat module corelist module load module metadata ndbmfile net ping odbmfile parent perlfaq perlio encoding perlio scalar posix sdbmfile sigtrap storable perl perl test simple thread queue thread shared time hire time local time piece unicode collate unicode ucd user grent var perl version warning x apitest x typemap removed module pragmata b debug locale code perl documentation change existing documentation perlbug perlorg perlop perl x perlfunc perl diagnostics perldiag change existing diagnostics incompatible change type arg must perl prototype terminated perl utility change configuration compilation perl testing perl perl perl perl platform support platformspecific note perl perl perl internal change perlapi perl selected bug fix perl perl perl perl perl perl perl perl sdbmfile perl perl perl perl perl perl perl set digit common script legal script run another script perl perl userdefined character property perlunicode perl perl perl perl perl perl acknowledgement reporting bug http rtperlorg http wwwperlorg perlbug security vulnerability contact information perlsec give thanks see also,name perldelta new perl description document describes difference release release upgrading earlier release first read describes difference notice downgradedecode longer marked experimental perl core enhancement limited variable length lookbehind regular expression pattern matching experimentally supported using lookbehind assertion like foo ba r previously would generate error refuse compile compiles maximum lookbehind character raise warning new experimental vlb warning category caution precise behavior subject change based feedback use field see pattern perlre pattern perlre upper limit n specifiable regular expression quantifier form n doubled meaning unbounded upper quantifier remains unchanged match time platform one c language short variable byte long unicode supported change unicode release cycle perl jump unicode perl unicode perl detail unicode change see http http http unicode differs addition single character new japanese era name wordbreak property past perl release remains tailored behave line expectation perl user mean sequential run horizontal white space character broken apart kept single run unicode changed past version line perl left several white space character causing break tab break space figure space decided continue use previous perl tailoring regard wildcards unicode property value specification partially supported something like regular expression pattern qr p nv x z match unicode code point whose numeric value inclusive could match thai bengali digit whose numeric value mark another step implementing regular expression feature unicode consortium suggests property supported remainder planned detail wildcards property value perlunicode qrn name supported previously error evaluate named character n within single quoted regular expression pattern whose evaluation deferred normal place restriction removed turkic locale seamlessly supported turkic language different casing rule language character uppercase latin capital letter dot lowercase latin small letter dotless unicode furnishes alternate casing rule use turkic language previously perl ignored us detects operating turkic locale possible compile perl always use threadsafe locale operation previously call used perl compiled multithreaded always enable add accflagsdusethreadsafelocale configure flag eliminate opassign macro usage core macro still defined longer used core drv mean something ddebugging build adding verbose flag dv dr flag turn possible regular expression debugging incompatible change assigning nonzero fatal setting nonzero value deprecated since perl throw fatal error see assigning nonzero fatal perldeprecation delimiters must grapheme see use unassigned code point nonstandalone grapheme delimiter perldeprecation formerly deprecated us unescaped left brace regular expression pattern illegal avoid breaking code unnecessarily instance issued deprecation warning remain legal nondeprecation warning raised see unescaped left brace regular expression perldeprecation previously deprecated sysread syswrite handle fatal calling sysread syswrite send recv handle whether applied explicitly implicitly fatal deprecated perl two problem calling function handle four function paid attention flag layer completely ignored handle encoding layer would treated layer compression completely ignored without flag sysread recv would read handle skipping validation layer validation could lead invalidly encoded perl scalar perl false conditional prohibited declaration x longer permitted perl fatalize special variable long deprecated throw exception used perl fatalize unqualified use dump dump function long discouraged may longer used unless fully qualified ie core dump perl remove file glob glob file glob glob function long deprecated removed throw exception advises use file glob bsdglob instead perl pack longer return malformed croak would otherwise return string contains malformed protects potential security threat considered bug fix well perl set digit common script legal script run another script several set digit common script familiar also x x fullwidth digit zero fullwidth digit nine several set use mathematical notation mathematical doublestruck digit set able appear script run say greek design overlooked ascii digit design flawed fixed bug fix incompatibility perl digit run still come set ten digit json pp enables allownonref default json x changed policy enabled allownonref default json pp also enabled allownonref default deprecation x code use various macro dealing deprecation scheduled become fatal delayed due problem showed cpan module detail affected see perldeprecation performance enhancement translating code point represents done via deterministic finite automaton speeding typical example ord requires fewer instruction performance checking sequence byte valid similarly improved using dfa eliminate recursion finalizeop perl handful small optimization related character folding character class regular expression optimization iv uv conversion perl speed integer stringification algorithm processing two digit time instead one perl improvement based lgtm analysis recommendation http modetree perl perl code optimization regcompc regcomph regexecc regular expression pattern matching thing like qr significantly sped ascii character class get speed one complicated depends underlying bit pattern character differs ascii ebcdic platform case pair like qr gg included module pragmata updated module pragmata archive tar upgraded version b upgraded version b concise upgraded version b deparse upgraded version bignum upgraded version byte upgraded version carp upgraded version compress raw upgraded version compress raw zlib upgraded version config extension upgraded version config perl v upgraded version due new configuration variable influence binary compatibility usethreadsafelocale cpan upgraded version data dumper upgraded version data dumper avoids leaking croaking dbfile upgraded version deprecate upgraded version devel peek upgraded version devel ppport upgraded version digest sha upgraded version encode upgraded version errno upgraded version experimental upgraded version extutils cbuilder upgraded version extutils manifest upgraded version extutils miniperl upgraded version extutils parsexs upgraded version outlist parameter longer incorrectly included automatically generated function prototype perl feature upgraded version file copy upgraded version file find upgraded version file find dontusenlink default platform perl variable isvms initialized file glob upgraded version file path upgraded version file spec upgraded version silence cwd warning android build targetsh defined file temp upgraded version filter util call upgraded version gdbmfile upgraded version http tiny upgraded version langinfo upgraded version io upgraded version iocompress upgraded version add support io uncompress zstd io uncompress unlzip binmodein binmodeout option noops file readwritten binmode ipc cmd upgraded version json pp upgraded version json pp json x enables allownonref default lib upgraded version locale code upgraded version math bigint upgraded version bnok support full kronenburg extension cpan math bigint fastcalc upgraded version math bigrat upgraded version module corelist upgraded version change b opprivate config module load upgraded version module metadata upgraded version properly clean temporary directory testing ndbmfile upgraded version net ping upgraded version odbmfile upgraded version pathtools upgraded version parent upgraded version upgraded version debugging threaded code longer deadlock db sub db lsub perlfaq upgraded version perlio encoding upgraded version warning enabled setting warnonerr flag perlio encoding fallback produced warning enabled use warning setting w perlio scalar upgraded version podlators upgraded version posix upgraded version upgraded version sdbmfile upgraded version sigtrap upgraded version storable upgraded version storable longer probe recursion limit build time perl others metasploit exploit code included test detection caused antivirus detection least one av suite exploit code removed replaced simple functional test perl test simple upgraded version thread queue upgraded version thread shared upgraded version added support extra tracing locking requires ddebugging extra compilation flag time hire upgraded version time local upgraded version time piece upgraded version unicode collate upgraded version unicode ucd upgraded version user grent upgraded version upgraded version var upgraded version varspm longer disables nonvars strict checking strict var enabled perl version upgraded version warning upgraded version x apitest upgraded version x typemap upgraded version removed module pragmata following module removed core distribution future release time need installed cpan distribution cpan require module need list prerequisite core version module issue deprecated category warning alert fact silence deprecation warning install module question cpan note rare exception fine module encouraged continue use disinclusion core primarily hinge necessity bootstrapping fully functional cpancapable perl installation usually concern design b debug longer distributed core distribution continues available cpan b debug locale code removed request author continues available cpan locale code perl documentation change existing documentation attempted update documentation reflect change listed document find missed send email perlbug perlorg longer null empty line doc terminator perlop refer behaviour tr delimiter apostrophe clarified particular hyphen nt special x nt interpolated perl entry x perlfunc clarified indicate symbolic link followed test clarification behaviour reset expr try clarify ref qrxx return regexp rather regexp perl diagnostics following addition change made diagnostic output including warning fatal error message complete list diagnostic message see perldiag change existing diagnostics noted incompatible change deprecation warning unescaped left brace regex deprecated fatal perl passed regex marked changed nondeprecation warning unescaped left brace regex passed regex marked specifying without anything brace yield fatal error message empty previously number digit mean wording used kind error similar construct p within scope experimental feature use strict specifying x without anything brace yield fatal error message empty x previously number digit mean wording used kind error similar construct p legal though wise empty x outside strict silently generates nul character type arg must attempt push pop etc hash glob produce message rather complaining longer work scalar perl prototype terminated file line number reported error perl dr use debug compiled regex engine program displayed used use two different spelling infinity infinity infty us latter exclusively spelling around longest utility change configuration compilation normally threadsafe locale function used threaded build possible force use unthreaded build system available including accflagsdusethreadsafelocale option configure improve detection memrchr strlcat strlcpy improve configure detection memmem perl multiple improvement fix dperlglobalstruct build option fix dperlglobalstructprivate build option testing tlibcroakop perl separate error push etc hashglob topsvleakt perl add test goto sub overload leaking split trefoldgrindt multiple test file fix intermittent test failed due race condition surface parallel testing perl thoroughly test paragraph mode using new test file tioparagraphmodet perl test tioeintrt caused process hang darwin test skipped version darwin platform support platformspecific note hpux obscure problem pack compiling hp cansic fixed disabling optimization pppackc mac o x perl build testing process mac o x duseshrplib build compatible mac o x system integrity protection sip sip prevents binary bin place passed dyldlibrarypath environment variable purpose prevents dyldlibrarypath passed shell prevents variable passed testing build process running perl could nt find libperldylib work around initial build perl executable expects find libperldylib build directory library path adjusted installation point installed library perl support readded cygwin cygwin nt make cuserid visible mingw math function available window usecplusplus build option long available nmake dmake also available gmake nmake makefile longer default visual c old version unlikely widely used today result requirement specify cctype since obvious choice modern version default instead failure specify cctype result error output build stop dmake gmake makefiles automatically detect compiler used require cctype set feature yet added nmake makefile sleep warning enabled useimpsys build longer warns sleep timeout large perl support compiling perl window using microsoft visual studio containing visual c added socket set protocol address family socket type combination found perl window server platform sdk build early compiler tool accidentally broken perl fixed internal change sizing pas eliminated regular expression compiler extra pas may instead needed case count number parenthetical capture group new function mystrtod perlapi synonym strtod available signature libc strtod provides strotod equivalent behavior platform using best available precision depending platform capability configure option handling localerelated issue radix character dot comma added newsvsvnomg copy sv without processing get magic source perl forbidden malloc ptrdifftmax byte much code including c optimizers assumes data structure larger catch attempt overflow happens two new regnodes introduced equivalent exact exactfu except contain code point requires representmatch hence target string nt know ca nt possibly match without needing try printbytesforlocale defined debugging prior nt get defined unless lccollate defined platform selected bug fix compilation dperlmemlog dnolocale fixed perl introduced index optimization comparing indirectly eg optimization triggered inside clause caused warning argument nt numeric smart match fixed perl new inplace editing code longer leak directory handle perl warning produced constant folding operation overloaded value longer produce spurious use uninitialized value warning perl fix mutator seen lex perl pack u invalid uuencoding properly nul terminates zerolength sv produced perl improve debugging output calloc call dm perl regexp script run failing permit ascii digit case perl unixlike system supporting platformspecific technique determining x perl failed fall back generic technique platformspecific one fails example linux system proc mounted regression perl perl sdbmfile robust corrupt database file improvement make sdbm file suitable interchange format perl binmode fh binmode fh raw properly remove flag default crlf io layer perl experimental reference aliasing feature misinterpreting array hash slice assignment localised eg interpreted local perl sort subname within eval expr expr upgraded could panic subname nonascii perl correctly handle realloc modifying errno success modification nt visible perl user since realloc called implicitly interpreter modification permitted c standard observed freebsd perl perl expose posix getcwd internals getcwd available intended use cwdpm bootstrapping may removed changed without notice fix bootstrapping issue building perl directory ancestor directory nt readable perl pack longer return malformed croak would otherwise return string contains malformed protects potential security threat perl see set digit common script legal script run another script regular expression matching longer leaf stale length magic updating r could result length r returning incorrect value reduce recursion ops perl prevent stack overflow processing extremely deep op tree avoid leak multiconcat overloading perl handling userdefined p property see userdefined character property perlunicode rewritten c instead perl speed thing process several inconsistency bug fix made error message minor wording change essentially new way integrated regex error handling mechanism mark position input error occurred possible previously message also contain additional backtracelike information case error occurs deep nested call userdefined property implemented perl subroutine certain highly constrained naming convention documented previously sub would current package package unspecified turned true case recursive call treated infinite recursion previously would cause interpreter panic cause regex pattern fail compile similarly error likely would lead panic pattern failing compile old mechanism detect illegal range definition property range max must smaller range min otherwise pattern fails compile intention sub called lifetime program property definition immutable relaxed could called compilation potentially second time noni sub passed parameter indicating however practice instance broken multiple call possible fixed besides noni case way sub called multiple time component defined yet example suppose sub isa whose definition known compile time turn call isb whose definition yet known isa called time pattern appears compiled isa also call isc definition known isc called race long hang one thread compiling property another simultaneously fixed fixed failure match properly exactfish regnode finite length hold string matched length exceeded second node used next segment string many regnodes needed care taken break string order deal multicharacter fold unicode correctly want break string place could potentially middle multicharacter fold back one character leaving shorter exactfish regnode backing mechanism contained offbyone error perl bare eof call previous file handle return true perl failing compile format abort compilation like error subparses could leave parser strange state possibly crashing perl compilation continued perl inplace edit still progress global destruction process exit code stored zero perl treat inplace edit successful replacing input file output produced allows code like perl ne print foo last replace input file code like perl ne print foo die partly resolve perl regression caused following code fail close stdin open child wc l child stdin would closed exec fixed fixed issue compiling regexp containing compiletime runtime code block could lead trying compile something invalid syntax fixed build failure dnolocalenumeric dnolocalecollate perl prevent test extbtstrictt skipped perl di node ending beginning exactf want two exactfu joined together optimization form s s s s sequence multicharacter sequence may match differently ui di acknowledgement perl represents approximately month development since perl contains approximately line change across file author excluding autogenerated file documentation release tool approximately line change pm c h file perl continues flourish fourth decade thanks vibrant community user developer following people known contributed improvement became perl aaron crane abigail alberto simões alexandr savca andreas könig andy dougherty aristotle pagaltzis brian greenfield chad granum chris bingo williams craig berry dagfinn ilmari mannsåker dan book dan dedrick daniel dragan dan kogai david cantrell david mitchell dominic hargreaves e choroba ed j eugen konkov françois perrad graham knop hauke hmerijn brand hugo van der sanden jakub wilk james clarke james e keenan jerry hedden jim cromie john sj anderson karen etheridge karl williamson leon timmermans matthias bethke nicholas clark nicolas r niko tyni pali petr písař phil pearl lobbes richard leach ryan voots sawyer x shlomi fish sisyphus slaven rezic steve hay sullivan beck tina müller tomasz konojacki tom wyant tony cook unicode consortium yves orton zak b elep list almost certainly incomplete automatically generated version control history particular include name much appreciated contributor reported issue perl bug tracker noteworthy release large number bug fix made possible sergey aleynikov high quality perlbug report issue discovered fuzzing afl many change included version originated cpan module included perl core grateful entire cpan community helping perl flourish complete list perl historical contributor please see author file perl source distribution reporting bug find think bug might check perl bug database http rtperlorg may also information http wwwperlorg perl home page believe unreported bug please run perlbug program included release sure trim bug tiny sufficient test case bug report along output perl v sent perlbug perlorg analysed perl porting team bug reporting security implication make inappropriate send publicly archived mailing list see security vulnerability contact information perlsec detail report issue give thanks wish thank perl porter work done perl running perlthanks program perlthanks send email perl porter list show thanks see also change file explanation view exhaustive detail changed install file build perl readme file general stuff artistic copying file copyright information
81,Lobsters,perl,Perl,"After 2020, European Perl conferences are over",https://www.reddit.com/r/perl/comments/bmgy8q/after_2020_european_perl_conferences_are_over/,european perl conference,,sorry reason reddit ca nt reachedretry
82,Lobsters,perl,Perl,Perl 6 Weekly - 2019.16 Easter Down,https://p6weekly.wordpress.com/2019/04/23/2019-16-easter-down/,perl weekly easter,http http perl toolchain summit reddit weekly challenge fourth perl weekly challenge babylon pascal perl hacker news perl guru reviewing perl conference american perl conference published april newsletter problem solving repo result first issue problem solving repository problem solving language creator conversation blog post puppy meeting seattle guido van rossum james gosling larry wall anders hejlsberg gsoc gsod applied slot tireless work loop use use loop learn grammar commit log exploring new teaching method commit log project creating grammar picat diy cryptography diy cryptography perl scope wrapping wrapping scope reddit hosting archaic decision grant committee creation interactive perl course need stinkin hosting rperl core development past week question perl meanwhile facebook meanwhile meanwhile twitter perl comment perl module winding perl toolchain summit like,year easter started notsogood friday main perl server hardware became unresponsive nobody able figure status server hardware unfortunately turned impossible reach people charge dns domain get dns changed point replacement server meantime please use http temporary replacement http focus getting thing running assured event evaluated provide situation resilient event specifically upcoming perl toolchain summit thank patience hope able resume normal service soon reddit comment weekly challenge quite blog post fourth perl weekly challenge blog post perl solution arne sommer blogpost babylon pascal perl related last week challenge spurred quite discussion hacker news mohammad anwar also would like invote perl guru reviewing perl weekly challenge entry written perl perl conference organizer year american perl conference published april newsletter inviting register attendance workshop given actual conference problem solving repo aleksdaniel jakimenkoaleksejev merged result first issue problem solving repository used working perl issue require discussion andor consensus even though change problem solving process good indication issue currently classified bug settled outside context implementation rakudo perl issue aspect rakudo perl could consider bug implementation please add issue problem solving repo language creator conversation bhagyashree r also wrote blog post latest puppy meeting seattle hosted guido van rossum james gosling larry wall anders hejlsberg gsoc gsod perl foundation applied slot google summer code meanwhile application google seasonofdocs improve documentation perl also done thanks tireless work jj merelo loop use jj merelo posted little explanation use loop learn grammar commit log jeff goff exploring new teaching method learning looking commit log project creating grammar picat example diy cryptography arne sommer explores way looking cryptography diy cryptography perl intended learning resource production tool scope wrapping wenzel p p peppmeyer look way injecting behaviour method core object ability switch additional behaviour onoff blog post titled wrapping scope reddit comment hosting archaic brian foy responds decision grant committee grant creation interactive perl course blog post titled need stinkin hosting rperl comment core development ticket status past week timo paulssen improved stability moarvm bytecode adding many sanity check inspired result many fuzzing run also implemented experimental heap dump opcode used various introspection module telemetry jonathan worthington fixed issue selfreferencing structure targetparse also added mixin named parameter metamodel primitivescreatetype ben davy fixed issue jitting openbsd issue nqphome perlhome environment variable patrick böker fixed issue building openbsd christian bartolomäus fixed another long standing issue jvm backend elizabeth mattijsen added test rakudo spectest testing aspect sprintf formatting quite smaller fix improvement question perl meanwhile facebook meanwhile meanwhile twitter perl comment perl module new module updated module winding quiet week long weekend good weather next week perl weekly also published tuesday time account travel truly back perl toolchain summit see like like loading related
83,Lobsters,perl,Perl,2019.15 Schrödinger,https://p6weekly.wordpress.com/2019/04/15/2019-15-schrodinger/,schrödinger,junction perl gadts superposition perl hacker news weekly challenge third perl weekly challenge polyglot solution perl toolchain summit plan coming perl toolchain summit cpanel perl devroom spanish fosdem perl devroom eslibre proposal repository perl tutorial nightly docker image creating perl docker image every night tony dell lucky arch linux user comma ide community edition available arch linux user work like charm grant voting result decided proposal complete interactive perl course exercise facebook picat spacing grammar picat language facebook reddit language creator conversation guido van rossum james gosling larry wall anders hejlsberg blog post video graphing db schema turn create table statement graph reddit owasp perl wiki perl perl framework open web application security project toggle grayscale inspired toggling macos screen blackandwhite colour remarkably simple core development past week question perl meanwhile facebook meanwhile meanwhile twitter perl comment perl module winding like,new perl blogger tyler aearnus describes discovery junction perl blog post called gadts superposition perl really unique flexible way looking problem one highly inspired functional dataoriented paradigm hacker news comment weekly challenge quite blog post third perl weekly challenge blog post perl solution note polyglot solution nick logan run perl perl perl toolchain summit neil bower report plan coming perl toolchain summit part brought cpanel perl devroom spanish fosdem perl devroom june eslibre one could consider spanish fosdem please add proposal presentation pull request proposal repository far look like perl tutorial menu already nightly docker image patrick spek describes script creating perl docker image every night various linux flavour compare work tony dell done lucky arch linux user appears comma ide community edition available arch linux user activated arch user repository package manager appears work like charm grant voting result perl foundation grant committee decided proposal round complete interactive perl course exercise andrew shitov sad news maybe last heard facebook comment picat spacing jeff goff describes work creating grammar picat language exposed whitespace gotcha grammar facebook reddit comment language creator conversation puppy event guido van rossum james gosling larry wall anders hejlsberg sat together neatly summarised blog post david cassel extra nice since audio video bad graphing db schema edouard klein got programming perl nice command line script turn create table statement graph reddit comment owasp perl wiki charlie gonzalez noticed perl perl framework well represented open web application security project volunteer invited take necessary action remedy situation toggle grayscale ricky morse got inspired python article toggling macos screen blackandwhite colour perl solution nativecall remarkably simple core development ticket status past week jonathan worthington improved inlining native variable defined outside scope used made code fast also removed unnecessary code generated initializing native variable work made spectest faster christian bartolomäus fixed semilong standing issue jvm backend elizabeth mattijsen fixed issue preventing reproducible build packaging rakudo perl also introduced warning shown main powered commandline script possibly unexpectedly waiting input keyboard smaller fix improvement question perl meanwhile facebook meanwhile meanwhile twitter perl comment perl module new module updated module winding week nice new speed improvement nice crop blog post feel like spring see next week uplifting perl news like like loading related
84,Lobsters,perl,Perl,Perl 6 nightly Docker images,https://www.tyil.nl/post/2019/04/11/perl6-nightly-docker-images/,perl nightly docker image,memory related issue another branch possible fix docker hub dockerfiles using gittyilnl perl weekly post cpan upload notifier bot,due slow release rakudo star actually release new version last month set make docker image personal use based regular perl release discovered memory related issue another branch possible fix changed mind make nightlies based master branch related project instead way could get fix faster help testing needed nightlies running available docker hub anyone use also find dockerfiles using gittyilnl case interested suggestion improve process timing public release image could better though two week ago nightlies released well tony odell noted perl weekly post greatly appreciate effort going abandon work put image instead tried make smaller image provide different base maybe eventually learn image improve docker support entire community together easiest thing work providing different base mean image following four base image alpine debian ubuntu voidlinux way people option regard using distribution tooling comfortable one could also opt use familiar better supported base image development testing module use smaller image production release size image tony tonyodellrakudonightly latest time writing post image range alpinelatest voidlinuxlatest though completely fair comparison image stripped lot tooling used often required build perl module making unusable default shape many project remedy particular issue also created dev image image come number additional package installed allow zef work get dependency installed without requiring endusers search package reduce complexity using image endusers take dev image account comparing size image range alpinedevlatest voidlinuxdevlatest much closer rakudonightly image interested trying image may interested way using image reference currently cpan upload notifier bot using nightly image dockerfile debiandevlatest install run apt update apt install libssldev uuiddev copy run zef install depsonly test see dockerfile start using dev image name stage install still contemplating include libssldev dev image seems pop lot part dev image install manually go uuiddev copy instruct zef install dependency required debianlatest env workdir app run mkdir p run mkdir p run apt update apt install libssldev postgresqlclient copy bin bin copy lib lib copy frominstall usrlocal usrlocal run mkdir p vardockermeta run date ft tz vardockermetabuilddate cmd binbot start new stage set environment variable nt use ilib end set workdir clean directory work next set runtime dependency application continue copy bin lib directory containing application copy usrlocal install stage usrlocal perl installed zef installs dependency way dev image used building dependency needed finished dependency end final image going run production lastly set build date time image file application refer later displayed irc bot reply bot command verify running bot one built finally cmd instruction run application hope display image used application reasoning made way suggestion issue feel free contact whatever way suit best find contact detail homepage blog
87,Lobsters,perl,Perl,93% of Paint Splatters are Valid Perl Programs,http://colinm.org/sigbovik/,paint splatter valid perl program,paint splatter valid perl program read paper view gallery pretty perl program google doc pdf entire sigbovik proceeding supplementary material paint splatter tarball paintsplatter image erratum,paint splatter valid perl program published april tldr read paper view gallery pretty perl program paper aim answer longstanding open problem programming language community possible smear paint wall without creating valid perl answer question affirmative possible smear paint wall without creating valid perl program employ empirical approach using optical character recognition ocr software find merely paint splatter parse valid perl analyze property paintsplatter perl program present seven example paint splatter valid perl program accepted publication sigbovik held april pittsburgh winner unwitting participation ribbon unwelcome brand affixed paper determined careful scrutiny included genuine artifact thereby furthering admirable cause open science fruitful procrastination read google doc download pdf grab entire sigbovik proceeding page supplementary material paint splatter single page along valid perl source code corresponding valid written red image parse valid perl program different ocr setting recognized multiple valid perl program chose one seemed interesting according aesthetic sense tarball paintsplatter image used main dataset paper source code available yet bad github erratum paint splatter perl program nt recognize interesting sigbovik submission deadline example splatter recognized ocr string lerzfijglpfijij evaluates number perl image recognized string also evaluates number perl another surprising program shown ocr recognizes image string c z fn evaluates string c perl finally image recognized string e evaluates string e perl
88,Lobsters,perl,Perl,Opensource vs Big Companies,https://twitter.com/shadowcat_mst/status/1108207238689243136,opensource v big company,,detected javascript disabled browser would like proceed legacy twitter yes
89,Lobsters,perl,Perl,Writing a WebSocket Client in Perl 5,https://greg-kennedy.com/wordpress/2019/03/11/writing-a-websocket-client-in-perl-5/,writing websocket client perl,seem convoluted mojolicious use anyevent websocket client net async websocket client client echo test service websocket echo server protocol websocket client tripped first pay attention io socket inet example code running example ssl support io socket ssl net ssl net ssleay nonblocking io setsockopt io socket timeout socket timeout made easy nonblocking sslaware client,websockets latest way provide bidirectional data transfer http application replace outdated workarounds like ajax repeated polling comet etc websockets special protocol atop http run tcpip wrapped ssl security http web technology seems developed javascript people exclusively javascript people working outside web browser nodejs server seem convoluted world built live itbasic perl support documentation websockets difficult find mojolicious framework specifically useragent module native websockets support act client looking info using websockets lower level without mojo framework hopefully post shed light use perl connect remote server using websockets get access sweet realtime service using favorite languagefirst use anyevent websocket client net async websocket client depending preference async framework package already done hard work combining two package probably use anyway protocol websocket client encoding decoding websocket frame anyevent crossplatform nonblocking io messy tcp socket stuff already established status luddite desire know really going let try reinvent wheel write clienta client echo test servicethe goal project interoperate websocket echo server w echowebsocketorg echo server simply listens message sent return message caller enough build simple client customize service two thing need make work plain internet socket managing tcp connection remote server anda protocol handler encoding decoding data websocket formatthe second part already done u protocol websocket client given stream byte identify websocket frame parse data server take data program encapsulate sending tripped first pay attention protocol websocket actually anything tcp socket meaning send receive data class responsible thing packingunpacking data generating properly formatted handshake initiating websocket connection sending close message server signalling intent disconnectgiven protocol websocket client tcp socket stuff manage fortunately core module io socket inet use protocol websocket client also provides hook point websocket flow insert handler point let get started codeexample code usrbinenv perl use use warning simple websocket test client using blocking io greg kennedy core io socket inet creating socket internet use io socket inet protocol handler websocket http protocol use protocol websocket client uncomment line io socket inet enables autoflush socket operation die usage url unless scalar argv url argv protocol websocket take full url io socket us host port regex section retrieves hostport url proto host port path url proto wsw host port path host host path path defined proto defined port proto proto port port elsif defined port port port port proto w else proto w elsif defined proto proto proto proto eq w port else port else proto w port else die failed parse hostport url say attempting open blocking inet socket proto host port create basic tcp socket connected remote server tcpsocket io socket inet new peeraddr host peerport proto port proto tcp blocking die failed connect socket create websocket protocol handler nt actually anything socket encodes decode websocket message send say trying create protocol websocket client handler url client protocol websocket client new url url helper function take input stdin exit entered disconnect quit otherwise send value remote server sub getconsoleinput say type exit quit anything else message server get something user input input stdin chomp input input eq input eq exit client disconnect exit else client write input set various method w protocol handler write take buffer websocket packet send socket client write sub client shift buf syswrite tcpsocket buf connect happens handshake succeeds connected service client connect sub client shift may wish set global variable isconnected put logic nothing say successfully connected service getconsoleinput error print console happen handshake fails whatever reason client error sub client shift buf say error websocket buf tcpsocket close exit read method called whenever complete websocket frame successfully parsed simply print decoded packet screen depending service may eg call decodejson buf whatever client read sub client shift buf say received socket buf turn send message getconsoleinput set call connect client cause protocol object create handshake write using onwrite method specified includes sysread tcpsocket say calling connect client client connect go loop calling sysread passing result client read client protocol object know data call hook onconnect onread onread onread accordingly tcpsocket connected await response recvdata bytesread sysread tcpsocket recvdata defined bytesread die sysread tcpsocket failed elsif bytesread die connection terminated unpack response trigger handler complete packet read client read recvdata running examplesave file blockingclientpl execute passing url command line go well connect remote service prompted type message sending message return exact message server typing exit send final close packet server exit program example session look like blockingclientpl w echowebsocketorg attempting open blocking inet socket w trying create protocol websocket client handler w echowebsocketorg calling connect client successfully connected service type exit quit anything else message server hello received socket hello type exit quit anything else message server seems working received socket seems working type exit quit anything else message server exit ssl supportthe example work nonencrypted websockets w layer atop http also possible run websockets http using ssl usually port instead secure websocket url begin w instead w however net socket inet builtin support ssl thus attempting connect secure test server w echowebsocketorg cause program hang never complete handshake speaking unencrypted http server expecting encrypted httpthere way around first replace io socket inet something sslaware io socket ssl module function transparently handle ssl may also try module provides ssl existing inet socket net ssl truly hardcore use net ssleay perl binding openssl nonblocking iowhile example work major drawback us blocking io mean socket communication happens foreground calling send recv socket object program halt point data available waiting recv data anything else work ok echo test remember websockets bidirectional able juggle multiple thing example service require send periodic heartbeat keep connected already blocking recv send necessary packet even echo example limited ideally able send two message recv two response design example script forced taking turn pattern insteadagain way around halfsolution continue use blocking io timeout period allows wait certain time recv send data giving function adjust socket parameter setsockopt way handle instead use io select select object let pool socket test data waiting thus multiplex input together asynchronous operation even underlying socket still blockyou also create socket nonblocking mode poll reading data available return immediately error ewouldblock abstraction io handling library io poll anyevent poe etc course going go route maybe said start use anyevent websocket client combine protocol websocket anyevent give clean nonblocking interface interacting remote web servicesfor detailed look method module handle recommend reading post io socket timeout socket timeout made easy mediuma nonblocking sslaware clienti go ahead modify client address two issue version us io socket ssl instead w connection io select handle nonblocking socket stdin thus enabling fully asynchronous connection websocket service initial connection us blocking connection initial handshake complete afterwards select used multiplex read tcp socket stdin time usrbinenv perl use use warning perl websocket test client greg kennedy io socket ssl let u open encrypted w connection use io socket ssl io select peek io socket activity use io select protocol handler websocket http protocol use protocol websocket client die usage url unless scalar argv url argv protocol websocket take full url io socket us host port regex section retrieves hostport url proto host port path url proto wsw host port path host host path path defined proto defined port proto proto port port elsif defined port port port port proto w else proto w elsif defined proto proto proto proto eq w port else port else proto w port else die failed parse hostport url say attempting open ssl socket proto host port create connecting socket sslstarthandshake dependent protocol let u use one socket work either ssl nonssl socket tcpsocket io socket ssl new peeraddr host peerport proto port proto tcp sslstarthandshake proto eq w blocking die failed connect socket create websocket protocol handler nt actually anything socket encodes decode websocket message send say trying create protocol websocket client handler url client protocol websocket client new url url set various method w protocol handler write take buffer websocket packet send socket client write sub client shift buf syswrite tcpsocket buf connect happens handshake succeeds connected service client connect sub client shift may wish set global variable isconnected put logic nothing say successfully connected service error print console happen handshake fails whatever reason client error sub client shift buf say error websocket buf tcpsocket close exit read method called whenever complete websocket frame successfully parsed simply print decoded packet screen depending service may eg call decodejson buf whatever client read sub client shift buf say received socket buf set call connect client cause protocol object create handshake write using onwrite method specified includes sysread tcpsocket say calling connect client client connect read handshake complete client h isdone recvdata bytesread sysread tcpsocket recvdata defined bytesread die sysread tcpsocket failed elsif bytesread die connection terminated client read recvdata create socket set select test loop see call read set io select new tcpsocket stdin call select see got data ready io select select set foreach readysocket ready read data ready socket recvdata bytesread sysread readysocket recvdata handler socket type readysocket stdin input user keyboard cat etc defined bytesread die error reading stdin elsif bytesread stdin closed ctrld eof say connection terminated user sending disconnect remote client disconnect tcpsocket close exit else chomp recvdata client write recvdata else input arrived remote websocket defined bytesread die error reading tcpsocket elsif bytesread remote socket closed say connection terminated remote exit else unpack response trigger handler complete packet read client read recvdata
90,Lobsters,perl,Perl,Report of German Perl Workshop 2019 in Munich,https://domm.plix.at/perl/2019_03_german_perl_workshop.html,report german perl workshop munich,perl talk highlight vue perl browser hackerspace look cooler cooler hackerspace perceptyx find human turn developer corion somebody bread board various thing haj moving mountain perl politics homemade tonic water perlcon current one venue mailing list analyzed talk perl perl talk deploying perl apps using docker gitlab kubernetes perlcon vuejs perl hacker glasgow version ich beim advent code gelernt habe advent code thanks sponsor lee,german perl workshop munich week german perl workshop time munich short train ride vienna stayed hotel near venue opposite huge fitness center allglass front one could watch people slave away treadmill preconf meeting took place lebanese restaurant jens wendy treated table meze starter followed three day perl talk ranging technical artsy political highlight seems nt learn vue run perl browser queuing get ramen worth hackerspace fancy light color beautiful soundshows harddisks playing ghostbusters theme song cool analog display panel controlled via irc perl keep getting look cooler cooler wish could find time properly play around attendee dinner took place different kind hackerspace ate much spanferkel thanks perceptyx sponsoring drink come absurdly big glass toomucheating part mitigated rather scarce catering break never managed get sandwich plenty soup second day introduced ice cream vending machine cafeteria fair orgas assumed people would go restaurant near venue lunch completely missing inherent laziness perl people simbabque showed u good idea find human turn developer ie hiring though missed talk like corion also talk advanced sql feature window function ctes heard somebody besides talking bread board various thing reduce atmosphere stop global warming one best talk haj showed u handy way german remember code point eine frage antworten question answer topped another hhgttginspired code sample might output assume would use encode qw fromto question final answer ultimate question say answer fromto question another absolute highlight lee talk moving mountain perl featured little perl great photo nice prop also nice chat old new friend perl tech music travel politics homemade tonic water kid life universe everything yef perlcon talked lot people future yef want organize future perlcons current one well thanks andrew three day immersion good perl vibe finally motivated continue discussion yef venue mailing list interested future perl event europe please join list post thought finally actual work one thing think promote event people outside perl community esp local hacker validate hunch usually lot talk relevant interesting perl hacker analyzed talk put category perl tech culture assigned talk one two category erring side perl calculated percentage talk minute category result perl perl tech culture least talk could interest people primarily care perl assume perl content interest maybe get echo chamber promote event least part explicitly nonperl group hm guess inverse also true visit nonperl event talk three talk expect accepted enough talk submission open second track choose deploying perl apps using docker gitlab kubernetes main talk year also give updated version perlcon riga vuejs perl hacker basically replay talk gave perl conference glasgow german short live demo much complex ui end problem sound recording talk available video check glasgow version ich beim advent code gelernt habe introducing advent code learned participating talk held international woman day started nice quote found tshirt hong kong feminist person belief social political economic equality sex thanks orgas speaker attendee sponsor also thanks lee epo managing video recording main room simbabque macgyver recording rig second room curious video turn looking forward next year german perl workshop erlangen footnote
91,Lobsters,perl,Perl,Perl Cannot Be Parsed: A Formal Proof (2008),https://www.perlmonks.org/?node_id=663393,perl parsed formal proof,available online man page ppi parse marpa good account discussion one perlmonks node adam kennedy show acme turing perl parsed formal proof meh tye reply dl select ppi reply dl reply rand rand reply dl select reply dl reply dl select perl parsed formal proof zentara reply jeffrey reply reply reply reply reply perl parsed formal proof adamk reply perl parsed formal proof reply ppi man page reply smalltalk reply dl reply dl select perl parsed formal proof errto reply dl reply reply perl parsed formal proof pajout reply perl parsed formal proof anonymous monk reply reply reply dl reply reply perl parsed formal proof viciousfrank reply dl reply dl select perl parser ca nt resolve ambiguity perl program context sensitive analysis reply perl parsed formal proof zby reply reply perl parsed formal proof anonymous monk reply reply dl select perl parsed formal proof anonymous monk reply dl select available online reply dl b deparse reply dl select,update aug reader interested topic node want look first instead series three article wrote perl review available online lay proof carefully thorough explanation three different version point post considered mainly historical interest one especial defect frame issue term static parsing implying similar issue dynamic parsing man page ppi adam kennedy conjecture perl unparseable suggests prove carry rigorous version proof put matter beyond doubt become interested question released alpha version general parser parse marpa cpan think allow static parsing large portion perl wanted know achievable parse marpa accepts bnf free infinite loop bnf recursive empty production even ambiguous marpa work parsing perl lot le cruft ad hoc solution parse marpa based new research combining lr precomputation earley algorithm far speed seems good quite acceptable utility purpose familiar history discussion term parse used strict sense mean static parsing taking piece code determining structure without executing strict sense perl program parse perl perl program executes perl code determine structure adam kennedy give good account discussion randal schwartz played key role one perlmonks node pivotal static parsing perl lot academic interest adam kennedy show needed automated documentation tool analyzer like perl critic presentation tool automatic transformation perl code etc proof follows meet current level rigor theory computation written using perl perl notation would make following unacceptable math journal would nt take anyway theorem straightforward consequence rice theorem theorem parsing perl undecidable first establish adam kennedy conjecture lemma proof follow immediately halting theorem kennedy lemma parse perl solve halting problem prove kennedy lemma assume parse perl particular mean take following devilish snippet code concocted randal schwartz determine correct parse whatever die dy schwartz snippet parse two different way whatever nullary take argument first statement division void context rest line comment whatever take argument schwartz snippet par call whatever function result match operator call die function mean order statically parse perl must possible determine string perl code whether establishes nullary prototype whatever subroutine since assumed parse perl assume subroutine exists call subroutine take argument perl code string return true code string establishes nullary prototype whatever subroutine iswhatevernullary drag halting theorem need simulate turing machine equivalent evident perl turingcomplete referee math journal would require something obvious tedious proved term used case left exercise reader case acme turing exercise apparently already done wrap turing machine simulator choice routine take two string argument treat first string representation turing machine second input call runturingmachine write routine call halt take description turing machine input create run perl code string run turing machine simulator machine description input two argument establish nullary prototype whatever next ask iswhatevernullary whether nullary prototype whatever established halt routine might look like sub halt machine shift input shift codestringtoanalyze qq begin runturingmachine q machinee q inpute sub whatever iswhatevernullary codestringtoanalyze codestringtoanalyze passed argument iswhatevernullary claim able figure somehow nullary whatever prototype established iswhatevernullary necessarily run codestringtoanalyze fact turing machine simulation halt iswhatevernullary ca nt run codestringtoanalyze live assumption tell u whether prototype established iswhatevernullary must somehow figure machine halt input since next thing codestringtoanalyze nullary prototype machine halt input iswhatevernullary return true machine halt input statement establishing nullary whatever prototype never reached iswhatevernullary must return false given assumption parse perl halt return true turing machine machine halt input input word halt solves halting problem kennedy lemma parse perl solve halting problem prof kennedy lemma well known halting problem solved kennedy lemma establishes parse perl solve halting problem therefore parse perl qed update presentation improved based feedback tye perl parsed formal proof meh tye sage jan utc sorry nt buy proof last code block sub halt machine shift input shift iswhatevernullary qq runturingequivalent q machinee q inpute sub whatever iswhatevernullary certainly easily return true value without execute runturingequivalent whatever prototype compiletime property runtime impact whatever runturingequivalent change fact whatever nullary compile time quite obvious perl code ca nt reliably parsed without running perl code simple example begin rand eval sub whatever die else eval sub whatever die whatever die dy course replace conditional highfalutin comp sci construct choosing find detracts obviousness run rand order parse last line perl code perl parse differently time run shown perl modeparse abovepl whatever syntax ok perl modeparse abovepl whatever die dy syntax ok reply dl select sub halt machine shift input shift iswhatevernullary qq begin runturingequivalent q machinee q inpute sub whatever using rand indeed obvious tested code snippet lent halting oracle friend never returned nt get started use presentation make proof obvious proof weaker theorem interpret rand truly random pseudorandom dealing nondeterministic program someone might say long nondeterminism compiling perl statically parseable proof using turing machine simulator show perl unparseable even code completely deterministic much stronger result distinction make difference practice turing simulation case brought practical reason ca nt claim credit adam kennedy hint took direction suspect also knew business rand many hour real life experience trying statically parse perl focused stronger proof one would give information creating ppi reply dl suspect also knew business rand many hour real life experience trying statically parse perl focused stronger proof one would give information creating ppi pretty much nailed exactly practical perspective thing various combination make perl impossible parse however big difference believe prove perspective knowing absolutely perl ca nt parsed halting problem approach far straight forward way least layman like realization let finally put possibility complete parser mind nt distracted completeness chance evaluate actually define good enough would mean perl parser perspective problem one took code direction working solution reply nt really find nt try solve halting problem parse perl stronger conclusion nt something random parse perl course presence highfalutin comp sci lingo former rather simple fact ca nt reliably parse perl without running perl code arbitrary perl code reminds showing kid clock face asking list property number never mention sorted seems obvious fact ca nt parse perl obvious adding useless complication conjecture make sound like rigorous proof nt believe actually helped proof proof ca nt parse perl begin proto proto runsomeperlcode eval sub whatever proto whatever fact runsomeperlcode arbitrary perl code quite clear guess boil argument somehow static analysis could used predict result runsomeperlcode without actually running rand example clearly show case using argv stdin yi lwp simple get http perlmonksorgsecretalgorithmpl true unlink etcpasswd findprimeoflength sure fact runsomeperlcode could trying solve halting problem also demonstrates something course writing perl support ide seriously concerned declaration function prototype based answer instance halting problem likely dismiss proof based reaction rand case find might run arbitrary perl code stronger statement result interesting useful one also think flaw proof confuses solving halting problem running code may may halt conclusion would need like code either determine whatever nullary never terminate since code taking year nt mean determine never halt code nt even potential solving halting problem lemma needed static analysis program turingcomplete language along input insufficient determine output frankly becomes uninteresting minor update applied minute first posting reply dl select eval argv examine said speaks silence betokens consent love truth pardon error science questioning status quo questioning authority absence evidence opinion indistinguishable prejudice reply dl reply dl select perl parsed formal proof zentara archbishop jan utc mighty fine left brain thinking especially monday morning anyway affect practical aspect perl like used show perl le reliablesecure nt criticism node left college year ago sort analysis seems ivorytowerish sort like saying one prove selfexistence fact perl parse good bad thing language make superior design criterion missing reply jeffrey pointed mean ca nt reliably parse perl code without executing mean thing like static code analysis code transformation syntax hilighting never reliable drawback indeed hand mean module extend perl syntax nifty stuff accomplished understand node proof property seldom fully understood reply reply nt think fact perl dynamic anything lisp dialect dynamic language trivially easy parse grammar language type system two entirely different thing reply mean perl alive alive reply every try parsing cat hell dog go right parser little coaxing cat oh man need thick rubber glove spotter usually dog reply perl parsed formal proof adamk chaplain jan utc totally make day would mind converted pod included documentation ppi reply perl parsed formal proof abbot jan utc point done finding obviously production thousand time changed thing influenced therefore unresolvable ambiguity year great many language nonetheless proved practically successful ergo reply sense think might mean nothing done use perl like perl nt see need regard static unparsability problem solve larry apparently going static parsability perl nt firm opinion whether bad good think proved wise past listen larry matter reason proof considerable question whether perl statically unparsable practical purpose given present parsing technique adam kennedy ppi man page say module name parse perl reserved case someone invented way statically parse perl opinion shifted point people felt certain static parser perl existed think nice get issue completely nailed lack static parsability obstacle many utility deal perl code definitely downside whole equation ability turingequivalent fiddling begin time upside reply larry apparently going static parsability perl seem missing sentence last time brought larry admittedly year ago nt going budge either dualnature ability prototype subroutine influence number parameter indeed part difficulty implemented perl far able clean lexical phase thanks wonderful perfect storm desirable feature must execute perl code compile time even perl order even tokenize remainder file concession heard result executed code would promised carried forward result compilation seems bit odd would break thing like x begin x time unless begin block executed compile time prerun time course might month date got bored following perl stuff working smalltalk get bit closer release reply dl multi sub prefix foo str return eq foo bar foo define unary prefix operator take one string argument somebody writes foo foo ca nt know method call call operator think make difference wait precedence come play begin eval multi prefix foo str tighter infix return eq foo bar foo later code foo fo foo parsed sub call precedence lower concatenation way round parsed operator quite complicated example much easier one real macro since implemenation really implement macro nt really know much reply dl select perl parsed formal proof errto vicar jan utc wondering idea apply language allows construct within code affect syntactic structure code take example following theoretical haskell expression foo bar baz qux parsing expression depends relative precedence two operator possibily necessarily associativity may also result error higher precedence declared nonassociative however parsing depend executing code sense op mean think must static declaration somewhere else code say property two operator need lexically precede usage appear somewhere relevant scope dynamically generated way would fit reply dl perl make sense individual source file without already seen dependancies correct haskell allowing use definition nt think multiple pass may required examine said speaks silence betokens consent love truth pardon error science questioning status quo questioning authority absence evidence opinion indistinguishable prejudice reply correctly parsing haskell file requires parsing dependency nt require running haskell code since infix declaration quite static mean parse haskell need figure import infix declaration actually parsing expression hard could example initially parse expression either list identifier rose tree regardless precedence ast source file easy see declaration need use information fix expression based precedence reply perl parsed formal proof pajout curate jan utc catched correctly halt return true ran turing machine machine halt consequently halt run till machine run reply perl parsed formal proof anonymous monk jan utc language sort eval construct parsed statically parsed determined runtime really nt take computer science prove furthermore let record show input perl program perl compiler parsed either get result errormessages bottom line point saying perl anything done address issue formality actually u practitioner make daily bread tool reply nonsense eval preclude parsing unless result evaluating something alter parse another part reply many language eval yet unambiguous parse tree actual code program opposed code evaluated runtime run python program see print complete parse tree program run eval jump throat saying make python better language perl fact language constructed eval totally handled runtime affect parsability program import sys import parser print parsersuite open file read totuple x eval sysstdinreadline x print yes x else print x bring back original post parser module python equivalent parse perl would perl parsing possible reply dl saying order statically parse eval block must know whenithalts otherwords impossible actually running eval block clearly related halting problem reply acme joke department cpan module place prank fun would nt use part paper reply perl parsed formal proof viciousfrank initiate jun utc know post little late maybe disctinction definition static parsing think language actually statically unparseable long finite number parsing rule condition finite number possible derivation certain number generated symbol kennedy example whatever die dy two interpretation possible problem compiler find two way produce check branching two interpretation something like isnullary whatever whatever else whatever die dy think perl interpreter already technicaly parsing perl undecidable problem proved could single way parse perl yes problem text editor syntaxhighlighting reply dl never late workaround assumes somehow isnullary determine perhaps run time whether whatever nullary arbitrary function prototype general decidable even run time handwaving hope render basic idea plausible suppose determine whether piece arbitrary code establishes nullary prototype whatever since code arbitary contain lot stuff said le complete analysis perl code course includes whether ever finish also solved halting problem two issue halting problem undecidability intimately connected perl unusual allowing turingequivalent computing parse determined allowing preparse computing thing affect parse perl parsing undecidable par language decidable finished second series article perl review undecidability perl context tpr lay proof slowly perlmonks discussion tpr aimed perl programmer may interest theory sake eventually put series article internet genuinely difficult area even academic mastered notation memorized result hard time idea imho topic often poorly explained reply dl select workaround assumes somehow isnullary determine perhaps run time whether whatever nullary entirely different problem one claim calling halt nt make sense statically undecidable true arbitrary program function turing complete language one claim function composition useless never know whether terminate implicit assumption article parser derives one one parse tree solves ambiguity expression assumption given assertion becomes much weaker perl parser ca nt resolve ambiguity perl program context sensitive analysis solution derive multiple parse tree expression wrap common node represent conditional expression example reply perl parsed formal proof zby vicar jan utc reply parse sml without type inference tricky part sml parsing operator fixity nt depend type yes sml type inference superexponential contrived example practical reason even remotely close undecidability reply perl parsed formal proof anonymous monk may utc sorry nt get binary executable called perl called execute program written perl programming language perl binary named parse perl program perl perl exists parse every perl program ever written perl nt exit know perl exists reply entire point argument perl nt first completely parse program run executing perl program perl alternate parsing running begin hence use article prof actually impossible otherwise exist program first completely par perl program executes well least long perl remains reply dl select perl parsed formal proof anonymous monk aug utc confused proof nt buy especially since definition including parsing imprecise warrant reduction proof also nt need reduction show existence example essentially trying seem making claim code begin x sub foo foo declared x terminates like writing java code int x asking whether x ever declared say absolutely nothing program parsed parsed fine cheer reply dl select series three article perl review available online laid proof much carefully three different version bulletproof version derives result directly rice theorem right proof would go way establishing prototype perl function via function definition said perl review p must show use turingcomplete perl code determine prototype dunno subroutine compile time function definition work summarizing article least two way prototype subroutine established using turingcomplete perl code one symbol table manipulation example begin dunno sub second way put function definition string eval begin block believe clever monk able think others reply dl use modern perl sub x say x begin x sub foo bar say foo bar begin foo bar extra fun run b deparse reply dl select
92,Lobsters,perl,Perl,German Perl Workshop 2019,http://act.yapc.eu/gpw2019/,german perl workshop,deutscher perlworkshop münchen über den deutschen perlworkshop opensourcekonferenz für jedermann programmiersprache perl wichtige informationen mailto germanperlworkshopde aktuellste neuigkeiten,deutscher perlworkshop münchen vom bi märz über den deutschen perlworkshop der deutsche perlworkshop ist eine jährlich deutschland stattfindende opensourcekonferenz für jedermann organisiert von der community der programmiersprache perl im jahr beginnt er mittwoch den märz um uhr und endet freitag den märz um etwa uhr die vorträge werden überwiegend deutsch gehalten vorträge auf englisch sind ebenfalls sehr willkommen wichtige informationen emailkontakt mailto germanperlworkshopde aktuellste neuigkeiten
93,Lobsters,perl,Perl,Perl 6 at a Glance,https://perl6.online/perl6-at-a-glance/,perl glance,electronic edition leanpub amazon kindle paperback edition amazoncom amazonde andrew shitov perl glance wwwpragmaticperlcom wwwdeeptextmedia pdf version book content hello world sigils introspection twigils frequently used special variable builtin type typed variable bool int str array hash prefix operator prefix operator prefix operator prefix operator prefix operator prefix operator prefix operator prefix operator prefix operator prefix operator prefix operator prefix operator temp prefix operator let postfix operator postfix operator method postfix operator method postfix operator method postfix operator method postfix operator method postfix operator method postfix operator numeric operator numeric operator numeric operator div mod numeric operator numeric operator numeric operator numeric operator numeric operator gcd numeric operator lcm numeric operator numeric operator compare number string concatenation operator string repetition operator x string comparison operator eq ne string comparison operator lt gt le ge string comparison operator leg universal comparison operator cmp universal comparison operator universal comparison operator eqv universal comparison operator universal comparison operator smartmatch operator list repetition operator xx zip operator z crossproduct operator x sequence operator junction operator shortcut operator shortcut operator shortcut operator shortcut operator infix operator min max ternary operator assignment operator pair creation operator list creation operator invocant call operator assignment metaoperator negation metaoperator reverse metaoperator r reduction metaoperator cross metaoperator x hyperoperators subroutine sub nonvalue argument passing typed argument optional parameter default value named argument slurpy parameter flattening nested sub anonymous sub lexical variable state variable dynamic variable anonymous code block placeholder function overloading sub overloading subtypes module creating module exporting sub module using module importing module need keyword use module require keyword use module module import summary class attribute class method inheritance multiple inheritance private closed method submethods constructor role channel read write list method transfer nonscalar object closed method promise basic promise factory method start keyword method anyof allof method method example using promise sleep sort regexes regular expression match object grammar simple parser interpreter action ast abstract syntax tree attribute creating calculator unicode whatever whatevercode working file directory programming internet database access electronic edition leanpub amazon kindle paperback edition amazoncom amazonde,book perl programming language perl family cover many basic indepth topic language provides initial knowledge need start working perl book require previous experience perl although general understanding programming assumed electronic editionleanpubamazon kindle paperback editionsamazoncom amazonde also local amazon site andrew shitov perl glance andrew shitov author elizabeth mattijsen reviewer published october first published english january first published russian series article pragmatic perl magazine wwwpragmaticperlcom published deeptext amsterdam wwwdeeptextmedia isbn navigate content download pdf version book content hello world variable sigils introspection twigils frequently used special variable builtin type typed variable bool int str array hash prefix prefix operator prefix operator prefix operator prefix operator prefix operator prefix operator prefix operator prefix operator prefix operator prefix operator prefix operator prefix operator temp prefix operator let postfix postfix operator postfix operator method postfix method postfix operator method postfix operator method postfix operator method postfix operator method postfix operator method postfix operator infix operator numeric operator numeric operator numeric operator numeric operator div mod numeric operator numeric operator numeric operator numeric operator numeric operator gcd numeric operator lcm numeric operator numeric operator compare number string operator string concatenation operator string repetition operator x string comparison operator eq ne string comparison operator lt gt le ge string comparison operator leg universal comparison operator universal comparison operator cmp universal comparison operator universal comparison operator eqv universal comparison operator universal comparison operator smartmatch operator list operator list repetition operator xx zip operator z crossproduct operator x sequence operator junction operator junction operator shortcut operator shortcut operator shortcut operator shortcut operator shortcut operator infix operator infix operator min max ternary operator assignment operator pair creation operator list creation operator invocant call operator metaoperators assignment metaoperator negation metaoperator reverse metaoperator r reduction metaoperator cross metaoperator x hyperoperators subroutine sub nonvalue argument passing typed argument optional parameter default value named argument slurpy parameter flattening nested sub anonymous sub variable signature lexical variable state variable dynamic variable anonymous code block placeholder function overloading sub overloading subtypes module creating module exporting sub module using module importing module need keyword use module require keyword use module module import summary class attribute class method inheritance multiple inheritance private closed method submethods constructor role channel read write list method transfer nonscalar object closed method promise basic promise factory method start keyword method anyof allof method method example using promise sleep sort regexes regular expression match object grammar simple parser interpreter action ast abstract syntax tree attribute creating calculator unicode whatever whatevercode working file directory programming internet database access book published beginning paper later ebook published online end content page free charge may used educational purpose electronic edition leanpub amazon kindle paperback edition amazoncom amazonde also local amazon site
94,Lobsters,perl,Perl,Perl 6 as a new tool for language compilers,https://www.youtube.com/watch?v=lwIXF25KJCo,perl new tool language compiler,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature perl new tool language compiler youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature perl new tool language compiler youtube
95,Lobsters,perl,Perl,"PerlCon 2019 | The European Perl Conference in Riga, Latvia, 7–9 August",https://perlcon.eu/,perlcon european perl conference riga latvia august,konference ir slēgta attendee feedback perlcon rīga perlcon riga perlcon europe perlcon riga report perlcon rīga perlcon conference rīga behind scene topic analysis perlcon talk perlcon perl concurrency parallelism conference ticket buy ticket konference ir slēgta planning entertaining nonstoppable approach action required roadmap latebird price three month go buy conference ticket conference shop river cruise lot spring news perlcon venue buy ticket mail perlconeu call talk call participation,recent newsletter august konference ir slēgta thank postcard postreports recorded video stream attendee feedback domm perlcon rīga kangmin liu perlcon riga zh dave cross perlcon europe mohammad anwar perlcon riga report josé joaquín atrium perlcon rīga andrew shitov perlcon conference rīga behind scene domm topic analysis perlcon talk perlcon perlcon edition annual european perl perl conference also known yapc europe tpcir main conference day wednesday friday august start continue main program extended program begin continues till registration desk open wednesday august video perlcon workshop day conference dedicated teaching class perl concurrency august jonathan worthington perl concurrency parallelism class paid ticket available buy visit one link conference ticket attend main conference day buy ticket prepared big variety different ticket include buy ticket perlcon news august konference ir slēgta thank postcard postreports recorded video stream july planning entertaining perlcon schedule event location sponsor july nonstoppable approach ticket extra programme schedule new keynote speaker call lighting talk new sponsor june action required check tshift size choose food preference confirm talk forget reserving hotel room may roadmap newsletter containing update talk master class attendee statistic preliminary information preconference meeting may hotel room offer room special discounted price sold working getting room hotel another nearby hotel please email u would like added waiting list may nb latebird price expire may date ticket expensive make sure get best price may three month go may newsletter covering talk entertainment program hotel facility new sponsor april next two week april buy conference ticket reduced late bird price quick march welcome conference shop buy individual item lunch dinner ticket river cruise hotel room taxi transfer march new item entertainment program river cruise along daugava end third day conference ticket available march lot spring news new talk lightning talk session workshop sale launch deadline earlybird ticket new hotel room type available sendanewbie program new sponsor february perlcon presented german perl workshop munich come get latest news conference february four workshop submitted conference reserve date attend sale open soon february breaking news got limited offer cheaper room daugava hotel perlcon venue make sure buy ticket reserve room price including breakfast free cancellation february consider sponsoring perlcon prepared sponsorship proposal contact u mail perlconeu discus february perlcon presented perl booth fosdem brussels weekend february january call talk january call participation
96,Lobsters,perl,Perl,Periodic Table of the Operators,http://www.ozonehouse.com/mark/periodic/,periodic table operator,larry wall perl first version synopsis perl operator stdpm carl patrick michaud larry wall mark lentczner,comprehensive complete enumeration operatic element perl language assembled drawn dedication diligence lentczner service community republic may simple presentation various illustrative device increase knowledge understanding amongst practitioner art software third edition february two thousand nine several year ago saw larry wall give short talk design perl point put slide list operator well hundred sitting audience sudden inspiration took month get around drawing put first version chart web site fired email mailing list got slashdotted vacation least server nt crash several year passed perl design evolved quite bit past fall several people contacted updating chart took challenge used synopsis perl operator de facto parser perl stdpm source operator information thanks carl encouraging update chart patrick michaud reviewing larry wall willing discus minutia metaoperator parsing member helping explore language mark lentczner markl glyphic dotcom february
98,Lobsters,perl,Perl,Yet Another CPAN Grep,https://grep.cpanauthors.org,yet another cpan grep,github,maintained kenichi ishigaki ishigaki cpanorg find anything submit github
99,Lobsters,perl,Perl,London Perl Workshop 2018,http://act.yapc.eu/lpw2018/,london perl workshop,map attend present talk create new user account log register submit proposal sponsor organiser submission proposal deadline feed latest news london perl workshop playlist enlightened perl organisation epo conference video eligo perl career cv library adestra broadbean oleeo opusvl perl community adzuna geekuni location homepage oleeo workshop schedule submit talk eligo perl career cv library oleeo perl community adzuna older announcement,london perl workshop lpw free oneday technical conference central london united kingdom saturday november new cavendish street london map please save date register hope see attend present talk attend please create new user account log register speak please submit proposal soon possible earlier submit likely talk accepted welcome submission talk discussion presentation workshop perl perl language supporting technology could something working something interesting workshop chance u learn sponsor would like sponsor london perl workshop please hesitate contact organiser help proposal submission speaker invited talk subject accept talk people age background circumstance london perl workshop inclusive event would love attend year hope access three workshop room would like run many workshop possible would also love refresh skill wishing engage latest development perl language wish submit workshop please use submission form talk please note workshop minute length proposal deadline wednesday october please note starting accept talk earlier proposal deadline given priority schedule watch space update check feed latest news london perl workshop video available view youtube playlist taken u bit time put together due last minute equipment issue led post processing editing anticipated video recorded using equipment purchased lpw since expanded enlightened perl organisation epo want equipment available workshopsconferencestech meet allow high quality recording low cost added detail epo conference video repository github viewcontribution always thanks sponsor made lpw possible eligo perl career cv library adestra broadbean oleeo opusvl perl community adzuna geekuni reserved space hope friday nov hope tottenham st bloomsbury london location homepage thanks oleeo sponsoring preworkshop meetup workshop week away created schedule notice still room talk something would like talk nt hesitate submit talk tweaked schedule bit previous year start little later normal allow little time lunch also notice dedicated perl track dedicated mentoring beginner track also room lightning talk favour submit early note may tweak schedule slightly make room talk andor depending factor always thanks sponsor eligo perl career cv library oleeo perl community adzuna older announcement
100,Lobsters,perl,Perl,London Perl Workshop 2018 schedule,https://act.yapc.eu/lpw2018/schedule,london perl workshop schedule,,download pdf schedule talk bold type confirmed respective speaker
101,Lobsters,perl,Perl,Announce: Raku Perl 6 'Diwali' 6.d Language Specification Release,https://github.com/perl6/roast/blob/master/docs/announce/6.d.md,announce raku perl diwali language specification release,http announce raku perl diwali language specification release http http perlorg language name alias decision raku author http changelog scope target audience http http versioncontrolled change deprecation new behavior math set bag mix aka quanthashes set operator new parameter argument new routine operator new type new variable clarification edge casecoercion behaviour miscellaneous,announcement available form colourful pdf brochure http announce raku perl diwali language specification release behalf development team brings great pleasure announce diwali release official specification raku perl programming language specification available git tag repository http future erratum published branch note compiler release use language default follow standard release schedule question future language release inquire help chat http mailing list perlorg language name alias decision raku larry wall created second name language alias stage name name raku used interchangeably original perl name even combined form raku perl pick one work best use consistently author following people contributed version language including making documentation update contributing work known compiler implementation list ordered alphabetically believe name erroneously omited please contact u http update primary copy list sinan unur adrian white ahmad zawawi alberto luaces aleksdaniel alex chen alex elsayed alex schroeder alex wander alexander alexey melezhik alexis alexius korzinek allan amir aharoni andreoss andrew ruder andrew shitov andy weidenbaum anthony parson antonio antonio quinonez antoniogamiz armand halbert arne skjærholt athos ribeiro bahtiar kalkin gadimov bart wiegmans bartosz janus bazzaar ben davy benji benny siegert bill barry bitrauser brad gilbert breno g de oliveira brent laabs brian foy brian duggan brian gernhardt brian julin brock wilcox bruce gray bspecht cale carl mäsak cc cecilia cfa christian bartolomäus christian sánchez christian walde christopher bottom chromatic claudio ramirez clifton wood coleoid comborico coypoop cpin cuon manh le curt tilmes cygx dabrien dabe murphy dagfinn ilmari mannsåker dale evans dan book dan kogai dan miller dan zwell daniel dehennin daniel green daniel mita daniel perrett dariusantia dave olszewski dave rolsky david brunton david h adler david cawthon david warring dmaestro dmitri iouchtchenko dominique dumont donald hunter douglas jenkins douglas l schrag douglas schrag dugword eater eckhart arnold eike frost elena merelo elise elizabeth mattijsen eric de hont fernando correa de oliveira fernando santagata fireartist flussence francis grizzly smit francois perrad francois fritz zaucker fyodor sizov gabor szabo garrett goebel geoffrey broadwell gerd gerd pokorra gotoexit greg donald harrison chienjo holliholzer ianmcb ijneb ilyashb innokenty shniperson itsuki toyota arılık jack kuan jake russo james jeremy carman janolof hendig jared miller jarkko haapalainen jason cole jeff linahan jeffrey goff jeremy studer jim davis jimmy zhuo jjatria joachim durchholz joel joelle maslak john gabriele john harrison john spurr jonas kramer jonathan beebe jonathan scott duff jonathan stowe jonathan worthington josh soref josé albert cruz almaguer juan julián merelo guervós juerd waalboer julien simonet justin devuyst karl yerkes kjpye klappezuaffetot kris shannon lance wick larry wall le manh cuong lefth lemonboy leon timmermans lichtkind llfourn lloyd fournier luca ferrari lucas buchala luis balderas ruiz luis f uceta faiz zakwan zamzuri maik hentsche marc chantreux marcel timmerman mario mark montague mark rushing martin barth martin dørum nygaard martin ryan mathieu gagnon matt oates matthew wilson matthias bloch mendel michael stemle jr michal jurosz mint moray morayj moritz lenz mryan nacho ma nadim khemir naoum hankache nat neil shadrach nelo onyiah neuron nic nic q nick logan norbert buchmueller nova patch nsvedberg nuno smash carvalho okaoka oleksii varianyk panu ervamaa parabolize patrick r michaud patrick böker patrick spek paul cochrane paul smith paula paweł murias pepe schwarz peter stuifzand philippe bruhat book pier cawley prakash kailasa przemysław wesołek páll haraldsson rafael schipiura raiph randy lauen raydiak reini urban ribbonotter richard hainsworth rob hoelz robert lemmen robert newbould ronald schmidt salvador ortiz salve j nilsen sam morrison sam samantha mcvey sarna seatek shlomi fish siavash askari nasr simon proctor simon ruderich skarsnik smls stefan fischer stefan seifert sterling hanenkamp steve bertrand steve mynott stéphane payrard sylvain colinet sylvarant tadeusz tadzik sośnierz thebooort thor michael støre threadlessscrew thundergnat tim smith timo paulssen tobias boege tobias leich tom browder tommy stanton trey harris tzuli tison chen valentin anger ven viacheslav lotsmanov vladimir marek vynce montgomery vz wenzel p p peppmeyer coke coleda wukgdu zak b elep zoffix znet zzzombo 唐鳳 陈梓立 changelog document list change perl diwali language perl christmas version particular implementation language may contain additional change please consult changelog implementation time particular implementation may certain feature already implemented version period changelog concern new feature added specification language level status implementation particular compiler scope target audience changelog targeted towards language user help preparation use compiler supporting latest language version thus contain every minute change specification occurred implementation wishing ensure full compliance new version language specification execute test suite available http examine failing test new feature exist language full detail please consult language documentation http item versioncontrolled change section protected version pragma older behaviour obtained explicitly using use request older language version change conflict language version implementation may choose make available even earlier language version requested versioncontrolled change await longer block thread waiting whenever lexical scope react throw argfiles inside sub main always fed construct literally longer magical variable u type constraint default type object constrained type eg could use new start block sink context attach exception handler routine must use returnrw return proxy even routine marked raw rw native num type default instead nan subroutine name colonpair key sym eg sym foo reserved anticipation possible future use deprecation method deprecated language removed implementation may choose emit deprecation warning offer method longer period release use single hyphen special path open mean special handle use io special object instead io handleslurprest use slurp instead anyflatmap use combination flat map method instead coolpath use io instead pairfreeze use pairnew decontainerized argument instead strsubstmutate use strsubst method call assign metaop instead rationalnorm rational type required normalized creation io pathchild use add instead undefine assign emptynil directly instead count argument linesstrlines routine use elems call returned seq instead isapprox use similar behaviour isapprox instead new behavior improved custom handling sub main via new definable runmain argstocapture generateusage sub quanthashesmap variable list variable declared trait eg h set new ww regex rule match within word loop produce list value value last statement nextlast loop collect last statement value return empty iteration run perl called consumed seqs multidimensional array date callframe gist called attribute numerous improvement autogenerated usage message hiddenfromusage trait hide sub main candidate autogenerated usage message parameterperl includes introspectable default env value allomorphic trying use variable throw x syntax default hashof return str coercer type object nonascii numerics used colonpair shortcut strdistance stringifies string welldefined formatting pod table enumerationenums return map range various integer type return range value support minmax routine also work hash signature literal contain stringnumeric literal well invocant marker listinvert map via required pair binding resulting potential type check failure exists used multidimensional associative subscript dynamically created list used define enum junction used matcher first native attribute used bind target parameter proc work io pipe procs typed array created sometype array array sometype item negative weight removed coercing mixy settybaggy nth adverb accepts junction argument cx warn cx done caught inside control phaser next used whenever require symbol longer transitively exposed multidimensional access via similar work open handle end time get automatically closed cached seq cached list used infix eqv slip join list list eager array islazy called io handleencoding take nil indicate switch binary mode default trait work attribute parameter rw trait considered narrower multi dispatch without gist array blob map get trimmed element new statement modifier hyper race lazy loop automatically serializes raceseqhyperseq use new statement modifier hyper forrace avoid infix used noncomposable instance rh numeric comparators used datetime object pod preserve type whitespace defined semantics sigilled constant math rational always reduced creation remain immutable throughout life inf inf nan roundtripped rational type represented value respectively zerodenominator rational normalized one three value calling int nan throw improved ieee compliance num operator math function negative zero num get correctly handled routine syntactical construct stringification num type required roundtrippable original num defined complex exponentiation involving zero negative power expmod valid set bag mix aka quanthashes set operator set operator used object coerced needed precoercion needed wanted set operator liberty create quanthash perform desired functionality without set operation different type quanthashes coerce liberal form set bag mix setprecedes family set operator removed used baggy form subset operator quanthashes upgraded liberal form right thing classifylist method available baggy type categorizelist method available baggy type invert method available core quanthash type antipairs method used quanthash type quanthash type newfrompairs method convert one quanthash type another eg bag method set type hash quanthash type stringify key new parameter argument datenew accepts formatter first take kv unique repeated take plan take skipall run shell take merge note called argument open accepts outbuffer io pathresolve take completely io pathparent take int indicating parent level proc asyncnew slurps positional argument signatureaccepts accepts nonsignaturecapture argument eval take blob promisekeepbreak called argument sum native array take wrap required trait take argument indicating reason io socket asynclisten bind port ask o free port encode take translatenl new routine operator new atomicint unicode operator ascii alternative guarantee threadsafe atomic operation infix atomicassign prefix atomicfetch prefix atomicincfetch postfix atomicfetchinc prefix atomicdecfetch postfix atomicfetchdec infix infix atomicfetchsub infix atomicfetchadd ca atomic compare swap operator unicode operator alternative respectively infix unicmp infix coll alternative behavior infix cmp tr nonmutating version tr submethod tweak similar build except compatible attribute default duckmap apply callable element behaves way callable applied deepmap apply callable element descending iterables takerw like take writable container indir execute code given cwd spurt see io pathspurt prompt prompt user input uniprops multicharacter version uniprop symlink create file symlink link create file hardlink hyperrace process list value parallel seqfromloop generate seq callable struniparse parse one unicode character name actual character strparsebase inverse intbase operation io path provides accepts spec cwd numeric add extension mode numerious file test part sibling spurt io handle provides read write eof destroy readchars flush lock unlock outbuffer tell say slurp seek printf printnl watch io pipe provides proc iterator provides skipone skipatleast skipatleastpullone muemit method form emit failslike module allows testing failure bailout module exit failing test suite isapprox module test number approximately like another buf allocate reallocate append push pop splice subbufrw prepend unshift method range support rand backtrace method map flat concise summary classifylist method available hash type categorizelist method available hash type codeof return return type constraint codelinefile return linefile definition proc async provides supply ready pid bindstdin bindstdout bindstderr proccommandproc asynccommand command executing proc provides signal pid encoding complex provides ci real ceiling floor round truncate ab method compared long imaginary part negligible datetime provides offsetinhours hhmmss date datetime compared datetime object using operator date provides datetime method infix infix called duration datetime real type enumeration provides int pred succ kv pair date called instant junction created using junctionnew call list type method map type provides int method returning number pair anyskip skip value list anybatch basic cousin rotor muiterator produce iterator value list io spec type provide tmpdir extension path pair provides accepts pair invert capture method welldefined core type defined semantics accepts allomorph failureself explodes unhandled failure threadisinitialthread running initial thread match provides int action io socket async provides socketport peerport promise provides alternative constructor kept broken whatevercode provides assuming whatevercode block provide cando syntax calling prefix operator postfix kernel provides hostname nil fallback special method defined return nil new type atomicint native int sized usable new atomic operator lock async nonblocking mechanism mutual exclusion encoding registry manage available encoding encoding encoder encoder specific encoding encoding decoder decoder specific encoding io cathandle use multiple readonly io handle one native str array supplier preserving cached live supply factory semaphore control access shared resource multiple thread io special path special io device eg stdout exception json implementation custom exception handler used env var seektype enum value use io handleseek new variable usage available inside main sub contains autogenerated usage message submainopts setting behaviour sub main submainopts namedanywhere allow named argument placed position command line collation configures four unicode collation level initinstant instant representing program startup time home user home directory one exists chdir callable containing variant io pathchdir also set process current directory environmental variable stop test suite first failure environmental variable specify custom exception handler class clarification edge casecoercion behaviour uint smartmatches true int type object sink statement prefix explodes failure defined behaviour permutationscombinations list negative nonint argument val strnumeric str numeric conversion method fail trying convert unicode character group synthetic numerics synthetic numerics used colonpair shortcut enumeration used array shape specifier numeric conversion str containing nothing whitespace return samemark empty pattern argument simply return invocant polymod used lazy finite list divisor index defined negative gap rotor larger sublist throw nonint argument rotor get coerced int line defined reading proc file defined behaviour thai numeral postfixprefix string map inside sunk treated sunk sunk loop sink value last statement method call int bool object return int object splice used extend array classify work junction pairup type object return empty seq pairup always return seq synthetic codepoints rejected datedatetime constructor pair used matching character quoting construct flat array type object simply return type object mixedlevel classify hash throw junction used specify multiple key hash callable given classifylist guaranteed executed per item delete associative lookup hash type object return nil isdeeply automatically cache seqs given argument us returned list testing complexnew give intnew guarantied construct new int rather say reuse one constant cache version infix infix eqv defined nil type throw directly indirectly calling bindpos bindkey assignpos assignkey store push append unshift prepend nilord return empty seq nilchrs return numnew coercers argument num infix z return empty seq comb always return seq reduce infix one item simply return item return nil regex smartmatching allowed possiblyinfinite seq defined smartmatching range object set converted mixbag longer bool weight gcd defined one operand junction autothread defined routine sum handle list junction grammarparse let top regex backtrack minus sign sm supported construct strnumeric val infix work blob numeric literal supported value literal signature b b regexes throw x obsolete true false value literal signature warn return type sort io spec unixpath always seq outofrange atpos range object return nil pairatkey nonexistent key return nil cool type provide ratfatrat coercers io path filetests cache result earlier test execution seq eqv list false based type mismatch alone array hash quanthashes value kv value pair sequence writable infix infix keep lhf rh arity count refined accepted argument regex operator adverb eg refined accepted combination argument io handleopen io pathstr include value cwd attribute io path type reject path nul byte io pipe pathio return io path type object io path copymove fail destination original dircreated io path absoluteness controlled invocant moredefined edgecase behaviour callable handling defined calling chaining infix andthen infix orelse infix notandthen operator zen slicing seqs cache listcapture stringifies key contained pair object fail handled failure argument mark unhandled use lib accepts io path object anchor valid lookarounds grammarmade support type object isa support subset type object delete used lazy array infix eqv work certain case lazy argument dynamic lookup restricted regex syntax requires use monkeyseenoeval clearance defined slip list array hole promiseinat supplyinterval work zero negative value supplyinterval minimum value lower value treated emit warning supply provides seq list zip bind native type attribute build method whatevercode propagates use fatal say note put print printf routine autothread junction io handleeof value change accordingly seeking past end back defined succ pred bool allomorph defined bridge core numerics defined numericreal type object core numerics defined rationalbool respect zerodenominator rational saynote guaranteed call gist subclass str defined junctionstr return junction defined junctiongistperl return str maphash listcache return list defined round return type defined enumeration accept enumeration u miscellaneous io argfiles type empty subclass io cathandle constraint constant constraint fully enforced attempting use parametarized type constraint constant ie using foo constant int throw x parametricconstant exception pod defn definition list directive available pod provides numbered config key ver auth name metamethods available module absent package design fancy quote variant supported qww infix support lookup autogenerated callables eg infix xx using named anon sub longer produce redeclaration warning extended spec module module variable sub main accept enumeration type constraint clause argument type smiley constraint used subset start block thunk get fresh r meta operator used listassociative operator defined type coerces used signature return type constraint infix x infix x throw infnan repeat argument literal construct put put throw requiring use parenthesis expanded specification coverage unicode routine feature upgraded coverage unicode version method call syntax shorthand work metamethods happy diwali
102,Lobsters,perl,Perl,TRE: A Regex Engine with Approximate Matching,http://ducktape.blot.im/tre-a-regex-engine-with-approximate-matching,tre regex engine approximate matching,regex engine approximate matching levenshtein distance engine tre implementation detail v syntax doc approximate match specifier pragmas doc place found fuzzy matching option excellent article bunch example test case,tre regex engine approximate matching november tre regex engine allows approximate matching using calculating levenshtein distance number insertion deletion substitution would take make string equal search match engine tre perl wrapper around tre engine swap default perl regex engine tre engine within lexical scope used dive nitty gritty example ssubstitution iinsertion ddeletion fuzzy matching use engine tre maxcost say pesarl perlx pesa say prjl perlx prjl fuzzy capture use engine tre maxcost say fussy wuzzy beer fuzzy wuzzy bear xi fussy beer perl regex variable returned handy use engine tre maxcost say start end gataca ga tcc ax tac start end implementation detail seen basic flavor tre clear detail found really confusing started ere v bre syntax syntax tre us switched either use posix extended regular expression syntax ere basic regular expression syntax bre doc page however make clear engine tre implementation look x flag order switch ere almost certainly want approximate match specifier tre mix syntax well though match primary example allow set number mismatch total specific type atom also allow set score type mismatch atom ex use engine tre maxcost say start end gattaca ga tcc ax ttac start end say start end gatgggga ga tacac ax last example say capture group one insertion deletion substitution error total brings one gotchas though sometimes hard edits lead match example gatcccca would matched given capture one substitution deletion capture group insertion outside pragmas importing engine tre set various pragma specify overall setting tre use default found engine tre doc set global max cost atom allowing error global cost overrull match returned note know detail use statement work well enough speak kind overhead throwing use engine tre maxcost function result think use compile time thingy therefor put function low overhead time function called could totally wrong place tre found fuzzy matching option excellent article bunch example test case day hopefully pr test case engine tre use strict use warning use test plan test use engine tre maxcost ok pearl perl test approx match insertion ok per perl test approx match deletion ok perd perl test approx match substitution use engine tre maxcost ok pesarl perl test approx match insertion ok er perl test approx match deletion ok berd perl test approx match substitution ok prjl perl test approx match ok ped perl test approx match ok derjl perl test approx match ok terd perl test approx match use engine tre maxcost ok gataaaaa g gatc ax test complex normal match aaaa test capture group test capture group index test capture group index ok gaaaaa g gatc ax test complex normal match nongreedy match aaaa test capture group nongreedy test capture group index nongreedy test capture group index nongreedy ok gtataaaaa g gatc ax test complex mutated match taaa test capture group mutated test capture group index test capture group index ok gataaaa g gatc ax test complex mutated match aaaa test capture group test capture group index test capture group index ok gataagaa g gatc ax test complex mutated match aaga test capture group test capture group index test capture group index ok gactaaaaat g gatc ax test complex mutated match aaaa test capture group test capture group index test capture group index ok ataaaa g gatc ax test complex mutated match aaaa test capture group test capture group index test capture group index ok gataaaaa g gatc ax test complex mutated match aaaa test capture group test capture group index test capture group index ok cataataaa g gatc ax test complex mutated match aata test capture group test capture group index test capture group index ok gaaaaaat g gatc ax test complex mutated match aaaa test capture group test capture group index test capture group index ok ataaaag g gatc ax test complex mutated match aaag test capture group test capture group index test capture group index use engine tre maxcost ok atactac tact acx local approx match setting exact tact local approx match capture group exact ok atgttac tact acx local approx match setting local tgtt local approx match capture group local ok atgttac tact acx local approx match setting local undef local approx match capture group local ok atattag tact acx local approx match setting global local tatt local approx match capture group global local ok ctattag tact acx local approx match setting global local undef local approx match capture group global local ok atgtgag tact acx local approx match setting global local undef local approx match capture group global local
103,Lobsters,perl,Perl,This Perl Goes To 11,http://perl11.org/,perl go,welcome major news perl officially renamed raku detail come following day perl project rperl cperl webperl potion perlito larry raku standard grammar raku grammar perl grammar viv gperl seis pviv spvm perl link,welcome major news perl officially renamed raku detail come following day perl yet actual version perl rather perl currently philosophy primary tenet pluggability perl level reunification perl perl raku runtime performance cc faster perl promotes idea make perl pluggable following level runtime virtual machine compilation unit format ast source code syntax compiler open door many kind language technology experimentation without endangering existing perl cpan code base depend every day pluggable vms would parrot jvm net running perl perl raku code perl project following project important reaching vision perl rperl restricted perl braswell translates mediummagic subset perl cc using inline c inline cpp cperl cperl improved variant perl running perl cpan code many perl raku feature fasterfaster perl perl raku stable usable still development many feature added soon webperl webperl port entire perl interpreter running inside modern web browser webperl compiled using clangllvmemscripten targeting webassembly replace javascript clientside execution platform complete x support reini urban attempt fast small using potion vm potion potion vm behind small fast language written based lua io others perlito perlito flavio glock source level compiler translating perl perl raku javascript backends larry perl raku standard grammar viv metacompiler contains canonical perl raku grammar also perl grammar written perl raku interpreted compiled perl via viv gperl gperl masaaki goshima compiles heavily optimized llvm faster currrently decoupled different perl compiler module seis pviv seis project tokuhiro matsuno try perl raku extension perl pviv perl raku grammar written greg compiles ast used perl raku grammar spvm spvm yuki kimoto fast small virtual machine perlish syntax perl link
104,Lobsters,perl,Perl,WebPerl,https://webperl.zero-g.net/,webperl,using building note legal wiki welcome webperl webassembly emscripten notice webperl much beta new experimental perl support quick start http http serving webperl http wwwigbberlinde legal page http githubcomhaukexwebperlblobghpagesindexmd,using building note legal wiki welcome webperl webperl us power webassembly emscripten let run perl browser webperl translate perl code javascript instead port perl binary webassembly full power perl disposal notice webperl much beta thing may work yet part api may still change feedback always appreciated new experimental perl support script src webperljs script script type textperl print hello perl world n go javascript console default j document getelementbyid mybutton addeventlistener click sub j window alert clicked button script web application written webperl see quick start prerequisite perl recent version recommended eg cpanm easily install dependency otherwise see file cpanfile dependency use module installer choce shell wget http unzip cd cpanm installdeps plackup webperlpsgi http server psgi accepting connection http point browser http look source zip archive also contains several example access http may also host content zip archive webserver choice browser support opening file locally described serving webperl note webperldemohtml likely see ajax failed expected since webserver know handle example ajax request fun copyright c hauke daempfling haukex zerognet leibniz institute freshwater ecology inland fishery igb berlin germany http wwwigbberlinde please see legal page detail find source page http githubcomhaukexwebperlblobghpagesindexmd
105,Lobsters,perl,Perl,Syncing data using advanced SQL,https://domm.plix.at/perl/2018_05_syncing_data_via_advanced_sql.html,syncing data using advanced sql,term agreement storing termagreements newsletter app syncing termagreements newsletter app x class update endpoint model dollar sign number anyway let look touched summary power raw thanks koki postgres perl update footnote,syncing data using advanced sql developer last week implement gdpr related feature one interesting one twice per month send subset user spam information third party product german project data protection law strict long gdpr made sure spam inform user opted gdpr related discussion management decided need finetune term allow user disagree spammed informed third party product still keeping account use core service fair enough small implementation detail one central server also manages socalled termagreements ie user agreed term given time frame different slightly legacy system manage newsletter send user need sync detailed termagreement info auth system newsletter system term agreement store termagreements table looking like create table usrtoterm id serial usr uuid null term uuid null created timestamp time zone null default validfrom timestamp time zone null default validuntil timestamp time zone null default infinity usr term uuids referencing user term created timestamp record created validfrom denotes timestamp user agreed term validuntil denotes timestamp user revoked term note validuntil default infinity get current agreed upon term user using query select term usrtoterm usr validfrom validuntil user revoke term set validuntil current timestamp user later decides agree term insert new row way good data trail showing user agreed term long storing termagreements newsletter app newsletter app care detail need know term user currently agreed therefore added table create table termagreement usr uuid primary key null term uuid modified timestamp time zone usr store uuid referencing user term array uuids notice store currently agreed term list modified contains current timestamp term modified get user agreed given term using example query select usr termagreement term course use query figuring user inform third party product syncing termagreements newsletter app need actually sync termagreement data therefore call api endpoint auth server return current agreement endpoint bit want transfer agreement time performant already store agreement need diff last import ie new agreement revoked term easy way least client side get last modified date tell api hand data touched since time importer dy start due cronmisconfiguration wo nt problem basically using selfhealing algorithm lastmod dbh selectrowarray select tochar max modified yyyymmdd mi s termagreement prevlastmod eq lastmod log warnf lastmod changed v endless loop done lastmod prevlastmod exit log infof fetching term agreement since lastmod agrees client getactiveagreements lastmod agrees log infof data done exit foreach row agrees dbh insert termagreement usr modified term value conflict usr update set modified term undef row row row prevlastmod lastmod let break bit running endless loop first get recent modified date via lastmod dbh selectrowarray select tochar max modified yyyymmdd mi s termagreement max make sure get latest timestamp tochar format way api need prevlastmod eq lastmod log warnf lastmod changed v endless loop done lastmod prevlastmod exit lastmod changed since last run loop could either fallen annoying corner case reached present time case exit syncing script agrees client getactiveagreements lastmod agrees log infof data done exit client api client abstract away hassle calling json api return decoded payload perl data structure case array array empty data fetch stop loop trough data got store local table foreach row agrees dbh insert termagreement usr modified term value conflict usr update set modified term undef row row row either get totally new entry update existing entry using something called upsert update insert cf updateorcreate dbix class upsert recent feature postgres introduced handy case syntax bit strange though regular insert define happen conflict given field usr case define update setting modified term nt particularly like pas value twice row array explicitly row row well small price pay otherwise awesome feature update greg told email use excluded nt pas value multiple time dbh insert termagreement usr modified term value conflict usr update set modified excludedmodified termsexcludedterms undef row much nicer thanks greg last thing store current lastmod timestamp next loop iteration prevlastmod lastmod start script often want always fetch new term either beginning project time frame whenever script last ran nice api let take look side ie api exporting data endpoint boring endpoint sub activeagreementsget self req req requiresjwtroleterms lastmod req param lastmod data self termmodel aggregateactiveagreements lastmod return req jsonresponse data first check jwt grant right access term api requiresjwtroleterms get lastmod param request call aggregateactiveagreements get data return json notice follows best practice apiendpointcontroller code unpack stuff request call fat model actual work pack data whatever format api shall return model actual interesting stuff happens model fact database sub aggregateactiveagreements self lastmod sth self dbh prepare q touched select usr max greatest validfrom case validuntil infinity else validuntil end lastmod usrtoterm validfrom validuntil infinity validuntil group activeterms select touchedusr term usrtoterm touched touchedusr usrtotermusr validfrom validuntil select touchedusr max touchedlastmod lastmod arrayagg term order term filter term null touched left join activeterms touchedusr activetermsusr group order lastmod limit sth execute lastmod lastmod data r sth fetchrowarray push data r return data let skip sql bit look perl code sub aggregateactiveagreements self lastmod sth self dbh prepare sql sth execute lastmod lastmod data r sth fetchrowarray push data r return data see plain unsexy perl prepare dbi sth execute using lastmod timestamp fetch row return greg pointed small annoyance code smell sth execute lastmod lastmod need pas lastmod twice better solution switch positional dbi placeholder socalled dollar sign number dbd pg feature sql look like validfrom validuntil infinity validuntil make sure use single quote defining sql string calling code simplified sth execute lastmod dry thus definite improvement thanks greg anyway let look sql two common table expression ctes followed select using left join one ctes let start first cte touched select usr max greatest validfrom case validuntil infinity else validuntil end lastmod usrtoterm validfrom validuntil infinity validuntil group want get user touched term agreement either agreeing new one revoking term remember set validuntil infinity long user agrees want user either validfrom bigger ie happened lastmod timestamp user validuntil set infinity date lastmod timestamp sql validfrom validuntil infinity validuntil one problem infinity rather big get lastmod timestamp given row bit extra work max greatest validfrom case validuntil infinity else validuntil end lastmod greatest return biggest passed value work around infinityproblem always win greatest return rather old timestamp validuntil fact set infinity whatever validuntil set infinity ie user revoked term together max group query return list user either agreed revoked term given timestamp timestamp action happened usr lastmod term user agreed user revoked term next cte answer activeterms select touchedusr term usrtoterm touched touchedusr usrtotermusr validfrom validuntil simple sql selects currently agreed term touched user using validfrom validuntil though include user revoked term usr term let stitch together select touchedusr max touchedlastmod lastmod arrayagg term order term filter term null touched left join activeterms touchedusr activetermsusr group order lastmod limit select usr max lastmod plus agreed term array using arrayagg nice feature learned working query filter data aggregated arrayagg using make sure return empty array instead array containing null le cosmetically make easier import data without weed null undef perl space left join make sure get user agreed term via activeterms user currently active term thus revoked term therefore present activeterms orderby limit make sure get right amount data correct order client consuming data implemented shown final result look like exactly need newsletter app realmaccount lastmod arrayagg summary hope show power raw sql combined bit perl make really nice clean performant code easy use thanks koki suggesting client architecture european parliament council european union coming gdpr reader pointing sql error potential improvement postgres perl fun interesting tool work greg showing excluded reminding bugfixes update mention excludes upsert section pointed greg use simplify calling big query pointed greg footnote
106,Lobsters,perl,Perl,Looking at the Lispy side of Perl,https://opensource.com/article/18/5/looking-lispy-side-perl,looking lispy side perl,lambda higherorder function first look lambda perl richer code example conway game life conway game life higherorder perl,programming language eg c named function whereas others eg lisp java perl named unnamed function lambda unnamed function lisp language popularized term lambda various us particularly wellsuited datarich application consider depiction data pipeline two processing stage shown lambda higherorder function filter transform stage implemented higherorder function take function argument suppose depicted pipeline part accountsreceivable application filter stage could consist function named filterdata whose single argument another example highbuyers function filter amount fall threshold transform stage might convert amount u dollar equivalent amount euro currency depending function plugged argument higherorder transformdata function changing filter transform behavior requires plugging different function argument higher order filterdata transformdata function lambda serve nicely argument higherorder function two reason first lambda crafted fly even written place argument second lambda encourage coding pure function function whose behavior depends solely argument passed function side effect thereby promote safe concurrent program perl straightforward syntax semantics lambda higherorder function shown following example first look lambda perl usrbinperl use strict use warning reference lambda increment decrement nothing argument passed lambda inc sub could use return clarity dec sub ditto nop sub ditto sub trace val func rest print val func rest nhit return continue n stdin apply operation value base case occurs operation list named rest sub apply val first rest trace val first rest stop tracing return val apply first val rest rest recursive case return val first val base case initval ops list lambda reference inc dec dec inc inc inc inc dec nop dec dec nop nop inc inc nop execute print join apply initval ops n final line output lispy program shown highlight basic perl lambda higherorder function named function perl start keyword sub followed name sub increment named function unnamed anonymous function omits name sub lambda unnamed function lispy example three lambda reference convenience review inc reference lambda referred inc sub lambda code block right assignment operator increment argument lambda body written lisp style without either explicit return semicolon incrementing expression perl lisp value last expression function body becomes returned value explicit return statement example lambda one expression simplification befits spirit lambda programming trace function lispy program help clarify program work illustrate higherorder function apply nod lisp function name take numeric value first argument list lambda reference second argument apply function called initially bottom program zero first argument list named ops second argument list consists lambda reference among inc increment value dec decrement value nop nothing list could contain lambda code easier write understand concise lambda reference logic higherorder apply function clarified follows argument list passed apply typical perl fashion separated three piece val first rest break argument list three element first element val numeric value initially second element first lambda reference one inc dec nop third element rest list remaining lambda reference first reference extracted first list rest empty first element removed apply called recursively two argument recursively invoked apply value generated applying lambda operation first numeric value val example first incrementing lambda inc refers val new first argument apply would list remaining lambda reference eventually list becomes empty call apply shortens list extracting first element output sample run lispy program commandline prompt lispypl code code code code code code hit return continue code code code code code code hit return continue first output line clarified follows numeric value passed argument initial thus nonrecursive call function apply argument name val apply code reference one lambda case lambda inc refers second argument thus address lambda code argument name first apply third piece series code reference list lambda reference beyond first argument name rest apply second line output shown also deserves look numeric value result incrementing initial lambda inc initial value extracted reference code first reference first element rest list inc extracted earlier eventually rest list becomes empty end recursive call apply case function apply simply return list two element numeric value taken argument sample run argument transformed lambda also last lambda reference happens nop nothing lispy example underscore perl support lambda without special fussy syntax lambda unnamed code block perhaps reference convenience lambda reference passed straightforwardly argument higherorder function apply lispy example invoking lambda reference likewise straightforward apply function call first val first lambda reference val numeric argument passed lambda richer code example next code example put lambda higherorder function practical use example implement conway game life cellular automaton represented matrix cell matrix go various transformation yielding new generation cell game life fascinating even relatively simple initial configuration lead quite complex behavior quick look rule governing cell birth survival death order consider matrix star representing live cell dash representing dead one initial configuration next generation becomes next generation life continues generation oscillate two configuration rule determining birth death survival cell given cell three neighbor corner cell eight neighbor interior cell dead cell exactly three live neighbor come life live cell three live neighbor dy overcrowding live cell two three live neighbor survives hence live cell fewer two live neighbor dy loneliness initial configuration shown top bottom live cell die neither two three live neighbor contrast middle live cell initial configuration gain two live neighbor one either side next generation conway game life usrbinperl simple implementation conway game life usage golpl input file file name given defaultinfile used use constant dead use constant alive use constant defaultinfile conwayin use strict use warning dimension undef matrix generation sub readdata datafile defaultinfile datafile shift argv argv die file datafile existn f datafile open infile datafile check line dimension dimension infile die line input file datafile integern dimension recordcount infile chomp last recordcount dimension die bad input record incorrect lengthn length dimension cell split push matrix cell close infile drawmatrix sub drawmatrix n dimension dimension print ntgeneration generationn n print nt dimension print matrix print nn generation sub hasleftneighbor ind return ind dimension sub hasrightneighbor ind return ind dimension sub hasupneighbor ind return int ind dimension sub hasdownneighbor ind return int ind dimension dimension sub hasleftupneighbor ind return hasleftneighbor ind hasupneighbor ind sub hasrightupneighbor ind return hasrightneighbor ind hasupneighbor ind sub hasleftdownneighbor ind return hasleftneighbor ind hasdownneighbor ind sub hasrightdownneighbor ind return hasrightneighbor ind hasdownneighbor ind sub computecell ind neighbor possible neighbor push neighbor ind hasleftneighbor ind push neighbor ind hasrightneighbor ind push neighbor ind dimension hasupneighbor ind push neighbor ind dimension hasdownneighbor ind push neighbor ind dimension hasleftupneighbor ind push neighbor ind dimension hasrightupneighbor ind push neighbor ind dimension hasleftdownneighbor ind push neighbor ind dimension hasrightdownneighbor ind count foreach n neighbor count matrix n eq alive return alive matrix ind eq alive count count survival return alive matrix ind eq dead count birth return dead death sub againorquit print return continue q quitn flag stdin chomp flag return flag eq q sub animate newmatrix n dimension dimension loop user signal stop newmatrix map computecell n generate next matrix splice matrix empty current matrix push matrix newmatrix repopulate matrix drawmatrix display current matrix last againorquit continue splice newmatrix empty temp matrix execute readdata read initial configuration input file animate display recompute matrix user tire gol program see conway game life almost line code involve reading input file displaying matrix bookkeeping task determining number live neighbor given cell input file configured follows first record give matrix side case matrix remaining row content star live cell space dead one code primary interest resides two function animate computecell animate function construct next generation function need call computecell every cell order determine cell new status either alive dead animate function structured animate function loop iterates user decides terminate program within loop highlevel logic straightforward create next generation iterating matrix cell calling function computecell cell determine new status issue best iteration loop nested inside loop would course nested loop clunky another way use higherorder function clarified shortly replace current matrix new one display next generation check user want continue continue otherwise terminate review call perl higherorder map function function name nod lisp call occurs first statement within loop animate newmatrix map computecell n generate next matrix map function take two argument unnamed code block lambda list value passed code block one time example code block call computecell function one matrix index matrix size although matrix displayed twodimensional implemented onedimensional list higherorder function map encourage code brevity perl famous view function also make code easier write understand dispense required messy detail loop case lambda higherorder function make lispy side perl interested detail recommend mark jason dominus book higherorder perl
109,Lobsters,perl,Perl,"Interview with a Perl developer, Randal Schwartz",http://blog.builtinperl.com/post/interview-with-a-perl-developer-randal-schwartz,interview perl developer randal schwartz,http insightcruisescom http ziprecruitercom http wwwlinkedincominrandalschwartz,randal schwartz selftaught programmer writer consultant trainer published author several perl book like programming perl learning perl intermediate perl effective perl programming important community contributor randal involved perl since first release bip get programming r worked lot dad lab workbench assembled various kit heathkit popular electronics early mostly ttl dtl eventually cmos moving nixie tube led display seemed good aptitude digital electronics school showed serious skill math decided career computer would ideal overlap two area point computer meant government bank thought would ok course predicted microcomputer revolution around corner assembled imsai high school bip first programming language r dad brought home stack book computer including one focal read focal book said seem hard wrote code piece lined paper took code garage told dad want stuff make sense never got type code anywhere though within month dad arranged local high school get afterhours access teletype baud uppercase noisy small closet dialup school district system running timesharedbasic first program wrote remember clearly press add subtract multiply divide line basic code first time met instructor giving saturday started crack open manual pulled program said try typing worked perfectly first program ran bug bip start relationship perl r big fan larry wall used rn patch frequently perl came along usenet downloaded perl something like part sharchive played much perl came along started rewriting lot awksedemacslisp script using larry announced perl volunteered back actually spare time alpha test team trying compilation machine larry access essentially grew team started evangelizing perl pretty heavily usenet ended working larry first camel book programming perl first edition contributing experience tech writer well programmer well familiar perl went write bestselling training book learning perl based course teaching first company sf bay area eventually company stonehenge bip besides perl use language significant way r yeah involved dart flutter community fairly heavily however one point actually using resume think counted something like programming language least familiar also worked smalltalk many year dating back release tektronix magnolia company later became gemstone bip current ide text editor r many year used vi vim around switched gnu emacs found prettyprinter elisp wrote one richard stallman called brilliant asked included distro little bit copy emacs ship lately dart flutter finally gotten using visual studio code new opensource editor microsoft yes microsoft bip year challenging perl job project r biggest ongoing project writing maintaining backoffice code http insightcruisescom little customerfacing something like line perl code line template toolkit also assist customerfacing brochure website booking engine brochure site required learn javascript jquery booking engine taught lot trying maintain legacy perl code write bip think perl r find fascinating going invest writing teaching resource think dart flutter much better chance give new sense purpose teaching onsite openenrollment course stonehenge big money compared contracting bip would advice someone new perl r lot crap code written dotcom boom avoid get book modern perl like chromatic book use moose equivalent bip story perl ziprecruiter significant perl technology large perl team r founder knew perl put together rentcom one largest perl shop silicon beach naturally started perl code base luckily grew wildly successful enough suffered scaling brought improve website performance contract exceeded four year moving new territory soon say honestly many perl hacker work company primarily hitting http ziprecruitercom code running give reply still good old perl catalyst dbic mostly bip worked larger enterprise level company use perl significant way r sure nearly every client past year perlrelated somehow view linkedin page http wwwlinkedincominrandalschwartz see timeframes detail bip would place perl market today compared trending language r perl code development done every day year year problem much smaller piece much bigger pie sadly heard hiring manager switch away perl enough perl devs going around perl going getting better bip mentioned attend every geek cruise far run r hmm first went yes one three recently event point attended met captain neil bauman attendee openenrollment perl class later idea perl conference cruise ship ended speaker attendee although expected want cruise ever kept going bip currently presenter floss weekly one go consulting programming hosting show albeit one related technology r probably done without teaching public speaking experience well organizing training company lot detail keep show going including identifying potential guest scheduling available slot also scheduling cohosts sometimes replacement show fun year interviewed important people floss also genuinely curious everything people discussing show good proxy home audience ask next followup question also nice get conference legitimate press giving full access conference paying travel cost
110,Lobsters,perl,Perl,Unit Testing Asynchronous Code,https://tech.binary.com/unit-testing-with-futures/,unit testing asynchronous code,unit isolation mocking mocking future,writing asynchronous code using future help simplify unit testing welltested code always prefered something test test confident code actually want within realm test exists spectrum scope much code tested small end test individual piece often single function one method class called unit test end larger scope integration test combine entire system together check endtoend functionality whole lot many different opinion mix test best people could ask personal opinion majority test smallscoped unit test covering much codebase possible ensures every part system get individual unit test failure fairly easily isolated belonging one individual piece tested fault isolation harder largerscoped integration test unit isolation exactly go sort unit test course going depend piece tested actually individual stateless function utility calculation testing easy matter providing variety input checking correct output come often piece need testing nt easy isolate like depend part system piece need testing nontrivial codebase code sits middle larger system interacts piece side receiving sort request trigger action causing internal activity within implementation lower layer system sometimes call part middleware software sits middle system outside interface interacts outside world innermost base function testing piece code like sit two layer elsewhere becomes important provide side unit testing script code tested properly isolated rest system generally unit testing use variety technique could called mocking provide fake version lowerlevel part system code tested would normally interact mocked piece run control unittest script provide whatever behaviour required perform actual test whole subject mocking unittesting wide farreaching one today look one particular situation using future implement asynchronous behaviour make easier test mocking mocking often flexible way write middleware arrange lowerlevel piece need work passed function argument construction parameter perhaps sensible default applied caller nt provide flexibility many advantage u allows code easily unittested unit test pas mocking implementation lower layer let consider following somewhatcontrived example function return price given product given currency using couple helper instance sub getproductprice args productcode args productcode wantcurrency args currency catalog args catalog productcatalog new converter args converter currencyconverter new return catalog getproduct productcode productcode sub product product pricecurrency eq wantcurrency return future done product price else return converter convert amount product price product pricecurrency wantcurrency default function use two helper real piece code productcatalog currencyconverter want test unit test script pas instance specifically place code test script provide whatever behaviour required test use test package testcatalog getproductprice productcode currency usd catalog testcatalog new get getproductprice usd simple method always return value write inline definition class package testcatalog sub getproduct return future done product new price pricecurrency usd handy short definition probably sufficient short unit test nt flexible hard change customise test within file want trial lot different behaviour piece test different return value mock function need way make return different value different test one way could arrange write larger implementation function perhaps controlled global variable work well mean half behaviour sits definition shared mocking instance half sits individual test lead overall logic test hard read keep swapping two part definition different place since interface around function testing based future use better arrangement make use deferred value semantics future allow flexible behaviour keeping code inline one place individual test mocking future entire point future represent operation outstanding might finished yet use mocking function go around piece code tested rather needing implement full mocked behaviour inside function definition simply construct return new future nt yet complete later test logic fill getproductf package testcatalog sub getproduct return getproductf future new one mock implementation sufficient number different test want apply use implementation reader familiar using mocking unittesting might wondering behaviour within function actually applies create required result test key notice piece tested also return future mean nt completed yet yield final answer unit test regains control fact simply storing future returned piece tested variable unit test free perform action first point function tested called getproduct method provide completion result getproductf future created f getproductprice productcode currency usd catalog testcatalog new getproductf done product new price pricecurrency usd f get getproductprice usd writing code form returned lexical toptobottom reading nature source code back matching flow behaviour time read various stage behaviour test block right order go capturing incoming argument implementing mocking method build far complete test harness piece code tested able apply manner behavioural test getproductargs getproductf package testcatalog sub getproduct getproductargs return getproductf future new convertargs convertf package currencyconverter sub convert convertargs return convertf future new proceed write complete test check way function invoked piece tested make correct use value return f getproductprice productcode currency eur catalog testcatalog new converter currencyconverter new isdeeply getproductargs productcode args go productcatalog invoked correct argument getproductf done product new price pricecurrency usd ok f isdone result yet available currency conversion isdeeply convertargs amount args go currencyconverter invoked correct argument convertf done f get getproductprice usd designed api original function return result using future additionally making use future within implementation able write unit test concise powerful way allowing unit test concurrently perform action caller callees code test fully control logic test implement required step either side code neat logical manner allowing test code read neat form top bottom source code follows behaviour running pingponging step outside caller calling function test step inside implementation helper function invoked code make logic unit test easier read understand welltested code good thing wellwritten readable unit test code definitely help u achieve deferred nature future allow u interleave step required unittesting middleware code neat readable way helping ensure code nicely tested reliable
112,Lobsters,perl,Perl,An Open Letter to the Perl Community,https://www.perl.com/article/an-open-letter-to-the-perl-community/,open letter perl community,open letter perl community elizabeth mattijsen pumpkin perl rakudo perl moarvm perl reunification summit wat perl python external c library microbenchmarks micro service parsing nonascii language butterfly perl project porting use cpan butterfly plan written c macro language set module wanted list perl core development fund winding ircfreenodenet webinterface,open letter perl community jan elizabeth mattijsen past month wracking brain bring pumpkin perl perl version perl maintained perl porter rakudo perl implementation perl based nqp moarvm closer together yes given idea although first attempt organizing perl reunification summit really worked way hoped would positive effect brought together people perl community normally would never discussion nice advance made perl still interested getting perl perl together share perl mindset mix enough dwim mean much wat know perl complicated development process could argue perl fourth implementation attempt also first perl implementation actually work interface seamlessly perl python external c library box beating perl microbenchmarks used production especially area micro service parsing nonascii language consider perl sister language perl personally consider perl genetically engineered daughter language best gene many parent daughter difficult childhood alienated many getting puberty early adulthood digress butterfly perl project clear upgrade path perl perl mean chance combining perl perl become sum part perl porter still adding feature inspired perl confuses picture radical idea would perl porter would go back original goal porting perl time different operating system porting perl different virtual machine place moratorium new feature development confined maintenance current runtime would safeguard valued feature perl stability backwards compatibility digress porting perl nqp quite perl one implementation language rakudo perl would provide migration path basically would revival use project implement version perl slang sublanguage perl effort would provide clear migration path year old perl interpreter modern vm allowing execution perl source code moarvm jvm javascript backends thus guaranteeing life perl programming language way future taking advantage multiprocessing feature modern vm provides short term would still slower perl long run would running faster justintime compilation hot code optimizes source code machine code fly rather path handoptimizing hot code x although wholeheartedly would support butterfly perl project also come conclusion longer itch would want scratch personally moment cpan butterfly plan perl consist anyway runtime written c macro language also core set module defined apis documentation many module cpan integral part perl many module would need ported butterfly perl project porting would useful perl would make porting user perl program perl much easier therefore starting effort massmigrate perl module perl core module others cpan developing port perl module perl guide covering thing like naming convention export translating perl oo perl oo scoping gotchas threading plus note various builtin feature perl may useful porting semantics rather code next create website register contributor take responsibility porting perl module perl eg wanted list contributor link github repo write code handle pull request give commit bit ported module would uploaded cpan new perl distribution create leaderboard rank contributor progress position leaderboard could defined product size original perl module line code documentation test completion migration indicated contributor judged jury peer bonus point documentation andor test improved fly bonus point x code involved pure perl implementation available sponsor would match migrated code donation perl core development fund contributor get support perl directly also indirectly support development core perl something order cent per converted line perl code documentation test donated moment jury peer decided converted module functional enough published version leaderboard would backed website track activity along line api social medium interface make year people really start migrate code perl perl want try see perl work winding sincerely hope enough people support cpan butterfly plan maybe butterfly perl project start moving forward one direction rather two like get involved please join u channel ircfreenodenet irc app installed talk u browser via webinterface instead
113,Lobsters,perl,Perl,Day 1 – The Grinch of Perl 6: A Practical Guide to Ruining Christmas,https://perl6advent.wordpress.com/2017/12/01/the-grinch-of-perl-6-a-practical-guide-to-ruining-christmas/,day grinch perl practical guide ruining christmas,awful true false routine internalishish wrapping routine related routine next candidate ordering invisibility cloak hohoho core grammar core action comment token redefined token phaser conclusion like,look smiling happy coworkers friend close family member enjoying programming perl version christmas great concurrency primitive core grammar fantastic object model sickens wait wait second got idea awful idea got wonderful awful idea ruin christmas need trick sleeve muahuahahaha welcome perl advent calendar day today christmas awesome blog post perl lined today show naughty side purposefully naughty thing sure good us naughty lot fun let begin true false heard operator fun little thing say true false true false output ti n forty two say n output forty say n output infix operator first clone object left hand side mix role provided right hand side clone n role evener method iseven self say niseven output say nname output int evener nt role first two example operator handy shortcut thing right nt role creates one role single method named name object right hand side method simply return given object thus put true boolean output equivalent put true role method begin booleanname boolean output name string return str since str object say booleanname output role provides method named str put call nonstr object obtain stringy value output causing boolean altered stringy representation example string true rakudo perl false pumpkin perl using operator alter string behave like perl version role method bool nextsame unless self eq false sub perlify v say perlify meow output say perlify output say perlify output role provides bool method routine call inside method redispatch original bool method using nextsame routine unless string case simply return false operator brother infix operator behaves similarly except clone nb shortcut automatically making role nonroles available bleeding edge rakudo version class method stuff original new say ostuff output role method stuff modded say ostuff output thing program globally accessible implementation eg rakudo certain constant cached mean get quite naughty separate part program christmas celebrator wo nt even know hit em override prompt routine read like christmas give christmas tree role method get callsame name prompt enter name say entered name name output enter name typed user zoffix znet entered name zoffix znet override work even stick module also kick notch mess enums cached constant though naughtiness likely wo nt able cross module boundary implementationspecific cache invalidation true false say ti true ti false output ti far nt quite wanted impact let try coercing number bool true false say ti true ti false output ti go final grinchworthy touch mess numerical result computation number rakudo cache int constant infix operator also us internalishish bridge method computing numerics different type let override bridge constant return something funky begin role method bridge say output say output proper evil sure ruin christmas getting wrapping kind christmas would without wrapped present oh present shall perl wrap method provided routine type let u wrap em oh good use soft sub foo say foo foowrap say wrap callsame say back wrap foo output wrap foo back wrap enable use soft pragma prevent unwanted inlining routine would otherwise interfere wrap use routine want wrap noun using sigil call wrap method take callable given callable signature must compatible one wrapped routine proto multi otherwise able dispatch routine correctly call wrapper args example simply use anonymous capture accept possible argument inside callable two say call make use callsame routine call next available dispatch candidate happens original routine come handy since attempt call foo name inside wrapper start dispatch scratch resulting infinite dispatch loop since method routine wrap well get hold method object using lookup meta method io handlelookup print wrap method c wrapee nextcallee wrapee self hohoho wrapee self c print hello world n output hohoho hello world grab print method io handle type wrap wish make use self inside method wrapping using standalone method method instead block subroutine reason want self able call method wrapping print christmassy message method detached callwith related routine need self fed along rest args ensure continue dispatch right object inside wrap use nextcallee routine obtain original methodif multi get proto specific candidate best match original argument next candidate ordering slightly different inside wrap compared traditional routine grab nextcallee variable want call calling shift routine dispatch stack first call print christmassy message second call merely slip capture c original args performing call like originally meant happen thanks wrap alter even completely redefine behaviour subroutine method sure jolly fun friend try use hohoho invisibility cloak trick played far wonderfully terrible obvious visible since perl superb unicode support think search mass unicode character fun mischief particular looking invisible character whitespace one sufficient purpose four fairly invisible computer word joiner cf function application cf invisible time cf invisible separator cf perl support custom term operator consist character except whitespace example patented shrug operator sub infix b pick say coke pepsi output term made nonidentifier character could used actual character definition well sub term c family woman woman boy boy faaaamillyyy say output faaaamillyyy invisible nonwhitespace character hand make invisible operator term sub infix c invisible time b r say area circle output area circle let make jolly module export invisible term operator sprinkle christmassy friend code unit module jolly sub term c invisible time export sub infix c invisible time export b sub prefix c invisible separator looser export say hohoho used character term infix operator fine perl fairly strict expectation term followed operator vice versa know meant use term use infix operator resultant grinch code along output produce output hohoho sure fun debug list character line code see used invisible goody say uninames output invisible separator latin small letter latin small letter latin small letter space digit four digit two invisible time invisible time semicolon hohoho productivity christmas time drop standstill people holiday new year mind would nt surprise see whole bunch todo comment code able detect complain nothing grinchlike aborting program compilation whenever someone feeling lazy perl slang experimental feature currently officially supported interface however purpose fine using slang possible lexically mutate perl grammar introduce language feature behaviour like perl core developer would begin langrefineslang main role someextragrammar token term sym meow syntax error role someextraactions method expr mu say parsed expression nextsame syntax error say hehe output parsed expression syntax error parsed expression hehe parsed expression say hehe hehe experimental part slang feature largely lie rely structure core grammar core action currently official guarantee remain unchanged make slang fragile naughty grinchy trick modifying behaviour comment read code trace call comment token find actually part redefined w token may know everyday perl grammar responsible whitespace matching among thing grammar rule complicates matter slightly w cornerstone token along compunit statementlist statement ca nt modified mainline code outside routine block reason slang loaded mainline already parsed using stock version token token inside statement token changed even mainline statement token reblesses grammar w get luxury since starting tread far deep enough talk let code begin langrefineslang main role token comment sym todo todo n die hohoho think meant finish sub businessstuff todo business stuff output sorry hohoho think meant finish business stuff use begin phaser make slang modification happen compile time since trying affect compilation performed added new proto token comment sym todo core perl grammar match content similar regular comment would match except also look todo christmassy friend decided leave around n atom capture whatever string user typed todo match capture marker tell compiler exclude previously matched stuff token captured text inside match object stored variable end token simply use code block die message tell user finish todo quite crafty since rather user notice jolly trick let stick slang module loaded target code make slight tweak original code file sub export langrefineslang main role token comment sym todo todo n die hohoho think meant finish mapnew file use lib use jolly sub businessstuff todo business stuff output sorry hohoho think meant finish business stuff want slang run compilation time script module removed begin phaser instead stuck code inside sub export run module used script compilation mapnew prefer write export sub indicate wish export symbol script merely use module slang get activated awesome conclusion today started perl advent calendar naughty grinches messing user program mutated object using operator wrapped method subroutine custom routine implemented extra feature made invisible term operator even mutated language bidding next day see perl advent article sure check back maybe end grinchy heart grow three ofun like like loading related
114,Lobsters,perl,Perl,2016 London Perl Workshop,http://www.youtube.com/playlist?list=PLxavAW22r8Ak2l6yBK27awPF1ZNP8Ryf2,london perl workshop,,
115,Lobsters,perl,Perl,Object models / fuzzy notepad,https://eev.ee/blog/2017/11/28/object-models/,object model fuzzy notepad,think object prototypical written remarkably detailed description process weak attribute metatables methodcall syntax one twentytwo year reference order python us moose little differently moose documentation,anonymous asks dollar programming language well written think object state behavior practice mostly mean method call suspect popular impression object also work come whatever c java happen point view whole post probably nonsense baseline notion object rigid definition woven tightly design two massively popular language even make sense talk object mean mean feature language possibly mean anything else think shame pile lot baggage onto fairly simple idea polymorphism example nothing object escape hatch static type system inheritance way reuse code object easiest fastest one get frankly much closer speed tradeoff fundamental part concept could experimentation around object work impossible language commonly thought objectoriented brief run inner working object four dynamic language think really appreciated object spent time python hope help someone else whet appetite four language going touch python look familiar java c crowd starter actually class construct vector def init self x selfx x selfy def neg self return vector selfx selfy def div self denom return vector selfx denom selfy denom property def magnitude self return selfx selfy def normalized self return self selfmagnitude init method initializer like constructor named differently object already exists usable form time initializer called operator overloading done implementing method special dunder name property created property syntax applying wrapper function function defined inheritance even multiply class foo b c def bar self x z stuff super bar x z cool traditional object model detail one python object fixed layout code inside outside class add remove whatever attribute want whatever object want underlying storage dict python mapping type rather something like one also possible change probably case everything say create attribute class level start get peek behind curtain foo value def addvalue self value selfvaluesappend value foo b foo aaddvalue print avalues baddvalue b print bvalues b assigned value default assigned object fact individual object know use var get underlying storage dict see value entry anywhere instead value life class value thus object right python asked selfvalues check see self value attribute case python keep going asks class one python object model secretly prototypical class act prototype shared set fallback value object fact also method call work syntactically special see separating attribute lookup call print abc startswith true meth abc startswith print meth true reading objmethod look method attribute one obj python check class find one function class body ah wait code showed meth seems know object came plain function inspect resulting value claim bound method builtin method rather function something funny going funny something descriptor protocol python allows attribute implement custom behavior read written attribute called descriptor written quick overview python look attribute find class value get get instead using value python use return value get method property decorator work way magnitude property original example shorthand magnitudedescriptor def get self instance owner instance none return self return instancex instancey class vector def init self x selfx x selfy magnitude magnitudedescriptor ask somevecmagnitude python check somevec find magnitude consults class instead class magnitude value get method python call method somevecmagnitude evaluates return value instance none check get called even get descriptor directly class via vectormagnitude descriptor intended work instance anything useful case convention return descriptor also intercept attempt write delete attribute absolutely whatever want instead note similar operating overloading python descriptor must class slap one arbitrary object work brings right around bound method actually work function descriptor function type implement get function retrieved class via instance get bundle function instance together tiny bound method object essentially class functiontype def get self instance owner instance none return self return functoolspartial self instance self passed first argument method special magical way built simple piece also readily accessible python code note also objmethod attribute lookup call python actually care whether method method class callable thing object get autoself behavior object otherwise difference descriptor one several way customize attribute access class implement getattr intervene attribute found object setattr delattr intervene attribute set deleted getattribute implement unconditional attribute access last one fantastic way create accidental recursion since attribute access within getattribute course call getattribute really love python might seem like magical special case descriptor work class really could implement exactly behavior pure python using thing told class object remember instance type reason descriptor work class type effectively class type def getattribute self name value super getattribute name like op overload get must type instance ty type value hasattr ty get descriptor class access instance return tyget value none self else return value even trivially prove going skipping type behavior class descriptor def get self instance owner print called class foo bar descriptor foobar called typegetattribute foo bar called objectgetattribute foo bar mysterious super function used exhaustively traverse superclass method call even face diamond inheritance also expressed pure python using primitive could write superclass calling convention use exactly way super one thing really like python little truly magical virtually everything object model exists type rather language mean virtually everything customized pure python brief word stuff since could talk forever python three language get class block fairly interesting look like class name base kwargs code said several time class object fact class block one big pile syntactic sugar calling type argument create new type object python documentation remarkably detailed description process gist python determines type new class metaclass looking metaclass keyword argument one python us lowest type among provided base class anything special type since every class inherits object object instance type python executes class body get local scope assignment method definition go scope python call type name base attrs kwargs name whatever right class base position argument attrs class body local scope method class attribute end class brand new type assigned name course mess implement prepare metaclass example use custom mapping storage local scope including read allows interesting shenanigan part really implement pure python scoping bit couple extra rule make sense class particular function defined within class block close class body would nonsense finally actually happens create object including class remember invocation type calling foo implemented well call type implement call call special method find type look something like oh fun wrinkle hard express pure python type class instance class type def call self args kwargs remember self class instance type new true constructor objectnew allocates storage new blank object instance selfnew self args kwargs return whatever want new init called right type isinstance instance self instanceinit args kwargs return instance trivially confirm asking type call method assuming type implement call get back bound version type implementation listcall methodwrapper call type object thus implement call metaclass completely change subclass created including skipping creation altogether like bunch stuff even touched python offer something surface look like traditional classobject model hood act like prototypical system failed attribute lookup simply defer superclass metaclass language also go almost superhuman length expose moving part even prototypical behavior implementation getattribute somewhere free completely replace type proxying delegation easy also nice feature bundle well mean library author manner convoluted hijinks consumer library see understand work need inherit particular class metaclass use descriptor decorator even learn new syntax mesh well python culture pretty big principle least surprise superadvanced feature tend tightly confined single simple feature like make weak attribute cordoned dsl eg defining formstructdatabase table class body particular never seen metaclass wild implement call mixed feeling probably good thing overall python world show restraint wonder interesting possibility missing implemented metaclass call entitycomponent system strove minimize fuss communicating component never saw light day enjoyed seeing new thing python could relatively simple syntax mind seeing say object model based composition inheritance built atop python primitive lua object model instead give handful small primitive building object model pretty typical lua powerful language carefully constructed small time never encountered anything else quite like start indexing really justice best way demonstrate object work lua build scratch need two key feature first metatables bear passing resemblance python metaclasses table lua mapping type primary data structure key value nil list implemented table whose key consecutive integer starting nothing terribly surprising dot operator sugar indexing string key local b print print tb tc print c metatable table associated another value usually another table change behavior example operator overloading implemented assigning function special key metatable local b print error attempt perform arithmetic table value local mt add function left right return end setmetatable mt print interesting part one special key index consulted base table indexed key contain table claim every key map local local mt index function table key return key end setmetatable mt print tfoo foo print tbar bar print index function either yet another table case table simply indexed key key still exist table metatable index process repeat easy several unrelated table act single table call base table object fill index table function call class half object system even get prototypical inheritance chaining index together point thing little confusing since least three table going diagram keep mind lua actually anything called object class method convenient nickname particular structure might build lua primitive metatable index lookup table superclass method function end metatable index lookup table class method function end base table object note metatable class defines behavior method conversely try use class directly metatable probably much pretty different eg python operator overload method funny name one nice thing lua approach keep interfacelike functionality separate method avoid clogging arbitrary object namespaces could even use dummy table key completely avoid name collision anyway code local class foo function print foo got end local mt index class setmetatable return first argument nice shorthand local setmetatable mt local setmetatable mt foo got foo got wait wait hang call method get object maybe lua magical variable quite key feature come methodcall syntax lightest touch sugar enough method invocation note colon b c exactly equivalent except evaluated ab c course really b c write method actually something local class bar function self print score selfscore end local mt index class local setmetatable score mt local setmetatable score mt bar score bar score need much like python method data live namespace lua care whether obj method find function obj get one metatable index unlike python function passed self either way self come use rather lookup behavior aside strictly speaking lua value metatable try index nontable lua always consult metatable index string string library metatable call method try format number string function nil share typespecific metatable change debug library often unavailable limited use writing lua binding c give pointer metatables directly give method implemented c course writing stuff every time little tedious errorprone instead might want wrap inside little function problem function makeobject body create metatable local mt index body create base table serve object local obj setmetatable mt done return obj end local dog act default value objbarks missing index kick find value class objbarks assigned go object shadow value bark bark function self selfbarks selfbarks print woof end local mydog makeobject dog mydog bark woof mydog bark woof mydog bark woof print mydogbarks print dogbarks work fairly barebones nice thing extend pretty much however want reproduce entire serious object system lord know enough floating around implementation löve game let animal object extend cry called automatically object function animal init print whoop could nt think anything interesting put end nice syntax adding first argument called self assigning function animalcry function animal cry selfcries selfcries end local cat animal extend function cat cry print meow catsupercry self end local cat cat cat cry meow cat cry meow print catcries say extend however want mean could implemented python style super cat self cry syntax never got around could even make work multiple inheritance really wanted could go complete opposite direction implement composition could implement descriptor customizing behavior individual table key could add pretty decent syntax compositionproxying trying hard end section lua philosophy philosophy give bare minimum make object work absolutely whatever want lua something resembling prototypical inheritance much firstclass feature emergent property simple tool since make index function could avoid prototypical behavior something different entirely severe downside course find build object system get pretty confusing quickly multiple small moving part thirdparty code may also object system subtly different behavior though experience thirdparty code try hard avoid needing object system hard say lua culture like since lua embedded language often little different environment imagine thousand millicultures instead say tedium building object model led something traditional prototypical inheritance whatnot partly used also really dang easy get working likewise love property python use dang time yet use single one lua particularly hard add object model add shop around object model also port code use add huge amount friction thought designing interesting ec custom object behavior really worth effort power flexibility lua offer cost time something working exhausted actually use javascript notable preposterously heavily used yet class block well okay yes one long time even one sugar vector class vector constructor x thisx x thisy get magnitude return mathsqrt thisx thisx thisy thisy dot return thisx otherx thisy othery classic javascript would written vector x thisx x thisy objectdefineproperty vectorprototype magnitude configurable true enumerable true get function return mathsqrt thisx thisx thisy thisy vectorprototypedot function return thisx otherx thisy othery hm yes see added class javascript new type defined term function constructor right away get trouble big difference two invocation actually completely forgot spending four hour writing python lua let vec vector let vec new vector first call function vector assigns property going window global x return nothing vec undefined second call vector set new empty object evaluates object result actually expect detect situation strange newtarget expression never remembered true honesttogod firstclass prototypical inheritance word prototype even right write javascript look dot vec presumably find consults vec prototype object see using objectgetprototypeof since vec vector prototype vectorprototype stress vectorprototype prototype vector prototype instance vector say instance true type vec still object want find vector automatically assigned constructor property prototype available vecconstructor course vectorprototype prototype case process would continue dot found common arguably bad way simulate single inheritance set classprototype instance superclass get prototype right tack method class nowadays objectcreate superclassprototype python lua though particularly surprising kinda spoiled suppose one difference javascript tack arbitrary attribute directly onto vector like remain invisible instance since prototype chain kind backwards lua squirrel stuff away metatable another difference every single object javascript bunch property already tacked one objectprototype every object object mean mapping prototype prototype default objectprototype bunch ancient junk like isprototypeof nit possible explicitly create object prototype via objectcreate null like lua unlike python javascript distinguish key found object key found via prototype property defined prototype objectdefineproperty work well directly object javascript lot operator overloading thing like symboliterator also work object prototype may point wondering unlike lua python last language special builtin value context value invisibly passed every function call determined function came function result attribute lookup set object containing attribute otherwise set global object window also set whatever want via call method function decision made lexically ie literal source code written pythonstyle bound method word obj objmethod window let meth objmethod meth also reassigned every function call meaningfully closed make using closure within method incredibly annoying old approach assign regular name like self got syntax highlighting since also builtin name browser got functionbind produced callable thing fixed context value kind nice finally arrow function explicitly close current defined change called phew already showed class syntax really one big macro prototype stuff right way even prevents calling type without new underlying model exactly inspect part class vector consolelog vectorprototype dot magnitude let vec new vector consolelog objectgetprototypeof vec vectorprototype nt know would subclass vector let roll class vectest extends vector consolelog vectestprototype consolelog objectgetprototypeof vectestprototype vectorprototype ala class syntax couple shortcoming use class block assign arbitrary data either type object prototype apparently deemed confusing mutation would shared among instance prototype work python work javascript one popular language time worked twentytwo year argh still whatever assignment want outside class block course little ugly something think look sugary class subtle result behavior class block quite syntax object literal check data runtime thing class foo x fails parse javascript two largely entirely identical style keyvalue block thing start come apart seam little bit javascript really attribute protocol instead extension point suppose one objectdefineproperty seen common case also get syntax inside property literal thing unlike python property wrapper around simple primitive primitive javascript language four property run code access completely separate firstclass concept want intercept arbitrary attribute access kind operator completely different primitive proxy type let intercept attribute access operator instead produce wrapper object support interception defers wrapped object default cool see composition used way also extremely weird want make type overload calling return proxy wrap type rather actually returning type workable though constructor return whatever object want proxy transparent enough instanceof already behaves correctly could customize instanceof symbolhasinstance really operator overloading implement yet another completely different way know design result legacy speed object could intercept attribute access attribute access would slowed everywhere fair enough still leaf surface area language bumpy little hard tell original idea prototype interesting hidden behind awkward syntax since gotten bunch extra feature awkwardly bolted reflect wildly varied thing builtin type dom api already class syntax explicitly designed avoid exposing prototype part model admit lot heavy javascript might overlooking seen virtually code make use recent advance object capability forget custom iterators overloading call remember seeing javascript wild even us property yet know everyone waiting sufficient browser support nobody know nobody care model advanced recently suspect javascript still shackled legacy something prototype really get copy code object model ala prototype good hopefully class syntax make bit accessible python perl also object system expects build lua give two simple powerful tool building one perl feel like puzzle half piece missing clearly going something gave half brief perl object reference blessed package need explain thing honestly one biggest problem original perl object setup many strange corner unique jargon understand get ground want try running code stick use first line perl big backwards compatibility need opt breaking change even mundane say builtin behind feature gate reference perl sort like pointer main use different see perl strange property data structure try hard spill content place despite dedicated syntax array foo array variable distinct single scalar variable foo actually impossible nest array foo bar foo foo bar flat list eight item idea guess array one thing container happens hold multiple thing multiple thing anywhere expects single value array element contain array array fundamentally single value reference form indirection also nice property single value add containment around array general make working perl primitive type much sensible reference variable taken operator use directly create reference anonymous array hash foo bar foo foo bar nested list two item incidentally sole reason initially abandoned perl python nontrivial software kinda requires nesting lot data structure end reference everywhere syntax going back forth reference content tedious ugly perl object must reference perl care kind reference usually hash reference since hash convenient place store arbitrary property could well reference array scalar even sub ie function filehandle getting little ahead first half blessing package perl package namespaces package look like package foo bar sub quux say hi quux foo bar quux called anywhere nothing shocking right named container lot detail kind weird like package exists liminal quasivalue space basic idea bag stuff final piece blessing perl funny name binding package reference basic class might look like vector name new convention special sub new perl argument passing weird nt ask class x create object unusually array reference make sense self x associate package reference note class regular string vector bless self class return self sub x self return self sub self return self sub magnitude self return sqrt self x self switch back default package package main method call syntax pass invocant first argument package package name vec vector new say vec magnitude thing note first self nothing object normal syntax getting value index array reference called self class based hashrefs would use self value instead blessed reference still reference treated like one general perl dereferencey operator exact behavior depends follows followed bracket apply bracket thing reference index hash reference index array reference call function reference followed identifier method call package mean calling function package passing package name first argument object blessed reference mean calling function associated package passing object first argument little weird blessed reference superposition two thing normal reference behavior completely orthogonal object behavior also object behavior notion method v data know method perl let omit parenthesis lot place including calling method argument vec magnitude really vec magnitude perl blessing bear similarity lua metatables ultimately perl much closer ruby message passing approach three language approach get something maybe callable surprise ruby spiritual successor perl lead one little wrinkle actually expose data write x method supposed every single attribute type yes worry thirdparty module help incredibly fundamental task take class accessor fast named faster class accessor package foo use base qw class accessor fast package mkaccessors qw fred wilma barney package lexical name current package qw list literal split content whitespace assumes using hashref key name attribute obj fred return fred key hashref obj fred change also somewhat bizarrely inherit class accessor fast speaking inheritance done populating packageglobal isa array number string name parent package code instead opts write use base thing commonly use parent thing every package implicitly inherits universal freely modified perl code method call superclass method super pseudopackage sub foo self self super foo however depthfirst search mean almost certainly wrong thing faced multiple inheritance accepted solution involved thirdparty module perl eventually grew alternative opt may familiar order python us use mro sub foo self self next method offhand actually sure next method work seeing originally implemented pure perl code suspect involves peeking caller stack frame different style customizability eg python mro never intended pluggable use special pseudopackage mean really someone determined enough make happen anyway operator overloading look little weird though really pretty standard perl package myclass use overload add sub add self swap use overload pragma pragma mean regularass module wizardry imported add get reference add sub pas overload module said add add would call pas map operator function builtin module worry name clash pollution pretty nice even give reference function live package want clog namespace could put another package even inline anonymously one especially interesting thing perl let overload every operator perl lot operator considers math builtins like sqrt trig function operator least operatory enough overload also overload file test operator e path test whether file exists overload conversion including implicit conversion regex fascinating overload dereferencing thing perl say hashref key get underlying hash single object could pretend reference multiple different type including subref implement callability neat somewhat related overload basic operator indexing etc basic type reference tie function designed completely differently look method fixed name go figure intercept call nonexistent method implementing function called autoload within autoload global contain name method called originally feature think intended loading binary component large library onthefly needed hence name offhand sure ever saw used way getattr used python way intercept method call think perl must forgetting something like decade ago council elder sage sat put together whole whizbang system cover moose package vector use moose x rw isa int rw isa int sub magnitude self return sqrt self x self moose way pretty much everything built primitive moose also add metaclasses somehow despite underlying model actually support entirely sure managed remember class introspection moose much nicer builtin way wondering builtin way begin looking hash called vector typo really stress enough much stuff moose want delve since moose actually language model hope see meant first said perl multiple inheritance mro us wrong one default extensive operator overloading look nothing like inheritance work also us totally different mechanism special method name instead understands method data leaving figure accessors hand object system clear general design gunning none piece really look anything like weird distinctly perl way result certainly flexible least especially cool use whatever kind reference want storage though even say acknowledge different simply subclassing list something python feel different perl maybe look different written much perl long time know community like moose already ubiquitous left think would let say community mostly focus stuff moose even decade ago moose could already far ever seen done hand perl always made big deal role read interface instance despite never seen anyone care perl moose came along maybe presence moose made popular know also wrote perl seriously intervening year encountered people ever used perl oneoffs maybe come surprise lot reader perl object model well fun hope made sense special mention go rust object model fiddle runtime thing little differently really interesting thinking tiny difference make huge impact people practice take choice storage perl versus python perl massively common uri class us string storage nothing else seen anything like python aside markupsafe specifically designed string type would guess partly perl make choose using hashref obvious default make choice one way python especially inheriting object getting dictbased storage obvious thing ability use another type quite obvious right involves tiny bit extra work consider lua could descriptor extra bit work especially design work enough impediment never implemented think object implementation looked included either super weird light natural object would strongly associated feature java c attach think make important play around look moose done really bear mind description perl stuff flip moose documentation amazing built
116,Lobsters,perl,Perl,London Perl Workshop,http://act.yapc.eu/lpw2017/,london perl workshop,map attend present talk create new user account log register submit proposal sponsor organiser submission proposal deadline speaker notification feed latest news link schedule page download http older announcement,london perl workshop lpw free oneday technical conference central london united kingdom november new cavendish street london map please save date register hope see attend present talk attend please create new user account log register speak please submit proposal soon possible earlier submit likely talk accepted welcome submission talk discussion presentation workshop perl perl language supporting technology could something working something interesting workshop chance u learn sponsor would like sponsor london perl workshop please hesitate contact organiser help proposal submission speaker invited talk subject accept talk people age background circumstance london perl workshop inclusive event would love attend year hope access three workshop room would like run many workshop possible would also love refresh skill wishing engage latest development perl language wish submit workshop please use submission form talk please note workshop minute length proposal deadline friday october speaker notification monday october please note starting accept talk earlier proposal deadline given priority schedule watch space update check feed latest news time rawgit render mobile device link visit schedule page view also download copy pdf form friday nov carpenter arm whitfield st fitzrovia london http older announcement
117,Lobsters,perl,Perl,Perl turns 30 and its community continues to thrive,https://opensource.com/article/17/10/perl-turns-30,perl turn community continues thrive,history lesson perl perl early perl modern perl perl infoworld interview rakudo perl original design document perl community larry wall man started interview perl porter irc pumpkin sawyer x dancer project opensourcecom perl monger nypm perl monger perlmonks perlmonks point level meditation cpan comprehensive perl archive network uploaded daily opensourcecom metacpan perl foundation perl foundation white camel yapc europe foundation yef japan perl association japan perl association enlightened perl organisation enlightened perl organisation strawberry perl yapc perl conference oscon yet another perl conference triedandtrue technology much,larry wall released perl compsourcesmisc usenet newsgroup december nearly year since language community enthusiast sprung around grown continue despite suggestion contrary wall fundamental one way resonate developer perl allows programmer embody three chief virtue programmer laziness impatience hubris perl originally designed utility beauty perl programming language fixing thing quick hack making complicated thing possible partly power community conscious decision larry wall part interview posed question last time used duct tape duct history lesson perl perl perl allows programmer embody three chief virtue programmer laziness impatience hubrislarry wall developed first perl interpreter language working system development corporation later part unisys early release focused tool needed system engineering problem trying solve perl release made improvement regular expression engine perl added support binary data stream march perl released along first edition programming perl larry wall randal l schwartz prior perl documentation perl maintained single document oreillypublished camel book called continues canonical reference perl language perl changed year programming perl updated fourth edition early perl perl released october nearly complete rewrite interpreter new feature included object reference lexical variable use external reusable module new modularity provides tool growing language without modifying underlying interpreter perl introduced cgipm contributed use early scripting language internet many perldriven internet application site still use today emerged time including imdb craigslist bugzilla cpanel modern perl perl version perl released anniversary perl december version mark start modern perl movement modern perl style development take advantage newest language feature place high importance readable code encourages testing relies heavily use cpan ecosystem contributed code development perl continues along modern line attention recent year unicode compatibility json support useful feature objectoriented coder perl july larry wall announced perl conference interested working perl redesign language goal removing historical wart language fifteen year later december perl released perl backwardcompatible perl although intended replacement perl team great hurry perl obsolete whether perl replace perl yeah probably year larry wall said infoworld interview start stop several implementation perl one remains active development rakudo perl perl solely specification unlike prior perl possible many implementation could emerge original design document state perl anything pass official test suite perl community heard said many time year involved perl community perl people people create maintain support use perl jointly create environment developer learn thrive working thing interest larry wall man started center course larry wall larry wife gloria travel world perl technical event first joined perl community seemed bit hero worship going around larry particularly enjoy aspect notoriety kind softspoken brilliant man enjoys coding community developed around work day usually see wearing broadbrimmed hat bold print shirt hard miss even crowd eclectic perl community son grandson pastor larry christian heritage idea informs work advocacy perl including idea people important wife attended graduate school linguistics berkeley ucla planning become missionary forced give dream health reason wall said linux journal interview funny thing missionary probably get good perl gotten missionary go figure privileged moderate q session featuring larry yapc na orlando florida got spend time gloria meeting honored call friend ever get chance spend time talking amazing couple life enriched experience perl porter may perl porter email list founded place coordinate work porting perl different platform known primary mailing list discussion maintenance development standard distribution perl number porter active irc well current overseer process called pumpking holder pumpkin current pumpking sawyer x also involved dancer project wrote couple year ago opensourcecom discussion energetic time lot talented people many strong opinion looking knowledge core working perl though magic wrought perl monger group perl enthusiast new york city area met first oreilly perl conference later became oscon formed new york perl monger nypm pm suffix perl monger group play fact sharedcode perl file suffixed pm perl module perl monger organization past year provided framework foundation nurturing local user group world currently boast perl monger group individual group group working team sponsor host conference hackathons workshop time time well local meeting technical social discussion perlmonks question want read wisdom guru perl check perlmonks find numerous tutorial venue ask question get answer community along lighthearted bit perl perl community software drive perlmonks getting little long tooth community continues thrive new post daily humorous take religious fervor developer express favorite language participate gain point level meditation contains discussion perl hacker culture related thing include suggestion idea new feature cpan perl like many language modular new capability created installed without update core interpreter comprehensive perl archive network founded online since october created help unify assortment scattered archive perl module repository mirrored server around world currently contains almost module author new release module distribution uploaded daily one cpan interesting artifact acme namespace acme area cpan reserved experiment entertainingbutuseless module frivolous trivial idea article opensourcecom looked module fun search cpan metacpan anything might need perl foundation kevin lenzo founded yet another society become known perl foundation original intent assist grassroots effort event north american perl conference including banking organizational need focus since shifted tpf offer grant extending improving perl perl perl foundation also award white camel recognition significant noncode contribution perl community yapc europe foundation yef formed help grow european perl community primarily public event yef support local perl monger group effort sponsor conference providing online payment registration system kickstart donation effort support frequent workshop hackathons europe well annual perl conference japan perl association japan perl association help promote perl technology culture asia advocacy sponsorship annual yapc asia conference frequently world largest conference perl many year conference held tokyo recently started moving location japan enlightened perl organisation working parallel perl foundation enlightened perl organisation work support perl project help perl remain enterprisegrade platform development epo focus attention code toolchain element documentation promotional material tutorial make corporate adoption perl easier addition sponsorship london perl workshop strawberry perl initiative enlightened perl organisation provided substantial funding cpan tester tester group developer test cpan module many version perl numerous o platform epo also sponsor sendanewbie program providing funding firsttime attendee perl conference yapc perl conference first oreilly perl conference held oreilly added additional open source content program conference became known oscon first yet another perl conference held june year pittsburgh held north america every year since additional similar conference organized europe starting israel since australia since asia brazil since russia since name perl conference owned oreilly announced agreement reached allow use name yapc conference beginning conference conference speaker present perl developmentrelated topic usually educational workshop conference north american european conference generally include attendee conference usually content new perl developer substantial opportunity core developer community member interact collaborate well present work triedandtrue technology much perl turn community emerged around larry wall solution sticky system administration problem continues grow thrive new developer enter community time substantial new work done modernize language keep useful solving new generation problem interested find local perl monger group join u online attend perl conference near
118,Lobsters,perl,Perl,Elegant reactive services in Perl 6 and React/Redux,http://cro.services/docs/intro/spa-with-cro,elegant reactive service perl reactredux,building single page application cro code available need guide building stubbing backend serving static page setting frontend build toolchain serving using bundle starting build backend adding tip latest tip setting react adding component redux good tutorial posting backend latest tip websocket agree disagree summing code available,building single page application crothis tutorial walk building simple single page application using cro backend frontend use webpack react redux prior knowledge required although expect need reading want use well applicationsthe code available various point tutorial present state committed repository history match tutorial exactly use get overview change step see missed trying follow along building scratchwhat installed cro see guide help installed npm nodejs package manager use get package need build frontend debianbased linux distros sudo apt install npmwhat food festival beer festival event bunch stuff could try try app people could leave tip hot could see real time thing last beer festival went might spared green tea beer make spa support submitting new tip post backend latest tip appear live delivered web socket able agree disagree tip also post able see list tip sorted agreeable disagreeable obtained get stubbing creative name application calling mine tipsy use cro stub stub http application keep simple skip http thus include web socket support cro stub http tipsy tipsy stubbing http service tipsy tipsy first please provide little information secure http yesno n support yesno yes support yesno n support web socket yesno ythis creates directory tipsy let go check stubbed backend run using cro run cro run starting tipsy tipsy endpoint http http tipsy listening http check using curl visiting browser curl http tipsy like regularly commit work create git repository add gitignore file ignore perl precompilation output commit stub git init initialized empty git repository homejnthndevcrotipsygit jnthn lviv devcrotipsy echo precomp gitignore jnthn lviv devcrotipsy git add jnthn lviv devcrotipsy git commit stub tipsy backend master rootcommit stub tipsy backend file changed insertion create mode croyml create mode gitignore create mode create mode create mode static tweak cro stub application serve html page create static directory static content serve gomkdir staticin put indexhtml following context html head title tipsy title head body tipsy body html edit get route serve file get static staticindexhtml cro run left running earlier automatically restarted service open file browser check servedsetting frontend build get set frontend first stub packagejson file contain development frontend javascript dependency use npm init provide answer npm init utility walk creating packagejson file cover common item try guess sensible default see npm help json definitive documentation field exactly use npm install pkg save afterwards install package save dependency packagejson file press c time quit name tipsy version description tipsy give tip festival entry point indexjs test command git repository keywords author license isc write homejnthndevcrotipsypackagejson name tipsy version description tipsy give tip festival main indexjs script test echo error test specified exit author license isc ok yes next let install webpack tool development dependency npm install savedev webpack webpackcliwhile run webpack help various way set compilation u modern javascript handy feature like module import lambda let variable declaration javascript version work web browsersit let u use javascript module managed using npm package manager concatenated single javascript fileit also help cs image assetsnext create webpackconfigjs root repository following content const path require path moduleexports entry frontendindexjs output filename bundlejs path pathresolve dirname staticjs mean take frontendindexjs root javascript frontend part application follow dependency build bundle written staticjsbundlejs next let create location first let stub output location gitignore ignores generated output well making sure directory exists since git wo nt track empty directory mkdir staticjs echo staticjsgitignorenext stub frontendindexjs mkdir frontend echo documentwrite hello j frontendindexjsnow like way run webpack conveniently local installation one way edit packagejson add entry script section script build webpack test echo error test specified exit run npm run build npm run build tipsy build homejnthndevcrotipsy webpack hash version webpack time asset size chunk chunk name bundlejs kb emitted main frontendindexjs byte built serving using edit staticindexhtml closing body tag add script src jsbundlejs script finally need serve javascript edit add new route like serve anything staticjs preparing u multiple bundle future need get j path static staticjs path refresh browser hello j appear pagelast least need ignore nodemodules commit frontend stubbing echo nodemodules gitignore git add git commit stub javascript application master stub javascript application file changed insertion deletion create mode frontendindexjs create mode packagejson create mode staticindexhtml create mode webpackconfigjsstarting build keep thing simple build inmemory model kind way could factor key thing keep mind web application concurrent system cro request processed thread pool mean two request may processed time handle use oo monitor module monitor like class enforces mutual exclusion method one thread may inside method particular instance time thus provided nt leak internal state making defensive copy return part state inside monitor object protectedfirst let add oo monitor depends section part file look like depends cro http cro websocket oo monitor make sure really module available ask zef install missing zef install depsonly put business logic separate module write test ttipsyt first let stub api businessdomain logic use oo monitor class tip int id str tip int agreed int disagreed monitor tipsy method addtip str tip nil method agree int tipid nil method disagree int tipid nil method latesttips supply method toptips supply tip immutable object representing tip together number agrees disagrees tipsy class bunch method implement various operation first three mutating operation next latesttips supply tip object emitting every time new tip added first tapped always emit latest tip toptips method return supply emit sorted list top tip every time ranking change nt try remember come back one timenext make available route could make instance make hard test route isolation business logic instead make sub take instance business logic object parameter use cro http router use cro http router websocket use tipsy sub route tipsy tipsy export route get static staticindexhtml set entry point using module making instance itthe file end looking like use cro http log file use cro http server use route use tipsy tipsy tipsynew application route tipsy cro service http cro http servernew http host env tipsyhost die missing tipsyhost environment port env tipsyport die missing tipsyport environment application cro http log filenew log error err httpstart say listening http env tipsyhost env tipsyport react whenever signal sigint say shutting httpstop done adding tip latest let write test adding tip seeing show latest tip go ttipsyt use tipsy use test tipsy tipsynew livesok tipsyaddtip lamb kebab good add tip livesok tipsyaddtip keen fish burrito add another tip given tipsylatesttipshead list tip tip tip keen fish burrito correct first tip retrieved initial tap latesttips tip tip lamb kebab good correct second tip retrieved initial tap latesttips react whenever tipsylatesttipsskip head tip try vanilla stout sure get new tip emitted live tipsyaddtip try vanilla stout sure donetesting first part test add two tip tap supply latest tip given two straight away second part bit involved check tap latest tip supply new tip added also told new tipnow make pas implementation monitor monitor tipsy int nextid tip tipsbyid int supplier latesttips suppliernew method addtip str tip nil id nextid newtip tipnew id tip tipsbyid id newtip start latesttipsemit newtip method latesttips supply latestexisting tipsbyidvaluessort id head supply whenever latesttips emit emit latestexisting unimplemented method go keep counter id give tip unique id hash mapping id tip object supplier use notify interested party new tipsthe addtip method first line straightforward final one little curious start answer supply sender pay cost distributing message nt want tie monitor mutual exclusion work throw start dispatch notification asynchronouslythe latesttips method also need little care remember anything return monitor protected mutual exclusion thus make copy latest existing tip outside supply block monitor protecting tipsbyid returned supply block tapped subscribe latest tip emit latest existing onesand test pas progress git add git commit implement first part business logic master implement first part business logic file changed insertion deletion create mode create mode ttipsytsetting time get back frontend use react react give u virtual dom rebuild every time something change diffs current real dom applies change let u work functional style react component written using jsx xmllike syntax embedded javascript first need set compiling new development dependency npm install savedev babelloader babelcore babelpresetreactnext need create babelrc file saying use react preset babel thing used turn modern javascript browsercompatible javascript simply contain presets react finally webpackconfigjs need update use change look follows const path require path moduleexports entry frontendindexjs output filename bundlejs path pathresolve dirname staticjs module rule test j include pathresolve dirname frontend loader babelloader try npm run build survive though nt yet using new react support yetnext build toolchain set time install react module use frontend go npm install save react reactdomand edit indexjs file look like import react react import render reactdom var app p hello react p render app documentgetelementbyid app add div tag id app indexhtml html head title tipsy title head body tipsy div id app div script src jsbundlejs script body html run npm run build refresh say hello react git add git commit setup react master setup react file changed insertion deletion create mode babelrcadding let sketch ui little replace existing app component var submittip div got tip div textarea row col maxlength div input type button value add tip div var latesttips div latest tip todo div var app div submittip latesttips div another npm run build refresh show something look lot like one would expect ui get data populate ui stuff button clicked bring final piece client side puzzle good tutorial redux site wo nt try repeat try summarize redux react give u way render virtual dom time something change make useful need kind object containing current state rendered onto ui redux container state get u organize change using reducer say never really update state produce new one derived current one plus actionfirst let add redux related dependency npm install save redux reduxthunk reactreduxnext need define action action correspond state change page create two changetiptext text tip user typing changesaddtip add tip button pressedin frontendactionsjs file export const changetiptext changetiptext export const addtip addtip export function changetiptext text return type changetiptext text export function addtip return type addtip constant name action function known action creator create object type property optionally datanext need reducer reducer take current state calculate return new state never mutate state never sideeffects network io pure calculation state simple content text boxwriting reducer much convenient upcoming spread operator javascript prefix work much like perl prefix operator flattening since already build toolchain add installing another syntax transform npm install savedev babelplugintransformobjectrestspreadand adding babelrc presets react plugins transformobjectrestspread done reducer placed frontendreducerjs import actiontypes action const initialstate tiptext export function tipsyreducer state initialstate action switch actiontype case actiontypeschangetiptext return state tiptext actiontext case actiontypesaddtip return state tiptext default return state time wire react overall flow something happens ui text changed add tip button pressed action object created passed reducer produce new state new state turned property used build react virtual dom react take care applying update real dom thus reflecting changesback frontendindexjs import action reducer together bit redux reactredux library import createstore redux import provider connect reactredux import action action import tipsyreducer reducer next create redux store thing hold latest version state produced reducer create simply passing reducer createstore next need map state store property available react component also produce function also made available property dispatch actionsfunction mapprops state return state function mapdispatch dispatch return onchangetiptext text dispatch actionschangetiptext text onaddtip text dispatch actionsaddtip ready complete integration redux react look like let connectedapp connect mapprops mapdispatch app render provider store store connectedapp provider documentgetelementbyid app connect function make property state store available app react component wrapping provider make state store available order happenlast least update component var submittip prop div got tip div textarea row col maxlength value propstiptext onchange e propsonchangetiptext etargetvalue div input type button value add tip onclick propsonaddtip div var app prop div submittip tiptext propstiptext onchangetiptext propsonchangetiptext onaddtip propsonaddtip latesttips div npm run build refresh browser notice hitting add tip button typing clear text box action reducer running phew completeness entire frontendindexjs stage import react react import render reactdom import createstore redux import provider connect reactredux import action action import tipsyreducer reducer var submittip prop div got tip div textarea row col maxlength value propstiptext onchange e propsonchangetiptext etargetvalue div input type button value add tip onclick propsonaddtip div var latesttips div latest tip todo div var app prop div submittip tiptext propstiptext onchangetiptext propsonchangetiptext onaddtip propsonaddtip latesttips div function mapprops state return state function mapdispatch dispatch return onchangetiptext text dispatch actionschangetiptext text onaddtip text dispatch actionsaddtip let store createstore tipsyreducer let connectedapp connect mapprops mapdispatch app render provider store store connectedapp provider documentgetelementbyid app commit time git add git commit wire redux master wire redux file changed insertion deletion create mode frontendactionsjs rewrite frontendindexjs create mode frontendreducerjsposting time get adding tip frontend calling backend need two thing first cro part add following route implementation post tip requestbody text tipsyaddtip text responsestatus next javascript part question put network bit reducer pure answer reduxthunk module installed earlier nt yet use allows u write action creator return function function passed dispatcher call dispatch action typically dispatch one action asynchronous operation start use indicate ui one completed indicate operation completed uifirst let setup reduxthunk piece middleware back frontendindexjs add import thunkmiddleware reduxthunk change import createstore redux also import applymiddleware import createstore applymiddleware redux finally change let store createstore tipsyreducer apply middleware also let store createstore tipsyreducer applymiddleware thunkmiddleware next frontendactionsjs refactor add tip action creator function thunk action export function addtip return dispatch dispatch type addtip note nt yet change anything build behavior done however see possible dispatch callback network operationthere course dozen good way deal asynchronous operation javascript seriously building single page application strongly recommend looking using promise library also redux middleware integrate simplest possible thing use jquery callback first let add jquery dependency npm install save jquerythen import frontendactionsjs import jquery post backend export function addtip return dispatch getstate ajax url tip type post contenttype applicationjson data jsonstringify text getstate tiptext success dispatch type addtip reload maybe open browser development tool usually flip network tab click add tip well observe request made produced response alternatively may like stop cro run instead cro trace type message click add tip see request body dumped trace output ection keepali text ry beef latest tip variety way could write websocket use reduxwebsocketaction allows u send redux action websocket client neat although unfortunately mean coupling backend use library frontend worth questioning first let install library frontend npm install save reduxwebsocketactionover indexjs import import wsaction reduxwebsocketaction set like let host windowlocationhost let wsaction new wsaction store w host latesttips reconnectinterval wsactionstart frontendactionsjs add one action type action creation function originate server export const latesttip latesttip update reducer prepend incoming tip list latest tip frontendreducerjs end import actiontypes action const initialstate tiptext latesttips export function tipsyreducer state initialstate action switch actiontype case actiontypeschangetiptext return state tiptext actiontext case actiontypesaddtip return state tiptext case actiontypeslatesttip let tip id actionid text actiontext return state latesttips tip statelatesttips default return state update react component frontendindexjs render latest tip var latesttips prop div latest tip ul propstipsmap li key tid ttext li ul div var app prop div submittip tiptext propstiptext onchangetiptext propsonchangetiptext onaddtip propsonaddtip latesttips tip propslatesttips div app updated simply pas tip latesttips component clientside addition donenow backend single addition clear websocket stub generated u replace code take latesttips supply tipsy business logic object turn event appropriate json emit get latesttips websocket incoming supply whenever tipsylatesttips tip emit tojson wsaction true action type latesttip id tipid text tiptip outer hash envelope reduxwebsocketaction tell pay attention message dispatch action property redux actionreload browser add tip see show open second tab application see show first tip add second tip flip back first tab see tip magically showed successfully sharing tip web socket hurrah call commitagree spent lot time setting clientside infrastructure place however adding feature far quicker process let round tutorial implementing agreedisagree feature link let user indicate agreementdisagreement tip showing list top tipslet start backend writing test new feature business logic object add test ttipsyt given tipsylatesttipshead list tip tipsyagree tip id tipsyagree tip id tipsydisagree tip id tipsyagree tip id given tipsytoptipshead list tip try vanilla stout sure agreeable tip first tip lamb kebab good next agreeable tip second tip keen fish burrito least agreeable tip third throwslike tipsyagree x tipsy nosuchid correct exception tip first part add agreement disagreement tip sorted latest first next use toptips supply grab first thing emits emit least current ordering point tap supply check ordering correct final test check unrecognized id throw exceptionhere new exception type class x tipsy nosuchid exception id method message tip id id next give tip class method produce new version tip object agreed disagreed bumped one higher keep instance immutable since share outside monitor class tip int id required str tip required int agreed int disagreed method agree selfclone agreed agreed method disagree selfclone disagreed disagreed agree disagree method easy enough method agree int tipid nil tipsbyid tipid tipref rw tipref agree else x tipsy nosuchidnew id tipid throw method disagree int tipid nil tipsbyid tipid tipref rw tipref disagree else x tipsy nosuchidnew id tipid throw hm actually quite bit similarity let use private method factor method agree int tipid nil self withtip tipid tipref rw tipref agree method disagree int tipid nil self withtip tipid tipref rw tipref disagree method withtip int tipid operation nil tipsbyid tipid tipref rw operation tipref else x tipsy nosuchidnew id tipid throw finally first attempt toptips method method toptips supply toptips tipsbyidvalues sort disagreed agreed head supply emit toptips pass test yet something missing meant emit updated sorted list tip every time either new tip tip agreed disagreed let add test also newtipid react whenever tipsytoptipsskip head tip try vanilla stout sure adding tip correct order tip lamb kebab good adding tip correct order tip pau bahji super spicy adding tip correct order tip keen fish burrito adding tip correct order newtipid id tipsyaddtip pau bahji super spicy ok newtipid new tip id seen top sorted tip react whenever tipsytoptipsskip head tip pau bahji super spicy agrees order updated tipsyagree newtipid update need supplier emit indicate change agreedisagree countshas supplier tipchange suppliernew emit easy factoring earlier method withtip int tipid operation nil tipsbyid tipid tipref rw operation tipref start tipchangeemit tipref else x tipsy nosuchidnew id tipid throw finally update toptips method way could easiest way sure safe make sure supply keep local state protect remember since supply block returned life beyond method going protected monitor method toptips supply initialtips tipsbyid supply currenttips initialtips sub emitlatestsorted emit currenttipsvaluessort disagreed agreed head whenever supplymerge latesttipssupply tipchangesupply currenttips id emitlatestsorted emitlatestsorted done time expose functionality outside world updating job map business logic onto http thing need watch turn id exception appropriate http response found otherwise send back internal server error wrong server fault client sent bogus id go post tip int id agree tipsyagree id responsestatus catch x tipsy nosuchid notfound post tip int id disagree tipsydisagree id responsestatus catch x tipsy nosuchid notfound final step backend map top tip another web socket get toptips websocket incoming supply whenever tipsytoptips tip emit tojson wsaction true action type updatetoptips tip tipsmap tip id tipid text tiptip agreed tipagreed disagreed tipdisagreed frontend frontendactionsjs add three new action type constant export const updatetoptips updatetoptips export const agree agree export const disagree disagree two new action creator updatetoptips nt need one come server export function agree id return dispatch ajax url tip id agree type post success dispatch type agree id export function disagree id return dispatch ajax url tip id disagree type post success dispatch type disagree id reducer tweak initial state empty set top tip const initialstate tiptext latesttips toptips add extra case statement handle new update action nt need anything much agreedisagree though real application want give user feedback vote counted case actiontypesupdatetoptips return state toptips actiontips next need get second web socket connected little refactor away frontendindexjs latesttips toptips foreach endpoint let host windowlocationhost let wsaction new wsaction store w host endpoint reconnectinterval wsactionstart next update dispatch prop map include new agree disagree action function mapdispatch dispatch return onchangetiptext text dispatch actionschangetiptext text onaddtip text dispatch actionsaddtip onagree id dispatch actionsagree id ondisagree id dispatch actionsdisagree id next factor showing tip component reuse latest tip top tip includes link agree disagree var tip prop li propstext href onclick propsonagree propsid agree href onclick propsondisagree propsid disagree li showing list tip heading var tiplist prop div propsheading ul propstipsmap tip key tid prop ul div finally app component becomes var app prop div submittip tiptext propstiptext onchangetiptext propsonchangetiptext onaddtip propsonaddtip tiplist heading latest tip tip propslatesttips onagree propsonagree ondisagree propsondisagree tiplist heading top tip tip propstoptips onagree propsonagree ondisagree propsondisagree div npm run build refresh give spin clicking agree disagree either list end sort order top tip list changing reflect votesat last done git commit add agreedisagree feature master add agreedisagree feature file changed insertion deletion summing tutorial gone zero reactive single page application frontend written modern using react redux backend perl using cro communicate using http web socket declare dependency getting started new developer case zef install depsonly npm install npm run build cro runone code available commit history described tutorial
119,Lobsters,perl,Perl,Rakudo gets a new thread pool,https://6guts.wordpress.com/2017/09/23/rakudo-gets-a-new-thread-pool/,rakudo get new thread pool,funded work hour wrong threadpoolscheduler entirely additive rt rt rt kind queue adding supervisor demand available worker cpu core count resource usage affinity worker outcome next written perl still looking funding like,viennapm funded work hour perl discussion decided would first work improving thread pool scheduler move continuing work around nonblocking await feature upcoming perl post discus work thread pool scheduler merged shortly latest rakudo release maximize testing time thus appear next release wrong threadpoolscheduler slightly hazy memory wrote initial perl thread pool implementation space hour two train probably heading perl event one simplest thing could possibly work implementation turned work well enough survived isolated tweak fix january year point added initial bit support nonblocking await even change entirely additive leaving existing scheduling mechanism completely intact first implemented thread pool approximately people writing concurrent perl program happily changed came bug report could traced back thread pool along thing outright bug far ideal dug redesign first summarized problem aware thread pool considered new design could crash test problem afflicted previous design list problem previous design wasteful spawning far many thread quite lot case single use proc async would cause thread created second use would add third use would add even us concurrent thread would still added maximum pool size conservative way make sure thread would available piece work provided pool reach exhaustion point really pool need thread two many program rt ticket resulting behavior thread added memory consumption program making memory use good bit higher program really need thread two active async io could swamp thread pool event since single queue timer event might used kill process timeout may fired timely manner since timer event would stuck behind io event rt sometimes despite conservative mechanism described enough thread got started led occasional deadlock rt try scale number thread match available cpu core way lot work queue mean need thread making progress cpu load pretty high adding thread unlikely lead progress highcorecount system default limit low cpu tolerable price much exist program manage really block lot thread noncpu bound work could deadlock go away nonblocking await still way write code really block bunch o thread make progress without yet thread made available run something point people write program differently default limit thread generous despite wishing raise maximum default pool size good bit issue meant likely end hitting maximum program memory use would become totally unreasonable suffered poor thread affinity event would inevitably queue due serial supply example two packet arrived socket might picked different thread pool first packet still processed second would contend lock used enforce serial processing message supply block available kind queue problem active io swamping queue delaying timer poor thread affinity resolved new thread pool recognizing work given pool equal timer really want dealt timely manner program timer make sense queue one worker thread exclusively timebased event work item need processing sequentially anyway assigned single thread implying affinity worker get queue finally general queue everything else one thread eat adding supervisor problem addressed addition sufficiently smart supervisor supervisor thread created thread pool upon first use living end program spends time sleeping waking around time second check thing going supervisor make decision many thread add pool factor demand much work need determines looking length timer queue general queue empty clearly demand extra worker something sign might want worker available worker worker thread currently anything little motivation add another worker cpu core count cpubound work much point thread cpu core otherwise o juggle cpu cache hit rate good modern o scheduler good dealing lot thread day moarvm gc cope alright load thread sync also still extra thread brings memory overhead making cpu core count soft limit number thread spawn usually reasonable choice resource usage work queue scheduler already spawned many thread cpu core point couple situation may apply perhaps queue thread hard work cpubound task case adding beyond core count help matter alternatively thread pool may full thread somehow blocked much progress worst case may deadlock due thread pool full blocked thread adding extra thread would break determine supervisor look program cpu usage really low deadlock situation relatively likely thread may added beyond cpu core count pool softlimited number thread reluctantly able go beyond mean raise maximum default pool size quite lot stand thread reality many program even reach cpu core count never enough work trigger addition thread affinity worker affinity worker thread added supervisor instead affinity queue requested existing affinity worker thread queue length inspected one shortest queue picked provided queue length threshold threshold increase per affinity worker thread added another affinity worker thread spawned work allocated outcome case tried far new scheduler seems either least well better one replaced sometimes much better deadlock due insufficient thread bug gone thanks supervisor program occasional bit work needing pool thread end thread two greatly reducing memory consumption cro web application processing handful request second spawn thread use much le memory get better locality one faced hundred request per second spawn program lot cpubound work spawn many thread core give small speedup compared oversubscribing cpu previous scheduler finally timer event delivered handled timely way even lot output process next well immediately write extra regression test get rt ticket mentioned earlier article closed feel free beat though aside like mention new scheduler decided improvement also improvable heuristic us decide add thread surely tuned code decision making written perl hope make accessible would like experiment tweak thanks viennapm making work possible finally mention still looking funding help keep perl thing sizable chunk work time handful company sponsoring hour month would soon add like like loading related
120,Lobsters,perl,Perl,From sockets to services: reactive distributed software in Perl 6,https://www.youtube.com/watch?v=6CsBDnTUJ3A,socket service reactive distributed software perl,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature jonathan worthington socket service reactive distributed software perl youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature jonathan worthington socket service reactive distributed software perl youtube
121,Lobsters,perl,Perl,Recognizing when two arithmetic expressions are essentially the same,https://blog.plover.com/math/24-puzzle-2.html,recognizing two arithmetic expression essentially,recognizing two arithmetic expression essentially read article blog discussed commutativity associativity ezpr subtraction division ezpr law lifting flattening trivial node cancellation trivial variation identity element multiplication zero result discus code solver github package file example complete listing every essentially different solution every â b c dâ puzzle available arguable point interesting puzzle spoiler spoiler spoiler spoiler took long back march wrote previous article subject interesting article topic one yet topic article category math permanent link,recognizing two arithmetic expression essentially warning math formatting r atom feed article badly mutilated suggest read article blog article discus puzzle â mean one take number combine usual arithmetic operation addition subtraction multiplication division make number case unique solution target number often omit write â every example article target number continuation previous article topic first cut writing solver twentyfour puzzle straightforward search program couple hack cut search space recognizing ae ea nothing special discussed would quickly accurately report whether particular twentyfour puzzle solvable turned nt quite good enough original motivation program toph play game car pennsylvania license plate three letter four digit see license plate fbv try solve â sometimes ca nt find solution wonder nt one nt get yet searcher turned phone app would tell u whether solution know whether give keep searching nt quite good enough either would find first solution say would wonder program useless would cheerfully report three would rack brain find another fail ask program tell u answer discover disgust three solution mind cdot cdot cdot computer think different us different data structure represent represents abstract syntax tree mean expression either single constant structure comprising operator two operand exactly two computer understands three expression structure hard imagine computer could taught understand first two tree equivalent getting recognize third one also equivalent seems somewhat difficult commutativity associativity would like computer understand three expression considered mean problem kind particularly like want computer something exactly sure something question easy ask hard answer opposite real problem decide question want ask fun certainly question involve commutativity associativity addition multiplication difference two expression one b b considered similarly b c expression b c b c b c forth â example show commutativity associativity limited addition multiplication commutative associative property subtraction also example bc ab c ab c ac b ought name law far know nt sure commutativity associativity addition disguise nobody explaining law school kid ever seems point subtraction enter observe ab c bc say nt leave closely related identity operator inversion identity like bc ab c bc ab c multiplicative analogue nt know name algebraic law either one way deal would build complicated comparison function abstract syntax tree tried transform one tree another applying identity better approach recognize data structure overspecified want computer understand b c b c expression swimming upstream using data structure specifically designed capture difference expression instead invented data structure called ezpr represent expression somewhat natural way abstract syntax tree way make commutativity associativity transparent ezpr simplest form called form two ezprs represent essentially mathematical expression canonical form decide two abstract syntax tree computer convert ezprs simplifies check see resulting canonical form identical ezpr since associativity nt matter nt want represent human think adding long column number nt think associativity nt add pairwise instead use addition algorithm add big pile nt treat addition binary operation normally treat operator add number list ezpr make explicit addition operator applied list subexpressions pair b c b c represented ezpr sum b c say adding b c sign punctuation ignore similarly ezpr mul b c represents product b c please ignore sign time handle commutativity want b c list bag perl nt builtin bag object instead used array required array element sorted order exactly sorted order nt really matter subtraction division nt yet handle subtraction division way chose handle part think clever sum object one two bag one positive one negative part expression expression like b c represented ezpr sum c b also representation c b c b c ab expression idea adding c deducting b sign separate term added subtracted either two bag may empty example b sum b division handled similarly conventional mathematical notation little bit better sum case mul c b usually written frac ac bd ezprs handle associativity commutativity subtraction division quite well pointed earlier subtraction associative law b c b c even though usually called code required understand two expression equal represented ezprs represented completely identical structure sum b c similarly commutative law subtraction b c c b ezpr ezpr law ezprs flexible binary tree binary tree represent expression ab c bc expression abc ezprs represent three easy transform rule building expression simpler expression rule combining manipulating ezprs lifting flattening important transformation lifting ezpr version associative law canonical form ezpr sum node may subexpressions also sum node sum sum b c lift term inner sum outer one sum b c effectively transforming bc abc generally sum sum b c sum e f lift term inner ezprs outer one sum b f c e effectively transforms b c e f b f c e similarly mul node contains another mul flatten structure say converting expression ezpr conversion function recursive version computes ezpr mul mul mul bottom level mul inside mul innermost mul lifted upward mul mul represents frac mul inside mul subexpressions innermost mul lifted mul imagine frac lifting occurs subnode type parent may lift term mul sum vice versa trivial node ezpr sum say adding one thing eliminated replaced similarly sum replaced constant constant mul handled similarly even simpler case sum replaced constant mul replaced sometimes arise result cancellation cancellation consider puzzle â first solver found solution puzzle one another third think solution multiply get rid three subtracting make zero term zero term added onto rest expression ten way nt really matter easily explained term ezprs subexpression appears node bag drop example expression start mul sum duplicate three sum canceled leave mul sum sum trivial described previous section eliminated replaced mul ezpr record essential feature three solution â mentioned multiplying something else unimportant get rid three another solution puzzle mathematically would write see three gotten rid multiplication division instead addition subtraction converted ezpr expression becomes mul matching three two bag cancelled leaving mul fact nt solution puzzle one trivial variation identity element preceding example many trivial variation solution involved multiplying subexpression frac one input number puzzle one similarly obtain lot useless variation choosing multiply consider â make get rid multiplying onto five subexpressions considered different solution whenever see either bag mul node eliminate first expression converted ezpr mul sum eliminated mul node leaving mul sum fourth expression initially converted ezpr mul sum mul eliminated inner mul leaf trivial mul replaced leaving mul sum ezpr zero term bag sum node similarly dropped multiplication zero one final case mul simplified question zero denominator bit puzzle presence division zero simplification rule questionable example mul mul b c lifting rule say simplify mul c b frac frac bc frac ac b correct except may nonsense depending else going since zero denominator never arise solution puzzle issue application result ezpr module around line perl code including everything function convert abstract syntax tree ezprs function convert ezprs various notation mul sum two version normalization process described previous section normalizer line associativity taken care ezpr structure commutativity difficult mentioned would trivial perl builtin bag structure find much easier reason transformation ezprs abstract syntax tree many operation much simpler example negation sum b simply sum b prettyprinting also easier ezpr better capture way write think expression took get normalization tuned properly result quite successful least problem domain current puzzlesolving program report number distinct solution puzzle report two different solution really different fails support exact solution toph found report one essentially small exception discus since specification hope automated testing using app several month looking mistake found normalizer failed recognize two expression essentially similar would likely notice would solving puzzle unable find last solution program claimed exist gave saw would realize essentially one solution found pretty confident error type see harder error detect whether computer erroneously conflated two essentially dissimilar expression detect would notice expression missing computer solution list le confident nothing like occurred month gone feel better better consider problem many solution puzzle really satisfactorily solved edge case think identified code solver github ezpr code ezpr package exprpm file code public domain example original program claim find different solution â revised program recognizes two type mul mul sum sum variant form first include ldots even extreme case original program find distinct expression solve â trivial variation puzzle solution solution unique puzzle solution â â â one solution â one solution â solution â follows sum mul mul mul sum mul sum sum mul sum mul sum sum mul sum sum mul sum mul sum sum mul mul sum mul complete listing every essentially different solution every â b c dâ puzzle available solution arguable point place completely pinned mean two solution essentially think room genuine disagreement solution involving changed slightly different solution involving instead expression arithmetically different numerically equal example mentioned earlier â solution two willing accept essentially different toph however disagrees similar complex situation arises connection â consider equal get solution â replace either three obtaining program considers different solution toph unsure would pretty easy adjust normalization process handle way user wanted interesting puzzle â one solution quite unusual spoiler â two solution somewhat unusual spoiler somewhat similar â â also unusual solution two solution le surprising spoiler â easy solution also quite tricky solution spoiler one neighbor license plate jjz â one difficult puzzle took long back march wrote enough material least three four article hope publish coming week previous article subject ended similarly saying hope write longer article solver next week july nt hold breath five month later article huge pain write sometimes sit write something come dreck sat write one least three four time never worked tortured git history bear witness end abandon earlier draft start scratch writing fresh outline empty file perseverance paid wooooo addendum completely forgot shreevatsa r wrote interesting article topic one july last year soon published first article series addendum previous version article used notation sum mul said nt like zellyn hunter persuaded replace sum mul thank hunter yet topic article category math permanent link
122,Lobsters,perl,Perl,[Perl 6] 2017.34 Going Atomic,https://p6weekly.wordpress.com/2017/08/21/2017-34-going-atomic/,perl going atomic,brand new documentation page alexdaniel first release announcement rakudo perl core development swiss perl workshop schedule swiss perl workshop register tpcia followup tpcia gave interview perl fundamental think perl perl glance blog post meanwhile twitter meanwhile stackoverflow meanwhile ecosystem addition winding like,week rakudo perl went atomic well sense forming single irreducible unit component larger system locking one evil multithreaded programming rakudo perl several lockfree primitive updating native integer variable several thread simultaneously described brand new documentation page short new operator would ordinary module developer need use even writing threaded program well module might used threaded program situation variable incremented produce something unique would need run risk two thread running away unique value observe int await start say something le like increment lost simultaneous update versus atomicint await start say always update overwritten apart working version ca atomic compare swap also implemented thanks work jonathan worthington made possible kind sponsorship nick logan alexdaniel first release aleksdaniel jakimenkoaleksejev done first rakudo compiler release signal end era zoffix znet consecutive rakudo compiler release give big thank look announcement rakudo perl see quite number fix improvement month let hope alexdaniel able many even larger number new feature improvement core development samantha mcvey fixed several issue ignoremark number edge case concatenating string stefan seifert fixed issue native closure failing second run also made sure rakudo perl exit value invoked help smaller fix improvement swiss perl workshop schedule swiss perl workshop published contains following perl related presentation chronological order worth still register tpcia followup unfortunately official video tpcia arrived yet picture shared wendy also gave interview informed copy perl book perl fundamental think perl perl glance copy spanning different perl related book sold tpcia blog post meanwhile twitter meanwhile stackoverflow meanwhile ecosystem addition winding truly spent past week recovering tpcia need focus slide swiss perl workshop wish strength see next week perl news like like loading related
123,Lobsters,perl,Perl,A Review of Perl 6,http://www.evanmiller.org/a-review-of-perl-6.html,review perl,review perl raku evan miller update learning perlâ number perlâ website string regexes grammar note identifier array hash list itemization function way nativecall libxlsxwriter perl library xlsx writer perlâ library generating excel spreadsheet hack concurrency degree readstat library highlighting bug great come never heard note evanmillerorg twitter r wizard data le time communicate discovery visually back evan home page subscribe r twitter youtube,review perl raku evan miller august update feb perl called raku updated review title left review body intact amazing masterpiece said keeping eye fixed glass case artist little conrad lord jim perlâ reminds phd dissertation first five year would ask around christmas finished putting le le stock answer year wore lacking evidence dissertation form actually existed made completion date kind running joke familial version big dig new second avenue subway line enough selfimposed deadline came went stopped joking enough year stopped asking case missed think everyone perlâ released world year half ago christmas incidentally effort nominally spanning almost sixteen year think certain dissertation also completed point market new programming language write competitive impenetrable like freshly minted phd one seems sure perlâ market prospect like justturnedin dissertation one seems know whether fruit many labor actually worth damn help purveyor perlâ provide hint actually language besides facile answer whatever want perlâ multiparadigm maybe omniparadigm claim support objectoriented programming functional programming aspectoriented programming array programming good old procedural programming new language cleanedup version perl english german minus umlaut knowledge previous version ala get far token prejudice regarding preceding incarnation necessarily hold water follows attempt provide world honest incomplete assessment programming whitest elephant perlâ motivated following thought every sysadmin know least little perl know anyone know perlâ know anyone know anyone know perlâ never read anything perlâ longer punchline could equally imagine world perlâ heap rubbish one hope diamond language design one seems know one would know perlâ register written still waiting read number false start year finally managed spend enough time language say confidence familiar read cornucopia blog post devoured documentation written small perlâ library cursory test coverage still idea like use perlâ year even proper work week review le definitive testimonial like one momtrieslinux reaction video likely missing thing perlâ lack strong also kind slow therefore difficult impossible pique interest holdmybeer demonstration like one see learning perlâ instead start small example number perlâ easy enough install perlâ website unlike perl ship passable shell exit type exit interested version number perlâ people reading probably displayed shell greeting run version version rakudo version built moarvm version implementing perl perlâ really consists language specification perlâ c christmas compiler called rakudo virtual machine called moarvm reason multiplicity moniker perlâ folk believe implementation ought privileged tutorial teaser perlâ often begin first glance look like easiest math problem true language evaluate expression false tutorial go explain difference floatingpoint exact arithmetic perlâ treat number literal decimal dot rational quotient two integer rather inexact floatingpoint number perlâ objectoriented see class object method int rat num int integer rat rational exact fraction num doubleprecision float want floatingpoint behavior make num number adding num num num false scientific notation always produce floatingpoint num perlâ reason understand however sometimes seem add rational rather floatingpoint false true maybe someone explain discrepancy polite email anyway wholeheartedly endorse perlâ use rational number exact arithmetic think language could benefit similar implementation reference julia haskell builtin rational constructed respectively operator language library without support literal overall math support perlâ quite good complex number popular constant built right language identity correct decimal place rate e pi speaking frequently dealing floatingpoint number perlâ handy approximatelyequal operator measure thing within e pi true perlâ unicode everywhere wish also use place pi cutely superscript exponentiate integer however perlâ shell seem completely multibyteaware backspace unicode expression peril noninteractive compiler work fine aware choice numeric type significant impact performance example small script compute term harmonic series num total num total num num say total take second machine change num num take second first case perlâ construct rational represent num go straight floatingpoint representation num another oddity crop inspect total closely begin life int becomes rat first loop iteration converted num around iteration subtle type trickery going behind scene one sens benign presence larry wall whose skulduggery string number original version perl made hit programmer weary scanf sprintf small test version perlâ script still four time slower perl classic time slower c perl people often point speed improvement made since initial christmas release perhaps speed situation improve time overall come numerical computing guess could say perlâ perfectly capable heavy lifting lifting crew apparent hurry beginning worry way compute harmonic series perlâ compute thing hieroglyphic oneliner map trace mechanic code snippet take moment note among accomplishment larry wall creator perl designer perlâ twotime winner obfuscated c contest one final observation perlâ math although perlâ usual function mathh could certainly use string regexes perlâ string support unicode support particular best business unlike go javascript perlâ aware grapheme combining codepoints unlike python swift elixir perlâ access arbitrary grapheme position constant time rather iterating every grapheme access particular unicode identifier allowed custom unicode operator perlâ number builtin unicode operator ascii fallback thing like set operation equality test remember identity approximation test write like like e true perlâ allows form quotation construct recognized unicode standard following equivalent amazing amazing man amazing masterpiece perlâ philosophy expressed larry wall interview unicode symbol may difficult type technology improve future happy expressive unicode defining source code personally satisfied ascii variant perlâ parlance called texas symbol bigger get maybe people find unicode easier eye worth noting rumor eink keyboard upcoming apple hardware perhaps larry wall ahead particular curve back late perl introduced programming world regular expression least nonstackbased kind people might actually want use capture print stuff perlâ regexes change extending unicode support moving modifier around reassigning symbol also changing whitespace rule legible feel modern room breathe give example character class use instead range use instead z z capturing group still use parenthesis noncapturing group use plain square bracket space must made explicit malefemale catdog male female cat dog modifier caseinsenstive important one appear inside regex preceded colon example perl regex malefemale cc aa tt dd oo gg would translated perlâ male female cat dog match unicode digit balinese five thai three w match digit anything unicode considers letter including h match unicodedefined horizontal whitespace character want match space ascii typewriter choice c space x set character identified traditional perl grouping alnum xdigit using unicode general category lu uppercase letter sm math symbol alnum traditional character class name angle bracket lu unicode general category note colon additional set computed defining range set operator union intersection difference alnum alphanumerics excluding alnum sm alphanumerics plus unicodedefined math symbol alpha xdigit alphabetical hexadecimal digit f f dealt unicode text file regular basis likely feel feature grammar perlâ feature excited read fact initial reason drawn perlâ aside morbid curiosity inclusion grammar language good way ease grammar refactor regular expression example like regex sex male female regex specie cat dog male cat sex specie say sex sex say specie specie lc tilde perlâ string concatenation operator doubletilde context applies regular expression next group regexes grammar block providing special regex named top indicating parsing begin grammar animal regex sex male female regex specie cat dog regex top sex specie result animalparse male cat say sex result sex say specie result specie named regexes rule refer perlâ grammar engine used build recursivedescent parser use ragel number parsing task liked idea language something ragelish built afraid abandoning ragel anytime soon migrating perlâ least account grammar engine problem perlâ grammar engine perhaps shortcoming could addressed future version language parsing fails reason parse method simply return nil indication kind failure occurred kind nontrivial input grammar real pain debug single misplaced character kill whole parse report blank perlâ compiler written using perlâ grammar engine wondering perlâ parser produce line number error message started poking around grammar file like kid rifling bedside table regret ever idea bad enough perlâ grammar file foam party intermingled grammar code error message cherry top rule perlâ grammar file extra condition instead matching something throw exception exception handler pick apart internal state parser figure much input processed exception thrown work sort kludgy technique replicate want line number traditional parsergenerators much better job handling nonmatching input shortcoming explains part perlâ error message sometimes useless syntax error source code many perlâ error message helpful good example forget close quote perlâ tell error last line file course error likely near opening quote could anywhere file good luck finding perlâ exceptionthrowing parser provides nary clue longtime ragel addict really wanted like perlâ grammar engine lack decent failure handling mean endorse except refactorable regex machine perlâ could interesting platform prototyping new programming language example soon take look perlâ grammar file want close drawer go back innocent time note identifier get something way perlâ identifier contain dash whyhellothere hello perlâ call told good authority lisper use case convention never really meatrelated name kebab case preferred case convention perlâ standard library including function variable name eg isprime abignumber variable perlâ almost always start sigil dollar sign sign percent sign convention usually nt create ambiguity subtraction operation therefore terrible choice perlâ least consistent larry bet unicode bold vision one day able type hyphen minus sign computer separate character programmer show perlâ instantly recoil kebab case human flesh hanging personally grown like give screen full perlâ code distinct visual identity even dislike aesthetic admit easier shift finger either camelcase underscore course salutary effect health left pinky likely washed away perlâ variable sigils array hash perl array indicated indexed integer hash preceded keyed string block church perl built perlâ two data structure number modification noticeable syntactic change array written array value access use data sigil atsign percent sign rather scalar sigil dollar sign important semantic difference array hash parameterized value type example int array str hash declares array store integer hash store string hash key string default need parameterize literal array written square bracket array literal hash written different way following equivalent minute second minute second minute second minute second last form feel like hack guess preferable pineapple upsidedown ontology rail method like constructing hash brace used place unless brace contain default variable case perlâ get confused think block declared documentation discourages brace hash reason brace default representation perlâ print hash getting mixed message use tradition perl indeed one way case still looking satisfactory explanation seems perlâ endorsed one surrounding hash syntax outlawed saved countless stackoverflow question tagged newbie hash member accessed either hash key hash key cute feature hash look array key hash return value satisfied string key possible declare different type key inside brace hash int create hash keyed arbitrary object colonprefixed brace hash one hundred two hundred pi three point one four one five nine record literal syntax creating object hash weird prohibition applies note syntax necessarily preventing perlâ interpreting pi string rhetoric perlâ consistent perl sure lot little rule list technically perl third data structure list list could assigned array hash list value separated comma surrounded parenthesis immutable could explicitly bound variable list still present immutable perlâ departure predecessor language perlâ let bind list variable later reuse using bindto operator list one pi assigning item list result error list modify immutable int note error message indicates modify int modify list list contains variable modify content variable without changing actual list still contains variable value value pi â error modify immutable int pi â error modify immutable int pi work say say value weird huh sense list assumed immutable value assignment rerouted particular list member way list assignment follows somewhat naturally get excited though assignment behave expect reason clear lefthand side flattened assignment equivalent thus case get assigned get get nothing separate colon prefix destructuring assignment note bindto required usage line get becomes understand logic making syntactic distinction list assignment full destructuring assignment silently flattening lefthand list structure first case list contain list also array hash array hash contain array hash still perl also contain list last thing note list unrolled special pipe operator list say list say list come handy calling function talk talk something bothering itemization especially interested gory detail list differ array feel free skip section array list item within array hash behave differently item within list array list say arraywhat array say listwhat list say array int say list int say array varwhat scalar say list varwhat int array extra hidden layer indirection documentation call itemization unlike list array really full transparent container point actual value accessed var method assigning array member really modifies container whereas modifying list member attempt manipulate item however list also layer indirection permember basis using special dollar function still modify list itemized member protected listflattening operation itemization confusing part already complex language time method pas straight container itemized member list flattened listflat return nested list function expected aware member itemized based expect caller expect caller call listflat returned value got documentation provides five heuristic deciding item list returned function itemized dozen reading heuristic still mostly mumbojumbo think sticking simple list object array object function perlâ might favorite functiondispatching mechanism language used certainly flexible function argument named positional named argument preceded colon sub trianglearea base height return base height trianglearea height base trianglearea error many positionals passed signature destructure argument popular feature functional language sub firstitem head tail return head array firstitem array miss old perl convention putting parameter array use called slurpy sub addemup number return numberssum addemup return pipe operator mentioned previous section also used pas regular list argument list args addemup args equivalent addemup hash destructure sub volume length x width depth z return x z dimension depth length width volume dimension unrolled named parameter pipe operator sub trianglearea base height return base height dims base height trianglearea dims error many positionals passed trianglearea dims work multipledispatch occurs type like julia c also value elixir haskell often faster way compute factorial multi sub factorial return semicolon optional btw multi sub factorial int n n samewith factorial factorial type error note use samewith second clause feature pined erlang keyword perform recursion could rename function without change recursive call within welcome feature perlâ candidate clause evaluated order note might get unexpected result defining multipledispatch function inside perlâ shell clause seems aware clause preceded example switching two clause result runtime error switching order fine using regular couple place thus far used creates closure argument addtwo say addtwo pi whatever star skeleton key number strangelooking perlâ expression following incidentally strengthen case unicode operator map multiply first whatever second multiply map raise whatever power avoided whatever star addition making perlâ look like lineal descendant brainfuck governed rule subtle understanding following work thing compute square root list number map sqrt map sqrt map sqrt work map sqrt sure valid explanation discrepancy somewhere internet case like like say monad must acting move nativecall pleasant set surprise perlâ functioncalling fact pleasant surprise perlâ nearly frictionless interfacing c library get feel c interop decided use perlâ wrap one favorite c library libxlsxwriter c library ironically began life perl library later ported c ala never perlâ name implies libxlsxwriter used generate xmlbased excel document code came want follow along home xlsx writer perlâ library generating excel spreadsheet pardon seo keywords nativecall module perlâ unlocks kind dark magic calling c code declaring perlâ class opaque c pointer simple class writer workbook repr cpointer declaring c function return opaque pointer object matter sub workbooknew str encoded return writer workbook native xlsxwriter nativecall automatically convert perlâ string c string encoding choosing via encoded ellipsis brace literal ellipsis whatever star used place sure anyway workbooknew routine ready called method example make new method writer workbook class method new str path workbooknew path workbook opened script use writer workbook workbook writer workbooknew pathtoworkbookxlsx wrapping process quickly becomes kind threestep waltz declare c function subroutine make method nice oo interface add line test script onetwothree onetwothree c library requires knowledge c struct mirroring data layout fairly simple example c struct typedef struct lxwdatetime int year int month int day int hour int min double sec lxwdatetime becomes class writer cdatetime repr cstruct export year month day hour min sec alignment ok figure whether platformspecific c int type nativecall rust julia provide int bit modern computer lose sleep one particularly pleasant surprise nativecall us correct alignment rule pad data structure example sec field begin byte c perlâ structure even though byte five integer precede bullet dodged c struct initialized regular perlâ object datetimenow dt writer cdatetimenew year nowyear month nowmonth day nowday hour nowhour min nowminute sec nowsecond thing get interesting nativecall always pass pointer structs muck around pointer type perlâ code thus c function void workbooksetcreationdatetime lxwworkbook workbook lxwdatetime datetime would declared nicely neatly perlâ sub workbooksetcreationdatetime writer workbook writer cdatetime native xlsxwriter wrapped writer workbook method thus method setcreationdatetime dateish date dt writer cdatetimenew year dateyear month datemonth day dateday hour datehour min dateminute sec datesecond workbooksetcreationdatetime self dt called script wb writer workbooknew pathtoworkbookxlsx wbsetcreationdatetime datetimenow typemappings c perlâ automatic straightforward exception encountered type requires num floatingpoint type accept generic numeric num int rat num conversion method easy workaround mention one language feature make wrapping c library pleasant perlâ enum construct enum libraryerror lxwnoerror lxwerrormemorymallocfailed lxwerrorcreatingxlsxfile lxwerrorcreatingtmpfile many value enum really keyvalue pair beginning value zero nicety c function return integer perlâ side easily access symbolic representation sub somecfunction return native something int code somecfunction say libraryerror code lxwnoerror etc enums start value zero enum script superscript subscript specified value enum color black blue brown cyan hesitate suggest expanding language even tiny suggestion point may like mortal mint mr creosote meaning life one feature perlâ might borrow go incrementing enum value via bitshift ie toocleverbyhalf iota construct real qualm perlâ enum feature appears enum symbol must unique within declaring scope else get warning strange error prefer symbol exported scope access symbol via enum name libraryerror none color black etc right color libraryerror enums declared scope color none libraryerror none would create conflict either use cstyle globally unique name libraryerrornone librarycolornone feel perlish else put enum file import pretty inconvenient nonetheless wrapping c library perlâ painless experience even addictive one even pas perlâ function closure c callback using native type directly perlâ code however usefulness feature mitigated somewhat get perlâ object back void context pointer many c apis designed another limitation nativecall support passing returning c structs value course hack concurrency perlâ number abstraction dealing concurrency promise channel something called supply think helpful start picture perlâ execution model see abstraction really limitation perlâ run virtual machine moarvm thread scheduler garbage collector event loop unlike c implementation python ruby moarvm global interpreter lock perlâ code always execute concurrently inside single process writing perlâ thread map directly o thread behavior change upcoming perlâ release support degree n thread multiplexing perl thread storage able access object care must taken avoid race condition lock mechanism provided discouraged favor messagepassing abstraction fixed upper limit number o thread moarvm use number default changed environmental variable rakudomaxthreads code attempt start number background task using thread execution may deadlock garbage collector generational halt execution across thread run ie stoptheworld garbage collector multithreaded till time guarantee example garbage collector handle asynchronous io moarvm us libuv nodejs tried juggling thousand concurrent network connection singlethreaded perlâ server present insurmountable challenge way talk perlâ core concurrency abstraction promise channel supply start keyword kick code another thread assuming thread available shortcut promisestart met await task start say hello threadid say ahoy threadid await task run code see greeting initiated different thread message may appear either order note await return current thread perlâ might return different thread future version see thread pool action try starting task p map start say sleeping threadid sleep await p see resulting message two batch sixteen message immediately using every thread thread pool followed sixteen message second reusing thread imagine code might unexpectedly deadlock code waiting particular thread start available thread thread pool future version perlâ supposed alleviate threadexhaustion problem moving perlâ thread across o thread perlâ thread waiting message channel bring implementation closer concurrency model erlang go net channel since talking exist thread communication perlâ language includes reactwhenever keywords receiving message channel channel channelnew p start react whenever channel say hello threadid said message ahoy say threadid let send message buddy twice channelsend message channelsend message channelclose mandatory await p react blocking construct return every channel listening closed done explicitly called within react example failure close channel commenting line marked mandatory result start block never returning modified program hang call await channel perlâ similar channel messagepassing erlang important difference channel typed message patternmatched listener perlâ channel accept whatever sent go erlang timeout mechanism receiving end perlâ imagine perlâ community gain experience concurrent distributed system demand similar feature language final bit abstraction handling concurrency perlâ called supply supplier object emits via emit method sequence value supply object supply one listener called tap tap object rather callback function executed supplied value default tap called thread call supplieremit example supplier suppliernew supply suppliersupply supplytap say tap got threadid supplytap say tap got threadid say sending value threadid supplieremit hello run code see action happens single thread supply introduce concurrency curtain hiding example supplier emits value receives message channel say inside react block would ensure application logic occurred predictable order predictable thread one interesting application supply receiving data external program perl receiving data standard stream standard error stream headache perlâ get supply proc proc asyncnew r echo man amazing masterpiece procstdouttap say procstderrtap say err await procstart incidentally proc async class also write closestdin method facilitate twoway interaction external unix signal accessed supply signal sigint tap say perhaps artist little mad exit note example previous one emit called behind proscenium particular callback execute different thread main program concurrency easy language perlâ seems decent set abstraction writing complicated program without introducing race condition however threading model abstraction obvious first glance seems common source confusion stackoverflow also see much guidance exceptionhandling concurrent code common source bug deadlock outside sharednothing erlang diaspora finally totally sold rationale supply banner usecases signal handling stdoutstderr processing really require sequential execution different callback emit happens deep standard library callback end executing mystery thread far main application suspect supply usecases would better served channel capable broadcasting message multiple subscriber example following hypothetical api verbose would give clarity code executing thread proc proc asyncnew r echo man amazing masterpiece get channel external process output procstdoutchannel err procstderrchannel start worker thread listens channel worker start react whenever say print stdout worker whenever err say err also stderr worker run external program await procstart wait worker finish await worker right channel pick listener random deliver message even data stream delivered channel fake api able plug multiple receiver current channel design fit well workerthread design well event listener might guess perlâ mostly left object model class hierarchy arrayprogramming feature controlflow construct think covered enough territory offer general perspective language runtime put burning question bluntly perlâ good perlâ math support excellent complex rational number handled seamlessly afraid perlâ slow serious scientific numbercrunching keep jones would need either major investment native library like numpy builtin jit compiler like supposedly jit work appears work number year holding breath perlâ string handling particular unicode support unparalleled like new regex syntax however grammar engine bit disappointment despite initial enthusiasm replacing parsergenerators least toolkit compiling perlâ code processing text file disk relatively slow operation neither helped noninstantaneous vm start time perlâ likely hard time replacing perl unix pipeline least present form perlâ better concurrency ruby python highthroughput lowlatency application current release significantly behind go erlang net start catch release introduces n thread multiplexing vm still need serious battletesting battletuning claim compete platform testing easy put test script directory follow test module doc still sure preferred method writing function module documentation people seem put everything readmemd see anything extract api source code manner pydoc javadoc light foregoing hard time justifying perlâ current incarnation never thought ruby made sense server technology anything happen guess like writing perlâ program generic typechecking oo model inspire confidence little rascal clubhouse attitude perl stopping considerably short slaveryisfreedom mentality rust haskell perlâ functional feature let distill logic essential like easy write perlâ code difficult read personally prefer treated like responsible adult rather instance teenager trapped fatherknowsbest house go still language remains distressingly permissive outofbounds array access return nil two line code one two three one two three compile run fine would much comfortable compiler voiced least mild concern case since likely bug code thing perlâ wellnamed reliance sigils make many operator many many operator perlâ hard google sometimes feel like trying look swear word beetle bailey comic strip language single typed character convey world significance personally enjoy concise aesthetic also enjoy algebra problem people consider psychologically fit programmer prefer thing spelled modifier keywords might put perlâ loadbearing asterisk pipe symbol forth perlâ language large number trap door learning time feel like taking tour willy chocolate factory every room seems new treat strange effect factory floorplan viewed sufficient distance basically coherent even predictable found occasion correctly guessing syntactic construct thisorthat particularly fond perlâ function dispatching feel like erlang addition named parameter varargs builtin type checking probably start using perlâ sliceanddice system script way use ragel fleshing grammar julia exploring math problem perlâ best perhaps exciting everyone else immediate application mind gluing together c library writing commandline wrapper c library readstat library maintain happy replace hieronymous bosch hellscape bin directory nice clean nativeinterfacing perlâ script dream realized need aforementioned improvement nativecall passing structs value able convert context pointer perlâ object sound stupid fullscreen terminal program become popular perlâ concurrency strong system support would make excellent choice would port hecate hex editor hell heartbeat love see perlâ mail client text editor terminally insane programming movement sure catch fire day mention perlâ exceedingly clever come making commandline tool file sub main str inputfile int line say blah running script without argument give usage line int inputfile made smile right perlâ ruby rail commandline tool number unexpected surprise perlâ like commandline cushion tickled fancy others like rule inside hash brace anything itemization leave dumbfounded note creature comfort perlâ error message usually adequate sometimes incorrect irrelevant repl useful need better support multiline copypaste backspacing multibyte character default vim highlighter slow package annoying highlighting bug sitting open github almost year travis ci support perlâ download compile language time add several minute test run wild west exactly feel like momandpop hotel jiggle toilet handle maybe smack side tv screen picture clear great come never heard language inseparable community parting word found latenight moment bewilderment irc channel asking help finer point darker corner language response usually helpful always courteous least one cause confusion turned bug vm quickly discussion irc channel technical lurk long enough hard miss current frustration perlâ widely adopted kind righteous indignation language good dammit projecting people start taking u seriously spent long enough software business passing familiarity feeling nothing quite demoralizing spending year two something fifteen year case perlâ unable secure much five minute potential time explanation course banal geek writing correct computer code lot easier reprogramming perception feel qualified offer marketing suggestion perlâ people honor butterfly mascot winsome sprite named camelia belies sprawling netherworld complexity part way pointing great butterfly collector western literature character stein joseph lord jim stein right occasional conscience jim left film adaptation columbia picture stein story go spent youth late life adventure sailing high sea battling bandit living native east indie turning point character story set seven wouldbe assassin drop three successive shot revolver proceeds chase butterfly field finally catch help hat flop got got shook like leaf excitement opened beautiful wing made sure rare extraordinary perfect specimen head went round leg became weak emotion sit ground greatly desired posse specimen specie collecting professor took long journey underwent great privation dreamed sleep suddenly lord jim ch reread passage help think larry wall man certainly long journey underwent great pursuit dream redesigned think dissertationwriting uncle though afraid ask ever finished thing part certain age stein stopped pursuing wealth fame adventure order cultivate cherish iridescent beauty butterfly wonder sometimes software profession could use butterfly input commercial empire specimen study appreciate admire lamplit silence woodshelved room perlâ masterpiece sure instruction give foreman particular jury perlâ certainly alone audacity ambition sheer complexity language might sort thing impossible judge without using least year halfdecade afraid save final judgment future article meantime enough reason keep stable version perlâ rattling around usrlocal curio cabinet perlâ conquer world thing hard predict certain sense speaking frustrated member irc channel matter perlâ oneofakind one argue maybe enough captured something rare beautiful uncertain world sit ground hold finger little one specimen like london said bavarianborn stein lord narrator hand hovering glassencased butterfly bronze white yellow small native town collection shall bequeath something note reading evanmillerorg random collection math tech musing liked might also enjoy get new article published via twitter r want look statistical pattern mysql postgresql sqlite database desktop statistic software wizard help analyze data le time communicate discovery visually without spending day struggling pointless command syntax check back evan home page subscribe r twitter youtube
124,Lobsters,perl,Perl,What I expect from a Web Framework,https://domm.plix.at/perl/2017_08_what_i_expect_from_a_web_framework.html,expect web framework,spoiler expect app framework asked original short answer web framework dead web nonwebcontexts superglue new framework dependency injection bread board stack catalyst ox bread board x class,expect web framework spoiler pain suffering learned hate web framework web framework dead post actually expect app framework earlier week gabor asked three important thing missing keep u writing web application perl find original short answer gabor asked clarification try provide expect webapp framework web framework dead main problem web framework web part either good web framework catalyst dancer make hard reuse code nonwebcontexts lot cronjobs test fixup script daemon importer exporter closed system like mojolicous ruby rail tend include everything ie come emailsystem cronreplacement event loop sort drift away main language generate ecosystem walled garden web framework want webpart king project want problem trying solve king project superglue new framework want framework make easy stitch various thing together found concept dependency injection perl implementation bread board fitting need perfectly proper code aka business logic life fat model model plain frameworkless class maybe depends thing ie instance class instance injected class class initiated app need web interface set slim controller router router explicitly map url class method aka action action unpack params andor json payload pas model handle response jsonapi mean serialize data structure returned model oldschool html app controller pass data stupid view rendering interaction data happen via eg commandline script need set small wrapper unpacks commandline args pass model handle response printing terminal example even true unit test want fork webserver making impossible use transaction keep testdb clean mock whole framework environment check model foo return right data stack mostly webstuff nearly year working classic like cgi modperl homegrown framework funny name catalyst plackpsgi currently happy psgi allows appframeworkignorant middlewares reuse matter tool choose implement controller ox allows easily map uris method call force helpful magic bread board provides one location define part needed app web app allows pick part need given task little fuzz dbix class life short concatenate string var get simple sql query thing missing perl honestly clue currently enjoy hacking frameworkless code perl getting know perl ecosystem shame part want start using perl lot somebody could point perl solution core tool stack might actually get around finally get foot wet first implement might take longer sponsored current heat wave vienna make impossible sleep night might well write post footnote
125,Lobsters,perl,Perl,First Language (1998),https://groups.google.com/forum/#!msg/comp.lang.perl.misc/z0rObxz4CLw/1xHbGEuni7UJ,first language,,use google group discussion please enable javascript browser setting refresh page
126,Lobsters,perl,Perl,Why I'm Learning Perl 6,http://www.evanmiller.org/why-im-learning-perl-6.html,learning perl,learning perl evan miller confused put moarvm moarvm code note evanmillerorg twitter r wizard data le time communicate discovery visually back evan home page subscribe r twitter youtube,learning perl evan miller july want hear programming joke perlâ want know new favorite programming language perlâ shhhh clone master run use channel channelnew tentasks map start thread threadid await channel say holy moley someone stole thread thread threadid channelsend ring ring channelclose await tentasks guess output nothing kidding see lot distressed message task passed wait phone ring woke wearing someone o important concurrency hard want n thread multiplexing ie web scale code application thread pinned pthreads option today precisely erlang go net perlâ feeling confused erlang put go indifferent net take look perlâ seriously sure development longer boyhood begun two year film released two year maybe somebody work something year might actually making something good saying true case probably case boyhood least possible right funny fifteen year ago everyone saying perl shooting foot massive language redesign world clearly going switch python ruby well everyone switch python ruby got itch switch turn python ruby designed concurrent code execution maybe shooting foot bad strategy need bionic robofeet going review perlâ language massive spec lot dark corner weird edge case want share thing discovered language runtime moarvm perlâ virtual machine fantastic piece technology event loopaware scheduler check continuation got happens mix two well spin hundred worker routine wait message say network without tying o thread routine get message continues executing whatever o thread happens available hence holy moley opening example like go erlang dollar sign nginx nodejs without callback moarvm written nice clean c full pleasant surprise care dig gil unlike language perlâ bytecode execute concurrently unicode great getting uc right using clever constanttime algorithm addressing codepointcombined grapheme object model garbage collector play nicely ffi interfacing c cinch code base wellwritten wellorganized welldocumented welltested little thing like function right size variable good name make pleasure read quick way judge language implementation inspecting string concatenation function concat implemented realloc memcpy well upstairs light probably set full brightness behold moarvm string broken strand strand repeat without taking memory expression work play make jack dull boy x make thousand copy string even make thousand pointer string stored short string repetition count vm string function know operate efficiently string repeated substring pretty clever right make hundred million copy ram usage barely try sell perlâ still entirely understand language honest spent day poking around runtime tell virtual machine promising piece system work incidentally moarvm relatively new part perlâ stack supplanted parrotvm thing supposed run scripting language moarvm tighter focus running perlâ look like much stronger foundation future work implementing programming language take sunday afternoon check moarvm code suspect even hardened vm hacker learn least something scheduler string handling drawing list programming language try future self favor put perlâ menu tell language taste tell chef famous kitchen ingredient need make something really special note actually program output nothing using release perlâ prior rakudo star caching bug previously caused threadid report outofdate value curious go switch context io message pass function call erlang vm switch context io message pass every vm instruction moarvm switch context call await include message pass asynchronous io promise nginx nodejs never switch context callback necessary hard stringlength limit nt go crazy feature also perlâ regex grammar engine seems flatten everything matching nt yet get full benefit compressed representation looking project reading evanmillerorg random collection math tech musing liked might also enjoy get new article published via twitter r want look statistical pattern mysql postgresql sqlite database desktop statistic software wizard help analyze data le time communicate discovery visually without spending day struggling pointless command syntax check back evan home page subscribe r twitter youtube
127,Lobsters,perl,Perl,Welcome Inside the Head of Larry Wall - Joe Armstrong and Larry Wall,https://www.youtube.com/watch?v=SpH9BTMZKXc,welcome inside head larry wall joe armstrong larry wall,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature keynote welcome inside head larry wall joe armstrong larry wall youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature keynote welcome inside head larry wall joe armstrong larry wall youtube
128,Lobsters,perl,Perl,Think Perl 6,http://greenteapress.com/wp/think-perl-6/,think perl,think like computer scientist allen downey download updated pdf order amazoncom read spanish translation latex source book repository,think like computer scientist laurent rosenfeld allen downey title book originally think perl since perl renamed raku also changed title book download updated think raku pdf order think perl amazoncom read spanish translation think perl think raku introduction computer science programming intended people little experience aim book primarily teach raku instead teach art programming using raku language completed book hopefully able write program solve relatively difficult problem raku main aim teach computer science software programming problem solving rather solely teach raku language think raku free book available creative common license reader free copy distribute text also free modify allows adapt book different need help develop new material latex source book repository
131,Lobsters,perl,Perl,"worth.pl -- find the value of your stock, and how much longer you have",https://www.jwz.org/hacks/worth.pl,worthpl find value stock much longer,,usrbinperl worthpl find value stock figure much longer wait fully vested jamie zawinski still workin da man limitation handle stock one company assumes share vest rate assumes vesting rate linear assumes share vest daily probably vest monthly even quarterly assumes purchase price negligible fill number date stock began vesting end vesting mktime month mdays start numbering year number year since eg would would note sometimes say year really mean month sec min hour mday mon year wday yday isdst veststart mktime vestend mktime many total share issued assumes share vest schedule totalshares total number share issued many already sold sure always count current postsplit unit sharessold company worked ticker behind proxy uncomment fill proxysite proxyport nt need change anything else quoteurl http wwwdbccomcgibinhtxexesquote ticker ticker formatdecimals quoteurl http cbsmarketwatchcomdatasquotehtx ticker ticker tablestable formatdecimals thanks dzm dzmcom refinding working stock url quoteurl http quotesnasdaqamexcomquotedll pagemulti modestock symbol ticker dzm dzmcom quoteurl http quotesnasdaqcomquotedll pagemulti modestock symbol ticker use posix today time veststart vestend die vesting startend date bogusn perhaps messed using digit year n portiondone today veststart vestend veststart sharesvested totalshares portiondone sharesunvested totalshares sharesvested sharesvestedandunsold sharesvested sharessold sharesvested int sharesvested sharesunvested int sharesunvested use socket sub httpgrab mostly snarfed wwwgrabpl local request http site file site die nonhttp url n site site port hostname proxysite port proxyport hostname proxysite else port unless port hostname site request file open socket get data sockaddr response try pack port getaddress hostname b c unpack hostaddr proto getprotobyname tcp socket afinet sockstream proto die fatal error n connect die fatal error n select select stdout print get request print useragent print rn last oh gag pipe buffer fill print close sub getaddress host ary ary gethostbyname host return unpack ary sub parseurl url persharevalue pipe pipein pipeout die ca nt make pipe stdout open saveout stdout open stdout pipeout die ca nt redirect stdout select stdout make unbuffered httpgrab url close stdout open stdout saveout close pipeout last sale read next line persharevalue daystogo monthstogo monthstogo monthstogo yearstogo daystogo int daystogo dayspermonth monthstogo int monthstogo yearstogo int yearstogo yearstogo printf year yearstogo yearstogo print monthstogo printf month monthstogo monthstogo print daystogo printf day daystogo daystogo print parseurl quoteurl printf today ticker price persharevalue print total unsold share worth print commify totalshares sharessold persharevalue n portiondone printf vested still nn exit printf vested total portiondone print commify sharesvestedandunsold vested unsold share print commify sharesvestedandunsold persharevalue n printf quit today walk away print commify sharesunvested persharevalue n print hang little trooper printsecs vestend today print go n doneaniv sub aniv doneaniv return tf year vestend veststart f year tf year veststart vestend veststart f today return print anniversary ctime n print n doneaniv print n aniv minusfouryear aniv minusthreeyear aniv minustwoyear aniv minusoneyear aniv minussixmonth aniv minusthreemonth aniv minusonemonth exit
132,Lobsters,perl,Perl,Abigail's regex to test for prime numbers (2000),http://neilk.net/blog/2000/06/01/abigails-regex-to-test-for-prime-numbers/,abigail regex test prime number,abigail complangperlmisc work regular expression first part second part epilogue montreal perl monger,prolific perl hacker abigail famous posting enigmatic ingenious oneliner script signature newsgroups one blew mind complangperlmisc perl wle print prime x shift number exactly say tin test number see prime perl wle print prime x shift perl wle print prime x shift prime perl wle print prime x shift perl wle print prime x shift perl wle print prime x shift perl wle print prime x shift prime regular expression tool testing string character match certain specification could math rest figured work along obscure feature perl hidden true nature regular expression work explain thing go basic familiarity perl regular expression start first let unwrap slightly convoluted perl oneliner quirk perl syntax statement may modifier end like identical condition statement see man perlsyn shift normally remove first element array return element like popping beginning since file scope shift without array magically interpreted mean shift argv mean number fed argument see perldoc tf shift x repetition operator context treated string number x yield see man perlop grep repetition operator logical negation succeed regex match since looking prime regex match nonprimes oneliner saying give u number make string long number gave u match string complicated regular expression expression match print prime console regular expression regular expression saying match beginning optional ending thus match empty string match case n since match flag prime match beginning string begin first stored group match one match one one minimally end storing first group match first group repeated one time match end string x see work let consider case n generates string like padded space clarity reason abigail generated string make regular expression confusing since also make use could easily b character anyway let follow along regular expression matching engine first big division regex occurs mean regex match everything match everything first part let look first part deal trivial case number zero one first regex anchor match start string match anywhere middle next part optional one actually match nothing next part regex another anchor want match end string string end fails represented red well regular expression failed look back see possibility tried yet called backtracking remembers optional one happens try matching real one nope work see trivial first part string would worked corresponds case n n also seen regular expression engine work give specification like match human intuitively think match stuff regular expression actually description state machine really miniature programming language happen kind look like string match really describe program consuming string piece piece looping bit skipping others even backtrack try multiple option second part regex exploit state machine aspect regular expression make computation second part start anchoring beginning string match two one start parenthesis grouping value match captured backreference note case mean first thing parenthesis literal string next match one string identical first matched grouping case oops string end backtrack okay nothing left backtrack let try matching three one calling let match many new end string next matched see process analogous trying divide number successively larger divisor leaving remainder n tried failed succeeded case prime number never going succeed epilogue regex made much efficient due inclusion single character included regex would immediately match entire string question mark make match minimal start trying divide number etc reject instantly take somewhat longer determine prime good reminder backtracking always reduce size matched portion minimal match backtrack try matching still inefficiency useless attempt match fewer multiple since abigail first posted perl added special regular expression grouping disallowed backtracking benchmarking show slightly faster way even dumbest primefinding function bother check number greater square root length point checking divided check string divisible already know divisible hardly practical technique great illuminates true nature regular expression programmer new regular expression often flounder debug expect computer insight problem thus understand grab html string might even take century run regular expression reputation scary dangerous regular expression powerful within limit keep mind state machine version originally posted montreal perl monger mailing list
133,Lobsters,perl,Perl,Computer Science Professor Stages a Play to Teach his Family Perl 6,https://thenewstack.io/cs-professor-tries-teaching-family-perl-6/,computer science professor stage play teach family perl,jj merelo university granada unicode perl january specific fosdem pull request fountain emacs cc artistic larry wall told play merelo family perl advent calendar grapheme merelo daughter merelo daughter video another essay webreduce,day jj merelo computer architecture professor university granada reporting radical experiment education teenaged daughter taught three computer programming joy unicode using new language perl make fun also collaborated perl stage play time ago found like way way programming taught merelo wrote january also idea reboot way programming taught last week offered specific philosophy teach perl way even people going deploy perl microservices architecture cloud use profit asked even back january came commitment making real idea idea belong wind actually put practice merelo resolved teach humble family code specifically three teenaged daughter age incentive promised could accompany father next tech conference share result w ith enticement travel exotic place present experience completed three daughter signed wrote experiment finally analyzed discovered included predictable lesson easier learn unlearn learn lot programming without touching program first wish program experience learning write code fun else waste one perfectly serviceable hour holiday led idea writing play together gave shared goal something demo perl devroom upcoming fosdem conference free open source developer present little play talk perl teaching programming new generation nonprogrammers merelo even document collaboration sharing link pull request rest family using fountain markup language script say great support emacs text editor helped write simple twoperson play released creative common license need tshirts prop merelo wrote though script suggests prop except going projected screen fact script also describes play truly minimalistic intended trade conference somesuch already longstanding tradition clever presentation perl conference remember someone dressing starfleet cadet people presenting klingon real show merelo wrote one point also said serious wanting expand language community perl preached mainly choir new language great feature mainly presented people third fourth language point could used first language first language learn official perl logo larry wall cc artistic actually fit perl creator larry wall aspiration language python community done much better job getting lower level education told linux voice like something space partly butterfly logo going appealing sevenyearold girl exactly play merelo family begin perl programmer despairing perl advent calendar description available string type choice day wanted write script using fountain decide whether need use something called grapheme camelia show camelia good perl programmer know also name butterfly official logo perl appears holding magic wand introduces fairyops team leader finish developer project six magic word git push dash dash force story shadow puppet come one camel representing perl shadow puppet butterfly upon time bedouin called babel larrybenwall camelia explained bedouin benwall first created camel system administration web programming usual thing camel along came thing like web web framework unicode camel grew fast widely used respected though people finding helpful bedouin larry wanted spirit later made people create javascript framework every tuesday bedouin larry decided create something new biohacking interstellar travel brain dump many thing exist yet actually existing would break camel back perl developer convinced like christmas carol camelia promise visited three spirit spirit beta release first release spirit christmas perl eventually released script identifies first ghost bill murray least someone appropriate bill murray tshirt first thing poor developer say ghost even dead particularly productive conversation second ghost show thing look promising developer say ok get going show rejected beautiful efficient language like python c past said bad thing vi fedora way lost friend consulting job whatnot ghost disagrees saying python cool seems suggest also belongs ghost season past true plot original christmas carol ghost also grant peek beleaguered people case unhappy teenager named elena named merelo reallife daughter programming supposed cool another subject study like geometry gasp physic third scary ghost show everybody horrific future people programming python whole thing wrap elena learned program saying turn perl cool easy learn also useful time big closing number least triumphant rap song merelo hello world say goodbye daughter programming high sky merelo git emacs even try daughter map grep z x merelo grew worried conference got closer needle say panicking actually kind thing instead usual look last christmas bullet point nice memedotted slide wrote also added happy last week fosdem big moment finally came took stage daughter premiered play rest world start minute video humble affair one point slide princess leia lego minifig clear educational script one original line dad bill murray tshirt want take seriously end whole production clearly show merelo commitment importance fun attracting new programmer emerging language like one usually marketed people already knew one several language wrote another essay preaching bleacher say made whole programming thing zerosum game win something lose something attract new people community end day also felt proud empowered daughter new tool see first foremost programming life hack webreduce image jj merelo
134,Lobsters,perl,Perl,A great disturbance in the force (imdb boards no more),https://www.beatworm.co.uk/blog/internet/imdb-boards-no-more,great disturbance force imdb board,million voice suddenly cried terror suddenly silenced fear something terrible happened download epub edition post agonnaz update erstwhile colleague mathias imdb announced said homepage long time ago galaxy far far away imdb usenet amazon imdbpro perl apache modperl registrypm cgi picture got small activex support zope mysql isam bit like javascript database photoshop illustrator dreamweaver frontpage squid cdn even ftp rsync nfs preos x macintosh suit would use window window desktop linux beos several year everybody emacs xemacs remote xemacs client deploy host attached local server wire god full star amazoncom family sde postgresql database engine hobby site moderately popular dotcom publishing house greenspun hn reddit twitter looking thing stackoverflow paul graham plan spam cafeteria attached swimming pool lower dialup insanely fast cable connection archer statistic project mayhem previous gig phpbb going need bigger boat really paid attention idea read posting build cache invalidation system accounting web mechanic concurrency implementation premature optimisation root evil show blueprint test designed provoke emotional response internet explorer hockey stick bbcode misconceived series chained regular expression killfiles phantom zone superman stored procedure dog wire protocol memcached pgbouncer spike colony seamonkeys griefer catfish netbios vulnerability posting death threat president bush weird jay silent bob strike back individually visit internet forum poster real life learned intel unix profiling virtual memory system file system http caching pretty great postgresql dba cpu cache level burn great varied career always closing actual proper news site verge one thing bothering monty python meaning life crazy credit cm,million voice suddenly cried terror suddenly silenced fear something terrible happened download epub edition post courtesy redditor agonnaz update erstwhile colleague mathias wrote thought role story time friday imdb announced intended shut message board system permanently nt find particularly surprising decision surprised message board still seemingly essentially unchanged last fifteen year coat paint handful feature improvement largely seem backed system design developed inhouse tech team way back dawn century bulk early development time primary developer said homepage many year blame message board long time ago galaxy far far away incredibly excited asked join imdb developer team end aged almost decade professional software development belt already although sound today like relative stoneage modern web course many way point already spent several year working basic web application original dotcom boom inawe imdb even back somewhat venerable internet institution founded thus predates invention world wide web several year started list data shared via usenet post time joined couple year amazon ownership starting expand team started cusp launching imdbpro ambitious roadmap completely rebuild main website inside using shiny new technology stack small development team built ground power imdbpro application server thought clever hack imdbcom hugely popular website approach adding industry focused feature subscription remix site built top data feed still basically formatted text list using convention old usenet based tool meant effect could use far smaller user base pro site testbed new tech gradually port section across terrifyingly high volume consumer site without rewrite relaunch sweeten deal look arrangement meant testbed user would actually paying break newer software helping iron bug shiny new high performance web stack meant perl apache running modperl precise case nt know modperl piece semideranged brilliance wrap perl language interpreter apache module persistent runtime expose internal api http server let write application effectively apache webservers direct access every part http serving lifecycle furthermore using neat hack registrypm could use module script designed work cgi script get speed boost unmodified technique could write perl application went almost fast apache could late php php back pretty grotty thought cool kid using perl perl library excelled gluing existing bit unix together meant write far le application hand yup hand let dig little bit picture got small writing web software back fairly different prospect circle nt really much way framework enterprisey thing floating around converted big ibm oracle microsoft clientserver application kind terrible intranet suite required activex support load page poked around zope interest large anything interesting used freebsd linux smp support likely use apache forking write site combination static page server side templating cgi execd program kind unix scripting language usually perl usual suspect relatively common including actual honesttogod shell script maybe write performance critical cgi binary c data processing might connect application directly preexisting company rdbms thing dba thing let might deploy sql db nearby web host usually mysql isam quasireligious intolerance foreign key support ok could data validation application code bit like javascript database library common task like parsing wire protocol file format wrapping utility thing like generate resize graphic stitch selection together adhoc fashion make system typical web stack would tablebased html attribute styling inlined image typography spacing possibly prerendered maybe dynamically generated cgi script user management full hand coded cookie session tracking relational database persistence using hand coded sql custom database schema page generation via selfwritten templating system gluing skeleton layoutoriented html around variable interpolation inline conditionals part would often run serverside includes sometimes would also handled cgi script maybe hand built filesystem cache front frontend back would often build static page representation first photoshop illustrator would converted single html page master dreamweaver frontpage handed backend coder clean crack apart templated fragment hand single byte string encoding throughout threading light veneer object orientation internal data structure small cluster actual physical server perhaps data center often onpremises sometimes rack sometimes actual tower server corner directly connected internet router pitiful capacity sometimes cluster small one machine architecturally webserver perhaps two wanted split heavy dynamic serving lighter static content database might end box better io networking enough web server might put kind load balancer front perhaps http reverse proxy accelerator cache often another apache sometimes squid sure fully understood cdn even deploy ftp maybe rsync sometimes production filesystems locally mounted via nfs smb copy stuff edit place version control even might renaming file perhaps sccs rcs advanced user might cv designer might preos x macintosh suit would use window developer something freeforall window desktop linux used beos several year whilst still thing seemingly everybody everybody used emacs write code gnu emacs common cool kid using xemacs sometimes remote xemacs client deploy host attached local server wire crazy day god full star scene joined amazoncom family sde working new imdb platform fairly hot perl programmer spent good year designing rewriting custom web framework optimising modperl architecture really good sql least thought comparison peer developed particular fondness slightly uncommon postgresql database engine done quite web thing early corporate intranet portal hobby site moderately popular dotcom publishing house step change entirely bigger league reality especially look back hindsight see little idea hardly anyone nt lot published material architecture everyone read greenspun nothing like modern tech web scalability porn conference circuit hn reddit twitter facebook looking thing stackoverflow still almost decade away nt even easy find scant information remember google barely yet thing information sharing tended happen mailing list using actual email maybe still usenet paul graham nt yet written plan spam nt really functional automated spam filtering imdb unusual working setup day befitted birth federation usenet correspondent everyone worked completely remotely scattered around world time joined express preference staff could attend weekly company meeting lunch near bristol cafeteria attached swimming pool majority tech team building software based around area home internet connectivity still largely lower dialup possibly metered although lucky enough part bristol eligible insanely fast cable connection anticipating work significant amount dp potentially offline asked could provided small server smp raid capacity rather surprised small tower hp proliant rig turning house cocooned onto loading pallet big fit front door unglue piece piece carry home office box bedroom full ikea table slightly tall comfortable desk assemble place christened mavisimdbcom installed debian stable involved day figuring hardware raid driver point shrieking fan disk constant part daily life next halfdecade eventually house move allowed get makeshift server cupboard could deaden persistent din behind door blanket curtain occasionally wonder middleage frequency gap hearing match particular pitch affected enough care get measured noise tended interfere music first year developed habit listening bbc radio morning midnight therefore nt test match listen brief period life developed unusual degree expertise coming going archer one consequence remote working patchy connectivity development work tech team informally siloed subsystem individual engineer ownership first task worked getting working build entire stack onto mavis porting statistic page across new web stack internally known mayhem project mayhem everyone big movie reference naturally way familiarising application infrastructure made perfunctory stab searching around something substantial forum message board seemed natural candidate recent piece work done previous gig contribute threaded discussion system general purpose content management system allowed tree conversation attached content id catalogue site user could threaded comment section attached content worked pretty well contrast imdb pretty threadbare generic forum system standalone phpbb installation almost entirely isolated rest system organised dozen general purpose think even separate login system business goal next year drive user registration forum system seemed like good feature assist offered additional site value viable registered user another target integrate board system directly movie database allowing people conversation directly attached page movie show another important requirement allow system would let data contributor directly communicate data management team tasked something forum meet broad goal implementation design largely informed regular feedback wider team onto weekly progress report via team lunch meeting going need bigger boat considered number approach could extended php forum system support new feature nt really consider couple minute php nt know terribly well disliked would harder tightly integrate rest mayhem app domain optimised modperl web service wondered wrapping usenet service lot appeal much lot base mechanic hierarchy would already covered highly scalable architecture portable standard several existing backend implementation really liked idea lot rejected eventually realised would difficult build integrated web front end offered much functionality standalone newsreader able find decent opensource web nntp client might well done another alternative would find alternative forum system amenable customisation considered using slash system powered slashdotorg rejected time reputation poor performance uptime struggling coping troll really paid attention idea would come back haunt eventually using mixture naivety hubris ego enthusiasm pragmatism decided build something custom scaling idea used comment module previous job basis system something quite proud sens quite clever hack wanted threaded discussion famously tricky model tree sql first attempt hydrating flat list tree runtime sql result set computationally little bit expensive hardware time slowed page rendering article comment came ingenious scheme store several sort field comment record one representing vertical position thread one representing indentation level every time reply inserted comment thread compute correct indent level adding one parent reply set vertical position one larger parent update every larger sort sequence increment one sequentially stored thread order read index storing timestamp sequential post id thereby system could trivially read back conversation order time order posting order reply meant posting relatively computationally expensive database server whereas reading simple fast reasoned read many time frequent writes biasing system way would optimise common case avoid need build cache invalidation system system actually worked pretty well practice least accounting web comment section although conceptually neat also actually pretty fucking dumb couple reason updating record high overhead postgresql mechanic concurrency implementation system mean adding comment becomes linearly expensive thread grow size popular system get work needed post individual comment increase polynomial fashion oops nt entirely stupid calculated downside done scaling calculation paper see cost implementing imdb would made first actually stupid mistake used metric existing forum system try predict capacity new one ca nt remember exact number long misplaced notebook something lower thousand post day average thread length dozen post amazon could afford useful database server seemed like easily couple order magnitude headroom telling premature optimisation root evil conveniently ignoring fact design literally entirely borne optimisation hack decided proceed scheme show blueprint gave design lot thought usenet user back glory day spam binary rendered toxically uninhabitable adored slashdot used lot shitty web forum since designed flexible engine could handle kind post based discussion grouping thought great opportunity design discussion system want use scratch itch think already mentioned nt really much idea getting ah youth thought grief spam seen system primarily cheapness disposability user identity figured could tie disallowing anonymous post aligned goal increasing user registration already maybe ultimately could link amazoncom account therefore real identity wanted give user ability personalise curate site home page investment community valued would publicly accountable another thing noted forum quickly stagnated dominant clique deterred new joiner decided part permanent record conversation got stale everything already said group tended dominated handful highstatus member visible posthistory groupthink dominates outsider shunned filterbubbles prevail thought interesting solution would actively expire user post imdb already system user review static user content attached database entry board conversation periodically remove older content make secret stop entropy lockdown also give u mechanism keep lid database thread size help performance everything stay fresh sparkling selfrejuvenate know lot naive thinking hindsight easy see flaw though much le experience online community management thought knew trolling experienced previous community nt think anyone yet handle scale scope significantly massmedium consumer internet really wanted nested threading good perhaps good way promote replyoriented posting reading reason nt want threading implied default mode thought promoted pointbypoint refutation lead argument flamewars envisioned system could seamlessly move flat nested view cookie fix individual preference post would two action new top level post thread reply particular post different view option would allow see thread timeline fitted together point view felt would encourage reply without mandating form discourse meant organisational system topic either generic database object consisting thread defined opening post made user topic level collected numerous reply could subthreads reply mindful fact still era expensive slow dialup low end computer wanted ability view narrow expanded view nt want force people download gigantic page browser modemchoking deeplynested table layout would flip outline expanded view well flat nested wanted people static customisable home page could add content style flair hoping give sense curation ownership identity help act brake much antisocial negative behaviour sure even smart enough wonder people would use home page host offensive content course started build initially went really well data model storage engine side thing pretty solid footing familiar ground carried using postgresql specified decent time server host ha replication shocked idea time reasoned building ancillary purposefully ephemeral sidecar discussion system different storage layer main site fine regular hot backup case disaster could shut without affecting main site restore backup case total utter catastrophe could reset zero start nt designed permanence anyway feedback design feature rest team positive plenty enhancement suggested tweak system started take shape ux layer way harder anticipated started get bit bogged second first deliverable mayhem engine team built really clever piece software design nt really time give justice never yet really cater highly dynamic page core purpose serve flexible view almost readonly statically compiled dataset movie people originally built around particularly optimised way build http post form handling layer would integrate existing http handler somewhat lower starting point used soaked quite bit testing debugging time even worse display code nt really much facility dynamic page layout templating system highly customised complex site page template used drive static build system via custom compiler markup template specified data view would generated build directed data builder compiled binary movie database page effectively compiled stub handler specific route would seek object index particular data index basically sprintf data port hydrated web page fast way serve varying page identical structure immediately well suited highly adaptive constantly updated live page submission form still wanted board system existing stack well could manage laboured build missing feature system way could integrate well involved least one complete abandoning rewriting internal api actual board display template significant time soak great designer took ugly box table prototype output turned nice looking blueprint design various view mode form static web page course era browser war expected support bewildering array user agent netscape era onward inclusive weirdass thing like aol client msn webtv set top box goodness know else busting intricate tablebased view apart back together cryptic markup logic language adding various session global mode flag different view combination rendered functional page degraded gracefully took week slipping past shipping date entering terrible crunch deathmarch try get something door unhelpfully happening time strain family life also struggling little bit balance sensible routine working home pingponging getting distracted away overcompensating working across night weekend eventually pull feature ship drastically cut back home page customisation abandoned planned unstarted work search index time add rudimentary admin feature wanted migrate existing post across new system even begun start also hit cutting room floor lot assistance rest tech team get line hit publish initial tng board system time summer later planned month pattern message board work expected party touched would prevailing tone next several year test designed provoke emotional response user feedback immediately negative highly vocal lobbying started instantly reinstating previous system people complained new design complexity new display option inevitable launch bug silly enough join conversation help explain launch solicit feedback point onslaught direct contact message email occasionally positive friendly often weird offensive sometimes abusive try tell ignore troll truth quite difficult remain completely unaffected email compare child rapist calling death offensive term even provoked breaking font size particular version internet explorer never quite get used find pretty crestfallen negativity work although team positive assured board user could like general people vocal complaining naturally somewhat resistant change still felt pretty mood soon change week new board kind hit maybe smash hit quickly overshot scribbled calculation scale slightly worrying manner judicious database tuning performance stayed ok though added link every title page imdb page subgrouped title page tv show movie identified key called tconst looked like name page people robot animal etc cast crew identified key called nconst look like top level board unlinked database object therefore got new key type called bdconst somewhat inconsistently looked like nt matter much ever dozen standalone board number started properly hockey stick time used compute page view weekly report broke top n subsection according first level directory never shared traffic number publicly even time respectfully coy highest chart topping position obviously thing like title name search news chart etc launch board lurking bottom nowhere seen started title conversation solidly top five remained everaccumulating number user registration clocking correspondingly point spent significant amount waking life board next several year initially scrambling put missing feature pulled launch post editing markup post profile handrolled version bbcode stupid insistence display time optimisation converted html write time meant added post editing backward parse html back bbcode reedited misconceived series chained regular expression lead endless sea parse bug pretty much guaranteed markup emoji although nt called yet called smiley set would fixed effectively sealed forever even though taken trouble add admin edit tool allowed update markup made nondevelopers cm api thrown together naïve search api entirely based unindexed sql substringing fully intended replace launch never worked system filled quickly killed page cache entirely constantly table scanning text much spiked first week never got chance work planned replacement still getting email complaining five year later left surging popularity came increasing amount negative user behaviour increasingly devote development time adding abuse processing tool small moderation team onto ever afterthought admin system never proceeded link user account amazon account never planned add userdriven moderation quixotic hope user killfiles renamed ignore list far better kinder name global killfiles known phantom zone love superman account history purging deletion nt enough tooling processing abuse report clunky slow largely nt planned enough offset fighting constant war two front popularity system way beyond original estimate thousand post day quickly escalated point really popular offtopic board ersatz realtime chatroom accepting hundred post second peaktimes cursorpooled synchronously blocking database directly attached http display server spent great deal work time constantly rewriting section squeeze efficiency setup first index schema change hardware upgrade tuned profiled system software complete rewrite database logic use stored procedure finally long overdue table sharding could cluster board different table tablespaces balance io garbage load time front trying come way lower proportionally increasing cost trolling abuse partner temporarily stationed away london point home alone aside dog workday point quite often consisted walking pace bedroom still brushing teeth getting support email starting poke something interesting board giving small hour next morning fairly obsessed health suffering although close properly see time developed weird collection neurological symptom stubbornly refused diagnosis subsequently appear entirely stressinduced still choking peak load time starting knockon effect rest site eventually supertalented colleague helped implementing workable version poorly articulated design caching database proxy implemented seemingly overnight c spoke postgresql wire protocol cached result set filesystem mounted ramdisk kind homebrewed combination memcached pgbouncer simplicity effectiveness took breath away much lesson software thing nt exist make everything one zero fond saying day addition got place system enough steady state implemented banning reporting added reputation score based system slowed rate posting user lower reputation score also helped reduce saturation write load peak eventually added automatic moderation robot learning capacity pluggable rulesets called spike worked fairly well little bluntly time hope giving impression entirely negative definitely rollercoaster year exhilarating also entertaining board living thing sprung nowhere literally something created spare bedroom sort felt like pacificocean sized colony seamonkeys eternally fizzing away unexpected activity right spare room although often frustrating user also inspiring creative surprising occasionally pretty funny even gentler troll top understandable level frustration annoyance generally found felt sense sympathy complaint frustration system age social medium could almost feel shape hanging slightly beyond heading offpiste direction probably nt venture consistent surprise amount effort people put curating limited patch profile space social u offtopic constantly running people trying use board personal social space argued providing individual personal board every user one point management team explained nt really core business general social networking confused time think think correct thinking lot wisdom simply ca nt possible thing well small team big world benefit focusing entirely thing best thing want better sillier troll stand one early griefer easily ip traced school library think based canada waited midsession one afternoon recall correctly management called head teacher able apprehend act another silly catfish troller called tabithacyeg obviously manufactured identity mo posting bizarre conspiracy theory site technology claimed hacked using sounding completely irrelevant netbios vulnerability replete faked server log one occasion hacked email revealing true name something along line claude savoire quite user seemingly entirely convinced pythonesque getting contacted fed deal user posting death threat president bush weird least first time got pm email actual industry figure always quite exciting personally banned moderately famous hollywood producer one time abusive posting something curiosity remember going watch jay silent bob strike back cinema around time frame getting particular kick subplot individually visit internet forum poster rude previous film watched people fight friend saw romance marriage two emerge regular read occasionally got involved better judgement fascinating productive conversation still bump people real life reminisce board day impressed tell big hand genesis spent evening darkened restaurant patio overwhelmed tear kind man explained young daughter hospitalbound dying cancer used harry potter imdb board main social life last year much meant story like profound privilege even tangential involvement learned much working smart team great special piece internet learning every aspect scaling web stack disk block network back era still intel hardware learned huge amount unix profiling linux virtual memory system file system http caching made many mistake nt way learn figure fix improve many learned postgresql internals wire protocol way storage model detail day pretty great postgresql dba need learned lot ux influence steering behaviour albeit mostly getting wrong learned building search engine service orientated architecture really nt hang responsive system blocking io maybe message queue useful learned measure system performance way cpu cache level learned keep focused problem nt yet know solve perhaps nt yet understand learned lot lot thing movie cinema history much osmosis poring data source learned better manage time project learned feel like burn know since left amazoncom great varied career think least useful thing know well learned firsthand gig always treasured respected always closing shutting board first heard via text message oddly enough shortly news feed followed slow stream email checking friend excolleagues former board user felt odd sense shock way slightly emotional sixteen year ridiculously long time internet year web nt sixteen year old joined amazon even older still imdb nt use board although occasionally look perhaps twice year clear getting fraction use fair web different thing entirely also good thing communication technology evolves hopefully improves time people kind social networking communicating bulk happening different smaller screen anything could envisioned first sketching pencil idea gridded notebook actual filofax believe humbling see amount twitter traffic noting imdb announcement well number actual proper news site wrote something significant verge report seemed think imdb message board eradefining something guess thing must pas one thing bothering mjeyds imdb board bbcode syntax particular smiley markup using bizarre word people occasionally ask term mean always enjoyed mystery one people world claim know answer guess never reveal emoticon set curated uploaded configured erstwhile designer colleague took responsibility naming nt english hailing denmark believe via several country pressed explanation mjeyds said supposed onomatopoeic way late graham chapman said languorous yes whilst sucking pipe scene monty python meaning life guess work better using danish alphabet got way post find answer question sorry anticlimax thank reading maybe thing better left mysterious another lesson learned crazy credit personal web page entirely personal subjective retelling experience building maintaining small section imdbcom long time ago whilst happy take personal responsibility large amount board creation inspiration nt want people get impression way solo effort work outlined produced context small dedicated team although refrained naming name attributing idea elsewhere borne desire miss anyone amount time simply way credit individual part remember without failing attribute others equally important contribution forgotten done best honest fact timeline tried infer much third party motivation know forgotten thing misremembered others working memory amount time error human spot anything terribly wrong question correction please get touch like thank entirety imdb team working aformentioned thing great team great time posted cm tagged
135,Lobsters,perl,Perl,Ack for CSS Developers,http://csswizardry.com/2017/01/ack-for-css-developers/,ack cs developer,ack cs developer installing configuring note regex find decimal pixel value find id background shorthand find unitted zero ack installing configuring official installation guide note regex find decimal pixel value demo find id using id cs nb demo background shorthand recently wrote demo find unitted zero demo help buy coffee,january ack cs developer written harry robert cs wizardry table content installing configuring ackrc note regex find decimal pixel value find id background shorthand find unitted zero ack powerful userfriendly alternative grep designed programmer purposebuilt run search source code default ignore git svn directory tell type file like search example search string foo html file ack html j cs bar search string bar html j cs file neat huh get habit always wrapping search term quote without run risk search term regexes interpreted command line argument use ack part auditing project trying find way around larger codebase also pretty useful tracking bug oddity short post look small number way cs developer make use ack workflow installing configuring mac install ack using homebrew simple operating system check official installation guide use ack probably want cd root project root cs directory ack search file current location terminal look like whilst writing article harryroberts sitescsswizardrycom master ack search term ackrc ack extensible configurable making use ackrc dotfile life home directory alongside vimrc bashrc etc thing added mine probably like well ignoredirectoryis nodemodules ignoredirectoryis bowercomponents typesetsass ext sc sas typesetmarkdown ext md markdown telling ack exclude nodemodules bowercomponents directory well adding markdown sas new filetypes mean run search every sc sas file project see filetypes ack search run think something missing add ackrc note regex use ack need know little bit regex worry though regex pretty weak even still manage find decimal pixel value want decimal place pixel value eg let search match zero digit reason looking zero want find match literal fullstopperiod character mean find actually error px match literal string px want look em rem percentage accept float value see demo find id definitely using id cs let look ack cs az firstly notice flag tell ack run regexes case insensitively pretty complex regex thing find literal hash symbol az find single hyphen underscore case insensitive az denoting valid start id almost exactly except time looking zero character digit well separately previous lookup id start number running positive lookahead checking encounter opening curly brace next closing one mean find id hex value nb sas nesting ability nested code containing hex value becomes false positive run regex compiled cs please refer demo background shorthand ack cs background recently wrote consider background shorthand syntax antipattern probably look whilst background find literal string background followed colon match zero unit whitespace colon beginning hex value literal hash symbol beginning hex value valid hex value eg setting flag mean regex case insensitive match literal semicolon character denotes termination declaration see demo find unitted zero ack cs pxr em little pedantic putting unit eg px zero redundant zero pixel distance zero lightyears let look b look word boundary mean looking zero start string ie midway one eg looking literal zero character pxr em look literal string px rem em r em make r optional match either rem em time see demo common thing search cs file part audit course ack help find manner thing finding specific class property selector value right way finding error bug help buy coffee
136,Lobsters,perl,Perl,"With the Rise of DevOps, Perl Shows Its Muscle",http://www.i-programmer.info/programming/perl/9649-with-the-rise-of-devops-perl-shows-its-muscle.html,rise devops perl show muscle,devops perl module mirrored modperl catalyst inline python probably one largest perl code base world search indeedcom activestate activeperl activepython activetcl komodo ide related article perl threading unicode issue perl perl suitable beginner advanced perl regular expression extended construct advanced perl regular expression pattern code expression praise perl llama weekly newsletter r feed twitter facebook google linkedin comment comment iprogrammerinfo,perl seeing real revival interest perl fantastic devops tool rise devops perl solidified long held reputation duct tape internet since february perl back top tiobe index recent monthly yearonyear comparison see healthy gain resurgence easily explained consider ideal language devops devops devops result combination software development team dev operation team ops collaborative multidisciplinary unit devops considered product agile development movement much like agile development focus building iterating releasing product frequently small quick upgrade update close cooperation essential summary devops new functional unit within company structure team development engineering work sync operation business business goal become closely aligned engineering reality vice versa let look reason make perl good fit devops easily available perl dynamic programming language compiling open source come installed practically every system ever log even better code sample everything large growing repository comprehensive perl archive network cpan provides year perl library fingertip cpan currently perl module distribution written author mirrored server good many thing perl often thought quick fix ideal many thing text processing web apps interfacing database lowlevel apps highlevel apps gui development conceptually perl used simple task complex task small project major project perl templating system powerful regular expression engine make really good web apps embedded perl interpreter apache modperl powerful componentbased perl modelviewcontroller mvc framework catalyst make perl especially suited web perl lot web apps used image creation manipulation networking gui development robotics bioinformatics vlsi electronics create mail filter minimize spam fact nt lot ca nt perl perl object oriented support inheritance multiple inheritance diamond inheritance polymorphism encapsulation boundary regular perl object oriented perl perl play well others perl extra module allow write use code written python php java c c basic ruby awk assembler pdl tcl octave guile slang befung lua perl script python example inline python directly perl script using inline python call commandline script mean use perl conjunction programming language rather rewrite existing code perl implemented widely list company depending heavily perl long varied amazon craigslist ebay ticketmaster google bbc yahoo nasa mitre deutsche bank bank america dreamworks animation bookingcom netaporter many rely perl run smoothly either business missioncritical application recently bookingcom travel site stated maintains probably one largest perl code base world perl also ahem reportedly power largest nsfw web site web including youporn adultfriendfinder two largest perl site web fast enough right job need speed need compiled language large perl program start slowly similar program compiled language perl compile source every time run said perl run faster interpreted competitor notably python python everything object perl scalar value simple close machine perl fast c scripting language remarkably speedy startup overhead done interpreted language including perl significant advantage agile programming type environment including rapid prototyping writecompilerun cycle rapid application development rad allows iteration per hour expensive agile developer time crossplatform preinstalled system established devops tool search devops job perl included list long search indeedcom show devops perl job opening amazon bank america atlassian many perl real staying power outlined easily available incredibly wide range library pick cpan repository good different type task without limiting developer relatively easily include language used many wellknown company around world fast enough devops team already know extra training required make perl critical devops perl back thanks strength devops tool plain work tom radcliffe director engineering activestate year experience software development management academia industry activestate provides software application development management solution including activeperl activepython activetcl dynamic language distribution popular developer tool komodo edit komodo ide related article perl threading unicode issue perl perl suitable beginner advanced perl regular expression extended construct advanced perl regular expression pattern code expression praise perl llama informed new article programmer sign weekly newsletter subscribe r feed follow u twitter facebook google linkedin comment make comment view existing comment using disqus email comment comment iprogrammerinfo
137,Lobsters,perl,Perl,Day 7 — Set In Your Ways: Perl 6’s Setty and Baggy Types,https://perl6advent.wordpress.com/2016/12/07/set-in-your-ways-perl-6s-setty-and-baggy-types/,day set way perl setty baggy type,note unicode texas equivalent use instead ready set go allomorph angle bracket create allomorph type type gag em n bag em repetition operator twigil mixing type routine like,relatively common pattern see people writing code say dna base string count count agtcagtcagtctttcccaaaatcomb say count g c make hash thing want count key hash problem perl actually specialized type appropriate operation example bag agtcagtcagtctttcccaaaatcombbag g c say let talk type fancy operator come note unicode using fancypants unicode version operator symbol post look purty however call texas equivalent use instead ready set go simplest type set keep exactly one item multiple object duplicate discarded say set foo b output set foo b see result one one use element set membership operator check item set mahpeeps set babydrop ibakecake zoffix viki say weeee zoffix mahpeeps output weeee set operator coercive need explicitly create set u say weeee zoffix babydrop ibakecake zoffix viki output weeee pay attention using allomorph say weeee output say weeee coerce allomorph numeric output weeee angle bracket create allomorph numerics first case set contains bunch intstr object left hand side operator regular int comparison fails second case coerce allomorph numeric component hyper operator test succeeds testing membership super exciting set intersection admins set zoffix mst coke lizmat liveinnorthamerica set zoffix coke timtoady huggable northamericanadmins admins liveinnorthamerica say northamericanadmins output set zoffix coke intersected two set intersection intersection operator received set contains element present original set chain operation membership checked provided set chain say zoffix lizmat huggable zoffix timtoady huggable zoffix output set zoffix another handy operator set difference operator whose unicode look find somewhat annoying backslash set minus character luckily use much obvious texas version usefulness operator compensates shoddy look spammer spammety samcom spam inacancom yum spamcom sender spammety samcom good guycom key sender spammer nonspammer say message nonspammer output message message good guycom two array one contains list spammer address another contains list sender get list sender without spammer use fine fine operator use loop iterate result see output spammer key reason setty mixy type lot like hash sense key value key set type always true value since care iterating pair object loop use key get key set email address however hashlike semantics useless set example take slice k adverb return element set contains meow set abyssinian aegean manx siamese siberian snowshoe sokoke sphynx suphalak thai say meow sphynx raas ragamuffin thai k output sphynx thai happens try delete item set say meow siamese delete call deletekey immutable set block unit line set type immutable however like map type mutable version hash set type mutable version sethash cutesy helper sub create one use constructor instead sethashnew b c say delete say sethashnew c b sethashnew c b voilà successfully deleted slice goody santa bag gag em n bag em related set another type bag yes also immutable corresponding mutable type baghash already saw start article use bag count stuff like set bag hashlike could view slice four dna amino acid agtcagtcagtctttcccaaaatcombbag g c say set value set true bag value integer weight put two thing bag one key value recipe bag egg egg cup milk cup flour say recipe output bag cup flour egg cup milk course use handy operator combine bag using multiset union operator look lot clearer texas version pancake bag egg egg cup milk cup flour omelette bag egg egg egg cup milk shoppingbag pancake omelette gum chocolate say shoppingbag bag gum cup flour egg cup milk chocolate used two bag along list got correctly coerced u anything impressive operator precedes equal mirror succeeds equal tell whether baggy narrow side operator subset baggy side meaning object smaller baggy present larger one weight big challenge material stuff want build problem enough material build stuff want know combination stuff build let use bag material bag wood xx glass xx brick xx wanted bag wood xx glass xx brick xx house bag wood xx glass xx shed bag wood xx doghouse say build put wantedcombinationsgrep material stuffwewant output build house shed doghouse house shed house doghouse shed doghouse material bag material used xx repetition operator indicate quantity wanted array three bag stuff want build also used used operator mix name override bag put end interesting part call combination list stuff want name suggests get possible combination stuff build grep result looking combination take material operator fatter end material bag narrower end operator add bag combination stuff want together except use metaoperator putting operator item stuffwewant case new twigil stuffwewant creates implicit signature grep block name variable anything want output program show build combination stuff except one contains three item guess wait mixing let look back recipe code something quite perfect recipe bag egg egg cup milk cup flour say recipe output bag cup flour egg cup milk recipe call half cup milk instead whole one represent quarter teaspoon salt bag ever integer weight answer mix type corresponding mutable version mixhash unlike bag mix support real weight including negative weight thus recipe best modeled mix recipe mixnewfrompairs egg cup milk cup flour salt say recipe mix salt cup flour egg cup milk sure quote key use colonpair form since treated named argument also mix routine take weight function like bag routine except returning mix course use mix coercer hash list pair lessthanawesome creation aside let make something mix say alchemist want make bunch awesome potion need know total amount ingredient need however realize ingredient needed reaction actually produced byproduct reaction making efficient amount stuff need mix rescue potion immortality oxium morphics unobtainium mix invisibility forma rubidium unobtainium mix strength forma rubidium kuva mix speed forma nanospores kuva mix say potionsvalues output mix unobtainium nanospores morphics forma oxium rubidium kuva convenience set hash key name potion value mix quantity ingredient reaction produce one ingredient seek used negative weight indicating amount produced used set addition operator saw earlier meta form supply value hash mix happily add ingredient see output look unobtainium rubidium set operator correctly accounted quantity produced reaction ingredient negative weight immortality potion successfully mixed need figure next coding perl like like loading related
138,Lobsters,perl,Perl,Rakudo and NQP Internals Course,https://github.com/edumentab/rakudo-and-nqp-internals-course,rakudo nqp internals course,rakudo nqp internals workshop abstract prerequisite day nqp language compilation pipeline qast exploring nqp ops day bounded serialization module loading regex grammar engine jvm backend moarvm backend build instruction http johnmacfarlanenetpandoc course delivery info edumentse http edumentse,rakudo nqp internals workshop repository contains course material workshop rakudo nqp internals find abstract intensive workshop take deep dive many area rakudo perl nqp internals mostly focusing backendagnostic part coverage jvm future moarvm backends also course participant build small compiler complete simple classbased object system help understand toolchain work prerequisite reasonable knowledge perl language preferably little experience working nqp also day eagle eye view compiler nqprakudo architecture compiler runtimes perl challenge nqp language nqp compiler construction toolchain qast nqp op set bootstrapping nutshell rakudo us nqp nqp language design goal literal variable control flow subroutine pointy block closure semantics class attribute method regexes grammar role multiple dispatch builtins nqp ops exception handling limitation difference full perl shortcoming compilation pipeline hll compiler class frontends backends qast parsing grammar ast building action code generation building tiny language scratch qast qast node base overall structure ast literal qast ival qast nval qast sval operation qast op basic example sequencing qast stmts qast stmt variable qast var qast varwithfallback scope decl value block symbol table invocation parameter argument contextualization qast want block reference qast bval object reference qast wval backend escape hatch qast vm top qast compunit exploring nqp ops arithmetic relational aggregate string flow control exception related context introspection big integer day object behavior state type kind metaobjects representation stable knowhow root building simple object system scratch adding object little language using world method cache type checking boolification invocation exploring nqp metaobjects exploring rakudo metaobjects container handling bounded serialization module loading compiletimeruntime boundary serialization context qast wval revisited bounded repossession conflict terror nqp ops related serialization context world revisisted module loading work regex grammar engine qast regex node subtypes cursor match bstack cstack nfas longest token matching jvm backend overview jvm qast jast translator runtime support library moarvm backend overview moarvm qast mast translator build instruction run makefile build slide two day need make program nmake window work fine perl pandoc see http johnmacfarlanenetpandoc latex dvips command path linux something like aptget install texlive aptget install pandoc window pandoc installer url mentioned install miktex command course delivery course material made available edument ab creative common license see license file support perl development community however best experienced live interested material delivered experienced instructor location choice feel free contact u info edumentse learn edument awesome course see http edumentse
139,Lobsters,perl,Perl,Perl 6 is biased towards mutators being really simple. That’s a good thing.,https://6guts.wordpress.com/2016/11/25/perl-6-is-biased-towards-mutators-being-really-simple-thats-a-good-thing/,perl biased towards mutators really simple good thing,c property syntax back oo basic messaging thinking accessors carry health warning mutate accessors bad perl instead fancy mutator use proxy like,meaning write post couple year somehow never quite got around today topic mutator method came irc channel long last conincided spare time write post finally heart matter seemingly simple question perl something like c property syntax writing complex setter first answer either wrong suboptimal get around yet actually concious choice plenty time ponder year compared many language feature put would soft feature use proxy kind container give callback fetch store sometimes reasonable answer right answer case leaving module space wrap proxy nicely supposes proxy already good starting point bunch time back oo basic reason question onesentence answer hinge nature object orientation operationally object consist bunch state known attribute perl field javac mechanism sending message consisting name argument object object act upon eye glazed second bullet point glad reading trying make point simply written mechanism calling method object point quote alan kay coined term object oriented sorry long ago coined term object topic get many people focus lesser idea big idea messaging year designed oo system primarily thinking object classbased language really meant class figure well thinking field go object last write method funnily enough look much like procedural design build c program modeling state various structs writing function work structs seen way oo look lot like procedural furthermore since oo often taught next step procedural style programming way thinking object extremely widespread little surprise lot oo code wild might well procedural code first place many socalled oo codebases full dtos data transfer object bundle state passed class name like dogmanager manager something meddles stuff case probably dog dto messaging thinking far cry oo originally conceived autonomous object inner state reacting message received outside world sending message object thinking found today note alive well actor model day people ask get better oo one suggestion take look actor since grasped message important thing oo however way design object changed dramatically first question ask behavior turn tell message sent consider invariant rule behavior must adhere finally grouping invariant state care identify object involved thus class approach method come first state come last usually discovered tdd way implementing method accessors carry health warning accessor method mean access mutate state held within particular attribute object something believe far hesitantly common object intended hide state behind set interesting operation moment underlying state model revealed outside world ability refactor diminished world outside object couple view becomes far tempting put operation belong inside object outside note getaccessor unidirectional coupling mutateaccessor implies bidirectional tighter coupling refactoring suffers mutable state one thing make program difficult understand reason functional programming suggests abstinence oo suggests stick pint two sideeffects least somewhat le obnoxious object present nice messagey view outside world keeping mutation state locked inside object idea value object immutable object take thing step object build new object incorporate change opposed mutating object place perl encourages various way notice clone let tweak data resulting object example furthermore perl support concurrent parallel programming value object immutable object great fit object mutate state state leakage really really end hurting using oo monitor oo actor turning existing class monitor method call synchronous enforce mutual exclusion actor method call asynchronous performed one time given object theory easy easy however object leak state complex operation object expressed single method contrast unless seatpassenger seatpassenger passenger seatassignto passenger method method assignto passenger die seat already taken passenger passenger passenger making class seat instance monitor jot good accessormutator case still gaping data race second approach safe mutate accessors bad perl best use rw attribute accessors procedural programming make easy create mutable record type also like absolutely clear shame procedural programming good oo design hard reason perl sub method rather calling everything method coining term static method subroutine sound procedural past ok write procedural code choose deal well organized procedural code sortofbutnotreallyoo code day oo badly used tends put moving part rather encapsulating put another way class serve one purpose many language double thing used real oo programming way define record type instead fancy mutator write method semantically interesting operation happen set attribute among various sideeffects give method appropriate informative name consumer class know please try hide complex operation potentially sideeffects like io behind something look like assignment analyzerfile foocsv lead reader code think simply setting property assignment operator perl make always mean numeric addition pick always mean string concatenation language design principle operator predictable semantics dynamic language statically know type operand kind predictability valuable sense language make easy provide custom mutator behavior essentially making easy overload assignment operator additional behavior saying always wrong simply inconsistent view operator perl way also reason perl allows definition custom operator thought building mutable parser would fun mean pretty masochistic way discourage operator overloaded unrelated surprising meaning use proxy really want control something behaves like assignment language binding c library bunch getset function work various member struct would good example language design difficult involves making manner choice universally right wrong answer tradeoff aim make choice form consistent whole far far easier said done usually dozen different way consistent choice dehuffmanize make longer writing complex mutators help keep predictably assignmentlike operator expected consistent semantics help mark distinction procedural object oriented design introducing friction paradigm confused discourages object design lead logic leak feature envy violation tell ask principle probably bunch oo buzzword tired remember help encourage oo design far easily refactorable concurrent object like like loading related
140,Lobsters,perl,Perl,git-pisect: A Parallel Version of git-bisect,https://hoelz.ro/blog/git-pisect,gitpisect parallel version gitbisect,gitpisect parallel version gitbisect recently gitpisect name bisect parallel work gitbisect work ok parallel bisect metric update try repository comment powered disqus,gitpisect parallel version gitbisectone favorite tool git tool suite gitbisect unfamiliar gitbisect sort magical program use quickly find commit introduced problem repository checking commits repository history tell whether state commits whatever testing good bad minimizes number time need using binary search algorithm futhermore automated test suite tell gitbisect run test behalf using git bisect run drive whole process proven useful year open source commercial workhowever sometimes bisect nt seem fast enough test suite take bisect take using bisect multicore machine shame bisect us one core others remain idleso ago talking coworker idea parallel version gitbisect implemented hack n tell recently attended call gitpisectwhat name really crappy portmanteau git parallel bisect course bisect parallel know know need finish one round test able decide next commit test right name crappy really something like gitpnsect parallel nsect reason become apparent shortly gitparallelregressionfinder gitpisect catchyhow work order understand pisect work first need fully understand regular ol bisect work feel comfortable gitbisect work feel free skip next sectionhow gitbisect work well let look typical range git commits head say pass head fails run git bisect start head git start testing halfway point head regression nt present current point know must introduced later commit pick new point halfway last known good commit first known bad commit like head fails narrow range even head test fails know either culprit final test file spare additional diagram let say indeed culprit next partok parallel bisect let say repository test suite take minute run safely parallelizable nt implement sort parallelization since machine day multiple core running test single core seems like waste time using machine four core use yes let look example multiple parallel test head four test parallel move smaller range commits consideration much quickly step demonstrated next one head instead taking four step ie four minute standard bisect take two metricsto test gitpisect picked random number let call n created git repository commits commits n passed commits n failed using following code include unistdh int main void sleep return exitcode ran gitbisect gitpisect repository latter job result test fourcore laptop gitbisect gitpisect gitpisect gitpisect gitpisect gitpisect idea gitpisect single job little faster gitbisect complaining update spent time looking reason behind turn picking slightly different test commits gitbisect mean given commits investigate gitpisect may pick commit gitbisect may pick vice versa mean depending commit range defective commit sometimes gitpisect end performing one fewer test sometimes gitbisect perform one fewer test also interesting fact sixteen job take longer eight job log log log log fairly close sometimes end needing number iteration find offending commit job mean overhead setup task schedulingwhat interesting even though take le time gitpisect actually perform work single job equivalent gitbisect performs n test eight job performs n test performing redundant work however since work happening parallel observe time relative n try idea sound interesting encourage head repository clone try people interested happy accept contribution improve code add feature thinking distributed version gitdisect could interesting well eager hear others find useful find issue either idea implementation published please enable javascript view comment powered disqus
141,Lobsters,perl,Perl,Poking around /usr/lib/git-core,http://kamalmarhubi.com/blog/2016/10/07/git-core/,poking around usrlibgitcore,line shell script,somewhat unknown bit git trivia git rebase implemented line shell script month ago fulldistro upgrade machine kept working updated surprised git add patch failed using git command fine even weirder plain git add worked message got mentioned perl pm file made bit curious find bit git outside git binary c knowing rebase shell script convention external subcommands git subcommand could strace git find script lived strace fe execve git rebase devnull grep gitrebase pid execve usrlibgitcoregitrebase gitrebase var ok usrlibgitcore place look many executables find usrlibgitcore type f executable wc l many shell script file usrlibgitcore grep shell script wc l let see one file usrlibgitcore grep shell script cut xargs basename column gitgui askpass gitfilterbranch gitsubmodule gitcitool gitmergeonefile gitstash gitgui gitmergeresolve gitrebase gitdifftool helper gitrequestpull gitbisect gitmergetool gitweb browse gitquiltimport gitmergeoctopus gitinstaweb gitsubtree surprising one git submodule git subtree seem important well gitstash seems like builtin facility course important builtin come gitcore think mostly reflection programming background never implement something complex shell quickly enough make sense stats type file find usrlibgitcore type f executable xargs file cut f sed interp sort uniq c elf lsb executable version sysv dynamically linked perl script text executable posix shell script ascii text executable posix shell script ascii text executable long line came curious git add patch perl got perl script file usrlibgitcore grep shell script cut xargs basename gitdifftool gitrelink gitadd interactive aha gitadd interactive sound likely course could checked much earlier strace fe execve git add p devnull grep add execve usrbingit git add p var pid execve usrlibgitcoregit git add interactive patch var pid execve usrlibgitcoregitadd interactive gitadd interactive patch var proof
143,Lobsters,perl,Perl,Perl 6: What Programming In The Future Is Like?,http://perl6.party/post/Perl-6-What-Programming-In-The-Future-Is-Like,perl programming future like,toronto perl monger http video available youtube,word brief overview perl multicore power today toronto perl monger graciously let present short lightning talk titled perl programming future like slide talk available http video available youtube link start talk sure watch whole thing many interesting lightning talk event enjoy video
144,Lobsters,perl,Perl,The curious case of the disappearing test,http://strangelyconsistent.org/blog/the-curious-case-of-the-disappearing-test,curious case disappearing test,got test comment vendethiel test started stash traversal tweak moved builtins code,sep carl recently learned valuable thing testing outline bondcon talk bondcon fictional anticonference running alongside yapc europe noncorporeal location unfortunately frozen time due procrastinationrelated mishap awaiting speaker tuits thought might blog u use rely tdd know test software model behavior etc side effect attaching travisci another aspect testing came light testing repository testing codeasartifact codeaseffect thanks travisci currently test lot linterlike thing care four space indentation trailing whitespace metainfo par correct json news using test suite linter also various bit consistency test turned useful definitely want future project often talk coupling something bad change component unrelated component b break coupled thing bad type coupling necessary example part point metainfo declare module project provides know easy forget update metainfo add new module hint well test doublechecks also consistency test make sure method certain resourceallocating thing also remembers corresponding resourcedeallocating thing yes still even memorymanaged language bug happened allocationsdeallocations mismatched test immediately discovered another location code needed fixing consistency test basically programmatic way test suite send message future smarter remembered b action immediately action wonder love could call managed coupling perhaps yes nonideal coupling consistency test make manageable best consistency check reason write post background bunch builtins sub operator also type type need installed setting initialization code someone actually look sub program actually refers builtin sub type every notice gotten new type language nt added builtins added manually sighed little eventually consistencytest craze caught got test test textbased ironic considering project hold thought following comment vendethiel realized could better textbased comparison perl type side could simply walk appropriate module namespaces find type general rule play consistency test valuable testing codeasartifact much better nothing corresponding way running program instead reading way invariably win anyway test started stash traversal tweak looked really nice world paused bit like good comedian maximal effect yes test contained excellent implementation finding type perl land exactly builtin initialization code needed never inconsistent first place tree walker moved builtins code test file vanished night job done forever story consistency check got good job disappeared one thing better managed coupling coupling
145,Lobsters,perl,Perl,Retrofitting privsep into dpb and pkg_add,https://www.openbsd.org/papers/eurobsdcon2016-privsep.pdf,retrofitting privsep dpb pkgadd,,obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj type xobject subtype form bbox formtype matrix resource r length filter flatedecode stream endstream endobj obj length filter flatedecode stream g f endstream endobj obj r length filter flatedecode stream endstream endobj obj type xobject subtype image width height bitspercomponent length colorspace devicergb filter dctdecode stream jfif jno h p qcv z sٶǂ
146,Lobsters,perl,Perl,Tattletale Variables,http://tinypig2.blogspot.com/2016/09/tattletale-variables.html,tattletale variable,,sometimes might faced huge program somewhere changing variable value something undesired use data dumper sub somelongfarawayfunction href shift pretend lot code nt want sift href banana bad value shoppinglist apple pear banana somelongfarawayfunction shoppinglist warn dumper shoppinglist output apple banana bad value pear nt know changed need find change variable tell changed package tattletalescalar use carp qw cluck require tie scalar isa qw tie stdscalar sub store warn tattletale variable set cluck package main use data dumper sub somelongfarawayfunction href shift pretend lot code nt want sift href banana bad value shoppinglist apple pear banana tmp shoppinglist banana save current value tie shoppinglist banana tattletalescalar shoppinglist banana tmp restore saved value somelongfarawayfunction shoppinglist warn dumper shoppinglist see stack every time variable changed tattletale variable set examplepl line examplepl line tattletalescalar store tattletalescalarscalar called examplepl line tattletale variable set bad value examplepl line examplepl line tattletalescalar store tattletalescalarscalar bad value called examplepl line main somelongfarawayfunction hash called examplepl line apple pear banana bad value
147,Lobsters,perl,Perl,I Botched a Perl 6 Release And Now a Robot Is Taking My Job,http://perl6.party/post/I-Botched-A-Perl-6-Release-And-Now-A-Robot-Is-Taking-My-Job,botched perl release robot taking job,part human make error rakudo release guide nqp release guide green go irc channel moarvm tag release man sky robocide fallout channel yapc europe git freenode part ii robot joel test channel web app spread build one step google compute engine api rakudo website exterminate human joel test conclusion,word automating release cycle deconfusion note regular perl user likely use ever heard rakudo star distribution includes rakudo perl compiler module doc post detail release compiler get released often rakudo star please nt think new release star use part human make error today third saturday month awesome day rakudo perl compiler see monthly release helm today chugged along rakudo release guide nqp release guide whose release part process well green go nearing end process first hint problem surfaced user joined irc channel tag seems missing nqp github repository zoffix created minute ago ensure got latest everything strange pull nqp checkout still nt see zoffix add tag git pull tag git fetch tag something like zoffix correct nt thanks zoffix ok usually need good question pulled fresh checkout ran full test suite sure everything passed luckily got answer rather quickly git log graph decorate originmaster master diverged tag commit parent nqp master story local nqp checkout bump version moarvm dependency tag release start full build test suite run lengthly process happening go github use online editor make minor tweak text nqp release guide test finish try push tag version bump get usual error saying online repo diverged instinctively run gr alias git pull rebase bring new change push work repo problem rebase nt move tag still referencing old commit clone repo everything appears work tag pull change existing repo nt get tag also git describe use midrelease nqpmoarvm version bump missing tag commit tag tagged parent master head point nt yet know breakage folk git pull existing branch continue release since test green finish relax departing fly man sky awesome robocide first hint wait second hint trouble showed latest commits appear eval bot supposed update head zoffix dd vmversion perlcompilerversion camelia rakudomoar output zoffix oh guess camelia nt build every commit right away create camelia unfamiliar working another bot create knew sure supposed update head every hour nt zoffix dd vmversion perlcompilerversion sourcebaby zoffix something wrong resolve caller sourcery nil none signature match thing str method capture c thing str method code code capture c block e line zoffix get bad feeling fallout nt wonder hell going long since shortly thereafter user channel turned saying ca nt build cuonglm hi anyone got trouble building rakudo release source got error pathspec match file know git sound like git history overriden short conversation person became obvious cloning building repo using release released may worked fine simply git pulling ran issue tag obvious issue needed fixing question first suggestion seemed scary mst always burn tag fire replace fixed one mst advantage may outweigh risk already user checkout broken tag asking help chat channel since sent release announcement email may many user experiencing checkout issue nt know first thing panic attempt find someone else fix mess zoffix jnthn coke timtoady around made booboo tag lot core devs europe bit timezone conflict yapc europe happening even chat time left device joined git freenode kind folk reaffirmed replacing tag might bad idea victory nt learn zoffix delete tag create new one happens people cloned branch incorrect tag ikke zoffix good question tag kind special expecting change git somewhat ignores changing tag remote ikke zoffix man git tag section retagging gitinfo zoffix gittag manpage available http jkgsgittaghtml zoffix ok think leave wait someone smarter figure fix p zoffix haha admit screwed use different name yup go p zoffix thanks help ikke yw tag mangling question user issue next answer make emergency point release corrected tag proceeded zoffix ok gon na cause sure changing tag fix everything wo nt introduce new problem making another nqp release correct tag seemed resolve issue box nt sure nt fallout happen current rakudo release made point release compiler well safe sync version nqp folk nt think rakudo release missing see nqp release jumping release guide midpoint proved challenging considering done release trying keep track step already done tired embarrassed sober occasion headed pub knowing last time make release like part ii robot heard joel test may noticed perl release process described currently fails item make build one step painfully aware issue thinking improving situation ever since first time stepped cut release follow channel may even seen show couple prototype web app let keep track releaseblocking bug ticket bot reminds upcoming release giving list new ticket since last release well changelog entry review zoffix reminder friend bear good news rakudo release happen day please update changelog anything worked known user stillopen new rt ticket since last release http git log output commits since last release http today incident indicated time stop messing around prototype put complete plan action spread two thing release guide contains may make seem like automating release tough nut crack reviewing bug ticket blocker populating changelog needed item ca nt make robot reliably thing yet largest part release process request human spread job throughout entire month release month create web app keep track reported ticket let release manager log mark ticket reviewed either release blocker nonblockers bonus prototype buggable bugqueue interfacing bot may seen also use app thing correctly app also serve nicer interface ticket people nt like original rt website principle apply changelog entry site keep track commits release manager reviewed added changelog keeping state around web app let release manager spend couple minute every day reviewing change bug instead cramming work single session release day build one step providing release manager keep step throughout month release day single thing issue release command bot zoffix release yey time starting release watch progress http tell abort time abort process since issue review process subtracted release instruction left grunt work entirely automated bot use google compute engine api fire dev box ssh clone repos update version run build run test tag stuff generate tarballs test tarballs scp tarballs rakudo website email release announcement update wikipedia page api human watch happen page feed websocket output proc async abort anything go wrong bot automatically abort test test suite fail bonus hoping make bot fire instance vms several different os add extra layer testing different environment granted least first several release safety stopmeasures verification step human ensure robot right thing abort process needed technical limitation bot correctly cutting release issued single command exterminate human automating complex build job eliminates mistake robot nt care rebuild scratch hundred time trying debug releaseblocker ok think nt care robot right activist audience tell wrong today mistake difficulty fixing could avoided release process entirely automated fewer thing manually fewer place mistake creep joel test amusing read lot truth simplicity suggest reevaluate point project fails test believe save lot headache conclusion today event great learning experience catalyst improvement human squishy fallable make mistake especially habit trying follow regular list instruction irregular situation prove difficult introduce mistake making bad situation worse nt yet try automate release process much know perl follow advice last time cut release job taken robot
148,Lobsters,perl,Perl,MooseX::Method::Signatures Deprecation Notice,http://search.cpan.org/~ether/MooseX-Method-Signatures-0.49/lib/MooseX/Method/Signatures.pm#DEPRECATION_NOTICE,moosex method signature deprecation notice,name version synopsis description deprecation notice moosex declare devel declare devel callparser function parameter keyword simple moops core signature signature syntax type constraint positional v named required v optional default constraint invocant label trait placeholder complex example caveat note fancy signature parse method signature source filter devel declare regular subroutine devel declare signature return value method seen role moosex method signature moose moosex declare moosex method signature warning moose role moosex method signature see also support rt bug tracker bugmoosexmethodsignatures rtcpanorg http listsperlorglistmoosehtml author contributor copyright licence cpanm cpan shell detailed cpan module installation guide,name moosex method signature deprecated method declaration type constraint source filter version version synopsis package foo use moose use moosex method signature method morning str name self say good morning name method hello str int age self say hello age year old method greet str name bool excited excited self say greeting name else self say hi name foo morning resi work foo hello world age foo greet resi excited well foo hello world age fortytwo nt foo hello world age neither foo morning wo nt work foo greet fail description provides proper method keyword like sub specifically making method validating argument moose type constraint deprecation notice warning moosex method signature moosex declare based devel declare giant bag crack originally implemented mst goal upsetting perl core developer much existence implemented proper keyword handling core version goal achieved module devel callparser function parameter keyword simple provide mechanism mangle perl syntax nt require hallucinogenic drug interpret error message produce want use declarative syntax new code please love kitten get recent perl look moops core signature instead signature syntax signature syntax heavily based perl however full perl signature syntax supported yet never type constraint method foo affe type checking method bar animal affe affe isa animal method baz animalhuman affe affe isa animal affe isa human positional v named method foo b c positional method bar b c named method baz b c combined required v optional method foo b c required method bar b c optional default method foo default constraint method foo foo even invocant method foo moo invocant called self required method bar self moo explicit method baz class moo invocant called class label method foo affe called obj foo affe value method bar apan affe called obj foo apan value trait method foo affe bar trait method foo affe bar trait currently supported trait coerce attempt coerce value provided nt satisfy requirement type constraint placeholder method foo bar baz sometimes nt care parameter called put bare sigil instead full variable name signature avoid extra lexical variable created complex example method foo someclass thing stuff str bar apan int baz invocant called thing must instance someclass implement stuff method bar positional required must string default apan baz named required must integer default need even greater caveat note module stable say entirely bug free notice odd behaviour message good could example please raise bug fancy signature parse method signature used parse signature however signature parsed nt supported module yet source filter module rely hairy black magic devel declare depend source filter nt try parse rewrite source code weird side effect devel declare effect compilation normal subroutine hairy magic module surprisingly stable regular subroutine devel declare yet change way sub behaves however signature module right provides basic signature extendable enough plugging moosex method signature signature quite possible return value type constraint return value declared using method foo int x str return bool however feature work scalar return value still considered experimental method seen role requires processing moosex method signature method moose keywords done runtime happen role require method declared cause moose complain loudly abort program example following work file caninepm package canine use moose use moosex method signature watchdog method bark print woof n file watchdogpm package watchdog use moose role requires bark assert evaluated method processed sub warnintruder self shift intruder shift self bark intruder gone workaround problem use method defined take previous example canine could reworked thus package canine use moose use moosex method signature method bark print woof n watchdog better solution use moosex declare instead plain moosex method signature defers application role end class definition example would becomes file caninepm use moosex declare class canine watchdog method bark print woof n file watchdogpm use moosex declare role watchdog requires bark method warnintruder intruder self bark intruder gone subroutine redefined warning composing moose role class us moosex method signature may get subroutine redefined warning happens role class define methodsubroutine name way role work one defined class take precedence eliminate warning make sure declaration happens methodsubroutine declaration may name methodsubroutine within role see also support bug may submitted rt bug tracker bugmoosexmethodsignatures rtcpanorg also mailing list available user distribution http listsperlorglistmoosehtml also irc channel available user distribution irc ircperlorg moose also usually active irc ether ircperlorg author florian ragwitz rafl debianorg contributor karen etheridge ether cpanorg ash berlin ash cpanorg daniel ruoso daniel ruosocom justin hunter justindhunter gmailcom nicholas perez nperez cpanorg dagfinn ilmari mannsåker ilmari ilmariorg rhesa rozendaal rhesa cpanorg yanick champoux yanick babyldyndnsorg cory watson gphat cpanorg kent fredric kentfredric gmailcom lukas mai lmai webde matt kraai kraai ftbfsorg jonathan scott duff duff poboxcom jesse luehrs doy toztnet hakim cassimally osfameron cpanorg dave rolsky autarch urthorg ricardo signes rjbs cpanorg sebastian willert willert cpanorg steffen schwigon renormalistnet copyright licence software copyright c florian ragwitz free software redistribute andor modify term perl programming language system install moosex method signature simply copy paste either command terminal cpanm cpanm moosex method signature cpan shell perl mcpan e shell install moosex method signature information module installation please visit detailed cpan module installation guide
150,Lobsters,perl,Perl,The Awesome Errors of Perl 6,http://perl6.party/post/The-Awesome-Errors-of-Perl-6,awesome error perl,totally awesome error reporting capability mst basic nomnomnomnom mean levestein levenshtein distance go seq never go back type sequence operator method array nt attribute looking deranged rose name would code sweet heredoc theredoc everywheredoc wo nt someone think reader twigil well colour errpressed phaser exceptional failure routine conclusion rust,word show explanation perl error following tech stuff probably know folk rust land working totally awesome error reporting capability since perl also known awesome error mst inquired example show rustaceans unfortunately drew blank error something try avoid rarely read full figured hunt cool example awesome error write could bash head keyboard paste output quite boring read talk tricky error might obvious beginner fix let head bashing begin basic code error say hello world say local time datetimenow sorry error compiling two term row runaway multiline quote starting line maybe say time datetimenow expecting infix infix stopper postfix statement end statement modifier statement modifier loop first line missing closing quote string everything opening quote second line still considered part string supposedly closing quote found perl see word local identifies term since two term row allowed perl compiler throw error offering suggestion expecting detects string suggests check nt forget closing quote line sorry part nt mean running canadian version compiler rather error compiletime compared runtime error nomnomnomnom amusing error subroutine return thing call use loop iterate value sub thing thing say current stuff sorry function thing need parens avoid gobbling block eol missing block apparently claimed thing eol perl let omit parenthesis calling subroutine error talk gobbling block happens block hoping give loop actually passed subroutine argument instead second error output corroborates saying loop missing block make suggestion taken thing subroutine first error tell u fix issue function thing need parens loop need thing say current stuff however subroutine actually expecting block passed parenthesis would necessary two code block side side would result two term row error seen perl know pas first block subroutine use second block body loop sub thing code code thing say current stuff mean levestein cool feature tell wrong also point might meant sub levenshtein levestein sorry error compiling undeclared routine levestein used line mean levenshtein perl encounter name nt recognize computes levenshtein distance thing know try offer useful suggestion instance encountered invocation subroutine nt know noticed similar subroutine offered alternative staring screen trying figure made typo feature nt consider everything moon time triggered however capitalize sub name levenshtein would longer get suggestion thing start capital letter compiler figure likely type name subroutine name check instead class levenshtein lvnshteinnew sorry error compiling undeclared name lvnshtein used line mean levenshtein go seq never go back let say make short sequence fibonacci number print like print time square member happens seq seq join say seqmap join say seq already iterated value consumed might solve adding cache usage seq assigning seq array block unit line ouch runtime error happening seq type get sequence operator nt keep stuff around iterate time give value discard iterated entire seq done attempting iterate rakudo runtime cry complains ca nt error message offer two possible solution either use cache method obtain list iterate seq cache seq join say seqmap join say use array get go seq seq join say seqmap join say even though storing seq array wo nt get reified actually needed say output nt attribute looking imagine class private attribute got method regex match using value attribute part class prefix foo method hasprefix text text prefix newhasprefix foobar say sorry error compiling attribute prefix available inside regex since regexes method cursor consider storing attribute lexical using regex text expecting infix stopper oops happened useful understand far parser concerned perl actually braided several language perl quote regex language part braiding stuff like say foo bar meow ber output foo barmeow ber despite interpolated code block using quote delimit string within quote original string conflict however mechanism present u limitation regexes looked attribute belong cursor object responsible regex avoid error simply use temporary variable store prefix suggested error use given block class prefix foo method hasprefix text given prefix text newhasprefix foobar say deranged ever tried access element list range foo bar ber say effective index range inf block unit line perl index item end list use funky syntax actually closure take argument number element list subtracts return value used actual index could use sub total total instead particularly bored error index end value see error message since index negative receive error also tell u index must positive infinity index list contains returning looked rose name would code sweet active user perl sister language perl may sometimes write perl code say foo bar sorry error compiling unsupported use concatenate string perl please use say foo bar attempting use perl concatenation operator concatenate two string error mechanism smart enough detect usage recommend use correct operator instead case detection many another example detecting accidental use perl diamond operator several suggestion programmer may meant sorry error compiling unsupported use perl please use line read input represent null string represent empty list heredoc theredoc everywheredoc evil error nothing awesome figured mention since easy debug know quite annoying nt error evil enough may already improved reading far enough future writing try spot problem read error bottom first one wrote familiar code stuff qq toend blah blah blah end say thing say moar thing sub foo wtf say oh sorry error compiling variable wtf declared sub foo wtf huh cry undeclared variable pointing signature subroutine course wo nt declared sort ecrack compiler smoking nt spot problem spurious semicolon closing end heredoc heredoc end closing delimiter appears line far compiler concerned seen delimiter end continues parsing still parsing heredoc qq heredoc let interpolate variable parser get wtf variable signature idea signature actual code random text cry variable undeclared wo nt someone think reader great error prevents writing horrid code sub asay asay sorry error compiling already used nonplaceholder surrounding sub block confuse reader suddenly declare bit background use twigil variable create implicit signature make possible use variable nested block syntax actually creates variable without twigil thing signature sub code also outer scope supposedly print first using twigil create another scope one contains argument sub complete brainscrew avoid rename variable something nt clash thai ความสงบ peace sub ความสงบsay variable output peace variable well colour errpressed terminal support compiler emit ansi code colourize output bit say meow nice spiffy say capturing output compiler display elsewhere may get ansi code like awful luckily easy disable colour set rakudoerrorcolor environmental variable set within program early enough put somewhere start program use begin phaser set soon assignment compiled begin env rakudoerrorcolor say meow exceptional failure perl special nt explode try use value even defuse entirely using boolean context produce failure calling fail subroutine perl us core whenever piece code define prefix operator calculating circumference object given radius radius negative call fail returning failure object sub prefix 𝐫 𝐫 fail object warp universe new one τ 𝐫 say calculating circumference mystery object cₘ say calculating circumference earth cₑ say calculating circumference sun cₛ say circumference largest object max cₘ cₑ cₛ metre output calculating circumference mystery object calculating circumference earth calculating circumference sun object warp universe new one sub prefix line block unit line actually thrown block unit line calculating circumference negative radius line regular exception code would die instead output see continue calculate circumference earth sun get last line try use failure cₘ variable one argument max routine since asking actual value failure explodes give u nice backtrace error message includes point failure blew line received line well came line pretty sweet conclusion useful descriptive error becoming industry standard perl rust language leading effort error must go beyond merely telling line number look point piece code wrote make guess meant referencing code even originate third party library using perl error display piece code containing error use algorithm offer valid suggestion mistyped subroutine name used language perl detect accent offer correct way pronounce code perl instead immediately blowing perl offer mechanism propagate error right code programmer writing perl awesome error
151,Lobsters,perl,Perl,IRC::Client: Perl 6 Multi-Server IRC (or Awesome Async Interfaces with Perl 6),http://blogs.perl.org/users/zoffix_znet/2016/07/ircclient-perl-6-multi-server-irc-or-awesome-async-interfaces-with-perl-6.html,irc client perl multiserver irc awesome async interface perl,read article irc client module basic terminal ansicolor getting smarter passing buck multify thing typeconstrain eventful day keep em commin nt wait bashorg mojo useragent channel watch mouth shadowcat pastebin http callables pastebin shadowcat spread like butter send way conclusion,read article wrote first perl new year irc party christmas work included releasing irc client module given virginity language blood alcohol level appropriate holiday season module ended sufficiently craptastic recently needed tool perl bug queue work decided lock weekend redesign rewrite module scratch multiple people bugged past month figured also write tutorial use apology master procrastinator irc interest hope tutorial prove useful general example async nonblocking interface perl basic create irc bot instantiate irc client object giving basic info call run method implement functionality need class method name matching event want listen hand via plugins attribute irc event occurs passed plugins order specify stopping plugin claim handled event simple irc bot responds addressed inchannel notice private message sent response uppercased original message bot received use irc client run irc clientnew nick mahbot host ircfreenodenet channel debug plugins class method irctome textuc bot look like running zoffix mahbot mahbot zoffix nick host channel nick bot server connect channel join debug control much debugging output display set value sparse debug output see happening tip install optional terminal ansicolor module make debug output purty plugins attribute hand anonymous class multiple plugins shove order want receive event plugins plugfirstnew plugsecondnew conf class plugin class uppercasing bot single method listens irctome event triggered whenever bot addressed inchannel sent private message notice receives single argument one object irc client message role stick topical variable save bit typing reply event returning value method original text contained inside text attribute message object call uc method uppercase content reply awesome uppercasing bot useful air conditioner polar expedition let teach trick getting smarter call new plugin trickster respond command give local time convert temperature fahrenheit celsius code use irc client class trickster method irctome given text time datetimenow temp temp unit fc unit eq f temp default temp huh run irc clientnew nick mahbot host ircfreenodenet channel debug plugins trickster zoffix mahbot time mahbot zoffix zoffix mahbot temp mahbot zoffix zoffix mahbot temp mahbot zoffix zoffix mahbot mahbot zoffix huh code trivial pas given text couple regexes contains word time return current time contains word temp appropriate math based whether given number postfixed f c match happen end returning inquisitive huh obvious problem new improved plugin bot longer love survive heartache doubt plugin teach bot love trickster consumes irctome event even nt recognize command handle let fix passing buck special value returned event handler signal handle event propagated plugins event handler value provided next attribute offered irc client plugin role plugin obtain attribute role automatically exported use irc client let look code utilizing special value note since next attribute ca nt look attribute type object need go extra step instantiate plugin class giving plugins use irc client class trickster irc client plugin method irctome given text time datetimenow temp temp unit fc unit eq f temp default temp next class bff irc client plugin method irctome text next run irc clientnew nick mahbot host ircfreenodenet channel debug plugins tricksternew bffnew zoffix mahbot time mahbot zoffix zoffix mahbot temp mahbot zoffix zoffix mahbot temp mahbot zoffix zoffix mahbot mahbot zoffix two plugins subscribe irctome event plugins attribute receives trickster plugin first event handler run first received text match either trickster regexes return next method signal client object go hunting handler get bff irctome handler reply input contains heart preemptively return next bot got sunny disposition back cost quite bit extra typing multify thing perl support multidispatch well type constraint signature top smartmatch irc client message object text attribute us value attribute combine three feature end ridiculously concise code use irc client class trickster multi method irctome time datetimenow multi method irctome temp temp unit fc unit eq f temp temp class bff method irctome run irc clientnew nick mahbot host ircfreenodenet channel debug plugins trickster bff zoffix mahbot time mahbot zoffix zoffix mahbot temp mahbot zoffix zoffix mahbot temp mahbot zoffix zoffix mahbot mahbot zoffix outside signature longer need message object use anonymous parameter place typeconstrain parameter regex match method called text message match regex since method called failed match longer mess around whole next business compose role plugins body method single statement produce response value event temperature converter use ternary operator select formula use conversion depending unit requested yes unit temp capture created signature type constraint match available method body eventful day along standard named numerical irc protocol event irc client offer convenience event one already seen irctome event event layered one irc event trigger several irc client event example someone address bot channel following chain event fired ircaddressed irctome ircprivmsgchannel ircprivmsg ircall event ordered narrowest widest ircaddressed triggered inchannel bot addressed irctome also triggered via notice private message wider ircprivmsgchannel includes channel message wider still ircprivmsg also includes private message bot chain end widest event ircall plugin event handler return value next later event event chain wo nt fired plugins later plugin chain wo nt tried reason event tried plugins attempting handle wider event setting debug attribute level higher get emitted event debug output bot attempting handle unknown command blarg processing command time handled irctome event handler defined irc client event irc prefix freely define auxiliary method plugin without worrying conflicting event handler speaking emitting thing keep em commin responding command sweet many bot likely want generate output volition example let write bot annoy u whenever unread github notification use irc client use http tinyish use json fast class github notification irc client plugin str token env githubtoken ua http tinyishnew constant apiurl http apigithubcomnotifications method ircconnected start react whenever self notificationgrep num ircsend zoffix text num unread notification notice method notification supply loop re uaget apiurl header authorization token token re success emit grep unread fromjson re content sleep re header xpollinterval run irc clientnew nick mahbot host ircfreenodenet channel debug plugins github notificationsnew mahbot zoffix unread notification mahbot zoffix unread notification create github notification class irc client plugin role role give u irc attribute irc client object use send message u irc aside ircconnected method class like public token attribute github api token private ua attribute keep http user agent object around private notification method action happens inside notification create supply emit number unread notification using http tinyish object access github api endpoint line par json returned successful request greps message list item unread property set true prefix operator convert list int total item found emit supply ircconnected event handler get triggered successfully connect irc server start event loop reacts whenever receive current unread message count supply given notification method since interested case unread message also pop grep supply filter case without message yes could avoid emitting first place showing perl unread message simply call irc client send method asking send u irc notice total number unread message pure awesomeness nt wait covered case either asynchronous supply value sent irc reply command right away uncommon bot command take time execute case nt want bot lock command thing thanks perl excellent concurrency primitive nt event handler return promise client object use result reply kept mean order make blocking event handler nonblocking wrap body start block could simpler example let write bot respond bash command bot fetch bashorg parse quote html keep cache command triggered bot hand one quote repeating fetching cache run particular nt want bot block retrieving parsing web page full code use irc client use mojo useragent class bash constant bashurl http bashorg constant cache channelnew ua mojo useragentnew multi method irctome bash start cachepoll self fetchquotes cachepoll method fetchquotes cachesend uaget bashurl resdomfind qt eachâ alltextlinesjoin run irc clientnew nick mahbot host ircfreenodenet channel debug plugins bashnew zoffix mahbot bash mahbot zoffix time reminds manning installed box install routine said something like join hundred people internet page fetching need chose perl mojo useragent since html parser builtin adverb indicates compiler want load perl perl module since multithreading use channel threadsafe queue caching purpose subscribe irctome event text contains word bash event handler triggered pop new thread using start keyword poll cache use cached value one otherwise logic move onto block call fetchquotes private method completes poll cache getting fresh quote said done quote result promise return event handler fetchquotes method fire mojo useragent object fetch random quote page website find html element class qt paragraph quote use hyper method call convert paragraph text final list fed cache channel via loop go nonblockingly connected bot cesspit irc world speaking thing may want filter watch mouth bot would get banned rather quickly spewed enormous amount output channel obvious solution include logic plugins would use pastebin output large however pretty impractical add thing every plugin write luckily irc client support filter method issue notice privmsg irc command irc client pas output class given via filter attribute mean set filter automatically pastebin large output regardless plugin come reuse bashorg quote bot except time pastebin large quote shadowcat pastebin let look code use irc client use pastebin shadowcat use mojo useragent class bash constant bashurl http bashorg constant cache channelnew ua mojo useragentnew multi method irctome bash start cachepoll self fetchquotes cachepoll method fetchquotes cachesend uaget bashurl resdomfind qt eachâ alltext run irc clientnew nick mahbot host ircfreenodenet channel zofbot debug plugins bashnew filter text line char pastebin shadowcatnewpaste textlinesjoin n zoffix mahbot bash mahbot zoffix intuit hmm maybe sumtime next week go outside zoffix mahbot bash mahbot zoffix http code filtering work small enough easy last line program filter attribute take list callables passing pointy block signature constraint text line character long filter run criterion met inside block simply use pastebin shadowcat module throw output onto pastebin paste method return url newlycreated paste filter replace original content pretty awesome spread like butter past used irc client tool whenever someone asked place bot server procedure simple copy code another directory change config done almost made sense new server would mean new bot different channel different nickname perl irc client tried reimagine thing bit server merely another identifier message along channel nickname mean connecting bot multiple server simple adding new server configuration via server attribute use irc client class bff method irctome run irc clientnew debug plugins bff nick mahbot channel zofbot server freenode host ircfreenodenet local nick channel zofbot host localhost freenode server zoffixw mahbot mahbot zoffixw local server zoffixw zoffixw first plugin remains oblivious run multiple server reply get redirected correct server irc client still executes method handler threadsafe way irc client constructor added server attribute take hash key hash server label value serverspecific configuration override global setting freenode server get nick channel nick channel attribute give irc client local server override value debug output server lables printed indicate server event applies simply telling bot connect another server made multiserver without making change plugins want talk specific server send way bot run client object change value server attribute irc client server object stringify label server represent get either server attribute message object server hash attribute client object client object method send join take optional server attribute control server message sent default value mean send every server bot connects two server join several channel whenever see channel message forward channel sends private message user zoffix server designated label local use irc client class messenger irc client plugin method ircprivmsgchannel e ircserversvalues server serverchannels channel next server eq eserver channel eq echannel ircsend server channel text enick eserverhost echannel say etext ircsend zoffix text spread message server local run irc clientnew debug plugins messengernew nick mahbot channel zofbot server freenode host ircfreenodenet local nick channel zofbot host localhost freenode server zofbot zoffixw yey local server zofbot zoffixw ircfreenodenet zofbot say yey local server zoffixw ircfreenodenet zofbot say yey local serverzoffixw private message queue spread message subscribe ircprivmsgchannel event triggered loop server server loop connected channel use ircsend method send message particular channel server unless server channel message originated message call nick channel serverhost method message object identify sender origin message conclusion perl offer powerful concurrency primitive dispatch method introspection let build awesome nonblocking eventbased interface one irc client let use irc network ready use
152,Lobsters,perl,Perl,Interview With Larry Wall,http://m.slashdot.org/story/313671,interview larry wall,desktop site,look like browser nt support javascript disabled please use desktop site instead
153,Lobsters,perl,Perl,The Greek Clock,http://blog.plover.com/2016/06/22#Greek-clock,greek clock,greek clock correction formula article category calendar permanent link,greek clock former time day divided twentyfour hour equal length day hour onetwelfth time sunrise sunset night onetwelfth time sunset sunrise daytime hour equal nighttime hour equal daytime hour equal nighttime hour except equinox equator summer day hour longer night hour shorter winter vice versa year ago suggested part perl quiz week people write greektime program printed time according clock divided hour way course spend lot time effort downloading installing cpan astronomical module calculate time sunrise sunset reading manual whole lot stuff content approximate time use delightful shortcut first let establish problem going take conventional time label forth adjust half take time sunrise sunset half go sunset sunrise stretched squeezed new system longer mean second midnight rather exactly way sunset sunrise introduce new daily calendar following label midnight sunrise noon sunset midnight assume noon sun directly overhead occurs midnight occurs thing pretty close truth anyway although screwed oddity time zone like equinox sun rise around set around ignoring time zone like live edge time zone especially large one like u central time local civil noon occur solar noon calculation require adjustment equinox normal calendar corresponds greek one day night exactly twelve standard hour long day night following day winter sun rise later set earlier summer rise earlier set later let take label time sunrise greek clock year round similarly time sunset greek clock year round convention turn rather easy calculate approximate time sunrise day year need two magic number number number day elapsed since vernal equinox around march september live southern hemisphere number bit trickier return shortly two number plug formula text sunrise text sin dover tricky part magic number depends latitude equator probably calculate directly latitude happen know latitude know latitude philadelphia conveniently located almost exactly n failed observational astronomy class twice nt know necessary calculation actually occurs text min time l work l absolute latitude equator l give philadelphia give min cdot co approx min right however another trick use even nt know latitude know time sunset summer solstice calculate quite easily text sunset summer solstice text really help october might summer solstice today look window evening notice sun seems going plug time formula remember happened yesterday wait tomorrow time sunset hardly change time year second per day could look front page daily newspaper also tell time sunset sun went around today really daylight saving time get minute happily agrees got earlier different method time sunrise philadelphia day vernal equinox text sunrise text min cdot sin dover today june count finger day vernal equinox around march notice formula involves sin approx sin fracpi onefourth today quarter year vernal equinox formula say sunrise ought daylight saving time local civil time time year night standard hour long greek nighttime hour standard hour long minute right daylight time standard minute past sundown greek nighttime hour greek time close pm another standard hour another greek hour elapsed greek midnight coincides standard midnight local civil time daylight saving code greektime run find current greek time hereby place program public domain usrbinperl calculate local time fictitious greek clock http blogplovercomcalendargreekclockhtml author mark jason dominus mjd plovercom program public domain pi use getopt std opt getopts l opt usage opt l radian opt l elsif opt hr mn split opt hr mn else usage time time dayssinceequinox time daysperyear sunriseadj sin dayssinceequinox daysperyear pi lengthofdaytime sunriseadj lengthofnighttime sunriseadj timeofsunrise sunriseadj timeofsunset sunriseadj gh gm timetogreek time h localtime time printf standard h printf greek gh gm sub timetogreek epochtime shift timeofday h dst localtime epochtime timeofday h dst greek hour min timeofday timeofsunrise change early morning night timeofday timeofday timeofsunset day diff timeofday timeofsunrise greek diff lengthofdaytime else night diff timeofday timeofsunset greek diff lengthofnighttime hour int greek min int greek hour hour min sub radian deg return deg pi sub usage print stderr usage greektime l latitude summersolsticesunset one latitude sunset time must given latitude degree north equator negative southern hemisphere sunset time given form local standard time southern hemisphere use winter solstice exit article work since january missed deadline consecutive solstice time charm addendum sean santos correction formula article category calendar permanent link
154,Lobsters,perl,Perl,Combining Character Caveats,http://hoelz.ro/blog/combining-character-caveats,combining character caveat,combining character caveat fluent forever nobody perfect ive previous post comprehensive data set nt stress normalization unicode normalization elixir language know case well pdf think grapheme cyrillic character nt precomposed form accent comment powered disqus,combining character caveatsi currently following fluent forever methodology learning russian method suggests start learning vocabulary learn common concrete word easily associate picture feeling next step build vocabulary include common word target language recently completed foundation word time move next one small problem nobody perfect ive russian along slavic brother distinction reflected verb known aspect touched upon previous post nearly verb counterpart one perfective indicates action completed imperfective indicates action progress happens habitually example apology speak russian screwed language ðµð ate cheese every day lived amsterdam using imperfective eat versus ate hamburger hour ago using perfective eat problem starter list word nt indicate aspect verb belonged include counterpart verbmy list next word contains verb may counterpart verb already anki deck example eat imperfective deck list partner crime would odd include separate cardso ideally like associate verb anki deck counterpart prune verb already know along counterpart next listto make possible needed find mapping perfectiveimperfective counterpart russian fortunately wiktionary comprehensive data set russian verb little web scraping magic business nt stress outthe mapping created based wiktionary data looked like imperfective look closely see acute accent mark really part standard russian orthography see russian stress unpredictable make possible people like learn language native speaker understand pronounce new word properly acute accent often used thing like dictionary mark syllable upon stress fall anki deck however nt marker sound file tell syllable stress order compare two set data needed strip mark firstsince mark added via combining acute accent character solution seemed pretty straightforward looked like verb subst combiningmark g strip combining mark character verb seems simple right actually executed code got original string back give normalizationto understand code nt work helpful understand unicode normalization form perl implement string operation normalization form way canonicalizing unicode string make comparison collation easier see work practice let look two string although look paste application inspect unicode like echo xxd see actually two different string first latin small letter acute latter latin small letter combining acute accent many programming language compare two string show unequal unequal think codepointbycodepoint basis solution unicode normalization allows u translate unicode string canonical form compare equally nfc normalization example combining character condensed precomposed form available string end latin small letter acute programming language require normalize unicode string sort comparison operation perl one language elixir language know case well exception say c latin small letter acute eq ac combining acute accent truethe reason work perl unicode string perl normalized called nfg normal form grapheme read jonathan worthington explanation nfg implementation pdf nutshell nfg mean element string single character way human think character think write single character paperthink graphemesmy problem thinking codepoint level rather grapheme level perl look friend single character combining mark anymore would run issue language used nfc normalization cyrillic character nt precomposed form accent way fixed use strtrans method map one set character another verb trans alternatively could used strnfd method get nfd object back filtered combining acute accent codepoint converting back str felt lowlevel would nice nfd related type supported strlike operation subst futureanother alternative suggested teatime irc would use code adverb verb subst rx code combiningmark g tell regex engine think term codepoints grapheme unfortunately yet implementedafter made change got result wanted ended beautiful list word add anki deck success hope reading educated unicode little bit hopefully save time working unicode future whether perl favorite language published please enable javascript view comment powered disqus
155,Lobsters,perl,Perl,"""Anguish"": Invisible Programming Language and Invisible Data Theft",http://blogs.perl.org/users/zoffix_znet/2016/05/anguish-invisible-programming-language-and-invisible-data-theft.html,anguish invisible programming language invisible data theft,part invisible programming language ook whitespace code brainf k interpreter inline brainf k get full distro repo method bf interpreter junction part ii invisible data theft exporting malicious operator wait minute git commits conclusion,disclaimer data theft serious crime many jurisdiction author condone encourage anyone break law information provided educational purpose part anguish invisible programming language may familiar funky esoteric language like ook even whitespace fun neat decided dial crazy notch make completely invisible programming language named anguish based quick googling may lone wolf depth insanity article describe language go implementation interpreter talk security implication come invisible code code anguish program print hello world ï another one read string print back ï ï ï code fullfeatured web browser ok last one lied first two real program unicode support decent completely invisible human eye opposed say space tab transparent anguish based brainf k bf except instead using visible character us invisible one also mean easily convert bf program anguish one using simple oneliner perl c pi e tr x x x x x feff x x x character mapping chose bf operator left anguish version right word joiner cf zero width space cf function application cf invisible time cf invisible separator cf ï ufeff zero width nobreak space cf zero width nonjoiner cf zero width joiner cf invisible unicode character choice le arbitrary however one chose actually abused perl term operator show part ii interpreter interpreter chose awesome perl programming language merely copied gut inline brainf k perl module changed look anguish character get full distro repo replicating main code unit module acme anguish use term termios sub anguish str code export checkmatchingloop code savedterm try savedterm term termiosnew getattr given term termiosnew getattr makeraw setattr drain leave try savedtermsetattr drain code codenfcmap chr grep eq xfeff cursor stack buf new loop given code cursor stackappend stackelems fail negative cell pointern stack stack stack chrprint xfeff stack ingetcord cursor next stack loop state level level code cursor eq level code cursor eq last unless level cursor unless stack cursor next loop state level cursor level code cursor eq level code cursor eq last unless level last cursor codeelems sub checkmatchingloop code level codenfcmap chr level eq level eq fail qq closing found without matching n level last fail unmatched level line simply check loop matching line set terminal nonbuffering mode read input character line prepare code stack pointer loop line simply iterates anguish code thing according operator processed one thing note line well line notice curious use nfc method convert input code normal form composed perl advanced unicode support normal use character attempting go would made grapheme string codepoints abusing would get merged together loop would happen grep line used regex bf interpreter avoid creation grapheme used eq junction instead wrap anguish language intent go try write fullfeatured browser rest u let abuse invisible unicode char steal data part ii invisible data theft beauty invisible anguish character used nt spacey formatting character mean perl abuse create invisible term operator innocuous version may look rather cute sub infix b say output placed invisible separator character produced effect sub infix b say consider expression x silently add code expression steal assigned value create loose invisible prefix operator pop start line let observe result sub prefix tighter infix say x output visible version program placement invisible char included sub prefix tighter infix say x let get evil exporting malicious operator plop data thieving code middle important piece software someone likely notice instead insert export auxiliary module one likely start poking also disguise code clever comment make look rather innocent unit module somethinginnocent code debugging helper sub prefix tighter infix export spurt debugtxt append code debug helper print debugtxt file feel like something could easily slip using character name operator alright set steal data important piece code use somethinginnocent creditcard pretend coming db earlier example inserted character right code malicious operator get automatically imported somethinginnocent code run operator get called value creditcard dump secret file debugtxt data theft completed wait minute git commits true change made show changed line commit change involving invisible character depending tooling used might look like ditched whitespace end line certainly something pay much attention reviewing commit command line tool revealed invisible character unicode number adding bunch invisible character text look like github conclusion anguish language true computer masochist would love question whether program actually exists however language point u reality existence unicode character make sense one domain outright dangerous another already avoid abusable character domain name time apply practice domain programming language
156,Lobsters,perl,Perl,Our 2016 Donations to Open Source – park.io,http://blog.park.io/articles/2016-donations-to-open-source,donation open source parkio,pledged contribute domain donation domain angulario angularjs open source project perlio perl larry wall duckduckgo perlio perl foundation gnomeio gnome linus torvalds gnomeio,parkio support open source community use contribute open source code pledged contribute domain starting donation domain angulario angularjs open source project perlio perl programming language created larry wall referred tape hold internet used everywhere power popular website like search engine duckduckgo built first web application happy donate domain perlio perl foundation gnomeio gnome awesome desktop environment composed entirely free opensource software even used linus torvalds creator linux happy donate domain gnomeio also provided discounted rate couple open source project looking forward donating domain future
157,Lobsters,perl,Perl,"Wow, Perl 6!",http://tpm2016.zoffix.com/#/,wow perl,wow perl question policy mind unicode http lazy list us lazy list lazy list lazy list molding subset custom operator multidispatch subset multidispatch multidispatch multidispatch custom term operator custom term operator custom term operator custom term operator doc custom term operator custom term operator custom term operator lexically scoped custom term operator color operator hyperspace multicore processing touch button hyper operator explained hyper operator hyper operator hyper operator element bonus multiple thread hyper seqs hyper seqs hyper seqs autothreaded junction logical superposition value autothreaded junction autothreaded junction autothreaded junction promise promise promise supply supply channel grammar grammar grammar grammar useful module whatever code meta operator object model set bag mix whatever code whatever code whatever code whatever code psst hyperwhatever meta operator meta operator perl object model perl object model perl object model perl object model mop meta object protocol mop meta object protocol mop meta object protocol set bag mix immutable set bag mix mutable set bag mix set bag mix set bag mix doc polyglot nativecall nativecall btw safety tip nativecall nativecall nativecall app gptrixie use bunch language simple thing hacking perl compiler crazy sound mean simple thing hacking perl compiler perl written perl parsing bonus slide failure concurrent code failure concurrent code rat rat rat nt much useful object builtin profiler,wow perl pete zoffix znet evstratov presentation available question policy understand said talking simply raise hand presentation available mind unicode perl let use fancypants unicode term operator see presentation texas variant use ascii character rather use see http find lazy list us lazy list let something crazy like create infinite list toinfinityandbeyond say toinfinityandbeyond output lazy list something useful working giant file say last say code took init second run output foo bar ber code took second run lazy list something useful working giant file say say code took init second run output foo bar ber code took second run molding subset custom operator multidispatch subset subset type let restrict value accepts subset bigprime int isprime sub main bigprime num say nicelooking prime number got usage num nicelooking prime number got usage num multidispatch multiple sub method name different parameter subset prime int isprime subset bigprime prime subset smallprime prime multi main bigprime num say prime number nice big multi main smallprime num say puny prime number multi main num say gim prime gim prime puny prime number prime number nice big multidispatch multiple sub method name different parameter class number multi method id numeric num say num number multi method id num say num something else numbersnewid π numbersnewid blah output number blah something else multidispatch extend method functionality class number multi method id numeric num say num number multi method id num say num something else class smarternumbers number multi method id numeric num π say mmmm yummy pie smarternumbersnewid smarternumbersnewid π smarternumbersnewid blah output number mmmm yummy pie blah something else custom term operator custom term operator sub infix b pick say coke pepsi output pepsi operator category infix prefix postfix circumfix postcircumfix also use term term custom term operator sub prefix el elssum say output nt seem work well custom term operator sub prefix el looser infix elssum say output use looser tighter change precedence default precedence operator position see doc change associativity assoc trait custom term operator example sub term ξ pick sub postcircumfix inside rw inside hash foo bar meow moo ξ ξ say hash output foo meow custom term operator overriding existing operator sub infix int int b b say output custom term operator nt worry effect lexically scoped custom term operator overriding existing operator class thingamagig value multi infix thingamagig str b avalue b thing thingamagignew value thingamagig say foo bar say thing bar say bar thing output foobar thingamagigbar barthingamagig see color operator module color distribution example hyperspace multicore processing touch button punch chewie hyper operator look like â â might see explained example like â â â â â â hyper operator wo nt multithreaded instead variant talk one fooâ bar hyper operator let say want uppercase string array break array sublists element one two three four five six seven eight nine say amap uc rotor output one two three four five six seven eight nine nice short want call timeconsuming method thousand element hyper operator use hyper operator method call one two three four five six seven eight nine say ucrotor output one two three four five six seven eight nine put â dot method call method calling called individual element instead method chain called array list etc unless hypered well bonus compiler hint use multiple thread hyper seqs want stuff bunch thing multiple core loop hyperseq get one calling either element order preserve element order hyper seqs iterate sequence sleep second element race batch say sleep say code took init second run output code took second run code run second hyper seqs hyper preserve order element resulting sequence autothreaded junction logical superposition value code logical check valid foo bar baz ber say valid validgrep eq say ber bar eq ber eq bar output ber valid ber bar autothreaded junction valid foo bar baz ber say valid eq none valid say ber bar eq ber bar output ber valid ber bar autothreaded junction type constructor operator true value evaluates false least one value evaluates true one one exactly one value evaluates true none none value evaluates true autothreaded junction best part junction autothreaded meaning hint compiler evaluate multiple thread promise nt always write concurrent code simple start sleep say two say one sleep say three output one two three promise concurrent asynchronous code promise map start say sleep say started init say await promise say done init output started done promise start later promisein v say init second sleep say ran init second quot output second ran second supply asynchronous data streaming supplier suppliernew suppliersupply tap v say original v suppliersupplymap tap v say double v suppliersupplygrep tap v say odd v supplieremit output original double original double odd original double supply event interval inside event loop react react whenever supplyinterval v say v init done v whenever supplyinterval v say sec init output sec sec sec sec channel threadsafe queue c channelnew start loop say creceive init await map r start sleep r csend r cclose output grammar easy way parse thing grammar easy way parse thing grammar mygrammar token top sign digit decimal token sign token digit token decimal digit say mygrammarparse output sign digit decimal digit grammar easy way parse thing grammar mygrammar token top sign digit decimal token sign token digit token decimal digit class myactions method sign make char method top make sign made digit decimal say mygrammarparse action myactions made output grammar useful module whatever man whatever code meta operator object model set bag mix whatever code use whateverstar quick way get closure argument say say grep subset prime int isprime say sub say grep subset prime int isprime whatever code whateverstar represents next positional argument ca nt use whateverstar refer argument say output whatever code natatime map never looked simpler say map output whatever code look entire fibonacci sequence lazy list fibonacci say fibonacci output psst hyperwhatever sayin say say output meta operator placed operator inside bracket element list say say number say number false meta operator triangle reduce use operator two successive element take result use operator next element say say output breaking perl object model class foo attr attrrw rw attrrequired required attrprivate method public say attr attrprivate method private say secret foo foonew attr public attrrequired yuphereitis say fooattr say foopublic fooattrrw perl object model specify type subset restriction class foo subset prime intstr isprime int attr str attrrw rw char prime attrrequired required perl object model add behaviour class role drawable method draw say line x class line drawable x line linenew linedraw output line perl object model add behaviour class role drawable method draw say line x role otherdrawable method draw say draw class line drawable otherdrawable x line linenew linedraw output sorry error compiling method draw must resolved class line exists multiple role otherdrawable drawable mop meta object protocol introspection perl object system mop meta object protocol cause class teststuff x teststuffnew say xwhat teststuff type object type say xwhich object identity value say xwho teststuff package supporting object say xwhere memory address object stable say xhow metamodel classhownew metaclass object say xwhy cause attached pod value say xdefinite true return true instance false type object mop meta object protocol intaddmethod x class v say v constant metamodel classhownewtype name aaddmethod x class v say v acompose ax class intx int class set bag mix immutable distinct object distinct object integer weight distinct object real weight set bag mix mutable distinct object distinct object integer weight distinct object real weight set bag mix counting thing bag say sentencecombbag output n c j e u h set bag mix write concise code set operator valid set foo bar ber boor given foo meow bar ber say something wrong unless given valid set bag mix write concise code set operator say foo bar bar meow union operator say foo bar bar meow symmetric set difference operator output set foo bar meow set foo meow see doc full list operator polyglot use language within perl nativecall use c library without writing c code le nativecall standard c library use nativecall sub fork native fork say pid output btw safety tip system standard c library nativecall using c library class stmt repr cpointer sub stmt return str native nativecall c also used char c also used short c also used int c c also used unsigned char c also used unsigned short c also used unsigned int c long long c longlong long long c least float c double c str c string carray int c array ints pointer void void c point type bool bool sizet sizet c nativecall use app gptrixie convert c header perl sub definition gptrixie usrlocalincludegumboh enumeration enum gumbonamespaceenum export gumbonamespacehtml gumbonamespacesvg gumbonamespacemathml enum gumboparseflags export gumboinsertionnormal gumboinsertionbyparser use perl module perl use inline use mojo dom dom mojo domnew p b awesome b trust p say domat b alltext output awesome support perl module including x module allows passing integer string array hash code reference file handle object perl perl support calling method perl object perl calling method perl object perl subclass perl class perl use bunch language mileage may vary simple thing hacking perl compiler crazy sound perl mostly written perl mean regular perl user make perl better simple thing hacking perl compiler perl written perl parsing yup perl grammar bonus slide failure concurrent code line error promise start say whole bunch code say await promise output attempt divide zero using div block unit line failure concurrent code include backtrace promise start say whole bunch code catch warn backtrace say await promise output block line block line attempt divide zero using div block unit line rat rat perl type represents number numerator denominator x say universe still unimploded say sin x output universe still unimploded nan rat actual number calculated needed x say universe still unimploded say x output universe still unimploded attempt divide zero using div block unit line actually thrown block unit line async communication program proc proc asyncnew w grep foo procstdouttap v print output v say starting grep process promise procstart procsay line foo procsay one nt procclosestdin await promise say done output starting grep process output line foo done nt say much say functionmethod displaying brief info human consumption call object gist method want output large chunk stuff use put functionmethod say listsay say put put output useful object make object work right sayed puted anything else class thingamagig method gist brief info method str brief info method numeric thing thingamagignew say thing put thing say thing output brief info brief info builtin profiler specify profile flag command line html file result generated profile
158,Lobsters,perl,Perl,Binding to C++ With NativeCall,http://hoelz.ro/blog/binding-to-cpp-with-nativecall,binding c nativecall,binding c nativecall xapian binding perl nativecall support c support c name mangling perl script exception handling destructors operator overloading update virtual method keeping reference alive plumbing porcelain comment powered disqus,binding c nativecalla month back working xapian binding perl got enough binding done use wanted using xapian stemmer stopper enough feel comfortable publishing however comfortable publishing learned binding c library perl using nativecall nativecall support cnativecall support c degree handle name mangling objectoriented stuff nt ca nt without implementing c compiler handle thing like template also nt handle exceptionsto get around limitation ended writing perl script par subset c enough parse class xapian header parse script generates appropriate c perl code assist bindingexception handlingexception handling well little exceptional come perl c throw exception need exception handler call stack handle otherwise std terminate called abort program since moarvm written c knowledge support exceptionsthe way got around pas perl callback xapian method call callback creates exception object perl thrown nativecall sub return look c side void xapiandatabaseadddatabase xapiandatabase self xapiandatabase database void handleexception const xapian error throw try self adddatabase database catch const xapian error error handleexception error perl side method adddatabase database database ex result xapiandatabaseadddatabase self database nativeerror error ex errornew error exthrow ex result reason need callback c guaranteed hold exception memory within catch block could copy exception c forbids u polymorphically would lose lot information exception perl land also ca nt throw exception callback nativeside cleanup would happenin addition need declare wrapper routine throw tell c runtime exception must pas chance miss exception abort program predictably well avoid wacky c exceptionthrowing code called perl callback called c situationsdestructorseach c object managed garbage collector since c class custom destruction logic need make sure call destructors garbage collector come knocking perl implement finalization via destroy submethod destroy call native sub us delete operatorhowever simple every class hierarchy class destroy method end getting called mean delete called subclass tends make c runtimes unhappy solution pretty simple destroy method calling destructor top hierarchy multiple inheritance enters picture thing complicated fortunately nt deal yet tricky thing cside destruction logic called via destroy destroy called nondeterministic time due garbage collector may called object life end process since lot c library rely riia may end offering sort analogous mechanism xapian bindingsoperator overloadingwiring overloaded operator nt terribly complicated like topic covered post quirk need dealt first name subroutine used overload operator differ c perl example operator becomes callme becomes succ becomes eqv part pretty simple get figured outthe really quirky thing need make sure export overload sub code us binding object otherwise general variant called example doctermlistbegin end doctermlistend eqv end term itderef right multi sub namespace code work without problem nt infix eqv variant get called end comparing pointer never end true eventually causing program segfaultupdate occurred writing post would probably good idea use export mandatory overloaded operator sub way code using module must use themvirtual methodsxapian allows developer extend behavior subclassing overriding virtual method order provide fullyfeatured binding perl developer need able example custom stopper accepts term cyrillic letter class cyrilliconlystopper repr cpointer xapian stopper method callme str term return bool term cyrillic bool way work c set special subclass target superclass accepts set function pointer one virtual method new perl side detects subclass instantiated pass code object overridden method c constructor special c subclass call pointer upon virtual method call method overriden perl corresponding function pointer set null indicates c call superclass methodkeeping reference alivelet say following code term xapian termgeneratornew termsetstemmer xapian stemnew en seems safe first glance problem lurking beneath surface xapian stemnew creates c object managed perl runtime calling setstemmer set relationship c side thing garbage collector nt knowledge relationship perspective stemmer unreachable thus fair game collection nt implemented fix yet idea like keeping reference around private structure bound xapian namespace making xapian object perl side little complicated wrapped pointer attaching extra reference thereplumbing porcelainanother language experience writing binding lua pattern borrowed git like follow writing binding git concept plumbing porcelain plumbing code utility used implement functionality low level porcelain us plumbing layer implement higherlevel functionality write binding lua try write plumbing layer using lua c api plumbing layer le directly mimic api bound look like porcelain layer provides functionality wrapped construct feel like idiomatic luathe current xapian binding plumbing hope write porcelain instead code like doctermlistbegin end doctermlistend eqv end term itderef user xapian module could write instead docterms term published please enable javascript view comment powered disqus
159,Lobsters,perl,Perl,Finding the most common n-grams in Russian using Perl 6 and HabrHabr,http://hoelz.ro/blog/finding-most-common-russian-ngrams,finding common ngrams russian using perl habrhabr,finding common ngrams russian using perl habrahabr ngrams getting article habrahabr habrahabr mojolicious extracting ngrams finding common ngrams frequency table wikipedia comment powered disqus,finding common ngrams russian using perl habrahabri teaching russian time fact would probably lot better spent time actually learning russian instead thinking way hacking language learning process exactly communication russian textbased would really like increase typing speed figured could train muscle memory type common pattern would help finding common ngrams russian language fortunately easy power perl getting article habrahabrhabrahabr russian tech blog site serve good corpus data let write shell code get word used top twenty page touch habrahabrlinks necessary noclobber like mojo get http habrahabrrupage aposttitle attr href habrahabrlinks sleep good netizen done touch habrahabrwords link cat habrahabrlinks mojo get link gethtmlbody e word slurpwords word word next unless word cyrillic say wordsubst cyrillic q subst cyrillic q habrahabrwords sleep good netizen donethis pretty straightfoward shell code want go specific mojo command come mojolicious web development framework includes various utility fabulous mojo get allows u download page extract exactly need via selector perfect scraping gethtmlbody command simple perl script wrote using mojo dom also mojolicious framework simply read html strip tag print leftthere multiline perl oneliner fantastic oxymoron perl preserve heritage powerful oneliner perl code pretty straightforward cyrillic regex syntax may unfamiliar however perl fully unicodeaware regexes allow filter unicode property exactly extracting ngramsnow word list let extract ngrams deal ngrams n figured long enough even extract single letter n e multi ngrams str word int n wordcomb multi ngrams str word int n return wordchars n char wordcomb gather char n take charsrotate n join n argsshift line word say ngrams wordlc n grep cyrillic n habrahabrwords habrahabr n gramsone perl feature would like point multi sub see ngrams sub two definition slightly different signature top mean called n passed otherwise generic variant called allows u create specialized variant sub special value break logic algorithm nice discrete chunksfinding common ngramssince ngrams letter russian alphabet probably want focus frequent let use perl program find percentage breakdown ngram use occurrence gather line line take line total occurrencesâ occurrence count text printf sn count total text notable perl feature gathertake creates generator allows avoid unnecessary intermediate variable noteworthy feature reduce metaoperator take operator creates listreducing operator code mean sum hyper metaoperator creates vectorized version operatornow round shellfu finish job sort uniq c sort n tmppercentagesplhere look like various russian character ñ ðº ð ðµ frequency table wikipedia look pretty close bias however found russian word february occurred quite bit bias probably small enough matter purpose speaking purpose data dear reader story next week published please enable javascript view comment powered disqus
160,Lobsters,perl,Perl,All Software is Legacy,https://leejo.github.io/2016/02/22/all_software_is_legacy/,software legacy,prev next past http may internet pinball database happened cruft standing still moving forward legacy future legacy legacy,software legacy february prev next post two year old may judged year come moment madness volunteered primary maintainer perl cgi module cgipm nontechnical reader post cgipm thousand line code mid late ninety even year later helping many website function ever visited website seen cgibin url yep probably running perl script almost certainly using cgipm actually volunteered primary maintainer back april reason taken long write post busy er maintaining module fixed bulk existing issue written given talk plan module released extra module point people better resource occasionally responding question module oh course usual reason take post several month get draft folder despite used module frequently year even volunteering primary maintainer like important useful module early place modern perl web stack deserved place least decade criticism original author original implementation simply fact web development field progressed lesson learnt important point make difference cgi cgipm cgi common gateway interface protocol specification like whereas cgipm implementation specification cgi still reasonable protocol web programming case whereas cgipm cgipm first implementation widely adopted included perl core usersleejoworkingcgipm corelist cgi data cgi first released perl perl released may almost twenty year ago past point wanted cgi programming perl install cgipm manually write implementation install script well known example cgilibpl fact would probably fair say cgilibpl commonly used cgipm included function make porting script cgilibpl easy time cgipm grew grew grew implemented cgi protocol specification beyond http take look rfc see anything stand give clue got yes rfc finalised october seven year cgipm released perl least decade original ncsa informal specification released work rfc start already many different implementation specification official formal definition first official draft cgi specification released may several large site already running perl even cgipm ebay imdb cpanel slashdot craigslist ticketmaster bookingcom several payment processor many many others cgi protocol much work progress history looking something like jun dave raggett update html dtd include support input select form interaction element jul nathan torkington add executable shell script ability standard cern daemon sep marc andreessen say ncsa mosaic submit form parameter namevalue namevalue namevalue sep rob mccool announces ncsa httpd support server script executable program server run generate document fly easy write written favorite language whether c perl even bourne shell nov rob mccool complains user avoiding writing code think interface change throw open bunch openissues want fixing call gateway nov rob mccool release specification renamed cgi two day later dec ncsa httpd released cgi support rfc draft expanded site software released used perl cgipm twiki bugzilla movable type livejournal thousand others even internet pinball database happened time passed feature added scope crept year turned implementation decision fit well modern requirement others could lead nasty vulnerability used care workarounds could made fastcgi persistence modperl speed plugging apache required adapting script using cgipm often came cost modperl propensity segfault one unusual web immature back development around reflected also consideration predict future incredibly difficult make accurate estimate software development sometimes stick todo fixme code worry later anyone cgipm grew point could used many different function early web development could used different way within different function result cgipm include awful lot code deal different us dual interface edge case existing bug simple function couple line long accumulated cruft cruft maybeescapehtml endoffunc sub maybeescapehtml hack work around earlier hack push eq cgi self toencode newlinestoo cgi selfordefault return undef unless defined toencode return toencode ref self self escape return self escapehtml toencode newlinestoo endoffunc chunk code one smaller function cgipm demonstrates much history code accumulated year sanitises text input prevent html tag injected output example turn character lt used prevent crosssite scripting attack thing minus boilerplate clean interface requires three line code sub maybeescapehtml return shift escape escapehtml code let break maybeescapehtml endoffunc endoffunc line added defer compilation function runtime twenty year ago cgipm getting popular hardware optimal compiling several thousand line code every request speed load module large number function wrapped string compiled called called lazy loading hack work around earlier hack push eq cgi self toencode newlinestoo cgi selfordefault line get around fact cgipm dual interface method called procedurally method call instance class object provide dual interface requires every single method within cgipm check called create default object called procedurally return undef unless defined toencode return toencode ref self self escape line sanity check short circuit line say given input continue line say decided earlier want sanitise input continue arguable whether belong function case would say yes calling method input probably bug calling code case would say yes clean code elsewhere turn function called time internally cleaner check one small function eight thousand line module cgipm currently function excluding private function auto generated one function similar code deal old code calling handle implementation decision taken module early life standing still moving forward tell nonperl developer sometimes experl developer primarily code perl often express shock perl still used know modern ecosystem perl still actively used many place new development dozen perl conference attended thousand developer every year perl maintained yearly major release strange seem think hundred million line perl code evaporated moment switched new language choice many software system like snake shedding skin going constant maintenance every year component replaced completely however core functionality remains process many user appear go year without change sometimes snake replaced newer shiny snake user compelled use even know right snake successful site web gone multiple rewrite year many site application nots cgipm must remain backwards compatibility whilst removed dead skin little else improve remaining state much software like part ecosystem must stand still whilst part move forward besides value developing cgipm anyway much better alternative available within perl ecosystem handle cgipm also expand functionality work modern code requirement part ecosystem moved forward cgipm much legacy software legacy see hear term legacy used reference software code application device sure usage pejorative however reality software legacy often substitute term legacy code technical debt whilst exactly thing presence one almost certainly suggests technical debt useful term anyway implies route legacy software pay debt declare bankruptcy abandon code rarely happens software complete abandonment even decade old code requires support maintenance technical debt useful concept speed market often important future proof code future proof code oxymoron anyway idea code forever work foundation shift beneath expectation change writing code worry short term long term look think google facebook et al would grown size domination anticipated size business year five year decade line spent extra time designing system deal use php mysql whatever scale billion user make scale replace something else later future legacy easy forget legacy software still use predates internet heck web become dominant sometimes easy forget software existed next time take flight see peek checkin software something probably written sixty running emulator bank doctor office system like cement browser reading history going back twenty year high level protocol data delivered predates another five low level protocol beat ten twenty depending spec assume basis legacy way build top create legacy way creates constraint produce sometimes find dangerous crack foundation correct way build legacy correctly abstract internals away provide clean sane interface cleaner interface looser coupling easier unplug upstream code something else paradoxically cleaner saner interface likely succeed thus likely become constrained user solidify legacy pervades software use trivial small utility included operating system coreutils encryption mechanism rely openssh software synchronizes clock ntp apple still ship o insane filesystem much legacy software break fix every line new code write inevitably become legacy software language idiom choose fall favour framework superseded library us need updating due bug vulnerability dependency abandoned look github popular hosting site open source software project quickly becoming world largest software graveyard even shoulder stand upon sagging lest think immune ask ever written code one company ever provided patch bug fix library replied question stackoverflow every software developer right creating legacy software legacy give impression end software nigh let reassure simply way thing thought process go software development read something like look back old code see bad improving substitute software development whatever trade everyone writes bad code make bad implementation decision poor estimate everyone start novice software contains bug software legacy software development solving specific problem exist solving nonspecific future problem every year decade perhaps paradigm shift given time part technological bedrock changed enough render previous pattern obsolete perhaps new developer tend push back older code sometimes drawing assumption implementation using ridicule choir shiny new attractive however newer quicker software becomes legacy yet know know older code still exists cost gain replacing yet compelling enough work new code write find situation sooner expect important thing learn make sure future legacy easy understand write clean interface good test descriptive commit message another important thing understand lineage cgipm case module part responsible perl huge popularity early even propelled perl forward limitation cgipm implementation hit alternative code written response leading today today pretty interesting lot fun tomorrow interesting even fun last write talk present ramble cgipm even though likely module still u rather concentrate current future legacy code past
161,Lobsters,perl,Perl,Anonymous State Variables And How They Work,http://hoelz.ro/blog/anonymous-state-variables-and-how-they-work,anonymous state variable work,anonymous state variable work also use kv method many iterable object accomplish something similar anonymous generic use source ack get comment powered disqus,anonymous state variable workwhen debugging code often add counter variable loop keep track going process fraction data set iterating piece code eventno getevents event eventno processevent event last eventno debugging trying save space oneliner perl actually notion anonymous state variable indicated without name also use kv method many iterable object accomplish something similar anonymous generic getevents event processevent event last however warned usage like work getevents event processevent event last use sourcewell let look rakudo source shall imagine looking parsed perl grammar would difficult task let compiler help u take small example rakudo spit ast generates looking specifically variable targetast e grep var qast var attribute qast var attribute qast var local args decl param qast var lexical decl contvar qast var lexical decl contvar qast var lexical decl contvar qast var lexical decl contvar qast var lexical globalish decl static qast var lexical export decl static qast var lexical package decl static qast var lexical package decl static qast var lexical finish decl static qast var lexical decl statevar qast var lexical decl param qast var lexical exprpostfix w nosink wanted qast var lexical exprpostfix w nosink wanted qast var lexical pod decl static qast var lexical unitmarker decl static qast var local ctxsave decl var qast var contextual ctxsave qast var local ctxsave qast var local ctxsave qast var local ctxsave might noticed right away suspicious declaration search string going yield relevant result simple search using tool like ack lead u let dive taken rakudo sub declarevariable past sigil twigil desigilname traitlist shape post elsif desigilname eq twigil cursorpanic anonymous variable twigil name qast nodeunique sigil anonvar varname sigil chunk code result searching anonvar tell declare variable name sigil generate unique namehow get fine get grammar one dirty little trick situation throw exception see backtrace lead sub declarevariable past sigil twigil desigilname traitlist shape post elsif desigilname eq twigil cursorpanic anonymous variable twigil nqp atkey nqp getenvhash robdebug cursorpanic name qast nodeunique sigil anonvar varname sigil recompiling run robdebug environment variable turned llexception make sure internals included stack trace llexception e wo nt include stack trace brevity sake generate like follow along looking first stack trace entry mention grammarnqp occurs entry mention inserted exception lead u token variable grammarnqp also taken rakudo token variable inmeta dba infix noun infixish sigil twigil desigilname indecl variable variable eq sigil twigil desigilname selftypedpanic x syntax variable initializer name variable specialvariable sigil index indecl typedpanic x syntax variable numeric sigil postcircumfix indecl typedpanic x syntax variable match sigil restricted indecl contextualizer sigil desigilname sigil qsigil marker baresigil try last allow sublanguages redefine sigils like regex twigil twigil eq unsp restricted arglistpostcircumfix leftsigil nqp substr selforig selffrom unless leftsigil chunk code probably nt make lot sense starting perl let alone rakudo source important branch consider one sigil qsigil marker baresigil try last allow sublanguages redefine sigils like regex branch accepts variable consisting solely sigil end happening token variable match instance bare source code occurrence end calling action declarevariable resulting distinct variable demonstrated snippet say say output allowed simple operation anonymous state variable keep mind also thing anonymous array hash variable say push cumbersomeness discourages usage serious code published please enable javascript view comment powered disqus
163,Lobsters,perl,Perl,Online regex tester and debugger,https://regex101.com/,online regex tester debugger,,please wait app loading
164,Lobsters,perl,Perl,Released an alpha version of my Perl 6 Apache Kafka client,https://github.com/mempko/PKafka,released alpha version perl apache kafka client,pkafka apache kafka synopsis dependency librdkafka warning,pkafka perl client apache kafka use perl reactive programming feature tap kafka topic process message synopsis use pkafka consumer use pkafka message use pkafka producer sub main broker test pkafka consumernew topic test broker broker pkafka consumernew topic broker broker producer pkafka producernew topic broker broker testmessagestap msg given msg pkafka message say got msgoffset msgpayloadstr producerput test msgpayloadstr pkafka eof say message consumed msgtotalconsumed pkafka error say error msgwhat teststop msg given msg pkafka message say got msgoffset msgpayloadstr testconsumefrombeginning partition partition await await dependency library wrap librdkafka requires installed function warning library alpha quality software please report bug contribute fix
165,Lobsters,perl,Perl,Using Valgrind to find memory problems,http://hoelz.ro/blog/using-valgrind-to-find-memory-problems,using valgrind find memory problem,using valgrind find memory problem part four experience dealing memory leak object moarvm representation perl signature object represent result body source code compiled enter valgrind valgrind asan still remains toolkit however since increase program execution time compared valgrind lesson learned comment powered disqus,using valgrind find memory problem part fournow experience dealing memory leak decided try reduce memory leak present moarvm quick win found situation mvmcallsite object referred mvmcompunit object mvmcallsite object moarvm representation perl signature mvmcompunit object represent result body source code compiled cleaned parent compunit collected took upon plug leak started extremely change free callsite object associated resource comp unit collected feel comfortable starting change roast perl test suite good exercising special case run interpreter yet got better got invalid free asan time addresssanitizer attempting free address malloc ed thread interceptorfree mvmfree mvmcallsitedestroy gcfree mvmgcglobaldestruction mvmvmdestroyinstance main libcstartmain start addresssanitizer describe address detail wild memory access suspected summary addresssanitizer badfree interceptorfree enough invalid free double free free memory managed malloc unfortunately asan nt tell detail address whether lived stack static memory time break big gun valgrindenter valgrindif nt familiar valgrind suite tool analysing program wellknown tool suite memcheck check sort memory problem beyond even asan asan still remains toolkit however since increase program execution time compared valgrind example one amazing thing track uninitialized value throughout program notify branch based uninitialized value remarkable power offer also work actually emulates cpu valgrind one tool heard little occasion use kept back pocket one day knew memory problem use valgrind moarvm need build without asan asan valgrind nt play nice together using debug still recommended however reason used asan nice stack trace rebuilding moar running valgrind got following report invalid free delete delete realloc free mvmfree mvmcallsitedestroy gcfree mvmgcglobaldestruction mvmvmdestroyinstance main address byte inside data symbol objargflags see valgrind provided u little extra information namely address trying free objargflags objargflags statically allocated piece memory turn moarvm preallocates callsite object know used repeatedly needed update change consider among small thing another leak closed scratching surface valgrind capable sure opportunity cover futurelessons learnedi took away lesson exercise first one going lowlevel programming like make sure learn least basic asan valgrind make life much easier thing stand would nt call valgrind pro know enough say want use valgrind everything valgrind one tool feel compelled read entire manualthe second lesson something knew continuous challenge write good commit message future self thank feel like good job time around commit message read weeksmonths later extremely helpful blog post seriesthanks reading published please enable javascript view comment powered disqus
166,Lobsters,perl,Perl,Perl 6 Released,https://perl6advent.wordpress.com/,perl released,algorithm lda introduction modeling quotation wikiquote preliminary wikiquote api action api www www chart gnuplot chart gnuplot gnuplot svg plot graphic plplot call matplotlib function via inline python stopwords nltk http wwwnltkorgnltkdata exercise get quotation create cleaned document http namedcaptures http exercise execute lda visualize result exercise create quotation search engine conclusion citation license two year ago happens continue reading ide http library compiler vm continue reading red red continue reading volume continue reading gtk simple nativecall continue reading continue reading post navigation,hi everyone today let introduce algorithm lda module latent dirichlet allocation ie lda implementation topic modeling introduction lda lda one popular unsupervised machine learning method model document generation process represents document mixture topic mixture topic mean fig show article word highlighted three color yellow pink blue word genetics marked yellow word evolutionary biology marked pink word data analysis marked blue imagine word article colored represent article mixture topic ie color fig image probabilistic topic model david blei ok demonstrate use algorithm lda next section modeling quotation article explore wikiquote wikiquote cloudsourced platform providing sourced quotation using wikiquote api get quotation used lda estimation execute lda plot result finally create information retrieval application using resulting model preliminary wikiquote api wikiquote action api provides mean getting wikiquote resource example get content main page follows curl http enwikiquoteorgwapiphp actionquery proprevisions titlesmain rvpropcontent formatjson result command batchcomplete warning main subscribe mediawikiapiannounce mailing list http listswikimediaorgmailmanlistinfomediawikiapiannounce notice api deprecation breaking change use special apifeatureusage see usage deprecated feature application revision rvslots specified legacy format used output format deprecated future new format always used query page pageid n title main page revision contentformat textxwiki contentmodel wikitext nn main page quote day n div nn n main page selected page n main category nnn n new page n main page community nnnnwikiquote sister projectsn otherwiki nnwikiquote languagesn wikiquotelang nnnotoc noeditsectionn noexternallanglinks angsimple n category main page www www zoffix znet library provides easytouse api fetching parsing json simply instance readme say easily get content jget url hashkey style say jget http httpbinorgget barx args foo install www chart gnuplot chart gnuplot titsuki binding gnuplot install chart gnuplot zef install chart gnuplot article use module however unfamiliar gnuplot many alternative svg plot graphic plplot call matplotlib function via inline python stopwords nltk nltk toolkit natural language processing apis also provides corpus get stopwords english via stopwords corpus http wwwnltkorgnltkdata exercise get quotation create cleaned document beginning get quotation wikiquote create clean document main goal section create document according following format docid personid word word word docid personid word word word docid personid word word word whole source code use use www use uri escape sub getmembersfromcategory str category list memberurl http enwikiquoteorgwapiphp actionquery listcategorymembers cmtitle category formatjson jget memberurl query categorymembers map title sub getpages str member int batch list int start page start member list member start list start batch member min map uriescape join url http enwikiquoteorgwapiphp actionquery proprevisions rvpropcontent formatjson title list pagespush jget url query page map body revision content title title start batch page sub createdocumentsfrompages page member list document page page quotation page body split n map subst text link text g map subst text text g map subst g map subst g map subst amp g map subst nbsp g map subst br br g grep map subst note order array wikiquote api returned agnostic int index memberspairsgrep value eq page title map key head documentspush body personid index quotation documentssort personid b personid pairsmap docid key personid value personid body value body list str member getmembersfromcategory page getpages member document createdocumentsfrompages page member docfh open documentstxt w docfhsay docid personid body join document docfhclose memfh open memberstxt w memfhsay member memfhclose first get member listed page choosed year perl designer born str member getmembersfromcategory getmembersfromcategory get member via wikiquote api sub getmembersfromcategory str category list memberurl http enwikiquoteorgwapiphp actionquery listcategorymembers cmtitle category formatjson jget memberurl query categorymembers map title next call getpages page getpages member getpages subroutine get page given title ie member sub getpages str member int batch list int start page start member list member start list start batch member min map uriescape join url http enwikiquoteorgwapiphp actionquery proprevisions rvpropcontent formatjson title list pagespush jget url query page map body revision content title title start batch page member start list start batch member min slice length batch element slice percent encoded uriescase joint ie percent encoded pipe symbol case one resulting list mumia bdeljko note getpages subroutine us hash contextualizer creating sequence hash pagespush jget url query page map body revision content title title call createdocumentsfrompages document createdocumentsfrompages page member createdocumentsfrompages creates document page sub createdocumentsfrompages page member list document page page quotation page body split n map subst text link text g map subst text text g map subst g map subst g map subst amp g map subst nbsp g map subst br br g grep map subst note order array wikiquote api returned agnostic int index memberspairsgrep value eq page title map key head documentspush body personid index quotation documentssort personid b personid pairsmap docid key personid value personid body value body list map subst text link text g map subst text text g coverting command extract text displaying delete text internal linking anchor text example perl reduced perl syntax info see http namedcaptures http cleaning operation eg map subst g extract quotation line grep find line starting single asterisk quotation appear kind line next map subst deletes asterisk since asterisk constituent quotation finally save document member ie title docfh open documentstxt w docfhsay docid personid body join document docfhclose memfh open memberstxt w memfhsay member memfhclose exercise execute lda visualize result previous section saved cleaned document section use document lda estimation visualize result goal section plot documenttopic distribution write topicword table whole source code use use algorithm lda use algorithm lda formatter use algorithm lda ldamodel use chart gnuplot use chart gnuplot subset sub createmodel document algorithm lda ldamodel stopwords stopwordsenglish iolinesset tokenizer line linewordsmap lc grep w stopwords cont w w p document vocabs algorithm lda formatterfromplain documentsmap body word bodyjoin tokenizer algorithm lda lda new document vocabs algorithm lda ldamodel model ldafit numtopics numiterations seed model sub plottopicdistribution model member document searchregex rxlarry targetpersonid memberspairsgrep value searchregex map key head docid documentsmap docid personid body word docid docid personid personid body bodyjoin grep personid targetpersonid body perl map docid head note document docid selected rowsize colsize modeldocumenttopicmatrixshape doctopic gather docid x colsize j take modeldocumenttopicmatrix j chart gnuplot gnu new terminal png filename topicspng gnucommand set boxwidth relative anyticstic tic doctopicpairsmap label key po key gnulegend gnuxlabel label topic gnuylabel label p ztheta gnuxtics tic tic gnuplot vertex doctopicpairsmap key valueexp style box fill solid gnudispose sub writenbest model topic modelnbestwordspertopic parti say map topic parti join say map join rank say gather parti parti topic take topic topic rank key join say sub savemodel model documenttopicmatrix modeldocumenttopicmatrix documentsize topicsize documenttopicmatrixshape doctopicfh open documenttopictxt w doctopicfhsay documentsize topicsize join documentsize doci doctopicfhsay gather topicsize topic take documenttopicmatrix doci topic join doctopicfhclose topicwordmatrix modeltopicwordmatrix wordsize topicwordmatrixshape topicwordfh open topicwordtxt w topicwordfhsay topicsize wordsize join topicsize topici topicwordfhsay gather wordsize word take topicwordmatrix topici word join topicwordfhclose vocabulary modelvocabulary vocabfh open vocabularytxt w vocabfhsay vocabulary vocabfhclose document documentstxt iolines model createmodel document member memberstxt iolines plottopicdistribution model member document writenbest model savemodel model first load cleaned document call createmodel document documentstxt iolines model createmodel document createmodel creates lda model loading given document sub createmodel document algorithm lda ldamodel stopwords stopwordsenglish iolinesset tokenizer line linewordsmap lc grep w stopwords cont w w p document vocabs algorithm lda formatterfromplain documentsmap body word bodyjoin tokenizer algorithm lda lda new document vocabs algorithm lda ldamodel model ldafit numtopics numiterations seed model stopwords set english stopwords nltk mentioned preliminary section tokenizer custom tokenizer algorithm lda formatterfromplain tokenizer convert given sentence follows split given sentence whitespace make list token replaces character token lowercase character deletes token exists stopwords list onelength token categorized symbol punctuation algorithm lda formatterfromplain creates numerical native document ie word document mapped corresponding vocabulary id id represented c vocabulary list text creating algorithm lda instance using numerical document start lda estimation algorithm ldafit example set number topic number iteration seed srand next plot documenttopic distribution plotting load saved member member memberstxt iolines plottopicdistribution model member document plottopicdistribution plot topic distribution chart gnuplot sub plottopicdistribution model member document searchregex rxlarry targetpersonid memberspairsgrep value searchregex map key head docid documentsmap docid personid body word docid docid personid personid body bodyjoin grep personid targetpersonid body perl map docid head note document docid selected rowsize colsize modeldocumenttopicmatrixshape doctopic gather docid x colsize j take modeldocumenttopicmatrix j chart gnuplot gnu new terminal png filename topicspng gnucommand set boxwidth relative anyticstic tic doctopicpairsmap label key po key gnulegend gnuxlabel label topic gnuylabel label p ztheta gnuxtics tic tic gnuplot vertex doctopicpairsmap key valueexp style box fill solid gnudispose example plot topic distribution larry wall quotation although perl slogan one way hesitate make way something plotting call writenbest lda topic xxx represents expressed list word writenbest writes markdown style topicword distribution table sub writenbest model topic modelnbestwordspertopic parti say map topic parti join say map join rank say gather parti parti topic take topic topic rank key join say result topic topic topic topic topic would scotland black could one country mr first work believe one lot law new one political play college human took world official basic process much need new speak business must reacher language becomes ever national five every good far many car matter world fighting u road right knowledge topic topic topic topic topic apple united people like likely war would one die company state something und job year know think quantum even would think way play steve american want thing noble life president get perl home like human going long dog end must say always student small u go really ist see quotation although perl slogan one way hesitate make way something contains one way perl reason quotation mainly composed topic next section save model savemodel subroutine sub savemodel model documenttopicmatrix modeldocumenttopicmatrix documentsize topicsize documenttopicmatrixshape doctopicfh open documenttopictxt w doctopicfhsay documentsize topicsize join documentsize doci doctopicfhsay gather topicsize topic take documenttopicmatrix doci topic join doctopicfhclose topicwordmatrix modeltopicwordmatrix wordsize topicwordmatrixshape topicwordfh open topicwordtxt w topicwordfhsay topicsize wordsize join topicsize topici topicwordfhsay gather wordsize word take topicwordmatrix topici word join topicwordfhclose vocabulary modelvocabulary vocabfh open vocabularytxt w vocabfhsay vocabulary vocabfhclose exercise create quotation search engine section create quotation search engine us model created previous section specifically create ldabased document model xing wei w bruce croft make cli tool search quotation note word token word interchangable section whole source code use sub main str query doctopiciter documenttopictxt iolinesiterator topicworditer topicwordtxt iolinesiterator documentsize topicsize doctopiciterpullonewords wordsize topicworditerpullonewords num documenttopic documentsize topicsize num topicword topicsize wordsize documentsize doci maybeline doctopiciterpullone die error something went wrong maybeline iterationend num line maybeline word num line documenttopic doci line topicsize topici maybeline topicworditerpullone die error something went wrong maybeline iterationend num line maybeline word num line topicword topici line vocabulary vocabularytxt iolinespairs antipairhash member memberstxt iolines document documentstxt iolines docbodies documentsmap body word bodyjoin doctoperson documentsmap docid personid word docid personid hash query querywordsmap lc sortedlist gather documentsize doci num logprob gather query token num logmlprob pml docbodies doci token num logldaprob plda token topicsize doci vocabulary documenttopic topicword take logsum log logmlprob log logldaprob sum take doci doci logprob logprob sort b logprob logprob docid sortedlist doci sprintf f docbodies docid member doctoperson docid sortedlist logprob say sub pml docbodies doci token num int numtokens docbodies doci wordsgrep token elems int totaltokens docbodies doci wordselems return totaltokens numtokens log numtokens log totaltokens sub plda token topicsize doci vocabulary raw documenttopic raw topicword raw num gather topicsize topic vocabulary token exists take documenttopic doci topic topicword topic vocabulary token else take reduce logsum sub logsum num loga num logb num loga logb return logb log exp loga logb else return loga log exp logb loga beginning load saved model prepare documenttopic topicword vocabulary document docbodies doctoperson member doctopiciter documenttopictxt iolinesiterator topicworditer topicwordtxt iolinesiterator documentsize topicsize doctopiciterpullonewords wordsize topicworditerpullonewords num documenttopic documentsize topicsize num topicword topicsize wordsize documentsize doci maybeline doctopiciterpullone die error something went wrong maybeline iterationend num line maybeline word num line documenttopic doci line topicsize topici maybeline topicworditerpullone die error something went wrong maybeline iterationend num line maybeline word num line topicword topici line vocabulary vocabularytxt iolinespairs antipairhash member memberstxt iolines document documentstxt iolines docbodies documentsmap body word bodyjoin doctoperson documentsmap docid personid word docid personid hash next set query using option query query querywordsmap lc compute probability p querydocument based eq aforementioned paper note use logarithm avoid undeflow set parameter mu zero sort sortedlist gather documentsize doci num logprob gather query token num logmlprob pml docbodies doci token num logldaprob plda token topicsize doci vocabulary documenttopic topicword take logsum log logmlprob log logldaprob sum take doci doci logprob logprob sort b logprob logprob plda add logarithmic topic given document probability ie lnp topictheta document word given topic probability ie lnp wordphi topic topic sum reduce logsum sub plda token topicsize doci vocabulary raw documenttopic raw topicword raw num gather topicsize topic vocabulary token exists take documenttopic doci topic topicword topic vocabulary token else take reduce logsum pml ml mean maximum likelihood count token normalizes number total token document note computation also conducted log space sub pml docbodies doci token num int numtokens docbodies doci wordsgrep token elems int totaltokens docbodies doci wordselems return totaltokens numtokens log numtokens log totaltokens ok let execute query perl query perl perl always provide null larry wall perl programming empirical science larry wall whole intent perl module system encourage growth perl culture rather perl core larry wall dunno dream perl sometimes larry wall many level perl diagonal language larry wall almost nothing perl serf single purpose larry wall perl long tradition working around compiler larry wall whether perl replace perl yeah probably year larry wall well think perl run faster c larry wall certainly easy calculate average attendance perl conference larry wall query apple query apple steve job phone moving technology apple pay unwillingness assure security could create targetlike exposure wipe apple market rob enderle joint apple hp press release dated january available http carly fiorina samsung apple apple microsoft skewering devoted user reputation better way apple fight back company longer skill apparently nt know get either rob enderle w hen came iwatch also name apple nt apple walked away instead launched apple watch certainly risk litigation product sale fraction otherwise might proper name branding rob enderle w hen apple wanted name iphone owned cisco steve job took legal team executed could keep turned surprisingly inexpensive apple watch showcased apple phone likely would sold anywhere near well iphone rob enderle cause apple v qualcomm appears effort apple pressure qualcomm providing unique discount largely apple run innovation wall increased competition firm like samsung moved massive cost reduction strategy never known end well cause supplier create unreliable component outright fail rob enderle apple tends aggressively work discover problem product shipped certainly talk rob enderle apple longer owns tablet market likely lose dominance year next level sustained dominance nt appear recur vendor even launched category rob enderle apple becoming like typical tech firm long technology short magic apple drifting closer closer back offer advancement largely follow made others year earlier product proliferation preference simple elegance waning excitement rob enderle litigation qualcomm appleintel weird make weird intel appears think helping apple drive qualcomm price gain advantage since value lower cost lower performing alternative qualcomm modem result would aggressively priced better alternative intel offering qualcommbroadcom wiping intel market paper loselose intel even apple lower price would flow apple competitor well lowering price competing phone apple would get lasting benefit either rob enderle ronald mcdonald apple face rob enderle phone moving technology apple pay unwillingness assure security could create targetlike exposure wipe apple market rob enderle joint apple hp press release dated january available http carly fiorina samsung apple apple microsoft skewering devoted user reputation better way apple fight back company longer skill apparently nt know get either rob enderle previous line contains naughty word n ibmappleawk larry wall cause apple v qualcomm appears effort apple pressure qualcomm providing unique discount largely apple run innovation wall increased competition firm like samsung moved massive cost reduction strategy never known end well cause supplier create unreliable component outright fail rob enderle litigation qualcomm appleintel weird make weird intel appears think helping apple drive qualcomm price gain advantage since value lower cost lower performing alternative qualcomm modem result would aggressively priced better alternative intel offering qualcommbroadcom wiping intel market paper loselose intel even apple lower price would flow apple competitor well lowering price competing phone apple would get lasting benefit either rob enderle apple tends aggressively work discover problem product shipped certainly talk rob enderle today tech company nt built last apple recent earnings report show well rob enderle w hen came iwatch also name apple nt apple walked away instead launched apple watch certainly risk litigation product sale fraction otherwise might proper name branding rob enderle conclusion article explored wikiquote created lda model using algoritm lda built information retrieval application thanks reading article see next time citation blei david probabilistic topic model communication acm wei xing w bruce croft ldabased document model adhoc retrieval proceeding annual international acm sigir conference research development information retrieval acm license already mentioned bisectable one advent post two year ago since lot changed think time give brief history bisectable bot friend first let define problem solved sometimes happens commit introduces unintended change behavior bug usually call regression case easiest way figure went wrong fix first find commit introduced regression exactly commits rakudo even though still lot continue reading day blin christmas soon good amount work time year spent building couple perl application decade contributing perl compiler runtime development feel great finally using deliver production solution solving realworld problem still sure whether writing code ide founded using http library designed compiled compiler implemented large part running vm play architect make one world worst case invented really full stack whatever working highly value automated testing passing test something know work something break evolve software question even automated test bug happen adding test cover bug least mean make different bug future perhaps bit forgivable continue reading day testing cro http apis year ending lot celebrate better way celebrate end year family friend help achieve home decided run secret santa game goal write secret santa program something use wonderful project called red red orm object relational model still development published module yet growing close release let create first table table store people participating secret santa code continue reading day red secret santa advent exciting time time anticipation u human time elf become inventive today want take leisure time christmas stress report pioneering work done area gift wrapping even anticipate news report might still help improve technique remind christmas approaching fast know present small child like large present therefore present enlargement research lab northpole tasked finding practical way make present larger large mean multiple thing admit unit bending meaning bit work far interesting increase volume present increasing dimension gift box continue reading day propositional combinatorics perl big fan roleplaying game like dungeon dragon game screen help hide running game give chart used game reduce looking stuff book game collection extensive though much rather use laptop hide behind track information could also automate dice roll chart usage whilst could cobble stuff together text editor command line magic much rather snazzy desktop apps show people enter gtk simple wrapper around ui library used linux gnome desktop also available window mac library give simple use interface via power nativecall let create simple desktop application continue reading day interactive desktop apps christmas tree traditional symbol date back four hundred year europe could better advent article something creating christmas tree image typical simplified representation tree several triangle decreasing size stacked top small overlap fairly easy create computer program use scalable vector graphic svg draw image given description seems perfectly suited task continue reading day svg christmas tree post navigation
167,Lobsters,perl,Perl,"Christmas has come, perl 6 is here.",https://perl6advent.wordpress.com/2015/12/24/an-unexpectedly-long-expected-party/,christmas come perl,like,hello ting ting ting attention attention thank hi camelia know even told give speech perl official coming party someone else roast toast told serious speech ha like know give serious speech seriously well seriously like thank coming today oops guess pun sorry well thanks showing big day perl officially age well kinda sorta driver license anyway watch world inaudible comment table back oh mentioned really talking fender bender well anyway let move sure really good driver anyway great deal empathy perl butterfly spend far long chrysalis coming literal coming case hah literal coming case say er oops anyway please patient perl today declare relatively competent still teenager know young age get teenager go hormonal change well start oscillate swing get wider swing like plusorminus year one day act like next day like perl still maturing fershure mean love le day throwing tantrum driving u crazy mean well guess mean family love family thick thin trust family turn thin back thick someday extended family gathered today say take village raise child never child village get chance look program tomorrow hangover wear look list benefactor back name people actively contributed development perl one way another undoubtedly name missing list great bunch people closest member family family realized long ago valuable guidance growing computer language get come outside immediate family come friend acquaintance perspective someone always close take village maturity fractal entity operates many different scale proxy wide wide world perl going rough world perl ready thanks course still thing really well communication skill pretty good polite understand carry several conversation getting pretty good math show skill manipulating object various sort love foreign language funny character still deliberate child sometimes seems thinking hard learning something okay get faster efficient next several year brain rewires full adulthood learn new thing world think personality change much pretty obvious personality really come loved existence ready pas love others met yet get really excited rocket take timtoady tell getting wee hour morning watch mercury gemini apollo rocket take young remember thrilling development track happy see spacex rocket stick landing week several fender another inaudible comment ignoring careful gotten really really good ignoring certain kind people one really feel sorry people happy something unhappy anyway launching perl world lot like rocket launch lot excitement countdown holdyourbreath moment wonder really going go explode main engine lit clamp letting go dramatic mostly nothing much seems happening right rocket drama rocket want rocket want go faster faster faster position really even velocity acceleration raise glass give perl free fly may joy existence may joy discovering world may accelerate long cheer like like loading related
168,Lobsters,perl,Perl,Address Your Sanity with AddressSanitizer,http://hoelz.ro/blog/address-your-sanity-with-address-sanitizer,address sanity addresssanitizer,address sanity addresssanitizer part three useafterfree bug asan http wwwchromiumorgdeveloperstestingaddresssanitizer next time comment powered disqus,address sanity addresssanitizer part threeit took get back swing thing returned japan eventually got first step fixing useafterfree bug finding test triggering failure meant building moarvm address sanitation often referred asan supportasan also known addresssanitizer memory error detector developed google clang since ported gcc find common memory error useafterfree overflow double free memory leak building moarvm asan support nt difficult actually simple providing asan running configurepl configure moarvm probably also want debug useful stack trace however asan need tweaking really start using run perl test suitedespite team effort moarvm still memory leak asan treat leak failure asan make invocation moarvm fail building rakudo needed figure tell asan nt care memory leak time beingi soon discovered asanoptions environment variable used tune asan could nt find instruction actually use timo paulsen pointed http wwwchromiumorgdeveloperstestingaddresssanitizer contains advice possible value asanoptions displayed setting looking output set asanoptions disable checking memory leak set exitcode moarvm invocation sentinel value nt expect come naturally could easily identify perl script triggering bad memory behaviorafter setting environment variable running roast new moarvm got hit test lessthanideal memory behavior asan helpfully pointed problem code looked like void mvmargsproccleanupforcache mvmthreadcontext tc mvmargproccontext ctx ctx callsite ctx callsite hasflattening ctx argflags mvmfree ctx argflags ctx argflags null mvmfree ctx args ctx args null turn ctx callsite invalid point cleaning ctx getting value ctx callsite hasflattening result invalid memory access happened know argflags nonnull hasflattening truthy anyway make ctx callsite ctx callsite hasflattening check redundant removed fixed useafterfree plugged memory leak discovered previous post got rid slowdown observing spawning child process huzzah however nt end particular journey memory issue mentioned earlier moarvm still memory leak newfound confidence wielding asan decided try get rid tune next time go fixing leak help heavyweight tool area valgrind published please enable javascript view comment powered disqus
169,Lobsters,perl,Perl,Hunted By a Leak,http://hoelz.ro/blog/hunted-by-a-leak,hunted leak,hunted leak part two previous post structs used signature checking binding parameter argument logic reused subsignature checking next installment comment powered disqus,hunted leak part twoin previous post talked slowdown perl process fixing discovered cause really memory leak instead looking memory leak proc async decided look run also spawn child exhibited leak work synchronous manner find perl code causing leak wrote code would call run repeatedly run true along script monitor r child program second use strict use warning use autodie use feature qw say use fcntl use file slurper qw readtext command argv pid fork sentinelread sentinelwrite pipe sentinelread sentinelwrite fcntl sentinelwrite fsetfd fdcloexec pid close sentinelwrite buffer sysread sentinelread buffer statm split readtext proc pidstatm last statm say stderr statm sleep waitpid pid else close sentinelread exec command die could nt execute command started stripping away code body run ended following definition run sub run args err bool bin bool chomp true bool merge str enc str nl n cwd cwd env may put complex signature nt let distract important part subroutine bodyso wait calling subroutine leak memory confirm true better tried calling subroutine argument signature stopped leak playing around signature bit finally came across condition would would trigger leak sub noleak args sub leak args familiar perl signature allow explain noleak subroutine slurpy argument named args extra argument subroutine go args leak slurpy args well difference leak args called subsignature subsignature place constraint shape argument case mean must least one value leak need take least one argumentdigging code handle subsignatures discovered mvmcallcapture object moarvm creating new mvmcallsite structs freeing gc come calling mvmcallcapture structs used signature checking binding parameter argument logic reused subsignature checking free callsites gc handler hoping solution would simple unfortunately immediately started seeing failure involving double free surprised learn call capture object share callsites one another however clear capture object create callsite always outlive capture take reference callsite managed add flag tell capture whether owned callsite borrowing plugged leak made ecstatic since leaving honeymoon japan next day would able two week away code without worry life simple better worse nicholas clark discovered useafterfree bug fix running entire perl test suite aka roast asan google address sanitizer unfortunately leave japan hour later could reverted change made started branch fix restored reminder tried think two week japanin next installment cover nature useafterfree bug managed fix help asan published please enable javascript view comment powered disqus
170,Lobsters,perl,Perl,Functional Perl,http://functional-perl.org,functional perl,functional programming perl example howto pure function versus io example example intro status alpha functionalperl github repository part howto object oriented functional programming libfp functional xml libchjio chjperllib htmlgen documentation introduction using functionalperl module presentation intro directory basic tailcalls moretailcalls example howto design document book higherorder perl dependency htmlgen installation cpan git repository reporting bug finding help contributing,functional programming perlthis project aim make easier reduce number place perl program side effect used providing facility like data structure enable tutorial introduction show good way go itside effect mutation inputoutput unless contained locally transparent user subroutinemethodapi part methodsubroutine calling interface implicit hopefully least documented call lingering effect possibly distance make tracking bug difficult hinder reuse program part newly combined way also code us side effect may idempotent hence produce failure calculating different value rerun prevents use interactive way like readeval print loop debugger make writing test difficultfunctional programming often associated strong static typing haskell scala two complement sideeffect free model simplifies description piece code via type type guarantee particular piece code pure advantage functional program machine reason also valid human thus still benefit functional programming dynamically typed language like perl get additional interactivity benefit exampleswork easily sequence use test use functionalperl includes autoboxing method array work reduce add sum method map square sum short constructor function like list nonnative data structure equal know deal comparable data structure use fp equal ok equal z chunksof take list list purearray b purearray c purearray e f purearrays fp purearray array immutable prevent accidental mutation could request mutable one ok equal z chunksof take map themethod array array b c e f make xml document generate function construct pxml object object serialized xml name given xml tag name use pxml tag qw myexample protocolversion record record b c function generated alluppercase minimize chance naming conflict let stand apart record hi b string record hi b lt gt b record create bigger document inner part built external input myexample protocolversion record csvfiletorows inpath eol n sepchar skip header row rest map row xml element map sub b c record b b c c print xml document disk xmlfile outpath myexample document built lazily csvfiletorows return lazy list row rest cause first csv row read dropped return remainder lazy list map return new lazy list passed argument record return pxml object representing record xml element passed myexample return pxml object representing myexample xml element pxml object come xmlfile method serializes document file run encounter embedded lazy list walk evaluating list item one time dropping item immediately printing mean one row csv file need held memory given point note example still assumes step taken csv file nt change serialization step completed otherwise functional purity broken responsibility ensure assumption left programmer see howto pure function versus io detail core idea functional programming avoidance mutation absense mutation value calculated stay immutable example number number calculated ca nt modify place multiple variable holding number ca nt purpose accidentally change time x x x still true number nt change variable number operation modifies number place return new number instance nt true value perl let modify internal content without giving new reference usually default way thing done string sometimes array often copied instead large instance becomes inefficient setter object usually modify object place mutate project help efficiency minimizing copying ergonomy automatically creates functional setter class field example simple class show differencecode nt mutate pure function method combined easily new function still pure thus combined compose take number function reference coderefs return new function coderef applies function argument turn combinator function infp combinators function add argument together square result squareofthesum compose square add squareofthesum take input item list instead multiple function argument squareofthesequencesum compose square themethod sum squareofthesequencesum list functional programming matter large small program easy keep place mutation happens head wheras large one interaction become unwieldysee example page examplesif like see practical stepbystep introduction read introfor index module see see also section status alphathis project alpha status handling stream lazy list currently unergonomic since user specify explicitly whether stream retained using keep function let go default ideally perl interpreter extended pragma enabled make automatically keep let go value depending whether variable still used lexical analysis project currently using module author developed long time ago could replaced existing one cpan eg chj xperlfunc chj io fp struct implemented class generator class come functional setter setter nt mutate object return modified version author also liked see simple approach may lead eg use predicate function type checking aim provide easy concise way write class experimental may deprecated favour extending existing class generator needed using insteadthe namespaces fixed yet particular everything chj probably renamed also interface treated alpha abstract type similar fp abstract sequence definedget working correctly first fast operation nt efficient yet functional sequence data structure yet allows efficient random access none functional hashmaps efficient update author plan address also author plan implementing mechanism make chain sequence operation like foo map bar filter baz drop reverse drop performant imperative equivalentthere lot still need done depends author people able willing invest time approach use project avoiding breakage due future change could add functionalperl github repository git submodule project using access via use lib tell like see stable branch older version fix partsfp struct class generator creates functional setter accepts predicate function type checking reasoning see howto object oriented functional programming libfp library pure function functional data structure including various sequence pure array linked list lazy stream pxml functional xml templating system xml based markup language way perl functionssome developer utility fp repl chj ruse chj backtrace fp repl traplibchjio userswrappers chj xopen chj xopendir chj xoutpipe chj xpipe chj xtmpfile operation filehandles throw exception error default plus many utility wrote around year ago mean offer io exception feature mean time alternative grown probably good better know replacement project using module used originally part chjperllib htmlgen tool used generate website built using documentationit probably make sense look doc roughly given order ca nt follow presentation skip intro likewise bored skip ahead example howtodesign documentsintroduction using functionalperl modulesthis latest documentation addition thus best chance date aiming give pretty comprehensive overview nt require read doc first info duplicated detail document long take look presentation example scriptspresentationthese slide introductory presentation recording slide may saying enough understanding also somewhat outdatedintro directorythe intro directory contains script introducing concept including basic functional programming work progress script meant viewed order basicstailcallsmoretailcallsthis nt go far yet todo add also please note sub call tail currently broken newer perl version todo look fixing whether possible imlement simpler manner examplesthe example directory contains script showing possibility probably understand everything looking give impressionour howto design documentsbookif need gentle introduction idea behind functional programming may find higherorder perl mark jason dominus book written long functionalperl project started various detail differentlyplease ask like meet london berlin switzerland get introduction dependenciesto use binperlrepl binfperl repl intro example script interactively term readline gnu padwalker optionally eval withlexicals want use mode capture tiny see code definition location information sub util see function name displaying code ref run test suite test requiresto run test otherwise skipped addition test pod snippet bsd resource method signature function parameter sub call tail text csv dbd csv text csv uri text markdown clone also necessary run htmlgengen websitegen build website see htmlgen detail todo listed prereqpm makefilepl cpanuse preferred cpan installer example cpan functionalperl note one installs runtime recommends dependency well lot like eg dbi may want look makefilepl list install linux distribution binary package repository first nt want recommends set recommendspolicy env home cpancpanmyconfigpm install cpanminus tool run cpanm functionalperl skip recommends unless pas withrecommends git repositorygit clone http githubcompflanzefunctionalperlgit cd functionalperl get latest release commits behind master git checkout b verify mitm attack gpg recvkey git tag v find various page search engine fingerprint may find trust path one signature older key one signed bundled script modify library load path find file locally thus installation necessary module lib directory export neededto install run usual perl makefilepl make test make install repository might split producing several separate cpan package even repository future thus nt rely much installation process continuing work way right reporting bug finding help contributing
171,Lobsters,perl,Perl,Larry Wall Unveils Perl 6.0.0,http://www.pigdog.org/auto/software_jihad/link/3138.html,larry wall unveils perl,carry forward high ideal perl community note comment powered disqus,first thing thank craigslist sponsoring last year october larry wall addressed crowd geek san francisco exploratorium saying could nt properly express gratitude craigslist acknowledged long development arc perl old joke go perl coming christmas time meant larry soft cheerful voice unflaggingly positive attitude naysayer thank saying nay tremendous motivator could nt done without rest audience former linguist said definition underscore point put slide said question someone audience jokingly alluded lord ring one simply build perl like mordor larry interested demonstrating new language would carry forward high ideal perl community joked top priority fixing bug could mistaken feature saw lot thing exotic new anonymous state variable fast loop gather take control structure creating list without intermediate temp variable loop look like alternate syntax creating loop react whenever code run condition met larry actually demonstrated triggering react block typing echo command one impressive thing larry demonstrated sequence operator perl ability intuit sequence say correctly produced nice tidy list value rather might expect larry later told audience member really liked capability someone asked implemented said go read code also dazzled audience calling method integer everything object want say intmethods say arrayhowname nod douglas adam larry said important number showed audience would happen called integer method number say say pretty much everything reference scratch said later one web site note perl everything held variable object object passed reference everywhere larry talked quite bit metaprogramming ability write grammar defining bit syntax extending language really make distinction builtin userdefined said one point defining new infix operator eminently reasonable syntax something like sub infix b op square bracket becomes list operator say x took second process larry statement infix operator replaced square bracket later someone asked world userdefined operator everywhere define precedence larry pulled tighter looser noting perl even customizable precedence level add infinite number larry especially proud perl ability drop language say language really dialect perl python lua even included inline library larry pointed new library add rubyesque rule exclamation point question mark used end identifier take make ruby programmer happy touted many cool feature perl concurrency role lazy list nt calculate value required even improved handling smart quote promised soon see something called native shift array thing feed highspeed processor matrix manipulation already built also new syntax perl let perform smart matching finally way stop nonidentical string matching numerical value say comparison regular expression degenerated way smart match characterbycharacter analysis instead checking actual equivalence moment presentation seemed like perl may language larry always wanted write wife observes perl incorporate lot recognizable culture told audience perl street cred design thing way ought hardest thing waiting right person come along understands implement shipped time last year might thoroughly regret larry concluded taking question audience drew interesting comment theme trying hard last year underpromise perform favorite part alluded old joke development choose two follow three attribute fast good cheap open source project definition cheap chose good fast hapsburg pigdogorg please enable javascript view comment powered disqus
172,Lobsters,perl,Perl,Interview with Larry Wall,http://www.linuxvoice.com/interview-larry-wall/,interview larry wall,linux voice plan go find undocumented language somewhere world create written script never opportunity fulfil plan something like go back lv many writing system based existing script invented one like lv started working perl take background linguistics made think really important programming language lv long time perl seen glue language internet fitting bit piece together see perl release satisfy need existing user way bring new people bring resurgence language lv hiragana right lv perl taken fifteen year must hard overseeing language everyone different opinion thing always right way thing wrong way lv last year uk government kicked year code attempt get young people interested programming lot opinion done like whether teach lowlevel language start people really understand memory usage highlevel language take,larry wall fascinating man creator perl programming language widely regarded glue holding internet together mocked writeonly language due density liberal use nonalphanumeric character larry also background linguistics well known delivering entertaining state onion presentation future perl fosdem brussels caught larry ask perl taken long perl released difficult manage project everyone strong opinion pulling different direction background linguistics influenced design perl start get ready intriguing linux voice plan go find undocumented language somewhere world create written script never opportunity fulfil plan something like go back larry wall kind young able carry actually lot hard work organisation thing tend take people certain age partly health vigour also people much better picking new language younger learn language making script started trying teach japanese year ago could speak quite well phonology phonetics training hard understand anybody say go japan ask direction really understand answer perl found way make computer sure user talking usually learning language well enough develop writing system least conversational language take period year get point actually literacy start educating people culture teach write culture well course language helper told call language informant everyone would think working cia people get come help learn foreign language teacher way eliciting thing someone language teacher still teach speak take stick point say stick drop say stick fall start writing thing systematising thing motivation people going group translate bible language one part also culture preservation missionary get kind bad rep anthropologist think left sit culture somebody probably going change culture anyway usually army business coming like coca cola sewing machine people missionary three missionary least damaging job right lv many writing system based existing script invented one like lw cherokee invented copying letter mapping much think letter fairly arbitrary sense represent people think language sufficiently well communicate often variation western orthography using character latin possible tonal language mark tone somehow accent number soon start leaning towards phoenetic phonological representation also start lose dialectical difference write dialectal difference conventional spelling like english pronunciation really match lv started working perl take background linguistics made think really important programming language lw thought lot people use language real language system noun verb adjective kind know word type real natural language lot instance shoving one word different slot linguistic theory studied called tagmemics account work natural language could something think noun verb people time pretty much shove anything slot communicate one favourite example shoving entire sentence adjective sentence go like like icanuseanythingasanadjective attitude natural language flexible way intelligent listener least compared computer rely figure must meant case ambiguity course computer language manage ambiguity much closely arguably perl manage quite adequately enough sometimes computer confused really perl discovered way make computer sure user talking even user confused whether something really string number computer know exact type figured way stronger typing internally still allomorphic use idea lv long time perl seen glue language internet fitting bit piece together see perl release satisfy need existing user way bring new people bring resurgence language lw initial intent make better perl perl programmer looked inadequacy perl became apparent fixed inadequacy perl would applicable mentioned talk like j r r tolkien talked applicability see http idea easy thing easy hard thing possible go way back boundary perl perl perl handle binary data embedded null cstyle string said perl text processing language need thing text processing language occurred time large number problem mostly text little bit binary data network address thing like use binary data open socket text process applicability language doubled making possible handle binary data began tradeoff thing easy language nowadays principle perl stole phrase huffman coding bit encoding system different size character common character encoded fewer number bit rarer character encoded bit careful balancing act many good idea beginning stole idea general principle perl thing commonly used type often common thing need shorter succinct another bit however allowed irregular natural language actually commonly used verb tend irregular reason need differentiation one favourite book called search perfect language umberto eco computer language philosophical language whole idea maybe ancient language perfect language get back language make mistake thinking similar thing always encoded similarly communicate bunch barnyard animal related name say go kill blerfoo really wanted kill blerfee might get cow killed want chicken killed realm like actually better differentiate word redundancy communication channel common word need differentiation communicating efficiently also idea selfclocking code look upc label product barcode actually selfclocking code pair bar space always unit seven column wide rely know width bar always add selfclocking selfclocking code used electronics old transmission serial protocol stop start bit could keep thing synced natural language also instance writing japanese use space way write kanji character chinese head phrase ending written syllabary lv hiragana right lw yes hiragana naturally head phrase really stand system similarly ancient greek verb declined conjugated standard ending sortof clocking mechanism space optional writing system well modern invention put space similarly computer language value selfclocking code rely heavily perl even heavily perl previous release idea parsing expression either expecting term infix operator expecting term might also get prefix operator kindof expectation slot expecting infix might also get postfix previous term flip back forth compiler actually know expecting overload little bit perl slash expecting term introduce regular expression whereas slash expecting infix division hand want overload everything lose selfclocking redundancy best error message syntax error actually come noticing two term row try figure two term row oh must left semicolon previous line produce much better error message adhoc parser lv perl taken fifteen year must hard overseeing language everyone different opinion thing always right way thing wrong way lw careful balancing act many good idea beginning well want say good idea many pain point like rfcs feature proposal document expected maybe sit back actually look ignore proposed solution map tunnel vision one many changed one thing done would complete mess rerationalise based people actually hurting tried use perl started look unifying underlying idea many rfcs based fact inadequate type system introducing coherent type system could fix many problem sane fashion cohesive fashion started noticing way could unify featuresets start reusing idea different area necessarily thing underneath standard way writing pair well two way perl way writing pair colon could also reused radix notation literal number base could also used various alternative form quoting say perl strangely consistent people made early implementation perl came back cap hand said really need language designer similar idea pop say already familiar syntax work see used something else took unity vision find unification people various idea made early implementation perl came back capinhand said really need language designer could benevolent dictator language designer almost explicitly told stay implementation saw made perl like really funny innards new implementation started looking whole lot like perl inside maybe early implementation work well still feeling way whole design implementation made lot assumption vm ended something like object oriented assembly language sort problem fairly pervasive beginning pug guy came along said let use haskell make think clearly let use clarify semantic model underneath nailed semantic model importantly started building test suite point consistent semantic model parrot vm continued developing another implementation niecza came along based net young fellow smart implemented large subset perl kind loner really figure way get people involved project time parrot project getting big anyone really manage inside difficult refactor point fellow working rakudo decided probably needed platform parrot vm invented portability layer called nqp stand quite perl ported first run jvm java virtual machine also secretly working new vm called moarvm became public little year ago moarvm jvm run pretty much equivalent set regression test parrot kindof trailing back area good flush vmspecific assumption starting think nqp targeting thing google summer code project year target nqp javascript might fit right moarvm also us nodejs much mundane processing probably need concentrate moarvm rest year actually define rest catch lv last year uk government kicked year code attempt get young people interested programming lot opinion done like whether teach lowlevel language start people really understand memory usage highlevel language take lw python community done much better job getting lower level education like something space partly butterfly logo going appealing seven year old girl think perl learnable first language number people surprised u learning perl first language know number fairly powerful concept even perl like closure lexical scoping feature generally get functional programming even perl python community done much better job getting lower level education part reason perl taken long around different principle try stick language design end juggling everything saying really important principle lot discussion lot different thing sometimes commit decision work realise quite right decision design specify pretty much anything concurrent programming someone came along smart enough knew different tradeoff jonathan worthington blended together idea language like go c concurrent primitive compose well composability important rest language awful lot concurrent parallel programming system compose well like thread lock lot way poorly one sense worth waiting extra time see language like go c develop really good highlevel primitive sort contradiction term compose well
173,Lobsters,perl,Perl,Emulating Linux MIPS in Perl - Part 1: ELF loader,http://blog.schmorp.de/2015-06-08-emulating-linux-mips-in-perl-1.html,emulating linux mips perl part elf loader,emulating linux mips perl part elf loader staticperl posix shell grammar gut,document first published last modified emulating linux mips perl part elf loader real reason wanted blog able talk interesting thing sometimes publish write stuff might interesting others would nt warrant making formal release software packageso today write mips cpu emulator emulates enough linux kernel enough elf loader able run statically linked programsuhm would one perl run dash bash ie posix shelluhm would one want well run perl configure script course uhm use bash directly ah run configure native window see staticperl could made work itthis quite succinctly trail thought led silly project reverse order bit complicated proper order staticperl nt work natively window build perl using configure script nt used window wondered somehow worked would run posix shell wondered nice would posix shell written perl longstanding tradition try replace unix utility program written perl studied posix shell grammar quickly found grammar fun ca nt split lexing parsing easily would painstaking process parse shell script octet octet instead able write nice regexbased grammarso wondered maybe compiling dash llvm emulating virtual machine code perl well llvm intermediate code far trivial wondered maybe gcc backend might result easier emulate machine language like mix backend somesuchwell quite research decided mips backend mips instruction regular compiler easy find would nt even bother building cross compilation environment latter failure nobody us mips anymore later architecture way complicated thoughtguts ok code part download link want see full version overall needed three distinct functional part elf loader cpu linux kernel apilet start elf loader sub mipsexec path argv envv auxv surprise sub take path argument vector environment vector elf auxiliary vectorthat call cpu reset memory zeronext load actual binary maybe obvious due power perl used pas binary string reference case emulator used binary data section instead external file file open fh path local fh follows pretty boring elf header parsing mostly checking endianness architecture bit msb elf version eq substr file die elf file wrong class encoding version type machine undef entry phoff undef undef undef phentsize phnum unpack nnnnnnnnnn substr file type die file executable machine die file mips big endian reference elf header dash binary look like elf header magic class data complement big endian version current osabi unix system v abi version type exec executable file machine mips version entry point address start program header byte file start section header byte file flag noreorder pic cpic size header byte size program header byte number program header size section header byte number section header section header string table index done actual work start parsing program header tell loader load part file executing themelf complex enough needed gracefully degrades simplicity simple case static binary reference program header dash look like program header type offset virtaddr physaddr filesiz memsiz flg align reginfo r load r e load rw gnustack rwe code simply iterates copying file data emulator memory section type load slightly complicated way emulator represents memory phnum type offset vaddr physaddr size memsz flag align unpack n substr file phoff phentsize type die dynamic loading supported next unless type next unless size size w unpack n substr file offset vaddr mem addrshift addrmask w simple array bit word would suit emulator quite nicely would wasteful ram memory map quite sparse almost unused memory heap stacktherefore memory represented twolevel tree top level array mem entry every memory page either undef signal memory allocated reference another array bit value actual memoryso address get corresponding bit word sub addrshift sub addrmask mem addrshift addrmask needed store bit word bytesthis representation requires array entry represent full bit address space quite manageable medium speed penaltythe memory map virtual machine look like bit arbitrary work space elf segment heap malloc etc stack argv envv auxv space argenv string next reset cpu tell start execution program entry point taken elf header come real hard part setting stack kind includes argument environment auxiliary vector sub stack str stack ptr stack addint sub memset ptr pack n ptr addstr sub addint str memset str str length addint scalar argv addstr argv addint addstr envv addint auxv addint addint auxv addint addint see work helper sub push ints string onto stack area followed pushing argument environment aux vector code look simple harder research good layout program headersnote also code cheat bit instead calculating exactly much space allocate string simply put string stack vector pointing directly stackhaving done finished running actual cpu left callerhow used simple case would tun run external file say dash mipsexec tmpdash run argv map env key env load file tmpdash pretend call run remember executable name first argument vector entry distinct dash really care whether first character name decide whether supposed act login shell otherwise perl script argument passed well environment nt bother auxiliary vector code maintain really mental masturbation maybe never know might need use realhere another example run simple benchmark script mipsexec tmpdashmipsel sh c done done map env key env case add actual mips binary data section perl script change executable path passed pass first argument file data local binmode data data file data unshift argv else file argv mipsexec file argv map env key env loading left actually emulate damn cpu today folk next part look linux kernel emulator followed cpu emulator finally part tied together download
174,Lobsters,perl,Perl,Hacking on Rakudo Talk from Chicago.pm and Milwaukee.pm,https://docs.google.com/presentation/d/1JVJfNlCQL7crJytbKsdlf7Jw4c4dMScjogHLkZuOwcs/edit?usp=sharing,hacking rakudo talk chicagopm milwaukeepm,,javascript nt enabled browser file ca nt opened enable reload
175,Lobsters,perl,Perl,Why is it hard to write a compiler for Perl 6?,http://perlgeek.de/blog-en/perl-6/2015-why-hard.html,hard write compiler perl,почему так трудно написать компилятор для perl perl rakudo perl compiler static v dynamic mutable grammar change parse metaobject programming meta object mixing compilation run time serialization repossession general featuritis,russian translation available пост доступен на сайте softdroidnet почему так трудно написать компилятор для perl today deceptively simple question harder write compiler perl programming language answer simple yes harder work many language involved question let take look first point organizational perl nt yet fully explored formally specified much stable used le stable say targeting even disregard point target subset example rakudo perl compiler implement right wait year target first perl language release point remains valid let look technical aspect static v dynamic perl static dynamic corner example lexical lookup statical sense resolved compile time optional compiler properly support native type must resolve compile time also expect compiler notify u certain error compile time must fair amount static analysis hand type annotation optional pretty much anywhere method late bound compiler must also support feature typically found dynamic language even though method call late bound composing role class compile time operation mandatory compile time analysis mutable grammar perl grammar change parse example newly defined operator also invasive operation defining slang macro speaking slang perl nt single grammar switch back forth main language regexes character class inside regexes quote dialect might think since grammar extension done well perl grammar force parser interoperable perl regexes grammar point might well use parsing whole thing get level minimally required selfhosting metaobject programming language like c behavior object system hardcoded language compiler work assumption optimize heck perl object system defined object class meta object another layer indirection must handled mixing compilation run time declaration like class also begin block righthand side constant declaration run soon parsed mean compiler must able run perl code compiling perl code also way round eval importantly must able run perl code finished compiling whole compilation unit mean nt even fully constructed lexical pad nt initialized variable need special static lexpads compiletime usage variable fall back also object system able work type nt fully declared yet lot trickiness involved serialization repossession type object defined meta object mean precompile module even setting mass builtins compiler serialize type meta object including closure idea hard correctly serialize closure class mutable another module might load precompiled module add another method otherwise mess compiler serialize fact second module loaded object first module modified say serialization context second module repossesses type many way go wrong general featuritis one many perl motto torture implementor behalf user demand static dynamic typing also functional feature continuation exception lazy list powerful grammar engine named argument variadic argument introspection call frame closure lexical dynamic variable packed type direct interfacing c library example phasers code automatically run different phase program feature nt hard implement isolation combination real killer want fast right
176,Lobsters,perl,Perl,Linear? Yeah right,https://jeffreykegler.github.io/Ocean-of-Awareness-blog/individual/2015/03/linear.html,linear yeah right,tue mar linear yeah right linear marpa section end believe marpa paper getting plausible nearcertain still convinced comment marpa google group official web site maintained ron savage marpa web site appendix technical detail limited case know language peg grammar actually par marpa paper direct link entry,tue mar linear yeah right linear claimed new parser marpa linear vast class grammar going well beyond traditional parser skepticism justified come parsing algorithm lot time complexity claim handwavy misleading plain false post describes someone exercising appropriate degree skepticism might conclude believing marpa claim reasonable prudent thing marpa linearity claim seem comparison parser practical use today bold marpa claim linearity every class grammar yaccbison peg recursive descent currently claim linearity considerably mathematical detail claim section end seems good true believe important thing realize assessing believability marpa time complexity claim new already proved longaccepted paper refereed literature time complexity claim proved joop leo algorithm two decade ago marpa derived leo algorithm time complexity claim proved leo algorithm said marpa time complexity claim seem bold objective assessment fact bit yawn claim seem surprising lot people unaware leo result surprising sense someone avoided hearing radio wave would surprised learn communicate instantly someone side world little prove marpa paper proof marpa made many implementation decision change leoearley algorithm none change produced better time complexity result claim change leoearley algorithm way slowed convince claim reworked original proof leo earley changing reflect change demonstrated result leo obtained still held proof kind introduce new mathematical technique simply take previous result march wellknow mean called tedious journal need conserve space usually omitted especially case marpa time complexity proof result intuitively quite plausible getting plausible nearcertain let say going work every line marpa admittedly tedious proof seen result intuitively plausible long nt reject previous literature better merely plausible aside many people misunderstand phrase mathematically proven especially applies branch math like parsing theory fact proof paper often contain error usually minor nt affect result hand jay earley paper one best computer science paper ever published also contained serious error error slipped past phd committee referee mathematical argument proof allow u achieve absolute certainty improve degree certainty second way dramatically increase degree conviction marpa linearity claim quite simple create example problematic grammar run time satisfying mathematical proof set test grammar exhaustive ca nt find counterexample marpa linearity claim among grammar interest help lift level certainty certain practical purpose much increase certainty achieved without bothering run test marpa wide use point marpa going quadratic grammar claimed linear grammar practical interest would likely noticed still convinced let suppose brought level certainty need use marpa mean reasonable thing continue struggle work restriction traditional algorithm right absolutely ok nt believe marpa preserve advance power speed made leo mean parser stay underpowered simply mean direct implementation leo bypassing marpa looking implementation leo algorithm think may end coming back marpa reasonable choice marpa additional feature include ability use custom procedural logic recursive descent marpa worked lot implementation detail comment comment post made marpa google group irc channel marpa freenodenet learn marpa official web site maintained ron savage also marpa web site appendix technical detail talked algorithm class grammar linearity claim nt give detail folk nt interested section yacc linear grammar class called lalr subset another grammar class called lr willing hassle glr bison claim linearity lr recursive descent technique algorithm topdown lookahead therefore seen form k k depends implemented practice suspect k never much bigger usually pretty close packratting peg made linear everything par catch limited case know language peg grammar actually par current practice mean peg grammar must peg literature look technique extending far llregular implementation remains seen algorithm described practical marpa paper contains proof based proof claim joop leo marpa linear lrregular grammar lrregular grammar include lr k grammar every k marpa linear lr lr lr etc lrregular also includes llregular every class grammar discussion peg literature already parsed linear time marpa also safe conclude grammar parsed anything reasonably described recursive descent parsed linear time marpa posted direct link entry
177,Lobsters,perl,Perl,The Perl Jam: Exploiting a 20 Year-old Vulnerability [31c3] - YouTube,https://www.youtube.com/watch?v=gweDBQ-9LuQ,perl jam exploiting yearold vulnerability youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature
178,Lobsters,perl,Perl,Why Perl Didn't Win,http://outspeaking.com/words-of-technology/why-perl-didnt-win.html,perl nt win,perl nt win perl perl nt nt perfect scalar list context modern perl ease beginning better eventual perfection library dominance historical inevitability cpan maintenance greenfield concern different take lot work lazy testing difficulty hiring good developer would nt people create new thing perl starting oh let say july technical quality secondary consideration product market fit perl perl bridge finally announced abandoned javascript good part perl practical guiding theme swift,page updated august perl nt win early day public internet felt like living science fiction world bruce sterling william gibson whether finally able download web browser image support slipknot realizing logged machine australia middle farm country usa responding ftp command everyone learned type old computer running wordperfect little plastic keyboard overlay giving formatting reveal code made word processing make sense html easiest thing world learn even best design sensibility could center thing table author remembers first time came across web page changed reloaded university student set official homepage band every new page view displayed different snippet lyric web page nt simple document program science fiction living future came form server side processing author left college learned java scrounged together spare part work build linux machine learned internet nt magic science fiction program protocol greatest magic protocol time http especially combined new html extension form submission common gateway interface let web server launch program process form parameter produce fresh batch html cgi program could anything could write shell script hpux irix box could write c netscape tried make money selling server software could write javascript oh everyone laughed like almost everyone late internet boom author learned perl perl perl already everywhere least serious machine wanted connected internet microsoft still struggling understand want connect internet microsoft started wonder would want computer nt behave exactly like tablet legion gamers cringe consider halo must tap tv screen fight covenant prometheans perl everywhere good language system administration bridging gap c shell shell terrible language mostly nt run way everywhere nt handle thing like variable function well perl everywhere least unix world good manipulating string back day http html stringy protocol get string parse emit string mess simple mess small mess could get away importantly could get work done figured gone wrong string handling c perl version language exemplified second edition book called programming perl could walk room full techie cubicle find book least one desk dogeared full postits group couple dozen engineersprogrammerstechies day one running little webserver linux box desk odds using perl code nt great lot copied pasted modified downloaded modified kind technical support form stackoverflow mostly thankfully almost entirely humorlessly supplanted worked perl advantage momentum ubiquity efficacy day lost perl nt nt perfect make argument correct people nt learn perl sake learning perl also make argument people nt really learn perl learned enough modify program almost worked right work little bit righter argue missing important point people always look different web day bigger framework choice google stackoverflow materially different perl language quirk flaw still flaw definitely quirk perl ease using external binary within program made great gluing thing together multiple documented case security hole unintentional bug people using backticks scalar list context knowing difference exposing sensitive information people writing code copy paste modify nt learn nuance perl philosophy make context important part people writing code fashion nt learn philosophy language part perl tutorial really explained philosophy language accessible fashion modern perl ease beginning better eventual perfection execution model cgi program simple awful simplicity web server would launch new separate program provide data received web browser program would listen data produced program send web browser nt sound awful reading probably replaced couple smartphones many time memory processor power web server back day launching new program every page requested little bit expensive site became little bit popular even though model operation conceptually straightforward understand launch program configuring web server execute program written language user nt easy sound good system administrator would set web server give every user specific directory put cgi program run expose world security hole linux box desk system administrator learn directory structure permission path detail web server compiled configured relatively straightforward lot learn lot way thing could go wrong none perl fault consequence unix model meeting internet lot intelligent people figuring simplest way get something working quickly without necessarily thinking best way build something would last year counting see also dns smtp ftp nntp imap imaps ssl tl et cetera web program easier write perl c perl language made easier dominant execution model perl program slow expensive difficult configure web server program however modified program could make connecting different programming language fact could put perl web server could simplify configuration program pay price loading every program anew every request modperl course modperl part making apache httpd web server configurable giving plugin architecture could write extension web server customize every part web server request response cycle modperl became le way make writing deploying perl program simpler faster cheaper way write extension apache httpd perl instead c perl better language web programming c great nt addressed part problem nt address part problem installing configuring modperl nt trivially easy downright difficult case could get speed boost using trading memory front le memory used later every program attached modperl could potentially access memory space every program attached modperl even program belonged different user modphp solved problem php terrible language back good mostly making simple template represented web page php memory model fit modphp better though php deployment model lot simpler one wanted write apache httpd extension php template language pressure make modphp anything simple template processor happened easy deploy fact easy deploy people used system administrator set easy could nt people began answer question make dynamic web page php answer nt mostly answer question configure web server deploy cgi program wrote php never answer question bribe system administrator enable cgi execution web server modphp may best way deploy program easiest way nonprogrammers deploy program still difficult beat people may argue gitbased hosting service heroku even easier people nt learn cv let alone api key software service dependency manifest branch management distributed version control system deploy simple application use ftp drop php file shared folder php nt get much respect nt real programming would want use software deliberately simple able implement templating language could use software let write plugins customize entirety apache httpd request response cycle would could library dominance historical inevitability perl also distinct advantage cpan massive library free software download use modify deploy program perl right long time perl advocate long argued presumably still large library cpan reason use perl may true one point argument get weaker time module ecosystem advantage contains need get job done need library nt exists choice without switch another language toolkit library build language community enough skilled people time desire inclination permission write library module ecosystem grow nt enough people ecosystem new ecosystem decline library wo nt get written olden day could expect find perl module anything wanted scrape google buy sell thing ebay check amazon rank whatever could also find perl module format text work ancient mainframe data specification manipulate image weird format whatever could find enough people using perl number small percentage user capable interested producing module would need large absolute number user grow library library ecosystem like python ruby nodejs grown large recent year may started fewer module existed cpan time given enough user absolute number eventually get library need keep mind one piece nuance module written nt necessarily module written le useful module understands gopher archie protocol year ago whereas unlikely anyone would prescient enough produce perl module understands stripe json rest api word tend get year module people need cpan dominant nt mean people want maintenance greenfield concern different concern get subtle consider lifecycle product begun different time new project started likely use different component protocol design pattern project begun example orms available rare web framework available rare user management credit card payment system available well nt mozilla persona stripe module used project first begun maintained day probably reflect module used project first begun tomorrow possible continue refactor design implementation existing project evolves year take advantage new technique new opportunity ask often really happens much work willing put convince business interest developer instead eventually scrapping thing favor fresh rewrite new language least new architecture implication programming language difficult prove conclusively simple explain ecosystem focused maintaining existing project creating new project le attractive new project even true socially technically ecosystem buzz write next project nodejs swift go cover favorite rag attractive one first heard year ago yep still using c google take lot work lazy new dilettants nt necessarily care thing experienced developer experienced developer ought think safety simplicity long term maintenance cost design decision dabbler want get thing done easily possible without learn need week spent figuring configure web server week wasted could next thing without bos breathing neck ease getting started big ease finding module plugins whatever kind code download modify really important perl community good job early cpan still advantage testing documentation standard nt easily replicated perl lost switched maintenance mode laziness nt virtue trying curate community vice laziness something community cultivate behalf community member releasing module community free software lot work enables greater laziness among people reporting fixing bug writing documentation enabling laziness others act love open source proponent want believe enlightened self interest eventually somehow fill gap laziness enabled hard work vice versa one point superluminary project linux kernel example one easily point ten thousand le successful project example making work difficult yes usain bolt fast people world nt fast usain bolt great degree accuracy decimal placement enlightened self self interest depends mundane concern day job need day job need day job pay mortgage buy food child specific concern related right creating new thing concern might module new technology technique people want right maintaining existing code concern might refining existing thing people might wanted started project many year ago word ecosystem slowly become le attractive base new project unless continual focus developing new project nt even take account difficulty hiring good attractive ecosystem language hire junior developer would nt people create new thing perl starting oh let say july people make argument perl always stopgap technology syntax semantics ignore argument consider dominance php especially javascript neither language example careful language design either language demonstrate modern research modern programming language one might joke language stuck computer science best yet case technical quality secondary consideration product market fit language succeeded everywhere language continue everywhere everywhere perl dominated unix better product market fit anything else way first thing booted shiny new sun workstation install gnu tool better sorry bsd fan even something simple sort h kind usability improvement made worth avoiding builtin sunos stuff even sun studio nt expensive le useful gcc changed perl forked july easy criticize perl project approach anniversary without anything productive show important discus failure perl doomed perl least language attempt make new interesting failure problem nt apparent solution seemed obvious rather let perl stagnate start new project lot excitement harness community energy make improvement would allow perl better platform new development new vm better default performance improvement simplicity better library support exciting thing put shoe someone trying choose language new project august heard perl beta cool maybe start perl port perl benefit latter obvious plan compatibility layer wo nt throw code away beta fine heard plan something end year little disappointing okay going merge perl perl okay sticking perl beta delivery date beta fact delivery date specification perl way maybe worth playing everyone know perl future perl one tell migration strategy new code write today perl use perl six month project fizzled perl perl bridge finally announced abandoned maybe year perl ever replace perl one tell getting little suspicious month away since july maybe fix bug year still paying attention every year passed perl produced press release actual code attractiveness perl platform declined sure still user sure still people starting new project modern perl movement decent attempt bring wider enthusiasm back ecosystem dispelling worst myth language modeled javascript good part without realizing perl lacked javascript insurmountable advantage ubiquity could predicted objectivec would interesting year iphone came nt clearly defined future let alone articulated one argument perl practical guiding theme subtler difficult make specific current design principle perl explore way modify grammar programming language language designer make backwards incompatible change subsequent version without making program written language incompatible also allowing user make local slang without adopting sexpressions defining future language across chasm version split difficult dangerous python done adequate job taken year initial announcement python point currently maintainer believe sun set python serious maintenance work python existed broadly usable form several year wait perl advocate protest marketing message perl long perl perl sister language perl intent supplant perl toto perl plan cease exist problem line least decade late continues split potential adopter base stated technical reason existence perl still addressed perl may never addressed even flaw material concern potential adopter direct obvious concern take mental space present risk worse yet question still arises perl community whole would look like perl ever released generally usable form would compatibility layer revived ponie project would perl library support people come expect perl would documentation example code tool knowledgeable support channel modern language need new user perl come existing perl developer go one answer question enough information even possible speculate responsibly whether answer would useful decade ago none say impossible perl reinvent start gain user possible one perl worksinprogress reach point usability gain stability maturity useful product documentation library support uptake yet every passing year le likely alternative grow number desirability goodness sake time writing swift programming language public le week already user perl swift entirely built technology invented since perl announcement language win compelling enough used new thing solely technical concern concern language community ecosystem
179,Lobsters,perl,Perl,The Mid-Career Crisis of the Perl Programmer,http://www.modernperlbooks.com/mt/2014/02/the-mid-career-crisis-of-the-perl-programmer.html,midcareer crisis perl programmer,hn proggit begin everything perl monk test simple test test builder free software hobby parrot sucked lot effort rolling ruby rail resurgence perl nobody noticed moose dbix class mojolicious catalyst modern perl javascript resurgence technical book publisher modern perl rust test builder golden handcuff modern perl consultant value investing individual investor make smoothie finding perl job chuck moore learn job fashiondriven chasing programming fad bad business programmer alike robert buels technology immune real question,hn tl dr innovation mean getting anonymized social network marmot acquired big sv put ad datamine user proggit tl dr spent time learning write crud app mediocre template system dependency injection framework orm haskell rail erlang scala rail python node clojure julia instead mastering one tool learning solve problem begin shut music career career generous word made money musician enough call professional certainly enough pay rent buy food talked way color laserjet group hp wrote code printer group could little awt app even though swing come would nt run linux quite customer support tech record data customer problem networking group asked write program email customer whenever web site new technical article published ten line shell script written whatever hpux supported box order magnitude le java version could never convince finish realized enjoyed playing hpux linux box desk far appreciated learning way paper could jam postscript driver could render thing wrong switched system administration programming different state altogether music degree hardly compared c degree wanted fighting fire three month automating away remaining problem lot time hand web suddenly interesting modperl come applet obviously working picked perl started couple small free software project never went anywhere everyone used write template system day found source code everything predecessor sent couple patch carly fiorina decided save money paying system administrator eventually started working dot com produced perl monk promptly imploded wrote book cool cover probably nt read first book english blogging title wrong anyhow last gasp first dot com era everything seemed like good idea certain context almost including tsa writing book equal part frantic research tedium first many move designed convince action positive effect cruel uncaring universe took michael schwern call unify internals test simple test result test builder revolution everyone perlqa list revolution perl general kind revolution look back think wow obvious revolution seems like widespread common sense like good drink water maybe smoking deleterious health effect revolution let thousand blossom test module bloom people could solve specific testing problem share solution providing soil blossom could bloom worked together almost effort module writer part important principle api design handle difficult tedious tricky part low level everyone get right ruling people thing higher level make think layering right consulting work based strength free software work perl making name answering question site help get name community build networking connection getting patch two dominant project help well career took lurch sideways spent time editor concentrating free software technology free software hobby important keep programming skill fresh increased amount time spent contributing free software project around writing book parrot sucked lot effort one developer said separate conversation far back sure long slog one getting compensated much done next month lot interest bookstrainingconsulting good position rough time perl helped push ruby snowball back hill rolling ruby rail nine year ago perl stuck another almost three year hope still new major version would turn language fortune around meanwhile testing culture infected core language well cpan like unseen brigade healthy gut fauna nt leave dinner table without growth root foundation effect would take time pug helped pug historical curiosity long time resurgence perl nobody noticed world stopped waiting new major version perl perl came several new major version cpan continued reason stuck perl alone moose probably singular reason significant new project perl mean take credit away project dbix class mojolicious catalyst project well worth mentioning moose revolution noisy flashy overthrow dominant paradigm sense fidel rest cpan one get credit unless sort weird countercultural rebel like giving oligopolic corporation money wear tshirts icon image metaphor rode away point motorcycle tour south america sorry revolution needed name modern perl javascript resurgence going awful language everyone use nobody like sure squint hard enough ignore awfulness disciplined write code bad apologia sound familiar feel bitter keep mind unlike perl choice whether use javascript client side figured great time leave increasingly depressing world corporate technical book publishing work technical book publisher nt cost u ten thousand dollar get first copy door nice make revenue book like modern perl still lot better think writing publishing book hobby buy nice dinner instead never work unless count sleeping pile gold coin work book publishing driven semirandom lightning strike big hit right place right time like poker player need know go important need know get one reason tech book publishing market awful ruby rail hottest thing since jsp market reached peak sale even publisher still pumping kind ancillary book around rail pumped around perl even talking puppet razorfish drone delivering fresh vegetable even oneclick order become bubble pop taking countless job lot paper money inflated stock market maybe expect hiring member adolescent power fantasy fiction cult manage world largest economy keep mind music degree economics degree everything obvious retrospect one reason nt modern perl testing book ca nt convince give increasingly valuable weekend evening thing could either much relaxing spending time friend family much healthier cooking exercising profitable investing point might programming rust book find rust fascinating nt wish ten year ago parrot said writing publishing modern perl good thing giving away free good thing maybe would made much revenue spent amount time slinging milkshake local sbux satisfied social good done giving away pdfs hosting web site anything else done career perhaps test builder influential code standpoint start going line thought feel complex insertlengthygermancompoundphilosophicaltermhere emotion large project worked seemed influential important time nt actually gone anywhere worst modern perl gave perl practiced best programmer concrete name best helped existing perl programmer hopefully new one avoid worst part adopt best part golden handcuff modern perl consultant brief foray running nonpublishing business hey want give value investing individual investor family recipe make smoothie guide link somewhere great revealing starting business nothing difficult think one reason many small consultancy consultancy never manage turn brilliant idea shipping product lucrative chase consulting dollar difficult invest product may pay nt first time ran either first job dot com crash succeeded producing product would owned lucrative vertical market unfortunately consulting dollar ran could finish proof concept jumpstart presales course investor also wanted rewrite perl backend pythonwx client application java run point sale system small business consulting good lucrative lucre tempting consultant charge rate far excess normal hourly salary overhead may lot spare time contract nt get pto benefit nt pay negotiate contract pursue work may may materialize find good client treat like combination pope queen dalai lama trustworthy client pay time nt argue little detail contract better gold yet suppose budget eight nine month steady work luck contract give twice people deal well boom bust others nt mechanic budgeting easy psychology riding business cycle difficult difficult look opportunity objective eye contract great money look nice represents lot freedom contract awful far stability salaried job represents lot security finding perl job perl programmer look fortunate one sense spent past year working perl deep level many many project many job many domain also made money working python sql shell ruby c c javascript assembly java sql plpgsql visual basic php latex sure left least one two professional programmer interest professional development someone physiologically unable program occasionally outside dabbled enough call expert way call perl enough nt completely embarrass conversation chuck moore tried convince value writing operating system yet cv one technology keep coming perl secret spent time like language used flaw even though couple hundred entry site reveal nt like know play strength like community people like tim bunce karen etheridge rik signes andreas könig jess robinson tatsuhiko miyagawa frankly irreplaceable elsewhere exceedingly productive perl way would take get productive language get decade half experience get least hour practice learn program tell give reference speak positive term refer people tell helped solve problem helped teach something helped think problem better way also find people say sarcastic moody bitter better worse reading pretend important question cv ca nt answer important question rifling small subset professional work github cpan wo nt tell wo nt tell mistake made nt see exist wo nt tell thrashing around nt git let squash existence wo nt tell churned line code one afternoon marathon coding session compiled second try nt touched since work one need touch asking write sorting algorithm whiteboard wo nt tell much either beyond person actually seem like know program still thing interview ca nt look cv tell whether kind person go beyond task transcribing software architect dictate project manager teased director sale forced enterprise sale representative admit promised customer next release tell would find environment frustrating ca nt predict page half whether enthusiasm writing best darn medical insurance billing code ever whether enthusiasm translate attempt delight user even never think bug frustration squashed eliminated escaped production ca nt tell reading perl ruby postgresql ca nt even tell reading code risk take hiring someone nt least important answering question make decent attempt write something resembling code whiteboard even though muscle memory tuned several year vim ostensibly professional care tool automation making easy easy work typing question well fit team perl job unique special snowflake programmer nt fungible nt many difficult programming task need world singular expert subject fact degree say music computer science stanford berkeley mit cmu probably keep computer vision ai research compiler design however much garlic google recruiter want believe honor spend week answering question ping pong ball sorting phone book opportunity babysit data center full machine dedicated slapping ad world information secret stay programming preference work language expertise preference believe fashiondriven chasing programming fad bad business programmer alike world nt changing time soon see find perl job one way create starting company create recruiting client without strong technology preference create introducing perl slowly existing job making irreplaceable find one existing company using perl read move amsterdam spend time maintaining codebase get lucky create something amazing compelling useful people ca nt use like modperl movable type let throw cpanel catalyst fifteen fourteen even ten year ago might railed inherent unfairness cruel uncaring universe technology driven fashion technical superiority le important buzz tried approach career ponder midpoint career asking get c degree would nt effective get degree finance manage boutique legal firm making thought buying bakery couple year ago took robert buels minute talk broader question pattern trend come technology immune apart cobol mumps want program cobol mumps rest life even rest afternoon look programmer solve problem managed team managed written documentation written test day deleted code written glad day solved customer problem writing code day elbow deep profile valgrind report day best thing done add index column database totally worth research reach point solution preference technology sure also experience hire programmer getting preference experience bias maybe picky maybe natural reach midcareer crisis say arguing syntax best internet poor use time could spend walking dog playing pinball eleven year old nephew celebrating housewarming friend maybe acceptable cynical say professional mean even personal interest managing clinical research record paying enough bring knowledge experience hardwon judgment bear solve problem effective trustworthy way probably going spend night weekend thinking alternately perhaps bought bakery sure hire people trust pay lot revenue get every day health inspector land zoning price dairy product dealing vcs underpay dangle ever diluted rsus front chance acquihire payout slightly pay paid market rate start client want world week hour teenager albania charge hour least speak english hr department see perl sprinkled liberally think either system administrator started someone fell time warp way internet computer har har javascript real language would kindly join u new spring lineup real question someone whose life obligation preclude selling everything living beach thailand belize year evaluate career reaching midpoint keep programming fresh market someone solves problem instead someone transcribes idea language du jour leave programming altogether nt answer anything decade half experience given ability even ask question
180,Lobsters,perl,Perl,Take the 2015 CPAN Pull Request Challenge,http://blogs.perl.org/users/neilb/2014/12/take-the-2015-cpan-pull-request-challenge.html,take cpan pull request challenge,take cpan pull request challenge adoption list,take cpan pull request challenge join cpan pull request challenge start month emailed somewhat randomly selected cpan distribution one month submit least one pull request nt experienced perl programmer cpan author githubber goal help others possibly learn something hopefully bit fun want sign email neil bower dot com letting know github username pause id one cpan distribution taken list github repository meet criterion adoption list wo nt get distribution wo nt get author twice give list namespaces nt want get within reason get distribution ca nt work able request new one also welcome ask whatever help want pull request large small want idea contributing distribution way might documentation test test coverage fixing known bug adding new feature something else also hoping least participant blog time reading others done might help others looking inspiration
181,Lobsters,perl,Perl,Using Rust from Perl and Julia,http://paul.woolcock.us/posts/rust-perl-julia-ffi.html,using rust perl julia,using rust perl julia runtime removal rust post julia getting started using perl using julia julia changelog,using rust perl julia recent runtime removal utilizing rust library language gotten even better post going take rust library used post use perl julia getting started cargo new point cd point mkdir perl julia touch makefile perlpointspl juliapointsjl fix cargo create instead rlib cargotoml package name point version author paul woolcock paul woolcockus lib name point cratetype dylib also cargo appends fingerprint lib name let use makefile fix unchanging lib name makefile cargo build ln f pwd targetlibpoints pwd targetlibpointsso ok let get started writing point library first bring trait scope stdlib need define data structure srclibrs use std num int float deriving copy pub struct point x int int struct line point point impl line pub fn length self let xdiff let ydiff xdiffpow ydiffpow sqrt rustc next need define function export use language nomangle pub extern c fn makepoint x int int box point box point x x nomangle pub extern c fn getdistance point point line length rustc finally add quick test make sure get result everywhere cfg test mod test use super point getdistance use std num floatmath test fn testgetdistance let point x let point x assert getdistance abssub rustc compile done writing rust library cargo test compiling point file homepaulprojectspoints running running test test test testgetdistance ok test result ok passed failed ignored measured doctests point running test test result ok passed failed ignored measured make cargo build compiling point file homepaulprojectspoints ln f homepaulprojectspointstargetlibpoints homepaulprojectspointstargetlibpointsso using libpoints perl using ffi raw instead x ffi raw perl module wrap libffi make easy usrbinenv perl use use strict use warning use ffi raw makepoint ffi raw new targetlibpointsso library makepoint function name ffi raw ptr return type ffi raw int ffi raw int argument type getdistance ffi raw new targetlibpointsso getdistance ffi raw double ffi raw ptr ffi raw ptr onepoint makepoint call twopoint makepoint call result getdistance call onepoint twopoint say result let run see get perl perlpointspl using libpoints julia julia even easier use rust library c ffi builtin language function makepoint int b int ccall makepoint targetlibpoints function name library location ptr void return type argument type b argument end function getdistance ptr void b ptr void ccall getdistance targetlibpoints ptr void ptr void b end makepoint u makepoint println getdistance u julia juliapointsjl paul woolcock dec changelog
182,Lobsters,perl,Perl,"Why Lisp macros are cool, a Perl perspective (2005)",http://lists.warhead.org.uk/pipermail/iwe/2005-July/000130.html#,lisp macro cool perl perspective,iwe lisp macro cool perl perspective iwe warheadorguk mjd plovercom hopdiscuss plovercom,iwe lisp macro cool perl perspective ben tilly iwe warheadorguk fri jul mjd one wellknown perl hacker also written good book called higher order perl take great lisp macro system cheer ben forwarded message mark jason dominus mjd plovercom date jul pm subject hop v sicp hopdiscuss plovercom bennett todd blinded superficial ickiness lisp ref lwall visual appeal oatmeal fingernail clipping mixed think said perl review interview matter personal taste people nt like lisp syntax several major technical advantage competitor one obvious advantage hardly syntax learn enough lisp syntax write useful program ten minute driven home first year college hanging around fratenity house talking paul one brother physic major taking class given every spring covered four different programming language three week paul told liked lisp hardly syntax remember simple everything expression said every expresion get evaluated nt want evaluated put quote simple bigger advantage make possible write lisp program reliably generate transform lisp source code used lisp hard imagine tremendously useful people come perl c world deep suspicion source code transformation invariably unreliable c macro system example unreliable ca nt even define simple macro like define square x x x without falling afoul sort horrible trap first realize wo nt work expands wanted need instead define square x x x know wo nt work square expands wanted need instead define square x x x know wo nt work x square x expands x x wanted need instead int mytmp define square x mytmp x mytmp mytmp work ints ca nt square really fix use nonstandard extension something like define square x typedef xtype x xtype xval x xval xva l get trivial macro like square work want anything interesting best strategy give soon possible example let use c macro system define strswitch construction strswitch expr case foo dofoo break case bar dobar break default dodefault break transformed tmp expr strcmp tmp foo dofoo else strcmp tmp bar dobar else dodefault compile time c macro system insane ha ha ha ha year ago gave conference talk asserted c macro system blow goat dick remark since become somewhat notorious c fan hate think time would controversial sure even rabid c fan would agree c macro system blow goat dick reason described short hardly anything useful thing difficult complicated fraught perilous trap unwary really thought would say yes love c spite awful macro system usual forgot rabid programming language fan like defend system matter dysfunctional long dysfunctional sytem speaking dysfunctional system think mentioned perl review interview source filter perl unreliable recently reading code sub module chip salzenberg perl master wizard master wizard documentation say quite bluntly bug module source filter source filter always break right always break everyone know always break take granted lisp source filter never break never lisp assignment operator macro implemented source filter every time perform assignment invoking macro analyzes source code compile time rewrite something else source filter even unreliable lisp one assignment would compile wrong none program would ever work properly work properly reliable source filter lisp lisp attain reliability programming language syntax complex macro take apart program syntax analyze reassemble access program parser depend heuristic bestguesses sometimes cutrate analysis wrong break lisp different lisp macro access parser really simple parser lisp macro handed string preparsed piece source code form list source lisp program string list lisp program really good taking apart list putting back together reliably every day extended example lisp macro called setf performs assignment simplest form setf setf x whatever set value symbol x value expression whatever lisp also list use car cdr function get first element list rest list respectively want replace first element list new value standard function incredibly name even worse car rplaca remember rplaca write setf car somelist whatever set car somelist really happening setf macro compile time examines argument see first one form car something say oh programmer trying set car somthing function use rplaca quietly rewrite code place rplaca somelist whatever also function nth get nth element list want modify element list use setf nth somelist whatever setf macro see say oh trying set third element something know use special nonstandard builtin function setnth quietly rewrite setf form setnth somelist whatever different lisp system might rewrite differently symbol also property sort like builtin hash every symbol one hash attached property name value access value associated foo property symbol x get function get x foo set value associated foo property oh use setf rewrite setf get x foo let x foo multiplevaluebind commonlisp put nt know work suppose defined annoyingness x function get degree x annoying setannoyingnessof x set annoyingness x use defsetf facility setf annoyingness something expands compile time setannoyingnessof something whatever else prefer nobody know setannoyingnessof use setf usual good thing setannoyingnesof pretty annoying compare perl limited set thing appear lefthand side assignment x x x x x x x x x po vec substr big deal recent year extended f would work f specially declared lvalue maybe would like work x foo bar baz x bw w far raw leave foo far raw x bad impossible unless perhaps gurusamy sarathy dave mitchell lisp matter defsetfing match function maybe would like work perl sqrt x x contains bad impossible least extremely difficult maybe could something ridiculous like replacing builtin sqrt userdefined lvalue sub tied argument something oy lisp straightforward simple experience lisp summed next nothing still figured ten minute defmacro setsqrt place v setf place v v defsetf sqrt setsqrt defmacro defines new macro called setsqrt expects two argument place lisp jargon lvalue expression value v us setf set value stored place v v defsetf tell setf anyone ever setf sqrt something number rewrite setsqrt something number turn rewritten setf something number number get option say setf sqrt x eventually rewritten setf x x becomes also say setf sqrt car somelist set head list enable setf must able reliably analyze argument decide look like lisp uniform simple syntax render possible perl setf would take apart string figure punctuation meant hope nothing redefined weird way hope weird syntactic exception come ha hop preface said book paradigm artificial intelligence programming peter norvig includes section titled make lisp different describes seven feature lisp perl share six feature one missing uniform syntax norvig one technical reviewer hop asked one report spent little space book discussing source code generation think lisp expert would asked source code generation unreliable inadvisable every language except lisp
183,Lobsters,perl,Perl,New Class of Vulnerability in Perl Web Applications,http://blog.gerv.net/2014/10/new-class-of-vulnerability-in-perl-web-applications/,new class vulnerability perl web application,check point vulnerability research everything old new serious bug chaos communication congress return scalar array depending context,bugzilla security release today fix hole responsibly disclosed u check point vulnerability research grateful serious would allow someone create control account arbitrary email address bugzilla give group permission based someone email domain could privilege escalation update bst clear pattern commonly used add people particular company group using email address regexp like mozillacom used way bugzillamozillaorg allow mozilla corporation employee access eg human resource bug membership mozilla security group access unfixed vulnerability done individual basis could obtained using bug true bmo admin privilege bug actually quite interesting seem represent new perlspecific security problem least far aware new perhaps find everyone know u update bst everything old new level response including change cgipm suggest mostly faded collective memory work using serious bug example somewhat le serious bug caused pattern x hole check point going presenting vulnerability chaos communication congress december hamburg check analysis vulnerable code otheruser bugzilla user create loginname loginname realname cgi param realname cryptpassword password code creates new bugzilla user database someone sign cgi object representing http request made page issue combination two thing firstly cgi param call contextsensitive return scalar array depending context call ie type variable assign return value ability function perl mean feature let say called page follows instance parameter indexcgi foobar foobaz fooquux call param array context sigil represents variable array get array value value cgi param foo bar baz quux call scalar context sigil represents variable scalar get single value probably first one value cgi param foo bar context called code suspicion well exactly problem turn function called hash value assignment evaluated list context however result come back value value assigned part uthe hash set individual commaseparated scalar suspect behaviour exists close relationship list hash allows stuff like array foo bar hash array foo bar therefore assigning result function call hash value return value single scalar go would expect array second subsequent value end added keyvalue pair hash well allows attacker override value already hash specified earlier may already validated value controlled case realname string need validation loginname definitely already time code called case problematic code something like indexcgi realnamejrandomuser realnameloginname realnameadmin mozillacom would end overriding alreadyvalidated loginname variable giving attacker control value used call bugzilla user create oops found instance pattern code four exploitable degree maintain perl web application may want audit pattern clearly cgipm param call first thing look possible pattern could occur module use contextsensitive return feature generic fix require function call evaluated scalar context otheruser bugzilla user create loginname loginname realname scalar cgi param realname cryptpassword password say might wise ever allow hash value assigned directly function without call scalar
184,Lobsters,perl,Perl,Guess what this does (solution),http://blog.plover.com/prog/perl/barewords.html,guess solution,guess solution asked people predict article category progperl permanent link,guess solution week ago asked people predict without trying first would print perl le print two two five true false nt seen yet recommend guess test guess reading rest article people familiar perl guess print true guessed reasoning follows perl willing treat unquoted string two five string quoted also happy use operator converting string number usual way string looked like perl would treated nt look like decimal numeral perl interprets zero perl want issue warning warning enabled default since two five treated zero result comparison true string true selected printed far little bit odd excessively odd sort thing expect programming language le suck example python behavior although different equally peculiar although python require string two five quoted happy peculiar thing two two five happens false python operator overloaded completely different behavior string number perl number python string two two yield string twotwo program actually printed true expected would even false would found remarkable however program explanation two paragraph earlier totally wrong instead program print nothing reason incredibly convoluted bizarre first must know print optional first argument plan article optional first argument almost always bad move contrary usual practice insert perl print function invoked two way print handle b c print b c former print list b c filehandle handle latter us default handle typically point terminal perl decide form used specifically second form know one item printed rather variable containing filehandle print answer question complicated fact handle first form could either unquoted string name handle print could variable containing filehandle value print thing handle stderr print stderr b c print handle b c perl method decide whether particular print us explicit default handle somewhat complicated heuristic basic rule filehandle present distinguished trailing comma omitted filehandle allowed result arbitrary expression might difficult parser decide comma consider hypothetical expression print expression b c e intention expression b expression calculates filehandle value actually retrieved b part executed side effect remaining c e value printed allow sort thing would way confusing perl programmer rule filehandle expression present must short either simple scalar variable fh bare unquoted string right format filehandle name handle parser need peek ahead token two see upcoming comma example print stderr b c print immediately followed stderr could filehandle name stderr followed comma stderr taken name output handle print x b c print immediately followed simple scalar value x x followed comma considered one thing printed target print default output handle print stderr b c perl puzzle stderr look like filehandle followed comma compiletime error perl complains comma allowed abort want print literal string stderr must quote want print b c standard error handle must omit first comma return original example perl le print two two five true false perl see unquoted string two could filehandle name followed comma take first two output handle name evaluates expression two five true false obtains value true leading unary plus operator noop bare two five taken string constant compared numeric operator considered numerically zero eliciting warning mentioned earlier enabled thus comparison perl actually true resulting string true value string true printed filehandle named two previously opened filehandle say open two outputfile output would sent filehandle usual printing nonopen filehandle elicits optional warning perl mentioned enabled warning print silently fails yielding false value enabled optional warning would seen plethora unquoted string two may clash future reserved word e line unquoted string two may clash future reserved word e line unquoted string five may clash future reserved word e line name main two used possible typo e line argument five nt numeric numeric eq e line argument two nt numeric numeric eq e line print unopened filehandle two e line first four compiletime warning last three issued execution time crucial warning one end advising u output print directed filehandle two never opened output addendum keep thinking following remark edsger w dijkstra phenomenon take one two different form one programmer place oneline program desk another say guess observation must conclude language tool open invitation clever trick exactly may explanation appeal viz like show clever sorry must regard one damning thing said programming language intent different dijkstra describes programmer proud disgusted incidentally believe dijkstra discussing apl addendum never much sympathy school thought say always always enable warning every perl program think perl produce many spurious warning also think example part cogent argument direction article category progperl permanent link
185,Lobsters,perl,Perl,"Weekly changes in and around Perl 6 | Inlining, some more JIT, a bit of gtk and cairo",http://p6weekly.wordpress.com/2014/06/16/2014-24-inlining-some-more-jit-a-bit-of-gtk-and-cairo/,weekly change around perl inlining jit bit gtk cairo,lacuna expanse simple templating library perl like,wow week even done stuff ven active source code felt quite refreshing well least nice thing turned last day jnthn merged inline branch moarvm add ability inline simple bytecode segment caller bytecode thus getting rid nice chunk invocation cost sadly currently bail see exception handler return handler extremely common actual perl code thus improvement mostly visible nqp code added method cairo binding started gtkdrawingarea class binding whole lot stuff involved enough stuff place make cairobased animation work well also implemented supply combinator called ziplatest generate tuple apply custom sub every time new value come supply opposed zip combinator wait supply new value available lizmat whole bunch commits related compunitrepo friend exciting see whole potential infrastructure used example application bundled dependency single executable file kind thing brrt continued gsoc work moarvm time compiler current piece code used example running following subroutine loop sub foo nqp say oh hai return jit compiler turn whole function directly runnable machine code least eliminates interpreter overhead chirag agrawal reini urban pushed work optimization effort write barrier reini report performance improvement nqp test suite annotating class correctly work part parrot release planned tomorrow addition rakudoparrot going pas spectests pull request applied cool stuff dwarring could considered roll continuously writing spectests perl advent calendar past year kamil kułaga added utility program lacuna expanse written perl ecosystem michal jurosz added simple templating library perl ecosystem week post hope week productive pleasant like like loading related
186,Lobsters,perl,Perl,System Sleuthing - Using ptrace to Print Backtraces,http://hoelz.ro/blog/system-sleuthing-using-ptrace-to-find-syscall-sites,system sleuthing using ptrace print backtraces,favorite vim option directory english weakly typed language system sleuthing using ptrace print backtraces something lovely post ack devel trace syscall comment powered disqus,favorite vim option directory english weakly typed language system sleuthing using ptrace print backtracesstrace one time favorite command line utility day go nt reach something extremely versatile tool use inspect program program something get idea kind thing program explain running slowly could go strace fortunately nt julia evans written number lovely post like learn morelike mentioned sometimes use strace observe running program see slow example recently used find file ack opening lo behold discovered magic strace ack opening candidate file twice open happening tried acking source code call open spending far much time figure discovered culprit invocation perl shorthand text file uninitiated never wanted waste much time wrote devel trace syscallwhat devel trace syscall simple run program using debugger module ie perl trace syscall args script us ptrace figure system call made system call care occurs print stack trace indicating program happened give try hopefully find useful published please enable javascript view comment powered disqus
187,Lobsters,perl,Perl,"Weekly changes in and around Perl 6: NLPW2014 recordings, release, optimization, GTK and Cairo",http://p6weekly.wordpress.com/2014/05/26/2014-21-nlpw2014-recordings-release-optimization-gtk-and-cairo/,weekly change around perl recording release optimization gtk cairo,startup time counted without startupcompile time counted recording like,heya timotimo weekly change summary week seen compiler release moarvm nqp rakudo post cover everything done release week nicholas clark used pahole find reclaim lot byte wasted moarvm structs due alignment rule c compiler froggs loop label change landed release backends added class line example code gtk simple module also started work cairo binding hopefully cooperate well gtk simple well fixed problem nativecall would dispatch callback wrong clone closure tadzik added module classx strictconstructor ecosystem throw error excess named argument passed new method thanks lizmat assigning readonly member object give proper error message moarvm bunch microoptimizations happened result seen benchmark one startup time counted one without startupcompile time counted froggs made iod io ioz check file folder size empty respectively faster froggs also made path contains faster jvm jnthn made bind attribute signature ie method foo bar take fast path binder thing renames signature jnthn added optimization ended making path content much faster jnthn also tweaked signature match go fast path binder comb method called without argument also faster thanks jnthn junction work bit faster well another change jnthn lizmat made say note bit faster another big optimization done jnthn turn loop iterate range much simpler loop change make loop fast equivalent loop loop still nice look recording youtube enjoyed jnthn talk reactive programming whole lot yet spent much time watching recording today hope brilliant week like like loading related
