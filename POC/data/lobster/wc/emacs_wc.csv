ID,Source,Tag_Code,Tag_Name,Title,Url,ProcessdedTitle,WeightedContent,Content
1,Lobsters,emacs,Emacs editor,A Nix overlay for Emacs 27 with the 'emacs-mac' patches,https://cmacr.ae/post/2020-08-12-a-nix-overlay-for-emacs-27-mac/,nix overlay emacs emacsmac patch,updated release emacs nix overlay emacsmac,update official emacsmacport package updated nixpkgs master branch hit nixpkgsunstable channel soon recent release emacs figured share nix overlay using build emacsmac patch emacs come great performance improvement including native json support make really slick experience lspmode top really nice mitsuharu yamamoto patch enhance experience macos thing play lot nicer emacs superemacsmacportoverrideattrs rec version macportversion emacsname emacs version src builtinsfetchurl url http mirrorkoddosnetgnuemacs emacsname tarxz macportsrc builtinsfetchurl url ftp ftpmathschibauacjpemacs emacsname mac macportversion targz patch docheck false installtargets tag install buildinputs obuildinputs superjansson configureflags oconfigureflags withjson moment test nt passing need pas docheck false nt experienced issue yet
2,Lobsters,emacs,Emacs editor,swift-helpful,https://github.com/danielmartin/swift-helpful,swifthelpful,swifthelpful overview install configuration melpa quelpa http framagitorgsteckerhalterquelpa usage feature contextual information swift keywords attribute api documentation coming language server protocol http githubcomemacslsplspsourcekit swift standard library source code http githubcomburntsushiripgrep development http wwwgnuorgsoftwaremake http caskreadthedocsio installing dependency bytecompilation testing lint function documentation acknowledgement http githubcomwilfredhelpful,swifthelpful overview emacs described extensible customizable selfdocumenting realtime display editor like selfdocumenting experience writing swift code emacs swifthelpful package using information swiftmode lspmode swiftinfo able answer question anything see swift program developer tool typically identifiercentric sense show documentation api swifthelpful also show official apple information keywords attribute etc perfect company experimenting swift playground emacs equally useful people learning language people want revisit recent language addition also swifthelpful decoupled apple ecosystem use platform like window gnulinux also extremely fast perfectly use resourceconstrained platform like raspberry pi install configuration melpa install swifthelpful via melpa mx packageinstall ret swifthelpful quelpa install swifthelpful via quelpa http framagitorgsteckerhalterquelpa quelpa swifthelpful repo danielmartinswifthelpful fetcher github file el swiftinfo info usage main entry point swifthelpful command executed point placed swift code feature contextual information swift keywords attribute swifthelpful show information swift keyword attribute let say see import swift program want know importing module swift work simply place point top import invoke swifthelpful mx swifthelpful tool show brief snippet documentation swift module many case keyword highlighted focus attention mentioned documentation pressing read manual button open swift manual section info buffer read definitive discussion topic information limited keywords swift programming language gradually increasing use attribute language swifthelpful also show information attribute let say know dynamiccallable mean attribute introduced swift simply place point one occurrence attribute invoke swifthelpful read explanation time coming official swift reference manual api documentation coming language server protocol swifthelpful also show documentation api way favorite ide leverage lspmode configured specific extension swift lspsourcekit http githubcomemacslsplspsourcekit let say want know isexecutable method see source file sourcekitlsp project invoke swifthelpful symbol see information coming language server protocol including method type signature header documentation two convenient button search definition reference across codebase swift standard library source code compiled checkout swift standard library swifthelpful able search present implementation source code almost zero configuration two requirement use feature need install ripgrep tool http githubcomburntsushiripgrep fast directory searcher need point swifthelpful local checkout swift standard library setq swifthelpfulstdlibpath path local compiled checkout stdlib let say want know dropfirst collection function swift ask swifthelpful presented function implementation collectionswift file path actual link clicking open standard library source file case want explore development development automated mean make http wwwgnuorgsoftwaremake cask http caskreadthedocsio installing program encouraged developing swifthelpful installing dependency bytecompilation testing minimize chance regression run swifthelpful regression test suite introducing change want use ertrunner lint function documentation good emacs package follow basic style rule regarding function documentation check see readmemd inside swiftinfo folder know update documentation modified documentation source code org acknowledgement idea package inspired helpfulel http githubcomwilfredhelpful
3,Lobsters,emacs,Emacs editor,Emacs 27.1 released,https://lists.gnu.org/archive/html/emacs-devel/2020-08/msg00237.html,emacs released,date prev date next thread prev thread next date index thread index emacs released http wwwgnuorgsoftwareemacs http http http http http wwwgnuorgprepftphtml http ftpgnuorggnuemacs http shopfsforgproductemacsmanual,date prev date next thread prev thread next date index thread index emacs released nicolas petton subject emacs released date tue aug hi version emacs text editor available information emacs see http wwwgnuorgsoftwareemacs retrieve source nearest gnu mirror using one following link http http get pgp signature http http tarball signed following gpg key found public pgp key server retrieve key pgp key server evaluate gpg keyserver hkp keysgnupgnet recvkeys choose mirror explicitly list http wwwgnuorgprepftphtml mirror may take time update main gnu ftp server http ftpgnuorggnuemacs emacs wide variety new feature including builtin support arbitrarysize integer text shaping harfbuzz native support json parsing better support cairo drawing portable dumping used instead unexec support xdg convention init file additional earlyinit initialization file lexicalbinding used default builtin support tab bar tabline support resizing rotating image without imagemagick many change summary see etcnews file view emacs ch n complete list change people made see various changelog file source distribution summary people contributed emacs see etcauthors file online manual website updated shortly printed copy emacs manual available purchase free software foundation online store http shopfsforgproductemacsmanual regard nico signatureasc description pgp signature
4,Lobsters,emacs,Emacs editor,How to insert screenshots in Org documents on macOS,https://zzamboni.org/post/how-to-insert-screenshots-in-org-documents-on-macos/,insert screenshots org document macos,inserting displaying inline image orgdownload pngpaste thread stack overflow note,taking note writing orgmode often want insert screenshots inline text org support inserting displaying inline image assumption image already somewhere file system want link orgdownload package eas task downloading copying image attaching document even orgdownloadscreenshot command assumes want initiate screenshot within emacs whereas workflow prefer like capture screenshot using macos builtin screenshot tool leave clipboard paste image document working fortunately orgdownload allows customizing command used orgdownloadscreenshot command together pngpaste utility used make orgdownloadscreenshot store image clipboard disk insert document configuration usepackage orgdownload org defer nil custom orgdownloadmethod directory orgdownloadimagedir image orgdownloadheadinglvl nil orgdownloadtimestamp h orgimageactualwidth orgdownloadscreenshotmethod usrlocalbinpngpaste bind cmy orgdownloadscreenshot config require orgdownload configuration image stored directory named image current directory flat directory structure file prepended timestamp would prefer use timestamps orgdownload us fixed filename screenshots make difficult insert multiple screenshots document may want check orgdownload documentation configure setting liking finally bind orgdownloadscreenshot keep similar default pasting clipboard easily perform step workflow described want insert screenshot document simply press capture screenshot switch back emacs press done look like without inline image display see screenshot automatically stored inside image directory thanks thread stack overflow base idea pointer configuration note technique could used nonmacos system invoking corresponding utility thread get example window linux
5,Lobsters,emacs,Emacs editor,Emacs is Superman,https://wiki.c2.com/?EmacsIsSuperman,emacs superman,,
6,Lobsters,emacs,Emacs editor,Telegram messenger client for GNU Emacs (unofficial client),https://github.com/zevlg/telega.el,telegram messenger client gnu emacs unofficial client,telegael telegram gnu emacs feature http tmexxx telega telega translationsplatform tdlib unique feature screenshots emacsen installation tdlib gnu guix installing gnu guix dependency macos user emacs mac o x emacsplus emacsmac emacsplus linux user building tdlib tdlib brewsh building libtgvoip libtgvoip original installing telegael melpa melpa fire building telegaserver installing telegael installing telegael tdlib gnu guix guix label fire minor mode minor mode telega manual teleganotificationsmode enabling emoji completion chat buffer companymode configuring client side message filtering contribute telegram group issue license faq q melpa q http http q q q http http q q q http githubcomzevlgtelegaelblobmasterdocstelegamanualorg chatfilters q q q http githubcomzevlgtelegaelblobmasterdocstelegamanualorg,telegael telegael full featured unofficial client telegram platform gnu emacs telegael actively developed reason feature implemented present skeleton future implementation however core part mature enough possible use telegael basic chat feature random order listing chat reordering chat according internal telegram order getting info user group supergroups joining chat invitation link mx telegachatjoinbylink ret fetching chat history sending message reply edits deleting resend failed message creating new group upgrading basicgroup supergroup forwarding message dbus notification incoming message chat enabled notification voip call including dbus call notification downloading file cloud uploading filesmedia also pasting image clipboard cloud display chat action user typing displayupdate chat draft message company backends emoji emoji syntax usernames hashtags bot command completion secret chat online global searching chatscontactsmessages avatar photo sticker animated gif via ffplay special message locationlive location voicevideo message contact selfdestruct photovideo etc poll message poll creation game game score handling local link tg http tmexxx replymarkup inline keyboard button message instantview web page blockingunblocking user listing blocked user inline bot request via bot query chat list archived chat see telega searching message chat partly shared medium multiple account traffic control see telega translationsplatform support partly message scheduling reminder partly cloud theme see tdlib telegram folder since tdlib unique feature screenshots root buffer screen chat emacsen group attaching funny cat sticker installation telegael depends visualfillcolumn rainbowidentifiers package dependency automatically installs install telega melpa gnu guix otherwise need install package hand telegael built top official library provided telegram tdlib distribution provide package repository case install manually following instruction gnu guix however telegael tdlib packaged use gnu guix skip directly installing gnu guix dependency gnu emacs least required gnu make gnu gperf cmake python testing server gnu guix optional using guix installation method make found modern machine package download system package manager apt debianbased distribution dnf fedora pacman archbased macos user using emacs mac o x installed emacs running brew cask install emacs emacs lack svg support use telega please switch emacsplus using emacsmac installed emacs running brew install emacsmac brew cask install emacsmac emacs bug dealing complex svg lead emacs hangups compiling emacs rsvg support running brew install emacsmac withrsvg fix problem note telega display sticker correctly emacsmac even emacsmac compiled rsvg support want sticker support please consider switching emacsplus emacsplus best choice run telega linux user telegael requires least gnu emacs imagemagick svg support distribution provide gnu emacs compiled dependency installing gnu emacs gtk support graphical building tdlib tdlib library building telegram client requires large amount memory built make sure using tdlib version macos install prebuilt tdlib package using homebrew brewsh run linux need build tdlib source get source git clone http githubcomtdlibtdgit move folder cd td wherever checked td prepare folder building library mkdir build cd build cmake build source n number core used compilation optimal value number physical core machine finally install library systemwide install header usrlocalinclude library usrlocallib path hardcoded telegael building libtgvoip voip support telegael optional nt need voip ignore section libtgvoip voip library telegram client fork original library patch needed telegael get source git clone http githubcomzevlglibtgvoipgit move folder cd libtgvoip wherever checked libtgvoip prepare folder building library autoreconf force install configure make install library systemwide also install header usrlocalinclude library usrlocallib installing telegael melpa telegael available melpa install usual package preferable method automatically handle dependency installing telegael melpa skip fire telegael section could use git repository melpastyle recipe fetcher github repo zevlgtelegael branch master file default etc server makefile building telegaserver tdlib library setup time install telegael first step consists building telegaserver c interface tdlib let telega ask first start job dependency compilation need installed aheadoftime get source git clone http githubcomzevlgtelegael moving folder cd telegael possible build telegaserver executable move hometelega make make install make test want voip support telegael libtgvoip installed use instead make withvoipt make withvoipt install make withvoipt test command require superuser privilege start mx telega ret follow instruction installing telegael time install telegael gnu emacs done usepackage usepackage telega loadpath telegael command telega defer addtolist loadpath telegael require telega code put configuration file emacs usually initel emacsel installing telegael tdlib gnu guix telegael tdlib available gnu guix resource constrained machine would simply prefer bypass compiling tdlib source good option guix system guix package emacstelega foreign distribution guix package emacs emacstelega need version emacs installed gnu guix modified autoloader identify automatically use emacs package installed guix consult official gnu guix documentation question issue related guix package must accompanied guix label issue tracker note since telega actively maintained installation guix might time lag behind master regular attempt keep updated occur version guix outdated missing feature please use protocol issue tracker fire telegael telegael started mx telega ret first time ask phone number associated telegram network minor mode see minor mode section telega manual teleganotificationsmode telegael ship support dbus notification disabled default enable notification add next code initel teleganotificationsmode enabling emoji completion chat buffer emoji completion emojiname syntax us nice companymode provides telegacompanyemoji company backend need add companybackends maybe along backends telegachatmodehook example addhook telegachatmodehook lambda set makelocalvariable companybackends append telegacompanyemoji telegacompanyusername telegacompanyhashtag telegachatbotp telegachatbuf chat telegacompanybotcmd companymode configuring client side message filtering official telegram client message group chat displayed even message sent blocked user telegael client side message filtering feature implemented ignoring message done via installing special function telegachatinsertmessagehook could mark message ignored example ignore message particular user could add next code defun msg rest notused plistget msg senderuserid telegamsgignore msg addhook telegachatinsertmessagehook ignore message blocked user add addhook telegachatinsertmessagehook telegamsgignoreblockedsender view recent message ignored use mx telegaignoredmessages ret command contribute join telegram group discus development telegael submitting issue exceptionally helpful license telegael licensed gnu gpl version faq q error installing telega open load file file directory visualfillcolumn telegael depends visualfillcolumn package please install first package available melpa q error running telega error invalid image type svg andor error invalid image type imagemagick telegael requires emacs svg imagemagick support svg support emacs done using librsvg library imagemagick need libmagickcoredev libmagickwanddev package installed unfortunately emacs recently disabled imagemagick support default see http need compile emacs hand specifying withimagemagick flag configure script telega wo nt depend imagemagick future since required image feature added newer emacs see http q telega proxy support yes use telegaproxies custom variable example setq telegaproxies list server port enable false type type username rkn password jopa server port enable type type username rkn password jopa see ch v telegaproxies ret full range proxy type q sticker shown make sure imagemagick support please install webp package q telegael unbearable slow might hitting emacs bug described http also see http q glyph unicode character please install fontssymbola package q formatting issue unicode character used yes partly character full width multiple ordinary char tweak charwidthtable add code like initel setq telegasymbolunread defun mytelegaload occupies two full char stringwidth return install custom width charwidthtable telegasymbolsetwidth telegasymbolunread code addhook telegaloadhook mytelegaload also telegasymbolwidths custom variable might want modify q erclike chat tracking functionality yes set telegausetrackingfor nonnil tracking done opened chat ie chat corresponding chat buffer value chat filter http githubcomzevlgtelegaelblobmasterdocstelegamanualorg chatfilters example enable tracking chat enabled notification chat unread mention use setq telegausetrackingfor unmuted mention q possible use telega ttyonly emacs aka emacsnox yes set telegauseimages nil start q possible use markup outgoing message yes use cu ret send message markup also see telegachatusemarkdownversion supported markup bold text italic text underline text strike text inlined code languagenamenotdisplayed first line multiline preformatted code second line last line link text http actualurl username tg user id userid note language syntax highlighting requires contrib telegamnz module q manual telegael started write http githubcomzevlgtelegaelblobmasterdocstelegamanualorg
7,Lobsters,emacs,Emacs editor,My Writing Setup,https://explog.in/notes/writingsetup.html,writing setup,,switched several different combination indentation time org mode time orgindentmode excellent default downside increasing visual width file heading increasingly nested make simpler keep document within character reasonably sized heading force consecutive indentation level increment one character time orgindentindentationperlevel setq orgindentindentationperlevel default org indent text match indentation heading embarrassed admit spent several year manually removing automatically inserted whitespace learning orgadaptindentation directly control behavior setting nil disables behavior setq orgadaptindentation nil use ch v mx describevariable look definition variable customization
8,Lobsters,emacs,Emacs editor,Scripting beorg with Scheme,https://beorg.app/manual/scripting/,scripting beorg scheme,introduction biwascheme home page repl getting started little scheme variable saving customizations customizations font io font show available icon editor repl buffer cursorpoint changing text buffer user interface alert toast sheet date custom todo filter starting beorg specific tab export theme export theme device information libraryorg view libraryorg,introduction beorg come scripting language based scheme example use setting advanced option exposed setting tab modifying toolbar shown keyboard editing note include extending text editor custom command inserting timestamp defining additional filter available todo tab version scheme included beorg called biwascheme find biwascheme home page repl beorg repl allows type scheme expression command see result immediately start repl go setting tab beorg tap button top right simple example using repl parrot back hello world hello world hello world use beorg repl simple calculation equivalent writing getting started little scheme scheme conceptually simple scheme expression parenthesis start name function followed argument example function argument nest scheme expression example add result multiplying scheme based list scheme lisp family language name lisp come list processor scheme program data written list want list first item function execute need write like apple banana orange apple banana orange example created list symbol apple banana orange symbol different string used represent name variable function wanted list string would write like apple banana orange lot tutorial book scheme lisp available web variable using scheme customize beorg way setting tab one example might wanting use different font note editor currently possible change setting tab writing scheme write wanted use font baskerville size set editorfont baskerville try starting beorg repl writing scheme expression editing note note affect editor currently open get help particular variable use function documentation example documentation editorfont font use repl format font name font size example menlo note using set put name however must put using documentation function saving customizations beorg start look file called initorg sort file use task note however contains scheme expression scheme expression special block interspersed normal text example simple initorg might look like change editor font font beginsrc scheme set editorfont baskerville endsrc special block indicating scheme expression start beginsrc scheme end endsrc edit initorg using beorg outline editor however may find easier using text editor computer syncing beorg customizations font changing font used editor set editorfont fontname fontsize example set editorfont menlo list available font io check io font changing font used repl set replfont fontname fontsize toolbar shown keyboard editing note using repl example editor toolbar definition set editortoolbaritems iconleft backwardchar iconright forwardchar iconlist insert iconchange showtransformcommands iconsettings insertcodesnippet toolbar five icon add many icon wish displayed screen scrolled horizontally variable editortoolbaritems list list list defines one toolbar item either icon name text display followed scheme execute show available icon changing repl toolbar exactly use variable name repltoolbaritems default toolbar shown full screen editor would like shown always add following initorg set editortoolbarshowinmini editor repl buffer text shown editor repl referred buffer various function operate buffer retrieve information buffer either text cursor known point get current size buffer write buffersize cursorpoint cursor point show user typed character appear beorg change position point get information current position point return current position point pointmin return position start buffer always pointmax return position last character buffer gotochar n move point n eg gotochar move point start buffer backwardchar move point back one character forwardchar move point forward one character addition point cursor also text currently selected referred region regionbeginning return start position selected text regionend return end position selected text note text selected regionbeginning regionend point changing text buffer insert text buffer use insert function insert hello insert text hello position point ie cursor point end text inserted get text manipulate use buffersubstring function take two argument buffersubstring pointmin pointmax get text buffer also achieved using region delete text buffer use deleteregion also take argument deleteregion pointmin pointmax delete text buffer replace currently selected text use regiontextset regiontextset stringupcase region convert selected text uppercase user interface alert show alert user using alert function take two argument first title alert second message alert welcome hi show alert text hi user alerted titled welcome toast alert requires user tap ok button dismiss alternative alert toast message slide top screen disappears shortly afterwards toast function parameter alert title message toast calculation result number string show toast title calculation result message sheet show user set option choose create sheet sheet similar toolbar list list first item sublist text display user icon supported followed scheme code run define showtransformcommands string region alert text selected sheet uppercase regiontextset stringupcase region lowercase regiontextset stringdowncase region scheme function user text selected show sheet option uppercase lowercase user selects uppercase selected text converted uppercase sheet great way extend editor functionality fit workflow date request user provide date using date picker present date picker execute provided callback addition callback date picker function take default date display whether date includes time component user picked date callback provided boolean saying whether user cancelledremoved date date whether user included time date example datepicker currentdate f lambda removed date includestime removed alert date date string date ask user date date picked ie user tap trash remove date date displayed alert custom todo filter todo tab filter task number builtin filter example show task priority set example custom filter called top priority show task priority set filteradd top priority lambda item string itempriority item first argument function filteradd name filter show filter list second argument procedure return either true false case true returned priority procedure passed org item following function available retrieve data item itemfile name file org task contained eg inboxorg itemheadline headline item ie task title itemstate eg todo done itempriority priority item itemtags tag assigned item itemscheduled scheduled date item scheduled date f false itemdeadline itemactivedate itemoverdue true item overdue itemproperty property value property item property drawer starting beorg specific tab configure beorg start specific tab agenda todo file set uistarttab todo tell beorg start todo tab valid option agenda file export theme purchased export theme inapp purchase extension add theme exporting document theme need file loaded using loadthemes scheme function add initorg theme get loaded everytime beorg start theme file must contain one heading source block cs example minimal theme file minimal theme description minimal theme beginsrc cs include beorg default theme body fontfamily monospace endsrc theme extends default theme setting font monospace see include another theme using include syntax note theme must read beorg already ie occur later file another file read yet theme unique name example name theme minimal theme theme loaded name another override theme name theme start underscore shown theme selector ui device information beorg defines number variable detail device may useful conditionally customising beorg iphone ipad differently variable devicename name device example matthew iphone devicemodel example iphone deviceosversion example devicetype one phone pad tv car unknown libraryorg beorg start read scheme file come bundled app file contains number default helper function used beorg want get serious beorg scripting take look file help realise possible view libraryorg please note version current release beorg may vary
9,Lobsters,emacs,Emacs editor,El Gantt – A Gantt chart/calendar for Orgmode,https://github.com/legalnonsense/elgantt/,el gantt gantt chartcalendar orgmode,el gantt gantt chartcalendar orgmode installation disclaimer first use using test file customization setting header type setting timestamps display display option custom variable navigation command example note colorizing outline orggantt use outline structure unfolded space header overarching header line folded use hashtags folded space custom header header line format macroconfiguration example explanation macro accessing adding property following property included cell default changing color certain cell adding new property org file example way colorize time block linking cell helper function drawing display navigating buffer selecting multiple entry getting calendar data editing underlying org file redrawing creating custom view face theme interacting calendar faq fold unfold without reloading many gradient change log fri,el gantt gantt chartcalendar orgmode el gantt creates gantt calendar orgmode file provides flexible customization system goal adaptable multiple purpose move date scroll forward backward jump underlying org file customize display package ongoing development feature request bug report welcome help welcome installation install dependency clone repository lisp directory cd emacsdlisp git clone httpqs githubcomlegalnonsenseelganttgit addtolist loadpath concat useremacsdirectory lispelgantt wherever located require elgantt disclaimer package inprogress know mean alpha testing beta whatever everything described work stable enough every day use package useful please help polish put melpa first use run elganttopen default elgantt use orgagenda file running orgagenda file may want experiment test file using test file set elganttagendafiles location wherever installed elgantt cloned lisp subdirectory setq elganttagendafiles concat useremacsdirectory lispelgantttestorg run elganttopen see rather bland looking chart customization variable get set setq need use customization interface usepackage custom keyword setting header type header calendar defined elganttheadertype four default value option define custom function run first point org heading valuebehavior categorygroup entry category property filename category property set hashtaggroup entry tag prefixed hashtag outlineuse outline structure rootgroup root heading functionrun given function point grouping entry return value function setting timestamps display set variable elgantttimestampstodisplay control type timestamps displayed variable list contain deadline timestamp timestampia scheduled timestamprange timestamprangeia order list matter determined precedence first type entry found heading displayed character generally use setq elgantttimestampstodisplay deadline timestamp scheduled timestamprange display option valuebehavior elganttstartupfoldedif nonnil display entry grouped headertype single line otherwise entry grouped header one entry per line elganttshowheaderdepthif elganttheadertype set outline show outline depth inserting elganttlevelprefixchar elganttheadertype outline effect elganttlevelprefixcharthe character used prefix nested entry elganttevennumberedlinechangethis control much percent even numbered line offset background color set want distinction elganttscrolltocurrentmonthatstartupscroll current month startup keep calendar first timestamp elganttinsertblanklinebetweentoplevelheaderjust say elganttdrawoverarchingheadersdraw line bracketing start end date child toplevel header assuming date already associated header elganttheadercolumnoffsetthe width header column elganttheaderlineformatsee section detailing use variable elganttexclusionsthis list string display header appear list elganttinsertheaderevenifnotimestampinsert header even timestamp associated elgantthidenumberlinehides number line appears top calendar custom variable variabledefault elganttdeadlinecharacter elganttactivetimestampcharacter elganttinactivetimestampcharacter elganttscheduledcharacter elganttmultipleentrycharacter elgantttimestamprangestartcharacter elgantttimestamprangeendcharacter elganttcaltimestamprangeiastartcharacter elgantttimestamprangeiaendcharacter elganttagendafiles orgagendafiles elganttskiparchivest elganttstartdate concat formattimestring ie current month elganttstartdate probably important one set cutoff date ignore old entry navigation command key bindingcommand fmove forward next entry line nmove backward previous entry nmove closest entry next line pmove closest entry previous line fscroll forward one month bscroll backward one month mfshift date point forward one day mbshift date point backward one day cmove calendar current date spacenavigate org heading point returnshow agenda date point note cell multiple entry calendar cell multiple entry special character displayed default try perform function one cell eg navigating org file shifting date etc prompted select entry want perform operation example exampes use testorg file setq elganttagendafiles emacsdlispelgantttestorg wherever elgantt direcctory located note colorizing outline example follow draw gradient scheduled time entry deadline entry scheduled date actually shown calendar included package need use custom macro shown took idea orggantt package included default work use deadline scheduling particular way use colorize calendar way make good demonstration code necessary alternative way use color discussed explaining elganttcreatedisplayrule macro want color appear evaluate code reload ie cr calendar setq elganttusersetcolorprioritycounter elganttcreatedisplayrule drawscheduledtodeadline parser elganttcolor whenlet color orgentryget point elganttcolor ssplit color args elganttscheduled elganttcolor elganttorgid body elganttscheduled let point saveexcursion elgantt gotodate elganttscheduled point car elganttcolor black cadr elganttcolor red elgantt drawgradient since cell necessarily linked chronological order make sure sorted nil priority setq elganttusersetcolorprioritycounter elganttusersetcolorprioritycounter decrease priority earlier entry take precedence later one note matter number negative elganttuseroverlay elganttorgid use outline structure unfolded space header overarching header line setq elganttheadertype outline elganttinsertblanklinebetweentoplevelheader elganttstartupfolded nil elganttshowheaderdepth elganttdrawoverarchingheaders folded setq elganttheadertype outline elganttinsertblanklinebetweentoplevelheader nil elganttstartupfolded elganttshowheaderdepth elganttdrawoverarchingheaders note two colored gradient overlap average two gradient used display way still see span time though result always pretty use hashtags folded space setq elganttheadertype hashtag elganttinsertblanklinebetweentoplevelheader nil elganttstartupfolded look like unfolded custom header silly example group header first letter ofo headline setq elganttheadertype lambda substring orgentryget point item also want set elganttinsertheaderevenifnotimestamp nil otherwise see single letter header assocated headline without date header line format variable elganttcustomheaderline control format header line use property cell reference property prop keyword without elgantt prefix example access headline cell entry elganttheadline headline also unique property dateatpoint display date point dependent property stored given cell multiple entry cell data separated pipe ie align text headerline left center right side header overlap latter property take precedence former property return string formatted string format prop keyword also function run cell point header line disabled default finish sorting variable function handle enable setq headerlineformat eval elganttheaderlinefunction use default value elganttcustomheaderline setq elganttcustomheaderline left prop dateatpoint padding prop headline padding another example setq elganttcustomheaderline left prop dateatpoint could also use example elganttgetdateatpoint lambda elganttgetdateatpoint padding prop todo padding center prop headline right prop hashtag padding textprops face background red header line workinprogress first attempt solution list property keyworddescription propany property stored cell retrievable elganttgetpropatpoint function run cell point paddinginteger indicates padding next entry default padding afterpadif length string exceeds value padding still separate entry following number padding character paddingcharthe character used padding single character default space textpropsany text property associated text example set custom face face background red macroconfiguration example explanation elgantt aim provide flexible way customize calendar display whether hit target concern elganttcreatedisplayrule macro macro used customize display calendar defines function run cell calendar generated cell contains multiple entry run entry cell accessing adding property proceeding list property included entry calendar following property included cell default propertyvalue elganttheadlinetext org headline text property elganttdeadlinedeadline string yyyymmdd nil elganttscheduledscheduled timestamp nil elgantttimestampfirst active timestamp date nil elgantttimestampiafirst inactive timestamp date nil elgantttimestamprangeactive timestamp range list two string yyyymmdd yyyymmdd nil elgantttimestamprangeiasame inactive timestamp range elganttcategorycategory property heading filename category property supplied elgantttodotodo type property nil elganttmarkermarker pointing location heading org buffer elganttfilefilename underlying org file elganttorgbufferbuffer underlying org heading elganttalltagsa list tag including inherited tag associated heading elganttheaderheader used insertion calendar buffer depends value elganttheadertype elganttdatedate used insertion calendar us first date found elgantttimestampstodisplay elgantthashtagany hashtag inherited associated headline property returned orgentryproperties also included entry property list basic example use display customization macro changing color certain cell suppose want change background color cell todo state red elganttcreatedisplayrule turntodored args elgantttodo argument list available body body string todo elgantttodo elgantt createoverlay generally easiest way create overlay since ov dependency elgantt createoverlay point point face background red caveat already overlay cell manage overlay priority display properly manual serious warns make assumption overlay prevail two overlay share priority priority example choose arbitrarily large priority make sure overlay displayed others elganttcreatedisplayrule turntodored args elgantttodo argument listed available body body string todo elgantttodo elgantt createoverlay generally easiest way create overlay elgantt createoverlay point point face background red priority want make dynamic display ie one update every time move postcommandhook keyword add function postcommandhook run time cursor move example suppose want make cell red match todo state cell point use macro elgantt iterateovercells run expression cell want use kind display probably want give overlay unique id clear overlay time cursor move elganttcreatedisplayrule turnmatchingtodosred args elgantttodo postcommandhook recalculate every time point move body removeoverlays pointmin pointmax turnitred since run time cursor move need clear previous overlay first elgantttodo make sure todo state elgantt iterateovercells member elgantttodo elganttgetpropatpoint elgantttodo elgantt createoverlay point point face background red priority arbitrary identifier know overlay clear turnitred using testorg file headline todo state see turn background entry also todo state point cell state experimentation want disable display rule add disable removed function stack postcommand hook appropriate alternative call elgantt clearallcustomizations delete function created customization macro adding new property org file suppose want change color cell based property present default example want change color cell certain priority property included default case use parser keyword add property expression run first point org heading automatically added parsing function syntax parser expression expression add property get priority org heading elganttcreatedisplayrule prioritydisplay parser elganttpriority orgentryget point priority body insert code use elganttpriority variable must reload calendar evaluating macro calendar repopulate elganttpriority value added entry text property example way colorize time block colorize block time depends two org property elganttcolor elganttlinkedto elganttcolor org property contains two color name represent start end gradient elganttlinkedto contains id org heading different colorizing macro used example color block starting scheduled date ending deadline setq elganttusersetcolorprioritycounter must counter ensure overlapping overlay handled properly elganttcreatedisplayrule usersetcolor parser elganttcolor whenlet color orgentryget point elganttcolor ssplit color elganttlinkedto orgentryget point elganttlinkedto args elganttorgid body elganttlinkedto saveexcursion whenlet point let date cell linked even header calendar therefore get date linked cell move date current header saveexcursion elgantt gotoid elganttlinkedto setq date elganttgetdateatpoint elgantt gotodate date point car elganttcolor cadr elganttcolor elgantt drawgradient since cell necessarily linked chronological order make sure sorted nil priority setq elganttusersetcolorprioritycounter elganttusersetcolorprioritycounter decrease priority earlier entry take precedence later one elganttuseroverlay elganttorgid linking cell elgantt connectcells sample use following macro draw line cell share hashtag code also add shortcut move next matching hashtag elganttcreatedisplayrule showhashtaglinks args elgantthashtag postcommandhook update time point moved body elgantt clearjuxtapositions nil nil hashtaglink need clear last display elgantthashtag hashtag property cell elgantt connectcells elganttalltags elgantthashtag hashtaglink foreground red elganttcreateaction followhashtaglinkforward args elganttalltags binding cmf body whenlet hashtag first sstartswithp elganttalltags point car elgantt nextmatch elganttalltags hashtag gotochar point elganttcreateaction followhashtaglinkbackward args elganttalltags binding cmb body whenlet hashtag first sstartswithp elganttalltags point car elgantt previousmatch elganttalltags hashtag gotochar point helper function following function included aid customizing display see docstrings information drawing display create overlay elgantt createoverlay draw gradient elgantt drawgradient draw progress bar elgantt drawprogressbar example use elgantt drawprogressbar suppose following org file todo read illuminatus trilogy scheduled tue deadline tue property totalpages pagesread id end following code elganttcreatedisplayrule pagesreadprogress parser totalpages stringtonumber orgentryget point totalpages pagesread stringtonumber orgentryget point pagesread args elganttdeadline elganttscheduled body elganttdeadline elganttscheduled totalpages pagesread let start progn elgantt gotodate elganttscheduled point end progn elgantt gotodate elganttdeadline point percent float pagesread float totalpages elgantt drawprogressbar red blue start end percent automatically display progress bar starting scheduled date deadline date displaying progress bar represents percent page read note code generate error run org file totalpages pagesread property orgentryget return nil cause stringtonumber fail instead something like parser totalpages whenlet orgentryget point totalpages stringtonumber pagesread whenlet orgentryget point pagesread stringtonumber solution like dash draw line one cell another elgantt drawline see also elgantt connectcell juxtapose text top cell elgantt insertjuxtaposition clear elgantt clearjuxtapositions change character cell preserving text property elgantt changechar navigating buffer move cell orgid elgantt gotoid move date current line elgantt gotodate iterate entry elgantt iterateovercells selecting multiple entry cell multiple entry prompt user pick one used elgantt selectentry getting calendar data get date point elganttgetdateatpoint get property cell elganttgetpropatpoint always return list multiple entry cell point list value without argument return property editing underlying org file use macro elganttwithpointatorigentry execute code underlying org heading redrawing reload single cell invite catastrophe update cell date point elganttupdatethiscell display ie overlay single cell redrawn elgantt updatedisplaythiscell cell elgantt updatedisplayallcells else fails reload everything elganttopen note orgql orgql creates cache result us cache underlying org file changed change something way calendar displayed odds problem using orgql cache reason reloading invalidates orgql cache calling elgantt resetorgqlcache simply set orgqlcache initial value seems solve reloading problem creating custom view create custom view gantt chartcalendar defining function like try letbind variable call elganttopen open inside closure thing break use setq need use customize interface defun elganttoutlinefolded interactive setq elganttstartdate nil elganttscrolltocurrentmonthatstartup nil elganttagendafiles emacsdlispelgantttestorg elganttstartupfolded nil elganttinsertheaderevenifnotimestamp elganttheadertype outline elganttshowheaderdepth elganttheadercolumnoffset elganttevennumberedlinechange elganttopen want use custom display macro call elgantt clearallcustomizations include custom macro inside function face theme elgantt adjust color work theme regardless whether dark light interacting calendar two way interact calender elganttcreateaction macro separate module elganttinteraction elganttcreateaction macro work way elganttcreatedisplayrule except keywords binding command use macro anything could use perform action orgfile calendar eg marking todo done elganttinteraction use must require elganttinteraction module experimental code cleaned written frenzy wondering whether could without considering whether inspires idea others use return otherwise unless need plan abandon example use set elganttlinkedto elganttcolor property used example designed allow user select cell perform action certain sequence allows user make two selection return pressed prompted user enter two color set property relevant org heading example work code elganttinteraction generally untested know whether develop absent need framework theory provides robust way create way interact calendar perform action multiple org entry invoke interface press prompted select interface like execute counter appear show number cell selected message displayed defined selectionmessages keyword cell selected pressing space user press return execute command execution function run order listed executionfunctions first number refers cell order selected variable returnval return value previous function user selects two cell press return program move second selected cell run orgidgetcreate return value section function move first cell user selected add id second selection ie returnval prompt user two color set property heading appropriatly addition able use number refer cell order selected use rest allbutlast last refer cell perform operation require elganttinteraction elgantt selectionrule name colorize selectionnumber selectionmessages select first cell select second cell executionfunctions elganttwithpointatorigentry nil orgidgetcreate elganttwithpointatorigentry nil orgsetproperty elganttlinkedto returnval orgsetproperty elganttcolor concat strim readcolor select start color strim readcolor select end color also need use colorize setq elganttusersetcolorprioritycounter must counter ensure overlapping overlay handled properly elganttcreatedisplayrule usersetcolor parser elganttcolor whenlet color orgentryget point elganttcolor ssplit color elganttlinkedto orgentryget point elganttlinkedto args elganttorgid body elganttlinkedto saveexcursion whenlet point let date cell linked even header calendar therefore get date linked cell move date current header saveexcursion elgantt gotoid elganttlinkedto setq date elganttgetdateatpoint elgantt gotodate date point car elganttcolor cadr elganttcolor elgantt drawgradient since cell necessarily linked chronological order make sure sorted nil priority setq elganttusersetcolorprioritycounter elganttusersetcolorprioritycounter decrease priority earlier entry take precedence later one elganttuseroverlay elganttorgid second example played previously provided advanced way link cellsheadings together see use returnval passed one execution function next included purpose illustrating use macro elgantt selectionrule name setanchor parser elganttdependents whenlet dependent cdar orgentryproperties point elganttdependents ssplit dependent executionfunctions elganttwithpointatorigentry nil orgidgetcreate elganttwithpointatorigentry nil let currentheadingid orgidgetcreate orgsetproperty elganttdependents format substring member returnval elganttdependents elganttdependents push returnval elganttdependents elganttwithpointatorigentry nil orgsetproperty elganttanchor returnval selectionmessages select anchor rest select dependent selectionnumber previously accompanied code allowed user move date dependent cell moving anchor cell highlighted dependent cell point anchor abandoned various reason interest level interface clean get working faq save trouble hobby continued exercise learning elisp programming realized lot thing along way mostly realized programming much fun thought take way time patience clean code like bytecompile warning care originally wrote hoped publishing would get life seems interest push far time ability allow help please help fold unfold without reloading without significant change code breaking existing feature change value elganttstartupfolded reload many gradient pretty also customize midpoint gradient appears reflects remaining time like gradient use start end color change log fri added elganttcustomheaderline elgantt headerlineformatter
10,Lobsters,emacs,Emacs editor,Emacs Redux: Instant Access to Your Shell Init Files,http://emacsredux.com/blog/2020/07/16/instant-access-to-your-shell-init-files/,emacs redux instant access shell init file,simple hack crux,long time presented simple hack allowed quickly navigate shell user config file eg bashrc zshrc solution get job done pretty basic limited notably ignore fact typically several shell config file often built top eg etcprofile bashprofile bashrc fortunately original hack evolved rather nicely today life crux library name cruxfindshellinitfile provided installed crux need run command eg mx cruxfindshellinitfile get something like result pretty neat right even updated state command complex defun cruxfindshellinitfile edit shell init file another window interactive let shell filenamenondirectory getenv shell shellinitfile cond string zsh shell cruxshellzshinitfiles string bash shell cruxshellbashinitfiles string tcsh shell cruxshelltcshinitfiles string fish shell cruxshellfishinitfiles stringprefixp ksh shell cruxshellkshinitfiles error unknown shell candidate clremoveifnot fileexistsp mapcar substituteinfilename shellinitfile length candidate findfileotherwindow completingread choose shell init file candidate findfileotherwindow car candidate guess one thing improve road adding option display shell config window small thing variable like cruxshellbashinitfiles simply list potential file look opted omit code listing stand original suggestion bind useful command cc globalsetkey kbd cc cruxfindshellinitfile today metax forever
11,Lobsters,emacs,Emacs editor,Polyglot Documentation with Org-mode,https://www.rse.ox.ac.uk/tech_post/polyglot_documentation_with_org_mode/,polyglot documentation orgmode,orgmode orgmode website built revealjs babel babel research paper written orgmode babel fork path example output let talk simple computer program method print screen,important part teaching meeting student common ground find experience bring teaching incorporate new knowledge alongside already know teaching software engineering concept usually mean tailoring discussion programming language student familiar may explaining languageagnostic concept like objectoriented programming designing reusable function drawing graph student find example given unfamiliar language barrier understanding rse group work lot different programming language quick sample project worked university last year includes javascript c c ruby php swift python r matlab may others point pick different programming language time mean people teach developing teaching material could many commercial saas company document web apis could embed example code many language documentation let reader choose want see tool make easy like markdownfencedcodetabs extension python markdown parser good enough api sample really work tutorial content need talk code prose subtly different language also want maintain wholly separate fork material want one narrative languagespecific sample prose section necessary single source like able build version documentation tailored specific language sample code language necessary tweak discussion orgmode found possible writing document orgmode orgmode extensible format writing structured text hierarchical outline system markdownlike formatting syntax facility marking section todo item due date sample code particular language presenter note used presentation originally written venerable gnu emacs text editor orgmode parser exist vim visual studio code atom elsewhere using emacs parser possible export orgmode file multiple format including hugo website built latex suitable generating printed handout revealjs slide giving lecture crucially orgmode also tagging system section hierarchical outline tagged arbitrary word control tag get included excluded file exported orgmode build multilingual documentation babel another nifty capability orgmode babel designed reproducible research even research paper written orgmode babel babel add literate programming facility orgmode code block orgmode document babel run code incorporating result document even using result input code block tutorial material really good use testing code snippits situ without keep sync separate code file project fork path combining facility give u polyglot programming documentation document kept single orgmode file discussion appearing exactly multiple copy multiple programming language sample code segment languagespecific prose section tagged name language example c tagging sample code mean babel work run code syntax highlighting rule use make easier maintain code block document using tag prose mean excluding including language tag export choose sample code relevant discussion appears output example finally example describing classic hello world program three language c python ruby us different function print message though overall description program c also explain n thing end message string excludetags c python property headerargs result output option tag nil let talk simple computer program program put phrase hello world screen early version appeared book c programming language kernighan ritchie included demonstration prove compiler set correctly day hello world common example program every programming language give newcomer flavour language single contributor behaviour program function print text screen printf function c use printf print screen c beginsrc c include stdioh int main printf hello world n endsrc weird n string tell printf output newline character moving cursor start next line put method ruby use put print screen ruby beginsrc ruby put hello world endsrc print function python use print print screen python beginsrc python print hello world endsrc print screen playing fast loose terminology hello world program writes message stream called standard output often written stdout happens standard output stream usually displayed screen terminal application output rest document generated orgmode file c python tag excluded excludetags line start file result includes discussion example code relevant ruby programming language could similarly get version language let talk simple computer program program put phrase hello world screen early version appeared book c programming language kernighan ritchie included demonstration prove compiler set correctly day hello world common example program every programming language give newcomer flavour language single contributor behaviour program function print text screen put method use put print screen ruby print screen playing fast loose terminology hello world program writes message stream called standard output often written stdout happens standard output stream usually displayed screen terminal application
12,Lobsters,emacs,Emacs editor,Running Emacs with systemd,http://emacsredux.com/blog/2020/07/16/running-emacs-with-systemd/,running emacs systemd,execpathfromshell environmentd arch linux wiki good example,recently switched back linux used macos past year generally happy overall macos experience also disappointed emacs simply work well linux various reason linux user always run emacs daemon server connect daemon multiple instance emacsclient elegant efficient client started instantly shared access everything running daemon instance doable extent macos never worked quite well abandoned workflow eventually however back time revive workflow historically ran emacs daemon adding something like shell init eg bashrc export alternateeditor alias eemacsclient tty magic first line leaving alternateeditor blank way first time ran emacsclient start emacs daemon connect many people preferred make daemon proper service start restart monitor felt like overkill noticed however emacs bundle systemd unit trivial control emacs daemon systemd boil running command systemctl user enable emacs run command regular user whatever user account want running emacs run root though get message unit file copied usrlibsystemduseremacsservice examine curious unit descriptionemacs text editor documentationinfo emacs man emacs http gnuorgsoftwareemacs service typesimple execstartusrbinemacs fgdaemon execstopusrbinemacsclient eval killemacs environmentsshauthsock tkeyringssh restartonfailure install wantedbydefaulttarget pretty straightforward point emacs daemon connect using terminal client emacsclient gui client emacsclient c might also want create desktop icon run emacsclient c instead emacs might also want set editor visual emacsclient export editoremacsclient export visualemacsclient typically add two alias safe side alias viemacsclient alias vimemacsclient one thing keep mind running emacs manner read user environment variable least coming bashprofile bashrc good idea install popular package execpathfromshell alternatively use one systemd mechanism setting environment variable eg environmentd arch linux wiki good example using environmentd also mention approach consider today hope learned something useful parenthesis trust
13,Lobsters,emacs,Emacs editor,Remap Enter to Control in GNU/Linux (2020 Edition),http://emacsredux.com/blog/2020/07/05/remap-enter-to-control-in-gnu-linux-2020-edition/,remap enter control gnulinux edition,note original article old article dualfunctionkeys interception framework note alternative xkeysnail example config geared towards emacs user,note check original article rationale behind remapping recently switched back macos gnulinux primary development environment found old article remapping enter control longer optimal way achieve eg xcape operates x level mean work wayland without gui took bit digging eventually found dualfunctionkeys plugin interception framework exactly needed splendidly unfortunately tool packaged gnulinux distros setting source complex article share instruction specific ubuntu easy modify linux distros let kick downloading installing interception framework dualfunctionkeys install build deps sudo apt install libudevdev libyamlcppdev libevdevdev cmake create folder clone source code mkdir src cd src clone necessary code git clone http gitlabcominterceptionlinuxtools git clone http gitlabcominterceptionlinuxpluginsdualfunctionkeys build install interception framework cd tool mkdir build cd build cmake make sudo make install cd build dualfunctionkeys plugin cd dualfunctionskeys make sudo make install hard right create couple configuration file ready action first one dualfunctionkeysyaml normally placed home folder homeusernamedualfunctionkeysyaml timing tapmillisec doubletapmillisec mapping key keyenter tap keyenter hold keyrightctrl main config dualfunctionkeys specifying duration tap double tap remapping rule case single rule enter act enter tap pressed briefly right control held longer need create etcudevmonyaml need sudo etcudevmonyaml job intercept g devnode dualfunctionkeys c homebozhidardualfunctionkeysyaml uinput devnode device event evkey keyenter note update path dualfunctionkeysyaml accordingly finally need create systemd service definition file udevmon start new service etcsystemdsystemudevmonservice unit descriptionudevmon wantssystemdudevsettleservice aftersystemdudevsettleservice service execstartusrbinnice n usrlocalbinudevmon c etcudevmonyaml install wantedbymultiusertarget simply enable udevmon service remapping kick sudo systemctl enable udevmon start enjoying beloved productivity boost achieve lot dualfunctionkeys advice explore tool keep hacking alternative another option considered xkeysnail seemed bit simpler setup written python even example config geared towards emacs user might want check someone using another approach achieve result love hear
14,Lobsters,emacs,Emacs editor,Consistent Technical Documents Using Emacs and Org Mode,https://www.youtube.com/watch?v=0g9BcZvQbXU,consistent technical document using emacs org mode,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature consistent technical document using emacs org mode youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature consistent technical document using emacs org mode youtube
15,Lobsters,emacs,Emacs editor,org-html-themes,https://github.com/fniessen/org-html-themes,orghtmlthemes,export org mode file awesome html minute overview description tweet fniessen requirement quotation bigblow emacsleuventheme readtheorg gallery bigblow readtheorg theme read doc demo org mode refcard using theme customizing theme change background code block unset body width limit readtheorg contributing issue github issue tracker patch donation project donation follow fniessen license http wwwgnuorglicenses,export org mode file awesome html minute overview description though easily override cs stylesheets add html theme say write org mode provides basic html support orghmtl theme open source framework providing list nice crossbrowser theme org document use style doc colleague come tell genius share content tweeting page tweet follow fniessen twitter update orghtml theme requirement org mode version later required version bundled emacs install one elpa quotation bigblow nice enjoy lot ista zahn awesome love rainer krug awesome mehul sanghvi nice html theme use another emacstheme emacsleuventheme going probably html theme joseph vidalrosset thanks lot sharing wonderful bigblow theme create lot specification team member use always trouble share maintain spec create much neater spec available team reference webpage shankar r like bigblow best exported org file using theme published within company intranet thanks sharing wonderful package richard k readtheorg omg readtheorg theme exported html org mode file eye wateringly beautiful thank rob stewart fantastic beautiful switch several page theme carsten incredibly impressive thanks noah r thank enjoy theme best one ever found kang awesome theme wonderful job wonderful thing enable people least use emacs org mode put together online reference work muchmore usable fashion currently available c toedt extremely useful thomas dye gallery list available html theme org mode use right well hope one couple bigblow bigblow perfect work clean design aimed optimal org mode experience browser look awesome click image quick demo bigblow min audio keyboard shortcut save time boost productivity shortcutwhat haccess dashboard nmove next main heading pmove previous main heading bscroll scroll top scroll bottom collapse expand rgo next task list rgo previous task list qstop reviewing list task greload page readtheorg readtheorg clone official great theme used read doc site give beautiful professional style org doc thanks creator demo written demo page theme provides maximal working support org mode syntax please see org mode refcard page full example heading code admonition footnote table detail using theme using theme theme gallery org document easy add setupfile directive preamble document include necessary cs javascript file either use url following type setup file chosen theme setupfile http fniessengithubioorghtmlthemessetupthemenamesetup themename themebigblow themereadtheorg cloned downloaded orghtml theme project get dependency internet connection use relative absolute path local setup file copy style folder cloned folder folder file want export setupfile pathtogitreposetupthemenamelocalsetup export org mode file html orghtmlexporttohtml cc ce h h customizing theme love theme still would like override particular html tag example though think really improvement could server person well including invited submit change background code block example insert org document change background source block htmlhead style presrc background color white style unset body width limit readtheorg solution provided malcolm cook htmlhead style content style htmlhead style p style htmlhead style li style contributing issue report issue suggest feature improvement github issue tracker patch love contribution patch form always welcome donation use orghtmlthemes project project feel making life better easier show appreciation help support future development making today donation paypal thank regardless donation orghtmlthemes always free beer speech follow fniessen account twitter follow license copyright c fabrice niessen author fabrice niessen keywords orgmode html theme program free software redistribute andor modify term gnu general public license published free software foundation either version license option later version program distributed hope useful without warranty without even implied warranty merchantability fitness particular purpose see gnu general public license detail received copy gnu general public license along program see http wwwgnuorglicenses
16,Lobsters,emacs,Emacs editor,Emacs Comment Commands Redux,http://emacsredux.com/blog/2020/06/10/comment-commands-redux/,emacs comment command redux,closing thought clojurecommentdwim,comment important aspect every programming language dealing effectively useful skill emacs offer bunch commentrelated command post going examine let start commentregion basic command commentuncomment active region nothing fancy behaviour command tweaked variable commentstyle supported comment style defined commentstyles plain nil nil nil nil start column indent indentortriple nil nil nil multichar start column singlechar starter indent nil nil nil full comment per line end aligned aligned nil nil full comment per line end aligned box nil full comment per line end aligned top bottom extraline nil one comment line end line multiline nil nil one comment line end last commented line boxmulti one comment line top bottom admit never felt need change default value commentstyle indent commentregion command bound key default good reason least two capable command render commentregion useless name implies simply uncomments line active region like commentregion bound key default similar vein command likely never use directly commentdwim swiss army knife emacs comment command depending context invoked exhibit pretty different behaviour region active call commentregion unless consists comment case call uncommentregion current line empty call commentinsertcommentfunction defined otherwise insert comment indent prefix argument specified eg cu call commentkill command kill first comment line else call commentindent simply indent comment versatile command bound default one thing somewhat annoying commentdwim convenient uncomment current line noted option select commented region case current line invoke commenddwim think would nice repeated invocation command handled somehow commentline newer command added emacs simpler alternative commentdwim commentuncomment current line region nothing nothing le command bound cx c personally like way commentdwim simpler consistent might want remap convenient keybinding like globalsetkey remap commentdwim commentline command put selected region comment box example defgroup crux nil crux configuration prefix crux group convenience becomes defgroup crux nil crux configuration prefix crux group convenience command bound key default closing thought many comment command top package like modespecific comment command like one provided clojurecommentdwim started writing article year ago got interrupted something totally forgot pretty sure meant cover ground longer remember mind happy finally got sharing approach dealing comment use builtin command rely custom command thirdparty extension
17,Lobsters,emacs,Emacs editor,Python+FontForge+Org: I made a font based on my handwriting,https://sachachua.com/blog/2020/06/pythonfontforgeorg-i-made-a-font-based-on-my-handwriting/,pythonfontforgeorg made font based handwriting,http sachachuacomblog http githubcomsachacsachachand emacs geek org fontforge font python see index,wanted make font based handwriting using free software turn fontforge scripted python know little python even le typography managed hack together something worked reading blog http sachachuacomblog probably see new font used blog post title whee rough note http githubcomsachacsachachand wanted write literate program using org babel block really fully reproducible yet might handy starting point basic workflow generate template using font base import template medibang paint phone draw letter different layer almost forgot letter q add last minute export layer writing cut image separate glyph using python autotrace one import glyph fontforge svg png set left side right side bearing overriding needed based table figure kerning class handtweak contour kerning use export web font file use blog modify stylesheet include really liked able specify kerning class org mode table like none c e g q w f x v z h b l k j n p r u zero none f r k l v b p w f two hard time defining class using fontforge interface occasionally ended clearing glyph selection great able edit column row clearly kerning still actual value j start also probably figure combine character pair kerning two table easier tweaking insisted tracing handwriting template time might actually able go process convert handwriting font whee post emacs geek org tag fontforge font python see index comment
18,Lobsters,emacs,Emacs editor,Emacs as Email Client,http://www.mycpu.org/read-email-in-emacs/,emacs email client,earlier post shared emacs notetaking email fewer distraction easier filtering orgmode orgcapture template translation russian,earlier post shared emacs configuration emailing emacs super power grateful past several year describe simple setup work importantly something like setup make almost want write descriptive email simply move pain writing email ecosystem feel comfortable writing long form article program design document artifact involve putting thought cringe everytime see email written rich text broad line going well character lot time make think people detailed email response tend almost face resistance thinking putting thought detailed email response consider following notetaking email well best demo guess want capture something email future reference maybe want stash important todo item email keep note furthermore nice automatically capture meta field email senttime take example composing post obviously emacs read lkml capture important note later access order overwhelm new emacs user go weed specific package used configuration etc post motivate right reader think using emacs email client boost productivity well least get point hate readingwriting email fewer distraction want minimize distraction avoiding untimely email popup using top offlineimap effective get check email wish yes turn notification come several way avoid distraction corollary make option suitable ie respond email try give proper attention easier filtering stupid simple filter email two keystroke j jump folder b jump bookmark similarly bookmarking particularly useful save query filter across folder ex jump mail xyz week ago use orgmode emacs luck simply select right keyword orgcapture template ok admit spent unhealthy amount time tweaking emacs config year like see simply start using config asis copying piece config emacs giving whirr hope whets appetite start using emacs email client among thing config detail coming separate translation russian vladimir like topic please consider subscribing podcast talk stalwart tech ask favorite productivity hack visit void star podcast page itunes podcast portal please click subscribe leave comment
19,Lobsters,emacs,Emacs editor,Setting up multiple IMAP and SMTP accounts in Gnus,https://www.bounga.org/tips/2020/05/03/multiple-smtp-accounts-in-gnus-without-external-tools/,setting multiple imap smtp account gnu,gnu msmtp manual entry posting style gnu posting style happens magic technique,user tend like everything frequent desire able read email popular option gnu gnu beast lot thing newsgroups r email configuring using bit scary first really widespread misinformation gnu thought long true come using multiple smtp server seamlessly sending email always read use external tool msmtp specific configuration make act proxy software multiple remote smtp advice use homemade function play message field hook via messagesendhook even tell hack etchosts hey gnu since ninety someone must think solution must builtin stopped searching blog post stack overflow read manual entry clearly state set complex workflow using multiple smtp server work using posting style way instruct gnu want prepare email header body signature according context digging like explain imap setting tightly related going setup smtp take look definition tell gnu imap server local name must behave setq gnusselectmethod nnnil nil setq gnussecondaryselectmethods nnimap home nnimapaddress imapgmailcom nnimapserverport imaps nnimapstream ssl nnirsearchengine imap nnmailexpirytarget nnimaphome gmail trash nnmailexpirywait immediate nnimap work nnimapaddress imapgmailcom nnimapserverport imaps nnimapstream ssl nnirsearchengine imap nnmailexpirytarget nnimapwork gmail trash nnmailexpirywait immediate set gnusselectmethod nnnil noop backend prefer set account place gnussecondaryselectmethods variable declared two imap server first one known locally home second one work using gmail find way distinguish account provide credential standard unix way share credential across software store authinfo file case use authinfogpg credential encrypted gpg one read content authinfogpg machine home login home gmailcom password mypasword port imaps machine work login work gmailcom password myotherpassword port imaps gnu read file get credential log imap server gnu know bind given credential specific account share name home work ok get email gnu two email account time configure account send email using respective smtp server credential sake clarity use imap smtp address account situation technique would work way two account two different email provider magic happens taking advantage gnu posting style reply mail matching email address setq gnuspostingstyles match group message address nicolas cavigneaux home gmailcom work match gnu group called work address nicolas cavigneaux work gmailcom organization corp signaturefile signaturework xmessagesmtpmethod smtp smtpgmailcom work gmailcom first line kind catchall rule tell gnu matter group sender email address going home gmailcom familiar gnu group imap folder second rule tell gnu current group match anything work want handle outgoing email differently sender address going work gmailcom organization header going corp automatically inserted signature bottom email going read signaturework file happens magic use special header gnu messagemode understand called xmessagesmtpmethod designed exact purpose able specify alternative smtp server use specify want use smtp protocol using address smtpgmailcom port user account use work gmailcom one last thing setup good go need provide smtp credential take place authinfo file machine smtpgmailcom login home gmailcom password mypassword port machine smtpgmailcom login work gmailcom password myotherpassword port searching server name username gnu able know right credential use basically enables multi smtp account gnu without bothering technique moral story come emacs always read official doc first since time find info need
20,Lobsters,emacs,Emacs editor,Using Emacs and mu4e for emails - even with HTML,https://200ok.ch/posts/2020-05-27_using_emacs_and_mu4e_for_emails_even_with_html.html,using emacs email even html,link freelibre open source software page,writing reading email inherently textbased workflow yes html mail attachment core email probably place many people write consume text utilize best textprocessing program available make lot sense combined powerful feature emacs org mode organizing mail project todos processing mail within emacs make lot sense becomes powerhouse people refrain using emacs similarly good mail user agent afraid setup deal well html email worry though emacs well task short screencast demo video link liked post want say please head freelibre open source software page like one give star github gitlab
21,Lobsters,emacs,Emacs editor,mu4e: emacs-based e-mail client which uses mu as its back-end,https://www.djcbsoftware.nl/code/mu/mu4e.html,emacsbased email client us mu backend,mu wanderlust manual mu source package available github screenshots main view message view view message pdf license copyright,starting version mu provides emacsbased email client us mu backend mu sits top maildir update eg offlineimap mbsync fetchmail designed enable superefficient handling email searching reading replying moving deleting overall bit mix dired wanderlust feature include fully searchbased folder query ui optimized speed quick key stroke common action fully documented example configuration asynchronous heavy action never block emacs write richtext email using orgmode experimental address autocompletion based message need managing address book extendable many place using custom action detail please see manual check screenshots part normal mu source package also available github screenshots main view message view messageheaders split view speedbar support view message pdf license copyright designed implemented dirkjan c binnema free software licensed gnu
22,Lobsters,emacs,Emacs editor,Org Mode - Organize Your Life In Plain Text,http://doc.norang.ca/org-mode.html,org mode organize life plain text,editing clock entry,okay admit clocking fanatic clock everything work orgmode make really easy rather clock much stuff enough find easier get habit clocking everything make possible look back day see spending much time enough time specific project also help lot need estimate long something going take use clocking data similar task help tune estimate accurate without clocking data hard tell long something took fact use concept punching punching start end work day punch arrive work punch lunch punch lunch punch end day every minute clocked punchin punchout time punching defines default task clock time whenever clock would normally stop found default orgmode setup would lose clocked minute day minute minute add especially true write note moving done state case clock normally stop composed note good note take minute write clocking setup basically work like punch start clock clock predefined task orgid default task clock whenever clock normally stop clock task normally let moving done state clock clocking automatically clock time parent task move back predefined default task parent exists continue clocking whatever task work punch stop clock free change default task multiple time day clock moving project tree clock longer need simply single task get clocked punchin punchin prefix task project x task automatically becomes default task clocked time go project either punch punch task org file look like todoorg filetags personal task organization property clockmodelinetotal today id end working task simply clock task clocking move clock parent task todo keyword keep clock time subtree parent task todo keyword clock move back default clocking task punch clock task interruption occurs start capture task keep clocked time interruption task close cc cc work really well example consider following org file todo project next task todo task todo task task todo miscellaneous task work file following sequence punch start day clock organization task id todoorg file review block agenda pick todo miscellaneous task work next clock clock todo miscellaneous task complete task mark done cc ct stop clock move back organization task want work project clock task work task mark done clock task move clock project work task clock entire time working clocking subtask project clock time interval applied somewhere project tree eventually mark project done clock move back default organization task editing clock entry sometimes necessary edit clock entry reflect reality find maybe entry week occassionally clock task time away computer case previous clocked task still running count time task wrong make note time get back computer clock right task edit start end time correct clock history visit clock line entry quickly use agenda log mode l show clock line today use navigate appropriate clock line quickly go current clocked task agenda log mode better finding visiting older clock entry use l open agenda log mode show logged clock time move cursor clock line need edit hit tab edit clock entry put cursor part date want edit use keyboard mouse since clicking timestamp mouse go back agenda day hit arrow arrow key change time following setting make time editing use discrete minute interval rounding increment setq orgtimestamproundingminutes quote editing time shift arrow combination also update total clock line nice convenience always check nt created task overlap fixing time clock entry viewing log mode agenda new view agenda hit v c daily agenda clock gap overlap identified want clock entry accurate possible following setting show minute clocking gap setq orgagendaclockconsistencychecks quote maxduration minduration maxgap gapokaround
23,Lobsters,emacs,Emacs editor,How I work on Python 2 and Python 3 with the Python Language Server (in GNU Emacs),https://utcc.utoronto.ca/~cks/space/blog/python/Python2And3LanguageServer,work python python python language server gnu emacs,language server protocol lspmode python language server early note using lspbased editing python dealing python indentation problem,python one programming language usually edit gnu emacs day mean using language server protocol lspmode pyls python language server back first set wrote early note using lspbased editing python solved problem wanting edit python python based code gnu emacs session want turn important run either python pyls python pyls depending whether file editing written python python creates several problem solve eventually brute force used python virtual environment probably would easier first obviously necessary install version install pyls homelocal using pip user switch created subdirectory manually moved python version pyls localbin requires always update python version pyls python version bit annoying life world version pick right version pyls run use cover script cover script us various heuristic check try figure run directory python python code nt work case mixed code sure would work general anyway nt homelocalbin path gnu emacs conveniently try run pyls start python lsp server put cover script homebin important check cover script us look version python seems run line py file current directory whether obvious print statement indicate python going note python program installed line usrbinenv like instead directly running python interpreter missed first version cover script python script directly use also default python version cover script python python writing new python code basically hack work pretty well especially combination dealing python indentation problem result pretty seamless lspbased python editing experience gnu emacs everything basically work sure sold whole lspbased experience editing python fault hack
24,Lobsters,emacs,Emacs editor,Learn Emacs Lisp in 15 minutes,https://bzg.fr/en/learn-emacs-lisp-in-15-minutes.html/,learn emacs lisp minute,http learnxinyminutescom http learnxinyminutescomdocselisp,surprised find introduction emacs lisp http learnxinyminutescom created one page http learnxinyminutescomdocselisp comment feedback welcome give introduction emacs lisp minute author bastien http bzgfr first make sure read text peter norvig http install gnu emacs debian aptget install emacs see distro instruction macosx http window http general information found http wwwgnuorgsoftwareemacs obtaining important warning going tutorial wo nt damage computer unless get angry throw floor case hereby decline responsability fun fire emacs hit q key dismiss welcome message look gray line bottom window scratch name editing space editing space called buffer scratch buffer default buffer opening emacs never editing file editing buffer save file lisp interaction refers set command available emacs builtin set command available every buffer several subset command available activate specific mode use lispinteractionmode come command evaluate navigate within elisp code semicolon start comment anywhere line elisp program made symbolic expression sexps symbolic expression read add sexps enclosed parenthesis possibly nested symbolic expression contains atom symbolic expression example atom symbolic expression lispinteractionmode evaluate sexps put cursor right closing parenthesis hold control hit j key cj short cursor cj cj insert result evaluation buffer cx ce display result emacs bottom line called minibuffer generally use cx ce nt want clutter buffer useless text setq store value variable setq myname bastien cx ce bastien displayed minibuffer insert insert hello cursor insert hello cx ce hello used insert one argument hello pas argument use two insert hello world cx ce hello world use variable instead string insert hello myname cx ce hello bastien combine sexps function defun hello insert hello myname cx ce hello evaluate function hello cx ce hello bastien empty parenthesis function definition mean accept argument always using myname boring let tell function accept one argument argument called name defun hello name insert hello name cx ce hello let call function string value unique argument hello cx ce hello yeah take breath switch new buffer named test another window switchtobufferotherwindow test cx ce screen two window cursor test buffer mouse top window leftclick go back use cx ie hold controlx hit go window interactively combine several sexps progn progn switchtobufferotherwindow test hello cx ce screen two window cursor test buffer nt mind stop asking hit cx ce every sexp follows always go back scratch buffer mouse cx often useful erase buffer progn switchtobufferotherwindow test erasebuffer hello go back window progn switchtobufferotherwindow test erasebuffer hello otherwindow bind value local variable let let localname switchtobufferotherwindow test erasebuffer hello localname otherwindow need use progn case since let also combine several sexps let format string format hello n visitor placeholder string replaced visitor n newline character let refine function using format defun hello name insert format hello n name hello let create another function us let defun greeting name let yourname bastien insert format hello nni name argument function yourname letbound variable bastien evaluate greeting function interactive readfromminibuffer enter name evaluating function return entered prompt let make greeting function prompt name defun greeting fromname let yourname readfromminibuffer enter name insert format hello nni fromname argument function yourname letbound var entered prompt greeting bastien let complete displaying result window defun greeting fromname let yourname readfromminibuffer enter name switchtobufferotherwindow test erasebuffer insert format hello nni yourname fromname otherwindow test greeting bastien take breath let store list name setq listofnames sarah chloe mathilde get first element list car car listofnames get list first element cdr cdr listofnames add element beginning list push push stephanie listofnames note car cdr nt modify list push important difference function nt sideeffects like car others like push let call hello element listofnames mapcar hello listofnames refine greeting say hello everyone listofnames defun greeting switchtobufferotherwindow test erasebuffer mapcar hello listofnames otherwindow greeting remember hello function defined take one argument name mapcar call hello successively using element listofnames argument hello let arrange bit displayed buffer defun replacehellobybonjour switchtobufferotherwindow test gotochar pointmin searchforward hello replacematch bonjour otherwindow gotochar pointmin go beginning buffer searchforward hello search string hello x evaluates sexp x return something x return nil nothing exit loop replacehellobybonjour see occurrence hello test buffer replaced bonjour also get error search failed hello avoid error need tell searchforward whether stop searching point buffer whether silently fail nothing found searchforward hello nil trick nil argument say search bound position argument say silently fail nothing found use sexp function nt throw error defun hellotobonjour switchtobufferotherwindow test erasebuffer say hello name listofnames mapcar hello listofnames gotochar pointmin replace hello bonjour searchforward hello nil replacematch bonjour otherwindow hellotobonjour let colorize name defun boldifynames switchtobufferotherwindow test gotochar pointmin researchforward bonjour nil addtextproperties matchbeginning matchend list face bold otherwindow function introduces researchforward instead searching string bonjour search pattern using regular expression abbreviated prefix regular expression bonjour read string bonjour group construct character possibly repeated string ready test boldifynames addtextproperties add text property like face ok done happy hacking want know variable function ch v avariable ret ch f afunction ret read emacs lisp manual emacs ch elisp ret read online introduction emacs lisp http wwwgnuorgsoftwareemacsmanualhtmlnodeeintrindexhtml thanks people feedback suggestion wes hardaker notbob kevin montuori arne babenhauserheide alan schmitt linxitow aaron meurer
25,Lobsters,emacs,Emacs editor,Literate Calc Mode - embedded M-x calc with live updates,https://github.com/sulami/literate-calc-mode.el,literate calc mode embedded mx calc live update,literate calc mode announcement blog post installing melpa packageel ensure melpa available manual literatecalcmodeel use using unit algebraic function full example roadmap semantic highlighting tydlig rainbowidentifiers shorter existing implementation exportimport,literate calc mode literate programming mx calc announcement blog post display inline result calculation support variable update type want also work favourite markup mode installing simply grab melpa usepackage literatecalcmode ensure straightusepackage literatecalcmode packageel ensure melpa available mx packageinstall select literatecalcmode manual fetch literatecalcmodeel save somewhere load emacs use major literatecalcmode minor literatecalcminormode major mode basic syntax highlighting minor mode evaluates calc statement typing minor mode work quite well orgmarkdown mode markup language major mode also function called without mode active mx literatecalcevallineevaluates single line mx literatecalcevalbufferevaluates whole buffer mx literatecalcinsertresultsevaluates whole buffer insert result mx literatecalcclearoverlaysremoves overlay clear variable using unit simply append unit value like flour flour g unit conversion complex function used invoking matching algebraic function usimplify also use unknown mathematical symbol x x full example literate calc file line without ignored result starting overlay generated literatecalcmode mean displayed emacs actually bufferfile content calculate value like string left hand side becomes bound variable pi pi use variable definiton tau pi tau result calculated using emacs calc use formula well round pi later binding shadow earlier one pi pi pi variable name space well monthly expense monthly expense monthly income monthly income annual saving monthly income monthly expense annual saving value recalculated every update spreadsheetlike fashion roadmap additional feature currently thinking semantic highlighting one original inspiration tydlig similar thing also semantic highlighting mean variable highlighted different colour always one given variable see used glance might steal code rainbowidentifiers one shorter existing implementation around adapt need exportimport currently option bake result adding buffer content genuine need exporting calculation result anyone read maybe also importing need tooling around also toying idea integrating orgbabel could babel literatecalc block evaluate export properly opinion please feel free open issue send email figure best way
26,Lobsters,emacs,Emacs editor,A Nix overlay for Emacs 27 with the 'emacs-mac' patches,https://cmacr.ae/post/2020-08-12-a-nix-overlay-for-emacs-27-mac/,nix overlay emacs emacsmac patch,updated release emacs nix overlay emacsmac,update official emacsmacport package updated nixpkgs master branch hit nixpkgsunstable channel soon recent release emacs figured share nix overlay using build emacsmac patch emacs come great performance improvement including native json support make really slick experience lspmode top really nice mitsuharu yamamoto patch enhance experience macos thing play lot nicer emacs superemacsmacportoverrideattrs rec version macportversion emacsname emacs version src builtinsfetchurl url http mirrorkoddosnetgnuemacs emacsname tarxz macportsrc builtinsfetchurl url ftp ftpmathschibauacjpemacs emacsname mac macportversion targz patch docheck false installtargets tag install buildinputs obuildinputs superjansson configureflags oconfigureflags withjson moment test nt passing need pas docheck false nt experienced issue yet
27,Lobsters,emacs,Emacs editor,swift-helpful,https://github.com/danielmartin/swift-helpful,swifthelpful,swifthelpful overview install configuration melpa quelpa http framagitorgsteckerhalterquelpa usage feature contextual information swift keywords attribute api documentation coming language server protocol http githubcomemacslsplspsourcekit swift standard library source code http githubcomburntsushiripgrep development http wwwgnuorgsoftwaremake http caskreadthedocsio installing dependency bytecompilation testing lint function documentation acknowledgement http githubcomwilfredhelpful,swifthelpful overview emacs described extensible customizable selfdocumenting realtime display editor like selfdocumenting experience writing swift code emacs swifthelpful package using information swiftmode lspmode swiftinfo able answer question anything see swift program developer tool typically identifiercentric sense show documentation api swifthelpful also show official apple information keywords attribute etc perfect company experimenting swift playground emacs equally useful people learning language people want revisit recent language addition also swifthelpful decoupled apple ecosystem use platform like window gnulinux also extremely fast perfectly use resourceconstrained platform like raspberry pi install configuration melpa install swifthelpful via melpa mx packageinstall ret swifthelpful quelpa install swifthelpful via quelpa http framagitorgsteckerhalterquelpa quelpa swifthelpful repo danielmartinswifthelpful fetcher github file el swiftinfo info usage main entry point swifthelpful command executed point placed swift code feature contextual information swift keywords attribute swifthelpful show information swift keyword attribute let say see import swift program want know importing module swift work simply place point top import invoke swifthelpful mx swifthelpful tool show brief snippet documentation swift module many case keyword highlighted focus attention mentioned documentation pressing read manual button open swift manual section info buffer read definitive discussion topic information limited keywords swift programming language gradually increasing use attribute language swifthelpful also show information attribute let say know dynamiccallable mean attribute introduced swift simply place point one occurrence attribute invoke swifthelpful read explanation time coming official swift reference manual api documentation coming language server protocol swifthelpful also show documentation api way favorite ide leverage lspmode configured specific extension swift lspsourcekit http githubcomemacslsplspsourcekit let say want know isexecutable method see source file sourcekitlsp project invoke swifthelpful symbol see information coming language server protocol including method type signature header documentation two convenient button search definition reference across codebase swift standard library source code compiled checkout swift standard library swifthelpful able search present implementation source code almost zero configuration two requirement use feature need install ripgrep tool http githubcomburntsushiripgrep fast directory searcher need point swifthelpful local checkout swift standard library setq swifthelpfulstdlibpath path local compiled checkout stdlib let say want know dropfirst collection function swift ask swifthelpful presented function implementation collectionswift file path actual link clicking open standard library source file case want explore development development automated mean make http wwwgnuorgsoftwaremake cask http caskreadthedocsio installing program encouraged developing swifthelpful installing dependency bytecompilation testing minimize chance regression run swifthelpful regression test suite introducing change want use ertrunner lint function documentation good emacs package follow basic style rule regarding function documentation check see readmemd inside swiftinfo folder know update documentation modified documentation source code org acknowledgement idea package inspired helpfulel http githubcomwilfredhelpful
28,Lobsters,emacs,Emacs editor,Emacs 27.1 released,https://lists.gnu.org/archive/html/emacs-devel/2020-08/msg00237.html,emacs released,date prev date next thread prev thread next date index thread index emacs released http wwwgnuorgsoftwareemacs http http http http http wwwgnuorgprepftphtml http ftpgnuorggnuemacs http shopfsforgproductemacsmanual,date prev date next thread prev thread next date index thread index emacs released nicolas petton subject emacs released date tue aug hi version emacs text editor available information emacs see http wwwgnuorgsoftwareemacs retrieve source nearest gnu mirror using one following link http http get pgp signature http http tarball signed following gpg key found public pgp key server retrieve key pgp key server evaluate gpg keyserver hkp keysgnupgnet recvkeys choose mirror explicitly list http wwwgnuorgprepftphtml mirror may take time update main gnu ftp server http ftpgnuorggnuemacs emacs wide variety new feature including builtin support arbitrarysize integer text shaping harfbuzz native support json parsing better support cairo drawing portable dumping used instead unexec support xdg convention init file additional earlyinit initialization file lexicalbinding used default builtin support tab bar tabline support resizing rotating image without imagemagick many change summary see etcnews file view emacs ch n complete list change people made see various changelog file source distribution summary people contributed emacs see etcauthors file online manual website updated shortly printed copy emacs manual available purchase free software foundation online store http shopfsforgproductemacsmanual regard nico signatureasc description pgp signature
29,Lobsters,emacs,Emacs editor,How to insert screenshots in Org documents on macOS,https://zzamboni.org/post/how-to-insert-screenshots-in-org-documents-on-macos/,insert screenshots org document macos,inserting displaying inline image orgdownload pngpaste thread stack overflow note,taking note writing orgmode often want insert screenshots inline text org support inserting displaying inline image assumption image already somewhere file system want link orgdownload package eas task downloading copying image attaching document even orgdownloadscreenshot command assumes want initiate screenshot within emacs whereas workflow prefer like capture screenshot using macos builtin screenshot tool leave clipboard paste image document working fortunately orgdownload allows customizing command used orgdownloadscreenshot command together pngpaste utility used make orgdownloadscreenshot store image clipboard disk insert document configuration usepackage orgdownload org defer nil custom orgdownloadmethod directory orgdownloadimagedir image orgdownloadheadinglvl nil orgdownloadtimestamp h orgimageactualwidth orgdownloadscreenshotmethod usrlocalbinpngpaste bind cmy orgdownloadscreenshot config require orgdownload configuration image stored directory named image current directory flat directory structure file prepended timestamp would prefer use timestamps orgdownload us fixed filename screenshots make difficult insert multiple screenshots document may want check orgdownload documentation configure setting liking finally bind orgdownloadscreenshot keep similar default pasting clipboard easily perform step workflow described want insert screenshot document simply press capture screenshot switch back emacs press done look like without inline image display see screenshot automatically stored inside image directory thanks thread stack overflow base idea pointer configuration note technique could used nonmacos system invoking corresponding utility thread get example window linux
30,Lobsters,emacs,Emacs editor,Emacs is Superman,https://wiki.c2.com/?EmacsIsSuperman,emacs superman,,
31,Lobsters,emacs,Emacs editor,Telegram messenger client for GNU Emacs (unofficial client),https://github.com/zevlg/telega.el,telegram messenger client gnu emacs unofficial client,telegael telegram gnu emacs feature http tmexxx telega telega translationsplatform tdlib unique feature screenshots emacsen installation tdlib gnu guix installing gnu guix dependency macos user emacs mac o x emacsplus emacsmac emacsplus linux user building tdlib tdlib brewsh building libtgvoip libtgvoip original installing telegael melpa melpa fire building telegaserver installing telegael installing telegael tdlib gnu guix guix label fire minor mode minor mode telega manual teleganotificationsmode enabling emoji completion chat buffer companymode configuring client side message filtering contribute telegram group issue license faq q melpa q http http q q q http http q q q http githubcomzevlgtelegaelblobmasterdocstelegamanualorg chatfilters q q q http githubcomzevlgtelegaelblobmasterdocstelegamanualorg,telegael telegael full featured unofficial client telegram platform gnu emacs telegael actively developed reason feature implemented present skeleton future implementation however core part mature enough possible use telegael basic chat feature random order listing chat reordering chat according internal telegram order getting info user group supergroups joining chat invitation link mx telegachatjoinbylink ret fetching chat history sending message reply edits deleting resend failed message creating new group upgrading basicgroup supergroup forwarding message dbus notification incoming message chat enabled notification voip call including dbus call notification downloading file cloud uploading filesmedia also pasting image clipboard cloud display chat action user typing displayupdate chat draft message company backends emoji emoji syntax usernames hashtags bot command completion secret chat online global searching chatscontactsmessages avatar photo sticker animated gif via ffplay special message locationlive location voicevideo message contact selfdestruct photovideo etc poll message poll creation game game score handling local link tg http tmexxx replymarkup inline keyboard button message instantview web page blockingunblocking user listing blocked user inline bot request via bot query chat list archived chat see telega searching message chat partly shared medium multiple account traffic control see telega translationsplatform support partly message scheduling reminder partly cloud theme see tdlib telegram folder since tdlib unique feature screenshots root buffer screen chat emacsen group attaching funny cat sticker installation telegael depends visualfillcolumn rainbowidentifiers package dependency automatically installs install telega melpa gnu guix otherwise need install package hand telegael built top official library provided telegram tdlib distribution provide package repository case install manually following instruction gnu guix however telegael tdlib packaged use gnu guix skip directly installing gnu guix dependency gnu emacs least required gnu make gnu gperf cmake python testing server gnu guix optional using guix installation method make found modern machine package download system package manager apt debianbased distribution dnf fedora pacman archbased macos user using emacs mac o x installed emacs running brew cask install emacs emacs lack svg support use telega please switch emacsplus using emacsmac installed emacs running brew install emacsmac brew cask install emacsmac emacs bug dealing complex svg lead emacs hangups compiling emacs rsvg support running brew install emacsmac withrsvg fix problem note telega display sticker correctly emacsmac even emacsmac compiled rsvg support want sticker support please consider switching emacsplus emacsplus best choice run telega linux user telegael requires least gnu emacs imagemagick svg support distribution provide gnu emacs compiled dependency installing gnu emacs gtk support graphical building tdlib tdlib library building telegram client requires large amount memory built make sure using tdlib version macos install prebuilt tdlib package using homebrew brewsh run linux need build tdlib source get source git clone http githubcomtdlibtdgit move folder cd td wherever checked td prepare folder building library mkdir build cd build cmake build source n number core used compilation optimal value number physical core machine finally install library systemwide install header usrlocalinclude library usrlocallib path hardcoded telegael building libtgvoip voip support telegael optional nt need voip ignore section libtgvoip voip library telegram client fork original library patch needed telegael get source git clone http githubcomzevlglibtgvoipgit move folder cd libtgvoip wherever checked libtgvoip prepare folder building library autoreconf force install configure make install library systemwide also install header usrlocalinclude library usrlocallib installing telegael melpa telegael available melpa install usual package preferable method automatically handle dependency installing telegael melpa skip fire telegael section could use git repository melpastyle recipe fetcher github repo zevlgtelegael branch master file default etc server makefile building telegaserver tdlib library setup time install telegael first step consists building telegaserver c interface tdlib let telega ask first start job dependency compilation need installed aheadoftime get source git clone http githubcomzevlgtelegael moving folder cd telegael possible build telegaserver executable move hometelega make make install make test want voip support telegael libtgvoip installed use instead make withvoipt make withvoipt install make withvoipt test command require superuser privilege start mx telega ret follow instruction installing telegael time install telegael gnu emacs done usepackage usepackage telega loadpath telegael command telega defer addtolist loadpath telegael require telega code put configuration file emacs usually initel emacsel installing telegael tdlib gnu guix telegael tdlib available gnu guix resource constrained machine would simply prefer bypass compiling tdlib source good option guix system guix package emacstelega foreign distribution guix package emacs emacstelega need version emacs installed gnu guix modified autoloader identify automatically use emacs package installed guix consult official gnu guix documentation question issue related guix package must accompanied guix label issue tracker note since telega actively maintained installation guix might time lag behind master regular attempt keep updated occur version guix outdated missing feature please use protocol issue tracker fire telegael telegael started mx telega ret first time ask phone number associated telegram network minor mode see minor mode section telega manual teleganotificationsmode telegael ship support dbus notification disabled default enable notification add next code initel teleganotificationsmode enabling emoji completion chat buffer emoji completion emojiname syntax us nice companymode provides telegacompanyemoji company backend need add companybackends maybe along backends telegachatmodehook example addhook telegachatmodehook lambda set makelocalvariable companybackends append telegacompanyemoji telegacompanyusername telegacompanyhashtag telegachatbotp telegachatbuf chat telegacompanybotcmd companymode configuring client side message filtering official telegram client message group chat displayed even message sent blocked user telegael client side message filtering feature implemented ignoring message done via installing special function telegachatinsertmessagehook could mark message ignored example ignore message particular user could add next code defun msg rest notused plistget msg senderuserid telegamsgignore msg addhook telegachatinsertmessagehook ignore message blocked user add addhook telegachatinsertmessagehook telegamsgignoreblockedsender view recent message ignored use mx telegaignoredmessages ret command contribute join telegram group discus development telegael submitting issue exceptionally helpful license telegael licensed gnu gpl version faq q error installing telega open load file file directory visualfillcolumn telegael depends visualfillcolumn package please install first package available melpa q error running telega error invalid image type svg andor error invalid image type imagemagick telegael requires emacs svg imagemagick support svg support emacs done using librsvg library imagemagick need libmagickcoredev libmagickwanddev package installed unfortunately emacs recently disabled imagemagick support default see http need compile emacs hand specifying withimagemagick flag configure script telega wo nt depend imagemagick future since required image feature added newer emacs see http q telega proxy support yes use telegaproxies custom variable example setq telegaproxies list server port enable false type type username rkn password jopa server port enable type type username rkn password jopa see ch v telegaproxies ret full range proxy type q sticker shown make sure imagemagick support please install webp package q telegael unbearable slow might hitting emacs bug described http also see http q glyph unicode character please install fontssymbola package q formatting issue unicode character used yes partly character full width multiple ordinary char tweak charwidthtable add code like initel setq telegasymbolunread defun mytelegaload occupies two full char stringwidth return install custom width charwidthtable telegasymbolsetwidth telegasymbolunread code addhook telegaloadhook mytelegaload also telegasymbolwidths custom variable might want modify q erclike chat tracking functionality yes set telegausetrackingfor nonnil tracking done opened chat ie chat corresponding chat buffer value chat filter http githubcomzevlgtelegaelblobmasterdocstelegamanualorg chatfilters example enable tracking chat enabled notification chat unread mention use setq telegausetrackingfor unmuted mention q possible use telega ttyonly emacs aka emacsnox yes set telegauseimages nil start q possible use markup outgoing message yes use cu ret send message markup also see telegachatusemarkdownversion supported markup bold text italic text underline text strike text inlined code languagenamenotdisplayed first line multiline preformatted code second line last line link text http actualurl username tg user id userid note language syntax highlighting requires contrib telegamnz module q manual telegael started write http githubcomzevlgtelegaelblobmasterdocstelegamanualorg
32,Lobsters,emacs,Emacs editor,My Writing Setup,https://explog.in/notes/writingsetup.html,writing setup,,switched several different combination indentation time org mode time orgindentmode excellent default downside increasing visual width file heading increasingly nested make simpler keep document within character reasonably sized heading force consecutive indentation level increment one character time orgindentindentationperlevel setq orgindentindentationperlevel default org indent text match indentation heading embarrassed admit spent several year manually removing automatically inserted whitespace learning orgadaptindentation directly control behavior setting nil disables behavior setq orgadaptindentation nil use ch v mx describevariable look definition variable customization
33,Lobsters,emacs,Emacs editor,Scripting beorg with Scheme,https://beorg.app/manual/scripting/,scripting beorg scheme,introduction biwascheme home page repl getting started little scheme variable saving customizations customizations font io font show available icon editor repl buffer cursorpoint changing text buffer user interface alert toast sheet date custom todo filter starting beorg specific tab export theme export theme device information libraryorg view libraryorg,introduction beorg come scripting language based scheme example use setting advanced option exposed setting tab modifying toolbar shown keyboard editing note include extending text editor custom command inserting timestamp defining additional filter available todo tab version scheme included beorg called biwascheme find biwascheme home page repl beorg repl allows type scheme expression command see result immediately start repl go setting tab beorg tap button top right simple example using repl parrot back hello world hello world hello world use beorg repl simple calculation equivalent writing getting started little scheme scheme conceptually simple scheme expression parenthesis start name function followed argument example function argument nest scheme expression example add result multiplying scheme based list scheme lisp family language name lisp come list processor scheme program data written list want list first item function execute need write like apple banana orange apple banana orange example created list symbol apple banana orange symbol different string used represent name variable function wanted list string would write like apple banana orange lot tutorial book scheme lisp available web variable using scheme customize beorg way setting tab one example might wanting use different font note editor currently possible change setting tab writing scheme write wanted use font baskerville size set editorfont baskerville try starting beorg repl writing scheme expression editing note note affect editor currently open get help particular variable use function documentation example documentation editorfont font use repl format font name font size example menlo note using set put name however must put using documentation function saving customizations beorg start look file called initorg sort file use task note however contains scheme expression scheme expression special block interspersed normal text example simple initorg might look like change editor font font beginsrc scheme set editorfont baskerville endsrc special block indicating scheme expression start beginsrc scheme end endsrc edit initorg using beorg outline editor however may find easier using text editor computer syncing beorg customizations font changing font used editor set editorfont fontname fontsize example set editorfont menlo list available font io check io font changing font used repl set replfont fontname fontsize toolbar shown keyboard editing note using repl example editor toolbar definition set editortoolbaritems iconleft backwardchar iconright forwardchar iconlist insert iconchange showtransformcommands iconsettings insertcodesnippet toolbar five icon add many icon wish displayed screen scrolled horizontally variable editortoolbaritems list list list defines one toolbar item either icon name text display followed scheme execute show available icon changing repl toolbar exactly use variable name repltoolbaritems default toolbar shown full screen editor would like shown always add following initorg set editortoolbarshowinmini editor repl buffer text shown editor repl referred buffer various function operate buffer retrieve information buffer either text cursor known point get current size buffer write buffersize cursorpoint cursor point show user typed character appear beorg change position point get information current position point return current position point pointmin return position start buffer always pointmax return position last character buffer gotochar n move point n eg gotochar move point start buffer backwardchar move point back one character forwardchar move point forward one character addition point cursor also text currently selected referred region regionbeginning return start position selected text regionend return end position selected text note text selected regionbeginning regionend point changing text buffer insert text buffer use insert function insert hello insert text hello position point ie cursor point end text inserted get text manipulate use buffersubstring function take two argument buffersubstring pointmin pointmax get text buffer also achieved using region delete text buffer use deleteregion also take argument deleteregion pointmin pointmax delete text buffer replace currently selected text use regiontextset regiontextset stringupcase region convert selected text uppercase user interface alert show alert user using alert function take two argument first title alert second message alert welcome hi show alert text hi user alerted titled welcome toast alert requires user tap ok button dismiss alternative alert toast message slide top screen disappears shortly afterwards toast function parameter alert title message toast calculation result number string show toast title calculation result message sheet show user set option choose create sheet sheet similar toolbar list list first item sublist text display user icon supported followed scheme code run define showtransformcommands string region alert text selected sheet uppercase regiontextset stringupcase region lowercase regiontextset stringdowncase region scheme function user text selected show sheet option uppercase lowercase user selects uppercase selected text converted uppercase sheet great way extend editor functionality fit workflow date request user provide date using date picker present date picker execute provided callback addition callback date picker function take default date display whether date includes time component user picked date callback provided boolean saying whether user cancelledremoved date date whether user included time date example datepicker currentdate f lambda removed date includestime removed alert date date string date ask user date date picked ie user tap trash remove date date displayed alert custom todo filter todo tab filter task number builtin filter example show task priority set example custom filter called top priority show task priority set filteradd top priority lambda item string itempriority item first argument function filteradd name filter show filter list second argument procedure return either true false case true returned priority procedure passed org item following function available retrieve data item itemfile name file org task contained eg inboxorg itemheadline headline item ie task title itemstate eg todo done itempriority priority item itemtags tag assigned item itemscheduled scheduled date item scheduled date f false itemdeadline itemactivedate itemoverdue true item overdue itemproperty property value property item property drawer starting beorg specific tab configure beorg start specific tab agenda todo file set uistarttab todo tell beorg start todo tab valid option agenda file export theme purchased export theme inapp purchase extension add theme exporting document theme need file loaded using loadthemes scheme function add initorg theme get loaded everytime beorg start theme file must contain one heading source block cs example minimal theme file minimal theme description minimal theme beginsrc cs include beorg default theme body fontfamily monospace endsrc theme extends default theme setting font monospace see include another theme using include syntax note theme must read beorg already ie occur later file another file read yet theme unique name example name theme minimal theme theme loaded name another override theme name theme start underscore shown theme selector ui device information beorg defines number variable detail device may useful conditionally customising beorg iphone ipad differently variable devicename name device example matthew iphone devicemodel example iphone deviceosversion example devicetype one phone pad tv car unknown libraryorg beorg start read scheme file come bundled app file contains number default helper function used beorg want get serious beorg scripting take look file help realise possible view libraryorg please note version current release beorg may vary
34,Lobsters,emacs,Emacs editor,El Gantt – A Gantt chart/calendar for Orgmode,https://github.com/legalnonsense/elgantt/,el gantt gantt chartcalendar orgmode,el gantt gantt chartcalendar orgmode installation disclaimer first use using test file customization setting header type setting timestamps display display option custom variable navigation command example note colorizing outline orggantt use outline structure unfolded space header overarching header line folded use hashtags folded space custom header header line format macroconfiguration example explanation macro accessing adding property following property included cell default changing color certain cell adding new property org file example way colorize time block linking cell helper function drawing display navigating buffer selecting multiple entry getting calendar data editing underlying org file redrawing creating custom view face theme interacting calendar faq fold unfold without reloading many gradient change log fri,el gantt gantt chartcalendar orgmode el gantt creates gantt calendar orgmode file provides flexible customization system goal adaptable multiple purpose move date scroll forward backward jump underlying org file customize display package ongoing development feature request bug report welcome help welcome installation install dependency clone repository lisp directory cd emacsdlisp git clone httpqs githubcomlegalnonsenseelganttgit addtolist loadpath concat useremacsdirectory lispelgantt wherever located require elgantt disclaimer package inprogress know mean alpha testing beta whatever everything described work stable enough every day use package useful please help polish put melpa first use run elganttopen default elgantt use orgagenda file running orgagenda file may want experiment test file using test file set elganttagendafiles location wherever installed elgantt cloned lisp subdirectory setq elganttagendafiles concat useremacsdirectory lispelgantttestorg run elganttopen see rather bland looking chart customization variable get set setq need use customization interface usepackage custom keyword setting header type header calendar defined elganttheadertype four default value option define custom function run first point org heading valuebehavior categorygroup entry category property filename category property set hashtaggroup entry tag prefixed hashtag outlineuse outline structure rootgroup root heading functionrun given function point grouping entry return value function setting timestamps display set variable elgantttimestampstodisplay control type timestamps displayed variable list contain deadline timestamp timestampia scheduled timestamprange timestamprangeia order list matter determined precedence first type entry found heading displayed character generally use setq elgantttimestampstodisplay deadline timestamp scheduled timestamprange display option valuebehavior elganttstartupfoldedif nonnil display entry grouped headertype single line otherwise entry grouped header one entry per line elganttshowheaderdepthif elganttheadertype set outline show outline depth inserting elganttlevelprefixchar elganttheadertype outline effect elganttlevelprefixcharthe character used prefix nested entry elganttevennumberedlinechangethis control much percent even numbered line offset background color set want distinction elganttscrolltocurrentmonthatstartupscroll current month startup keep calendar first timestamp elganttinsertblanklinebetweentoplevelheaderjust say elganttdrawoverarchingheadersdraw line bracketing start end date child toplevel header assuming date already associated header elganttheadercolumnoffsetthe width header column elganttheaderlineformatsee section detailing use variable elganttexclusionsthis list string display header appear list elganttinsertheaderevenifnotimestampinsert header even timestamp associated elgantthidenumberlinehides number line appears top calendar custom variable variabledefault elganttdeadlinecharacter elganttactivetimestampcharacter elganttinactivetimestampcharacter elganttscheduledcharacter elganttmultipleentrycharacter elgantttimestamprangestartcharacter elgantttimestamprangeendcharacter elganttcaltimestamprangeiastartcharacter elgantttimestamprangeiaendcharacter elganttagendafiles orgagendafiles elganttskiparchivest elganttstartdate concat formattimestring ie current month elganttstartdate probably important one set cutoff date ignore old entry navigation command key bindingcommand fmove forward next entry line nmove backward previous entry nmove closest entry next line pmove closest entry previous line fscroll forward one month bscroll backward one month mfshift date point forward one day mbshift date point backward one day cmove calendar current date spacenavigate org heading point returnshow agenda date point note cell multiple entry calendar cell multiple entry special character displayed default try perform function one cell eg navigating org file shifting date etc prompted select entry want perform operation example exampes use testorg file setq elganttagendafiles emacsdlispelgantttestorg wherever elgantt direcctory located note colorizing outline example follow draw gradient scheduled time entry deadline entry scheduled date actually shown calendar included package need use custom macro shown took idea orggantt package included default work use deadline scheduling particular way use colorize calendar way make good demonstration code necessary alternative way use color discussed explaining elganttcreatedisplayrule macro want color appear evaluate code reload ie cr calendar setq elganttusersetcolorprioritycounter elganttcreatedisplayrule drawscheduledtodeadline parser elganttcolor whenlet color orgentryget point elganttcolor ssplit color args elganttscheduled elganttcolor elganttorgid body elganttscheduled let point saveexcursion elgantt gotodate elganttscheduled point car elganttcolor black cadr elganttcolor red elgantt drawgradient since cell necessarily linked chronological order make sure sorted nil priority setq elganttusersetcolorprioritycounter elganttusersetcolorprioritycounter decrease priority earlier entry take precedence later one note matter number negative elganttuseroverlay elganttorgid use outline structure unfolded space header overarching header line setq elganttheadertype outline elganttinsertblanklinebetweentoplevelheader elganttstartupfolded nil elganttshowheaderdepth elganttdrawoverarchingheaders folded setq elganttheadertype outline elganttinsertblanklinebetweentoplevelheader nil elganttstartupfolded elganttshowheaderdepth elganttdrawoverarchingheaders note two colored gradient overlap average two gradient used display way still see span time though result always pretty use hashtags folded space setq elganttheadertype hashtag elganttinsertblanklinebetweentoplevelheader nil elganttstartupfolded look like unfolded custom header silly example group header first letter ofo headline setq elganttheadertype lambda substring orgentryget point item also want set elganttinsertheaderevenifnotimestamp nil otherwise see single letter header assocated headline without date header line format variable elganttcustomheaderline control format header line use property cell reference property prop keyword without elgantt prefix example access headline cell entry elganttheadline headline also unique property dateatpoint display date point dependent property stored given cell multiple entry cell data separated pipe ie align text headerline left center right side header overlap latter property take precedence former property return string formatted string format prop keyword also function run cell point header line disabled default finish sorting variable function handle enable setq headerlineformat eval elganttheaderlinefunction use default value elganttcustomheaderline setq elganttcustomheaderline left prop dateatpoint padding prop headline padding another example setq elganttcustomheaderline left prop dateatpoint could also use example elganttgetdateatpoint lambda elganttgetdateatpoint padding prop todo padding center prop headline right prop hashtag padding textprops face background red header line workinprogress first attempt solution list property keyworddescription propany property stored cell retrievable elganttgetpropatpoint function run cell point paddinginteger indicates padding next entry default padding afterpadif length string exceeds value padding still separate entry following number padding character paddingcharthe character used padding single character default space textpropsany text property associated text example set custom face face background red macroconfiguration example explanation elgantt aim provide flexible way customize calendar display whether hit target concern elganttcreatedisplayrule macro macro used customize display calendar defines function run cell calendar generated cell contains multiple entry run entry cell accessing adding property proceeding list property included entry calendar following property included cell default propertyvalue elganttheadlinetext org headline text property elganttdeadlinedeadline string yyyymmdd nil elganttscheduledscheduled timestamp nil elgantttimestampfirst active timestamp date nil elgantttimestampiafirst inactive timestamp date nil elgantttimestamprangeactive timestamp range list two string yyyymmdd yyyymmdd nil elgantttimestamprangeiasame inactive timestamp range elganttcategorycategory property heading filename category property supplied elgantttodotodo type property nil elganttmarkermarker pointing location heading org buffer elganttfilefilename underlying org file elganttorgbufferbuffer underlying org heading elganttalltagsa list tag including inherited tag associated heading elganttheaderheader used insertion calendar buffer depends value elganttheadertype elganttdatedate used insertion calendar us first date found elgantttimestampstodisplay elgantthashtagany hashtag inherited associated headline property returned orgentryproperties also included entry property list basic example use display customization macro changing color certain cell suppose want change background color cell todo state red elganttcreatedisplayrule turntodored args elgantttodo argument list available body body string todo elgantttodo elgantt createoverlay generally easiest way create overlay since ov dependency elgantt createoverlay point point face background red caveat already overlay cell manage overlay priority display properly manual serious warns make assumption overlay prevail two overlay share priority priority example choose arbitrarily large priority make sure overlay displayed others elganttcreatedisplayrule turntodored args elgantttodo argument listed available body body string todo elgantttodo elgantt createoverlay generally easiest way create overlay elgantt createoverlay point point face background red priority want make dynamic display ie one update every time move postcommandhook keyword add function postcommandhook run time cursor move example suppose want make cell red match todo state cell point use macro elgantt iterateovercells run expression cell want use kind display probably want give overlay unique id clear overlay time cursor move elganttcreatedisplayrule turnmatchingtodosred args elgantttodo postcommandhook recalculate every time point move body removeoverlays pointmin pointmax turnitred since run time cursor move need clear previous overlay first elgantttodo make sure todo state elgantt iterateovercells member elgantttodo elganttgetpropatpoint elgantttodo elgantt createoverlay point point face background red priority arbitrary identifier know overlay clear turnitred using testorg file headline todo state see turn background entry also todo state point cell state experimentation want disable display rule add disable removed function stack postcommand hook appropriate alternative call elgantt clearallcustomizations delete function created customization macro adding new property org file suppose want change color cell based property present default example want change color cell certain priority property included default case use parser keyword add property expression run first point org heading automatically added parsing function syntax parser expression expression add property get priority org heading elganttcreatedisplayrule prioritydisplay parser elganttpriority orgentryget point priority body insert code use elganttpriority variable must reload calendar evaluating macro calendar repopulate elganttpriority value added entry text property example way colorize time block colorize block time depends two org property elganttcolor elganttlinkedto elganttcolor org property contains two color name represent start end gradient elganttlinkedto contains id org heading different colorizing macro used example color block starting scheduled date ending deadline setq elganttusersetcolorprioritycounter must counter ensure overlapping overlay handled properly elganttcreatedisplayrule usersetcolor parser elganttcolor whenlet color orgentryget point elganttcolor ssplit color elganttlinkedto orgentryget point elganttlinkedto args elganttorgid body elganttlinkedto saveexcursion whenlet point let date cell linked even header calendar therefore get date linked cell move date current header saveexcursion elgantt gotoid elganttlinkedto setq date elganttgetdateatpoint elgantt gotodate date point car elganttcolor cadr elganttcolor elgantt drawgradient since cell necessarily linked chronological order make sure sorted nil priority setq elganttusersetcolorprioritycounter elganttusersetcolorprioritycounter decrease priority earlier entry take precedence later one elganttuseroverlay elganttorgid linking cell elgantt connectcells sample use following macro draw line cell share hashtag code also add shortcut move next matching hashtag elganttcreatedisplayrule showhashtaglinks args elgantthashtag postcommandhook update time point moved body elgantt clearjuxtapositions nil nil hashtaglink need clear last display elgantthashtag hashtag property cell elgantt connectcells elganttalltags elgantthashtag hashtaglink foreground red elganttcreateaction followhashtaglinkforward args elganttalltags binding cmf body whenlet hashtag first sstartswithp elganttalltags point car elgantt nextmatch elganttalltags hashtag gotochar point elganttcreateaction followhashtaglinkbackward args elganttalltags binding cmb body whenlet hashtag first sstartswithp elganttalltags point car elgantt previousmatch elganttalltags hashtag gotochar point helper function following function included aid customizing display see docstrings information drawing display create overlay elgantt createoverlay draw gradient elgantt drawgradient draw progress bar elgantt drawprogressbar example use elgantt drawprogressbar suppose following org file todo read illuminatus trilogy scheduled tue deadline tue property totalpages pagesread id end following code elganttcreatedisplayrule pagesreadprogress parser totalpages stringtonumber orgentryget point totalpages pagesread stringtonumber orgentryget point pagesread args elganttdeadline elganttscheduled body elganttdeadline elganttscheduled totalpages pagesread let start progn elgantt gotodate elganttscheduled point end progn elgantt gotodate elganttdeadline point percent float pagesread float totalpages elgantt drawprogressbar red blue start end percent automatically display progress bar starting scheduled date deadline date displaying progress bar represents percent page read note code generate error run org file totalpages pagesread property orgentryget return nil cause stringtonumber fail instead something like parser totalpages whenlet orgentryget point totalpages stringtonumber pagesread whenlet orgentryget point pagesread stringtonumber solution like dash draw line one cell another elgantt drawline see also elgantt connectcell juxtapose text top cell elgantt insertjuxtaposition clear elgantt clearjuxtapositions change character cell preserving text property elgantt changechar navigating buffer move cell orgid elgantt gotoid move date current line elgantt gotodate iterate entry elgantt iterateovercells selecting multiple entry cell multiple entry prompt user pick one used elgantt selectentry getting calendar data get date point elganttgetdateatpoint get property cell elganttgetpropatpoint always return list multiple entry cell point list value without argument return property editing underlying org file use macro elganttwithpointatorigentry execute code underlying org heading redrawing reload single cell invite catastrophe update cell date point elganttupdatethiscell display ie overlay single cell redrawn elgantt updatedisplaythiscell cell elgantt updatedisplayallcells else fails reload everything elganttopen note orgql orgql creates cache result us cache underlying org file changed change something way calendar displayed odds problem using orgql cache reason reloading invalidates orgql cache calling elgantt resetorgqlcache simply set orgqlcache initial value seems solve reloading problem creating custom view create custom view gantt chartcalendar defining function like try letbind variable call elganttopen open inside closure thing break use setq need use customize interface defun elganttoutlinefolded interactive setq elganttstartdate nil elganttscrolltocurrentmonthatstartup nil elganttagendafiles emacsdlispelgantttestorg elganttstartupfolded nil elganttinsertheaderevenifnotimestamp elganttheadertype outline elganttshowheaderdepth elganttheadercolumnoffset elganttevennumberedlinechange elganttopen want use custom display macro call elgantt clearallcustomizations include custom macro inside function face theme elgantt adjust color work theme regardless whether dark light interacting calendar two way interact calender elganttcreateaction macro separate module elganttinteraction elganttcreateaction macro work way elganttcreatedisplayrule except keywords binding command use macro anything could use perform action orgfile calendar eg marking todo done elganttinteraction use must require elganttinteraction module experimental code cleaned written frenzy wondering whether could without considering whether inspires idea others use return otherwise unless need plan abandon example use set elganttlinkedto elganttcolor property used example designed allow user select cell perform action certain sequence allows user make two selection return pressed prompted user enter two color set property relevant org heading example work code elganttinteraction generally untested know whether develop absent need framework theory provides robust way create way interact calendar perform action multiple org entry invoke interface press prompted select interface like execute counter appear show number cell selected message displayed defined selectionmessages keyword cell selected pressing space user press return execute command execution function run order listed executionfunctions first number refers cell order selected variable returnval return value previous function user selects two cell press return program move second selected cell run orgidgetcreate return value section function move first cell user selected add id second selection ie returnval prompt user two color set property heading appropriatly addition able use number refer cell order selected use rest allbutlast last refer cell perform operation require elganttinteraction elgantt selectionrule name colorize selectionnumber selectionmessages select first cell select second cell executionfunctions elganttwithpointatorigentry nil orgidgetcreate elganttwithpointatorigentry nil orgsetproperty elganttlinkedto returnval orgsetproperty elganttcolor concat strim readcolor select start color strim readcolor select end color also need use colorize setq elganttusersetcolorprioritycounter must counter ensure overlapping overlay handled properly elganttcreatedisplayrule usersetcolor parser elganttcolor whenlet color orgentryget point elganttcolor ssplit color elganttlinkedto orgentryget point elganttlinkedto args elganttorgid body elganttlinkedto saveexcursion whenlet point let date cell linked even header calendar therefore get date linked cell move date current header saveexcursion elgantt gotoid elganttlinkedto setq date elganttgetdateatpoint elgantt gotodate date point car elganttcolor cadr elganttcolor elgantt drawgradient since cell necessarily linked chronological order make sure sorted nil priority setq elganttusersetcolorprioritycounter elganttusersetcolorprioritycounter decrease priority earlier entry take precedence later one elganttuseroverlay elganttorgid second example played previously provided advanced way link cellsheadings together see use returnval passed one execution function next included purpose illustrating use macro elgantt selectionrule name setanchor parser elganttdependents whenlet dependent cdar orgentryproperties point elganttdependents ssplit dependent executionfunctions elganttwithpointatorigentry nil orgidgetcreate elganttwithpointatorigentry nil let currentheadingid orgidgetcreate orgsetproperty elganttdependents format substring member returnval elganttdependents elganttdependents push returnval elganttdependents elganttwithpointatorigentry nil orgsetproperty elganttanchor returnval selectionmessages select anchor rest select dependent selectionnumber previously accompanied code allowed user move date dependent cell moving anchor cell highlighted dependent cell point anchor abandoned various reason interest level interface clean get working faq save trouble hobby continued exercise learning elisp programming realized lot thing along way mostly realized programming much fun thought take way time patience clean code like bytecompile warning care originally wrote hoped publishing would get life seems interest push far time ability allow help please help fold unfold without reloading without significant change code breaking existing feature change value elganttstartupfolded reload many gradient pretty also customize midpoint gradient appears reflects remaining time like gradient use start end color change log fri added elganttcustomheaderline elgantt headerlineformatter
35,Lobsters,emacs,Emacs editor,Emacs Redux: Instant Access to Your Shell Init Files,http://emacsredux.com/blog/2020/07/16/instant-access-to-your-shell-init-files/,emacs redux instant access shell init file,simple hack crux,long time presented simple hack allowed quickly navigate shell user config file eg bashrc zshrc solution get job done pretty basic limited notably ignore fact typically several shell config file often built top eg etcprofile bashprofile bashrc fortunately original hack evolved rather nicely today life crux library name cruxfindshellinitfile provided installed crux need run command eg mx cruxfindshellinitfile get something like result pretty neat right even updated state command complex defun cruxfindshellinitfile edit shell init file another window interactive let shell filenamenondirectory getenv shell shellinitfile cond string zsh shell cruxshellzshinitfiles string bash shell cruxshellbashinitfiles string tcsh shell cruxshelltcshinitfiles string fish shell cruxshellfishinitfiles stringprefixp ksh shell cruxshellkshinitfiles error unknown shell candidate clremoveifnot fileexistsp mapcar substituteinfilename shellinitfile length candidate findfileotherwindow completingread choose shell init file candidate findfileotherwindow car candidate guess one thing improve road adding option display shell config window small thing variable like cruxshellbashinitfiles simply list potential file look opted omit code listing stand original suggestion bind useful command cc globalsetkey kbd cc cruxfindshellinitfile today metax forever
36,Lobsters,emacs,Emacs editor,Polyglot Documentation with Org-mode,https://www.rse.ox.ac.uk/tech_post/polyglot_documentation_with_org_mode/,polyglot documentation orgmode,orgmode orgmode website built revealjs babel babel research paper written orgmode babel fork path example output let talk simple computer program method print screen,important part teaching meeting student common ground find experience bring teaching incorporate new knowledge alongside already know teaching software engineering concept usually mean tailoring discussion programming language student familiar may explaining languageagnostic concept like objectoriented programming designing reusable function drawing graph student find example given unfamiliar language barrier understanding rse group work lot different programming language quick sample project worked university last year includes javascript c c ruby php swift python r matlab may others point pick different programming language time mean people teach developing teaching material could many commercial saas company document web apis could embed example code many language documentation let reader choose want see tool make easy like markdownfencedcodetabs extension python markdown parser good enough api sample really work tutorial content need talk code prose subtly different language also want maintain wholly separate fork material want one narrative languagespecific sample prose section necessary single source like able build version documentation tailored specific language sample code language necessary tweak discussion orgmode found possible writing document orgmode orgmode extensible format writing structured text hierarchical outline system markdownlike formatting syntax facility marking section todo item due date sample code particular language presenter note used presentation originally written venerable gnu emacs text editor orgmode parser exist vim visual studio code atom elsewhere using emacs parser possible export orgmode file multiple format including hugo website built latex suitable generating printed handout revealjs slide giving lecture crucially orgmode also tagging system section hierarchical outline tagged arbitrary word control tag get included excluded file exported orgmode build multilingual documentation babel another nifty capability orgmode babel designed reproducible research even research paper written orgmode babel babel add literate programming facility orgmode code block orgmode document babel run code incorporating result document even using result input code block tutorial material really good use testing code snippits situ without keep sync separate code file project fork path combining facility give u polyglot programming documentation document kept single orgmode file discussion appearing exactly multiple copy multiple programming language sample code segment languagespecific prose section tagged name language example c tagging sample code mean babel work run code syntax highlighting rule use make easier maintain code block document using tag prose mean excluding including language tag export choose sample code relevant discussion appears output example finally example describing classic hello world program three language c python ruby us different function print message though overall description program c also explain n thing end message string excludetags c python property headerargs result output option tag nil let talk simple computer program program put phrase hello world screen early version appeared book c programming language kernighan ritchie included demonstration prove compiler set correctly day hello world common example program every programming language give newcomer flavour language single contributor behaviour program function print text screen printf function c use printf print screen c beginsrc c include stdioh int main printf hello world n endsrc weird n string tell printf output newline character moving cursor start next line put method ruby use put print screen ruby beginsrc ruby put hello world endsrc print function python use print print screen python beginsrc python print hello world endsrc print screen playing fast loose terminology hello world program writes message stream called standard output often written stdout happens standard output stream usually displayed screen terminal application output rest document generated orgmode file c python tag excluded excludetags line start file result includes discussion example code relevant ruby programming language could similarly get version language let talk simple computer program program put phrase hello world screen early version appeared book c programming language kernighan ritchie included demonstration prove compiler set correctly day hello world common example program every programming language give newcomer flavour language single contributor behaviour program function print text screen put method use put print screen ruby print screen playing fast loose terminology hello world program writes message stream called standard output often written stdout happens standard output stream usually displayed screen terminal application
37,Lobsters,emacs,Emacs editor,Running Emacs with systemd,http://emacsredux.com/blog/2020/07/16/running-emacs-with-systemd/,running emacs systemd,execpathfromshell environmentd arch linux wiki good example,recently switched back linux used macos past year generally happy overall macos experience also disappointed emacs simply work well linux various reason linux user always run emacs daemon server connect daemon multiple instance emacsclient elegant efficient client started instantly shared access everything running daemon instance doable extent macos never worked quite well abandoned workflow eventually however back time revive workflow historically ran emacs daemon adding something like shell init eg bashrc export alternateeditor alias eemacsclient tty magic first line leaving alternateeditor blank way first time ran emacsclient start emacs daemon connect many people preferred make daemon proper service start restart monitor felt like overkill noticed however emacs bundle systemd unit trivial control emacs daemon systemd boil running command systemctl user enable emacs run command regular user whatever user account want running emacs run root though get message unit file copied usrlibsystemduseremacsservice examine curious unit descriptionemacs text editor documentationinfo emacs man emacs http gnuorgsoftwareemacs service typesimple execstartusrbinemacs fgdaemon execstopusrbinemacsclient eval killemacs environmentsshauthsock tkeyringssh restartonfailure install wantedbydefaulttarget pretty straightforward point emacs daemon connect using terminal client emacsclient gui client emacsclient c might also want create desktop icon run emacsclient c instead emacs might also want set editor visual emacsclient export editoremacsclient export visualemacsclient typically add two alias safe side alias viemacsclient alias vimemacsclient one thing keep mind running emacs manner read user environment variable least coming bashprofile bashrc good idea install popular package execpathfromshell alternatively use one systemd mechanism setting environment variable eg environmentd arch linux wiki good example using environmentd also mention approach consider today hope learned something useful parenthesis trust
38,Lobsters,emacs,Emacs editor,Remap Enter to Control in GNU/Linux (2020 Edition),http://emacsredux.com/blog/2020/07/05/remap-enter-to-control-in-gnu-linux-2020-edition/,remap enter control gnulinux edition,note original article old article dualfunctionkeys interception framework note alternative xkeysnail example config geared towards emacs user,note check original article rationale behind remapping recently switched back macos gnulinux primary development environment found old article remapping enter control longer optimal way achieve eg xcape operates x level mean work wayland without gui took bit digging eventually found dualfunctionkeys plugin interception framework exactly needed splendidly unfortunately tool packaged gnulinux distros setting source complex article share instruction specific ubuntu easy modify linux distros let kick downloading installing interception framework dualfunctionkeys install build deps sudo apt install libudevdev libyamlcppdev libevdevdev cmake create folder clone source code mkdir src cd src clone necessary code git clone http gitlabcominterceptionlinuxtools git clone http gitlabcominterceptionlinuxpluginsdualfunctionkeys build install interception framework cd tool mkdir build cd build cmake make sudo make install cd build dualfunctionkeys plugin cd dualfunctionskeys make sudo make install hard right create couple configuration file ready action first one dualfunctionkeysyaml normally placed home folder homeusernamedualfunctionkeysyaml timing tapmillisec doubletapmillisec mapping key keyenter tap keyenter hold keyrightctrl main config dualfunctionkeys specifying duration tap double tap remapping rule case single rule enter act enter tap pressed briefly right control held longer need create etcudevmonyaml need sudo etcudevmonyaml job intercept g devnode dualfunctionkeys c homebozhidardualfunctionkeysyaml uinput devnode device event evkey keyenter note update path dualfunctionkeysyaml accordingly finally need create systemd service definition file udevmon start new service etcsystemdsystemudevmonservice unit descriptionudevmon wantssystemdudevsettleservice aftersystemdudevsettleservice service execstartusrbinnice n usrlocalbinudevmon c etcudevmonyaml install wantedbymultiusertarget simply enable udevmon service remapping kick sudo systemctl enable udevmon start enjoying beloved productivity boost achieve lot dualfunctionkeys advice explore tool keep hacking alternative another option considered xkeysnail seemed bit simpler setup written python even example config geared towards emacs user might want check someone using another approach achieve result love hear
39,Lobsters,emacs,Emacs editor,Consistent Technical Documents Using Emacs and Org Mode,https://www.youtube.com/watch?v=0g9BcZvQbXU,consistent technical document using emacs org mode,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature consistent technical document using emacs org mode youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature consistent technical document using emacs org mode youtube
40,Lobsters,emacs,Emacs editor,org-html-themes,https://github.com/fniessen/org-html-themes,orghtmlthemes,export org mode file awesome html minute overview description tweet fniessen requirement quotation bigblow emacsleuventheme readtheorg gallery bigblow readtheorg theme read doc demo org mode refcard using theme customizing theme change background code block unset body width limit readtheorg contributing issue github issue tracker patch donation project donation follow fniessen license http wwwgnuorglicenses,export org mode file awesome html minute overview description though easily override cs stylesheets add html theme say write org mode provides basic html support orghmtl theme open source framework providing list nice crossbrowser theme org document use style doc colleague come tell genius share content tweeting page tweet follow fniessen twitter update orghtml theme requirement org mode version later required version bundled emacs install one elpa quotation bigblow nice enjoy lot ista zahn awesome love rainer krug awesome mehul sanghvi nice html theme use another emacstheme emacsleuventheme going probably html theme joseph vidalrosset thanks lot sharing wonderful bigblow theme create lot specification team member use always trouble share maintain spec create much neater spec available team reference webpage shankar r like bigblow best exported org file using theme published within company intranet thanks sharing wonderful package richard k readtheorg omg readtheorg theme exported html org mode file eye wateringly beautiful thank rob stewart fantastic beautiful switch several page theme carsten incredibly impressive thanks noah r thank enjoy theme best one ever found kang awesome theme wonderful job wonderful thing enable people least use emacs org mode put together online reference work muchmore usable fashion currently available c toedt extremely useful thomas dye gallery list available html theme org mode use right well hope one couple bigblow bigblow perfect work clean design aimed optimal org mode experience browser look awesome click image quick demo bigblow min audio keyboard shortcut save time boost productivity shortcutwhat haccess dashboard nmove next main heading pmove previous main heading bscroll scroll top scroll bottom collapse expand rgo next task list rgo previous task list qstop reviewing list task greload page readtheorg readtheorg clone official great theme used read doc site give beautiful professional style org doc thanks creator demo written demo page theme provides maximal working support org mode syntax please see org mode refcard page full example heading code admonition footnote table detail using theme using theme theme gallery org document easy add setupfile directive preamble document include necessary cs javascript file either use url following type setup file chosen theme setupfile http fniessengithubioorghtmlthemessetupthemenamesetup themename themebigblow themereadtheorg cloned downloaded orghtml theme project get dependency internet connection use relative absolute path local setup file copy style folder cloned folder folder file want export setupfile pathtogitreposetupthemenamelocalsetup export org mode file html orghtmlexporttohtml cc ce h h customizing theme love theme still would like override particular html tag example though think really improvement could server person well including invited submit change background code block example insert org document change background source block htmlhead style presrc background color white style unset body width limit readtheorg solution provided malcolm cook htmlhead style content style htmlhead style p style htmlhead style li style contributing issue report issue suggest feature improvement github issue tracker patch love contribution patch form always welcome donation use orghtmlthemes project project feel making life better easier show appreciation help support future development making today donation paypal thank regardless donation orghtmlthemes always free beer speech follow fniessen account twitter follow license copyright c fabrice niessen author fabrice niessen keywords orgmode html theme program free software redistribute andor modify term gnu general public license published free software foundation either version license option later version program distributed hope useful without warranty without even implied warranty merchantability fitness particular purpose see gnu general public license detail received copy gnu general public license along program see http wwwgnuorglicenses
41,Lobsters,emacs,Emacs editor,Emacs Comment Commands Redux,http://emacsredux.com/blog/2020/06/10/comment-commands-redux/,emacs comment command redux,closing thought clojurecommentdwim,comment important aspect every programming language dealing effectively useful skill emacs offer bunch commentrelated command post going examine let start commentregion basic command commentuncomment active region nothing fancy behaviour command tweaked variable commentstyle supported comment style defined commentstyles plain nil nil nil nil start column indent indentortriple nil nil nil multichar start column singlechar starter indent nil nil nil full comment per line end aligned aligned nil nil full comment per line end aligned box nil full comment per line end aligned top bottom extraline nil one comment line end line multiline nil nil one comment line end last commented line boxmulti one comment line top bottom admit never felt need change default value commentstyle indent commentregion command bound key default good reason least two capable command render commentregion useless name implies simply uncomments line active region like commentregion bound key default similar vein command likely never use directly commentdwim swiss army knife emacs comment command depending context invoked exhibit pretty different behaviour region active call commentregion unless consists comment case call uncommentregion current line empty call commentinsertcommentfunction defined otherwise insert comment indent prefix argument specified eg cu call commentkill command kill first comment line else call commentindent simply indent comment versatile command bound default one thing somewhat annoying commentdwim convenient uncomment current line noted option select commented region case current line invoke commenddwim think would nice repeated invocation command handled somehow commentline newer command added emacs simpler alternative commentdwim commentuncomment current line region nothing nothing le command bound cx c personally like way commentdwim simpler consistent might want remap convenient keybinding like globalsetkey remap commentdwim commentline command put selected region comment box example defgroup crux nil crux configuration prefix crux group convenience becomes defgroup crux nil crux configuration prefix crux group convenience command bound key default closing thought many comment command top package like modespecific comment command like one provided clojurecommentdwim started writing article year ago got interrupted something totally forgot pretty sure meant cover ground longer remember mind happy finally got sharing approach dealing comment use builtin command rely custom command thirdparty extension
42,Lobsters,emacs,Emacs editor,Python+FontForge+Org: I made a font based on my handwriting,https://sachachua.com/blog/2020/06/pythonfontforgeorg-i-made-a-font-based-on-my-handwriting/,pythonfontforgeorg made font based handwriting,http sachachuacomblog http githubcomsachacsachachand emacs geek org fontforge font python see index,wanted make font based handwriting using free software turn fontforge scripted python know little python even le typography managed hack together something worked reading blog http sachachuacomblog probably see new font used blog post title whee rough note http githubcomsachacsachachand wanted write literate program using org babel block really fully reproducible yet might handy starting point basic workflow generate template using font base import template medibang paint phone draw letter different layer almost forgot letter q add last minute export layer writing cut image separate glyph using python autotrace one import glyph fontforge svg png set left side right side bearing overriding needed based table figure kerning class handtweak contour kerning use export web font file use blog modify stylesheet include really liked able specify kerning class org mode table like none c e g q w f x v z h b l k j n p r u zero none f r k l v b p w f two hard time defining class using fontforge interface occasionally ended clearing glyph selection great able edit column row clearly kerning still actual value j start also probably figure combine character pair kerning two table easier tweaking insisted tracing handwriting template time might actually able go process convert handwriting font whee post emacs geek org tag fontforge font python see index comment
43,Lobsters,emacs,Emacs editor,Emacs as Email Client,http://www.mycpu.org/read-email-in-emacs/,emacs email client,earlier post shared emacs notetaking email fewer distraction easier filtering orgmode orgcapture template translation russian,earlier post shared emacs configuration emailing emacs super power grateful past several year describe simple setup work importantly something like setup make almost want write descriptive email simply move pain writing email ecosystem feel comfortable writing long form article program design document artifact involve putting thought cringe everytime see email written rich text broad line going well character lot time make think people detailed email response tend almost face resistance thinking putting thought detailed email response consider following notetaking email well best demo guess want capture something email future reference maybe want stash important todo item email keep note furthermore nice automatically capture meta field email senttime take example composing post obviously emacs read lkml capture important note later access order overwhelm new emacs user go weed specific package used configuration etc post motivate right reader think using emacs email client boost productivity well least get point hate readingwriting email fewer distraction want minimize distraction avoiding untimely email popup using top offlineimap effective get check email wish yes turn notification come several way avoid distraction corollary make option suitable ie respond email try give proper attention easier filtering stupid simple filter email two keystroke j jump folder b jump bookmark similarly bookmarking particularly useful save query filter across folder ex jump mail xyz week ago use orgmode emacs luck simply select right keyword orgcapture template ok admit spent unhealthy amount time tweaking emacs config year like see simply start using config asis copying piece config emacs giving whirr hope whets appetite start using emacs email client among thing config detail coming separate translation russian vladimir like topic please consider subscribing podcast talk stalwart tech ask favorite productivity hack visit void star podcast page itunes podcast portal please click subscribe leave comment
44,Lobsters,emacs,Emacs editor,Setting up multiple IMAP and SMTP accounts in Gnus,https://www.bounga.org/tips/2020/05/03/multiple-smtp-accounts-in-gnus-without-external-tools/,setting multiple imap smtp account gnu,gnu msmtp manual entry posting style gnu posting style happens magic technique,user tend like everything frequent desire able read email popular option gnu gnu beast lot thing newsgroups r email configuring using bit scary first really widespread misinformation gnu thought long true come using multiple smtp server seamlessly sending email always read use external tool msmtp specific configuration make act proxy software multiple remote smtp advice use homemade function play message field hook via messagesendhook even tell hack etchosts hey gnu since ninety someone must think solution must builtin stopped searching blog post stack overflow read manual entry clearly state set complex workflow using multiple smtp server work using posting style way instruct gnu want prepare email header body signature according context digging like explain imap setting tightly related going setup smtp take look definition tell gnu imap server local name must behave setq gnusselectmethod nnnil nil setq gnussecondaryselectmethods nnimap home nnimapaddress imapgmailcom nnimapserverport imaps nnimapstream ssl nnirsearchengine imap nnmailexpirytarget nnimaphome gmail trash nnmailexpirywait immediate nnimap work nnimapaddress imapgmailcom nnimapserverport imaps nnimapstream ssl nnirsearchengine imap nnmailexpirytarget nnimapwork gmail trash nnmailexpirywait immediate set gnusselectmethod nnnil noop backend prefer set account place gnussecondaryselectmethods variable declared two imap server first one known locally home second one work using gmail find way distinguish account provide credential standard unix way share credential across software store authinfo file case use authinfogpg credential encrypted gpg one read content authinfogpg machine home login home gmailcom password mypasword port imaps machine work login work gmailcom password myotherpassword port imaps gnu read file get credential log imap server gnu know bind given credential specific account share name home work ok get email gnu two email account time configure account send email using respective smtp server credential sake clarity use imap smtp address account situation technique would work way two account two different email provider magic happens taking advantage gnu posting style reply mail matching email address setq gnuspostingstyles match group message address nicolas cavigneaux home gmailcom work match gnu group called work address nicolas cavigneaux work gmailcom organization corp signaturefile signaturework xmessagesmtpmethod smtp smtpgmailcom work gmailcom first line kind catchall rule tell gnu matter group sender email address going home gmailcom familiar gnu group imap folder second rule tell gnu current group match anything work want handle outgoing email differently sender address going work gmailcom organization header going corp automatically inserted signature bottom email going read signaturework file happens magic use special header gnu messagemode understand called xmessagesmtpmethod designed exact purpose able specify alternative smtp server use specify want use smtp protocol using address smtpgmailcom port user account use work gmailcom one last thing setup good go need provide smtp credential take place authinfo file machine smtpgmailcom login home gmailcom password mypassword port machine smtpgmailcom login work gmailcom password myotherpassword port searching server name username gnu able know right credential use basically enables multi smtp account gnu without bothering technique moral story come emacs always read official doc first since time find info need
45,Lobsters,emacs,Emacs editor,Using Emacs and mu4e for emails - even with HTML,https://200ok.ch/posts/2020-05-27_using_emacs_and_mu4e_for_emails_even_with_html.html,using emacs email even html,link freelibre open source software page,writing reading email inherently textbased workflow yes html mail attachment core email probably place many people write consume text utilize best textprocessing program available make lot sense combined powerful feature emacs org mode organizing mail project todos processing mail within emacs make lot sense becomes powerhouse people refrain using emacs similarly good mail user agent afraid setup deal well html email worry though emacs well task short screencast demo video link liked post want say please head freelibre open source software page like one give star github gitlab
46,Lobsters,emacs,Emacs editor,mu4e: emacs-based e-mail client which uses mu as its back-end,https://www.djcbsoftware.nl/code/mu/mu4e.html,emacsbased email client us mu backend,mu wanderlust manual mu source package available github screenshots main view message view view message pdf license copyright,starting version mu provides emacsbased email client us mu backend mu sits top maildir update eg offlineimap mbsync fetchmail designed enable superefficient handling email searching reading replying moving deleting overall bit mix dired wanderlust feature include fully searchbased folder query ui optimized speed quick key stroke common action fully documented example configuration asynchronous heavy action never block emacs write richtext email using orgmode experimental address autocompletion based message need managing address book extendable many place using custom action detail please see manual check screenshots part normal mu source package also available github screenshots main view message view messageheaders split view speedbar support view message pdf license copyright designed implemented dirkjan c binnema free software licensed gnu
47,Lobsters,emacs,Emacs editor,Org Mode - Organize Your Life In Plain Text,http://doc.norang.ca/org-mode.html,org mode organize life plain text,editing clock entry,okay admit clocking fanatic clock everything work orgmode make really easy rather clock much stuff enough find easier get habit clocking everything make possible look back day see spending much time enough time specific project also help lot need estimate long something going take use clocking data similar task help tune estimate accurate without clocking data hard tell long something took fact use concept punching punching start end work day punch arrive work punch lunch punch lunch punch end day every minute clocked punchin punchout time punching defines default task clock time whenever clock would normally stop found default orgmode setup would lose clocked minute day minute minute add especially true write note moving done state case clock normally stop composed note good note take minute write clocking setup basically work like punch start clock clock predefined task orgid default task clock whenever clock normally stop clock task normally let moving done state clock clocking automatically clock time parent task move back predefined default task parent exists continue clocking whatever task work punch stop clock free change default task multiple time day clock moving project tree clock longer need simply single task get clocked punchin punchin prefix task project x task automatically becomes default task clocked time go project either punch punch task org file look like todoorg filetags personal task organization property clockmodelinetotal today id end working task simply clock task clocking move clock parent task todo keyword keep clock time subtree parent task todo keyword clock move back default clocking task punch clock task interruption occurs start capture task keep clocked time interruption task close cc cc work really well example consider following org file todo project next task todo task todo task task todo miscellaneous task work file following sequence punch start day clock organization task id todoorg file review block agenda pick todo miscellaneous task work next clock clock todo miscellaneous task complete task mark done cc ct stop clock move back organization task want work project clock task work task mark done clock task move clock project work task clock entire time working clocking subtask project clock time interval applied somewhere project tree eventually mark project done clock move back default organization task editing clock entry sometimes necessary edit clock entry reflect reality find maybe entry week occassionally clock task time away computer case previous clocked task still running count time task wrong make note time get back computer clock right task edit start end time correct clock history visit clock line entry quickly use agenda log mode l show clock line today use navigate appropriate clock line quickly go current clocked task agenda log mode better finding visiting older clock entry use l open agenda log mode show logged clock time move cursor clock line need edit hit tab edit clock entry put cursor part date want edit use keyboard mouse since clicking timestamp mouse go back agenda day hit arrow arrow key change time following setting make time editing use discrete minute interval rounding increment setq orgtimestamproundingminutes quote editing time shift arrow combination also update total clock line nice convenience always check nt created task overlap fixing time clock entry viewing log mode agenda new view agenda hit v c daily agenda clock gap overlap identified want clock entry accurate possible following setting show minute clocking gap setq orgagendaclockconsistencychecks quote maxduration minduration maxgap gapokaround
48,Lobsters,emacs,Emacs editor,How I work on Python 2 and Python 3 with the Python Language Server (in GNU Emacs),https://utcc.utoronto.ca/~cks/space/blog/python/Python2And3LanguageServer,work python python python language server gnu emacs,language server protocol lspmode python language server early note using lspbased editing python dealing python indentation problem,python one programming language usually edit gnu emacs day mean using language server protocol lspmode pyls python language server back first set wrote early note using lspbased editing python solved problem wanting edit python python based code gnu emacs session want turn important run either python pyls python pyls depending whether file editing written python python creates several problem solve eventually brute force used python virtual environment probably would easier first obviously necessary install version install pyls homelocal using pip user switch created subdirectory manually moved python version pyls localbin requires always update python version pyls python version bit annoying life world version pick right version pyls run use cover script cover script us various heuristic check try figure run directory python python code nt work case mixed code sure would work general anyway nt homelocalbin path gnu emacs conveniently try run pyls start python lsp server put cover script homebin important check cover script us look version python seems run line py file current directory whether obvious print statement indicate python going note python program installed line usrbinenv like instead directly running python interpreter missed first version cover script python script directly use also default python version cover script python python writing new python code basically hack work pretty well especially combination dealing python indentation problem result pretty seamless lspbased python editing experience gnu emacs everything basically work sure sold whole lspbased experience editing python fault hack
49,Lobsters,emacs,Emacs editor,Learn Emacs Lisp in 15 minutes,https://bzg.fr/en/learn-emacs-lisp-in-15-minutes.html/,learn emacs lisp minute,http learnxinyminutescom http learnxinyminutescomdocselisp,surprised find introduction emacs lisp http learnxinyminutescom created one page http learnxinyminutescomdocselisp comment feedback welcome give introduction emacs lisp minute author bastien http bzgfr first make sure read text peter norvig http install gnu emacs debian aptget install emacs see distro instruction macosx http window http general information found http wwwgnuorgsoftwareemacs obtaining important warning going tutorial wo nt damage computer unless get angry throw floor case hereby decline responsability fun fire emacs hit q key dismiss welcome message look gray line bottom window scratch name editing space editing space called buffer scratch buffer default buffer opening emacs never editing file editing buffer save file lisp interaction refers set command available emacs builtin set command available every buffer several subset command available activate specific mode use lispinteractionmode come command evaluate navigate within elisp code semicolon start comment anywhere line elisp program made symbolic expression sexps symbolic expression read add sexps enclosed parenthesis possibly nested symbolic expression contains atom symbolic expression example atom symbolic expression lispinteractionmode evaluate sexps put cursor right closing parenthesis hold control hit j key cj short cursor cj cj insert result evaluation buffer cx ce display result emacs bottom line called minibuffer generally use cx ce nt want clutter buffer useless text setq store value variable setq myname bastien cx ce bastien displayed minibuffer insert insert hello cursor insert hello cx ce hello used insert one argument hello pas argument use two insert hello world cx ce hello world use variable instead string insert hello myname cx ce hello bastien combine sexps function defun hello insert hello myname cx ce hello evaluate function hello cx ce hello bastien empty parenthesis function definition mean accept argument always using myname boring let tell function accept one argument argument called name defun hello name insert hello name cx ce hello let call function string value unique argument hello cx ce hello yeah take breath switch new buffer named test another window switchtobufferotherwindow test cx ce screen two window cursor test buffer mouse top window leftclick go back use cx ie hold controlx hit go window interactively combine several sexps progn progn switchtobufferotherwindow test hello cx ce screen two window cursor test buffer nt mind stop asking hit cx ce every sexp follows always go back scratch buffer mouse cx often useful erase buffer progn switchtobufferotherwindow test erasebuffer hello go back window progn switchtobufferotherwindow test erasebuffer hello otherwindow bind value local variable let let localname switchtobufferotherwindow test erasebuffer hello localname otherwindow need use progn case since let also combine several sexps let format string format hello n visitor placeholder string replaced visitor n newline character let refine function using format defun hello name insert format hello n name hello let create another function us let defun greeting name let yourname bastien insert format hello nni name argument function yourname letbound variable bastien evaluate greeting function interactive readfromminibuffer enter name evaluating function return entered prompt let make greeting function prompt name defun greeting fromname let yourname readfromminibuffer enter name insert format hello nni fromname argument function yourname letbound var entered prompt greeting bastien let complete displaying result window defun greeting fromname let yourname readfromminibuffer enter name switchtobufferotherwindow test erasebuffer insert format hello nni yourname fromname otherwindow test greeting bastien take breath let store list name setq listofnames sarah chloe mathilde get first element list car car listofnames get list first element cdr cdr listofnames add element beginning list push push stephanie listofnames note car cdr nt modify list push important difference function nt sideeffects like car others like push let call hello element listofnames mapcar hello listofnames refine greeting say hello everyone listofnames defun greeting switchtobufferotherwindow test erasebuffer mapcar hello listofnames otherwindow greeting remember hello function defined take one argument name mapcar call hello successively using element listofnames argument hello let arrange bit displayed buffer defun replacehellobybonjour switchtobufferotherwindow test gotochar pointmin searchforward hello replacematch bonjour otherwindow gotochar pointmin go beginning buffer searchforward hello search string hello x evaluates sexp x return something x return nil nothing exit loop replacehellobybonjour see occurrence hello test buffer replaced bonjour also get error search failed hello avoid error need tell searchforward whether stop searching point buffer whether silently fail nothing found searchforward hello nil trick nil argument say search bound position argument say silently fail nothing found use sexp function nt throw error defun hellotobonjour switchtobufferotherwindow test erasebuffer say hello name listofnames mapcar hello listofnames gotochar pointmin replace hello bonjour searchforward hello nil replacematch bonjour otherwindow hellotobonjour let colorize name defun boldifynames switchtobufferotherwindow test gotochar pointmin researchforward bonjour nil addtextproperties matchbeginning matchend list face bold otherwindow function introduces researchforward instead searching string bonjour search pattern using regular expression abbreviated prefix regular expression bonjour read string bonjour group construct character possibly repeated string ready test boldifynames addtextproperties add text property like face ok done happy hacking want know variable function ch v avariable ret ch f afunction ret read emacs lisp manual emacs ch elisp ret read online introduction emacs lisp http wwwgnuorgsoftwareemacsmanualhtmlnodeeintrindexhtml thanks people feedback suggestion wes hardaker notbob kevin montuori arne babenhauserheide alan schmitt linxitow aaron meurer
50,Lobsters,emacs,Emacs editor,Literate Calc Mode - embedded M-x calc with live updates,https://github.com/sulami/literate-calc-mode.el,literate calc mode embedded mx calc live update,literate calc mode announcement blog post installing melpa packageel ensure melpa available manual literatecalcmodeel use using unit algebraic function full example roadmap semantic highlighting tydlig rainbowidentifiers shorter existing implementation exportimport,literate calc mode literate programming mx calc announcement blog post display inline result calculation support variable update type want also work favourite markup mode installing simply grab melpa usepackage literatecalcmode ensure straightusepackage literatecalcmode packageel ensure melpa available mx packageinstall select literatecalcmode manual fetch literatecalcmodeel save somewhere load emacs use major literatecalcmode minor literatecalcminormode major mode basic syntax highlighting minor mode evaluates calc statement typing minor mode work quite well orgmarkdown mode markup language major mode also function called without mode active mx literatecalcevallineevaluates single line mx literatecalcevalbufferevaluates whole buffer mx literatecalcinsertresultsevaluates whole buffer insert result mx literatecalcclearoverlaysremoves overlay clear variable using unit simply append unit value like flour flour g unit conversion complex function used invoking matching algebraic function usimplify also use unknown mathematical symbol x x full example literate calc file line without ignored result starting overlay generated literatecalcmode mean displayed emacs actually bufferfile content calculate value like string left hand side becomes bound variable pi pi use variable definiton tau pi tau result calculated using emacs calc use formula well round pi later binding shadow earlier one pi pi pi variable name space well monthly expense monthly expense monthly income monthly income annual saving monthly income monthly expense annual saving value recalculated every update spreadsheetlike fashion roadmap additional feature currently thinking semantic highlighting one original inspiration tydlig similar thing also semantic highlighting mean variable highlighted different colour always one given variable see used glance might steal code rainbowidentifiers one shorter existing implementation around adapt need exportimport currently option bake result adding buffer content genuine need exporting calculation result anyone read maybe also importing need tooling around also toying idea integrating orgbabel could babel literatecalc block evaluate export properly opinion please feel free open issue send email figure best way
51,Lobsters,emacs,Emacs editor,State of Emacs Lisp on Guile,https://emacsninja.com/posts/state-of-emacs-lisp-on-guile.html,state emacs lisp guile,update disclaimer need spec generating spec mean guile emacs guile emacs emacsdevel andy wingo,update added extra set benchmark guile debian sid docker container disclaimer use guile hardly know scheme implementation know far better since guile emacs hot topic much hope unproven claim experiment every benchmark result taken caution created using guile emacs thinkpad running arch linux way laurus emacs reminded one reason guile emacs possible first place guile language tower emacs lisp one supported language mean complete emacs lisp support used question topic blog post need spec standardized programming language great benefit based specification one consult whenever doubt thing supposed behave allows several competing implementation developed unique strength benefit adhere standard switching implementation hard help shaking bug example compiling c program different compiler thing get considerably harder chosen language decided forego approach correct behavior defined yet stop people writing alternative implementation programming language python ruby emacs lisp got similar situation ever since guile extended degree supporting emacs lisp additional language provided version guile new enough evaluate trivial code repl scheme guileuser define foo scheme guileuser foo scheme guileuser l elisp happy hacking emacs lisp switch back type l scheme elisp guileuser defvar bar bar elisp guileuser bar far good much emacs lisp supported much apparently many common function like message error unbound seem possible anything buffer file either greatly limit possibility writing useful script emacs lisp one way determining exactly supported would consulting source code fun could instead test programmatically thereby creating executable generating spec usual test approach fail reading test input via stdin readstring accessing argument argv reading file insertfilecontents obtaining environment variable getenv none supported least print stdout princ went slightly different approach instead obtain list functionsvariables minimal emacs environment generating test file check existence print test summary code generation part defun printf fmt rest args princ apply format fmt args printf elisp spec adherence test defvar passed defvar failed defun testsym pred sym funcall pred sym setq passed passed setq failed failed defun testfun sym testsym fboundp sym defun testvar sym testsym boundp sym nn mapatoms lambda atom fboundp atom printf testfun n atom keywordp atom boundp atom printf testvar n atom printf n printf princ passed n printf princ passed n printf terpri n printf n printf princ failed n printf princ failed n printf terpri n assuming saved genelispspecel executable spec generated emacs q batch script genelispspecel elispspecel test session using emacs guile wasa box time emacs q batch script elispspecel passed failed emacs q batch script elispspecel user system cpu total wasa box time guile languageelisp elispspecel passed failed guile languageelisp elispspecel user system cpu total kind surprising expect emacs fail test expect guile implement little either surprising abysmal speed test looking forward anyone able explain part one test using official debian sid docker image emacs guile root time emacs q batch script elispspecel passed failed real user sys root time guile languageelisp elispspecel passed failed real user sys exactly improvement least number small enough print offending symbol emacs atom printf polluted test environment guile taken liberty annotating list binding let let function lambda apply funcall evaluation eval load evalandcompile evalwhencompile sequence aref aset makevector nth sequencing progn iteration dolist control flow unless cond shortcircuiting explicit nonlocal exit throw catch exception signal conditioncase unwindprotect input readfromminibuffer output print princ sendstringtoterminal terpri cxr car cdr caar cadr cdar cddr carsafe cdrsafe nthcdr association assoc assq search member memql memq destructive list processing nreverse setcar setcdr rplaca rplacd list processing con list makelist mapcar mapc append concat reverse length symbol defconst defvar defun defmacro get put fset set setq setplist symbolfunction symbolname symbolplist symbolvalue intern makesymbol fmakunbound makunbound quote function plist plistget plistput laxplistget laxplistput plistmember string string stringmatch substring upcase downcase predicate zerop floatp stringp numberp integerp wholenump boundp fboundp functionp symbolp consp listp nlistp atom null math fceiling ffloor ftruncate fround float ab min max comparators eq eql equal stringequal string numerical operator misc random notable omission difference division likely incompatible scheme numeric tower input read readfromminibuffer readstring sendstringtoterminal unusual likely primitive output function stringmatch nice limited use without matchstring exists print add newlines behaves like anything outside textbook exercise need define extra primitive guile modulelanguageelispbootel show apply bandaid previous shortcoming fset guile fset readstring readfromminibuffer fset guile write defun print object object terpri could write reach goal using emacs lisp scripting language outside emacs need write scheme get use scheme invent new runtime effort would comparable nodejs chrome javascript engine except far weaker salespitch mean guile emacs shown barely sufficient bootstrap emacs top guile emacs requires customized version guile emacs load supporting emacs lisp file rest incompatibility like calledinteractivelyp stubbed extending presented rudimentary spec contain actual test would help tracking progress usability might even improve overall quality gnu emacs provided core developer board believe idea briefly searched emacsdevel previous discussion topic found bikeshedding guile emacs anyone feel strongly subject feel free start discussion regard guile emacs situation trickier repository touched five year robin templeton sole contributor two google summer code event even though work far complete impressive college student managed supervision guile maintainer andy wingo advancement require similarly motivated individual participate guile community become part effort much like free software project tempting take shortcut like donating developer unless figured way converting money equivalent work little connection give away return topic worth discussing preferably people make change
52,Lobsters,emacs,Emacs editor,Spacemacs and My Exit From VSCode,https://dev.to/zamhaq/spacemacs-and-my-exit-from-vscode-54o2,spacemacs exit vscode,spacemacs vspacecode seorenn doomemacs,using vscode long started javascript first editor ever wrote code turbo c yes started c turbo c look best blue screen proper font rendering however good enough school assignment small program c like simple calculator program program calculate area different polygon whole lot changed encountered codeblocks first ide written cc code feature like autocompletion ability create project compile code without going back terminal since time always love ides editor started javascript development searched best ide could run decent hardware without much lag good ide either paid slow nt appeal vscode considered ide pulled customizations extension plugins various feature continued using vscode throughout college life internship time aware vim already tried looked like stone age tool finest programmer use guess one time started vim able quit however always appealed style editing ability much without ever reaching mouse know could done code editor efficient vim major issue however hindering urge adopt vim editor knowwas familiar usual vim key binding even know editing basic would difficult learn customize stuff one need gauged would quite difficult since vim used elite also heard mystic tool called emacs emacs also supposed used greybeard unix folk read one forum much steep learning curve year later well many maybe year later found spacemacs spacemacs emacs distribution flavor emacs sort come preconfigured required stuff yet providing ability customize emacs power directly spacemacs config file best thing spacemacs think difficulty creating good dev environment vim difficult key binding emacs spacemacs support vim emacs style also hybrid mode still directly writing code spacemacs would significantly hindered productivity working followed following approach setup vspacecode give mnemonic spacemacs style key binding support vscode vim style modal editing setup still familiar environment whenever felt like thing faster could turn keybindings boom back normal vscode editing mouse keyboard helped getting familiar basic like move window buffer create new file delete text multiple line etc watch youtube video spacemacs seorenn helpful term getting speed basic navigation directly emacs well show various additional layer could install could make workflow better motivate use emacs done started putting handson approach soon comfortable binding using vspacecode extension switched fully spacemacs workrelated project since code daily work got better general modal based editing navigating spacemacs etc listed key binding help get started quickly editing navigating spacemacs help feel overwhelmed learn basic vim modal style editing command like delete x cut p paste yank h j k l navigating brings search inside file typing enter search text n n next search previous search respectively spc search text file spc p f search file inside project project automatically recognized git directory show later recent project spc p l switch project spc p brings mini buffer showing possible projectrelated command spc b brings buffer related command spc b p previous buffer similarly spc b n next buffer spc p opening neotree birdseye view spc f show file neotree help understanding actually file resides spc j l jump line spc j w jump word search text certain type file project use filetype eg search text import j file bring search project using spc search import j spc q q quit spacemacs blog post short journey came actually use emacs vim writing code day day basis something would never imagined considering difficult reputation vim emacs community think thing difficult perhaps even lifetime short master entry made pretty easy tool like spacemacs enough motivation shortly start lot thing evil way p command vim mode hybrid mode also time wrote post actually stopped using spacemacs instead moved doomemacs lighter distribution contains preconfigured necessary thing active development keybindings spacemacy transition swift also load time fast af
53,Lobsters,emacs,Emacs editor,Setting up Emacs inside of a WSL2 distribution,https://utf9k.net/blog/emacs-wsl2-install/,setting emacs inside distribution,org mode doom emacs window linux subsystem optional prerequisite x window system vcxsrv paid pretty seamless way window store free open source slightly involved way vcxsrv configuring environment installing emacs via handy documentation,never really dedicated emacs despite interested org mode little one barrier entry idea install desktop place installed quicker get comfortable enough actually use day day life particular trying doom emacs lightweight configuration us vimstyle binding much vimmer either record fairly comfortable opening moving around hjkl editing much productive anyway short guide get emacs running version window linux subsystem optional prerequisite currently using x window system window hugely familiar x windowing system basically way displaying application outside terminal case emacs render perfectly fine terminal like render window windowing system provides le plenty x server window found one pretty seamless vcxsrv another popular alternative although configuration trouble getting working said done fiddling provided setup guide well get started feel free skip entire window manager portion comfortable prefer running emacs terminal course paid pretty seamless way stress opted purchase x server extra bit piece use open source unpaid alternative decent recommendation easy setup happened steep discount figured give spin also ran issue vcxsrv originally well find window store presumably region require microsoft account purchase little annoying already one installation straight forward remember flag require toggling got installed fire see silver x icon window task tray bottom right screen need click left right make difference select allow public access see end section note security original expose thing http localhost memory anyway treated like network storage mean linux distribution effectively computer ip address firewall policy come place connect x server internal address rather beyond good go either read alternative setup skip configuring display environment variable upon closer inspection seems allow public access indeed say tin confirm able forward emacs session work laptop home desktop without prompting hold true random person network trust network proxying computer internet something interesting like fine case feel free jump environment configuration section sleep safer night tighter restriction feel free follow window firewall configuration step suggested setup vcxsrv apply exactly firewall rule free open source slightly involved way prefer able either pay software audit want pick copy vcxsrv little involved much gone gauntlet figured setting seem work consistently still staying relatively secure said feel free let know since window firewall area tend stray often go ahead install vcxsrv done open start menu search xlaunch run prompt default setting leave set default multiple window display number set auto extra setting stay default get panel extra parameter however want add ac flag without trouble line upon finishing configuration get popup window defender firewall click allow also configuration next xlaunch wrapped head start menu search window defender firewall advanced security open click inbound rule scroll find vcxsrv window server likely entry two tcp connection another two udp connection personally opted delete except one since plan keep udp configuration need two type tcp setup leave like either double click right click hit property start modifying firewall rule first general change action allow connection already set worry scoping permission quite bit well much could figure anyway already fiddling sake post probably would otherwise want allow anyone connect display server scope tab added ip address range local ip address select ip address click add ip address range enter following given window subsystem treated like network device sort display server essentially receiving connection different computer far concerned order mitigate actual computer connecting narrowing acceptable list ip address fall within wsl range suppose big internal network computer assigned address could connect interface restriction anyway repeat step remote ip address hit apply change point wanted reduce scope protocol tab tcp port x server us luck potentially case somewhere wsl land host computer port proxied higher lower honestly purely speculating based actual evidence interested protocol port restriction cause host x server unreachable extend range highest possible port indeed connect seems relying range port higher reachable anyway enough sidetracking one extra bit restricting protocol port protocol type change allow tcp navigate advanced interface type customize able narrow list local area network presumably even anyone wider network ip address happens match distro still able connect tried nonsense behind u get actually configuring environment testing setup worked successfully configuring environment briefly referenced setup step treated network device sort exact detail besides point know effectively separate computer mean rely emacs automatically knowing find x display server opting use one check inside linux distribution need point window host since x server running one step thankfully export display cat etcresolvconf grep nameserver awk print exit ok easy enough happened default etcresolvconf generated wsl mine look like relatively fresh installation file automatically generated wsl stop automatic generation file add following entry etcwslconf network generateresolvconf false nameserver ip address ip address window host machine least wsl point view anyway use grep get exact line want marcus corbenik cat etcresolvconf grep nameserver nameserver use awk get ip address marcus corbenik cat etcresolvconf grep nameserver awk print exit voila one ip address command end evaluating following export ip address change time time however want automate setting time display environment variable go away new shell make sure put shell startup let check connect expected connection test using nc netcat marcus corbenik nc v connection port succeeded use port first range port x window server range note end display variable telling use display screen wanted use different display perhaps second x server may qualify could connect address display screen hood would live port base port added display number case really know writing encourage research want know double check anything claimed haha installing emacs need actual emacs distribution get trigger happy yet part running sudo aptget install emacs give outdated package reality probably emacs fine like run date version following fetch copy emacs like bleeding edge doom emacs recommends probably need compile emacs source sudo addaptrepository ppa kelleykemacs sudo aptget update sudo aptget install nice good go like use doom emacs need extra package find info via handy documentation like run emacs terminal simply fire emacs like run window host x server running set run emacs spawn keep open background process happy text manipulation p wrote entire post doom emacs launched wsl home desktop work like charm
54,Lobsters,emacs,Emacs editor,Prettifying Org Mode with CSS,https://sandyuraz.com/articles/orgmode-css/,prettifying org mode cs,webpage big brother hackernews,org mode html output look like webpage big brother rightfully state grotesque pile shit go orgmode wrote small cs file add orgmode header output smoother add line use bare cs starting point make everyone style htmlhead link rel stylesheet href http sandyurazcomstylesorgmincss even really little makeup make big difference good discussion article hackernews figure
55,Lobsters,emacs,Emacs editor,How to choose your tools,https://her.esy.fun/posts/0013-how-to-choose-your-tools/index.html,choose tool,embrace extend extinguish zoom acquires keybase making emacs popular postconclusion emacs awesome great video spacemacs doomemacs orgmode,week nt take look hn grab news weekend morning read midsommar welcomesimilar article existed year different product common point software tooling potential change disparitionaccross year many time saw tool disapear tool mean application web application web site think also include programming language control versionning tool building tool package manager story quite different sometimes disparition tool positive found better one cv svn git often tool simply disapears worse downgrade quality think find different name software bloatware remember digg stumbleupon window downgradeware swaggerui neat reddit new redesign look better slow payware useful free service ask money cost lot morecrapware stop work quality degrate unless pay twitter streaming api dieware remember friendfeed google often quite frustrating lose lot investment toolregarding github codespace integration inside even worse would call trapwaretrapware software intented put inside closed ecosystem slowly surely add feature looking great user first sight ensure entrave tool interoperatefurthermore fact microsoft involved give story taste embrace extend extinguishmy real concern could become work framework could impose full tooling lot developer without giving freedom choicefor startup ctoceo could offer following advantage security impossible hard steal source code single devhomogeneity dev must use development environment thus integration new dev fastercheaper nt need pay full featured fast machine new developer le performant machine able display electron app trickstats observe throughput developer many commits day many line code much bug involved part code thus dev blame much time dev typing moving mouse much copypaste involved single developer open source developer offer homogeneity learn work environment easier recruit know work fastlower barrier entry opensource repository become much easier anyone propose pr fix issue need local clone project need download dependency test locally price pay hiddenmidsommar sorrowfirst able choose local working environment still change much become one previously mentionned ware nt want involved could force pay lot remove feature redesign bloatware make harder interop platform prefer azure aws everything involve machine cloud via browser via authorized plugins lot tool feature never allowed new ecosystemsurveillance meaningless wrong metric work instead evaluated feature shipped higher level metric tempting boss find flaw working habit already living world surveillance metric stats easy grab person anyone involved know bullshit human good play kind game people really working hard best certainly perform badly compared people simply trick systemso good codespace think good keep mind nt put trapthe zoom acquires keybase another story dying product apparently keybase team probably stop maintaining keybase idea behind keybase pretty nice filled gap current open source worldthe last article mentionned making emacs popular first comment hn vscode easy start compared emacs need lot time configure correctly need yes vscode certainly work easy use emacs another beast vscode become bad fast nt control evolve fact succesful microsoft product garanty keep currently quality emacs hand year old designed adapts one using libs customizing itthe argument chose vscode instead emacs look similar debate framework v library framework easier start soon find corner case start fight thema library hand bunch helper use need another functionality make using library lot work yourselfthe common pattern see choice decision often reducible easy le extensible harder long runharder extensible easier long runas conclustion would state need choose different tool take time think investment cost sometime bit pain begining worth particular going use tool every day many hour following year hand nt plan use tool much going easy option certainly best choicei consider emacs option compared vscode harder start lot control potential power probably never able get modern ideeditor also choosing free give lot control futurepostconclusion emacs awesomemidsommar joyto go beyond opinion like share experience editor emacswhen started serious coding taught use vi vim vi knew survival vi command dd cw year later started use ides thrilled year forward started work company forced use shitty computer quite soon started wrist issue thus decided use vim serious time saw benefit week tremendous wrist pain incredible edition power tip started new job decided code clojure course clojure lisp emacs using also lisp script language sound natural try emacs even though loved vim started installing spacemacs time nt want invest much time learning emacs wanted learn trick make emacs valuable work day maybe week used emacs superficially year already quite efficient least much vimrecently dig deeper heard much praise orgmode became curious discovered great basic orgmode already quite valuable dig start awesome unfortunately bit hard describe orgmode great without really digging bityou think orgmode extremely versatile todolist note taker agenda time tracking integration deep control workflow mainly example usage really worth note takerdocumentation far better markdowninteractive document run code inside doc keep track resultsexport hmtlpdftime trackingremindersrecently also orgroam step make orgmode nice place keep track knowledge one place take look great video matt williamsemacs changed workflow making productive improved coding workflow full work environment started editor plugins slowly integrated aspect day day task emacs emacs designed adapt need lot easier automate lot small tasksi really love emacs want joyfully join emacs user advice start using either spacemacs doomemacs take week absorb vim keybindings slowly start learn configure needsi really advise take look orgmode mastering could change carrier im opinion orgmode alone good reason enough use emacs lot discoverhowever used tool startup nice uiux almost configuration cost aware digging free software lot diffierent instead big bundle everything prepared work need take time configure part big system separatelyhowevery deeply convinced investment really worth itany comment click email add
56,Lobsters,emacs,Emacs editor,Making Emacs popular again,https://lwn.net/SubscriberLink/819452/1480c3a59d3d9093/,making emacs popular,signing subscription emacs editor square post reply thought said said said said popularity wondered pointed survey visual studio code said thought agreed like see editor text publication org mode familiar pointed said idea starter kit said cua mode suggested suggested wondered disagreed said licensing said said suggested bug pointed muse put kibosh raised said emacs subreddit reported screenshot cautioned said asked said said moving forward log,lwnnet need without subscriber lwn would simply exist please consider signing subscription helping keep lwn publishing jake edgemay emacs editor predates linux far popular fallen relative obscurity year megathread emacsdevel mailing list participant discussed various idea making emacs attractive aesthetic appealing user sens term improvement emacs regard numerous hurdle overcome however technical question naturally licensing consideration also philosophical question exactly stop venerable text editor popular square discussion started post ndame asking emacs square appearance thing like button could improved rounded corner said richard stallman one original author emacs seemed somewhat dismissive reply perhaps implement mode put cosmetic emacs appeal judge surface thing stefan kangas thought think unfortunate assume bell whistle graphical design element also improve usability also nt know helpful assume rest world take enlightened stance example always assumed many people use sublime text due serious feature comparison emacs like sleek look wondered reason improve default look stallman said technical barrier finding someone interested capable work needed overarching problem need addressed first code interface emacs xbased gui need rewriting expert needed decade get rewrite change likely break something stallman agree graphical design could improve usability feeling change would help deeper issue shape corner gui interface matter emacs user leaving feature eg menu bar tool bar enabled eli zaretskii said much advice configuring emacs suggests disabling thing hard enthusiastic making feature modern community seems divided whether present imo first get act together decide whether feature important speak according decision see advice contrary beyond though bigger problem emacs whole joseph garvin said emacs user interface nt look behave like application keyboard shortcut different program terminology used emacs world match user expect microsoft word user ever considered opened buffer open file move window around frame cut paste kill yank etc basically making commitment becoming power user certainly would put nt think going save lot time software developer everyday doubt anyone invests mental effort deal learning emacs nowadays unless goal want casual text editing emacs weird choice modernizing emacs however defined likely waste project time since look holding back ahmed khanzada said example terminalbased vim like modern application yet popular emacs appeal editor extended using lisp language somewhat limited said spending bunch time energy give modern look would change time work done definition modern changed popularity kangas wondered assertion vim popularity khanzada pointed survey showed vim substantial lead emacs reported though show writing survey showed visual studio code vsc clear winner however respondent using tool could perhaps quibble survey methodology broadbrush number seem wildly line set discussion user prefer experience vsc need figure vsc popular fill area emacs missing po lu said bob newell thought goal making emacs accessible appealing laudable ambitious something project could accomplish said worried though today software aimed instant gratification rather longterm power yes make emacs appealing user friendly nt forget masterful tool end requires mastery ca nt come free certainly draw line saying emacs everyone saying sort snooty elite saying willing learn seeing extra work aforementioned longterm investment patience reach worthy goal little later rather right minute stallman agreed sentiment would also like see emacs return popularity editor text publication several noted org mode already used successfully textpublication purpose mode familiar stallman unable learn much using word processing reading documentation zaretskii pointed high barrier learning org mode documentation least wordprocessing use case though seems quite unlikely putative welldocumented wordprocessing emacs mode likely user flocking editor stallman said user profile emacs much broader year ago would like see way personally see rounded corner part though opposed effort direction want attract user emacs think important area improvement lu idea along line example using starter kit pack help make editor friendly newcomer difference opinion making change default though order help newcomer change need made sake newcomer ndame said established user turn example cua mode add standard keybindings thing like cut paste ie ctrlc ctrlx ctrlv emacs default could make life new user easier nt turn explicitly could use copypaste key start like used tool lu suggested adding button newcomer turn feature splash screen instead better still might emacs recognize possible newcomer ndame suggested button work emacs started config file ask using emacs first time user say yes offer set convenience feature like cua mode user say everything usual discussion gathering feedback deciding change default dmitry gutov wondered existing user even relevant expanding reach emacs goal may make sense look problem differently question changing default ask prioritize existing poll say userbase naturally continue shrinking year whether prefer make life easier productive user come later like existing longtime user ca nt grow like new default even certain amount grumbling lu disagreed prioritize existing user hypothetical user nt even exist yet gutov said might shortsighted nt want emacs die nt work attracting new user real conclusion reached everyone would like see number emacs user developer tester documentation writer grow unclear best licensing back rounded corner zaretskii said thing standing way code implement patch add capability emacs welcome emacs multiplatform gutov said mean button look different even platform different graphic toolkits give different look change toolkit release alex bennée suggested unifying single crossplatform toolkit like gtk would avoid part problem also noted longstanding bug gtk caused use emacs lucid toolkit instead also worried next generation thinking text editor child use graduate point click programming proper text even sure want first experience emacs zaretskii pointed gtk really crossplatform addition bug question considered one gnome developer led ulrich mueller muse switch qt stallman quick put kibosh qt available gpl using would mean gpl someday emacs could switch must avoid using qt electron also raised possibility turn freedom issue lu said clear serious idea switching graphic toolkits decidedly nontrivial undertaking seem like indication emacs development community getting frustrated gui version editor beyond many emacs developer even use gtk version bug lead le interest improving version emacs seems something mess icon used emacs also questioned thread licensing rearing head well emacs subreddit apparently fertile ground thought suggestion came time thread example ndame reported user posted screenshot emacs toolbar really sad looking icon end icon set available gpl could used instead asserted zaretskii cautioned thing may clearcut feel free point u gpled icon incorporated emacs time situation nowhere easy imply maybe thing changed since several icon set suggested including gnome icon wikimedia kde available various free license gpl creative common lgpl work identifying candidate zaretskii said need invest time effort figure legal issue find icon want legally fit post resulting information process time afair quite icon come gnomegtk nt easy alternatively someone could create icon case could even prettier one pointed case nontrivial job volunteer welcome nt think anyone happy icon shown tool bar message mode reason use could nt find better one free suitable inclusion emacs ndame asked nt icon come gnome longstanding freesoftware project perfectly acceptable use emacs sadly easy zaretskii said ianal think gpl least perhaps would also need copyright assigned fsf example wikimedia icon available creative common attributionsharealike cc bysa license neither would work piece part emacs program stallman said without later lgpl grant qt problem would exist cc bysa incompatible every version gpl may matter end icon would part program emacs conflict emacs distribution contains many work including textual art small program distinct program emacs zaretskii stallman able determine icon emacs fall category simply need available free license simplify someone get time energy work problem like project emacs suffers shortage human power project improve gui may widely used developer could go wanting lot way sum situation editor project moving forward emacs quite useful adherent many see main interface computer others use regularly le universally even longtime vim user may started vi truth need emacs certain example serf user well really still role ten twenty forty year easy question answer course certainly still u ten twenty year many user forty part problem dedicated following emacs also pretty resistant change major degree meant knock sort simply observation plenty example huge thread idea seemingly shot represent change might upset existing user would seem change sort needed bring new blood new user coming nothing done attract lead eventual extinction hopefully path emacs change direction long one earliest freesoftware program existence predating term free software nearly decade fact course code need never disappear entirely community would wonderful see truth barely scratched surface megathread plenty subthreads went completely unmentioned interested emacs find plenty read digest whether emacs end rounded corner seems like simply tip iceberg thing might need addressed make emacs newcomerfriendly happen within community remains seen log post comment
57,Lobsters,emacs,Emacs editor,"Org-roam, a Roam replica built on top of Org-mode",https://github.com/jethrokuan/org-roam,orgroam roam replica built top orgmode,synopsis note roam orgmode technovangelist preview installation documentation frequentlyasked question faq getting help github discourse slack channel howdoi slack channel troubleshooting create new issue discourse knowledge base using orgroam changelog contributing contributingmd license,synopsis note orgroam build upon emacs orgmode intricate tool require time investment mastery make orgroam le friendly beginner extremely powerful familiar ecosystem willing invest effort orgroam roam replica built top allpowerful orgmode orgroam solution effortless nonhierarchical notetaking orgmode orgroam note flow naturally making notetaking fun easy orgroam also work plugandplay solution anyone already using orgmode personal wiki orgroam aim implement core feature roam leveraging mature ecosystem around orgmode possible eventually hope introduce feature enabled emacs ecosystem technovangelist produced video describing orgroam concept behind important link preview screencast orgroam orgroambuffer window right show backlinks active orgroam buffer window left well surrounding content backlink file database built updated incrementally graph generated link structure used navigate respective file installation install orgroam using packageel mx packageinstall ret orgroam ret sample configuration using usepackage usepackage orgroam ensure hook afterinit orgroammode custom orgroamdirectory pathtoorgfiles bind map orgroammodemap cc n l orgroam cc n f orgroamfindfile cc n g orgroamgraphshow map orgmodemap cc n orgroaminsert cc n orgroaminsertimmediate orgroamgraph default expects find dot executable graphviz package execpath ensure graphviz installed found want use feature customize configuration orgroamgraph use different tool detailed installation configuration instruction including doom spacemacs user please see documentation frequentlyasked question q create note whose title already match one candidate eg creating bar barricade already exists ivy need press cmj use current input instead nearest candidate source ivy faq getting help creating new topicissue please mindful time ensure already addressed github discourse new emacs problem setting orgroam please ask question slack channel howdoi quick question please ask slack channel troubleshooting something working would like suggest new feature please create new issue question workflow slipbox method please find relevant topic discourse create new one knowledge base using orgroam changelog changelog maintained contributing report bug suggest new feature use issue tracker code would like merged open pull request please also see contributingmd license copyright jethro kuan contributor distributed gnu general public license version
58,Lobsters,emacs,Emacs editor,Bringing GNU Emacs to Native Code,https://toobnix.org/videos/watch/1f997b3c-00dc-4f7d-b2ce-74538c194fa7,bringing gnu emacs native code,blocking disabling javascript gnu docsjoinpeertubeorg mozilla firefox report,seems either blocking disabling javascript browser totally get however endpoint us angular front end full javascript wo nt work without might numerous reason refuse use javascript security lack thereof javascriptbased web application depending threat menace might want go code running node trying access look security audit non jsbased client access peertube none available sure update page list alternative client developed certainly develop meantime code open source libre software gnu documented docsjoinpeertubeorg sorry seems peertube compatible web browser please try latest version mozilla firefox think mistake hesitate report
59,Lobsters,emacs,Emacs editor,"""Bringing GNU Emacs to Native Code"" at the European Lisp Symposium",https://lists.gnu.org/archive/html/emacs-devel/2020-04/msg01850.html,bringing gnu emacs native code european lisp symposium,,
60,Lobsters,emacs,Emacs editor,mu/mu4e version 1.4 released,https://github.com/djcb/mu/releases/tag/1.4,version released,,released april mu mu default xdg base directory specification default location various file eg unix mu database life cachemu rather mu still use old location passing muhomemu various mu command setting setq mu cache volatile eg cleared reboot may want use muhome mailinglist dicussion suggest fairly rare though upgrading may wish delete file old location recover diskspace new subcommand mu init initialize mu database take maildir myaddress parameter index used take parameter persistent index need accept anymore depends parameter init need run changing parameter implies need reindex changing parameter another new subcommand mu info get information mu database personal address etc contact cache used mu cfind contactcompletion stored part xapian database rather separate file xbatchsize autoupgrade option indexing gone determined implicitly xdg base directory specification http standardsfreedesktoporgbasedirspecbasedirspeclatesthtml longer us variable instead us information get mu see mu section strongly recommended run mu init appropriate parameter initialize xapian database mentioned musection main screen show address e issue warning useremailaddress part refer mu init avoid address main screen warning setting nonnil many case used receive contact indexing operation slow user updated get contact changed since last round also moved sorting contact muside speed thing however sideeffect obsoleted user migrate see docstring detail christophe troestler contributed support gnu calenderinvitation handling ie able acceptreject invitation etc fresh code likely tweaked future available testing note requires gnusbased viewer per setq addition added support custom header one nongnusview work well pierre neidhardt contributed experimental account setup helper wrap existing context setup nicety account see manual detail orgmode support enabled default speedbar support disabled default add messageids message saving draft find even bookmark simple plists instead cl structs updated produce plists backward compatibility bookmark look like list eg name bookmark query banana pear key f format bit easier extensible recognizes attribute hide hide bookmark item mainscreen speedbar keep avilable completion ui also become plists older format still recognized backward compatibility encouraged upgrade replying mailinglists improved allowing choosing replying sender listonly visible change show unreadall count bookmark main screen default disabled setting hideunread bookmark plist speedreasons count filter duplicate message removed filesystem behind back also applies composing message determines default directory inclusion mu interaction rewritten communicate using sexpressions repl testing readline installed also get history toy updated mug toy ui use note toy meant distribution disabled
61,Lobsters,emacs,Emacs editor,The most successful malleable system in history,https://malleable.systems/blog/2020/04/01/the-most-successful-malleable-system-in-history/,successful malleable system history,mission statement lisp machine emacs lesson provide significant outofthebox utility gnu emacs home page pharo started explore easy change emacs stack exchange org mode notmuch lesson think carefully barrier geoffrey litt post next tool,malleable system defined mission statement fashionable past time malleability goal influential system designer prominently advertised smalltalk design team strong well lisp community lisp machine example malleable system lisp machine gone smalltalk remained niche product day one malleable system still wide use emacs however wide use relative true comparison malleable system absolute scale software popularity malleable system hardly visible learn relative success emacs design future malleable system lesson provide significant outofthebox utility demise lisp machine easily explained price tag let compare emacs smalltalk emacs get right smalltalk believe main aspect outofthebox utility large number computer user emacs advertised used text editor course advertised extensible text editor see gnu emacs home page claim easy verify web search probably frequent reason people choose emacs text editor emacs user start plain user emacs text editing feature compare typical smalltalk system pharo started explore year ago malleable environment pharo many way superior emacs example support malleable graphical user interface emacs limited text plus embedded inert image pharo good anything write code make anything useful word approach pharo mindset software developer pharo code certainly easy change nothing pharo typical computer end user would want use change yet pharo already made lot progress compared earlier smalltalk system completely disconnected mainstream computing implement immediately useful tool pharo read file open http connection call nonpharo code someone could write killer app pharo would give attractiveness emacs happened yet consider typical trajectory emacs power user start downloading emacs learning enough editing need point want basic customization le basic customization likely first contact emacs lisp even copypaste small function found emacs stack exchange confidence gained minor tweaking move ambitious task end developing maintaining major emacs lisp package perfectly fine one important attraction road plain user power user org mode part emacs one versatile personal information management system existence also one make much sense unless already familiar overall philosophy emacs moreover productive use org mode requires significant customization move text editing emacs pim management org mode step ladder much smaller step emacs lisp development yet come high reward many emacs addons play similar role mail handling emacs via notmuch requires coding running standard mail client much le writing mail client scratch malleability emacs led ecosystem addons malleable often malleability main advantage compared conventional silotype application ecosystem important emacs attractiveness today seed got ecosystem started outofthebox utility lesson think carefully barrier also interesting compare emacs smalltalk platform implementing extensibility plugin framework web browser best comparison share usefuloutofthebox feature emacs big difference browser make clear distinction customization builtin preference panel writing extension using external development tool continuity path plain user power user point make decision become extension developer attack steep learning curve come moreover browser severely restrict extension modify fact user even explore code browser browser let alone change contrast emacs functionality implemented language user extension fully documented accessible inside emacs note geoffrey litt post browser extension take different point view considering browser extension way modify browser web application starting point another direction investigation add malleability system designed topic general barrier kind severely reduce malleability browser written different language extension using different development tool requires much higher learning effort prospective tinkerer emacs also barrier lowlevel foundation written c rather emacs lisp barrier far away even power user ever interact matter practice browser may sound saying avoid barrier malleable system simple accidental barrier language barrier probably best avoided barrier part system design serve purpose functional restriction browser extension belong category protect browser accidental malicious manipulation extension turn protects browser user malicious extension browser author additional customer support inquiry due buggy extension emacs like smalltalk barrier except lowlevel foundation emacs user change break anything like emacs package made available download potentially contain malicious code emacs philosophy going back neither cybercriminals completely technaive user emacs user fully responsible managing emacs environment actually work well practice even today emacs neither attractive completely technaive user sufficiently popular interesting target cybercriminals barrier thus important subject design malleable system social counterpart division responsibility system designer end user author published addons obvious find right balance empowering protecting user plus making sure understand clearly expected protection emacs say end user get full power take full responsibility good choice malleable system designed sufficiently narrow audience eg professional kind today choice made documented explicitly rather tacitly emacs mainstream web browser say browser developer responsible security aspect therefore limit power end user extension writer also reasonable attitude particular tool implementing open specification allow choice prefer browser emacs attitude use next example also mean creating new type barrier barrier different browser next user firefox user share browser extension satisfactory solution division responsibility question remains found opinion important obstacle way malleable system everyone good solution likely contain technical measure sandbox constraining execution contentaddressed storage replace mutable file system also contain social measure establishing trust software component range expert audit quality label used industrial product reputation score social network tag tool
62,Lobsters,emacs,Emacs editor,Good Style in modern Emacs Packages,https://zge.us.to/emacs-style.html,good style modern emacs package,good style modern emacs package almost year ago elisp area elpa melpa fall expected category function set function minor mode major mode special major mode minimise userinterface avy minimise dependency extend extension elpy disablebydefault use customizesystem easy customization interface customization type usual documentation,good style modern emacs package release emacs writing almost year ago year ago packaging system introduced using emacs back use old documentation wiki page mailing list forum post seems like mess example list package found mostly broken link surprising year old page especially index linking web page concept like emacs wiki elisp area elget also decreased popularity place gnu elpa communitymaintained melpa established way install package keep uptodate fact also pushing way forward emacs shedoff code program included emacs core year development summarised concept package crystallised since started contributing package contributing package recognised good subpar pattern would like comment suggest rule thumb make good emacs package fall expected category certainly legitimate exception think case emacs package one following function set function provide function anything interactive command meant user function added hook bound automatically instead user get decide function called minor mode strictly speaking minor mode also function state enabled disabled preferred minor mode local global variant unless neither make sense global variant minor mode modifies behaviour buffer change variable add new keybindings activating immediately visible change behaviour possible change generic within bound reason good style one depend major mode course unless good reason otherwise use defineminormode macro major mode opposed minor mode major mode state describes kind buffer one working anyone used emacs extended period know mean significant major influence userinterface major mode surprising accumulated experience reusable one good way know subsystem major mode integrate use fontlock use imenu use xref use completionatpoint define symbol word defun etc another way annoyingly subvert expectation unusual keybindings consider auctex org markdownmode three keybindings mark text bold italic etc three disagree respectively cc cf cb cc cx cf cc c b bold avoidable past debatable future developer consider already customary build like minor mode use definederivedmode least derive textmode progmode special major mode ie deriving specialmode least gnu emacs history major mode upgrade program behaviour regular text editing whatever one want existed rmail gnu first written dired already existed gnu emacs helpmode critical infrastructure yet developer flexibility designing based expectation even important antiexample try mx mpc prove codeemacs code good furthermore special major mode programme often use one buffer especially one window designer put thought new window created reused window focus also mess window configuration order category intentional package providing function preferred package providing minor mode etc mean developing special mode one consider worth reinventing wheel minimise userinterface package hundred entry point confusing harder integrate workflow minimise userinterface mean thinking reduce complexity without making singular command complex solution kind problem traditionally dwim mean command notable exception would something like avy regular interface avygotoword avygotochar avygotoline another aspect userinterfaces naturally one see would want think emacs developer know avoid visual clutter recent year seems push lure people modern interface using visual approximation popup dialogue related concept little say mistake hard get right eg line slightly larger text rest text text dialog nonmono spaced text usually unnecessary burden garbage collector package developer force assume user use package related also suggest polluting modeline usually enough space lot meaningful information mean space wasted meaningless information unsure make option consider suggestion would rather want focus minibuffer peculiarly scarce resource usually display one message time avoid spamming message might necessary especially process generates asynchronous member hook say two case message generated result specific command stated intention generate message package point generate message specific event eldon minimise dependency extend extension one strength packageel dependency automatically managed installing necessary removing obsolete code one command away nevertheless dependency something emacs programmer cautious reason technical plan argue one write everything one need oneself contrary package need already incorporated emacs example unnecessary dependency f dash familiar f library auxiliary function working file file path string dash list sequence alternative suggest using emacs already existing file function using buffer using seq cllib reason suggest last emacs version emacs accumulated improved many utility function missing previous version furthermore using thinly veiled alias compare fexistsp fileexistsp actually look definition unnecessary annoyance reading code main reason promotes bad style one understand elisp functional many people fall misconception fuelled popular myth lisp functional language take example freadtext compared return content file string one continues go work string splitting joining adding filtering stop consider function created temporary buffer destroyed might worth reconsidering best strategy instead one might use text editing primitive elisp built without constantly creating temporary buffer background needle string allocation different perhaps striking example avoiding dependency mentioned assuming others use package example package depend companymode even companymode developer recommend using builtin completionatpoint compare creating special companymode bookend recently tried install elpy python development environment extremely unpleasantly surprised found installed company highlightindentation despite notatall necessary another example package providing option completion system use instead using completingread et al especially little point besides dispersing existing configuration unpleasant emacs citizen disablebydefault suggestion tie many previous point evaluating buffer declare new function variable ask even debatable major mode add automodealist way enabling major mode change fontification perhaps rewire subsystem integration capf imenu minor mode default quite possible surprise act asked understandable everyone want least time reason add minor mode hook important thing user explicitly wish way feature feature turned default mean hidden documentation encouraged point possible done implementing optional feature minor mode user option declares feature enabled eg using set type either way decide user clever mean use customizesystem despite year old easy customization interface get much attention irony user interface complicated new user time boring socalled advanced user complex feature custom initialisation variable getterssetters properly used many people still prefer setq used people see problem setq thought also put specifying customization type usually better done still disappointed someone decides say type sexp value clearly structure knowing one simple type string v regex file composite type confusing list repeat extremely helpful designing configuration interface given least much thought designing function interface one package usual document function use checkdoc prefix package read documentation good package without good code annoyance seeing intend insult work developer designer usually good explanation mistake guess add obligatory disclaimer everyone right exact opposite suggested emphasise opinion measure improve user experience building expectation futureproof cooperate existing system instead fighting
64,Lobsters,emacs,Emacs editor,meme.el,https://github.com/larsmagne/meme,memeel,table content dependency emacs version welcome new emacs developer arch user aur microsoft true type font ubuntu arch linux installation source memeel yet configuration usage collection image select image file,table content dependency emacs version use library need emacs master trunk june later built normal goody including imagemagick support see welcome new emacs developer simple instruction alternatively arch user install latest development branch aur library tested emacsgit microsoft true type font also need get correct font ubuntu apt install ttfmscorefontsinstaller arch linux using aur wrapper pacaur ttfmsfonts fontconfigttfmsfonts installation source memeel officially part melpa yet easiest way install clone repository add emacs load path cd pathtosrc git clone http githubcomlarsmagnememeel configuration initel add following addtolist loadpath pathtosrcmeme require meme autoload meme memeel create meme collection autoload memefile memeel create meme file usage effectively generate meme within emacs collection image mx meme allow choose image edit stored pathtosrcmemeimages select image file mx memefile let browse desired image file
65,Lobsters,emacs,Emacs editor,Emacs TRAMP tricks,https://willschenk.com/articles/2020/tramp_tricks/,emacs tramp trick,edit file remote server directory browsing open shell edit file root editing file inside docker container inside docker container remote host requires play laravel scratch php storm emacs timeline reference http wwwemacswikiorgemacstrampmode http wwwemacswikiorgemacstrampanddocker http,emacs amazing different sort thing code text editor like vim ide like vscode different way thinking interact computer build technique top simple trick let get amazing thing done course part appealchallenge need figure make work since much way gentle tutorial let look tramp get sense possibleedit file remote serverlets say remote server named ssbwillschenkcom want edit etchosts file open directly emacs basic form connecting something using tramp cx cf remotehost filename ret method user remotehost filename example type cx cf ssh root ssbwillschenkcom etchost connects ssh remote server edits file save file copy paste stuff etc transparently sync file network need install text editor server local configuration copy paste stuff used installing vim quick configuration file editingdirectory browsingdired mode also work want move around cx cf select directory navigate around normally wouldopen shellmx shell open shell current working directory active buffer also work remote file use cu prefix command open shell buffer name specified handy multiple thing open timecu mx shell ask want want name buffer suggest hostname starting directory ssh string shell command use leave binbash interacting ssh remote server also keep track directory inside shell cd emacs know use normal keystroke open file cx cf default directory remote server tab completion work minibuffer inside shell mode use cup cdown cycle command history normal thing workedit file rootneed edit file different user cx cf sudo etchoststramp case piping thing sudo rather ssh making remote connection different user computerediting file inside docker containeranother fun trick edit file inside docker container docker used sometimes useful debugging docker file whatever need tigher feedback loopinside emacs open file docker container like docker drunkbardeen etcpasswd push con docker tramploginprogram docker tramploginargs exec h binbash trampremoteshell binsh trampremoteshellargs c trampmethods defadvice trampcompletionhandlefilenameallcompletions around dotemacscompletiondocker activate trampcompletionhandlefilenameallcompletions docker return list active docker container name followed colon equal adgetarg docker let dockernamesraw shellcommandtostring docker p awk nf name print nf dockernames clremoveifnot lambda dockerline stringmatch dockerline splitstring dockernamesraw n setq adreturnvalue dockernames addoit try spin quick server like thisdocker run rm p name rediscontainer redisand look file inside usingcx cf docker rediscontainer open directory browser container trick open editing file also open shell neednow obviously one point docker ship code around repeatably built go againsts spirit want treat easily distrubuted virtual machine handyinside docker container remote hostwe also chain thing together let say docker container named ssbpub running remote host ssbwillschenkcom connect using cx cf ssh root ssbwillschenkcomdocker ssbpub work file browsing well opening shell containerit requires playif want sit start working project learning curve emacs great better use tool already configured optimized want laravel scratch documentation fabulous recommends using php storm people learning laravel since get going focus solving problem without going rabbit hole great sometimes fun go rabbit hole enjoy playing reward greatemacs first released take look emacs timeline want see heritage glory though notice end year ago given around year point think say fad learn useful future matter latest hot stuff nextreferenceshttps wwwemacswikiorgemacstrampmodehttps wwwemacswikiorgemacstrampanddockerhttps
66,Lobsters,emacs,Emacs editor,TECO Editor for *nix,https://github.com/blakemcbride/TECOC,teco editor nix,tecoc teco editor character oriented macro tecoc http githubcomblakemcbridetecoc,tecoc teco editor teco text editor written dan murphy differs editor several way follows character oriented vi emacs screen oriented editor view text whole window screen edit text right see change take affect immediately ed ex edlin line oriented editor edited text viewed referenced edited line teco character oriented mean unit reference single character one hand may make teco cumbersome use hand give teco fine control happening teco video mode however text still edited command character basis screen simply updated command completed give user visual representation text edited screen view area macro general vi ed edlin programmable mean function editor provides however teco highly programmable program write called macro fact original version emacs written teco macro also emacs actually mean editing macro tecoc original version teco written machine language machine operated newer machine editor arose teco fell increasing disuse obscurity early pete siemsen longtime teco user created portable version teco c language called tecoc rather create new editor pete goal duplicate original teco closely possible time wore tom almy blake mcbride others increasingly assisted tecoc maintenance porting bug fix etc eventually tecoc found new home principal support tom almy home page tom kept port window mac linux recently blake mcbride merged tom almy various port along work done blake renewed window mac linux port reenabled video support mac linux bug fix speed improvement tested bit machine latest work available github http githubcomblakemcbridetecoc document doc directory provide complete documentation see following file doc directory file description buildtxt build setup instruction introtxt introduction using tecoc tecomanualtxt complete manual
68,Lobsters,emacs,Emacs editor,Creating Org mode sparse trees in Emacs and organice,https://200ok.ch/posts/2020-02-09_creating_org_mode_sparse_trees_in_emacs_and_organice.html,creating org mode sparse tree emacs organice,org mode sparse tree http freelibre open source software page,lot information org file help narrow topic interest right many way depending exactly want creating org mode sparse tree one option cc construct sparse tree selected information outline tree entire document folded much possible selected information made visible along headline structure option filter org file example org file containing lot different information want drill header cute dog appropriate tag dog cute filter dog cute make document look like modifying document important remember sparse tree hence delete line point might deleted line folded might want might also filtered list header nesting level better make semantic change like toggling todo state adding tag later viewing whole file example using stab start deleting line keen kind power go aka smartphone browser check free open source project organice http organice manage org file emacs even away computer looking information organice look like fact organice search feature similar emacs sparse tree even powerful compose different kind search one simply search todo check organiceorgmode filter task containing word pipe symbol logical filter smartcase search lowercase word mean filter ignores case word contains uppercase letter filter casesensitive following example search headline containing start finished keywords string state also use singlequotes startfinished state next example excludes done headline requires tag fun done fun exclude text string tag property well prepending minus sign last least search headline defined property todo blockedby assignee nobodynone filter headline property blockedby value property assignee value containing nobody none enjoy productivity boost drilling org file computer smartphone happy hacking liked post want say thanks please head freelibre open source software page like one give star github gitlab
69,Lobsters,emacs,Emacs editor,Org-mode features You May Not Know,https://bzg.fr/en/some-emacs-org-mode-features-you-may-not-know.html/,orgmode feature may know,email org manual worg reddit hacker news insert stored link list make checklist contextual capture template use custom view match appointment agenda view hit agenda view filter regex calendar jump today use set relative date hour planning use move table cell use copy increment cell point summing duration table hit un narrow subtree hit de activate restriction lock current subtree move root element toggle headline item start list timer schedule multiple headline region move element line column mode cycle property value adjusting timestamps clock line jumb back last stored capture entry prefix headline number thanks,meet fellow orgers occasionally use feature quite often interlocutor know know think secret org weapon listed please send email consider adding list feature listed available org later check version mx orgversion ret please read org manual browse worg want explore discus feature reddit hacker news cc cml insert stored link let say harvested dozen link various emacs buffer email file etc cc cml insert link list related command orginsertalllinks cu cc cc list make checklist turn list checkbox list contextual capture template setq orgcapturetemplatescontexts r inmode gnussummarymode inmode gnusarticlemode inmode messagemode capture template associated r key displayed gnussummarymode gnusarticlemode messagemode use agenda custom view match appointment quoting org manual agenda view agenda except considers appointment ie scheduled deadline item time specification h h mm timestamps setq orgagendacustomcommands appointment agenda today appointment orgagendaspan orgagendamaxentries see example useful defining agenda view dedicated appointment ch v orgagendamaxentries ret another neat trick sample code also set orgagendamaxentries setq orgagendacustomcommands appointment agenda today appointment orgagendaspan orgagendamaxentries use orgagendamaxentries limit agenda view first three entry today task ch v orgagendamaxentries ret know variable cx cw agendaorg ret agenda view store displayed list task new agendaorg file hit agenda view filter regex useful export share current list task someone hitting agenda buffer limit headline matching regular expression remove filter hitting calendar jump today use set relative date hour planning cc c headline scheduled past future use jump today date hit cc c headline schedule enter eg plan three day plan meeting use updownleftright move table cell move current cell updownleftright use sret copy increment cell point number date mar mer hitting sret create new row cell hitting sret create new row cell jeu summing duration table org table able sum duration tblfm hit un narrow subtree orgusespeedcommands set hitting beginning headline narrow current subtree hitting unnarrow buffer useful need hide rest personal note colleague related command orgnarrowtosubtree hit de activate restriction lock current subtree orgusespeedcommands set hitting beginning headline activate restriction lock current subtree hitting deactivate useful temporarily need call agenda view considering task current subtree need undo thing current subtree alone related command orgagendasetrestrictionlock cc c move root element cc c cc cu move cursor one element cc cc toggle headline item cc headline convert list item cc list item convert headline also try multiple headline list item cc cx start list timer start taking note hit mret new list item created cc cx start timer create list item displaying timer like example schedule multiple headline region orgloopoverheadlinesinactiveregion set region active multiple headline use cc c schedule headline one another see docstring orgloopoverheadlinesinactiveregion fun mh markparagraph orgmarkelement mh mark highlight paragraph point orgmode mh mark highlight element point hitting mh several time successively mark next element updown sm updown move element line hit updown org buffer move element hit sm move current line updown leftright column mode cycle property value property multiple predefined value column view active use leftright column mode cycle possible property value use something like configuration setq orgtagalist startgroup handson grouping tag grouptags write w code c mail endgroup startgroup handsoff f grouping tag grouptags read r view v listen l endgroup group print p buy b patch p bug b mx orgagenda ret handsoff list headline read view listen tag adjusting timestamps clock line supdown timestamp clock line adjust timestamp csupdown timestamp clock line adjust timestamp time clocked time clocked clock duration change msupdown timestamp clock line also adjust previous clock timestamps cu cu cc c jumb back last stored capture entry cu cu cc c jump last captured note one may actually want update forgot something mx orgtogglearchivetag ret add archive tag current entry making unavailable command like un folding agenda view etc bound cc cx le known orgarchivesubtree useful mx orgnummode ret prefix headline number mx orgnummode ret prefix headline number thanks thanks karl voit steven shaw feedback suggestion
70,Lobsters,emacs,Emacs editor,A Makefile for Emacs Packages,https://nullprogram.com/blog/2020/01/22/,makefile emacs package,portable makefiles dumb static analysis complex package dependency cask emacsql distributed package management,january emacs package makefile bytecompile source file run test build package file case run package interactive temporary isolated emacs instance portable makefiles similar structure follow convention would require thought feedback try make standard convention like see package makefiles incomplete list example make habit compiling emacs lisp file even think need performance bytecompiler dumb static analysis may spot bug issue early first thing first every portable makefile start special target posix request standard behavior followed macro definition compiling c program cc macro name compiler analogously compiling emacs package emacs macro name emacs program user override macro specify alternate emacs binary use time test package different version emacs make clean make check make clean make check note common use assignment nonstandard unnecessary want override macro definition environment use e option export make e first nonspecial target makefile default target emacs package target bytecompile source file including test list bytecompiled file name target dependency compile fooelc footestelc tedious part define dependency different source file would nice automate part somehow fortunately package complicated need list trivial dependency ie mapping el file elc file since make figure since footestelc relies fooelc testing file relationship must indicated make single file package one package file one test file needed call testing target check target must depend bytecompiled file containing test transiently depend package source file previous section check footestelc emacs q batch l l footestelc f ertruntestsbatch q option run emacs minimum customizations l option put current directory load path require foo work finally load file containing test instructs ert run defined test good build clean clean rm f fooelc footestelc finally need one thing tie together inference rule teach make compile elc file el file suffix el elc elelc emacs q batch l f batchbytecompile similar check target compiles source file instead running test simple single source file package need complex package complex package elfeed source file test file also includes target build package file would upload marmalade still functioning extra thing keep tidy first define package version makefile would nice grab information reliable place git tag source file etc never found reliable satisfactory way simple win avoid repeating list source file macro well el fooael foobel foocel doc readmemd test footestel still need interdependency individually defined make example c depends b neither b depend need foocelc fooaelc foobelc done correctly perform parallel build nonstandard common j make option pretty nice since emacs parallel build use file list macro compile check target compile el elelc test elelc test test elelc package target copy everything directory tar directory removed first exists potenntial leftover garbage get included package foo version tar foo version tar el doc rm rf foo version mkdir foo version cp el doc foo version tar cf foo version rm rf foo version elfeed target test interactive temporary emacs instance called virtual skewer called run name target specific rule depend package even want target handy option test without configuration contaminating emacs vice versa people report issue also direct reproduce issue clean environment simple run target might look like run el elelc emacs q l l foocelc f foomode make really designed run interactive program like work practice dependency package dependency used cask past never satisfied especially integrating makefile opted dumbbutreliable option request dependency cloned adjacent directory matching dependency package name example emacsql makefile header clone dependency package sibling directory git clone http githubcomcbbrownepgel pg also define new linker flag macro ldflags like emacs let user override needed everywhere use l also include ldflags example inference rule suffix el elc elelc emacs q batch l ldflags f batchbytecompile dependency follow convention also compiled recursive way little effort completely satisfied solution particularly since odd burden anyone using makefile worked well enough need wish emacs distributed package management
71,Lobsters,emacs,Emacs editor,Emacs Lisp Animations,http://dantorop.info/project/emacs-animation/,emacs lisp animation,emacs part talking lisp basic part minimal ascii art part list color part animation part better xy move defuns calling defuns color part succinct drawing part motion drunkard walk keyboard control part pong etc part common lisp structs useful emacs lisp command,emacs programmer text editor root great tool animation fall taught digital art class nyu interdisciplinary steinhardt art school clearly thing teach make animation emacs programming lisp exercise meant nonprogrammers get glimpse program language creating physical object case punctuation mark screen ascii art future yes least ascii art computer science postminimalism contemporary art period think pile ampersand exclamation mark earth art link class note get bit week go luck flesh earlier week work better sequence part talking lisp basic part minimal ascii art part list color part animation part better xy move defuns calling defuns color part succinct drawing random part motion drunkard walk keyboard control part pong etc part common lisp incf decf structs page describing useful emacs lisp command
72,Lobsters,emacs,Emacs editor,A Few Emacs Tricks,https://0xc0de.fr/2019/07/23/a-few-emacs-tricks.html,emacs trick,automatically reload browser editing html one sentence per line editing shared latex preview definition editing assembly highlight todo keywords insert screenshots org document insert delete change delimiters autorevert without lag,emacs lisp stuff configuration others may find useful want publish melpa intention maintain probably contain bug tested thoroughly etc feel free grab fit need complain work automatically reload browser editing html web programming htmlcssjs like browser test change quickly switching browser refreshing got old rather quickly scripted reloadbrowserel provides function reloads multiple browser window first time call turn cursor box asking click window want reload calling function reload window selected even select multiple window eg firefox chrome pas numeric prefix argument keybinding save current buffer reload browser window need fancy setup behind scene simply call xdotool heavy lifting mostly straightforward turn chromium requires focus reloaded whereas firefox script handle well one sentence per line editing shared latex usually write text autofillmode wrap line character result readable text editor writing paper latex though want keep one sentence per line make reviewing diffs handling conflict much easier working people course want editor fill way automatically osplel redefines autofillfunction break sentence provides osplparagraph function refill current paragraph one sentence per line trick detect sentence end insert newlines emacs recognize sentence looking colon note abbreviated acronym also end colon eg ie best way handle unambiguously use double space sentence single space colon see variable sentenceenddoublespace unfortunately everyone recognized double space superior form ospl assumes use single space avoids breaking common acronym make slightly complex preview definition editing assembly lately dabbling assembly navigating code often found need look definition label point wrote xref backend assembly xrefasmel could jump definition back using standard keybindings label really need jump definition needed see couple line label could remember wrote xrefposframeel another package preview definition using posframe posframe let create oneshot emacs frame without window decoration convenient configurable overlay displaying stuff top current buffer still fast enough usable xrefposframe preview definition one key pressing key second time even jump definition work everywhere xref supported assembly highlight todo keywords one pretty simple want keywords comment like todo fixme use custom font see pop screaming fixed done adding keywords font lock defun addwatchwords add todo word fontlock keywords fontlockaddkeywords nil todo fixme hack fontlockwarningface addhook progmodehook addwatchwords method one drawback highlight word anywhere appear programming buffer even outside comment complex package robust way making sure highlight word comment think worth added complexity time method work fine false positive ignore lately using descriptive keywords like correctness optimize added wildcard end handle word even false positive issue insert screenshots org document take lot note working org whenever working something visualized prefer include screenshots often helpful conveying going reduce friction taking screenshot cropping inserting link org file written bit elisp defun insertscreenshot filename save screenshot filename insert org link point call import imagemagick take screenshot optipng reduce file size program present interactive fsave file get absolute path let file expandfilename filename create directory necessary makedirectory filenamedirectory file parent still make sure signal screenshot fact created unless callprocess import nil nil nil file usererror import failed create screenshot file executablefind optipng startprocess optipng nil optipng file insert link relative buffer inserted portable format file filerelativename file filenamedirectory bufferfilename eq majormode orgmode orgredisplayinlineimages snippet asks filename call import select area want screenshot save insert orgformat image link point orgmode redisplays inline image see result right away optipng installed even compress screenshot save space insert delete change delimiters spacemacs vim nifty way quickly surround part text quote brace delimiters went back vanilla emacs adding quote hand seemed tedious delimiterel solves straightforward delimitersurround prompt delimiter char surround current region region active surround current sexp two quick key press quote word delimiters go pair giving opening brace use matching closing brace closing delimiter also delimiterchange change existing delimiter pair something else delimiterdelete selfexplanatory note deletion purposefully clever nested delimiters delete one closest point following situation caret mark point invoking mx delimiterdelete ret yield one may expect eat outermost parens want clever behavior look elsewhere autorevert without lag yesterday wanted explore assembly output gcc simple c file opened two window one c code one output assembly put latter autorevertmode could quickly see result recompilation turn autorevertmode weird lag machine could take second revert buffer could see result opening terminal watch n cat better wrote small minor mode reverts buffer getting change event inotify constantly instantaneous later checked source autorevertmode found le minor mode using filenotify watcher first falling back polling filenotify supported fails yet still take second refresh whereas minor mode work issue autorevertmode may want try inotifyrevertel
73,Lobsters,emacs,Emacs editor,Things I've stopped using in GNU Emacs for working on Go,https://utcc.utoronto.ca/~cks/space/blog/programming/GoEmacsDroppedTools,thing stopped using gnu emacs working go,switch basing gnu emacs go environment lspmode goguru gomode lspmode gorename gomode gopls godoctor gorename goeldoc gomode companygo companymode companylsp gocode gotags gopls setting lspgo gopls emacs documentation melpa gopls,light switch basing gnu emacs go environment lspmode decided revisit bunch emacs stuff previously using take thing seemed outdated nt using general current assumption go big switch using module probably break tool dealing go code nt updated suspect proven otherwise reason want record everything remove list based old copy emacs saved goguru provided gomode one thing sort used minor mode highlight identifier extent care highlighting provided lspmode gorename gorename binding gomode practice never used automatically rename anything code nt miss anyway lspmode gopls support renaming thing although remember done lsprename command key menu binding currently godoctor another path renaming operation tried early found issue mostly never used like gorename goeldoc provided quick documentation summary lspmode also provided tune lspmode taste previously bound godefjump come gomode replaced equivalent lspmode binding lspuipeekfinddefinitions stopped using companygo provide autocompletion data go companymode favour companylsp us lspmode general source completion data dropped emacs thing mean implicitly stopped using gocode previously backend number thing general built quite bunch go programming tool various source gotags many installed poke never got around using actively point go everything weed tool nt updated deal module simply nt care option remove go program tool built gobin start scratch adding thing turn actively use want probably going hold go go entirely modular build clean gosrc tree anyway probably investigate various gopls setting set either lspgo experimental setting covered gopls emacs documentation since get latest emacs package melpa compile bleeding edge gopls le ongoing thing occasional irritation
74,Lobsters,emacs,Emacs editor,State of CIDER 2019 Results,http://metaredux.com/posts/2019/12/10/state-of-cider-2019-results.html,state cider result,meta advent note dedicated user base user environment typical usage extension cider manual favourite feature idea improvement learning resource funding general note closing thought data,article part meta advent series committed writing new blog post every day christmas took write article finally opted group related question several broader theme note find raw data survey figure share everyone diagram mostly pie chart got google form directly someone know please let know dedicated user base surprised learn majority cider user around using year fact le respondent said started using cider past year sure whether result good bad good know many people enjoy cider much stuck quite highly competitive environment certainly today got way great alternative cider year ago course might also related fact respondent said using emacs also quite surprising always thought plenty people came emacs cider perhaps many fled tool speculate another interesting insight respondent came cider vim around cursive surprised vim convert emacs pretty good vim keybindings emulation expect cursive convert user environment people seem using either macos gnulinux around window user quite around note people using one operating system respondent working emacs current development version got still running emacs user reported custom emacs setup running spacemacs frankly expected people spacemacs also nice see reported using emacs prelude around people reported running latest stable cider running development version cider funny enough responded idea version cider using people reported updating cider release upgrade process pretty painless day great success quite happy learn day user relying cidernrepl expected something like result really surprised typical usage another interesting insight bulk user using cider clojure clojurescript development rest clojureonly clojurescript support always weakness cider although thing improving gradually past couple year guess knowing many people rely support motivate u even improve come build tool cider user relying leiningen toolsdeps build tool barely registered survey surprised boot fared poorly le participant survey targeting clojure number pretty similar clojurescript still people targeting seems clojure pretty much dead seems decision try support last clojure script release good one user typically starting cider using ciderjackin rest favour use ciderconnect surprise people use cider local development user said also using cider connect remote application extension respondent said using cider extension cljrefactor popular huge margin almost usage helmcider came second none extension made year cider absorbed many extension guess big surprise people relying much extension also quite remark people even know many extension existed even though listed cider manual come emacs extension paredit smartparens projectile magit top choice people doubt anyone surprised result favourite feature asked highlight favourite feature cider people pointed following debugger value inspector interactive programming surprised see many mention inspector great hear many people find useful relatively feature highlighted people also wondering many user familiar everything cider offer another way interpret perhaps many useless feature trim fat idea improvement come idea improvement frontrunners better clojurescript support better findusages improved refactoring functionalitymerging cider cljrefactor improved support clojurespec fewer breaking change informative message especially come error way planning merge cider cljrefactor unfortunately progress front quite slow assure working extent topic limited bandwidth big improvement take time also seems people reasonably happy cider default many suggestion improve prompting symbol prior acting switching focus certain action popped time question learning resource vast majority respondent seem happy current state cider documentation spent lot time working throughout year glad see come support resource clojurians slack clearly number favoured respondent reddit github issue stackoverflow come next le share try monitor even though often ignore question simply due lack time always appreciate others helping support question funding bulk people said using cider job hand said company supporting cider certainly bit disappointing relatively easy explain company need licence buy option exist bright side responded would willing support cider one degree another use opportunity remind everyone best way fund development cider today day recommend using github sponsor want pitch charge anything first year matching donation receive donate receive general prefer open collective model focused project particular person certainly mind getting bit extra money githubmicrosoft free nice see people willing invest cider figure point sell licence company general note first survey type ever useful learning experience got lot feedback improving structure type question promise learned lesson next survey going better also noticed people seem confuse cider cljrefactor functionality big surprise closing thought well wrap people participated survey total bit underwhelming really hoped able make go big next year think overall survey result show cider good place dedicated happy user base people want see existing feature polished refined stability project cider maybe better clojurescript support voice heard hope let usual many way interpret data simply mine interpretation looking forward seeing article member community analyzing sharing perspective thanks everyone participated survey really appreciate input work hard next year make cider even better
75,Lobsters,emacs,Emacs editor,Efficient Alias of a Built-In Emacs Lisp Function,https://nullprogram.com/blog/2019/12/10/,efficient alias builtin emacs lisp function,misguided defalias get bytecode opcode lexical scope advised constraint defsubst bytecode compiler pretty dumb clfirst benchmark benchmark source,december suppose like name car cdr traditional identifier two half lisp con cell misguided con really half particular meaning even head tail however maybe really important want anyway best way go defalias emacs lisp builtin function defalias obvious choice defalias caralias car car builtin function fundamental language get bytecode opcode call car code bytecompiler generate function call instead us single instruction example add function sum car two argument followed definition disassembly emacs lexical scope defun add b car car b stackref car stackref car plus return zero function call dedicated car opcode optimal six bytecode instruction problem defalias definition permitted change advised robs bytecompiler optimization opportunity constraint bytecode compiler see caralias must emit function call defun addalias b caralias caralias b constant caralias stackref call constant caralias stackref call plus return two function call eight bytecode instruction function call significantly expensive car instruction show benchmark later defsubst alternative defsubst inlined function definition inline actual car semantics defsubst like macro explicit redefinition may affect previous us constraint gone unfortunately bytecode compiler pretty dumb poor job inlining carsubst defsubst carsubst x car x defun addsubst b carsubst carsubst b stackref dup car stackset stackref dup car stackset plus return zero function call ten bytecode instruction car opcode use five unnecessary instruction still faster making function call though bytecode compiler little smarter could compile ideal case would end discussion clfirst builtin cllib package clfirst alias car written someone intimate knowledge emacs lisp well require cllib defun addclfirst b clfirst clfirst b stackref car stackref car plus return like plain old car manage using bytecompiler hint defalias clfirst car put clfirst byteoptimizer bytecompileinlineexpand used defalias also manually told bytecompiler inline definition like defsubst fact defsubst expands expression set bytecompileinlineexpand seen inline function overhead get inlined get eliminated benchmark alternative perform benchmark source add addalias addsubst addclfirst car list running time since add addclfirst bytecodes see significant difference simple use defalias double running time using defsubst slower
76,Lobsters,emacs,Emacs editor,A walk through the Magit interface,https://emacsair.me/2017/09/01/magit-walk-through/,walk magit interface,post r twitter github macsair collecting frequentcommitter mile walk magit interface magit magical git interface magit everything actionable status buffer emacs theme solarized light solarized dark homepage zenburn homepage light emacs default dark emacs default hiding detail status buffer automatically updated acting see commit detail beyond default action invoking git command using popups popups v direct command staging change acting selection staging part hunk changing diff argument applying change consult described log buffer moving log innovative variant many command committing rebasing merging fetching pulling pushing branching,post r twitter github macsair collecting frequentcommitter mile walk magit interface article demonstrates essential feature order give impression interface work also hint design principle behind interface tip iceberg magit complete interface git limit essential feature everyone hope article succeeds demonstrating focus workflow allows user become effective git user concentrate essential workflow note advanced feature workflow optimized attention detail would rather concentrate big picture read article magit magical git interface instead afterwards magit everything actionable almost everything see magit buffer acted pressing key obvious seeing magit look screenshots accompanied text explaining see used perform variety action regardless magit buffer always show detail alternative view thing point without type copypaste information often would command line status buffer status buffer shown inside git repository typing cx g controlx followed g equivalent typing git status shell show quick overview current repository see magit show information git command line would also use git diff git diff cached git log oneline originmaster git log oneline originmaster command get information emacs theme many theme exist emacs throughout guide use solarized light theme status buffer look using popular theme solarized dark homepage zenburn homepage light emacs default dark emacs default hiding detail might noticed diff hunk readmemd shown respective section collapsed collapse diff section section larger single line moving cursor pressing tab note current section highlighted different background color always know extent current section moved one line would become current section current line well commits follow would highlighted currently need know detail unpulled commits could type tab still see name upstream branch many commits ahead master detail individual commits case hidden want see type tab command line would type something like git log oneline upstream status buffer always show much little currently appropriate without remember command show little much information instead temporally hide show detail needed pressing single key hiding much possible status buffer look like buffer showing little status buffer automatically updated use emacs edit save file located inside repository use magit perform action staging change status buffer automatically updated change something outside emacs press g refresh current status buffer g refresh magit buffer acting see major advantage magit git command line nearly everything see magit buffer acted hiding showing section one example besides tab another key work nearly everywhere ret return show detailed view thing point commit branch diff hunk stash commit detail example type ret cursor commit message diff commit shown case diff completely fit window could hide section metadata commit diffstat top bring complete diff view could move section view rest diff basic key movement key cp move one section cn move one section mp ie metap also commonly known altp mn would move previous next section level current section latter two command used navigate magit buffer quickly skipping child section example could jump one file another without step hunk first beyond default action interested diff commit message first place could typed status buffer instead ret already pressed ret type q quit ie hide current magit buffer case commit buffer go back previous buffer precisely previous window configuration case would take back status buffer ret performs likely action thing point many key perform equally useful action show diff l show log dozen mentioned invoking git command using popups cursor thing want act convenient many command default acting thing sometimes want act thing might inconvenient first move representation current buffer thing want act might even present current buffer many command therefore also allow act thing pressed twice show diff commit point pressing actually something show see window split two pane note emacs predates window system one would say frame split two window pane top still show status buffer pane bottom show diff popup diff popup show action bottom argument know command line use git top previously pressed cause popup bufferwindow disappear mean diff variant invoked dwim variant particular one act thing point alternatively could press letter show show index might want show diff arbitrary range case would press r type range completion popups also allow user set argument used invoked action call git diff popup example one enable use functioncontext argument typing f invoking action argument take value read user using completion appropriate usually argument used later enter popup enabled anymore however save argument want used default enter popup set argument desired instead invoking action type cc cc save default current popup setting persist emacs session cc cc one command available popups show type ct many popups commonly used one quickly learn key press mnemonic need something rarely come rescue show typing popups v direct command many magit command invoked first showing available variant picking one variant many popups possible press key twice invoke common variant often dwim variant also many command implemented using popup seen hideshow command tab visit command ret far command staging unstaging u always act file hunk point similar command discussed staging change magit make simple stage later commit change leaving change working tree committed separately command line invoke special staging unstaging session using git add patch git reset patch quite cumbersome go available hunk one one order magit act see stage hunk would move simply press without first tell git want stage also want stage done buffer automatically update cursor moved next hunk therefore stage multiple hunk pressing multiple time want magit bother hunk like git staged hunk appears inside section unstaging course work way move staged change press u also stage unstage everything pressing u acting selection also stage multiple file hunk mark sibling section using region region emacs term selected first press cspc mark one end region move cursor reach end alternatively could use mouse region constitutes valid acted unit look like example contributingmd readmemd selected lispmagitel selection active many command would normally act current section instead act selection ie marked section staging command region active constitute valid selection section fall sibling one another region look usually emacs make trivial see act current section selection staging part hunk besides sibling selection magit support second selection internal mark part hunk using region stage unstage otherwise apply part hunk see look like part hunk remove word selected using region pressed part would staged resulting note conveniently cursor placed take pride detail particular detail might important looked isolation go little extra step many place make difference changing diff argument instead using hunk internal region stage part hunk could also told git make hunk smaller using u argument press hunk question break two use opposite work status buffer well buffer may contain diffs far seen plain diff buffer commit buffer seen specify several argument using diff popup create diff buffer showing status buffer pressing cx g showing commit buffer pressing ret possible however change diff argument used current buffer press bring diff argument popup similar diff popup offer argument instead action show diff another buffer offer action affect current buffer press g use argument currently selected popup current buffer set argument default buffer type status buffer repository argument would used status buffer repository subsequently create last restart emacs permanently save new default use w similar popup exists l applying change graphical tool approach magit come staging feature described think one quite make one thing set magit apart tool however feature available staging unstaging also applying magit also discard reverse apply file file hunk hunk region point using exact interface described information apply variant consult manual noticed diff popup lacked favorite argument fear easy add argument existing popup described manual argument missing actually required cached fall category needed simply use diff variant show cached change index argument eg irreversibledelete missing strike balance making every argument available anyone might ever need overwhelming beginner argument ever fairly easy user add additional argument popup intend make trivial possible temporally show supported argument select one shown default using checkbox similar word user longer additional instead choose one need log buffer like possible show diff separate buffer course also possible log press l show log popup look like choosing log want see log shown actual log buffer look quite similar would get command line example variant notice argument displayed top moving log thing get interesting press ret show commit point separate buffer actually case better press spc display buffer current log buffer remains current buffer move log buffer using cp cn commit buffer automatically updated show commit cursor log buffer innovative variant many command seen magit provides command allow invoking certain variant git command without remember type many argument diff change example command save remember type cached useful innovative also many experienced user git command line probably created alias sort thing magit also provides many truly innovative command go beyond could alias include among others command committing rebasing stashing branching committing press c show committing popup c create regular new commit call git commit arranges current emacs session used giteditor commit message buffer opened one buffer another buffer show change committed done press cc cc also amend head pressing like git commit amend editing message amending press cc cd toggle showing change added head change make amended commit also fixup squash variant variant exist git term used correspond term might familiar git might good time show get information popup action argument show information variant type w give let change message without adding change similarly add staged change without forcing review message quite useful simple typo fix fixup let pick commit modified staged change immediately initiate rebase mostly like commits head commit modified picked using specialized log buffer rebasing rebasing popup also provides variety command unique magit one variant let edit single commit without go list commits rebased simply go commit want rebase log course including log unpushed commits status buffer press r enter rebase popup modify commit likewise variant allows editing message single commit performing interactive rebase supposed affect single commit done usual editing file gitrebasetodo magit make additional key binding convenience feature available rebase sequence progress loglike section information rebase shown status buffer like regular log course perform various action listed commits like viewing course conflict shown resolve conflict visiting file pressing ret conflict hunk would see something like use smerge package style edit file also use ediff package show two side optionally common ancestor separate window magit wrap feature provided package since actually part magit skip looking detail course could also abort rebase pressing r merging merging popup quite simple merge progress status buffer show information fetching pulling pushing without going detail popups fetching pulling pushing one thing worth noting though popups feature variant somewhat similar usually different branch actually git feature many git user know hardly documented learn different see branching branching popup used edit create andor checkout branch new variant particularly interesting creates check new branch whose upstream previously checked branch rewinds branch upstream useful began working new feature directly master realize using feature branch branching popup also one popups subpopup press c show branch configuration popup popup see value important git variable concerning current branch value obviously changed using shown key thank jonas bernoulli footnote
77,Lobsters,emacs,Emacs editor,Consistent Technical Documents Using Emacs and Org Mode,https://www.youtube.com/watch?v=0g9BcZvQbXU,consistent technical document using emacs org mode,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature consistent technical document using emacs org mode youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature consistent technical document using emacs org mode youtube
78,Lobsters,emacs,Emacs editor,Org-mode version 9.3 released,https://orgmode.org/Changes.html,orgmode version released,,org attach refactored functionality extended easier understand work improvement extra option added well initial comment orgattach sourcecode attachment managed either using custom property dir using property id orgid dir defined location filesystem directly attached outline node orgid used attachment stored folder named id location defined orgattachiddir dir precedence id parameter defined current outline node also inherited parameter taken account inheritance requires extra property adhere orgattachuseinheritance default inheritance customized always activated never activated orgattachuseinheritance attachdir property deprecated favour shorter property dir link folder inside dir property declared relative link enabled default set orgattachdirrelative adding new attachment outline node preferred way customized take look orgattachpreferrednewmethod default using id since behaviour change dir id property set node dir precedence used one also choose build attachmentdirectorypaths customized way advanced topic case make sense parse id different way default one create function add beginning orgattachidtopathfunctionlist want customize id based folder structure used attachdir property manage attachment use following code rename property dir support functionality attachdirinherit longer supported removed defun orgupdateattachproperties change property orgattach interactive orgwithpointat outlinenextheading let dir org propertylocalvalues attachdir nil dir orgsetproperty dir car dir orgdeleteproperty attachdir orgdeletepropertyglobally attachdirinherit hate breaking change even though change made clean thing fear attachdir still continue work documented longer get chance run code clean thing anyways
79,Lobsters,emacs,Emacs editor,Emacs Is Superman,https://wiki.c2.com/?EmacsIsSuperman,emacs superman,,
80,Lobsters,emacs,Emacs editor,EAF: Extending Emacs with GUI Support Using Python PyQt,https://github.com/manateelazycat/emacs-application-framework,eaf extending emacs gui support using python pyqt,简体中文 emacs application framework eaf eaf application overview install dependency list usepackage dependency list core launch eaf application wiki highly wiki faq eaf work eaf v exwm multilanguage scripting eaf currently linux error github personal access token github personal access token site proxy eaf community report bug wiki report bug join u let hack together 打赏 manateelazycat,english 简体中文 emacs application framework eaf eaf gui application framework revolutionizes emacs graphical capability ultimately live emacs eaf application overview eaf extensible framework one develop application integrate emacs browser markdown previewer image viewer video player pdf viewer camera file sender file receiver air share org previewer terminal emulator r reader download manager mind map mermaid eaf interleave install install eaf dependency explaination dependency found dependency list following line archbased distros package available install particular distribution yay pythonpyqtwebengine pythonqrcode pythonfeedparser pythondbus pythonpyinotify pythonmarkdown nodejs libreoffice pythonpymupdf pythongrip filebrowserbin clone repository git clone http githubcommanateelazycatemacsapplicationframeworkgit add full path eaf installation directory emacs loadpath add following initel use usepackage sample configuration provided usepackage eaf loadpath emacsdsitelispemacsapplicationframework set usrshareemacssitelispeaf installed aur custom eaffindalternatefileindired config eafbindkey scrollup cn eafpdfviewerkeybinding eafbindkey scrolldown cp eafpdfviewerkeybinding eafbindkey takephoto p eafcamerakeybinding dependency list package listed core mandatory eaf work whereas package optional install want use corresponding eaf application package dependent description core essential gui library pythondbus core dbus ipc connect python elisp pythonpyqtwebengine core chromium based web rendering engine pythonpymupdf pdf viewer pdf rendering engine pythongrip markdown previewer markdown rendering server pythonqrcode file sender file receiver airshare render qr code pointing local file pythonfeedparser r reader parse r feed pythonpyinotify mermaid monitor mmd file change status pythonmarkdown mermaid covert markdown format mermaid html format nodejs terminal communicate browser local tty browser download file web libreoffice doc viewer convert doc file pdf filebrowserbin file browser share file computer smartphone launch eaf application application name launch browser mx eafopenbrowser search goto url mx eafopenbrowserwithhistory search goto url goto history html email renderer mx eafopenmailashtml gnu notmuch html mail pdf viewer mx eafopen pdf file video player mx eafopen video file image viewer mx eafopen image file markdown previewer mx eafopen markdown file org previewer mx eafopen org file camera mx eafopencamera terminal mx eafopenterminal file sender mx eaffilesenderqrcode eaffilesenderqrcodeindired file browser mx eaffilebrowserqrcode airshare mx eafopenairshare r reader mx eafopenrssreader mindmap mx eafcreatemindmap mx eafopenmindmap m office viewer mx eafopenoffice mermaid mx eafopen mermaid file mmd demo mx eafopendemo verify basic functionality open file cursor dired using appropriate eaf application use eafopenthisfromdired instead eaf browser pdf viewer support emacs builtin bookmark operation mx bookmarkset defaulted cx r mx bookmarkbmenulist defaulted cx r l note eaf use dbus session bus must run general user please nt use eaf emacs started sudo root user root user access dbus system bus wiki highly suggested read wiki first using eaf wiki consists documentation keybinding customization design todolist also helpful tip make eaf work docker helm etc faq eaf work eaf implement three major functionality integrate pyqt program window emacs frame using qwindow reparent technology listen eaf buffer keyboard event flow control keyboard input pyqt program via dbus ipc create window compositer make pyqt program window adapt emacs windowbuffer design eaf v exwm eaf exwm share common goal enhance collaboration standard gnu emacs gui tool exwm window manager manages control software using keyboard modify customize extend behavior software example modify behavior press key chrome pdf viewer eaf window manager utilizes window managing capability emacs display application intention eaf provide framework write application extends multimedia experience emacs perspective emacs buffermode design eaf different package former us qt drawing content latter us emacs builtin text library instead eaf design one use elisp control python vice versa even able use elisp control javascript eaf browser eaf enables emacs world multilanguage scripting project similar term interface two completely different project different goal mind sometimes one may find eaf suitable exwm sometimes way around please meaninglessly compare eaf currently linux dbus linuxspecific technology difficult support dbus operating system qgraphicsscene technology work macos figure pr always welcome eaf eaf aborted core dumped error please check eaf buffer something wrong python side usually due python dependency installed correctly sure python dependence installed correctly please create issue eaf buffer content contains many clue help u locate problem faster github personal access token use eaf markdown previewer get consistent previewing need access github personal access token site fill something token description click button generate token get personal token set token setq eafgriptoken yourtokencode although markdown previewer work first time entering empty string prompted eventually stop working give github rate limit reached error proxy need use proxy access internet one configure proxy setting setq eafproxytype http setq eafproxyhost setq eafproxyport use local proxy one set proxy type setq eafproxytype eaf community list community package use eaf enhance graphical experience missed package please make pr add list report bug installation configuration assistance please read wiki first encounter problem eaf please use command emacs q minimal setup contains eaf verify bug reproducible emacs q work fine probably something wrong emacs config problem persists please report bug got segfault error please use following way collect crash information install gdb turn option eafenabledebug use command eafstopprocess stop current process restart eaf send issue eaf buffer content next crash join u want make emacs real operating system want live emacs comfortably want revolutionize capability emacs let hack together 打赏 如果我的作品让你的生活充满快乐 欢迎请我喝瓶啤酒 哈哈哈哈 manateelazycat
81,Lobsters,emacs,Emacs editor,‎gccemacs,http://akrl.sdf.org/gccemacs.html,,,gave quite thinking guess story telling explain rationale lead current implementation two main option table linker approach generating code something essentially c toolchain using system linker would appeared first option still unclear cope side effect barely function definition guess modification actual codebase would necessary also making something future proof subsequent dump lisp image looked quite challenging including compiled function image dump including single function dump image difficulty essentially came conclusion trying break function already compiled linked shared library store reload function would translate parse elf reimplement part loader make assumption implementation short searching trouble mind formed opinion breaking compilation unit piece mistake cope came plan storing full eln file image dump could work issue loading shared library resides memory file came completely trivial dlopen take filename parameter guess could wrong secret reason dynamic linker yes unix program work found memfdcreate possible workaround syscall present recent linux kernel let create file descriptor piece user space memory without real file copy real filesystem access file appear proc subfolder nt keen option non portable looked like last option alternative equivalent memfdcreate seemed exists non linux kernel already half way implementation stepped back wanted rethink problem whole emacs dump image mechanism created startup time motivation fact result single file two case portable dumper think nice side effect single file load faster mainly object serialized binary format nt need go reader case elc file thinking function eln file already serialized compiled machine code action calling dlsym lookup asking entry point address memory motivation dumping already eln file could nt load would sub optimal still eln file format piece data left go reader load object used function talking vector per compilation unit aggregation original constant vector last least absolutely nice system enviroment state dumpable given constraint thought final solution store compilation unit lisp object already defined gc support reference eln file originally loaded dumptime dump compilation unit object include eln file content dump file compilation unit load time relocation use precise pdump nomenclature revive dlopen original eln compilation unit relocated proceed native function relocating function pointer dlsym compilation unit good side effect mechanism data vector read reader naturally dumped restored pdumper infrastructure cheating maybe think solution quite sound nevertheless case unique file hard requirement falling back memfdcreate like solution would incremental step implemented mechanism missing sanity check ensure eln file reloaded changed done
82,Lobsters,emacs,Emacs editor,SchemeMosaic Chop'n'Screw How-To Videos,http://www.youtube.com/playlist?list=PL0nuOl15T_6X0YL6mMBfm8zBSTmDpaRxh,schememosaic chop nscrew howto video,,
83,Lobsters,emacs,Emacs editor,Emacs: The Editor for the Next Forty Years,https://media.emacsconf.org/2019/26.html,emacs editor next forty year,,browser support video tag please download video instead
84,Lobsters,emacs,Emacs editor,Cloudmacs and getting to know Docker,https://beepb00p.xyz/cloudmacs.html,cloudmacs getting know docker,check filestash orgmode goody author agnostic multistage build build time variable asenvuser dockercompose wrapper,really wanted spacemacs everywhere wish came true thanks docker tldr running spacemacs web service vps check since became hooked emacs looking way experience browser sometimes use nonpersonal computer possibleundesirable install desktop emacs dropboxsyncthing access personal data looking cloud solution since got vps closest tool wanted filestash support vimemacs binding orgmode goody however nt anywhere convenient emacs also moving dropbox syncthing planning abandon filestash anyway nt allow local file ftp git upd author mention planned support syncthing dropbox capable previewing arbitrary text file let alone edit even could obviously would nt get anything close usual emacs workflow could imagine emacsvim style editing fairly application agnostic thankless job rewriteport amazing emacs package feature used like neotree helm refile swoop agenda projectile orgdrill etc figured thing would keep happy run emacs web thankfully due tui interface work surprisingly well work really well spacemacsevil style spc comma binding part nt overlap osbrowser hotkeys also first time properly used docker apart running people container nonobvious thing learnt might find useful multistage build painless way extend someone else container combine several container one build time variable nice way make container amendable eg avoid hardcoding version use perhaps trickiest one docker reuses host kernel consequence user id built container root normally case pull docker hub container write back mounted volume root get around somewhat hacky asenvuser script custom dockercompose wrapper take care preserving user id
85,Lobsters,emacs,Emacs editor,EmacsConf 2019 videos now out,https://lists.gnu.org/archive/html/emacsconf-discuss/2019-11/msg00002.html,emacsconf video,date prev date next thread prev thread next date index thread index ann emacsconf video http http toobnixorgvideochannelsemacsconf http http http libregitorgheckyellibretube ann emacsconf video,date prev date next thread prev thread next date index thread index ann emacsconf video amin bandali subject ann emacsconf video date sun nov useragent gnu gnulinux hello fellow emacsians account emacsconf big success like say thank every one help effort making week conference happy announce emacsconf video available viewing pleasure video view video accompanying material head video page emacsconf http would like say huge thank computer science club university waterloo agreeing host emacsconf video mirror server thank csc video also uploaded toobnixorg peertube instance run sdf folk part fediverse network feel free visit emacsconf channel http toobnixorgvideochannelsemacsconf browse emacsconf playlist ordered list year video shownotes pad per suggestion karl voit viewer used shared etherpad collecting show note useful tidbit information nov pad archived converted org file karl thank karl see http information caveat talk scheduled emacsconf available viewing right caveat due technical difficulty sadly unable host sachin live talk day conference sachin told u would send u recording currently busy course make sachin recording available soon ready receive another technical issue lead frozen video starting middle howard talk howard told u would work putting together recording talk post recording soon get please note link video especially notestranscripts likely change near future like ask please try link main video page http much possible sort looking nice lowoverhead barebones free software solution hosting conference video think found great candidate libretube http libregitorgheckyellibretube look experimenting libretube setting server suit need well likely imply change url necessary try make change smooth possible eg setting automatic redirects new address postmortem coming soon video taken care work preparing postmortem followup article detail free software infrastructure streaming setup promised thanks help encouragement look forward seeing around next emacsconf p hopefully even exciting news share yall soon sure keep eye list best amin ann emacsconf video amin bandali
86,Lobsters,emacs,Emacs editor,Consistent technical documents using Emacs and Org Mode,https://youtu.be/0g9BcZvQbXU,consistent technical document using emacs org mode,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature consistent technical document using emacs org mode youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature consistent technical document using emacs org mode youtube
88,Lobsters,emacs,Emacs editor,Emacs: Fury Road,http://NQNStudios.github.io//2019/11/19/emacs-fury-road.html,emacs fury road,using builtin software tesla oh god yule log real heat right real model disabling annoying beeping whenever reverse emacs x window manager evil mode googlemapsel osmmode karaoketime nethackel emacsfireplace subscribe patreon,took ride friend tesla today disgustingly perfect car door handle newfangled strange learned lever door open smooth sailing first thing showed automatic steering made perfect lane change steep curving downhill road done better help notice size console like ipads put together zoom map screen bet could see salt lake city color coding traffic jam next caraoke sing along imagine dragon using builtin software tesla get thunder remember beat unironic utah classic second time chorus got going could stopped pulled destination trust happy friend still thing show including tesla arcade youtube integration oh god yule log real heat made take one last time around block illusion would remained impenetrable went bump realized tesla special take bump pothole little prius sure hell need silicon valley goon controlling car need emacs selfrespecting hacker would made upgrade starting steering wheel know must thinking keyboard knockoff right able get hand real model unicomp come pretty close securely attaching keyboard steering wheel needed gain control car console idea o running hack could find online disabling annoying beeping whenever reverse many hour experimentation later able gain bios access prius console solution mindblowing could fill blog post get course new base operating system chose arch linux pacman running tempted install xorg delightful emacs x window manager knowing would give access gui version apps need reach feature parity tesla realised nonsense three reason using gui would cheating unlike native emacs extension would never able fully hack gui apps need runtime definitely want fiddle computer mouse driving x window pure terminal forever installed emacs prepared write prius driver arch linux arduous process spare trouble working function basic priusturnwheelleft priusturnwheelright priusaccelerate etc started think ideal keyboard shortcut knew cb cf feel intuitive turning steering wheel installed evil mode embraced using hjkl acceleration reverse left right cg hit brake obviously anything ever bug always tinker elisp config without even turning car simply turn familiar cx ce binding evalbuffer suddenly metaprogramming car way school seems dangerous rest assured ever drive navigator passenger seat pairprogramming cool feature friend could homebrew vehicle ever come close glorious feature bloat tesla map support googlemapsel seems compelling hate rely closedsource software maybe find time fork osmmode bring date openstreetmap support karaoke surprisingly also already implemented karaoketime game need nethackel keep entertained thousand hour road yule log emacsfireplace colorful ascii art make even better satisfied gnu thing possible hope writeup might inspire new emacs road warrior like see never wanted selfdriving along wanted smarter tool driving car note many part post true least plausible actually install emacs car neither note seeking gainful employment hour took write blog post think lunacy deserves rewarded venmo nathyafterdark subscribe patreon
89,Lobsters,emacs,Emacs editor,On-the-fly Linear Congruential Generator Using Emacs Calc,https://nullprogram.com/blog/2019/11/19/,onthefly linear congruential generator using emacs calc,ex encourage others c c go rust slower need also lack reliable semantics behavior implementation best noncryptographic prngs today need creative seeding crafting prng linear congruential generator prime emacs calc noted process used implement rsa minimal standard lcg primality test bigcrush appending permutation permuted congruential generator datadependent shift prospecting hash function bonus adapting language bigint,november regularly make throwaway project surprising amount programming tmp emacs lisp equivalent scratch buffer place make mess mess usually get cleaned becomes problem lot established project ex start volatile storage graduate permanent storage concept proven throughout whole career sort throwaway experimentation important part personal growth try encourage others even idea trying pan usually learn something new occasionally translates article also enjoy small programming challenge one abused tool mental toolbox monte carlo method readily apply solve toy problem even beyond random number generator frequently useful tool find reaching one time nearly every programming language come pseudorandom number generation function library unfortunately language standard prng usually poor choice c c c go rust probably mediocre quality slower need also lack reliable semantics behavior implementation missing property want long fan byoprng bring pseudorandom number generator embed generator desired property directly program best noncryptographic prngs today tiny exceptionally friendly embedding though depending might need creative seeding crafting prng occasion established embeddable prng reach yet commit memory maybe want use totally unique prng particular project case make one bit knowhow difficult probably easiest decent prng code scratch venerable linear congruential generator lcg simple recurrence relation x x c trivial remember know detail need choose appropriate value c done correctly fullperiod generator generator visit permutation number seed value x chooses starting position looping permutation natural obvious choice power two matching range operand modulo operation free natural side effect computer architecture choosing c also difficult must coprime since power two odd number valid even theory choosing small value like faster since compiler need embed large integer code difference show microbenchmarks tried want cool unique generator choose large random integer tricky value getting right linchpin whole lcg must coprime ie even fullperiod generator must divisible four better result divisible good choice prime number satisfies property operand integer larger going generate prime number prime emacs calc emacs calc solve problem noted featureful arbitrary precision random number generation primality testing everything need choose fact nearly identical process used implement rsa example going generate lcg c programming language easy use whatever width like mostly whatever language like wanted minimal standard lcg still work start opening calc mx calc push stack push stack press computing pushing stack press k r generate random number range press r switch hexadecimal display press k n find next prime following random value repeat step get number end press k p time avoid false positive left stack want random value c follow similar process heck make prime reason using hexadecimal step looking step number satisfy important property calc try factor random integer instead us primality test probabilistic test requires random number false positive false negative false positive mitigated repeating test multiple time hence step trying right got implementation c void static return however still little better outputting entire state great result instead better create truncated lcg return portion significant bit void static return quite pas bigcrush form result pretty reasonable purpose still better without needing remember much appending permutation permuted congruential generator pcg really truncated lcg permutation applied output like lcgs arbitrarily many variation official implementation datadependent shift never remember detail fortunately couple simple easy remember transformation sufficient basically anything used prospecting hash function love xorshifts let add one void static r r r return r big improvement still fails one bigcrush test say xorshift enough use xorshiftmultiply generated prime multiply odd integer valid permutation void static r r r r return r pass bigcrush reliably build new one entirely scratch using calc time need bonus adapting language sometimes straightforward adapt technique language example javascript limited support integer operation enough poor lcg integer operation though bigint thing make great lcg easy build function lcg seed let bigint seed return function return number java unsigned integer could build pcg java easy first remember java two complement semantics including wrap around two complement care unsigned signed multiplication addition subtraction result identical second oftforgotten operator unsigned right shift two tip long int int r int r r r return r addition calc step list may need know finer detail target language
90,Lobsters,emacs,Emacs editor,Building personal search infrastructure for your knowledge and code,https://beepb00p.xyz/pkm-search.html,building personal search infrastructure knowledge code,telegram message vkontakte message part part ii later global keybinding gif,mentioned find switch browser wait till website load cope crappy search implementation distracting frustrating often nt even remember whether exactly discussing something telegram facebook reddit single point entry information unified search stuff extremely helpful instant messaging using plaintext mirror chat history always available plaintext computer telegram message nt bother orgmode file would huge nt much structure anyway vkontakte message sadly export tool stopped working api restriction using vk much anymore either least got historic message service comment write leave annotation mirroring orgmode write detail part part ii give source data search engine anything ever tweeted bookmarked pinboard highlighted instapaper kobo saved upvoted reddit etc etc file either nonorg somewhat heavy structured orgmode search addition many old file preorgmode era using gitit zim search using emacs ripgrep read later mysearch run ripgrep mysearchtargets variable contains path note chat log orger output etc interesting bit mysearch myoneoffhelmfollowmode call somewhat horrible hack automatically enables helmfollow mode nt press cc cf every time invoke helm finally make sure invoke search instance using global keybinding demo gif using search greg egan knowledge repository see result getting kobo highlight koboorg reading list readorg even video youtubeorg
94,Lobsters,emacs,Emacs editor,State of CIDER Survey (2019),http://metaredux.com/posts/2019/11/02/state-of-cider.html,state cider survey,state cider survey opencollective github sponsor,one hardest thing project author figure whether perspective project aligned perspective project user henry ford supposedly knew better customer needed true say rather special case often guessing people need would find useful issue tool using time time guess right often guess wrong couple notable example immediately come mind always assumed people care much minimum supported emacs version pretty easy upgrade emacs dropping support older emacsen quite aggressively last year however got feedback clojurists together funding round people working corporate environment really suffering upgrade software machine enlightened always assumed people care much changing keybindings command quite lot early day cider know similarly introduced cidernrepl many year ago thought people set manually big deal grossly underestimated complex task many people fun trivia automating setup cider one celebrated change ever point foolishly believed everyone read cider manual starting use true always loved concept survey like state clojure insight bring meant something similar cider quite probably least year one reason another however task kept sitting backlog please allow introduce first ever state cider survey far perfect start really like connect people actually using cider want understand environment working want learn background using cider want learn like hate long story short want align thing working need also want get feeling many people would consider supporting project financially road hoping inspire company individual pitch opencollective github sponsor campaign dreamer subject economics os development something plan discus length dedicated article survey open end next week looking forward response
95,Lobsters,emacs,Emacs editor,EmacsConf 2019 live online streaming now,https://live.emacsconf.org/,emacsconf live online streaming,,note nt see webchat widget make sure blocking iframe element alternatively visit chat directly clicking
96,Lobsters,emacs,Emacs editor,Hard CIDER: Understanding the Jack-in Process,http://metaredux.com/posts/2019/11/02/hard-cider-understanding-the-jack-in-process.html,hard cider understanding jackin process,basic autoinjecting dependency jackingin without project customizing jackin command behaviour perproject basis epilogue clojurists together,many mystery life perplexing eternal question exactly happens ciderjackin today time unravel mystery basic heart ciderjackin something super simple executes shell command eg lein repl start nrepl server wait server come life connects cider really simple explain detail probably like cider shell run command like lein repl headless cider wait nrepl server start cider figure parsing output command waiting line like nrepl server started port host localhost nrepl appear cider extract port nrepl preceding message connects running nrepl server basically combination autostarting nrepl server ciderconnect afterwards simple shell command executed ciderjackin leiningen project look like nrepl starting server via usrlocalbinlein updatein dependency conj nrepl updatein plugins conj cidercidernrepl repl headless host localhost time explain another confusing concept namely autoinjection clojure dependency autoinjecting dependency cider core functionality requires nothing nrepl server many advanced feature depend presence additional nrepl middleware eg cidernrepl early version cider cider user add dependency painful errorprone process fortunately today handled automagically using ciderjackin project us lein boot toolsdeps depsedn cider automatically inject necessary nrepl dependency eg cidernrepl piggieback start server injection process extremely simple cider simply pass extra dependency nrepl configuration build tool command run start nrepl server look toolsdeps clojure sdeps deps nrepl mvnversion cidercidernrepl mvnversion nreplcmdline middleware cidernreplcidermiddleware tip want ciderjackin inject dependency automatically set ciderinjectdependenciesatjackin nil note setup dependency eg adding project cider older reason want something like option exists normally ciderjackin would inject cidernrepl ciderjackincljs would add piggieback well injection however mechanism configurable easily add library cider extension eg sayid cljrefactor would use mechanism autoinject dependency cider would also inject recent version nrepl support simple trick override version nrepl bundled build tool gain access newest nrepl feature generally one aspect cider inner working endusers rarely think cider also inject clojure dependency project useful example project default older version clojure supported cider middleware set ciderjackinautoinjectclojure appropriately enable nuance autoinjection eg leiningen inject dependency plugins outside scope article time little quiz guess cider currently support dependency autoinjection gradle project yeah totally right unfortunately way pas extra dependency gradle via commandline interface jackingin without project try run ciderjackin outside project directory cider warn ask confirm whether really want often accident decide proceed cider invoke command configured ciderjackindefault prior cider defaulted lein subsequently switched clj clojure basic startup command another useless tip set ciderallowjackinwithoutproject like disable warning displayed jackingin outside project never run cider outside project might different style probably noticed cider infinitely configurable customizing jackin command behaviour made favourite part exploration cider jackin tweak shell command run many reason want often like include extra profile eg famous fig profile using toolsdeps imagine people would creative tweak well let start simplest possible option idea oneoff customizations use cu mx ciderjackin cu cc cx j j specify exact command ciderjackin would run option useful want specify something like lein depsedn profile alternatively cu cu mx ciderjackin variation previous command command first prompt project want launch ciderjackin pretty handy directory currently option also useful project contains combination projectclj buildboot depsedn want launch repl one keep mind example use ciderjackin behaviour consistent ciderjackin command customize command line cider us ciderjackin modifying following string option ciderleinglobaloptions ciderbootglobaloptions ciderclojurecliglobaloptions cidergradleglobaloptions passed command directly first position eg lein enables offline mode ciderleinparameters ciderbootparameters ciderclojurecliparameters cidergradleparameters usually task name parameter eg dev launching boot dev task instead standard repl wait forget variable configured perproject basis probably figured using toolsdeps window bit painful fortunately cider help use ciderjackin toolsdeps window set ciderclojureclicommand powershell happens default window clojure executable found using powershell encode clojure launch command passing powershell avoids shellescaping issue might wondering cider us clojure instead clj right pretty simple actually clj simply wrap clojure terminalfriendly functionality rlwrap explodes actual terminal another great mystery resolved epilogue phew lot information hope got much better idea jackin process working help use cider effectively road lot said jackin feel covered everything essential also bit lazy feel like writing anymore today episode brought clojurists together awesome keep hacking
97,Lobsters,emacs,Emacs editor,"IRC and Emacs all the things (messengers like Slack, Skype, etc)",https://200ok.ch/posts/2019-11-01_irc_and_emacs_all_the_things.html,irc emacs thing messenger like slack skype etc,post post lifeprotip reddit strongly dislike let improve status quo bitlbee libpurple slack skype built erc preconfigured docker container quickstart legacy slack token organice matrix http freelibre open source software page,post post complaining bad compared irc continue using irc instead pragmatic person battle lost said tool interesting capability irc lack like notification calling people yes know xmpp matrix like said post idiologists saying better way pragmatist use proprietary tool one reason another post post discrepancy work computer based either text processing text consumption messenger tend fall category everything include feature like file sharing call however people tend also type lot text messenger claim general text editor disposal inputmanage load text like carpenter hammer toolbox get job done going painful redundant shitty job look lifeprotip reddit literally zillion people figuring simplest shortcut learn cdel deletes word start praying heaven could missed something basic article upvotes comment fun comment like nt understand spent last two year working editor without telling cry toilet well speaking deleting word instead character much discover feel pain day basic notion supposed enter text day enter textarea slack skype web mailer forth personally strongly dislike typing text textareas maybe old grumpy also typing text lot end day typing text job reasonable want efficient let improve status quo let something said many messenger fine job stuff nt shine manipulating text let solve particular issue happily use messenger stuff dreaming longer time turn easy solution let draw diagram fantastic program called bitlbee irc chat gateway another fantastic library called libpurple intended core im program support load messenger built plugins others like slack skype bridging bitlbee libpurple already built bitlbee mean actually use favorite irc client access messenger favorite irc client built emacs called erc irc client run within emacs ideal proposition emacs pretty ideal manipulating text course good option chose whatever favorite long irc client better input method typical session might look like right see emacs two open buffer connected bitlbeeirc query phil cofounder one connected slack skype left see message typed emacs right actually appear native client course also work way around group chat channel forth screenshot glimpse let get setting description might look like lot work actually standing shoulder giant got work within without clue worked writing blog post documenting take way longer using tutorial set everything within minute let start bitlbee libpurple setup install use preconfigured docker container tutorial us latter option let create folder subfolders bitlbeelibpurple configuration mkdir srcbitlbee mkdir config etc chown config etc let create dockercomposeyml file within folder start bitlbeelibpurple messenger plugins version service bitlbee image port volume type bind source config target varlibbitlbee type bind source etc target etcbitlbee start container log using favorite irc client dockercompose left set account messenger want proxy irc quickstart documentation bitlbee show set one popular messenger slack create legacy slack token connect bitlbee using favorite irc client dropped bitlbee channel bitlbee configurationadministration register account setting saved account oper register asafepassword set slack account account add slack username yourteam slackcom yourtoken account add channel want linked chat add slack general save configuration save nb also using erc save asafepassword password adding line authinfogpg machine localhost login user password asafepassword set use regular irc command like query dm person join channelname join channel setting persisted mounted volume next connect bitlbee via irc logged bitlbee automatically connect slack apps messenger likely depends one use using personally still running background pc well phone watch thing well notification pc call file sharing everything related text using new setup nb running apps next setup sideby work well docker container emacs open take way le memory cpu running looking irc channel join check organice freenode bridged organice matrix new community chat free open source implementation org mode without dependency emacs built mobile desktop browser http enjoy happy text processing liked post want say thanks please head freelibre open source software page like one give star github gitlab
98,Lobsters,emacs,Emacs editor,"Watching and Participating in EmacsConf 2019 (Saturday, November 2)",https://lists.gnu.org/archive/html/emacsconf-discuss/2019-11/msg00000.html,watching participating emacsconf saturday november,date next thread next date index thread index ann watching participating emacsconf saturday november http http http liveemacsconforg http chatemacsconforg http http listsgnuorgmailmanlistinfoemacsconfdiscuss http statusemacsconforg ann watching participating emacsconf saturday november,date prev date next thread prev thread next date index thread index ann watching participating emacsconf saturday november amin bandali subject ann watching participating emacsconf saturday november date fri nov useragent gnu gnulinux emacsconf online conference saturday november est utc cet hello fellow emacsians le hour emacsconf excited ever looking forward day full emacsy awesomeness need know watching participating conference detail also available wiki http sure check schedule day http looking forward seeing around emacsconf tomorrow watch see http liveemacsconforg livestream feed watch browser well instruction watching medium player support streaming participate irc specifically freenode network primary realtime communication channel join using favourite irc client webchat http chatemacsconforg official emacsconf irc channel emacsconf main irc channel emacsconf emacsconfquestions dedicated audience question moderated main channel keep traffic lower organizer speaker could easily get question without sift unrelated message emacsconfaccessible discussion around accessibility november please use channel post transcription descriptive text happening talk emacsconforg dedicated channel emacsconf organizer speaker intended internal lowtraffic space general discussion around conference please use emacsconf instead unless urgent matter requiring immediate attention organizer like invite keep code conduct mind participating conference help make around great experience everyone involved lastly sure subscribe mailing list emacsconfdiscuss general discussion announcement conference favourite irc client irc code conduct http emacsconfdiscuss http listsgnuorgmailmanlistinfoemacsconfdiscuss infrastructure status set status page http statusemacsconforg post latest update disruption various part infrastructure notice problem experience disruption acknowledged please join emacsconforg irc channel send message description text data ann watching participating emacsconf saturday november amin bandali
99,Lobsters,emacs,Emacs editor,AUCTeX 12.2 released,https://lists.gnu.org/archive/html/info-auctex/2019-10/msg00001.html,auctex released,date prev thread prev date index thread index infoauctex auctex released http elpagnuorgpackagesauctexhtml http ftpgnuorggnuauctex http wwwgnuorgsoftwareauctex http wwwctanorgpkgpreview http savannahnongnuorgprojectsdvipng infoauctex auctex released,date prev date next thread prev thread next date index thread index infoauctex auctex released mose subject infoauctex auctex released date wed oct release note auctex previewlatex auctex provides far widespread sophisticated environment editing latex tex context texinfo document emacs combined package like reftex flyspell others pretty much without peer comprehensive authoring solution large variety operating system platform tex distribution support documentdependent completion syntax highlighting easily accessible menu jumping error location source file number editing shortcut intelligent indentation filling text entry wysiwyg preview graphical element like math formula right emacs source buffer virtue previewlatex component one part previewlatex subsystem central previewsty file independently useful number application available unbundled form ctan auctex need volunteer particular nonprogramming task documentation writing tutorial translation reference material sleuth work testing new feature fixed bug release auctex reflects change release filecontents environment take optional argument used anywhere document macro ref labelformat moved variorefsty latex kernel amsmath new macro overunderset new method implemented previewlatex adjust foreground color generated image emacs latex command produce pdf traditional method became invalid change introduced ghostscript unfortunately new method nt work due bug ghostscript valid ghostscript also fallback method g user display plain black white image successful function previewlatex user encouraged set new user option previewpdfcoloradjustmethod choose appropriate option among three new traditional fallback method auctex support flymake package emacs newer enable call mx flymakemode ret add emacs file addhook latexmodehook flymakemode way option texrecordbuffer used corrected used opposite way document say erase customization customized option since act reverse expectation former customize option japanesetexcommandlist removed use japanesetexenginedefault really necessary customize texcommandlist directly task option used carry required support standard latex without etex extension limited nt work raw tex code put command line invoke latex command also fails region compilation cc cr document nonascii file name addition longer work previewlatex consider incompatibility permissible etex extension enabled standard latex default long ago latex variant xelatex lualatex affected key bind texinfo mode improved typing selfinserts without pointless side effect texinfo mode addition option texelectricescape effective texinfo mode enabled typing invoke texelectricmacro offering completion similar style tex mode auctex fontification support biblatex package improved updated macro provided package version qualified list least mandatory argument fontified support column specifier w w provided array package added arrayel correct counting column work align parameter enclosed brace eg w l short version wl supported entry pdf tool added texviewprogramlistbuiltin window macos viewer configured operating system entry like init file setq texviewprogramselection outputpdf pdf tool several bug fixed many minor feature added requirement required use least gnu emacs previewlatex subsystem requires image support also need working latex installation ghostscript dvipng version later fast dvi converter used speed conversion availability easiest way getting auctex installing gnu elpa see url http elpagnuorgpackagesauctexhtml information download option available url http ftpgnuorggnuauctex release time provide source tarball also use version emacs already include auctex software package management system operating system provides latest release separate directory release contains stuff tarball changelog printable manual reference sheet download area mirrored directory supportauctex ctan auctex licensed gnu general public license version find information web site auctex url http wwwgnuorgsoftwareauctex including mailing list address future development additional information auctex proceeding gnu project longterm intent merging emacs reason new contributor need assign copyright contribution fsf usual procedure emacs contributor hold past contributor principal author maintainer already done would require diligent diplomatic volunteer find ask rest current auctex manager arash esbati giordano tassilo horn everybody welcome contribute project reporting bug suggesting improvement effective way helping auctex development remains volunteering task following people contributed release series alphabetical order ivan andrus ralf angeli masayuki ataka mohammad hossein bateni fabrice ben hamouda thomas baumann vincent berend de boer alex branham uwe brauer ken brown joshua buhl burnol patrice duma arash esbati werner fink miguel frasson peter galbraith giordano patrick gundlach jobst hoffmann tassilo horn yvon hevel orlando iovino mads jensen arne david kastrup ikumi keita philip kime oleh krehel joost kremers frank janã ke larsson matthew leach antoine levitt leo liu vladimir lomov stefan monnier dan nicolaescu piet van oostrum nicolas richard augusto ritter stoffel florent rougon santiago saavedra davide g salvetti sonderfeld holger sparr mike sperber reiner steib christian schlauer shiro takeda mark trettin please accept apology forgot somebody footnote url http wwwctanorgpkgpreview dvipng available via project page url http savannahnongnuorgprojectsdvipng ctan giordano behalf auctex team prev thread current thread next thread infoauctex auctex released mose
100,Lobsters,emacs,Emacs editor,org analyzer: interactive visualizations of time tracking data for org mode,https://github.com/rksm/clj-org-analyzer,org analyzer interactive visualization time tracking data org mode,organalyzer new feature http youtubebllmtzueulu usage standalone latest jar file emacs commandline hacking clojure http nrepl cider http license,organalyzer organalyzer creates interactive visualization orgmode timetracking data orgmode allows add startend timestamps orgmode item via orgclockin capture time spend working particular thing unfortunately reporting feature built orgmode rather limited tool remedy providing visual interactive presentation time tracking data word organalyzer convert something like current project org clockin visualization ui improvement tag filter day viz logbook clock sun sun clock sun sun clock sun sun end something like new feature see short walkthrough new http youtubebllmtzueulu usage organalyzer run platform run java need installed standalone download latest jar file run double click command line see open new browser window close server stop second emacs organalyzer make sure melpa packagearchives require package addtolist packagearchives melpa http melpaorgpackages run packageinstall organalyzer afterwards start tool via mx organalyzerstart commandline download latest jar described start java jar following command line option available per java jar help usage java jar opt orgfileordir interactive visualization timetracking data org clock command start http server serf web page visualizes time data found org file org file specified individually passing directory recursive search org file done nothing specified default current directory recursively searching org file opts host hostname set hostname default localhost p port portnumber set port default dontopen nt automatically open web browser window info see http githubcomrksmcljsorganalyzer hacking play around codebase need clojure installed run app source git clone http githubcomrksmcljorganalyzer make httpserver visit http run serverside test via make test work interactively would recommend editor ide us nrepl personally use emacs cider start nrepl server make nrepl also start httpserver connect clojure session clojurescript session nt use nrepl enabled editor still run figwheel repl via make figwheel whe running nrepl figwheel get additional page ui experiment test http license
101,Lobsters,emacs,Emacs editor,"Introduction to ""organice"" - Using Org mode from a smartphone or browser",https://www.youtube.com/watch?v=aQKc0hcFXCk,introduction organice using org mode smartphone browser,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature introduction organice using org mode browser smartphone youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature introduction organice using org mode browser smartphone youtube
102,Lobsters,emacs,Emacs editor,Orger: plaintext reflection of your digital self,https://beepb00p.xyz/orger.html,orger plaintext reflection digital self,repository,using ten different orger module moved repository describe featured view generating give head read code see bunch import like myhypothesis import find easier move data parsing separate package deal parsing converting input data typically json make everything le messy separate data rendering let reuse abstract model tool also let access data python code make way easier use interact data still private interested something present github repo please nt shy open issue prioritize hopefully code readable enough give inspiration find something confusing write module want contribute please feel free open issuepr
104,Lobsters,emacs,Emacs editor,EmacsConf 2019 - Schedule,https://emacsconf.org/2019/schedule,emacsconf schedule,http zurich boston opening remark userrelated gnu emacs completely blind managerdev us emacs every day managing life orgmode tool lightning talk development magit deep dive emacs go script language continuously checking quality package lightning talk interactive remote debugging development tramp mode future gnu emacs software freedom practice gnu quirk emacs editor next forty year closing remark,emacsconf november torontoedt time equivalently utc equivalently zurichcet instruction watchparticipate posted http closer day virtual conference satellite event zurich boston please note time schedule rough approximation talk might rearranged dropped depending speaker availability aiming talk presented live may presented prerecorded reduce technical risk speaker try available irc backchannel emacsconf ircfreenodenet answer question enough time day lightning talk available play remaining prerecorded lightning talk conference end time permit made available rest talk following daysweeks event without ado exciting lineup talk emacsconf opening remark edt utc cet welcome conference amin bandali emacs community update sacha chua emacs development update john wiegley userrelated edt utc cet gnu emacs edt utc cet sachin patil used gnu emacs year python development equal amount time like share experience great gnu software around year like go use emacs almost task like note taking agenda latex revealjs presentation ide irc talk demonstrate emacs configured sort thing without dedicated application every specific task also talk maintain emacs configuration using orgmode literate programming completely blind managerdev us emacs every day edt utc cet parham doustdar use emacs every day believe massive boost productivity like talk hoping cover emacspeak using elisp make package accessible writing accessible interface thing accessible managing life orgmode tool edt utc cet marcin swieczkowski tried various system managing time may found complicated inflexible much work orgmode orgagenda particular lot feature overwhelming get started however using subset feature still flexible simple powerful talk provide tool idea creating simple system catered need full demonstration use tool going orgmode orgagenda well configuration make easier use cover thirdparty package tool orgrecur written author orgsuperagenda git lightning talk edt utc cet use org mode away desktop zen monk alain lafon orgmode foiltex unlikely useful combination teaching tom faulkenberry record executable note eev play back eduardo ochs ai help play game life andrew j dougherty notmuch new david bremner browsing twitchtv emacs aaron jacob ledgermode miguel quiliro state retro gaming emacs vasilij wasamasa schneidermann pointer another presentation playing emacs like instrument zen monk alain lafon pointer another presentation play control music emacs damien cassou development edt utc cet magit deep dive edt utc cet jonathan chu abstract talk would focusing magit useful lesserknown feature well dig internals magit gain better understanding insight git ultimately concretely would start helpful configuration option formatting magitstatusmargin go magit command magitbranchspinoff magitcherryharvest talking use work going underthehood long list excellent magit porcelain command choose still accommodating experience level emacs magit emacs go script language edt utc cet howard abrams recently reddit poster asked others default scripting language perl ruby often sparred position shell always comfortable old shoe get thing done least year ago realize since always emacs nt write transient helper script lisp nt take long realize nt jump idea earlier nt scripty however lisp moldable nt take much become scripting language dream talking fancy new function also talk required paradigm shift invisibly piping text executable executable visibly transforming buffer call multiple function let change workflow script argument completion function call completing read helmivy daresay workflow much better continuously checking quality package edt utc cet damien cassou emacs lisp developer emacs package talk guide configuring flycheck packagelint checkdoc ert others confident package top quality make stay way talk also show setup github gitlab commit checked getting merged lightning talk edt utc cet automate workflow game developer restclient orgmode api documentation testing mackenzie bligh emacs became awesome java editing environment torstein krause johansen nt wait write yas snippet tony aldon vscode better emacs zaiste porting orgshiftupdown separate module metrowind packaging emacs package debian david bremner equake mode ben slade object oriented spreadsheet example application david otoole navigel facilitate creation tabulatedlist based uis damien cassou interactive remote debugging development tramp mode edt utc cet matt ray emacs tramp mode allows remotely editing file using emacs shell mode remote system session walk basic using tramp mode free software tool vagrant chef inspec interactive ruby debugging shell pry discus different emacs technique accessing remote system editing code debugging system securely configure live demonstration highlighting various emacs mode technique used future edt utc cet gnu emacs software freedom practice edt utc cet greg farough newcomer favorite editor often amazed ease customize environment suit need whether consider programmer nt long amazement give way strong feeling empowerment upon realizing take keystroke begin studying improving part emacs source code rather something unique emacs part working lispbased editor gnu emacs ability empower user much gnu emacs emacs flagship program gnu project way one successful communally developed free software project also perhaps one closest original vision gnu system full computing environment centered around user freedom empowerment emacs get today technical excellence alone rather success emacs inseparable free software great proliferation communally shared package mode extension quirk emacs instead vision average computing experience could world chief focus respect user freedom lover emacs work towards future bring joy computing back talk hope explore ethical value led emacs current position point way help wild messy enduring egalitarian spirit emacs editor next forty year edt utc cet perry e metzger emacs survived almost year another year people still using argue realistic possibility ensure people still find productive fun tool emacs require modernization talk briefly discus emacs survived long many editor vanished history might deliberately seek extend expand emacs productivity advantage spend bulk talk discussing improvement think assure emacs extraordinary utility future include important uservisible improvement example high quality html rendering necessary infrastructure change example incremental transition better implementation language better extension language also discus strategy make sure work towards improvement feasible incremental nt burn developer community closing remark edt utc cet
105,Lobsters,emacs,Emacs editor,CIDER 0.23 (“Lima”),http://metaredux.com/posts/2019/10/08/cider-0-23-lima.html,cider lima,http ciderreadthedocsio http docscidermx cidernrepl section,cider released month ago happy announce release cider lima unlike cider lima pretty small release lot pressure ship time clojuresouth time complete small ticket originally planned go new release basically address plus bug reported cider know really good small release quite simple need write long blog post much term new feature highlight probably notable change cider infers automatically figwheel build present available option autocompletion need select build another small change configure position evaluation result source buffer always displayed end current line display right expression evaluated magic bit emacs configuration make happen setq ciderresultoverlayposition atpoint also added possibility disable new enhanced clojurescript code completion user reported causing issue hard time reproducing identifying want go back basic clojurescript completion earlier version cider use following setq ciderenhancedcljscompletionp nil time slightly bigger update translating file path small feature might useful people developing using docker instance suppose app running docker container source directory mounted navigation path get nrepl relative source docker container rather correct path host machine wish translate file path running instance may use ciderpathtranslations defcustom add translation mapping easily setting following typically dirlocalsel perproject basis nil ciderpathtranslations root usersfoo src usersfooprojects entry interpreted directory entry trailing slash optional navigation definition attempt translate location exist navigate rather report file exist example directory mounted source src translation would map location back user computer navigation definition would work interesting update documentation front well replaced page old documentation site http ciderreadthedocsio redirects http docscidermx mark end run legacy documentation portal hopefully going affect positively google page rank new one also started work cidernrepl section documentation portal still super basic also best documentation cidernrepl ever also fixed bunch bug orchard cidernrepl shipped new version piggieback blow absence clojurescript cool stuff lazy write detail think safe say cider nice step path towards better stability everyone update right away find complete list change cider quite pleased release try couple small release end year usual like thank everyone contributed developed lima awesome people clojurists together supporting project awesome today next release cheer
106,Lobsters,emacs,Emacs editor,Show/hide Emacs dired details in style,http://xenodium.com/showhide-emacs-dired-details-in-style/,showhide emacs dired detail style,dired diredhidedetailsmode steve purcell diredfl daniel martín pointed diredgitinfo,emacs dired powerful directory browsereditor default show lot handy file directory detail typically prefer hiding file directory detail need builtin diredhidedetailsmode make easy key toggle coupled steve purcell diredfl coloring strike great user experience short snippet also showhide dired detail style usepackage dired hook diredmode diredhidedetailsmode config colourful column usepackage diredfl ensure config diredflglobalmode update thanks daniel martín pointed diredgitinfo package add git log dired file directory detail binding diredgitinfomode nice complement diredhidedetailsmode binding usepackage diredgitinfo ensure bind map diredmodemap diredgitinfomode
107,Lobsters,emacs,Emacs editor,Hard CIDER: Project-specific Configuration,http://metaredux.com/posts/2019/10/05/hard-cider-project-specific-configuration.html,hard cider projectspecific configuration,projectile bit elisp magic official emacs documentation dirlocals clojurists together,pretty common question cider handle projectspecific configuration many reason wanting something like probably first come mind running leiningen specific profile adding fig jackin command using clojure cli aka toolsdeps cider special provision projectspecific configuration something well supported emacs unfortunately functionality emacs slight weird name dirlocal variable probably thing people would start googling bright side emacs functionality much generic dealing projectspecific configuration simply put need create root project file named dirlocalsel look something like clojurescriptmode ciderclojurecliglobaloptions fig eval ciderregistercljsrepltype supercljs foo bar ciderdefaultcljsrepl supercljs structure file mapping major mode variable need set cider major mode time probably setting variable clojuremode clojurescriptmode note clojurescriptmode derives clojuremode whatever applies clojuremode apply clojurescriptmode well also evaluate code using eval variable name variable value mapping something rarely need practice normally simply create dirlocalsel manually however feel overwhelmed syntax simply mx adddirlocalvariable able select majormode variable value interactively one small problem approach resulting dirlocalel created current directory may problem depending trying user projectile may leverage projectaware projectileeditdirlocals command instead one slightly complex dirlocalsel emacslispmode bugreferenceurlformat http githubcomclojureemacsciderissues bugreferencebugregexp digit indenttabsmode nil fillcolumn sentenceenddoublespace emacslispdocstringfillcolumn checkdocsymbolwords toplevel majormode macroexpandall printlevel printlength checkdocpackagekeywordsflag checkdocargumentsinorderflag checkdocverbcheckexperimentalflag elisplintindentspecs iflet whenlet let defun nrepldbindresponse cidersavemarker ciderpropertizeregion cidermaprepls cider jackin cider makeresultoverlay need better solution indenting clflet binding insertlabel defun clflet insertalignlabel defun clflet insertrect defun clflet cldefun withparsedtrampfilename threadfirst threadlast manage guess cider dirlocalsel ensures people hacking elisp codebase going using common code style setting everything scoped emacslispmode clojurecentric example let take look cidernrepl dirlocalsel clojuremode clojureindentstyle alwaysalign indenttabsmode nil fillcolumn point ensure everyone working clojure codebase using emacs would sharing code style setting often wild see dirlocal entry nil major mode odd looking notation simply mean configuration specified applied every buffer regardless major mode use approach sparingly rarely good reason another thing keep mind multiple dirlocalsel file project overall effect cumulative innermost file taking precedence file directory beneath never needed practice imagine useful people multiple project mono repo people apply different convention real code test might wondering change dirlocalsel get reflected emacs buffer affected answer question buffer get created change something dirlocalsel normally recreate related buffer hacker way apply bit elisp magic cider numerous configuration variable easily customized per project basis using dirlocals dedicate couple follow article specific customizations like tweaking ciderjackin clojurescript repl init form aspect dirlocals beyond scope today article curious gory detail check official emacs documentation dirlocals today episode brought clojurists together awesome keep hacking
108,Lobsters,emacs,Emacs editor,A combination of Hasklig and IBM Plex Mono font,https://github.com/huytd/haskplex-font,combination hasklig ibm plex mono font,haskplex hasklig ibm plex mono hasklig ibm plex mono haskplex installation haskplex nerd disclaimer hasklig ibm plex mono,haskplex hasklig ibm plex mono repository contains combined version hasklig bold regular style ibm plex mono italic bold italic style font font family renamed haskplex installation brew tap huytdcaskfonts install haskplex font brew cask install fonthaskplex install haskplex nerd font brew cask install fonthaskplexnerd want icon use haskplex nerd font much bigger bundled lot icon disclaimer two font work done team behind hasklig ibm plex mono font
109,Lobsters,emacs,Emacs editor,Announcing the official EmacsConf 2019 Zurich satellite,https://200ok.ch/posts/2019-09-17_announcing_the_official_emacsconf_zurich_satellite.html,announcing official emacsconf zurich satellite,emacsconf emacsconf amin bandali sacha chua meetupcom emacsconfregister gnuorg,save date emacsconf happening november emacsconf conference joy emacs emacs lisp memorizing key sequence happy announce official emacsconf zurich ch satellite satellite physical venue gather watch remote hold live talk whilst enjoying good discussion well food accord discussion organizer original virtual conference amin bandali sacha chua satellite official emacsconf venue zurich satellite free beer guest venue food provided llc whose founder happy emacs user planning main conference finished yet tentative schedule zurich venue cet local time conference start main conference start keynote commence talk zurich satellite watching main conference speaker main conference physically located zurich satellite give talk front live audience talk also streamed online audience cet dinner break live talk zurich satellite slot zurich satellite deviate main track emacsconf great submission main track feature many talk slot zurich satellite feature selection additional live talk end live talk local getting late therefore zurich satellite switch back watching talk main track enjoy emacsconf goodness end conference estimated end conference schedule subject change might slightly change alongside lineup main conference zurich satellite venue maximum capacity people open registration guest right away limit registration people spot reserved potential speaker want come zurich hold talk front live audience kindly ask speaker rsvp october spot zurich satellite open remaining seat guest speaker alike much looking forward emacsconf meeting great people interesting discussion sharing thing emacs lisp please rsvp meetupcom emailing emacsconfregister gnuorg early picture venue
110,Lobsters,emacs,Emacs editor,"Next browser 1.3.2: Hooks, file manager and clipboard ring",https://next.atlas.engineer/article/release-1.3.2.org,next browser hook file manager clipboard ring,nyxt release http nyxtatlasengineerarticlehooksorg http next nyxt emacs vi download,nyxt release happy announce release nyxt version version includes several cool new feature hook let insert code network event command automatic download youtube video autoswitch oldredditcom read hook see updated article http nyxtatlasengineerarticlehooksorg new openfile command allows open file locally machine pastefromring command allows fuzzysearch paste clipboard ring previously copiedpasted text last month started crowdfunding campaign like feel free support u chipping http thanks reading supporting u read full change log next many new exciting feature pipeline could release shortly high quality macos port complete gtk parity improved performance distribution stability mean single app bundle simply download run minibuffer multiselection delete fuzzymatched buffer one go etc session persistence reopen previously open buffer restart status bar webkitgtk native sandboxing perdomain cs eg dark mode smart searching across tab jump heading tab package manager add support pertab proxy tor support add integrated password manager add builtin editor allow nyxt call external editor fill content particular text field switch sqlite text based format allowing bookmark viewed synced easily external tool thanks reading nyxt nyxt keyboardoriented extensible webbrowser designed power user application familiar keybindings emacs vi fully configurable extensible lisp powerful feature productive professional download
111,Lobsters,emacs,Emacs editor,Using GDB in Emacs,https://undo.io/resources/gdb-resource-portal/gdb-watchpoint/using-gdb-emacs/,using gdb emacs,inside ide emacs running gdb multiple window gdb emacs gdb many window emacs optimising gdbemacs setup setting breakpoints gdb gdb emacs nt miss greg next gdb tutorial sign gdbwatchpoint mailing list,video episode gdbwatchpoint finn grimwood senior software engineer undo show us gdb inside emacs editor hi finn episode gdbwatchpoint greg asked show use emacs gdb technique improve debugging experience start starting emacs emacs minibuffer type command mx gdb hit return minibuffer show start gdb le exactly type command line gdb imi l useful thing know imi tell gdb running inside ide hit return command minibuffer start gdb inside emacs emacs running gdb running gdb inside emacs ide environment change suit emacs example toolbar changed show nextprevious updown stack command emacs also adapts toolbar use adding removing option help debugging experience multiple window gdb emacs set breakpoint main run gdb emacs automatically open file breakpoint use toolbar emacs customized navigate around program another useful automatic feature continue program end output shown new emacs window inputoutput really useful emacs separate source code program output interpreter separate window navigate program easily however even emacs show separate window navigating gud menu gdbwindows option gdb many window emacs view gdb process really useful start looking cluttered open window separately tend better way managing window called gdbmanywindows use open minibuffer run gdbmanywindows shown much organised much neater layout look like something expect ide provides local register inputoutput source code gdb command much useful opening window individually optimising gdbemacs setup technique useful still problem setup nt persist multiple emacs session quit go back emacs setup lost really frustrating make gdb many window persist mx customize open emacs config option search gdb find many window option toggle also find interesting option gdb show main display source file containing main routine startup done quit emacs completely restart start gdb useful window reinstated gdb prompt source file local register local breakpoints setting breakpoints gdb one final tip set gdb breakpoint emacs clicking gutter line want set breakpoint red dot appears gdb emacs see video almost exactly gdb setup emacs debugging hope useful see next gdbwatchpoint nt miss greg next gdb tutorial sign gdbwatchpoint mailing list
112,Lobsters,emacs,Emacs editor,Emacs 26.3 released,https://lists.gnu.org/archive/html/emacs-devel/2019-08/msg00577.html,emacs released,date prev date next thread prev thread next date index thread index emacs released http wwwgnuorgsoftwareemacs http http http http http wwwgnuorgprepftphtml http ftpgnuorggnuemacs http shopfsforgproductemacsmanual emacs released,date prev date next thread prev thread next date index thread index emacs released nicolas petton subject emacs released date wed aug hi version emacs text editor available information emacs see http wwwgnuorgsoftwareemacs retrieve source nearest gnu mirror using one following link http http get pgp signature http http tarball signed following gpg key found public pgp key server choose mirror explicitly list http wwwgnuorgprepftphtml mirror may take time update main gnu ftp server http ftpgnuorggnuemacs release mainly maintenance release contains new gpg key gnu elpa package information release see etcnews file view emacs ch n complete list change people made see various changelog file source distribution summary people contributed emacs see etcauthors file online manual updated shortly printed copy emacs manual available purchase free software foundation online store http shopfsforgproductemacsmanual regard nico signatureasc description pgp signature emacs released nicolas petton
113,Lobsters,emacs,Emacs editor,Introducing Literate dotfiles,https://writepermission.com/introducing-literate-dotfiles.html,introducing literate dotfiles,reddit lobster irreal mike hostetler,still minor problem might need resolve one day org mode tangle another file disk need make sure tangling source file overwrite change made output file directly long keep good habit editing source file real issue tried overcome problem writing file cache directory idea compare timestamps output file newer file output modified hand org mode tangling blindly overwrite file since mostly tangle file directly emacs file never written idea fully thought yet comment welcome reddit lobster edit also announced irreal mike hostetler took inspiration use literate dotfiles similar project
114,Lobsters,emacs,Emacs editor,Why Emacs,https://www.birkey.co/2019-08-04-why-emacs.html,emacs,config snapshot,yes acknowledge emacs learning curve however due wrong approach tend take encountering unknown hindsight wish following approach time start getting familiar emacs terminology window buffer frame etc builtin documentation great ch hit control letter h time hit stand info read emacs manual enter select emacs minibuffer hmm might wondering minibuffer let u use approach find press following ch key sequence type minibuffer hit enter voila reading minibuffer official emacs manual application used come close level emacs term self documentation start goal getting something done two example every programmer benefit learning magit orgmode need install magitmode emacs interface git cli orgmode built surprised find make git journey much fun note organization much enjoyable made mistake trying memorize hot key much learning hard truth learning one key time needed base strongly recommend hot key need beginning mx type command emacs execute example would like open visit emacs speak file type mx type file press tab key select findfile completion buffer choose file name within directory example knowing fact every action perform emacs invokes command elisp function powerful realization mean write elisp function emacs whatever like also lookup command using ch f typing name command example ch f type orginsertlink enter read advise starting emacs using configuration including emacs come preconfiguration mentioned earlier emacs great library pick choose fit work style loose great aspect start way configuringcomposing start minimal config put initel file start changingaddingorganizing configs see fit example emacs read initel file located emacsd startup bootstrap elget addtolist loadpath emacsdelgetelget unless require elget nil noerror withcurrentbuffer urlretrievesynchronously http gotochar pointmax evalprintlastsexp initialize available package first packagerefreshcontents package need get started elgetbundle smex progn require smex globalsetkey kbd mx smex snippet set use elget great package manager came rely year never failed also pull package getting started smex make command mx need much intuitive say want try magit type mx elgetinstall magit elget download install starting using git project find way around emacs start journey best organize configcustomization go along use one org file might might like file entirety interested config snapshot
115,Lobsters,emacs,Emacs editor,Two Years With Emacs as a CEO (and now CTO),https://www.fugue.co/blog/2018-08-09-two-years-with-emacs-as-a-cto.html,two year emacs ceo cto,blog post reddit hackernews hackernews worked better suspected would gave using orgmode schedule todo list emacs use spread fugue docsfugueco wrist thanking keyboardio nt done much config except controlling cloud ludwigmode mode monitor last ceoemacs post,two year ago wrote blog post got notice surprised piece going back emacs primary content creation tool first ceo cto brief recap spent career programmer software architect preferred emacs code editor much time reconsidering emacs experiment excited nt sure would work internet post met roughly equal part disdain appreciation ten thousand people read seems touched something interesting challenging funny post reddit hackernews predicted hand shaped like claw lost eyesight use white background pleased report dire consequence resulted fact wrist thanking decision folk worried using emacs would cognitive drain ceo taken fugue idea backyard powerful product great enthusiastic customer find emacs solace thing actually difficult still use white background recently post rediscovered posted hackernews got number request follow post thing gone since report post also focus emacs functional programming highly relevant emacs work product fugue us functional programming automate cloud computing received lot feedback level detail color commentary useful post also fairly verbose spend effort explaining thinking recently moved ceo cto role fugue content post reflects work ceo expect work code emacs going forward yak shaving ahead always ymmv caveat emptor etc worked better suspected would time filled nearly constant communication outside within company communication thing get done world enemy reflection real contemplation difficult complex problem rarest commodity startup ceo time focus without distraction emacs particularly good invested time learn handful command application call noticed well configured emacs get way visually mentally nt change unless want cleaner interface blank screen beautiful typography world constant interruption simplicity allows focus solely thinking rather computer best program provide access computer without demanding attention folk pointed original post much criticism modern computer interface recommendation emacs agree disagree modern interface particularly applicationcentric approach v contentcentric user focused task oriented emacs avoids fallacy part like much brings merit table well emacs portal power computer rabbit hole worth descending idiom path discovering creating definition creativity one sad thing modern computing largely made black box shiny interface provide momentary gratification rather real satisfaction make u consumer rather creatorsmakers technology nt care background understand computer make thing fun satisfying hard think get started often underappreciate effect environment psychology emacs imparts feeling calm freedom rather urgency annoyance excitement latter enemy thought contemplation like thing last get way provide insight take time pay attention emacs meet criterion use emacs every day content creation pleased little think emacs learning curve steeper bicycle similar payoff nt think anymore imparts feeling freedom tool nt elegant tool civilized age happy seem entering another civilized age computing emacs gaining popularity gave using orgmode schedule todo list spent word original post using orgmode schedule gave using orgmode do like coordinate many meeting call every day dozen people ask rest world adapt choice tool time transcribe automate moving thing org primarily mac shop use google calendar etc native mac osios tool good job collaboration also use plain old pen notetaking meeting find laptopkeyboard use meeting rude limiting ability listen think therefore largely abandoned idea emacsorg help schedule organizing life orgmode great lot thing though goto writing document including one word use largely way author nt intend great hope someone say work fugue someday emacs use spread fugue started original post admonition may love emacs probably hate therefore little concerned documentation team fugue picked standard tool thought perhaps influenced appreciation couple year later pretty sure good call leader team time bright programmer two writer hired make fugue documentation le technical background figured case manager imposing wrong tool hear would resolve fugue antiauthoritarian culture people unafraid call bullshit anything anyone including original manager left fugue last year doc team slick integrated cicd toolchain docsfugueco become enthusiastic emacs user learning curve emacs tall even steep climbing real benefit productivity general happiness also reminder liberal art focused people every bit smart capable technology programmer perhaps le prone technology religion tribalism wrist thanking spending hour day computer since mideighties taken toll wrist well back unreservedly recommend tag capisco chair combination emacs ergonomic keyboard made rsi wrist issue go away point nt thought year prior daily pain particularly right wrist issue know distracting worrying folk asked keyboard mouse interested currently using keyboardio though mainly used truly ergonomic keyboard last couple year week using keyboardio absolutely love shaped key cap amazing knowing without looking thumb key seem obvious retrospect particularly emacs control meta constant companion using pinkie highly repetitive task amount mousing much lower using office ides helped lot still need mouse using rather dated looking highly functional ergonomic clearly superior trackball life name specific tool aside main point great keyboard combined mouse avoidance proved effective reducing wear tear body emacs central nt mouse around menu get thing done navigation key right finger pretty convinced hand movement away standard typing position cause lot tendon stress ymmv doctor etc nt done much config predicted spend lot time yak shaving configuration wondered right paid attention left config largely alone paying attention issue made realize much tool use demand attention time emacs easily lowest maintenance piece software use mac o window constantly demanding update far le intrusive adobe suite office update intrusion world occasionally update emacs still work way largely near zero cost operation one choose please sorry disappoint number folk wanted know done keep renewed emacs community output added thing config last two year consider success emacs tool hobby said love hear new thing want share except controlling cloud lot emacs fan fugue ludwigmode ludwig declarative functional dsl automating cloud infrastructure service recently alex schoof took flight evening hour build fuguemode act emacs console fugue cli nt familiar fugue make cloud automation governance tool leverage functional programming give user great experience interacting cloud apis well lot fuguemode cool number reason allows buffer constantly reporting status cloud infrastructure since often modify infrastructure quickly see effect coding fugue organizes cloud workload process fuguemode lot like top cloud workload also allows perform operation like creating new infrastructure deleting stuff nt needed anymore without much typing fuguemode prototype pretty handy use regularly mode monitor added mode integration really workceo function hacking around haskell scheme weekend fun added haskellmode geiser emacs great language repl divide screen different window running different mode including repls shell geiser great scheme done working sicp joy possibly revelation age lot example cargo cult programming install mit scheme geiser got something feel bit like symbolics environment lore brings another topic nt cover post screen management like use single portrait mode monitor writing configuration home primary office programming mixed use like new ultrawide monitor provide fuguers prefer divide screen three column center main editing buffer left side shell fuguemode buffer divided horizontally right either documentation buffer another editing buffer two easily done first using ctlx twice ctlx make window equal width give three equal column subdivide like ctlx horizontal division screenshot look like last ceoemacs post first reason cto fugue also many topic looking forward blogging time planning deeper dive post topic like functional programming type safety infrastructureascode roll awesome new fugue capability post achievable cloud using fugue
116,Lobsters,emacs,Emacs editor,emacscalc,https://dev.xkqr.org/diffusion/UTEC/,emacscalc,emacscalc nt use emacs installation screenshots screenshot emacscalc gui fundamental getting help tip beginner intermediate,emacscalc emacscalc ec script let run emacs builtin calculator calcmode standalone without needing first open emacs would anyone calcmode rock seriously extremely powerful yet incredibly keyboard efficient ironically enough accurately described vim calculator use calculator try spending week calcmode nt use emacs forcing use emacs text editor file manager contact management anything else really calculator emacs software development platform calcmode happens built emacs problem suck could well java emacs install emacs run script get best calculator ever installation install simply copy emacscalcsh script somewhere path give old executable bit want run like command going use emacscalc command line may good idea rename script something short sweet chose ec mirroring name bc dc calculator however strongly recommend creating keyboard shortcut desktop environment launch graphical emacscalc really convenient order launch graphical mode need pas g flag script script default optimised command line use graphical usage specifying additional flag tends issue screenshots moment look rather dreadful well look like default emacs would suppose may change screenshot emacscalc gui fundamental contrast many calculator ec based postfix operation reverse polish notation also known word need calculate numeric value nt press also nt press instead press either still want parenthesis first make easier keep track thing anything like read think ec weird experiment oldschool technology fit actual use far true postfix notation still hardcore follower simply make entering calculation easier efficient citation needed used nt take long want everywhere recommend realcalc app android whenever enter number ec get pushed onto stack enter operator function pop stack many number need push result back onto stack getting help need help ec pressing key h twice bring handy summary press get operator function good cheat sheet memorised get started may good idea go tutorial open pressing h followed want read complete user guide press h followed big document though starting tutorial cheat sheet advisable tip plan collecting various tip trick actually mostly memory also happy receive idea description talk pressing ctrlk mean holding control key gently tapping k key talk typing f g mean first tapping including releasing f key followed holding shift key tapping g key produce upper case g word dash indicate hold key together space indicate key released press beginner intermediate convert binary decimal press pasting number ec interpreted binary number since ec default display number decimal read decimal conversion soon pasted another way enter binary number lead binary number enter stack show convert decimal binary unless specify otherwise number insert interpreted decimal convert decimal binary simply switch ec binary mode typing number stack already show binary representation simply enter decimal number show binary count time terrible counting anything base ten includes time day fortunately ec least two way depending large time span talking want count scale hour use degreearcminutearcsecond format since arcsecond arcminute arcminute degree pretend referring regular minute second degree hour format pm would entered want know long since half past noon day simply enter followed press subtract two want count scale day need use date counting functionality ec somewhat flexible format accepts find easiest something like pm feb day also eligible addition subtraction whatnot advanced
117,Lobsters,emacs,Emacs editor,EmacsConf 2019 Call for Proposals,https://emacsconf.org/2019/cfp,emacsconf call proposal,emacsconf november virtual conference august emacs free software background level experience important date talk format minute minute minute topic idea idea favourite irc client freenode webchat submission submit getting involved planning emacsconfdiscuss,emacsconf november virtual conference call proposal emacsconf talk open august back year much long hiatus calling participation emacsconf conference joy emacs emacs lisp memorizing key sequence year holding emacsconf virtual online conference nt fully decided detail needed infrastructure yet using much free software possible ideally free software priority u see end announcement would like get involved help u welcome speaker background level experience including newcomer submitting proposal give first talk important date cfp open july cfp close august speaker notification september schedule published october emacsconf november talk format following main format emacsconf talk minute lightning talk quickly present cool project concept trick minute standard talk introduce audience new emacs mode concept talk something necessarily shiny new find really neat nonetheless minute extended talk take time going depth andor demo extended talk great way really educating audience something enjoy session format tutorial workshop could arranged well interested kind session let u know try arrange keynote speaker emacsconf introduced future announcement topic idea sure give talk might find neat idea idea page feel free add still sure come irc channel emacsconf ircfreenodenet say hi join chat using favourite irc client freenode webchat great way write strong proposal start exploring program previous year submission ready submit proposal submit page instruction submit talk committed increasing participation speaker belonging group traditionally underrepresented free software conference including woman people colour comfortable sharing demographic information please include submission email proposal judged negatively leave getting involved would like get involved various aspect organizing conference like planning session help setting infrastructure see planning page come say hi u emacsconf ircfreenodenet nt forget subscribe mailing list emacsconfdiscuss discussion announcement emacsconf conference look forward idea submission
118,Lobsters,emacs,Emacs editor,"My Text Editor Journey: Vim, Spacemacs, Atom and Sublime Text",http://thume.ca/2017/03/04/my-text-editor-journey-vim-spacemacs-atom-and-sublime-text/,text editor journey vim spacemacs atom sublime text,text editor journey vim spacemacs atom sublime text reasoning abandoning spacemacs early day textmate sublime text vim taste power easymotion back sublime stint atom vintageous prelude spacemacs first contribution diego brokenness fixing annoying keybinding conflict getting latex support work wrote general mechanism tabbing osx window noticed annoyance racket nim rust known issue lack consistency discoverability navigating multiple file goldenratio subitize zentabs realization sublime text back vengeance magit gitsavvy alfred git repos osx window tabbing plugin set keybindings custom keyboard jane street jane street pull request sublime merlin tooltips code review jenga build closing thought deprecate old apis fancy custom tooltips edit faq learned vim real vim user could long distance text selection faster file used stock emacs without bloat would faster stable switch directly tab buffer switching logarithmic time many buffer,text editor journey vim spacemacs atom sublime text currently use highly customized sublime text text editor almost programming however people often surprised learn used vim month emacsspacemacs month including much elisp hacking atom month yet still prefer sublime post explains journey text editor learned like dislike end chosen sublime detailed reasoning abandoning spacemacs despite top contributor power user although many criticism vim also apply spacemacs vice versa early day textmate sublime text text editor first learned programming textmate stuck year forget many point switched sublime text trial paid license back used basic syntax highlighting findreplace autocomplete file know keyboard shortcut besides standard o one like copypaste undo used mouse selection eventually learned sublime command pallete open file project pallete setup cause trouble productive nothing painful heard tell true power one gained upon learning use real editor like vim emacs watched screencasts vim master would perform impressive editing operation couple keystroke vim taste power late switched vim learned keyboard shortcut vimtutor printed cheat sheet read ton blog article often conflicting learning using vim right way tried using blank vimrc building piece scratch making sure understood piece time however taking far long editor missing key functionality sublime textmate like file tree good autocomplete open project support language used also ugly started using vim distribution nice feature wanted still find modified vimrc reasonably happy setup continued using month however many pain point one thing often work example tab key bound ton different thing like autocomplete snippet expansion indentation moving snippet field inserting literal tab character many overrode different context often chose wrong one ended fixing somewhat completely issue sublime everything designed work together tab key always wanted even fixed hour spent diagnosing issue figuring resolve conflict implementing relearning muscle memory probably erased week sub second vim speed gain another issue vim mousehostile fully aware vim philosophy never use mouse however even plugins like easymotion ideal vim shortcut use keyboard slower selection task like selecting range text far cursor mouse often using vim shortcut felt faster brain engaged figuring optimal combination motion looking easymotion hint whenever timed consistently much slower mouse talking long range selection cursor movement totally concede keyboard shortcut better short range movement selection vim bad mouse lot plugins really work well mouse selection often worked weirdly state back sublime stint atom realized like fighting editor loved ease use mouse support sublime however also loved power vim keyboard model luckily could use vintageous way could get power liked vim nicety sublime fact vintageous arguably powerful vim work multiple cursor using multiple cursor vim binding incredible basically power vim macro give except compose fly instant feedback command place wanted use see gif found rarely used macro vim think hard command could use would work every instance make sure screw anything figure wanted run macro location sublime easy time yes know vim emacs multiple cursor plugins hack seamlessly work command together mouse started using sublime power user text editor like used vim learned keyboard shortcut read functionality installed plugins month also tried atom pretty much replicated sublime text setup equivalent atom plugins plus extra atom offered however preferred sublime speed editing operation bit latency sublime could offer feature atom speed example sublime open project panel instantly preview file type load file millisecond search incremental default used setup quite happily however started thinking possibility using emacs evilmode heard vim emulation fantastic possibility using emacs lisp craft perfect text editing experience given time enticing started looking around various emacs starter kit like prelude tried read emacs article documentation blog post people emacs configs however everything really horrible convoluted hard remember keyboard shortcut fit well vim spacemacs found spacemacs exactly looking pretty integrated vim emacs functionality interesting discoverable way promised everything set work box somehow project around star github contributor seemed creator poured ton effort making fantastic project unlike people dotfiles put effort thought making adaptable individual need documenting stunned project star contributor downloaded started working spacemacs file joined gitter chat creator set little later submitted first contribution project little know point reason star chance lot googling stumbled upon earlier everyone else coming week continued tweaking sending pr early adopter like diego trickled chat started contributing used spacemacs often noticed thing worked poorly kept steadily fixing problem found adding new contribution layer thing wanted using spacemacs something already fixed bug quite nice felt efficient continued using spacemacs around month maintained position top contributor time helped newbie gitter chat triaged pr contributed maintained different layer thouroughly enjoyed contributing spacemacs nearly everything contributed fixing bug annoyance encountered trying get something done often writing elisp fix earlier problem brokenness yakshaving task ranged fixing annoying keybinding conflict sublime text builtin logic getting latex support work even wrote general mechanism tabbing osx window get around bad emacs tabworkspace plugins definitely noticed annoyance ignored since fun hope thing would get better work however six month making almost progress project discovering fixing bug implementing thing missed editor realized might end part problem love learning new language different kind project spacemacs user might make fix primary use case whereas stuck adding support racket nim rust fixing bug exposed changing workflow think underlying reason everything emacs especially spacemacs hack core emacs offer almost nothing everything layered top adhoc emacs lisp addition different thirdparty plugins extent base functionality step others toe make conflicting assumption time one particularly bad example ran emacs hanging mysteriously autocompleting two character suffix much searching turned known issue completing looked like domain name emacs would try ping interaction autocompletion file finding remote server support lack consistency discoverability another problem pileofhacks design nothing consistent discoverable every moment saved common operation due efficient keyboard shortcut cancelled minute spent searching le common operation often enough memorize example occasional workflow sublime paste clipboard search box search file project without regex support useful searching string special character want escape case insensitively narrow glob certain file without retyping query edit query slightly refine result without retyping replace content occurences satisfied tried emacs spend ton googling investigating mx listing look search project without regex never figured way look shortcut pasting minibuffer use evil use p like usual hope command helmbased edit query otherwise retype everything narrow look replace project without regex oops entirely different command searching reenter everything new command run navigating multiple file last major problem difficult work code spread across multiple file compared sublime text three main way working file emacs buffer file window tried using buffer problem buffer switching slow difficult take one keystroke switch recently opened buffer remember switching buffer requires waiting list show reading multiple additional key select right one buffer also tend proliferate like mad list end enormous taking many key filter right one also nearly impossible navigate mouse reading code hand navigating using normal findfile helm mechanic similar problem switching slow take lot key stroke stroke sometimes involve waiting list appear read framescreen split bunch window emacs revers meaning window frame every editor spacemacs advantage window number hit switch directly great fast easy remember find see want go get problem sacrifice screen real estate every new file work normally ameliorate goldenratio mode shrink unfocused window still take space sublime text use tab amazing switch quickly directly file see file working glance navigate mouse want also easily rearrange tab frequently used important file lower consistent number subitize even use zentabs ensure ever recently used file open tab eliminating buffer proliferation infrequent useful action like moving file window pane copying file path obvious discoverable mouse action file working always fill full screen unless want reference code another pane file want tab open goto anything similar speed narrowing buffer name want navigate based project directory structure access fantastic file tree yes emacs plugins add tab hack ugly slow break used plugins good keyboard shortcut display ton useless buffer care watch friend coworkers use vim emacs thing notice look super efficient since furiously typing thing navigating directory often file opening one looked minute ago would taken single keystroke switch however type bunch character narrow buffer name even frequently see vimemacs user opening file navigating directory would typed character goto anything emacs vim also way fuzzy search file project heuristic tool often bad slow give fall back manually finding file never seen vim emacs user navigates file fast sublime realization realized despite work work contributor using emacs still pain longed justworks nature sublime text help many operation spacemacs surprisingly high latency similar atom many thing ugly like file tree said goodbye spacemacs community headed back sublime text still think spacemacs overall quite good though someone mainly code one language especially popular one get spacemacs set exactly want huge community nowadays mean either bug fixed easily get help one encounter listed bunch disadvantage emacs powerful feature sublime like give get sublime text back vengeance switched back sublime text like vim took thing enjoyed back updated plugin keybinding arsenal include many handy thing used spacemacs one thing really enjoyed emacs magit installed gitsavvy sublime found almost everything liked magit even like workflow marginally better github integration top notch set alfred git repos workflow replicate opening project projectile used osx window tabbing plugin manage sublime window well fanciest thing create set keybindings work like vim except palm key custom keyboard mode way faster quickly movement editing action middle writing also synergizes way better mouse never unexpected mode use move back keyboard since physical state hand state editor still drop vintageous mode fancier editing though took evening get point happier spacemacs setup taken six month using setup happily since couple bug quickly fixed despite using dev build many plugins order magnitude reliable emacs jane street went work jane street internship ended migrating back spacemacs little jane street bunch internal emacs tooling even bunch custom integration spacemacs along much mature tooling ocaml sublime text mostly pretty good far smooth sailing various internal external emacs plugins used conflicted idea window go took window almost actively replacing whichever window cared encountered ton bug large small many ended patching either dotfile snippet pull request encounter different emacs spacemacs plugin bug annoying quite regularly four month problem jane street massive code base made many plugins slow crawl synchronous autocompletion merlin occasionally hung emacs using helmprojectile unbearable without caching slow even disabled bunch hook saving file took second due hg command running slowly large repo eventually talked one guy using sublime text jane street got set plugins setting working jane street ocaml sublime modied sublime merlin plugin support tooltips showed inferred type expression clickable link file definition declaration started using sublime text spree reading code writing sublime still far worse support building indenting jane street code way could understand thing faster using quick fuzzy search file excellent tab smooth scrolling mouse tooltip link navigate codebase eventually started using sublime editing well improved indenting highlighting autocompletion slightly still kept emacs open run source control code review jenga build plugins set elisp navigated compile error sublime text emacs offered excellent compromise nice plugins good editor happy despite additional functionality improvement made sublime actually think spent le time getting sublime work fixing debugging setting spacemacs closing thought overall still satisfied sublime text think text editor could go lot could software feel productive never fight editor work language throw would love sublime open source open source editor good however realize many reason love sublime possible without making money reason creator pour much effort care every detail jon also work full time year text editor custom crossplatform ui toolkit custom parallel regex engine incredibly fast indexing search editing engine also realize respect sublime rather limited plugin api advantage unlike emacsvimatom rarely worry plugins slowing experience accidentally something synchronously entire file since api almost enforces asynchronous design plugin break core functionality slow startup time plugins forced work way difficult conflict since two plugins implement hack internals interfere emacs plugins implement helpful hack basic functionality conflict break thing approach often disable since rarely want hack anyway sublime also get faster better every release worry much pile hack restricting change internals like atom constantly deprecate old apis whenever restructure improve performance also recent dev build patched think number one hole sublime plugin api tooltips inline annotation plugins implement fancy custom tooltips link colour formatting using subset html html subset also used inject phantom rich text annotation code thing like previewing latex formula colour type lint error allow useful plugins previously possible atomemacs ported sublime since implemented centrally instead bunch different way work seamlessly consistently optimistic future sublime text love see new editor open source fast nice powerful sublime expect since would ton work visual studio code look pretty awesome though writing javascript consider excellent tooling integration le common language look better sublime wrote post often find justifying use sublime text vim emacs user often look sublime user people put effort learn real power user text editor confused learn tried vim emacs extensively still choose use see basic newbie editor hope post explains sublime excellent choice highly customizable power user text editor edit faq response question seen raised posting learned vim real vim user could long distance text selection faster think know vim quite well using vim binding year across varying editor know almost vim binding test suppose cursor line file want copy matchpathascaptures curlevelcapturesissome line give efficient sequence vim binding movement tell know everything without looking think apt criticism would think slowly use vim figure want normal english characterssecond typing speed faster selection mouse however actually try without figuring ahead time take longer read count figure right number action type individual character due muscle memory english slower typing english end slower mouse higher mental load could say need git gud practice practicing hour day year get point better mouse think time say maybe lack practice likely innate skill difference processing speed counting typing coordination combination actually use vim binding lot time know well know faster use mouse presumes exists substantial number people faster practice long distance text selection vim shortcut mouse yet see someone confidently say case watched reasonable number vim user within margin error would timed race stopwatch seen clearly meaningfully faster guess everyone seen using vim including many year user could vim sound bit true scotsman like used stock emacs without bloat would faster stable yes would faster stable however would complain lack bunch feature sublime like terrible keybindings also minor rsi issue keen turn major rsi issue using emacs binding switch directly tab buffer switching logarithmic time many buffer yes tab like cache like mention easy hit numbered shortcut jump directly tab use goto anything narrow directly file take amount time buffer switching would tab additional speedup case switching one recentlyfrequently used file say case switch one tab switch recently used file gain emacs extra switch become fast
119,Lobsters,emacs,Emacs editor,Emacs users are like Terry Pratchett’s Igors (2013),https://chrisdone.com/posts/emacs-users-are-like-igor/,emacs user like terry pratchett igors,emacs user like terry igors lisp curse igor,emacs user like terry igors within constraint emacs environment limit emacs built upon principle lisp principle make small kernel feature substrate take care make substrate programmable language emacs chooses lisp build system upon let user worry future feature line c code comprise kernel line emacs lisp take rest similarly nature lisp curse written express given problem arbitrary free spoiled choice every programmer reinvents solution problem uncaring sharing common language world outside core problem lisp make programmer selfish giving programmer much flexibility inviting alienation programmer lisper think express problem best phenomenon problem emacs work environment personal thing exist serve one person mememe winning attitude dealing environment maybe real world share program people people see even use effort care take consideration people environment emacs virtual home least nine hour day every day road emacs love developed slowly first came due common lisp knew enough lisp get copypasting example snippet configuring enough edit environment felt little bit barebones compared ides used little know world functionality configuration waiting beneath foot eventually started patching thing writing hook little thing like used emacs long time becoming proficient user keybindings window management ever wrote elisp occured writing elisp would ever interest would often shaft emacs configuration everything would break quite know finally wrote first mode think mode asp good fully understand everything going gave key insight thing editor really environment way configure everything mode mode consists bunch function variable code really skyrocket productivity eventually would write elisp casually programming work project would notice way working repetitive emacs behaved way quite like simply thought nice thing could add happily spend anywhere second half hour writing functionality extend editing facility extended good amazed still problem problem long notice write elisp solve never problem typical editor ides simply even think fixing thing never mind actually putting work one side minute solving going back work written lot elisp support development especially respect haskell many time many month time year working experimental feature feature set mode whathaveyou spotty mostly working breaking lot interrupting work persevering pushing work becomes stable quite robust sheer usage battle testing working recently occured lot functionality depend presently emacs work built upon work use sessioninteractivemode work interacting cabal ghci use structuredhaskellmode conjunction atop use godmode emacs input method one time another past unusable flaky hell shm still growing pain basically really reminds terry igor clan discovered amiable race fifth elephant igors people inspired typical hunchbacked igor archetype discworld also selfmodifiers body consist mixed matched patched swapped body part among member clan scar selfadjustements infinitely selfimproving selfexperimenting might end botched job hobble around day end always fixable lisp
120,Lobsters,emacs,Emacs editor,Autocompletion with deep learning,https://tabnine.com/blog/deep,autocompletion deep learning,released tabnine local let run deep tabnine machine surprisingly common idiom among software blog deep tabnine transformer using deep tabnine individual developer tabnine local enterprise enterprise tabninecom frequently asked question deep learning stuff cool skeptical improve existing autocompleter actually par code integrates latency expect language supported software license licensee acknowledgement open sourcing,update august released tabnine local let run deep tabnine machine tl dr tabnine autocompleter help write code faster adding deep learning model significantly improves suggestion quality see video sign lot hype deep learning past year neural network stateoftheart many academic domain deployed production task autonomous driving speech synthesis adding dog ear human face yet developer tool slow benefit advance use surprisingly common idiom among software blog cobbler child shoe tabnine hope change python java c haskell deep tabnine deep tabnine trained around million file github training goal predict token given token come achieve goal learns complex behaviour type inference dynamically typed language deep tabnine use subtle clue difficult traditional tool access example return type appgetuser assumed object setter method return type appgetusers assumed list deep tabnine based us transformer network architecture architecture first developed solve problem natural language processing although modeling code modeling natural language might appear unrelated task modeling code requires understanding english unexpected way example make model negate word ifelse statement model also us documentation written natural language infer function name parameter return type past many user said wished tabnine came preexisting knowledge instead looking user current project preexisting knowledge especially useful project small new library added deep tabnine help address issue example know class extends reactcomponent constructor usually take single argument called prop often assigns thisstate body deep tabnine even impossible remember c variadic forwarding syntax using deep tabnine deep tabnine requires lot computing power running model laptop would deliver low latency tabnine user come expect offering service allow use tabnine server gpuaccelerated autocompletion called tabnine cloud currently beta sign understand many user want keep code machine privacy reason taking following step address use case individual developer working reducedsize model run laptop reasonable latency update released tabnine local enterprise offer option license model u run hardware also train custom model understands unique pattern style within codebase sound interesting would love hear use case enterprise tabninecom choose use tabnine cloud take following step reduce risk data breach tabnine cloud always optin never enable without explicitly asking permission first store log code query fulfilled connection tabnine server encrypted tl setting let use tabnine cloud whitelisted directory tabnine cloud currently beta scaling present unique challenge since query computationally demanding billion floating point operation yet must fulfilled low latency ensure high service quality releasing gradually request access customer tabnine first receive access frequently asked question deep learning stuff cool skeptical improve existing autocompleter actually par code use tabnine integrates autocompleter implement language server protocol tabnine use existing autocompleter provides suggestion use deep tabnine otherwise latency expect look video idea latency edited sped language supported deep tabnine support python javascript java c c php go c ruby objectivec rust swift typescript haskell ocaml scala kotlin perl sql html cs bash software license code one following license included training data mit unlicense apache bsd bsd license determined perrepository licensee acknowledgement thanks everyone gave feedback blog post thanks openai open sourcing
121,Lobsters,emacs,Emacs editor,SLY is a fork of SLIME,https://github.com/joaotavora/sly,sly fork slime,slime installation melpa flex completion backreferences reverse isearch sticker install git running server standalone additional contribs license fork many others contributingmd contributing open issue pull request contributingmd,sly sylvester cat common lisp ide emacs sly fork slime contains following improvement upon sly track slime bugfixes familar feature debugger inspector xref etc still available improved overall ux installation ensure melpa setup usual ask mx packageinstall install package sly slymode automatically come every lisp file fire sly connect lisp get friendly repl use mx sly even already slime installed sly ask temporarily disable emacs session obligatory animated gif section flex completion backreferences reverse isearch sticker install git clone repository add emacs file fill appropriate file name addtolist loadpath dirtoclonedsly require slyautoloads setq inferiorlispprogram optsbclbinsbcl wish bytecompile sly needed generally make compile compilecontrib dir cloned sly running server standalone also work sbcl push p dirtosly asdf centralregistry asdf loadsystem slynk slynk createserver port emacs slyconnect give host port destination additional contribs license sly free software file unless explicitly stated otherwise public domain ascii artwork copyright felix lee joan g stark hayley jane wakenshaw fork slime work eric marsden luke gorrie helmut eller tobias c rittweiler many others forked slime used daily work long list hack developed wanted share others slime development stalling patch issue rotting early luís oliveira moved slime github set travis ci system brought old bug report launchpad tracker fixed longstanding problem submitted many change particularly undercurated popular contrib section change sly brings table deep elisp lisp level accepted slime given current focus stability record find perfectly reasonable new feature sticker multiple inspector realized well using existing contrib system finally sly free shackle emacs support emacs allowing much cleaner code liberal use lexical binding list technical reason bigger though read contributingmd file contributing open issue pull request least quick look first part contributingmd file instruction contribute
122,Lobsters,emacs,Emacs editor,Arc and Scheme in Emacs Lisp,https://repl.it/repls/UnluckySturdyCharactercode,arc scheme emacs lisp,,
123,Lobsters,emacs,Emacs editor,Discoverability in Emacs,https://wikemacs.org/wiki/Discoverability,discoverability emacs,orgmode dired ido ivy smex article whichkey melpa guidekey helpful discovermymajor melpa discoverel mastering emacs blog magit yafolding hydra ibuffer hydra ibuffer hercules,page try list emacs feature package help auto discoverability nt know much emacs keybindings command ie potential information come let guide emacs builtins emacs default built around idea discoverability selfdocumented see ch helpful menu make way orgmode dired menu ido interactively thing ido give interactivity work buffer file see also ivy smex extended mx smex provides convenient interface recently frequently used command emacs emacs come even better introspection see article package whichkey guidekey start shortcut unsure want know shortcut available current major mode even global shortcut discover whichkey installed melpa activate mx whichkeymode start keybinding say cc nt finish wait default whichkey open popup list keybindings follow cc package improves guidekey way page scroll instead taking whole screen option ability see toplevel binding however requires least emacs version whereas guidekey compatible earlier version helpful helpful alternative builtin emacs help provides much contextual information available melpa melpa stable discovermymajor package provides function list keybindings meaning current major mode discovermymajor melpa discoverel latter build discoverel work mickeynp mastering emacs blog turned based inspired magit great popup system however discoverel bit outdated nt update improvement magit le featurefull hydra easy use write discoverable command see used help discover dired searchforward c yafolding hydra hydra great package aboabo used tie related command family short binding common prefix hydra pick hydra around see wiki github group keybindings together others provide full list mode help discoverability example ibuffer hydra called immediately enter ibuffer mode show keybindings hydra also easy write simple one defhydra hydrazoom globalmap zoom g textscaleincrease l textscaledecrease screenshot complete one hercules joining whichkeymode hydra hercules new mode group related command whichkeymode sequentially prefix key hydra automatically nt copy hydra init file created fly see also
124,Lobsters,emacs,Emacs editor,Creating pull requests from emacs using magit,https://prathamesh.tech/2019/06/21/creating-pull-requests-from-emacs/,creating pull request emacs using magit,magit solution newsletter,use magit work git emacs magit make easy create branch push github creating branch natural thing create pull request one visit github click new pull request create pull requesti want create pull request automatically emacs magit googling issue came across solution added code tried create pull request using keyboard shortcut v emacs opened page using browser wanted open url using chrome default browser tell emacs use default browser opening url using following code set default browser default o x browser setq browseurlbrowserfunction browseurldefaultmacosxbrowser make sure url emacs try open opened default browser mac o x system window similar configuration setq browseurlbrowserfunction browseurldefaultwindowsbrowser easily open pull request emacs need logged github browser original solution author emacs also extended use gitlab using gitlab hosting code original defun endlessvisitpullrequesturl visit current branch pr github interactive browseurl format http githubcom spullnew replaceregexpinstring githubcom git magitget remote magitgetpushremote url magitgetcurrentbranch evalafterload magit definekey magitmodemap v endlessvisitpullrequesturl modified gitlab defun endlessvisitpullrequesturlgitlab visit current branch pr gitlab interactive browseurl format http gitlabcom spullnew replaceregexpinstring gitlabcom git magitget remote magitgetpushremote url magitgetcurrentbranch evalafterload magit definekey magitmodemap h endlessvisitpullrequesturlgitlab code work magit version git emacs newsletter know interesting insight emacs magithappy hacking
125,Lobsters,emacs,Emacs editor,Presenting the Eshell,http://www.howardism.org/Technical/Emacs/eshell-present.html,presenting eshell,,convert string modifier echo hello u hello convert file string list echo u readme gopy goopy grippy pipy pirb src swampy test modifier combined filter echo u gopy goopy grippy swampy however often split use loop f mv f f u l gopy goopy grippy readme swampy pipy pirb src test empty file upper case think could reverse list echo hello cruel world r match found hello cruel world since shell parser like syntax perhaps could set list variable work setq baddabing list hello cruel world hello cruel world echo baddabing r world cruel hello find stuff odd confusing always fall back lisp reverse list hello cruel world world cruel hello
126,Lobsters,emacs,Emacs editor,One year with Notmuch,https://blog.einval.eu/2019/06/one-year-with-notmuch.html,one year notmuch,http,http
127,Lobsters,emacs,Emacs editor,Markov chain keyboard changes as you type,https://github.com/shapr/markovkeyboard,markov chain keyboard change type,markovkeyboard big idea type work make go make stop need done,markovkeyboard keyboard layout change markov frequency big idea static keyboard layout boring predictable let spice whole idea keyboard layout layout change typing layout update move key frequently come next home row example type day press letter letter h home row type minor challenge involved keyboard layout could change every keypress thus prototype emacs library display update current layout every keypress work pretty much remaps letter azaz work make go use pretrained markovallel mx loadfile type pathtomarkovkeyboardmarkovallel use mx setinputmethod choose markovinsanitya replace letter prefer want different set keymaps download plain text file training markov chain run python crunchfreqspy filenametxt generate markovallel file use mx loadfile make stop c bound toggleinputmethod stock emacs keybindings buffer local code nt make life difficult need done
128,Lobsters,emacs,Emacs editor,110 days of Early Multics Emacs History,https://gopher.tildeverse.org/sdf.org:70/0/computers/multics/multics_emacs,day early multics emacs history,,jameson riscanriscancom sun mar cst newsgroups altosmultics subject day early multics emacs history summary followupto distribution world organization realcase software research corp keywords short set note early history multics emacs apparently written bsg time event occurred saved note thought inspirational think good job capturing new idea born implemented judged date entry speed implementation still impress essence note suggest following people look existing editor day consider implementation issue friday night dinner two hour work friday night get functional emacs lisp editor working short summary day day basic editor insertdelete char line move point day percharacter input raw tty mode console put hacked copy server telnet day percharacter input across arpanet percharacter input multics process first birth later breakall tty mode day redisplay begun day user get use new editor regularly mit user use editor via arpanet day greenberg submits mtb calling distribute emacs multics day twowindow mode implemented day johnson submits mcr proposes breakall mode day bill york selfdocumentation package installed day mode implemented automatic declaration dozen different terminal supported time day bsgweinreb make efficient variant supdup support emacs day breakall mode becomes available user emacs response excellent normal midday multics load long original version note follows brief history multics emacs compiled bsg bernie greenberg give presentation sipb lisp course taker edits note dan weinreb ai using emacs becomes convinced way go discussion group multics editor people formed debating whether multics ever could support real time editor debating various degree distribution editing task central system terminal opposing view held elder younger frankston brother becomes lively feature pointing work ciccarelli developed videooriented characteratatime line editor network use multics begin feel way investigate situation construct editor greenberg express view editor tv larry johnson multics communication expert fnpmeister asks demonstration one scheduled pm demonstration emacs held cisl delta data mc system used heavy load baud lack organization lack preparation hardware problem low speed load difficulty contribute almost totally ineffective presentation however impressed c frankston e killian e ciccarelli others participated pm larry johnston impressed say able devise fnp communication processor patch enables characteratatime input multics c frankston witness pm conversation c frankston greenberg mus know implemented flatout pli could even better little consideration modularity extensibility soon lead lisp chosen implementation language pm sipb friday night dinner eaten colleen various party throw around idea right way implement editor multics idea bruce edward recently implemented editor lisp stand important pm c frankston drive edward greenberg brookline heavy snow edward visit greenberg apartment life block log two hour beer tty paper later functional editor lisp exists program e could build split line insert delete character line move pointer display output capability driven call lisp function character reader developed allows e driven reading character r mode tty greenberg take development point evening weinreb studied ciccarelli code ascertains needed read single character multics arpanet version server telnet hacked allow program read single character normal multics process characterinput first time ciccarelli technique invloved special process soon version incipient editor exists performs character input network normal fnp access path multics limited using johnson patch cisl machine morning software constructed weekend run cisl development machine printing via debugging function displaying cursor interacting characteratatime via reconstruction johnson patch understand appreciate significance evening display support started dave moon present birth redisplay redisplay designed take advantage explicit line structure maintained editor first support delta data designed terminal support substitutable olin sibert hang cisl night intensive debugging session new redisplay develops support package run display slave terminal twoterminal use debugging feature becomes heavy next week many falsely conclude two terminal necessary use editor mailing list user multics editor formed earl killian killian avid supporter beginning provides many good idea illumination way killian construct greenberg datamedia control package allowing user use editor via feature user telnet use becomes regular people mit begin using editor via arpanet support characteratatime interaction greenberg writes promulgates officially honeywell multics technical bulletin proposing multics emacs call shipped part multics containing scathing denunciation multics communication support existant editor proposing support distribution lisp part deal document distributed throughout multics technical organization rather meeted shriek horror document acclaimed enthusiasm idea shown concerned evening twowindow mode implemented first several hairy feature note feature birth fire killing people lisp process day stabilized richard lamson ipc becomes regular user subject buggy software new feature detailed comment accurate reporting lead rapid development multics change request submitted larry johnson proposing new teletype mode break every character explicit reason support bernie editor proposed experimental feature breakall mode pass change review board dissenting vote issue documentation bill archy york join cisl becomes active editor codeveloper development assistant acquires skill point able write editor extension real time demonstration selfdocumentation package done largely installed pli mode implemented comprising logic par pli statement using algorithm compiler significant series optional package included consolemessage processing automatic declaration package signifies kind feature indicating editor reaching maturity time least dozen terminal supported emacs get production use cisl machine people phoenix play regularly greenberg weinreb design implement youngers zion arpanet protocol variant supdup screen management done user telnet process multics emacs becomes totally effective tv potentially usable terminal enough support breakall mode allow used without patch installed mit multics lamson gary palter use first time via dialup line mit characterresponse mode note excellent performance normal midday load although response excellent resource consumption editor appears large problem must thank richard stallman perpetrating emacs upon world promulgating emacs philosophy significantly separation editing programming language editor earl killian seeing thing every step way guiding john gintell bos hisi allowing work bruce edward day editor caro factus erat dave moon eugene ciccarelli many incisive straightforward comment multics emacs grew misgrew richard lamson gary palter submitting software regularly giving accurate bug report larry johnson fnpmeister inventing implementing breakall mode expressing interest entire issue increasing fortitude jerry stern implementing bill york contributing large amount time improvement editor frequently pointing direction go dan weinreb perpetrator eine help along kind support charles frankston people sipb violent powerful support throughout
129,Lobsters,emacs,Emacs editor,Avy 0.5.0 is out,https://oremacs.com/2019/05/11/avy-0.5.0/,avy,avy contributor changelogorg inside emacs highlight new api function new dispatch action new setting word restarting search outro,avy may release consists commits done course last year many contributor similarly release release note changelogorg recommend reading inside emacs highlight lot new code straight upgrade nt need anything extra use describe part new code new command custom var new api function new function added dropin replacement doubledash private avy function used package configs please replace reference obsolete function avyjump dropin replacement avy genericjump avyprocess dropin replacement avy process new dispatch action concept dispatch action introduced suppose bound globalsetkey kbd mt word start w selectable mt w jump mt w x avyactionkillmove kill word move mt w x avyactionkillstay kill word without moving point mt w avyactionispell use ispellflyspell correct word mt w avyactionyank yank word point mt w avyactionteleport kill word yank point mt w z avyactionzaptochar kill point selected point customize avydispatchalist modify action also ensure overlap avykeys customized new avystyle setting word customize see overlay like sequence car cog sequence might find easier type hla lls jhl adjust avydispatchalist eg use upper case character avylinummode feature mix linummode acewindowdisplaymode see overlay enable mode le context switch call avygotoline restarting avy search suppose jumped word start want jump different word also start use avyresume additionally use avynext avyprev cycle last avy candidate example hydra facilitate defhydra hydraavycycle j avynext next k avyprev prev q nil quit globalsetkey kbd cm hydraavycyclebody outro big thanks contributor hope enjoy new release happy hacking
130,Lobsters,emacs,Emacs editor,Let's Get Going With Org mode,https://beorg.app/orgmode/letsgetgoing/,let get going org mode,installing emacs org mode us plain text file beginner guide us plain emacs spacemacs emacs prelude used beginner guide macos emacs mac o x linux window downloading installer official gnu emacs page creating first task list create new file tap leftmost toolbar button org menu select core concept task management system task outliner menu select submenu completing task state task determined todo position cursor anywhere line select menu option used scheduling task add date item say done deadline bring menu go submenu choose saving org file proactively save file select menu viewing agenda got task scheduled handy see weekly view need done using agenda first time need tell file task menu select press key keyboard summary downloading installing emacs creating first org file adding task setting task todo done scheduling task saving file viewing agenda,installing emacs org mode us plain text file used text editor real power come use environment understands org mode best place use org mode file emacs beginner guide us plain emacs many emacs distribution preconfigure improve ui selection installed package keyboard shortcut decide like emacs worth checking spacemacs emacs prelude add lot value emacs experience without requiring massive time investment keyboard shortcut used beginner guide want gentle introduction possible follow article get org mode detail macos using macos emacs already installed however bundled emacs ancient install emacs number different build emacs feel free look option go ahead install emacs mac o x pretty good choice linux recent version linux probably uptodate version emacs installed want either emacs emacs check version command line emacs version version prior install something newer check package manager see available window simplest way get going emacs downloading installer installer package emacs download official gnu emacs page necessarily obvious file download recent window installation ie window want file end example installer add shortcut emacs desktop start menu file context menu easily open file emacs creating first task list obvious use org mode task manager org mode file org extension let run emacs create new file called tasksorg create new file tap leftmost toolbar button select want save file give name tasksorg org extension important emacs work lot different sort file may want place tasksorg desktop easy access new file extension org emacs automatically turn org mode look carefully see new menu appear emacs menu bar org tbl text contain easy access feature useful working org file org menu select new heading emacs insert followed space enter name something want get done go ahead create task mine weekend clear utility room take utility room rubbish recycling center buy paint utility room core concept task management system task state currently list task specify state task org mode used general outliner need provide little information make clear thing done position cursor using mouse cursor key first task org menu select todo list submenu tododone emacs insert todo note matter cursor line emacs helpfully change text color task state org file plain text nothing stop creating new heading typing setting state typing todo start using keyboard shortcut often quicker using menu reasonable typist completing task state task determined todo keyword default org mode understand todo done cycle available task state using tododone menu option item state todo hit tododone changed done list task todo clear utility room todo take utility room rubbish recycling center todo buy paint utility room completed first task going set done position cursor anywhere line select tododone menu option used list becomes done clear utility room todo take utility room rubbish recycling center todo buy paint utility room scheduling task add date item say done deadline needed schedule task provide separate deadline let schedule taking utility room rubbish recycling center put cursor somewhere relevant line bring org menu go submenu date scheduling choose schedule item org mode date picker appear bottom emacs window use mouse pick date weekend worry quicker way pick date learn later org mode insert new line task look something like todo take utility room rubbish recycling center scheduled sat clearly see date task scheduled want update schedule item org mode update existing date saving org file org mode work text file need remember save quit emacs remind unsaved file proactively save file select save file menu grayed file need saving viewing agenda got task scheduled handy see weekly view need done using agenda first time need tell file task make sure viewing tasksorg file emacs select org menu submenu file list agenda addmove current file front list number org file might create view agenda first make sure saved newly created file org menu select agenda command press key keyboard move week selecting agenda menu appears viewing agenda agenda date submenu one option see next option letter right used quickly move agenda example viewing agenda press f key keyboard go next week summary article covered following downloading installing emacs creating first org file adding task setting task todo done scheduling task saving file viewing agenda new emacs application like emacs completely different world omnifocus thing might need time play looked seem long way around quite simple thing however progress onto using keyboard everything change true power org mode emacs revealed check back soon next part learning org mode
131,Lobsters,emacs,Emacs editor,Design documentation with org-mode,http://beard.institute/2019/04/21/design_doc/,design documentation orgmode,note documentation latex odt helpful function thought hidden subtrees ditaa,note documentation workflow last year orgmode heavy every ticket subsection agenda gather information write poc benchmark lot work day job involves hitting rest endpoint happens obrestclient flow creating design documentation similar also orgmode design doc tends evolve implementation time big challenge keeping note documentation sync share documentation google doc confluence updating graph diagram text manual using web interface latex bit experimenting found google drive support commenting pdfs without converting google doc simply share document team enable commenting also upload update folder keep past version mean orgexport pdf latex begin rearranging note design doc subtree providing exposition todo feature extraction design property exportoptions author nil date nil exportfilename featureextractiondesign end preamble realtime blah blah blah need blah work done async processor async processor consume data xyz blah beginsrc dot file featureasyncprocessor digraph p b b c endsrc processor logic beginsrc python python functools import reduce typing import list def extract x list int int return reduce lambda acc x acc x x endsrc benchmark source kinesis kafka note property drawer disabled author date exported document make working snakecase language easier partially disable underscore substring also defined file name rename agendapdf filename choice time export put cursor topmost subtree design doc orgexportdispatch c restrict subtree choose export latex pdf file fancy pdf folder org file ready upload google drive odt expect need collaboratively edit document export odt file instead found odt file look like dog breakfast google drive viewer clicking open google doc fix right helpful function many diagram especially thin one tend take whole page little bit elisp restrict size something manageable wrapwidth function decorates file output couple attribute tell latex exporter odt exporter constrain output size embedded image name wrapwidth beginsrc elisp var data var width result output princ format attrlatex width sn width princ format attrodt width sn sreplace cm width princ data endsrc example usage beginsrc dot file wrapexamplepng post wrapwidth data width result drawer export result digraph g b b c c endsrc result result attrlatex width attrodt width file wrapexamplepng end thought hidden subtrees might wish keep subtrees within document get exported pdf simply add noexport tag subtrees secret idea noexport manager smell ditaa ditaa useful tool drawing system diagram edit source block artistmode draw need orgmode tend convert space tab quickly ruin diagram get around added following initel initel addhook orgmodehook lambda setq indenttabsmode nil
132,Lobsters,emacs,Emacs editor,Writing Emacs module in Rust,https://github.com/ubolonton/emacs-module-rs,writing emacs module rust,emacs module rust user guide change log example example module development,emacs module rust user guide change log example provides highlevel binding emacsmodule emacs support dynamic module code minimal module look like use emacs defun env result value emacs pluginisgplcompatible emacs module name greeting fn init env result ok defun fn sayhello env env name string result value envmessage format hello name require greeting greetingsayhello emacs example module development building testing continuous testing requires cargowatch window use powershell run corresponding script
133,Lobsters,emacs,Emacs editor,Emacs 26.2 released,https://lists.gnu.org/archive/html/emacs-devel/2019-04/msg00503.html,emacs released,,
137,Lobsters,emacs,Emacs editor,An Async / Await Library for Emacs Lisp,https://nullprogram.com/blog/2019/03/10/,async await library emacs lisp,building python proficiency asyncio first appeared python pep nearly identical feature stackless coroutines coroutines officially got generator properly support lexical closure first person realize possible avoid fragmentation aio example problem promise simplified reify bothering promisesa specification evaluate context promise async function composing promise thread done carefully process preemptible testing aio asyncawait pretty awesome,march part building python proficiency learned use asyncio new language feature first appeared python pep september javascript grew nearly identical feature june async function pause await asynchronously computed result much like generator pausing yield value fact python javascript async function essentially fancy generator function specialized syntax semantics stackless coroutines language already generator generatorlike async function natural extension unlike stackful coroutines require significant new runtime plumbing emacs officially got generator september though unlike python javascript require additional support compiler runtime implemented entirely using lisp macro word another library core language feature theory generator library could easily backported first emacs release properly support lexical closure emacs june reason stackless asyncawait coroutines also implemented library letting emacs generator library heavy lifting package called aio modeled closely javascript async function python asyncio core representation promise rather coroutine object easier time reasoning promise coroutines definitely first person realize possible beaten punch two year wanting avoid fragmentation set aside formality first iteration idea even bothering namespacing identifier educational exercise however got quite attached little toy got head wrapped around problem everything sort clicked place nicely article show stepbystep one way build asyncawait top generator laying one concept time building upon first example illustrate desired final result aio example ignoring problem moment suppose want use urlretrieve fetch content url return keep simple going omit error handling also assume lexicalbinding example besides lexical scope required generator library therefore also required aio naive approach fetch content synchronously defun url let buffer urlretrievesynchronously url withcurrentbuffer buffer bufferstring killbuffer result returned directly error communicated error signal eg emacs version exception convenient function block main thread locking emacs result arrived obviously undesirable practice everyone nearly always us asynchronous version defun url callback urlretrieve url lambda status funcall callback bufferstring main thread longer block whole lot le convenient result returned caller instead caller supply callback function result whether success failure delivered via callback caller must split two piece part callback callback error delivered using error signal inverted flow control situation get worse say need fetch result two different url either fetch result one time inefficient manage two different callback could invoked order therefore coordinate nice function work like first example asynchronous like second example enter asyncawait aiodefun url let buffer aioawait aiourlretrieve url withcurrentbuffer buffer bufferstring killbuffer function defined aiodefun like defun except use aioawait pause wait function defined aiodefun specifically function return promise borrowing python parlance returning promise make function awaitable error delivered error signal aiourlretrieve like first example called function return immediately promise object represents future result caller might look like defcustom fortuneurl aiodefun displayfortune interactive message aioawait fortuneurl wonderfully clean look yes even work interactive like mx displayfortune fortune printed minibuffer soon result arrives server meantime emacs block continue work anything already nicer way organize callback implicit rather explicit promise simplified core object play promise promise already rather simple concept aio promise distilled essence needed singular purpose later said promise represents future result practical term promise object one subscribe callback result ready callback invoked another way put promise reify concept callback callback longer idea extra argument function firstclass thing passed around value promise two slot final promise result list subscriber nil result mean result computed yet simple even bothering clstruct defun aiopromise create new promise object record aiopromise nil defsubst aiopromisep object eq aiopromise typeof object length object defsubst aioresult promise aref promise subscribe promise use aiolisten defun aiolisten promise callback let result aioresult promise result runattime nil callback result push callback aref promise result ready yet add callback list subscriber result ready call callback next event loop turn using runattime important keep asynchronous component isolated one another see others frame call stack frame aio important promisesa specification explicit half equation resolving promise done aioresolve unlike promise aio promise care whether promise fulfilled success rejected error instead promise resolved using value function usually value closure subscriber receive value function extract value invoking argument let promise resolver decide semantics result instead returning value function instead signal error propagating error signal terminated async function promise need know resolved promise resolved subscriber scheduled event loop turn order subscribed promise already resolved nothing happens thought perhaps error order catch api misuse defun aioresolve promise valuefunction unless aioresult promise let callback nreverse aref promise setf aref promise valuefunction aref promise dolist callback callback runattime nil callback valuefunction async function might subscribe promise like aiolisten promise lambda v message funcall v simplest example nonasync function creates delivers promise sleep function defun aiosleep second optional result let promise aiopromise valuefunction lambda result promise runattime second nil aioresolve promise valuefunction similarly timeout promise delivers special timeout error signal given time future defun aiotimeout second let promise aiopromise valuefunction lambda signal aiotimeout nil promise runattime second nil aioresolve promise valuefunction promise evaluate context promise get pausing function let deal slightly simpler matter delivering return value using promise need way evaluate body capture result promise body exit due signal want capture well macro defmacro aiowithpromise promise rest body aioresolve promise conditioncase error let result progn body lambda result error lambda signal car error rethrow cdr error body result captured closure delivered promise error signal rethrown subscriber promise value function emacs lisp serious weak spot really concept rethrowing signal unlike language explicit exception object capture snapshot backtrace original backtrace completely lost signal caught way reattach signal rethrown unfortunate would greatly help debugging got see full backtrace side promise async function promise want pause function promise generator iteryield pausing iterator execution tackle problem yield promise pause iterator subscribe callback promise continues generator iternext promise result yield result hard work done either side yield aioawait simple wrapper around iteryield defmacro aioawait expr funcall iteryield expr remember funcall extract promise value value function signal error propagates directly iterator direct call minus accurate backtrace aiolambda aiodefun need wrap body generator iterlamba invoke produce generator drive generator using callback simplified unhygienic definition aiolambda defmacro aiolambda arglist rest body lambda rest args let promise aiopromise iter apply iterlambda arglist aiowithpromise promise body args promise aio step iter promise nil body evaluated inside aiowithpromise result delivered promise returned directly async function returning iterator handed aio step drive iterator forward delivers first promise iterator yield promise aio step attache callback back promise described immediately driving iterator first yielded promise prime important getting ball rolling asynchronous operation iterator ever yield something promise delivered right back iterator defun aio step iter promise yieldresult conditioncase clloop result iternext iter yieldresult iternext iter lambda result aiopromisep result finally aiolisten result lambda value aio step iter promise value iterendofsequence iterator done nothing need happen since iterator resolve return value promise definition aiodefun us aiolambda defalias nothing everything need everything else package merely useful awaitable function like aiosleep aiotimeout composing promise unfortunately urlretrieve support timeouts work around composing two promise urlretrieve promise aiotimeout promise first define promisereturning function aioselect take list promise return another promise first promise resolve defun aioselect promise let result aiopromise result dolist promise promise aiolisten promise lambda aioresolve result lambda promise give aioselect urlretrieve timeout promise tell u resolved first aiodefun url timeout let promise list aiourlretrieve url aiotimeout timeout fastest aioawait aioselect promise buffer aioawait fastest withcurrentbuffer buffer bufferstring killbuffer cool note actually cancel url request move async function forward earlier prevent getting result thread despite aio entirely managing concurrent asynchronous operation nothing thread emacs support kernel thread async function promise callback expected run main thread say async function await result another thread must done carefully process package also includes two function realizing promise process whether subprocesses network socket aioprocessfilter aioprocesssentinel example function loop chunk output typically process delivered filter function aiodefun processchunks process clloop chunk aioawait aioprocessfilter process chunk process chunk exercise reader write awaitable function return line time rather chunk time build top aioprocessfilter considered wrapping function like startprocess aio version would return promise representing kind result process however many different way create configure process would ended duplicating process function focusing filter sentinel letting caller create configure process much cleaner unfortunately emacs asynchronous api writing output process processsendstring processsendregion block pipe socket full callback await writing output maybe way dedicated thread another issue processsend function preemptible made necessary block aioprocess function leave gap ie filter awaits filter sentinel function attached consequence promise singlefire gap harmless long async function await something else get preempted need thought update process function longer exist replaced small framework building chain promise see aiomakecallback testing aio test suite aio bit unusual emacs builtin test suite ert support asynchronous test furthermore test generally run batch mode emacs invokes single function exit rather pump event loop batch mode handle asynchronous process io async function aio possible run test batch mode instead hacked together really crude callbackbased test suite run nonbatch mode writes test result buffer run make check ideal work one test sleep sort reasonable tolerance pretty neat demonstration aio aiodefun sleepsort value let promise mapcar lambda v aiosleep v v value clloop promise next aioawait aioselect promise setf promise delq next promise collect aioawait next see action mx sleepsortdemo aiodefun sleepsortdemo interactive let value message aioawait sleepsort value asyncawait pretty awesome quite happy came together concept straight particularly resolving value function everything made sense part fit together well mostly accident feel good
138,Lobsters,emacs,Emacs editor,Andrey's Opinionated Emacs Guide,https://m00natic.github.io/emacs/emacs-wiki.html,andrey opinionated emacs guide,,mainly keyboard driven emacs offer one simple yet extremely powerful facility automation keyboard macro idea capturing multiple series keystroke automatically executing demand start one cx series action like automate careful take time try think clean way achieve first round like ready cx execute captured cx e execute time cu cx e cu number combination known prefixuniversal argument way pas additional argument many command often cause executed number time note nt execute captured macro immediately stay available execution define another one cancel capture still recording usual cg probably take practice get used recording composable series action see example master thank life imagine possibility jump email buffer copy something switch shell buffer write command paste copied execute copy last line result go back prompt switch result buffer paste add new line go back email buffer move next line execute automatically time
139,Lobsters,emacs,Emacs editor,The Emacs Package Developer's Handbook,https://alphapapa.github.io/emacs-package-dev-handbook/,emacs package developer handbook,,macro make comparing multiple form easy todo consider using avoid extra dependency require dashfunctional autoload cldefmacro benchmulti key time form ensureequal raw return org table list benchmark result form run form benchmarkruncompiled time iteration ensureequal nonnil result form compared error raised nt equal result sequence difference shown seqdifference raw nonnil raw result benchmarkruncompiled returned instead org table list first element form string used form description benchmultiresults otherwise form numbered form run garbagecollect called maybe since benchmultilexical bytecompiles file sure benchmarkruncompiled necessary benchmarkrun matter declare indent defun let key gensym key resulttimes gensym resulttimes header form x faster next total runtime gc total gc runtime hline copy form subsequent call macro get original form form copylist form description clloop form form collect stringp car form car form setf nth form cadr nth form unwindprotect progn defvar benchmultiresults nil let benchmultiresults makehashtable resulttimes sort list clloop form form description nth description collect progn garbagecollect con description benchmarkruncompiled time ensureequal puthash description form benchmultiresults form lambda b second second b ensureequal clloop key hashtablekeys benchmultiresults length key unless equal gethash nth key benchmultiresults gethash nth key benchmultiresults sequencep gethash car hashtablekeys benchmultiresults benchmultiresults let difference one order nil try order difference setq nth key nth key difference seqdifference gethash benchmultiresults gethash benchmultiresults setq nth key nth key difference seqdifference gethash benchmultiresults gethash benchmultiresults usererror form benchmultiresults equal difference difference sequence usererror form benchmultiresults equal nth key nth key gethash nth key benchmultiresults gethash nth key benchmultiresults add factor time return table raw resulttimes append header benchmultiprocessresults resulttimes unintern benchmultiresults nil defun benchmultiprocessresults result return sorted result factor added setq result sort result second clloop length length result length description car nth result factor length format second nth result second nth result slowest collect append list description factor list format second nth result third nth result fourth nth result format fourth nth result used like benchmulti form orgmapentries sort orgmapentries lambda nth orgheadingcomponents maybe agenda string regexp sort flatten nonnil mapcar lambda file let casefoldsearch withcurrentbuffer findbuffervisiting file orgwithwidebuffer gotochar pointmin clloop regexp format orgheadingkeywordregexpformat maybe researchforward regexp nil collect nth orgheadingcomponents orgagendafiles string form x faster next total runtime gc total gc runtime regexp orgmapentries slowest also help catch bug ensuring form return result example benchmark contains subtle bug casefoldsearch regexp form nonnil regexp compared caseinsensitively match org heading start maybe rather one start maybe using ensureequal argument benchmulti compare result raise error showing difference two sequence form evaluate benchmulti ensureequal form orgmapentries sort orgmapentries lambda nth orgheadingcomponents maybe agenda string regexp sort flatten nonnil mapcar lambda file let casefoldsearch withcurrentbuffer findbuffervisiting file orgwithwidebuffer gotochar pointmin clloop regexp format orgheadingkeywordregexpformat maybe researchforward regexp nil collect nth orgheadingcomponents orgagendafiles string usererror form result equal difference regexp orgmapentries maybe case fixing error setting casefoldsearch nil make form give result case double performance faster form benchmulti ensureequal form orgmapentries sort orgmapentries lambda nth orgheadingcomponents maybe agenda string regexp sort flatten nonnil mapcar lambda file let casefoldsearch nil withcurrentbuffer findbuffervisiting file orgwithwidebuffer gotochar pointmin clloop regexp format orgheadingkeywordregexpformat maybe researchforward regexp nil collect nth orgheadingcomponents orgagendafiles string form x faster next total runtime gc total gc runtime regexp orgmapentries slowest macro showed code faster helped catch subtle bug
140,Lobsters,emacs,Emacs editor,Kakoune - A modal text editor,https://github.com/mawww/kakoune,kakoune modal text editor,,enter insert mode current selection enter insert mode current selection yank delete current selection c yank delete current selection enter insert mode repeat last insert mode change c including inserted text ad delete current selection ac delete current selection enter insert mode enter insert mode current selection begin line start enter insert mode current selection end line end enter insert mode one given count new line current selection end enter insert mode one given count new line current selection begin ao add empty line cursor ao add empty line cursor yank selection p paste current selection end p paste current selection begin ap paste current selection end select pasted string ap paste current selection begin select pasted string r replace current selection yanked text ar replace current selection every yanked text r replace character next entered one aj join selected line aj join selected line select space inserted place line break merge contiguous selection together work across line well gt indent selected line agt indent selected line including empty line lt deindent selected line alt deindent selected line remove incomplete indent leading space indent pipe selection given external filter program replace selection output pipe selection given external filter program ignore output insert command output selection append command output selection u undo last change au move backward history u redo last change au move forward history align selection align cursor selection inserting space first character selection copy indent copy indentation main selection count one count given one lower case upper case swap case convert tab space current selection us buffer tabstop option count parameter tabstop convert space tab current selection us buffer tabstop option count parameter tabstop rotate selection content specified count group selection rotate independently rotate selection content backwards
141,Lobsters,emacs,Emacs editor,"Emacs configuration for merlin-lsp, the OCaml LSP server",https://khady.info/emacs-ocaml-lsp.html,emacs configuration merlinlsp ocaml lsp server,emacs configuration merlinlsp ocaml lsp server integrated merlin merlineldoc lspmode eglot lspocaml,emacs configuration merlinlsp ocaml lsp server since mon implementation lsp server integrated merlin first lsp server ocaml least two server exist one officially integrated merlin provides guaranty built extension merlin merlineldoc provides facility top come default merlin especially highlighting occurrence value jumping occurrence automatically display type using merlinlsp possible nice feature plus original one merlin little configuration emacs two lsp client describe configure lspmode experience work better eglot note lspocaml configuration module lspmode deprecated project lspmode enough first step install merlinlsp package published opam yet pinned opam pin add merlinlspdev http githubcomocamlmerlingit come emacs part lspmode installed melpa work basic configuration get working point short require lspmode lspregisterclient makelspclient newconnection lspstdioconnection opam exec ocamlmerlinlsp majormodes camlmode tuaregmode serverid ocamlmerlinlsp line emacs configuration must lsp command available visit ocaml file run try connect server connection merlinlsp create buffer name lsplog content case successful connection look like command ocamllanguageserver stdio present path command opam exec ocamlmerlinlsp present path found following client homelouiscodedemosrcmainml serverid ocamlmerlinlsp priority following client selected based priority serverid ocamlmerlinlsp priority normally lspmode configured xref automatically important feature merlin already available jumping value definition using xreffinddefinitions lspfinddefinition equivalent merlinlocate listing occurrence value xreffindreferences lspfindreferences equivalent merlinoccurrences displaying type value point message minibuffer relying eldoc calling lspdescribethingatpoint equivalent merlintypeenclosing listing error current file flycheck flymake completion variable function name list exhaustive even feature available usual merlin lspgototypedefinition like locate type expression lsplensshow equivalent code lens vscode extension lspmode available fancier display nicer completion thing default configuration lspmode nt like especially try display type point even point code came change mostly imported merlineldoc publishing whole configuration relying usepackage hope help start using merlinlsp nt hesitate give hand implement missing feature merlinlsp usually hard imagine defun mymerlinlsp currentfontamongfontsp po font current font po among font let fontfaces gettextproperty po face listp fontfaces setf fontfaces list fontfaces delq nil mapcar lambda f member f font fontfaces defun mymerlinlsp incommentp po return nonnil character po comment documentation done comparing font face mode tuaregmode reasonmode must activated buffer call function mymerlinlsp currentfontamongfontsp po fontlockcommentface fontlockcommentdelimiterface fontlockdocface defun mymerlinlsp instringp po return nonnil character po string done comparing font face mode tuaregmode reasonmode must activated buffer call function mymerlinlsp currentfontamongfontsp po fontlockstringface defun mymerlinlsp inkeywordp po return nonnil character po keyword done comparing font face mode tuaregmode reasonmode must activated buffer call function mymerlinlsp currentfontamongfontsp po tuaregfontlockgoverningface fontlockkeywordface defun mymerlinlsp inoperatorp po return nonnil character po operator done comparing font face mode tuaregmode reasonmode must activated buffer call function mymerlinlsp currentfontamongfontsp po tuaregfontlockoperatorface defun mymerlinlsp validtypepositionp po return nonnil po place valid get type let symbol thingatpoint symbol operator mymerlinlsp inoperatorp po string mymerlinlsp instringp po comment mymerlinlsp incommentp po keyword mymerlinlsp inkeywordp po symbol operator string comment keyword string defun mymerlinlsp hover call lsphover valid hover position mymerlinlsp validtypepositionp point lsphover lspuidochide defun mymerlinlsp documenthighlight call lspdocumenthighlight valid hover position mymerlinlsp validtypepositionp point lspdocumenthighlight defun mymerlinlsp setupeldoc replace default lspeldochook custom function checking validity position setqlocal lspeldochook mymerlinlsp hover mymerlinlsp documenthighlight defun mymerlinlspregister register lsp server ocaml function must called lspmode loaded lspregisterclient makelspclient newconnection lspstdioconnection opam exec ocamlmerlinlsp majormodes camlmode tuaregmode reasonmode serverid ocamlmerlinlsp defun mymerlinlsp setup start merlinlsp mymerlinlsp setupeldoc lsp usepackage helmlsp ensure usepackage lspui ensure custom lspuidocposition bottom lspuisidelineenable nil lspuipeekpeekheight usepackage companylsp ensure custom companylspcachecandidates nil config push companylsp companybackends usepackage lspmode ensure custom lsplogmax config mymerlinlspregister bind map lspuimodemap remap xreffindreferences lspuipeekfindreferences hook tuaregmode mymerlinlsp
142,Lobsters,emacs,Emacs editor,Running a bakery on Emacs and PostgreSQL,https://bofh.org.uk/2019/02/25/baking-with-emacs/,running bakery emacs postgresql,another post github repo next step putting personal personal computing,year ago finally opened bakery dreaming year big change life spending time sat front computer spending making actual stuff stuff make people happy huge change think single job change ever made happy one one big change came going pro suddenly work much stuff needed mix fill order needed face really simple work much dough need work quantity mix make much dough easy pencil paper traditional baker fashion scrawling finger floured work bench coped week early kept making mistake make inconsistent product bread forgiving work quite hard make something bread consistency matter needed automate one bread matter baking living course part course material received copy spreadsheet could used go list order list ingredient mix alongside accurate costing useful bit bob great certainly opened eye possibility automation part job tried add new recipe spreadsheet favourite computational model maybe lack experience adding new recipe like pulling teeth lot tedious copying pasting repetition formula seemed wrong especially underlying computation straightforward ish better way key insight bakery formula cliched represented data formula seedy malt loaf recipe ingredient quantity small seedy malt seedy malt dough kg large seedy malt seedy malt dough kg course full set formula tell make seedy malt dough another formula consists flour water starter salt multiseed soaker starter soaker result formula finally made basic ingredientswith certain amount handwaving deal fact starter strictly made flour water starter consider reaching object oriented hammer point thought might able everything needed without leaving sql relatively straightforward move shape calculation bread matter spreadsheet database schema real sticking point recursive nature formula turn recursive query thing modern sql albeit little tricky get absolutely righta bakes went little weird finally got thing sorted first time curiousand several seem wrote another post bit detail sample code detail schema find github repo bakery day bake setup productionorder table order bake run query productionlist view find needed mix great well sort add bit extra onto quantity initial starter mix allow bit get stuck bowl lost final dough well wanted bake two day row bake two day process mixing starter wednesday evening mixing fermenting shaping thursday baking resulting loaf four friday morning vitally much much easier add adjust formula limitation worse limitation spreadsheet well nature business need keep record much got baked much sold clean floor accident sort prevent next time list endless need recorded legal pragmatic reason started day book org fileorgmode amazing emacs package sort outlinertask managerpublishing toolspreadsheetdiaryliterate programming environment bewilderingly capable probably primary driver emacs renaissance people coming editor orgmode porting rest environment hence rise evilmode emacs vim emulation layer every day come bakery run orgcapture get template day entry daybook fill day go one feature orgmode orgbabel literate programming environment let write something like beginsrc sql select ingredient quantity bakehouseproductionlist workdate today endsrc cursor somewhere code block hit cc cc whereupon emacs run sql bakery database populate table like ingredient quantity old starter water white flour orgmode assist awesome enough query make little complex current version database understands date cope overlapping bakes make query little complex orgmode help file away snippet code library babel reference daybook set arbitrary variable point hierarchy document bit code emacs config tweak day entry daybook like defun pdcinbakerydaybook bakery daybook equal buffername captureloaferydaybookorg defun pdcsetdaybookentryproperties set property rely boilerplated daybook query saveexcursion lookingat digit digit orgupelement let entrydate first ssplit orgentryget point item orgentryput point headerargs format var workdate entrydate orgbabelexecutesubtree defun pdcorgcapturebeforefinalizedaybookentry pdcinbakerydaybook pdcsetdaybookentryproperties addhook orgcapturebeforefinalizehook pdcorgcapturebeforefinalizedaybookentry win code beauty contest job setting workdate variable day entry running code subtree part capture process capture template line like call mix call stored code snippet reference variable set current subtree make query right day mean know get bakehouse run orgcapture check resulting entry daybook provided added appropriate row database next step software done course software ever good enough managing mix without hitch last month telling pack customer generally removing need work anything pencil paper nowhere near mature capable commercial production management software fit understand limitation work around becomes annoying enough might sit work fix right frame mind current list niggles look something like accounting database already know costing based raw ingredient cost etc probably able use keep book well using orgledger parametric recipe certain point becomes easier mix stiff starter mixer mix usual wet starter hand breakpoint come around flour right manage looking mix starter look like lot changing order use version formula running query think possible automate sophisticated query need work better scheduling thing get weird batch dough would mix single go right physical limitation mean simply make much bread anyway get bannetons rack become much pressing issue order management right manage order postico talking database okay little frustrating place autocompleting environment order within emacs would much neater way manage thing putting personal personal computing computer amazing versatile tool even know program almost always app want something close enough cant work around infelicity quite remarkable thing folk kit programming skill learn program whole vista possibility open good programmable tooling really limited skill understanding instead accommodating software accommodate software make right functionality tradeoff brilliant commercial piece music looping sofware use could massively brilliant way picking tempo automatically first recorded loop would free sing click generally make whole process easier developer understandable priority like porting app window wrong folk clamoring window version developer making money commercial application development stop definitely complaining feature dramatically necessary prepared spend time learning real time music programming order implement want software dance tune way choose tool let program choose emacs postgresql might choose vim sqlite atom nosql database might live smalltalk image start see computing environment truly soft malleable amazing thing assisted computer truly
143,Lobsters,emacs,Emacs editor,Exercising software freedom on Firefox,http://jordi.inversethought.com/blog/exercising-software-freedom-on-firefox/,exercising software freedom firefox,software freedom get involved firefox build drama firefox behemoth ircmozillaorg rust xul download prebuilt firefox component free last pastedebiannet patch,little unusual use emacs alone unusual get impression even amongst emacs user minority another way use default keybindings love lot new emacs user seem insist jamming vim key emacs friend cp cn cf cb ca ce ck left right start end kill gungho emacs keybindings made default keybinding gtk mean application us gtk respect emacs keybindings motion also work anything us readline readlinelike input like bash python psql postgresql default cli client used emacs key paid consistent interface across software matter becoming minority another way use firefox firefox us gtk mean use emacs keybindings firefox ah rub firefox bind cn people would call ctrln new window probably okay people intersectionality emacs keybindings everywhere firefox intolerable want move cursor instead perform unnaturalfeeling motion moving right hand arrow key hit arrow button accostumed using arrow key imagine every time pressed arrow firefox would open new window imagine software reacting odds habituation firefox easy workaround could download extension would let configure firefox keyboard shorcuts including disable used world however march firefox many extension easy fix gone tried cope one key still use arrow key tried work help often wanted move cursor three four row would accidentally open three four new window even worse could move every direction felt natural made mistake going software would react wrong way everything else right except firefox one day enough software freedom enough enough accidentally opened new window last time want go donut stop anymore freedommm motivation skill rebuild firefox make better consistent technology want get involved firefox build drama though want figure clone repo setup development environment configure build kind build integrate operating system luckily someone else already done work debian packagers debian package know dependency required build package tooling ready build package make fit exactly operating system right system library right compilation option everything know build debian package get source aptget source packagename get dependency sudo apt builddep packagename build package dpkgbuildpackage easy enough firefox behemoth started following step something immediately evident firefox huge enormous gargantuan biggest codebase ever seen glance saw mix python c rust xml later came recognise xul xul hear ask yes xul see dare tread hand motivation going strong felt undaunted would tame beast oxidised metal alone know mozilla project still fairly active irc network ircmozillaorg headed way started talking problem asking advice waited reply tried figured gtk keybindings c looking c c source file would define gtk keybindings would find file destroy keybinding done something similar past gtk program solo search proved unfruitful find anything new window c source file even tried rust file maybe done something nothing grepping find new window command xml file figured still use everyone know software news firefox disabled xul part move rust engine meantime helpful people irc pushed along quest pointed right direction yes xul needed rust xul yep firefox lying u still xul disabled external interface extension hood firefox still xul mess always say ripping yet process seems slow followed advice changed single xml file built debian package expecting long compilation time got worried enough ram build look like gigabyte four core thinkpad carbon gen enough people irc reassured would take two hour right two hour later new firefox neat little debian package installed dpkg deb eager see result xml parsing error undefined entity oh made mistake could close error window firefox start however confirmed two thing one xul really still used fact important firefox even start get wrong right track modifying xul could well get goal disabling one key error window reminded lot similar error seen past xul available party extension author seems much advertised changed xul parsing error tried removed key removed reference key another build another two hour meantime mozilla employee enthusiast irc kept asking artifact build said wanted learn little possible firefox build process turn artifact build interesting thing download prebuilt firefox component build put together greatly reducing compilation time specific goal building debian package wanting get involved build drama politely refused suggestion artifact build want cursor move man second try also work neglected one reference new window key think necessary xml failed parse key undoing closing window defined term key opening new window decided going opening new window also going undo close also deleted reference getting late sleep wait another twohour build made change started build went bed like kid excited christmas morning free last morning came new build ready installed third debian package built time firefox started xml error could went first website could think textarea element could try type pastedebiannet typed text hit enter time pressed cp go back moment truth hit cn new window cursor moved yes great success patch patch anyone else want made esr currently firefox packaged debian stable modified file still current mercurial repository checked right diff git menuitem id menunewnavigator label newnavigatorcmdlabel accesskey newnavigatorcmdaccesskey key keynewnavigator command cmdnewnavigator menuitem id menunewprivatewindow label newprivatewindowlabel diff git broadcasterset keyset id mainkeyset key id keynewnavigator key newnavigatorcmdkey command cmdnewnavigator modifier accel reserved true key id keynewnavigatortab key tabcmdcommandkey modifier accel command cmdnewnavigatortabnoevent reserved true key id focusurlbar key opencmdcommandkey command browser openlocation ifdef fullbrowserwindow key id keyundoclosetab command history undoclosetab key tabcmdcommandkey modifier accel shift endif key id keyundoclosewindow command history undoclosewindow key newnavigatorcmdkey modifier accel shift ifdef xpgnome define numselecttabmodifier alt diff git toolbarbutton id appmenunewwindowbutton class subviewbutton subviewbuttoniconic label newnavigatorcmdlabel key keynewnavigator command cmdnewnavigator toolbarbutton id appmenuprivatewindowbutton class subviewbutton subviewbuttoniconic diff git match safari entity newusercontextlabel new container tab entity newusercontextaccesskey b entity newnavigatorcmdlabel new window entity newnavigatorcmdkey n entity newnavigatorcmdaccesskey n entity newprivatewindowlabel new private window entity newprivatewindowaccesskey w still alter firefox xul compile instead extension
144,Lobsters,emacs,Emacs editor,Smooth Video Game Emulation in Emacs,http://emacsninja.com/posts/smooth-video-game-emulation-in-emacs.html,smooth video game emulation emacs,todoorg nesel repo general strategy cowgod technical reference mastering cowgod technical reference basic emulation cowgod technical reference debugging analysis circe testing firestarter buttercup rendering esxml garbage collection woe sound readme user input super schiptxt musing cowgod technical reference,lengthy todoorg thing might eventually implement emacs exactly useful challenging fulfill condition ne emulator fit criterion neatly kept hearing run poor hardware learned graphic fit tiled model meaning draw pixel separately tile given good enough rendering speed impossible task unexpected happened someone else beat punch nesel impressive feat one wrinkle overall speed unacceptable mario run slowdown rendering essentially unplayable reason adjusted goal bit emulate simpler game platform smoothly emacs full speed enter console sense video game vm designed following property cpu generalpurpose register instruction two byte large ram stack return address resolution x blackwhite pixel rendering sprite drawn xor mode sound monotone buzzer input hexadecimal keypad perfect sound real issue native sound support emacs blocking worked around sufficient effort implemented selection almost hundred game play dozen implement super extension implement space invader pacman breakout gamegridel could possibly hard turn enough keep entertained week repo general strategy first located reasonably complete looking rom pack included code sure legal status claim game old enough public domain since plenty new one decided go safe route sorry cowgod technical reference main document relied upon clearly written cover nearly everything want know architecture exception find another helpful one mastering fill gap boot game real hardware use machine interpreter loaded memory offset load game starting offset start interpreter would start program counter set execute instruction continue next instruction program counter point etc make thing complicated two timer system running decrement special register nonzero used measure delay accurately play buzzing sound however specification fast cpu run display update synchronized come strategy accomodate potentially varying clock speed standard solution game loop aim cycle take fixed time example executing loop iteration sleeping enough time arrive desired cycle duration kind thing work well emacs use sitfor get userinterruptible sleep use sleepfor get uninterruptable sleep allow user input registered solution invert control flow using timer running frame rate careful much work timer function way emacs handle user input rendering quickly possible timer function would execute many cpu cycle needed decrement timer register necessary finally repaint display component system represented variable holding appropriate data structure vector ram vector byte stack vector address screen vector bit etc opted using vector structs simplicity sake register special case represented vector need index using part opcode therefore would make sense constant representing register value equal value used opcode initially defined constant using copypaste later switched macro defines builtin sprite hex digit shamelessly stolen cowgod technical reference copied initialization memory region reserved interpreter allows ld f vx instruction return respective address implementing extended builtin sprite super instruction convenient resource steal instead created upscaled version terrible ruby oneliner basic emulation debugging reason implement game loop first instead went loop keep executing cpu instruction indefinitely manually abort cg display display state debug function render text allowed fully concentrate getting basic emulation right fighting efficiency concern rendering speed cpu cycle cpu look current value program counter look twobyte instruction ram offset executes changing program counter possibly process one unspecified thing one program counter point invalid address actual rom practice done experimentation showed instead specifying invalid address fall infinite loop always jump address due design choice constantly twobyte sized instruction type operand instruction encoded inline need extracted using basic bit fiddling emacs lisp offer logand ash corresponding c first bit extracted masked using logand argument bit kept set one result shifted way right ash using negative argument take example jp nnn instruction encoded extract type masking opcode shift ash likewise argument extracted masking shift needed bit already right side common set pattern come dissecting opcodes therefore function save interesting part opcode local variable using abbreviation seen cowgod technical reference big cond used tell type opcode branch modifies state virtual machine needed nearly instruction end incrementing program counter one instruction borrowed trick emulator executing program counter unconditionally incremented opcode size case instruction need something different like changing jump location still override value manually test current progress picked simplest read smallest rom something interesting maze david winter debug function printed screen writing space hash buffer separated newline screen line got one working repeated process several rom requiring user input displayed mostly static screen useful collection bc test bestcoder covered nearly opcodes tested systematic fashion list rom found useful testing feature case reader shall embark similar adventure jumping x test delay timer collision detection bound drawing logo test call nnn ret sierpinski triangle slow test emulation speed zero animation test rendering speed look flicker minimal game test skp vx keypad test test ld vx k uncovered bug main loop tetri test skp vx sknp vx playability sc test test nearly opcodes super one font test test drawing small big builtin sprite robot test drawing extended sprite scroll test test scrolling left right car race demo test scrolling car test emulation speed extended mode emutest test halfpixel scroll extended sprite lowres debugging analysis surprisingly enough error mistake keep happening stepping execution command edebug get tiring even using breakpoints skip interesting part therefore implemented something seen circe preferred irc client logging function log logging enabled writes logging output dedicated buffer log current value program counter decoded instruction executed added kind logging different emulator evan hanson chicken scheme community comparing log allowed quickly spot start diverge giving hint instruction faulty looking rom executed terribly enlightening feel like watching peephole giving full picture happen started writing simple disassembler decodes every two byte writes offset meaning buffer stopped working realizing much powerful tool hand disassembly analysis properly recognize format correctly used basic featureset analysis hex editor displaying byte width two per row searching hex byte sequence regex support able find rom using specific opcodes easily later finished emulator started developing disassembly analysis plugin using python scripting support ran inconsistency documentation eventually figured everything got pretty disassembly arrow visualizing control flow jump call later discovered actually support core need enable explicitly adding command line argument autodetected file rom disassembly support decent analysis part omission mistake leading le nice graph using python version basis managed improving c version analysis plugin level even surpassed c api allows adding extra metadata individual instruction inline commentary pending pr functionality expect merged soon testing maximum speed set firestarter recompile file save added directory project loadpath always launched new emacs instance loaded package emulated rom file ideal much test hard detect regression way point decided give great buttercup library another try wrote set test exercising every supported instruction edge case could think executed test vm initialized opcodes loaded called often needed testing state register affected part machinery quite bit grunt work due repetitive nature code gave greater confidence messing around code retesting everything took le second make mistake though excessively testing complicated part package believe worth testing simple part way replacement normal usage uncover completely different bug safety net make sure code change break basic feature rendering retrospectively quite ride normally pick suitable game multimedia library done emacs luxury go need library favorite way drawing graphic emacs creating svg fly using esxml library turned prohibitively expensive fail meeting performance goal also generated excessive amount garbage tree recursively walked thrown away variation template string resembling target svg replacing part generating image attempted quickly gave bothersome coming suitable identifier replacing correctly still want drop svg idea considering basically tiled graphic tile oversized pixel considered creating two svg image white black tile respectively inserting character line downside approach emacs handling line height figure completely suppress kind gap rendering gamegridel somehow solves rather convoluted code point ready go back plain text remembered face thing used paint background text black white annoying gap could finally work started figuring improve rendering simple solution always erasing buffer content reinserting work plenty optimization possibility obvious one using dirty frame tracking tell screen even needed redrawn word code could set flag main loop discovered set would redraw unset next redrawing changed part keep copy current previous state screen around compare repaint changed bit transfer current previous state change pixel buffer erase insert correct one final optimization occurred much later implementing super instruction longer possible play game smoothly quadrupled resolution profiled discovered erasing text bottleneck considered situation hopeless fiddled around xbm graphic backed bitvector much luck getting work nearly well low resolution occurred try change text property existing text instead replacing text fixed remaining performance issue another thing realized anything higherresolution require extra trickery maybe even involving c module garbage collection woe code may fast rendering impeccable every bouncing letter animation stutter congratulation run garbage collection ruining day language like c much obvious allocate memory heap dynamic language much harder pin safe pattern creating new object fly strictly forbidden tried fairly hard avoid completely succeed staring hard code found code transferring current old screen state using copytree kept allocating vector time avoid wrote memcpystyle function copied value one array another one another sneaky example initialization emulator state assigned zerofilled vector variable noticed one due test runner printing running time test took fraction millisecond every six test took millisecond obvious reason turned garbage collection rediscovered fillarray function behaves much like memset c used initialization vector assigned declaration time instead pause gone guarantee last able observe pause sound emacs compiled sound support playsound function unfortunately big flaw long sound playing emacs block using nonstarter initially tried using visual bell inverts part screen replacement discovered equivalent sitfor calling repeatedly row worst case pending user input wait long interval combined therefore easy builtin solution allow user plug solution defined two customizable function defaulting displaying clearing message idea given suitable asynchronous function could kick beep later stop spawning process one thing easily asynchronously way control subprocess start stop playing sound file would good enough solution remembered mplayer slave mode mpv improved multitude way looked easiest way remote controlling turn mpv away slave mode favor controlling via fifo socket surprise actually made work via fifo full proof concept found readme user input support two way checking user input checking whether key pressed nonblocking waiting key pressed blocking game library worth writing emacs distinction key mouse event pondering issue decided fake keeping track key last pressed generic key handler function comparing timestamp current time reasonable timeout key considered pressed otherwise solving problem required far effort emulator point sort state machine tracked whether running boolean variable implement pause command reworked variable code using mindful current state playing paused waiting user input way command merely changed current state waiting input set global variable register filled pressed key set stage generic key handler function continue execution function detected waiting state valid key pressed would record respective register put emulator playing state actually testing keypad demo rom unveiled minor bug interaction main loop redrawing logic remember number cpu cycle executed redraw triggered needed well imagine middle cpu cycle executed state changed waiting redraw never happened would produce inconsistent screen state changed repaint immediately furthermore state changed waiting loop would still execute cycle needed despite blocking wait therefore add extra check main loop constant amount cycling whether state changed yes skeep loop iteration alltogether super point pretty much done implementing full feature set started playing game like tetri brix alien yet satisfied strange reason probably longed distraction set implement remaining super instruction unlike main instruction set nearly well documented main resource schiptxt file briefly describes extra instruction problematic extension extended mode double screen dimension requiring clever way draw bigger smaller screen whenever toggled two way implementing thing drawing one two separate screen object painting correct one alternatively always drawing big screen rendering downscaled mode needed simplicity sake went first option extra scroll extension allow game programmer efficiently change viewport though reason forgot instruction scrolling challenge change screen content inplace done correctly extra care necessary accidentally overwrite content needed move elsewhere trick iterate reverse order screen line necessary instruction optimization later ready play probably silliest arcade game ever conceived joust sprite picture supposed knight flying ostrich trying push lance look like flying rabbit musing writing emulator give great insight machine actually work detail like memory mapping glossed feel far intuitive implement one downside play game enjoyment improve emulator understand machine game demo rom revealed bug emulator deal drawing sprite go outside boundary cowgod technical reference tell wraparound blitz david winter seems think otherwise rendered wraparound player sprite collides immediately pixel edge game screen displayed decided case forego recommendation clip rendering screen edge always easy make decision quirk seem fairly reasonable preferrably setting vf flag indicate overflowunderflow condition arithmetic although always specified quirk seem fairly obscure interpretation super extension lowresolution mode demo insists instead drawing highresolution x sprite drawn x instead appear affect game requires significant support code decided implementing one case conflicted enough different interpretation bit shifting operator introduced customizable toggle incorrect popular behavior default
145,Lobsters,emacs,Emacs editor,Elisp Cheet Sheet,https://github.com/alhassy/ElispCheatSheet,elisp cheet sheet,elispcheatsheet website listing sheet pdf found orgmode cheatsheet system table content function quote quasiquotes unquotes read variable list listlike structure generic setter record block code conditionals loop exception handling type overloading macro function separate namespaces quote quasiquotes unquotes read variable list listlike structure array generic setter record block code conditionals pattern matching loop loop exception handling type overloading dash write emacs extension using haskell directly macro backquotes splice comma,elispcheatsheet quick reference core language emacs macro website mostly common lisp elisp syntax based reading land lisp listing sheet pdf found unruly html rendition reference sheet built around orgmode cheatsheet system table content function quote quasiquotes unquotes read variable list listlike structure generic setter record block code conditionals loop exception handling type overloading macro read print everything list find name execute describesymbol name closing parens invoke cx ce evaluate find key press execute ch k key press find current mode execute ch describemode essentially comprehensive yet terse reference provided function function invocation f xₙ eg message hello closing parens invoke cx ce execute warning argument evaluated function executed prefix invocation mean use name since f b parsed applying function f argument b eg using function named successor function function definition de fine fun ctions defun myfun argₖ header signature function performs task documentation optional instruction body return value function result last expression executed documentation string may indicate return type among thing anonymous function lambda argₖ bodyhere make way later invoke setq myf lambda x x funcall myf myf invalid funcall myf columnbreak make immediately invoke funcall lambda x x work deprecated lambda x x function firstclass value variable function separate namespaces elisp language function represented name g obtained call function g also denoted g sharp quote behaves like usual quote cause argument compiled lambda macro call function rarely need quote lambda h variable referring function funcall h xₙ call function argument xᵢ apply g funcall g g recursion tri angle number tri n defun tri f n n funcall f n tri f n tri identity tri lambda x x run ch tri see two item location determines dispatch setq tri tri identity tri setq tri lambda x x tri tri use funcall apply call function bound variable refer function outside function call using sharp quote may positional optional argument optional named argument position matter unsupplied optional argument bound nil cldefun f optional b c format b c f nil f b b f b c b c cldefun g key b nice c format b c g c b g c nice keywords begin colon k constant whose value k quote quasiquotes unquotes quote x refers name rather value x superficially similar pointer given int x x name address whereas x value quote simply forbids evaluation mean take literally see rather looking definition evaluating note x quote x akin english quoting word refers word denotes let u treat code data eg evaluates function call value another example code data funcall yield elisp expression either atom function application else atom simplest object elisp evaluate newline eg hello two three english sentence list word want make sentence word parameter use quasiquote like quote allows u evaluate data prefix comma usually case quasiquoted sentence happens function call case use eval executes code data form ie quoted macro essentially function return sentence list may happen contain code quote sentence data sentence executing data code eval setq name jasim quasiquotes sentence computation code hello name welcome final example show lisp treat data code interchangeably language us structure store data code called homoiconic read variable global variable create update setq name value generally setq nameₖ valueₖ use devfar global variable since permit documentation string update must performed setq eg defvar myx cool thing setq x set quote x variable assigned set take quoted identifier evaluated value associate variable set quoted setq avoids hassle quoting name generally set sym v assigns value sym value v local scope let nameₖ valₖ bodyblock let permit later binding refer earlier one simpler let indicates reader dependency variable let parallel let sequential local function declared flet flet eg flet go x x go sequence symbol valid identifier including x xyz even elisp name case sensitive elisp dynamically scoped caller stack accessible default defun woah caller local work nasty bug moreover better defined scope setq work benefit variablebased scoped configuration defun addone x adding one input innocently calling library method woah let work x woah may change work access work addone list listlike structure produce syntactic unevaluated list use single quote construction con xₖ xₖ head content address part register car xₖ tail content decrement part register cdr xₖ xₖ eg con con con nice nil list nice nice since variable refer literal function lambda literal produce form take function argument eg standard mapcar may construed defun mymapcar f x null x x con funcall f car x mymapcar f cdr x mymapcar lambda x x mymapcar upcase b cat b cat pair x con x association list alist list formed pair useful changeable collection keyvalue pair assoc function take key alist return first pair key end alists list rose tree lisp easily formed list list inner list length first symbol parent node second list child list formed chain con cell getting setting slow likewise alists performance desired one us array hash table respectively instead particular performance array hash table always requires constant amount time whereas performance list alists grows proportion length however size array fixed change thus hash table lookup cost well issue hash collision use worth large amount data otherwise list way go array created like list using square bracket getter aref arr index hash table created makehashtable getter gethash key table look key get nil value key value nil gethash take final optional argument value return key found nil default generic setter since everything list lisp g way get value variable x setf g e update x location g refers element e hence getter g freely obtain setter setf g element update setq x x setf nth x nice x nice circular list setq b c b c setf cdddr b c b mean repeat index nth record want keep list related property list remember position keep track item may write helper function keep track instead could use structure defstruct x record fieldsslots fᵢ default dᵢ fₖ dₖ automatic constructor makex keyword parameter initialising subset field hence expt k kind possible constructor combination makex fₖ valₖ fᵢ may omitted automatic runtime predicate new type xp makex true xp nope nil field accessors xfᵢ take x record yield value field update setf xfᵢ x valᵢ defstruct book title year setq ladm makebook title logical approach discrete math year booktitle ladm logical approach discrete math setf booktitle ladm ladm booktitle ladm ladm advanced oop construct found within clos common lisp object system also used research tool studying oop idea block code use progn function treat multiple expression single expression eg progn message hello setq x sleepfor message format x sleepfor explicit return value like curlybraces c java difference last expression considered return value block herein block number sequential expression need nt wrapped progn form lazy conjunction disjunction perform multiple statement stop fails return nil sₖ perform multiple statement one succeeds return nonnil sₖ coerce statement sᵢ returning nonnil progn sᵢ likewise coerce failure progn sᵢ nil jump controlflow transfer perform multiple statement decide would like stop akin c goto declare label catch goto throw catch myjump bodyblock body may contain throw myjump returnvalue value catchthrow returnvalue useful bodyblock say loop may multiple catch different label according nesting loop possibly informatively named throw symbol break using name continue throw symbol catchthrow body loop give impression continuestatements java using name return throw symbol catchthrow body function definition give impression possibly multiple returnstatements java well early exit simple law catch sₖ throw r progn sₖ r provided sᵢ simple function application form thought instance catchthrow whence control flow first boolean operation second sₙ e xᵢ true e sₙ e xᵢ true e conditionals booleans nil empty list considered false else true note nil nil deep structural equality equal x comparison expected eg x denotes x condition thenexpr optionalelseblock note x x nil newline better c thenblock c progn thenblock note elseclause block everything thenclause considered part x mean x nonempty akin c style idiom linked list cond optional defaultactionblock columnbreak pattern matching type defun go x pcase x bob c c otherwise shuck go bob go go hallo shuck avoid nested ifthenelse clause using cond statement lazy generalisation switch statement sequentially evaluates expression testᵢ performs action first true test yielding nil test true use pattern matching even allows predicate case position ch hint write predicate think else return besides witness returning truth nonnil value denote true eg member e x return sublist x begin e loop let sum first number way let n sum n incf sum incf message format sum sum columnbreak c elisp x incf x x decf x optional default repeat body n time current iteration let result n dotimes n result incf result foreach loop iterate list let result mylist numbersequence dolist e mylist result incf result e loop result optional default nil return value loop expression example construct defun mycoolfunction n sum number n divisible catch return n throw return early exit let counter sum catch break true catch continue incf counter cond equal counter n throw break sum zerop counter throw continue nil otherwise incf sum counter mycoolfunction mycoolfunction mycoolfunction special loop construct provides immensely many option form nearly kind imperative loop eg pythonstyle downfrom forloops java dowhile loop personally prefer functional programming wont look much exception handling attempt dangerous clause catch possible exceptional case via associated handler conditioncase nil attemptclause error recoverybody ignoreerrors attemptbody conditioncase nil progn attemptbody error nil ignoreerrors nope nil type overloading since lisp dynamically typed variable kind data possibly different kind data different time running program use typeof get type given value suffixing p give associated predicate newline eg function functionp difficult maintain type added defun sadadd b numberp numberp b b format b sadadd sadadd nice nice better seperation concern cldefmethod add number b number b number type cldefmethod add b format b catchall type add add nice nice list specific function like listlength mapcar may efficient generic function require extra type checking generic one easier remember following generic function work list array string findif get first value satisfying predicate count find often element appears sequence position find index given element check element satisfies given predicate every check every element satisfies given predicate reduce take binary operation sequence mimic forloop use keyword initialvalue specify starting value otherwise use head sequence sum add number crash string length subseq sort dash modern list library emacs us haskelllike name list operation likewise useful emacs string manipulation library infact write emacs extension using haskell directly macro macro let u add new syntax like single let noisy parens let x message x better x message x defmacro var val rest body let var val body look like macroexpand x message x let x message x columnbreak progn first x z x defmacro first rest body car body need use progn defmacro notfirst rest body progn cdr body macroexpand notfirst x z body x z cdr body z progn cdr body progn z certain problem elegantly solved specific language construct eg list operation generally best defined pattern matching macro let u make best way solve problem language give u macro expansion happens runtime function execution argument passed macro contain raw source code backquotes let u use comma cause actual variable name value used x metavariable value x refers real variable value rest marker allows u multiple statement end macro macro expander provides remaining expression macro list content may inserted place list using splice comma need ensure progn use list element inplace pre list sₙ post pre sₙ post macroexpand take code expands macro useful debugging macro equation checked running macroexpand newline eg c sₙ c progn sₙ nil hold since macroexpand c sₙ c progn sₙ var argument macro var occurs multiple time since argument macro raw source code occurrence var execution code referenced var avoid repeated execution using let capture result call re use re use site made use name re user use name correctly avoid unintended capture using gensym provide u globally unique name bound variable say r bind result executing var fresh name r whence let r gensym let r var note name r outside backquote part code run macro expansion time runtime value final let backquoted matter make reference r instead make use name refers r neato ex remove repeated execution defmacro twice var list var var test nt accidentally variable capture passing insert statement see many time insertion made macro intentionally use variable capture feature rather bug provide name available macro body called anaphoric macro eg split list yes provides name head tail yes body refer head tail given list say via let argument list empty whence elegant pattern matching list exercise define split vfill read print reading mean parsing expression textual form producing lisp object eg way load lisp file printing lisp object mean producing textual representation operation lisp mostly inverse readfromstring command work like read command let u read lisp object string instead directly console defun sumtwo let fst snd setq fst read setq snd read eval fst eval snd run sumtwo input lisp make writing repl astonishingly easy loop follows print result evaluating read prompt loop print eval read beautiful loop merely loop forever print read command work kind data list data structure hence must use quote want read string rather symbol example major problem repl eval executes potentially malicious lisp command entered user ideally one check read lisp object safe one allowable evaluates
146,Lobsters,emacs,Emacs editor,Emacs Lisp List,http://www.damtp.cam.ac.uk/user/sje30/emacs/ell.html,emacs lisp list,emacs lisp list camacuk view recent change elpa melpa ellel ellel emacswiki sorted date cover note b c e f g h j k l n p q r u v w x z amenuel abacusel abbrevsortel abcmodeel abcmodeel acldocel actrmodeel adamodeel advogatoel aftersavecommandsel agchatel alertel alignel alignel alignletel alignregexpel alignstringel allel alossageel altfontmenuel analogel anayael andersljavafontlockel ansicolorsel antel antlrmodeel anyinimodeel anythingel anythingconfigel apachemodeel apelel aplacmodeel apmel aproposel aptsourcesel aptupgradeel aptutilsel archieel arrangeel artistel asciiel asciidisplayel aspectjmodeel astronomyel asyncevalel atticel auctexel autoargmodeel autocapitalizeel autocompileel autodefineel autodictionarymodeel autodiffel autoinserttkldel autorecompel autocapel autoconfmodeel autofitframeel autoloadel autorevertel axiommodeel babelel backgroundel backupdirel balancemodeel bannerel barcursorel batteryfreebsdel batterynetbsdel bbdbel bbdbexpireel bbdbgnokiiel bbdbvcardexportel bbdbpalmel bbdbrcel beatnikel benchmarkel bhlel bibciteel bibfindel bibtexel biffel bigfontel bikeel binclockel bindingsel bkel blackbookel blankmodeel blinkingcursorel bloggerel bmel bmmancmpltel bongoel bookmarkel boshiamycueel boxquoteel branchel breadcrumbel briefel briefsel browsehelpel browsekillringel browsekillringel browseurlel bsel bubbletel buffmenuel bufferstackel bufferthumbnailel buffertimestampel buffertimerel buffermenuel buffiel buttonlockel cboxesel ccommenteditel cincludesel calcatholicel caldeskcalendarel calcel calculatorel calfwel camelcasemodeel capslockel carbonfontel catdocel ccmodeel ccmel cddbel cddbel cdiel cdlatexel cdrwel cellel cfengineel cfmel cfsel cgiel changemodeel checkmailel checkdocel chessel chillmodeel chooseel chronometerel cibel cifel cldocel clearcaseel clhsel climdocel clipperel coffeeel cogreel colhighlightel colormoccurel colormodeel colorthemeel comintpopupel comintredirectel commandotherframeel commentel commentedinfoel companymodeel compilationrecenterendel compileel compileel compilebookmarksel compjugael completinghelpel concordanceel constantsel contextel coroutineel counterel cparenel cparseel cperlmodeel cricketel crontabmodeel crosshairsel cryptel cscopeel csdeel csharpmodeel cssmodeel cssmodeel csvel csvmodeel ctypesel cuael cualiteel cualitebootstrapel cursorchgel cuseditel customel cvsannotateel cvscommitel cwarnel cyclebufferel cycleminiel cyclebufferel cygwinlinkel cygwinmountel czscmel dapptel dflockel dmealtimerel dtestlinksel dabbrevhoverel dacodeel damlel darel darcsumel dashoutlinemodeel dbfrobsel dcdel debianbugel dedicatedel deffaceconstel defaultbannerel defaultcontentel defshellel delimcolel delphiel delselel demaxel derlel desireel desktopkderecentel desktopmenuel dfel diel diaryoutlookel diarypilotel diarytodoel dicel dictel dictwebel dictationel dictionel dictionaryel diffel diffmodeel diffsavebufferel digel digbrowserel diminishel directoryfilesdeepel diredel diredael diredddel direddetailsel diredefapel diredsingleel diredsortmenuel diredsortmenuel dirtreeel dirvarsel diskel dismalel dmssigel dnamodeel docmodeel docbookideel domel dopeel doremiel doremicmdel doremifrmel doremimacel draculamodeel dupwordsel emhaliasel eotherwindowel easeel easytodoel ebackupel ecasoundel ecbel echopickel edbel edeel edimodeel ediffel ediprologel edlibel eeel eevel efineel efliteel egocentricel eicqel eieioel eiffelmodeel eldavel elderel eldomodeel eldocel elibel elipel elitel eliteel elktestel ellel elmakeel elpel elpointel elppel elsemodeel elservel emzleel emacroel emacsclel emacsimapel emacsinitel emacsmuleel emacsnameel emacswikiel emacspeakel emacsvfaqel emmsel emvadersel eonel eperiodicel epoel erbotel ercel erlextel escreenel esheetel eshellel esmsel essel etachel etaskel eudcel evalexprel evalsexpincommentsel excerptel expectel extviewel eyedropperel facelistel facemenuel facesel faithel faqmodeel fastfuzzel fdbel feedmailel festivalel fetchel ffpathsel ffapel fffel fffelispel fffrfcel fileconfirmel filemenuel filesel filesetsel fileutilsel filewatchel fillcolumnindicatorel filladaptel fillcodeel findandplayel finddiredel finddiredel findfilesel findfuncel findlibraryel findlibraryel findlispel findrel findstrel fipel fitframeel flashparenel flashmakerel floatbgel floatingtoolbarel floblel flowfillel flymake flymakecursorel flymakeforjslintforwshel flyspellel flyspellbabelel fmel fmailutilsel foldingel foldingoel followel followmouseel fontlatexel fontlockel footnotesel fortuneel fortunemodeel fraccel frameel framecmdsel framefnsel fringehelperel fromel fshellel ftcpel ftelnetel ftnchekel fullackel fuzzel fvwmcommandel garbleel gdocsel gedcomel geekel genautoel genconvel ggomodeel gimpshellel ginelannounceel ginelstringel gineltemplateel glassesel glemodeel globalmodesel globrepel glyphhighlightel gnuplotel gnusel gnusaliasel gnuseyecandyel gnusfilterhistel gnuspersel gnuservel gnushushel gobyel golispel googleel googlecontactsel grabboxel gradeel grepel grimodeel gselocateel gsenumberrectel gserenameel gtagsel gtklookel guessoffsetel guessstyleel gutenbergcodingel gwizardel hachetteel hacklocalsel haddocel hangmanel haskellel haskelllatexel haskellmodeel hbmkel headeractionel helpel helpfnsel helpmacroel helpmodeel helpexel hexrgbel hhmumlauteel hidecopyleftel hidelinesel hidesearchel hideshowel hierimenuel highlightel highlightbeyondfillcolumnel highlightcompletionel highlightcontextlineel highlightcurrentlineel highlightparenthesesel highlightsymbolel highlighttailel highlineel himarkel hllineel hllineel hlsexpel hoboel horoscopeel howmel htmlcodingel htmlhelperimenu htmlhelpermodeel htmllangtimestampel htmlscriptel htmltocel htmlfontifyel htmlizeel httpheadersel httppostsimpleel httpdel hugsmodeel hypercompileel hyperboleel hyperspecel ibsel ibufferel icalendarel iciclesel icompleteel icsel idlfontlockel idlerequireel idledoel idlwaveel idnael idoel ietfdocel ifilegnusel igrepel iimageel ilispel ilocatelibraryel imagetextel imaximael imdbel imdbaddsmodeel imdbsel imenuel imenugoel imenuoutlineel indenttabsmaybeel infoel infoaproposel infobookel initsplitel insertrandomquoteel installelispel ipael ippel ipythonel isearchel isearchbel ishlel isohtmlel isooemel isosgmlel ispellel issmodeel iswitchmenuel iswitchbel iswitchbfcel itunesel jammodeel jasminel javacompleteel javaopenel javadochelpel javascriptel javascriptmodeel jdecflowel jdegenextrael jdehotspotel jdejalopyel jdestackel jdetransmogrifyel jdeeel jdokel jessmodeel jfoldingel jhgpineel jiggleel jjarel jlogel jmakerel joccurel jpackel jpegmodeel jseeel jsphtmlhelpermodeel jswatel jtemplateel junkbustel kbdrawel kdicel keepbuffersel keydefel keywizel keywordsel kibologizeel killalawyerel killbuffersel killringsearchel killbufel labbookel labbooksignel lacarteel latexdocel latexmarkupel latexspreadel latextoolbarel latexunitsel lazydesktopel lazylookel lbdbel ldapel ldrawmodeel librequiresel licenseel lieceel lilypondindentel linenumel linenumbersmodeel linemenuel linesel linksel linmagmodeel linumel lispindexel lispreel listregisterel listbufel livemodeel ljupdateel locdictel loggerel logoel longlinesel lookoutel lookupel loutmodeel lpcmodeel lslispel ludeel mabbrevmenuel mackeymodeel macrogenerateel macromathel macrosel mailcentricreminderel mailmarkupel mailcryptel mailrcel mairixel makehexel makeinfoinfoel malyonel manpreviewel maniacel manuedel mapwinel maplemodeel maplevel mapreplaceel marklinesel markervisitel masfilehistoryel mathel mathematicael mathsmenuel matlabel maximael maximafontlockel mcel mcgpgfilemodeel mcsafesignmessageel mcalcel mcompleteel mdbel mdeeel mdfindel meditateel menubarel messageutilsel messagexel messkeywel mewel mgpel mheel mhcel micparenel mimecomposeel minibuffercompletecycleel minieditel mirandamodeel mirrorel misccmdsel miscfnsel mixalmodeel mkbackel mkhtmlel mldonkeyel mmael mmmel mmmmodeel momodeel moccureditel modecompileel modelineposnel molproel momentaryel monacompileel monkel monkeyel mouseel mouseembraceel mouseextrasel mousefocusel mousymacroel mouumoel mpcel mpcelel msgcodesel msnel mspoolsel mssel mthesaurel mtorusel mtraceel multimodeel multimodemodeel multiregionel multiselectel museel musicallettersel muttel muttaliasel namazuel naosel narrowstackel natselel naviel ncel necsel neophyteel neroel netutilsel nethackel netrexxmodeel newcommentel newmailmodelineel newshackel newstickerel ngnel nnirel nnirgrepmailel nnmairixel notebookmodeel notesmodeel noviceel nowebel nowebmodeel noweboutlineel nqmbmel nrnhocel nrofffilladaptel nsbrowseel nturlel nukewhitespaceel numberedoutlineel nxhtmlel nxmlmodeel obarrayfnsel obfusurlel occurxel octel omdocmodeel oneononeel oobrowserel openglel optionsel orbixel orderheadel orgel orgmouseel organizermodeel orthodoxel orwellel osxosascriptel osxtypecreatorel outdentel outlineel outlinemagicel pabbrevel padrel pagerel paletteel parenglintel passwordel pbpopupel pbookel pcbufswel pckeysel pclcvsel pcmplarchel pdbel pdbel perkymbfel perlmyvarel perldocel pgel pgpwrapperel phonebookel phonemodeel phpmodeel phpmodeel phpmodeel pickbackupel pilotdocel pilotmemoel plannerel playlistel plimodeel plsmodeel plsqlel pmdel pmwikiel pomodeel pointbackel pomel pomodoroel pongel popmodeel popupmenuel postel povmodeel powershellel powermacrosel ppel ppclel predictiveel prefixkeyel prettyminibufferel previewel prgcommentel printingel procmodeel progralignel projectel proofgenel propertiesel prosperel protbufel protocolsel psmodeel psmodeel psprintel psgmlel psgmldssslel psgmljadeel psgmltableel psqlel psvnel punycodeel puzzleel pwsafeel pythonmodeel qflibel qpdecodeel qsearchel quackel quererel quickyesel quickurlel quotesel railsel rainel randommanel rationalel raysel rcircel rebuilderel readlibraryel recentaddressesel recentfilesel recentfel recordsel rectmarkel redoel reduceel refillel reftexel regressel rememel rememberel replaceel reporterel requireallel revbufsel reviveel rewriteel rfcel rfcutilel rfcviewel rfcrel rfcviewel rfringeel riel rieceel rightjustifyel rijndaelel ringel rknymel rktodoel rloginel rmailmimeel rmailspamfilterel rmimeel rotateel rpmel rsinfoel rsibrkel rsshelperel rstel rszminiel rtfel rtfsupportel rubymodeel runcommandel safescrollmouseel safttoel sandboxel sasmodeel savehistoryel savehistoryel saveframesel sawfishel sbheiseel scanel scannerel scheduleel scratel screenlinesel screenlineel screenplayel screenplayel scriptel scrollinplaceel secondselel selectxfaceel semanticel semiel sendmailaliasel sendmailmodeel servicesel sesel sessionel setnuel setnuel setupel setupcygwinel setupkeysel sgmlidel shautoconfel shbufel shellcommandel shelltoggleel shopel showwspaceel sierotkiel sievemodeel sigquoteel sigadaptel sigbegoneel sillymailel simpleel simplecalltreeel simplemergeel slashdotel smartcompileel smartdndel smartsigel smartymodeel smimeel smlmodeel smyrnoel soapel sorterel sourcepairel spamstatel spamprobeel spamprodel spamtrapel specmanmodeel spectremodeel speechdel speedbar speedreadel spellnumberel spicemodeel splitrootel spokesel spreadel sqlel sqlindentel sqlmodeel sqltransformel sqlplushtmlel sqlplusmodeel srmodeel sregexel sshel startel startoptel starteamel stockquoteel stoutel stringsel structel studlycapsel stufeel sudokuel suggbindel sunrisecommanderel superfoldel supertabel surveyel swbuffel swiftexel swissmoveel switchfilesel swwel synonymsel sysel syslogmodeel tabdisplayel tabbarel tableel tabsel taclmodeel tagbodyel tailel tailmodeel talmodeel talcumel tcel tehompsgmlel tehompsgmlfoldbykeyel tehompsgmllinkel tellibel tempbufel templateel temposnippetsel testcasemodeel testcoverel texletterel texmathpreviewel texmmael texwcountel texidocstringmagicel texinfomarkupel texletterel texttohtmlel textstatsel thesaurusel tfsel thingcmdsel thingatptel thinksel thumbfrmel thumbsel tidyel tigerel tildifyel timeclockxel timerel timerfunctionsel timingupel tintinstancesel tinytools titletimeel tldel tmenuel tmmoflel tntel todoel todomodeel todooel togglebufferel togglecaseel toggleoptionel togglesourceel toolbarel toolboxel tpumel trackscrollel trampel transel translateel translationel trashcanel treewidgetel tsqlindentel ttyformatel twiddleel twomodemodeel typebreakel typematicel typingel typopunctel uapptel ucolorcycleel umandelbrotel uvmcolorel uboatel umlauteel unaccentel underel undobrowseel undogroupel undocel unibasicel unicodeel unicodeinputel uniqel unitsel unmungegeneralel unsafepel unscrollel uptimeel uptimesel uuinsertel vbnetmodeel vcel vcel vcdarcsel vchooksel vcardel velel verbisteel verilogmodeel versioninfoel versionsel vhdlmodeel vimpulseel visiturlel vkillel vlineel vlogmodeel vmel vmbiffel vmbogofilterel vmgrepmailel vmmultdomel vmpcrisisel vmpineel vmpsprintel vmserialel vmvcardel volctrlel vorbiscommentel vovmodeel vtxel vvbmodeel wajigel wanderlustel warlordel watsonel waveel wblinenumberel wclockel wcountel wdiredel webjumpel webjumpplusel webloggerel wgetel whatdomainel whichel whitespaceel whizzytexel whocallsel widecolumnel wikiel wikiinterel wikinavel wikiremoteel wikipediamodeel wimpydelel windmoveel windowel windownumberingmodeel windowsel winhistel winpointel winringel womanel wordcounterel wordwrapel wordnetel workingel worklogel wstrimel wtfel wupel wwtimeel xfaceel xmigrantel xsymbolel xaeel xbaseel xcscopeel xffel xgtagsel xmlcodingel xmlliteel xmlparseel xmlrpcel xmlunicodeel xplainmodeel xrayel xrdbmodeel xrefel xslideel xsltprocessel xtermextrasel xtermfrobsel xtideel xtlael xwemel xxmlel yahamel yatexel zoomfrmel b c e f g h j k l n p q r u v w x z,emacs lisp list last updated wed dec entry mail camacuk suggestion change list view recent change list longer actively updating list hope people start using various packaging system elpa melpa instead modern elisp however old link want update email fix sat jun update ellel point ell cambridge mon sep nascif abousalhneto fixed bug ellel entry found new version ellel par xml file rather html fri nov visit emacswiki looking somewhere upload lisp file post gnuemacssources wed oct thanks effort nascif abousalhneto list viewed date entry lisp file updated please see list sorted date please read cover note detail quick jump first entry letter b c e f g h j k l n p q r u v w x z simple little puzzle game contact dave pearson amenuel create menu specified directory contact seiji zenitani abacusel abacus calculator contact valvassori moïse abbrevsortel insert series number text contact mengarini abcmodeel major mode editing abc music file contact matthew k junker abcmodeel major mode editing abc file contact michael abraham shulman acldocel interface franz allegro common lisp documentation tree contact larry hunter actrmodeel actrmodesupport emacs contact hedderik van rijn adamodeel majormode editing ada source contact emmanuel briot advogatoel elisp mode post diary entry advogatoorg contact ramakrishnan aftersavecommandsel run shell command saving file contact karl hegbloom agchatel comintbased emacs interface chatting agchat contact noah friedman alertel alert severe weather new mail biff anything contact goel alignel align text separated whitespaces column contact matthias helmling alignel align region according regexp contact john wiegley alignletel align expression lisp let contact kevin ryde alignregexpel align region according regular expression contact steve koren alignstringel align string component several line contact markus bjartveit krüger allel edit line matching given regexp contact per abrahamsen alossageel viewlossage automatic refresh contact riku saikkonen altfontmenuel alternative mouse font menu x contact kahlil kal hodgson analogel monitor list file command output contact matthew p hodges anayael emacs interface anaya online spanish dictionary contact daniel german andersljavafontlockel font lock support java contact anders lindgren ansicolorsel translate ansi textproperties contact alex schroeder antel utility ant contact peter breton antlrmodeel major mode antlr grammar file contact christoph wedler anyinimodeel keyword highlighting ini file etc based source truth contact robert fitzgerald anythingel open anything contact tamas patrovics anythingconfigel predefined configuration anything contact tassilo horn apachemodeel major mode editing apache configuration file contact jonathan marten apelel portable emacs library contact apel group aplacmodeel major mode aplac netlist file contact brennan sharp apmel using apm advanced power management within x emacs contact dinesh g dutt aproposel extension standard library aproposel contact drew adam aptsourcesel mode editing apt sourcelist file contact dr rafael sepúlveda aptupgradeel aptget upgrade frontend debian system contact richard klinda aptutilsel emacs interface apt debian package management contact matthew p hodges archieel query archie server parse result contact lars magne ingebrigtsen arrangeel rearrange filter list contact tom breton artistel draw ascii graphic mouse contact tomas abrahamsson asciiel ascii code display contact vinicius jose latorre asciidisplayel highlight special ascii character another buffer contact colin walter function convert ascii contact marco parrone font lock keywords motorola dsp assembly language contact luis fernandes aspectjmodeel aspectj extension java mode contact gregor kiczales william griswold astronomyel compute time astronomical nautical civil twilight calendar contact bill white asyncevalel execute emacs lisp separate process contact nikolaj schumacher atticel maintain backup time stamp contact thomas link auctexel package support writing formatting tex file contact david kastrup autoargmodeel minor mode make number prefix default contact anders lannerbäck autocapitalizeel automatically capitalize upcase word contact kevin rodgers autocompileel auto compile support developer contact higepon autodefineel define function fly contact michael abraham shulman autodictionarymodeel dictionary switcher flyspell contact nikolaj schumacher autodiffel automatically generate diff directory content contact steve kemp autoinserttkldel automatic insertion text new file contact kevin davidson autorecompel automatically recompile emacs lisp file contact michael abraham shulman autocapel autocapitalize beginning sentence contact dave love autoconfmodeel autoconf code editing command emacs contact martin buchholz autofitframeel automatically fit onewindow frame buffer contact drew adam autoloadel extension standard library autoloadel contact drew adam autorevertel revert buffer file disk change contact anders lindgren axiommodeel interface axiom computer algebra system contact jay belanger babelel emacs interface babelfish translation service contact eric marsden backgroundel background job gnu emacs contact joe keane backupdirel allow backup file live directory contact greg klanderman balancemodeel major mode recording transaction balancing bank account contact bob newell bannerel make banner string contact john sturdy barcursorel package used switch block cursor bar contact joe casadonte batteryfreebsdel parse apm output contact kangmin liu batterynetbsdel display battery status information netbsd contact daniel lundin bbdbel insidious big brother database phone address dbase contact ronan waide bbdbexpireel expiry expireproof entry bbdb contact nix bbdbgnokiiel export phone entry bbdb gnokii contact file contact martin schwenke bbdbvcardexportel vcard export bbdb contact jim hourihan bbdbpalmel bbdbpalm exporter bbdb database palm r address book contact neil w van dyke bbdbrcel harmonize message bbdbmailrc contact deepak goel beatnikel try implement beatnik interpreter contact arjan bos benchmarkel function benchmarking emacs lisp code contact lars magne ingebrigtsen bhlel b rute text h tml l atex contact bastien guerry bibciteel display cite ref label extract ref bibtex file contact peter galbraith bibfindel client get bibtex entry web contact nevin kapur bibtexel bibtex mode gnu emacs contact dirk herrmann biffel allmighty biff program emacslisp contact hirose yuuji bigfontel implement banner unix command contact eli barzilay bikeel calculate bicycle gearing contact bob newell binclockel display current time using binary clock contact dave pearson bindingsel minormode menu modeline contact drew adam bkel emacs support bitkeeper configuration management contact bryan osullivan blackbookel edit mail alias file userfriendly way contact hrvoje niksic blankmodeel minor mode visualize blank space tab contact vinicius jose latorre blinkingcursorel blinking cursor mode gnu emacs contact kyle jones bloggerel post blog support blogger api contact mark hershberger bmel visible bookmark buffer contact jo odland bmmancmpltel completion unix manual page name using whatis contact yuji bmonkey minejima bongoel bufferoriented medium player emacs contact daniel brockman bookmarkel extension standard library bookmarkel contact drew adam boshiamycueel help boshiamy input method chinese chinese page contact boxquoteel quote text semibox contact dave pearson branchel working multiple branch project contact rob walker breadcrumbel set bookmark like trail breadcrumb contact william wong briefel briefemulation emacs contact mirko link briefsel brief tm keybinding emacs contact tong sun browse hypertextversion common lisp language edition contact holger schauer browsehelpel contextsensitive help via www browser gnu emacs contact tim anderson browsekillringel interactively insert item killring contact nick hurley browsekillringel extension library browsekillringel contact drew adam browseurlel pas url www browser contact dave love bsel menu selecting displaying buffer alternative cxcb contact olaf sylvester bubbletel bubblepopping game contact paul du bois buffmenuel extension standard library buffmenu contact drew adam bufferstackel smart movement buffer list contact adrian kubala bufferthumbnailel maintain xpm interpretation buffer content contact thienthi nguyen buffertimestampel display buffer time stamp mode line contact matthew p hodges buffertimerel track time based buffer edit contact wes hardaker buffermenuel modifies xemacs buffer menu organize file directory contact brady montz buffiel buildfile finder smart compile wrapper build multiple java project contact raphael pierquin buttonlockel clickable text defined regular expression controlled fontlock contact roland walker cboxesel boxed comment c mode contact françois pinard ccommenteditel edit c comment contact kyle jones cincludesel find header file included source file contact john wiegley calcatholicel calendar function roman catholic liturgical calendar contact bill white caldeskcalendarel desk calendar style extension calendardiary contact dale gulledge calcel calculator gnu emacs part contact dave gillespie calculatorel simple desktop calculator contact eli barzilay calfwel calendar view framework emacs contact sakurai masashi camelcasemodeel minor mode editing camelcase word contact crmanning capslockel cap lock mode emacs contact john paul wallington carbonfontel fontsets carbon emacs contact takashi hiromatsu catdocel simple wrapper around catdoc word text converter contact steve kemp ccmodeel major mode editing c c objectivec java code contact alan mackenzie ccmel interface continuus change management tool contact henrik jönsson cddbel cd database interface contact william perry cddbel get cd track cddbcom contact christopher bowron cdiel interface emacs command line cd player contact matthew p hodges cdlatexel fast input method latex environment math contact carsten dominik cdrwel dired frontend various commandline cdrom burning tool contact tony sideris cellel spreadsheetlike custom application development system contact david otoole cfengineel editing cfengine configuration file contact dave love cfmel display current function method mode line contact davin pearson cfsel frontend cf cryptographic file system contact marco parrone cgiel using emacs cgi scripting contact eric marsden changemodeel minor mode displaying buffer change special face contact richard sharman checkmailel slightly sophisticated mail checking function contact john wiegley checkdocel check documentation string style requirement contact eric ludlam chessel play chess emacs contact mario lang chillmodeel mode editing chill ccitt high level language contact august hörandl chooseel nondeterminism inside elisp contact deepak goel chronometerel simple chronometer emacs contact marcelo toledo cibel complete buffer emacs contact carsten dominik cifel major mode editing mm cif file used crystallography contact dave love cldocel show common lisp operator variable information echo area contact yuji minejima clearcaseel clearcaseemacs integration contact kevin esler clhsel access common lisp hyperspec clhs contact sam steingold climdocel emacs interface harlequin reference contact larry hunter clipperel save string data use contact kevin burton coffeeel submit brew request coffee device contact eric marsden cogreel connected graph editor emacs contact eric ludlam colhighlightel highlight current column contact drew adam colormoccurel show occurrence regexp file buffer contact akihisa matsushita colormodeel minor mode colorizing line file contact knuth colorthemeel preview install color theme contact jonadab unsightly one comintpopupel maybe show comint process output window contact noah friedman comintredirectel redirect comint output multiple buffer contact peter breton commandotherframeel run command another frame contact heddy boubaker commentel comment region buffer contact noah friedman commentedinfoel insert informationlicense header buffer contact paolo gianrossi companymodeel inbuffer completion contact nikolaj schumacher compilationrecenterendel recentre end compilation output contact kevin ryde compileel extension standard library compileel contact drew adam compileel extension standard library compileel contact drew adam extension compileel contact drew adam extension compileel contact drew adam compilebookmarksel bookmark compilation command contact nikolaj schumacher compjugael emacs interface compjuga spanish verb conjugator contact bruce ravel completinghelpel enhancement displaycompletionlist contact yuji bmonkey minejima concordanceel show concordance table contact thomas link constantsel enter constant definition source code contact carsten dominik contextel major mode editing context file contact berend de boer save context previous editing session contact david neve coroutineel coroutines emacs lisp contact michael abraham shulman counterel insert series number text contact mengarini cparenel coloured parenthesis lispderived mode contact riku saikkonen cparseel parse c file allow searching function variable type contact eric ludlam cperlmodeel perl code editing command emacs contact ilya zakharevich bob olson cricketel get live cricket score news update inside emacs contact anand b pillai crontabmodeel mode editing crontab file contact james h gorrell crosshairsel highlight current line column cross hair contact drew adam cryptel code handling sort compressed encrypted file contact karl berry cscopeel interface cscope browser contact bill carpenter csdeel integrated development environment csharp contact matt bruce csharpmodeel major mode editing c contact dino chiesa cssmodeel trivial cs editing mode contact lars marius garshol cssmodeel major mode editing cascading style sheet contact karl landström csvel function readingparsing csv file contact ulf jasper csvmodeel major mode editing commaseparated value file contact francis wright ctypesel enhanced font lock support custom defined type contact anders lindgren cuael emulate cua key binding contact kim f storm cualiteel lightweight extendable toggleable cua emulator contact joe casadonte cualitebootstrapel bootstrap cualite contact joe casadonte cursorchgel automatically change cursor form depending context contact drew adam cuseditel extension standard library cuseditel contact drew adam customel tool declaring initializing option contact per abrahamsen cvsannotateel cv annotate interface emacs contact kevin burton cvscommitel smart cvscommit interface emacs contact kevin burton cwarnel highlight suspicious c c construction contact anders lindgren cyclebufferel select buffer cycling contact vladimir alexiev note broken cycleminiel cycle completion arrow key contact joe reiss cyclebufferel select buffer cycling contact kurt partridge cygwinlinkel cygwin symlink handling emacs contact edward oconnor cygwinmountel teach emacs cygwin style mount point contact klaus berndl czscmel cheezy scheme interpreter emacs contact noah friedman dapptel improved appointment notification system contact davin pearson dflockel personal syntax highlighting preference contact davin pearson dmealtimerel meal timer countdown system improves apptel contact davin pearson dtestlinksel automated internal hyperlink checker contact davin pearson dabbrevhoverel tooltipshow next completion openoffice contact goel dacodeel lecture de news dacode contact alexandre brillant damlel major mode filescontaining damloilrdf description contact mark burstein darel disk archiver dar interface emacs frontend backup utility contact stefan reichör darcsumel pclcvs like interface managing darcs patch contact john wiegley dashoutlinemodeel majormode similar outlinemode contact kevin burton dbfrobsel useful enhancement debugging contact noah friedman dcdel interface dcd cdplayer contact jeanphilippe theberge debianbugel report bug debian bug tracking system contact peter galbraith dedicatedel simple minor mode dedicated buffer contact eric crampton deffaceconstel macro defining face variable contact drew adam defaultbannerel update banner header file visited contact christian queinnec defaultcontentel fill new file visited contact christian queinnec defshellel define inferior shell contact kevin rodgers delimcolel prettify column region rectangle contact vinicius jose latorre delphiel major mode editing delphi source object pascal emacs contact ray blaak delselel improvement std library delselel work completionel contact drew adam demaxel delete narrow window frame demaximized contact anders lindgren derlel distributed erlang networking code contact luke gorrie desireel versatile configuration emacs lisp package contact martin schwenke desktopkderecentel interface emacs kde desktop contact michel schinz desktopmenuel menu managing emacs desktop contact stepnem dfel hack displaying space left device mode line contact benjamin drieu diel simple directory editor gnu emacs contact joe keane diaryoutlookel snarf m outlook appointment emacs diary contact dave love diarypilotel export emacs diary palm pilot contact martin schwenke diarytodoel display todo list diary contact martin schwenke dicel emacs interface two englishgermanenglish dictionary contact sven utcke dictel frontend dict client contact alexander vorobiev dictwebel emacs interface online dictionary database contact eric marsden dictationel enable voice dictation within emacs contact john wiegley note broken dictionel minor mode interface command diction contact sven utcke dictionaryel interface rfc dictionary server contact torsten hilbrich diffel extension standard library diffel contact drew adam extension diffel emacs older contact drew adam diffmodeel extension standard library diffmodeel contact drew adam diffsavebufferel default filename saving diff contact kevin ryde digel domain name system dig interface contact simon josefsson digbrowserel diredstyle dns zone browser contact ian zimmerman diminishel diminished mode minor mode modeline display contact mengarini directoryfilesdeepel useful directory function contact davin pearson diredel extension std library diredel diredauxel diredxel contact drew adam diredael various dired extension contact inge frick diredddel drag drop interface direddiredx package contact seiichi namba direddetailsel extension library direddetailsel contact drew adam diredefapel edit filename point dired buffer contact juan leon lahoz garcia diredsingleel reuse current dired buffer visit another directory contact joe casadonte diredsortmenuel add sort menu gnu emacs dired mode contact francis j wright diredsortmenuel extension library diredsortmenuel contact drew adam dirtreeel function building directorytree list contact noah friedman dirvarsel local variable apply entire directory contact matt armstrong diskel simplified findfile revertfile savebuffer interface contact alex schroeder dismalel dis mode ai nt lotus spreadsheet program gnuemacs contact frank e ritter dmssigel multiple automatically selected signature contact dewey sasser dnamodeel major mode editing dna sequence contact james h gorrell docmodeel convenient editing incode contact nikolaj schumacher docbookideel docbook integrated development environment contact norman walsh domel dom implementation contact alex schroeder dopeel profile dotemacs persexpevaltime profiler contact goel doremiel incrementally adjust property using arrow key andor mouse wheel contact drew adam doremicmdel miscellaneous doremi command contact drew adam doremifrmel incrementally adjust frame property using arrow key mouse wheel contact drew adam doremimacel macro defining doremi command contact drew adam convert ansi common lisp draft texinfo contact jesper harder draculamodeel major mode providing dracula rule mode hook fontification contact geert van der plas dupwordsel find duplicate word sentence contact stephen eglen emhaliasel mh mail alias expansion substitution contact peter galbraith eotherwindowel flash switching window contact kevin burton easeel exafs analysis system emacs contact bruce ravel easytodoel manage todos extremely easy way contact william xu ebackupel enhanced backup operation emacs contact kevin burton translate ebnf syntatic chart postscript contact vinicius jose latorre ecasoundel interactive programmatic interface ecasound contact mario lang ecbel code browser java c c elisp contact klaus berndl echopickel filter echo area status message contact nikolaj schumacher edbel edb emacs database replaces form editing mode contact michael ernst edeel emacs development environment gloss contact eric ludlam edimodeel edit raw edi file contact jeremy cowgar ediffel extension library ediffel contact drew adam ediprologel emacs interactive prolog contact markus triska edlibel edlib help edit emacslisp library contact deepak goel eeel categorizing information manager emacs contact juri linkov eevel embed shelltclperl code elisp hyperlink plain text contact eduardo ochs efineel interface finnplace online englishfinnish dictionary contact sami salkosuo efliteel interface emacsspeak festival lite speech synthesizer contact michael p gorse egocentricel highlight name inside emacs buffer contact benjamin drieu eicqel xemacs eicq client contact steve young eieioel enhanced implementation emacs interpreted object contact eric ludlam eiffelmodeel major mode editing eiffel file contact martin schwenke eldavel yet another webdav interface emacsen contact yuuichi teranishi elderel elder elisp document writer contact deepak goel eldomodeel major mode eldo netlist file analog simulator contact emmanuel rouat geert van der plas eldocel show function arglist variable docstring echo area contact noah friedman elibel emacs lisp library contact inge wallin elipel emacs learning instruction program contact thienthi nguyen elitel semiliterate programming contact luke gorrie eliteel elite emacs contact sami salkosuo elktestel emacs lisp testing framework contact nikolaj schumacher ellel browse emacs lisp list contact jeanphilippe theberge elmakeel make emacs lisp project pure emacs lisp contact michael schierl elpel emacs lisp profiler contact barry warsaw elpointel elpoint yet another presentation tool emacsen contact yuuichi teranishi elppel embed arbitrary elisp code within source code contact ali rahimi elsemodeel emacs language sensitive editor else contact peter milliken elservel yet another http server emacsen contact yuuichi teranishi emzleel zsh line editor compatibility function eshell contact emilio lope emacroel example startup file emacs xemacs contact bruce ingalls emacsclel common lisp implementation emacs contact lars brinkhoff emacsimapel purely imap based email client emacs contact nic ferrier emacsinitel emacs initialisation file commentary explains contact drew adam emacsmuleel various mulerelated file mod emacs new contact dave love emacsnameel emacs acronym expansion contact noah friedman interface texmode www browser contact masatoshi tsuchiya emacswikiel maintain local wiki using emacsfriendly markup contact michael olson emacspeakel emacspeak complete audio desktop contact v raman emacsvfaqel randomly select oneline answer faq contact charles sebold emmsel emacs multimedia system contact jorgen schäfer emvadersel clone famous arcade game program contact lars r clausen eonel objectoriented programming emacs contact david otoole eperiodicel periodic table emacs contact matthew p hodges epoel editing process organizer support editing source language contact hirose yuuji retrieve mail using extended contact franklin lee erbotel irc robot erc contact goel ercel emacs irc client contact michael olson erlextel socket communication erlang external term format contact luke gorrie escreenel emacs window session manager contact noah friedman esheetel spreadsheet emacs xemacs contact daniel speyer eshellel o command shell written entirely lisp contact john wiegley esmsel send sm message directly emacs contact jarl friis essel emacs speaks statistic statistical programming within emacs contact martin maechler etachel extension handling mime mail rmail contact john rulnick etaskel gnu emacs extension managing task contact rene weichselbaum eudcel emacs unified directory client contact oscar figueiredo evalexprel enhanced evalexpression command contact noah friedman evalsexpincommentsel evaluate sexps comment contact alex schroeder excerptel extraxt text report main file contact thomas link expectel support external process communication contact lars magne ingebrigtsen extviewel open file external viewer contact tamas patrovics eyedropperel copy foreground background color contact drew adam facelistel convenience function face customization contact alex schroeder facemenuel extension standard library facemenuel contact drew adam facesel extension standard library facesel contact drew adam faithel help reinforce spread faith one true editor contact deepak goel faqmodeel minor mode editing faqlike page contact yu li fastfuzzel compensate fast floatingpoint roundoff error contact mengarini fdbel debug filter sanity saver use debugonerror contact anders lindgren feedmailel assist email package massage outgoing message contact bill carpenter festivalel emacs interface festival speech synthesis program contact dave pearson fetchel never type long remote file name contact deepak goel ffpathsel findfileusingpaths search certain path find file contact peter galbraith ffapel extension standard library ffapel contact drew adam fffel fast file finder contact noah friedman fffelispel find emacs lisp library function definition contact noah friedman fffrfcel locate ietf rfc request comment text quickly contact noah friedman fileconfirmel confirm creation duplicate frame contact pekka marjola filemenuel mode buffer present menu file visit contact mengarini filesel extension standard library filesel contact drew adam filesetsel filesets x emacs contact thomas link fileutilsel unix utils emacs function contact kevin burton filewatchel watch file stuff get modified contact deepak goel fillcolumnindicatorel graphically indicate fill column contact alp aker filladaptel adaptively set fillprefix overload filling function contact kyle jones fillcodeel fillcode minor mode contact ryan barrett findandplayel interface findandplay contact marco parrone finddiredel extension standard library finddiredel contact drew adam finddiredel extension standard library finddiredel contact drew adam findfilesel handle globing regexp pattern findfile contact robert fenk findfuncel extension standard library findfuncel contact drew adam findlibraryel library finder completion capability list shadow library contact takeshi morishima findlibraryel find emacslisp library completion contact kahlil kal hodgson findlispel emulation find emacs lisp contact peter breton findrel breadthfirst filefinding facility x emacs contact david bakhash findstrel use window nt findstr match expression file contact david ponce fipel interface fip french radio contact manuel giraud fitframeel resize shrinkwrap frame fit selected window buffer contact drew adam flashparenel flash matching parens la zmacs contact noah friedman flashmakerel created flashcard deck using existing dicitonary file contact alex schroeder floatbgel slowly modify background color contact john paul wallington floatingtoolbarel popup toolbar support xemacs contact kyle jones floblel framelocal buffer list contact kai grossjohann flowfillel interprete flowed text contact simon josefsson flymake onthefly syntax checker emacs contact pavel kobiakov flymakecursorel display flymake error msg minibuffer delay contact dino chiesa flymakeforjslintforwshel use flymake j code window contact dino chiesa flyspellel onthefly spell checker contact manuel serrano flyspellbabelel switch flyspell language according latex babel command contact p j heslin fmel follow mode compilationoutput buffer contact stephen eglen fmailutilsel random mail frobnication utility contact noah friedman foldingel foldingeditorlike minor mode contact anders lindgren foldingoel minor folding mode mousemenuface support contact christian queinnec followel minor mode synchronize window showing buffer contact anders lindgren followmouseel automatically select window mouse contact kevin rodgers fontlatexel latex fontification font lock mode contact peter galbraith fontlockel extension standard library fontlockel contact drew adam footnotesel function automatically inserting footnote contact lars clausen fortuneel use fortune create signature contact holger schauer fortunemodeel interface write fortune quickly contact michael abraham shulman fraccel french accent towards tex bibtex html contact christian queinnec frameel extension standard library frameel contact drew adam framecmdsel frame window command interactive function contact drew adam framefnsel noninteractive frame window function contact drew adam fringehelperel helper function fringe bitmap contact nikolaj schumacher fromel show message mailspools contact henrik enberg fshellel enhancement shellel contact noah friedman ftcpel front end opennetworkstream contact noah friedman ftelnetel remote login interface contact noah friedman ftnchekel ftnchek support fortran mode contact judah milgram fullackel frontend ack contact nikolaj schumacher fuzzel compensate floatingpoint roundoff error contact mengarini fvwmcommandel interface fvwmcommand hence fvwm contact cyprian laskowski garbleel emacs interface garble contact dave pearson gdocsel doc google client contact v raman gedcomel aid editing lifeline gedcom record contact matthias rempe geekel annoy lusers think geek code way radikul contact noah friedman genautoel help generate autoloads elisp package contact deepak goel genconvel tabledriven string conversion contact christian queinnec ggomodeel gengetopt major mode contact matthew k junker gimpshellel shell gimp script fu server contact olaf sylvester ginelannounceel compose parse announces contact stefan hornburg ginelstringel ginel string manipulation function contact stefan hornburg gineltemplateel template insertion contact stefan hornburg glassesel make cantreadthis readable contact milan zamazal glemodeel major mode editing gle file contact graham lee globalmodesel enables activating minor mode globally contact han van dam globrepel search replace multiple file contact martin boyer glyphhighlightel highlight special character control char contact samuel padgett note broken gnuplotel drive gnuplot within emacs contact bruce ravel gnusel newsreader gnu emacs contact lars magne ingebrigtsen gnusaliasel alternative gnuspostingstyles contact joe casadonte gnuseyecandyel add eyecandy gnu contact bryan p johnson gnusfilterhistel gnu personality alternative gnuspostingstyles contact bryan p johnson gnuspersel gnu personality alternative gnuspostingstyles contact bryan p johnson gnuservel lisp interface code emacs gnuserv contact andy norman gnushushel make gnu little secretive message header contact neil w van dyke gobyel wysiwyg presentation tool run emacs later contact kazu yamamoto golispel navigate lisp source code hyperlink contact david otoole googleel emacs interface google api contact edward oconnor googlecontactsel support google contact emacs contact julien danjou grabboxel keep bookmark file often used filestext snippet contact stefan reichoer gradeel program keeping track grade contact jay belanger grepel extension standard library grepel contact drew adam grimodeel major mode gri file contact peter galbraith gselocateel interface locate contact scott evans gsenumberrectel insert incremental number rectangle contact scott evans gserenameel bulk renames made easy power emacs tm contact scott evans gtagsel global system finding function ccjavayacc source contact shigio yamaguchi gtklookel lookup gtk gnome documentation contact kevin ryde guessoffsetel guess tabwidth clike source code adjust cbasicoffset contact julian scheid guessstyleel automatic setting code style variable contact nikolaj schumacher gutenbergcodingel coding system project gutenberg text contact kevin ryde gwizardel helper function gtkgnomeglibbonobo programming contact dirkjan c binnema hachetteel lookup word hachette online french dictionary contact jeanphilippe theberge hacklocalsel replacement hacklocalvariables contact noah friedman haddocel browse python html documentation emacs contact martin blais hangmanel hangman game contact eric ludlam haskellel simple major mode editing haskell contact dave love haskelllatexel editing literate haskell using latex convention contact dave love haskellmodeel haskell editing mode contact simon marlow hbmkel manage bookmark html contact tom breton headeractionel something sending mailnews based header setting contact holger schauer support creation update file header contact drew adam helpel extension standard library helpel contact drew adam extension standard library helpel emacs contact drew adam helpfnsel extension standard library helpfnsel contact drew adam helpmacroel extension standard library helpmacroel contact drew adam helpmodeel extension standard library helpmodeel contact drew adam helpexel useful extension ch prefix contact michael schierl hexrgbel manipulate rgb hex string contact hhmumlauteel support german umlaute contact ralf stubner hidecopyleftel hide obnoxious copyright prolog contact reini urban hidelinesel command hiding line based regexp contact mark hulmejones hidesearchel incrementally search hiding nonmatching line contact craig muth hideshowel selectively display block code contact thienthi nguyen hierimenuel hierarchical index menu using imenuel contact ydirson highlightel highlighting command contact drew adam highlight character beyond column contact nikolaj schumacher highlightbeyondfillcolumnel highlight line long contact sandip chitale highlightcompletionel completion highlighted provisional text contact john palmieri highlightcontextlineel highlight last visible line scrolling contact stefan kamphausen highlightcurrentlineel highlight line cursor contact christoph conrad highlightparenthesesel highlight surrounding parenthesis contact nikolaj schumacher highlightsymbolel automatic manual symbol highlighting contact nikolaj schumacher highlighttailel draw tail writing smoothly changing background color contact rafal jedrusze highlineel minor mode highlight current line buffer contact vinicius jose latorre himarkel marking text highlighting contact roland winkler hllineel highlight current line contact dave love hllineel extension standard library hllineel contact drew adam hlsexpel highlight current sexp contact edward oconnor hoboel remote editting via scp contact joe casadonte horoscopeel generate horoscope contact noah friedman howmel wikilike notetaking tool emacs contact hiraoka kazuyuki htmlcodingel coding system html file emacs contact kevin ryde htmlhelperimenu imenu support htmlhelper contact james h gorrell htmlhelpermodeel major mode composing html file contact gian uberto lauri htmllangtimestampel set language specific timestamps html buffer contact holger schauer htmlscriptel narrowwiden block php cs javascript visual basic embedded x html contact peter heslin htmltocel creates tableofcontents htmldocument contact rolf rander næss htmlfontifyel htmlise buffersource tree optional hyperlink contact vivek dasmohapatra htmlizeel htmlize fontlock buffer contact hrvoje niksic httpheadersel get http header specified url contact sami salkosuo httppostsimpleel http post request using url library contact tom schutzerweissmann httpdel web server emacs lisp contact eric marsden hugsmodeel major mode editing hug contact martin schwenke hypercompileel different style compile completion contact paolo gianrossi hyperboleel efficient programmable information management hypertext system contact bob weiner hyperspecel browse documentation common lisp hyperspec contact erik naggum note broken ibsel window like buffer selection mode ctab contact olaf sylvester ibufferel operate buffer like dired contact colin walter icalendarel emacs icalendar implementation contact ulf jasper iciclesel enhances minibuffer completion contact drew adam icompleteel extension standard library icompleteel contact drew adam icsel major mode communicating internet chess server contact mark oakden idlfontlockel font lock configuration corba idl file contact eric eide idlerequireel load elisp library emacs idle contact nikolaj schumacher idledoel stuff emacs idle contact deepak goel idlwaveel idl wave cl editing mode gnu emacs contact jd smith idnael internationalizing domain name application contact simon josefsson idoel interactively thing buffer file contact kim f storm ietfdocel ietf document retrieval internet draft rfcs contact dinesh g dutt ifilegnusel provides support using ifile mailclassification program gnu nnml backend contact jeremy h brown igrepel improved interface grep find contact kevin rodgers iimageel inline image minor mode contact koseki yoshinori ilispel lisp interaction support gnu emacs contact marco antoniotti ilocatelibraryel interactive replacement locatelibrary completion contact michael slass imagetextel view text comment etc image file contact kevin ryde imaximael maximum mode image contact honda imdbel search imdb internet movie database emacs contact girish bharadwaj imdbaddsmodeel major emacs mode editing imdb data submission contact oliver heidelbach imdbsel compute movie statistic using imdb vote history contact jeanphilippe theberge imenuel extension standard library imenuel contact drew adam imenugoel go definition item using imenu tag contact ilya zakharevich imenuoutlineel create imenu structure outline heading contact kevin broadey note sun broken indenttabsmaybeel guess whether use indenttabsmode finding file contact dave love infoel extension standard library infoel use setupinfoel contact drew adam infoaproposel search info index contact jesper harder infobookel keep info node hot list contact noah friedman initsplitel code split customizations different file contact john wiegley insertrandomquoteel insert random quote file contact steve kemp installelispel simple emacs lisp installer contact rubikitch ipael inplace annotation contact tamas patrovics ippel implementation internet printing protocol contact eric marsden ipythonel add support ipython pythonmodeel contact alexander schmolck isearchel extension standard library isearchel contact drew adam isearchbel marriage iswitchb isearch contact john wiegley ishlel extra isearch highlighting contact bob glickstein note broken sun isohtmlel translating html editing file contact gerd neugebauer isooemel set char table iso oem msdos font contact anders lindgren isosgmlel display sgml entity reference iso character contact frederic lepied ispellel interface international ispell version contact ken stevens issmodeel mode innosetup install script contact stefan reichoer iswitchmenuel use iswitch access menu contact joost diepenmaat iswitchbel switch buffer using substring contact stephen eglen iswitchbfcel switch buffer filecache entry command contact benjamin rutt itunesel control itunes emacs contact harley gorrell jammodeel fontlock support jam file contact rob walker jasminel major editing mode jasmin java bytecode assembler file contact neil w van dyke javacompleteel tool java completion contact tapsellferrier limited javaopenel open source file java class name point contact rajeev karunakaran javadochelpel search multiple onlinelocal javadocs java contact william wong javascriptel major mode editing javascript source code contact karl landström javascriptmodeel major mode editing javascript j file contact peter kruse jdecflowel java control statement expander contact phillip lord jdegenextrael autocoding addition jdee contact ole arndt jdehotspotel hot spot support jde contact phillip lord note sun phillip page broken jdejalopyel jalopy interface jde contact nascif abousalh neto jdestackel jump source java stack trace contact kevin burton jdetransmogrifyel interface jdee transmogrify contact nascif abousalh neto jdeeel java development environment emacs contact paul kinnucan jdokel javadoc template generator contact david ponce jessmodeel jess java expert system shell editing mode contact david e young jfoldingel quick dirty folding package emacs contact phillip lord jhgpineel read pine addressbook contact james h gorrell jiggleel minor mode jiggle cursor changing buffer contact mengarini jjarel java archive builder contact david ponce jlogel helper java loggingtrace message contact alexandre brillant jmakerel java makefile generator contact david ponce joccurel improved occur implementation contact javier oviedo jpackel java package statement generator contact david ponce jpegmodeel major mode jpeg file contact john sturdy jseeel javadoc viewer contact david ponce jsphtmlhelpermodeel jsp addon htmlhelpermodeel contact ben tindale jswatel interface jdee jswat contact nascif abousalh neto jtemplateel helper building java class contact alexandre brillant junkbustel tool configuring internet junkbuster proxy contact neil w van dyke kbdrawel generates html render keyboard layout contact neil w van dyke kdicel practice kanji using dictionary contact alex schroeder keepbuffersel attempt prevent named buffer deletion contact steve kemp keydefel simpler way define key mapping contact michael john downes keywizel emacs key sequence quiz contact jesper harder keywordsel extend font lock multiple variable declaration structclass function declaration contact chris holt kibologizeel generate raving kibology style kibo contact noah friedman killalawyerel hide legal verbiage start program contact noah friedman killbuffersel various function kill buffer mode contact diego calvanese killringsearchel incremental search emacs kill ring contact nikolaj schumacher killbufel emacs style killbuffer emacs contact noah friedman labbookel provides labbook log contact phillip lord labbooksignel provides support pgp signing labbook contact phillip lord lacarteel execute menu item command completion contact drew adam convert char ascii equivalent contact noah friedman latexdocel show summary latex commandenvironmentpackage contact triet hoai lai latexmarkupel publish emacswiki file using latex markup contact john wiegley latexspreadel simple spreadsheet minor mode latex contact hermenegildo latextoolbarel xemacs latex toolbar common latex symbol contact triet hoai lai latexunitsel add unit submenu auctex mathmode menu contact peter galbraith lazydesktopel modify desktop open slowly idlecycle contact phillip lord lazylookel lazy observation language content contact eric ludlam lbdbel little brother database interface contact dave pearson ldapel ldap searching routine contact andrew j cosgriff ldrawmodeel major mode editing ldraw datfiles contact fredrik glöckner librequiresel list emacs lisp library dependency extends standard library loadhistel contact drew adam licenseel insert license header active buffer contact marcelo toledo lieceel irc client emacsen contact daiki ueno lilypondindentel autoindentation lilypond code part dist contact chris jackson linenumel display line number leftmargin contact darryl okahata linenumbersmodeel minor mode onscreenwindow line numbering contact jerry g chen linemenuel hook function highlight current line buffer contact bill brodie linesel line function help deal datafiles contact deepak goel linksel link browser integration gnu emacs contact kevin burton linmagmodeel writing article linux magazin contact stefan kamphausen linumel display line number left buffer contact markus triska lispindexel generate html index lisp file directory contact steve kemp lispreel transform re written lisp like notation string contact detlev zundel listregisterel list content register contact akihisa matsushita listbufel build buffer menu use buffmenumode contact noah friedman livemodeel viewedit changing file contact bob glickstein ljupdateel livejournal posting tool emacs contact edward oconnor locdictel using local webster dictionary contact lars magne ingebrigtsen loggerel log work time activity contact ray nickson logoel major mode editing logo source code contact hrvoje blazevic longlinesel automatically wrap long line contact kai grossjohann lookoutel tool converting outlookcsv file diary format contact ulf jasper lookupel integrated search interface electronic dictionary contact keisuke nishida loutmodeel emacs majormode editing lout source contact eric marsden lpcmodeel syntax highlightingindentation lpc contact vivek dasmohapatra lslispel extension library lslispel contact drew adam ludeel hack quickly finding luderelated file contact noah friedman major mode editing motorola assembly code contact richard kim mabbrevmenuel add pulldown menu mail abbrevs gnu emacs contact paul smith note ca nt connect ftp sun mackeymodeel provide macstyle key binding carbon emacs contact seiji zenitani macrogenerateel turn keyboard macro lisp code contact unknown macromathel inbuffer mathematical operation contact nikolaj schumacher macrosel extension standard library macrosel contact drew adam mailcentricreminderel mailcentric reminder contact marco parrone mailmarkupel send html alternative mail based emacswiki markup contact john wiegley mailcryptel mail encryption pgp contact len budney mailrcel mode view edit expand alias defined mailrc contact joakim hove mairixel mairix interface emacs contact david engster makehexel function drawing small ascii hex contact lars r clausen makeinfoinfoel view makeinfobuffer output infomode contact kevin ryde malyonel mode execute z code file version contact peter ilberg manpreviewel preview nroff man file source contact kevin ryde maniacel fill paragraph like maniac contact per abrahamsen manuedel manuscripting editor proofreading assisting mode contact yamauchi hitoshi mapwinel run expression various window contact noah friedman maplemodeel major mode editing maple code contact c schwieters maplevel maple mode gnu emacs contact joseph riel mapreplaceel mapping replace command gnu emacs contact kyle jones marklinesel tripleclick like line marking function contact le wang markervisitel navigate buffer mark order contact benjamin rutt masfilehistoryel menu buffer selectreopen previously opened file contact masahiro kawata mathel mode package mathematica contact david jacobson mathematicael mathematicamode contact jim pivarski mathsmenuel insert math character menu contact dave love matlabel major mode matlab dotm file contact eric ludlam maximael major mode writing maximum code contact jay belanger maximafontlockel font lock code maximael contact jay belanger mcel midnight commander emulation emacs using dired contact kevin burton mcgpgfilemodeel automatically gpg decrypt encrypt gpg file contact josef bauer mcsafesignmessageel code encrypt message make sure nt also signed contact kevin burton mcalcel small simple rpn based calculator living minibuffer contact joakim hove mcompleteel minibuffer completion prefix substring matching contact yuji bmonkey minejima message digest algorithm contact gareth rees mdbel mdb emacs interface sql database contact michal mdeeel integration within emacs mozilla contact kevin burton mdfindel interface o x mdfind command contact jose antonio ortega meditateel talk zenmoo optionally make emacs meditate contact noah friedman menubarel extension standard library menubarel contact drew adam messageutilsel utils messagemode contact holger schauer messagexel customizable completion message header contact kai grossjohann messkeywel automatic keyword support composition contact karl kleinpaste mewel messaging emacs world mime mail reader emacsxemacs contact kazu yamamoto mgpel generic mode magicpoint file contact christian egli mheel emacs front end mail reader mh contact bill wohler mhcel personal schedule management package mew wanderlust gnu contact yoshinari nomura micparenel highlight matching parenthesis much sophisticated contact klaus berndl mimecomposeel utility routine composing mimecompliant mail contact kenichi handa minibuffercompletecycleel cycle completion buffer contact kevin rodgers minieditel enhanced editing minibufferfields contact deepak goel mirandamodeel major mode editing miranda contact martin schwenke mirrorel maintain remote copy local file contact kahlil kal hodgson misccmdsel miscellaneous command interactive function contact drew adam miscfnsel miscellaneous noninteractive function contact drew adam mixalmodeel major mode mix asm language contact pieter ej pareit mkbackel advanced assistance manual archivingbackup file contact deepack goel mkhtmlel create html link extension library htmlizeel contact drew adam mldonkeyel emacs interface mldonkey contact david hansen mmael programming mode writing mathematica package file contact tim wichmannn mmmel multiple major mode xemacs contact jerry g chen mmmmodeel allow multiple major mode buffer contact michael abraham shulman momodeel decode view gettext mo message file contact kevin ryde moccureditel edit moccur buffer apply change file contact akihisa matsushita modecompileel smart command compiling file according majormode contact heddy boubaker modelineposnel enhanced modeline contact drew adam mode contact eric muller molproel major mode editing molpro file quantum chemistry contact unknown momentaryel momentarily display buffer restore contact john wiegley monacompileel auto compile support mona o developer contact higepon monkel multimedia object navigator kluge play mpeg contact sn monkeyel nice directory editor emacs contact tom lord mouseel extension standard library mouseel contact drew adam mouseembraceel minor mode embrace text mouse selection contact stefan reichör mouseextrasel oneclick mouse command scroll copymove text contact john heidemann mousefocusel focus follows mouse xemacs window contact stefan kamphausen mousymacroel run macro via simple mouse click contact christian queinnec mouumoel completing mount umount contact john paul wallington simple tag editor contact steve kemp front end contact françois fleuret interface contact jeanphilippe theberge mpcel client music player daemon contact stefan monnier mpcelel mpd client contact jeanbaptiste bourgoin frontend program contact hirose yuuji msgcodesel common rare usenet message encoding contact michael schierl msnel client get bibtex entry mathscinet contact nevin kapur mspoolsel show mail spool waiting read contact stephen eglen mssel make smart shortcut program start menu contact mathias dahl mthesaurel thesaurus lookup word phrase contact tad ashlock mtorusel navigation mark ring ring torus contact stefan kamphausen mtraceel keep track hidden buffer change contact michele bini multimodeel support multiple major mode using indirect buffer contact dave love multimodemodeel switch major mode depending position point file contact paolo gianrossi multiregionel mapping command multiple active region contact lawrence mitchell multiselectel select noncontiguous region yank later contact stefan kamphausen museel authoring publishing tool emacs contact michael olson musicallettersel play fluidsynth software synthesizer contact joe corneli muttel use emacs external editor mutt mailer contact eric kidd muttaliasel lookupinsert mutt mail alias contact dave pearson namazuel interface namazu fulltext search engine contact namazu group naosel naos user frontend gnu emacs contact klaus schilling note broken narrowstackel allow narrow within narrowed region contact jesper kjær pedersen natselel richard dawkin natural selection evolving string contact l srinivasa mohan naviel subroutine navigator mode contact sunagawa youichi ncel emulate famous msdog file browser contact ilya zakharevich necsel nec mode contact dennis haney neophyteel make easier learn emacs contact alan shutko neroel fast lynxbased browser emacs contact joe corneli netutilsel network function contact peter breton nethackel run nethack subprocess contact ryan yeske netrexxmodeel highlight indent netrexx program file contact arjan bos newcommentel un comment region buffer contact stefan monnier newmailmodelineel gnu feature report waiting mail modeline contact joakim hove newshackel create newsrc buffer foreign group contact gareth owen newstickerel newsticker emacs contact ulf jasper ngnel quickly insert newsgroup name buffer using completion contact dave pearson nnirel search mail various search engine contact kai grossjohann nnirgrepmailel grepmail plugin nnirel contact nevin kapur nnmairixel mairix back end gnu emacs newsreader contact david engster notebookmodeel notebook mode communicating process contact fred gylyscolwell notesmodeel indexing system online notetaking contact john heidemann noviceel extension standard library noviceel contact drew adam nowebel noweb mode literate programming contact dave love nowebmodeel edit noweb file gnu emacs contact thorsten ohl noweboutlineel show outline noweb document contact dan schmidt nqmbmel advanced mouse buffer menu mainly contact stefan daschek nrnhocel major mode neuron hoc dothoc file contact david c sterratt nrofffilladaptel filladapt setup nroff comment contact kevin ryde nsbrowseel view htmlenriched mailnews buffer using netscape contact noah friedman nturlel glue browseurlel www browser nt contact kim storm nukewhitespaceel strip trailing whitespace buffer contact noah friedman numberedoutlineel numbered outline mode contact gareth rees nxhtmlel edit xhtml file contact lennart borgman nxmlmodeel new xml mode contact james clark obarrayfnsel obarraymanipulating routine contact noah friedman major mode editing source code contact karl landström obfusurlel obfuscate url nt spoiler contact dave pearson occurxel extra functionality occur contact juanleon lahoz octel gnu octave function elisp contact goel omdocmodeel major mode composingeditinglooking omdoc file contact peter jansen oneononeel define special multiframe setup contact drew adam oobrowserel advanced objectoriented class browser contact bob weiner openglel minor mode command editing opengl cc code contact sriram karra optionsel extension standard library optionsel contact drew adam orbixel emacs orbix utility function contact peter breton orderheadel rearrange mail header pleasing order contact noah friedman orgel outlinebased note management organizer contact carsten dominik orgmouseel better mouse support orgmode contact piotr zielinski organizermodeel major mode editing organizer list file contact tom shannon orthodoxel save orthodox keymap hacking contact mengarini orwellel exchange ch del without affecting prefix mapping contact mengarini osxosascriptel invoke osascript osx contact harley gorrell osxtypecreatorel set osx type creator contact harley gorrell outdentel indentationbased outline exposure maneuvering contact ken manheimer outlineel extension standard library outlineel contact drew adam outlinemagicel outline mode extension emacs contact carsten dominik simple perforceemacs integration contact rajesh vaidheeswarran pabbrevel predictive abbreviation expansion contact phillip lord padrel convert usr palm o pdf text html texinfo ascii contact neil w van dyke pagerel windowsscroll command alternate scrollup scrolldown contact mikael sjödin paletteel color palette useful rgb hsv color name contact drew adam parenglintel unhighlight matching paren timeout contact karl landström passwordel read password user possibly using password cache contact simon josefsson pbpopupel ensure display process buffer new output arrives contact noah friedman pbookel format program listing latex contact luke gorrie pcbufswel support quick switch emacs buffer contact igor boukanov pckeysel smart home end key contact kai grossjohann pclcvsel frontend cv contact stefan monnier pcmplarchel function dealing archtla completion contact sacha chua pdbel python debugging emacs via gudel contact wolfgang weitz pdbel major mode editing protein databank file contact dave love perkymbfel dedicated minibuffer frame highlight prompting contact neil w van dyke perlmyvarel declare lexicaly scoped var contact harley gorrell perldocel show help perl function builtins module contact steve kemp pgel emacs lisp socketlevel interface postgresql rdbms contact helmut eller pgpwrapperel run pgp commandlines contact peter breton phonebookel mode keep phoneaddress book contact jay belanger phonemodeel number letter letter number contact deepak goel phpmodeel major mode editing php source file contact fred yankowski phpmodeel major mode editing code contact turadg aleahmad phpmodeel major mode editing php code contact vincent debout pickbackupel easy access versioned backup file contact nikolaj schumacher pilotdocel write current buffer palmos device doc formated file contact daryn w hanright pilotmemoel write current buffer one palm device memo contact andrew j cosgriff plannerel emacs planner contact john sullivan playlistel music file playlist contact shawn betts plimodeel electric pli mode indenting flashing filling contact mark riggle plsmodeel emacs majormode editing plsql source contact dmitry nizhegorodov plsqlel programming support plsql code contact kahlil kal hodgson pmdel major mode plugging pmd java source code analyzer emacs contact nascif abousalhneto pmwikiel edit pmwiki page within emacs contact christian ridderström pomodeel helping gnu gettext lover edit po file contact françois pinard pointbackel restore window point returning buffer contact markus triska pomel utility function dealing maven projectxml file contact ole arndt pomodoroel pomodoro technique emacs contact ivan kanis pongel emacs implementation pong contact benjamin drieu popmodeel major mode editing code contact brian logan popupmenuel pop menu mouse pointer contact robert kiesling postel use x emacs client external editor mail news contact eric kidd povmodeel major mode editing povray scene file contact marco pessotto powershellel run powershell inferior shell emacs contact dino chiesa powermacrosel manage group keyboard macro description contact jesper k pedersen ppel extension standard library ppel contact drew adam ppclel display cl pagebreak formfeed character pretty way contact drew adam predictiveel predictive completion minor mode emacs contact toby cubitt prefixkeyel prefix key processing contact zajcev evgeny prettyminibufferel give minibuffer face contact daniel lundin previewel embed preview latex image source buffer contact david kastrup prgcommentel package help comment source code contact aurélien tisné printingel printing utility contact vinicius jose latorre procmodeel major mode working proc file emacs contact pat thoyts progralignel align stuff via regexpressions found buffer contact stefan reichoer projectel keep track time devoted project contact alan shutko proofgenel generic emacs interface proof assistant contact proof general maintainer propertiesel nonintrusive file local variable contact thomas link prosperel prosper style file auctex contact nevin kapur protbufel protect buffer accidental killing contact noah friedman protocolsel protocol database access function contact dave pearson psmodeel postscript mode gnu emacs contact peter kleiweg psmodeel mode editing postscript code contact larsolof öhberg psprintel print text buffer postscript contact vinicius jose latorre print text buffer postscript emacs contact vinicius jose latorre convert postscript pdf contact mathias dahl psgmlel sgmlediting mode parsing support contact lennart staflin psgmldssslel create skeleton dsssl spec sgml document contact david megginson psgmljadeel add jade jadetex customize support psgml contact matthias clasen psgmltableel editing table sgmlmode contact erik helander psqlel mode editing postgres sql contact james h gorrell psvnel subversion interface emacs contact stefan reichoer punycodeel ascii compatible unicode encoding format contact simon josefsson puzzleel slide puzzle emacs contact matthew p hodges pwsafeel emacs interface pwsafe contact stefan reichoer pythonmodeel major mode editing python program contact barry warsaw qflibel utility writing java code free java library qflib contact quality first software qpdecodeel decode mime quotedprintable message contact noah friedman qsearchel simple isearch implemented quasimode contact alex schroeder quackel support editing running plt mzscheme code contact neil w van dyke quererel display menumessage query option select one contact goel quickyesel answer yes yesornop contact kevin ryde quickurlel insert url based text point buffer contact dave pearson quotesel mode keep list easily searchable quote contact jay belanger railsel minor mode editing rubyonrails code contact galinsky dmitry rainel display raindrop buffer contact ryan yeske randommanel generate random unix manual page time contact sriram karra rationalel rational number factorialbase format contact vinicius jose latorre raysel game ray contact dmitri priimak rcircel lightweight emacs irc client contact ryan yeske rebuilderel building regexps visual feedback contact detlev zundel readlibraryel read library minibuffer completion contact gareth rees recentaddressesel store recall recently used email address contact nikolaj schumacher recentfilesel maintain menu recently opened file contact juergen nickelsen recentfel setup menu recently opened file contact david ponce recordsel index personal journaldiary subject date contact ashvin goel rectmarkel mark rectangle text highlighting contact rick sladkey redoel redoundo system xemacs contact kyle jones reduceel reduce code editing mode gnu emacs contact francis j wright refillel autofill refilling paragraph change contact dave love reftexel minor mode label ref cite latex contact carsten dominik regressel regression test harness emacs lisp code contact tom breton rememel implement emacs frontend remembrance agent contact bradley rhodes rememberel mode quickly jotting thing remember contact sacha chua replaceel extension standard library replaceel contact drew adam reporterel customizable bug reporting lisp program contact barry warsaw requireallel load file beneath named directory contact steve kemp revbufsel reverts outofdate buffer safely contact neil w van dyke reviveel save current editing status window configuration contact hirose yuuji rewriteel rewrite text file easier regular expression handling contact mutsumi komuro rfcel see rfcviewel contact kaarthik sivakumar rfcutilel rfcutil interface emacs contact kevin burton rfcviewel see rfc narrowed page jump page number contact kaarthik sivakumar hashed message authentication code contact simon josefsson rfcrel interface rfc repository wwwietforg contact sami salkosuo rfcviewel view ietf rfcs readabilityimproved formatting contact neil w van dyke rfringeel display relative location region fringe contact dino chiesa riel browse output ri command contact colin steele rieceel yet another irc client emacs contact daiki ueno rightjustifyel right justifies region contact lars clausen rijndaelel rijndael aes block cipher implementation contact simon josefsson ringel extension standard library ringel contact drew adam rknymel nym service support mailcrypt gnu contact richard klinda rktodoel simple todo paragraph sorter contact richard klinda rloginel remote login interface contact noah friedman rmailmimeel mime extender rmail contact tm mailing list rmailspamfilterel filter spam rmail based sender subject content contact eli tziperman rmimeel read mime message contact ray moody rotateel rotate region rectangle degree contact lars r clausen rpmel diredlike major mode red hat package manager contact detlev zundel rsinfoel info related function contact reiner steib rsibrkel periodic rsi typing breakes contact davin pearson rsshelperel utility using r file gnu contact mark hershberger rstel restructuredtext support emacs contact martin blais stefan merten david goodger rszminiel dynamically resize minibuffer display entire content contact noah friedman rtfel mode editing rtf document contact oliver scholz rtfsupportel m rich text format support function contact alastair j houghton rubymodeel mode editing ruby code contact yukihiro matsumoto runcommandel library facilitate running external command contact peter breton safescrollmouseel add timeout mechanism scroll mouse prevent accidental press contact brady montz safttoel interface simple asynchronous file transfer program contact andreas fuchs sandboxel help run untrusted code contact tom breton sasmodeel indent run sa program contact tom cook savehistoryel save minibuffer history session contact lars r clausen savehistoryel save minibuffer history session contact kahlil kal hodgson saveframesel save restore frame contact pekka marjola extension standard library savehistel make available emacs contact drew adam sawfishel sawfish mode sawmill contact dave pearson sbheiseel heise online shimbun backend contact david hansen scanel minor mode dired used scan numbered document contact michal scannerel create elisp scanner using flex contact john wiegley note broken scheduleel simple schedule maintainer contact john wiegley scratel access scratch like shell contact joe corneli screenlinesel screen line oriented point moving command contact yuji bmonkey minejima screenlineel provides function move cursor contact yuji minejima screenplayel major mode editing screenplay contact v l simpson screenplayel support writing plain text screenplay contact alex schroeder scriptel script mode contact richard sharman scrollinplaceel improved vertical scrolling command contact eric eide secondselel secondaryselection enhancement contact drew adam selectxfaceel select xfaces graphically contact yuuichi teranishi semanticel semantic buffer evaluator contact eric ludlam semiel mime feature gnu emacs contact tm mailing list sendmailaliasel parse sendmailstyle alias file contact noah friedman sendmailmodeel major mode editing sendmail configuration file contact jonathan marten servicesel service database access function contact dave pearson sesel simple emacs spreadsheet contact jonathan yavner sessionel use var register filebuffer place across session contact christoph wedler setnuel vistyle line number mode emacs contact kyle jones setnuel extension standard library setnuel contact drew adam setupel startup assignment hook etc contact drew adam setupcygwinel set emacs using cygwin markus hoenika contact drew adam setupkeysel key binding contact drew adam sgmlidel set function finding crossreferenced id contact florian v savigny shautoconfel shmode flavour editing autoconf file contact kevin ryde message digest algorithm contact keiichi suzuki shbufel sharing buffer emacs process network contact luke gorrie shellcommandel enable tab completion command dirfilenames within shellcommand input contact tsuchiya masatoshi shelltoggleel toggle shell buffer contact mikael sjödin shopel generate random shopping list contact noah friedman showwspaceel command highlight whitespace tab hard space trailing whitespace contact drew adam sierotkiel introduce tilde singleletter word contact jakub narebski sievemodeel sieve code editing command emacs contact simon josefsson sigquoteel add quote signature according recipient rmailmhegnus contact trey jackson sigadaptel select signature depending mailee contact christian queinnec sigbegoneel exorcize annoying isp ad sigs email contact neil w van dyke sillymailel generate bozotic mail header contact noah friedman simpleel extension standard library simpleel contact drew adam simplecalltreeel analyze source code based fontlock textproperties contact alex schroeder simplemergeel major mode help resolve conflict merge output contact peter österlund slashdotel download headline slashdotorg make viewing simple contact steve kemp smartcompileel interface compile contact seiji zenitani smartdndel userconfigurable dragndrop feature contact seiji zenitani smartsigel smart signature selection based message content contact dave pearson smartymodeel major mode editing smarty template contact vincent debout smimeel smime support library contact simon josefsson smlmodeel major mode editing standard ml contact stefan monnier smyrnoel jabber client emacs contact edward oconnor soapel simple object access protocol support emacs contact edward oconnor sorterel cycle dired listing namedateextensionsize contact tom wurgler sourcepairel load corresponding cc header source file current buffer contact mohamed hendawi spamstatel detecting spam based statistic contact alex schroeder spamprobeel spamprobe utils emacs contact dave pearson spamprodel generate spam complaint email contact neil w van dyke spamtrapel check message recipient spam trap contact lars clausen specmanmodeel mode editing specman file contact michael mcnamara spectremodeel major mode providing spectre mode hook fontification contact geert van der plas speechdel library accessing speech dispatcher contact milan zamazal speedbar quick access file tag frame contact eric ludlam speedreadel readdisplay buffer chunk contact bob newell spellnumberel spell integer currency contact vinicius jose latorre spicemodeel major mode providing spice mode hook fontification contact geert van der plas emmanuel rouat splitrootel emacs root window splitter contact nikolaj schumacher spokesel calculate bike spoke length contact bob newell spreadel simple spreadsheet mode gnu emacs contact guillaume marceau sqlel specialized comintel sql interpreter contact alex schroeder sqlindentel indentation sql statement contact alex schroeder sqlmodeel mode editing sql code interacting sql server contact sql mode maintainer note broken sqltransformel transform sql statement contact alex schroeder sqlplushtmlel render sql plus html output onthefly contact hrvoje niksic sqlplusmodeel mode editing sql testing via sql plus contact martin schwenke srmodeel mode editing sr program contact thomas lofgren sregexel symbolic regular expression contact bob glickstein sshel remote login interface contact noah friedman startel main emacs startup file requireautoload file contact drew adam startoptel customizations done end startup contact drew adam starteamel vctype mode starteam contact matthew smith stockquoteel grab stock quote delayed net contact john wiegley stoutel majorminor mode managing structured outline contact tom breton stringsel miscellaneous string function contact drew adam structel extension common lisp structs contact tom schutzerweissmann studlycapsel studlycapify type contact harley gorrell stufeel technical useful function emacs contact thomas degris sudokuel simple sudoku game download puzzle web contact jesse rosenthal suggbindel suggest key binding mx command complete contact noah friedman sunrisecommanderel twopane file manager emacs based dired inspired mc contact josé alfredo romero l superfoldel minor mode add cool folding capability emacs contact paolo gianrossi supertabel enhanced tab lispbased mode contact christian queinnec surveyel conduct survey email result contact thienthi nguyen swbuffel quick switch emacs buffer contact david ponce swiftexel major mode latex latex docsty document contact matt swift swissmoveel swiss cursor movement contact stefan kamphausen switchfilesel switch matched pair file following include directive contact wes hardaker swwel switch named window system contact stefan reichör synonymsel search browse hyperlinked thesaurus contact drew adam sysel determine kind system emacs running contact vinicius jose latorre syslogmodeel mode viewing system logfiles contact harley gorrell tabdisplayel tab display code managing tab visually contact kevin burton tabbarel display tab bar header line contact david ponce tableel create edit text based embedded table contact takaaki ota tabsel display tab one per buffer top window contact zack rusin taclmodeel handle tandemnskguardian tacl language contact rick bielawski tagbodyel common lisp tagbody emacs lisp contact michael abraham shulman tailel tail f file command form within emacs contact benjamin drieu tailmodeel follow growing tail file emacs contact daniel pfeiffer talmodeel handle tandemcompaqhp tal ptal language contact rick bielawski talcumel extra feature editing latex file contact ulrich schwarz tcel trivialcite text proper filling contact lars r clausen routine save restore elisp object contact tom breton tehompsgmlel psgml extension contact tom breton tehompsgmlfoldbykeyel foldunfold xml according keywords contact tom breton tehompsgmllinkel barebones hyperlink psgml contact tom breton tellibel thomas elisp library contact thomas link tempbufel kill unused buffer background contact michele bini templateel file template header standardized comment contact christoph wedler temposnippetsel visual insertion tempo contact nikolaj schumacher testcasemodeel unit test frontend contact nikolaj schumacher testcoverel pretty interface edebug codecoverage contact jonathan yavner texletterel inserting latex letter template menu contact stefan kamphausen texmathpreviewel preview tex math expression contact kevin ryde texmmael major mode interaction mathematica tex buffer contact dan dill texwcountel keep running count word latex buffer contact seb james texidocstringmagicel munge internal docstrings texi contact david aspinall texinfomarkupel publish emacswiki file using texinfo markup contact john wiegley texletterel latex letter template contact stefan kamphausen texttohtmlel plaintext html converter contact marco parrone textstatsel show text statistic contact thomas link thesaurusel access via perl script roget thesaurus contact darryl okahata tfsel m team foundation server command emacs contact dino chiesa thingcmdsel command select thing near cursor contact drew adam thingatptel extension standard library thingatptel contact drew adam thinksel insert text think bubble contact dave pearson thumbfrmel thumbnail frame fisheye view alternative iconifying contact drew adam thumbsel thumbnail previewer image file contact jeanphilippe theberge tidyel interface dave raggett html tidy program contact kal hodgson tigerel mode editing program written appel tiger language contact edward oconnor tildifyel adding hard space text contact milan zamazal timeclockxel extra feature john wiegley timeclock contact kahlil kal hodgson timerel extension standard library timerel contact drew adam timerfunctionsel enhancement timerel contact deepack goel timingupel minor mode add timing information buffer contact paolo gianrossi tintinstancesel tint instance current word contact bruno daniel tinytools jari aalto collection tiny tool contact jari aalto titletimeel display time etc title bar contact kahlil kal hodgson tldel explain toplevel domain name contact dave pearson tmenuel text based interface menubar contact yuji bmonkey minejima tmmoflel minor mode toggle minor mode based font lock info contact phillip lord tntel emacs client aim aol free instant messaging service contact unknown todoel mode support todo file containing script mail contact christian queinnec todomodeel major mode editing todo list file contact oliver seidel todooel major mode editing todo file contact daniel lundin togglebufferel fast switching two buffer contact joseph l casadonte jr togglecaseel set function toggle case character contact joseph l casadonte jr toggleoptionel easily toggle frequently toggled option contact cyprian laskowski togglesourceel toggle source implementation file contact steve kemp toolbarel extension standard library toolbarel contact drew adam toolboxel create simple menu buffer contact alex schroeder tpumel popup menu text mode contact zajcev evgeny trackscrollel enable direct scrolling mouse contact stefan kamphausen trampel transparent remote access multiple protocol rcpel contact kai grossjohann transel translation character via multibyte table coding system contact dave love translateel use wordlist simple translation contact holger schauer translationel translation minor mode contact christophe deleuze trashcanel recoverable file deletion system contact davin pearson treewidgetel widget useful display data structure organized hierarchical order contact david ponce tsqlindentel indent tsql sql statement contact tom pierce ttyformatel decode backspace overstrikes ansi colour contact kevin ryde twiddleel modeline display hack contact noah friedman twomodemodeel switch tcl sgml html mode contact david welton typebreakel encourage rest typing appropriate interval contact noah friedman typematicel optimize universalargument typematic keyboard contact mengarini typingel typing emacs game variant dead dreamcast contact alex schroeder typopunctel automatic typographical punctuation mark contact oliver scholz uapptel appointment parser contact ulf jasper ucolorcycleel eyecandy contact ulf jasper umandelbrotel simple fractal browser contact ulf jasper uvmcolorel fontlock support vm contact ulf jasper input unicode via tex notation contact sergei pokrovsky uboatel generate uboatdeath message patterned iron coffin contact noah friedman umlauteel support german umlaute contact roland winkler unaccentel function dealing accented character contact drew adam underel underline region character contact benjamin drieu undobrowseel powerful undo system browsermovieredohilit contact goel undogroupel undo group change contact james h gorrell undocel strip m wordstyle formatting leave readable ascii file contact joshua guttman unibasicel major mode working unibasic file emacs contact pat thoyts unicodeel unicode encoding gnu emacs contact otfried cheong unicodeinputel inputting unicode subset tex transcription contact florian weimer uniqel remove duplicate line contact art taylor unitsel unit conversion using unitsdat contact linh dang unmungegeneralel change addresssig context gnu contact gareth owen unsafepel determine whether lisp form safe evaluate contact jonathan yavner unscrollel function restore screen scrolling contact bob glickstein uptimeel report uptime emacs process contact david n welton uptimesel track display emacs session uptime contact dave pearson uuinsertel uuencodedecode file directory text buffer contact benjamin pierce vbnetmodeel mode editing visual basic net program contact dino chiesa vcel extension standard library vcel contact drew adam vcel extension standard library vcel contact drew adam vcdarcsel vc backend darcs contact juliusz chroboczek vchooksel extension standard library vchooksel contact drew adam vcardel vcard parsing display routine contact noah friedman velel extra velocitybased scrollmethod contact deepak goel verbisteel emacs interface verbiste contact ben voui verilogmodeel major mode editing verilog source emacs contact michael mcnamara versioninfoel utility operating lisp file version contact steve kemp versionsel version string comparison contact vinicius jose latorre vhdlmodeel major mode editing vhdl code contact vhdl mode maintainer note broken vimpulseel emulates vim useful feature including visual mode contact jason spiro visiturlel frontend function browseurl package contact john wiegley vkillel view kill unix process within emacs contact noah friedman vlineel highlight column contact taiki sugawara vlogmodeel new major mode editing verilog file contact sun yijiang vmel another mail reader within emacs contact robert fenk taken kyle jones vmbiffel xlbiff like tool vm contact robert fenk vmbogofilterel interface vm bogofilter spam filter contact bjorn knutsson vmgrepmailel vm interface grepmail contact robert fenk vmmultdomel multipledomain reply header manipulation vm contact noah friedman vmpcrisisel wideranging autosetup personality vm contact rob hodges vmpineel draft handling message helpful function vm contact robert fenk vmpsprintel psprinting function vm contact robert fenk vmserialel automatic creation personalized email contact robert fenk vmvcardel vcard parsing formatting routine vm contact noah friedman volctrlel elisp interface controling audio output contact anand b pillai vorbiscommentel edit comment ogg vorbis file contact jesper harder vovmodeel major mode vov chivas contact paolo gianrossi vtxel package reading videotext targz file contact lars magne ingebrigtsen vvbmodeel minor mode display visible vertical bar contact jerry g chen minor mode display visible vertical bar work emacs contact jerry g chen fully customizable web browser emacs contact mailing list file wbrowserel contact drew adam download display ntemacs faq contact steve kemp send message using net send contact mathias dahl use standard window open file box contact drew adam lynxlike multiple bookmark contact daryl bunce type ahead support contact matt hodges add additional infolike navigation contact neil w van dyke wajigel interface wajig contact william xu wanderlustel mailnews management system support contact yuuichi teranishi warlordel annoy denizen altfanwarlord contact noah friedman watsonel query web search engine aggregate result contact eric marsden waveel editing sound file contact lars magne ingebrigtsen wblinenumberel windowbased line number mode contact naoki nakamura wclockel world clock contact ivan kanis wcountel keep running count word buffer contact bob glickstein note sun bob site moment wdiredel rename file editing name dired buffer contact juan leon lahoz garcia webjumpel programmable web hotlist contact neil w van dyke webjumpplusel supplemental web site list webjump contact neil w van dyke webloggerel weblog maintenance via xmlrpc apis contact mark hershberger wgetel wget interface emacs contact kevin burton whatdomainel toplevel internet domain name information contact noah friedman whichel search program path variable execpath contact christoph conrad whitespaceel warn clean bogus whitespaces file contact rajesh vaidheeswarran whizzytexel whizzytex wysiwig environment latex contact didier remy whocallsel display known caller function contact jesper harder widecolumnel call function dependant column position contact phillip lord wikiel description maintain wikis using emacs contact alex schroeder wikiinterel interwikis wikiel contact alex schroeder wikinavel simple file navigation using wikistrings contact roland walker wikiremoteel edit page remote wiki contact alex schroeder wikipediamodeel mode editing wikipedia article offline contact chong yidong wimpydelel require confirmation large region deletion contact drew adam windmoveel directional windowselection routine contact hovav shacham windowel extension standard library windowel contact drew adam windownumberingmodeel numbered window shortcut contact nikolaj schumacher windowsel switch multiple favorite window configuration contact hirose yuuji winhistel window configuration history contact bob glickstein winpointel remember buffer position perwindow per buffer contact jorgen schaefer winringel window configuration ring contact barry warsaw womanel browse un x manual page wo without man contact francis j wright wordcounterel count word buffer region contact rafael sepúlveda wordwrapel return character within text paragraph saved contact unknown wordnetel simple wordnet mode contact thomas link workingel display working message minibuffer contact eric ludlam worklogel keep track stuff contact arjen wiersma wstrimel tool minor mode trim whitespace text line contact martin stjernholm note broken sun slow wtfel look conversational computing acronym contact michael olson wupel selective recursive file copy useful website update contact thienthi nguyen wwtimeel insert time day appropriate worldwide localization contact norman walsh xfaceel xface encoderdecoderviewer emacsen contact katsumi yamaoka xface utility emacs contact katsumi yamaoka xmigrantel support subprocesses handling remote x display contact bryan osullivan xsymbolel semi wysiwyg latex html etc using additional font contact christoph wedler xaeel xml authoring environment emacs contact paul kinnucan xbaseel mode editing xbase program contact dave pearson xcscopeel cscope interface xemacs contact darryl okahata xffel extended findfile contact thomas link xgtagsel gtags facility emacs contact marco gidde xmlcodingel coding system xml file emacs contact kevin ryde xmlliteel indentationengine xml contact mike williams xmlparseel code efficiently readwrite xml data elisp contact john wiegley xmlrpcel elisp implementation clientside xmlrpc contact mark hershberger xmlunicodeel unicode support xml contact norman walsh xplainmodeel major mode editing xplain script contact berend de boer xrayel display internal object structure temporary buffer contact vinicius jose latorre xrdbmodeel mode editing x resource database file contact barry warsaw xrefel maintain use crossreferences hypertext link contact peter stephenson xslideel emacs major mode xsl stylesheets contact xslidebug menteithcom xsltprocessel invoke xslt processor emacs buffer contact ovidiu predescu xtermextrasel define additional function key sequence recent version xterm contact peter heslin xtermfrobsel manipulate xterm running emacs tty mode contact noah friedman xtideel xtide display emacs contact kevin ryde xtlael arch interface emacs contact stefan reichoer xwemel xemacs window manager contact zajcev evgeny xxmlel supplementary tool handling sgml html contact françois pinard mode highlight word like date time etc year code walkthroughs contact christian egli yahamel yet another haskell mode gnu emacs contact ian zimmerman yatexel yet another tex mode emacs contact hirose yuuji zoomfrmel command zoom frame change font size contact drew adam quick jump first entry letter b c e f g h j k l n p q r u v w x z
147,Lobsters,emacs,Emacs editor,Emacs Calc Tutorials,https://github.com/ahyatt/emacs-calc-tutorials,emacs calc tutorial,,repository contains tutorial emacs calc originally writen emacs community google best way read probably open org file directly github display correctly anyone would like correct anything add tutorial request anything normal github bug request pull request process work
148,Lobsters,emacs,Emacs editor,Emacs Lisp implementation in JavaScript,https://github.com/samsonjs/elisp.js,emacs lisp implementation javascript,join github today sign file permalink http githubcomsamsonjselispjs http wwwymacsorg http wwwymacsorgdemo http http codegooglecompnativeclient http narwhaljsorg resource license reload reload,emacs lisp interpreter javascript dismiss join github today github home million developer working together host review code manage project build software together sign file permalink failed load latest commit information type name latest commit message commit time emacs lisp implementation javascript copyright c sami samhuri samisamhuri gmailcom released term mit license see included file license latest version available github http githubcomsamsonjselispjs introduction must kidding idea editing code directly github bitbucket web browser pretty cool going thing use best tool available imo tool written emacs lisp would like use browser maybe offline goodness thrown seeing ymacs action also inspiration start project todo list several month emacs browser could reality ymacs proof palm release project are need tool beginning reality longer uncertain beast would useful question whether using something like google native client original c version emacs way go slower implementation javascript feasible real use http wwwymacsorg http wwwymacsorgdemo http http codegooglecompnativeclient getting started currently using commonjs via narwhal javascriptcore engine run test well pas everything tested mean http narwhaljsorg rlwrap narwhal run elispsh install javascript shell choice recommend install rlwrap readline wrap edit elispsh reflect whether use rlwrap shell name path run elispsh type q q quit repl anything start q like quickly quit lisp lisp freak entered something c z still get example cd projectselispjs elispsh elisp defvar directory userssjs home directory nil elisp directory userssjs elisp setq foo bar baz elisp foo bar baz elisp stringmatch az lurgh symbolname fooblurgh elisp q know print without trailing newline javascript please let know interface parser evaluator besides shortcut new elispparserparser input return parser object likewise new elispevaluatorevaluator exprs return evaluator object mainly toy function extremely simple operation number string implemented right stay tuned better yet hack away submit pull request github much compared real thing decent start line parserreader lexing token go straight tagged data ints float string symbol list quoted expression symbol table need replaced asap function variable separate broken lexical scoping expression evaluator primitive type string symbol lambda number con special form defvar defun set setq quote evalapply atom function call special form primitive math ops thanks j overloading work string emacs lisp interpreter javascript resource license perform action time signed another tab window reload refresh session signed another tab window reload refresh session
149,Lobsters,emacs,Emacs editor,Collection of novels in Org-mode,https://github.com/eubarbosa/novels.org,collection novel orgmode,join github today sign,dismiss join github today github home million developer working together host review code manage project build software together sign
152,Lobsters,emacs,Emacs editor,Recommended Reading: ``The Craft of Text Editing'' by Craig Finseth,http://verisimilitudes.net/2019-01-15,recommended reading craft text editing craig finseth,index comment,index commentsas first recommended reading entry explain periodically fifteenth month recommending book review thereof focus programming technologyrelated material nonfiction freely available gratisthe book recommended craft text editing craig finseth may found herethis pleasant read anyone interested wanting expand knowledge conventional text editing book based author bachelor thesis examining underlying principle text editor time book later expanded eleven year cover advance change made interimthe book pay special attention emacsstyle editor choice made design majority work applies text editor several different method implementation discussed topic unit text feature question help reader acknowledge understanding lack thereofthe book begin simple incomplete example part text editor first chapter discus user text editor various consideration must taken account particular interest constraint dictated human body take disabled user account building last second chapter discus various type hardware available user consideration chapter rife description problem solution longer come question nonetheless extremely interesting curious reader implementation language various tradeoff advantage topic third chapter wide selection language discussed make good list pick language learn casesthe fourth chapter concern various common model representing text repercussion various model range basic editor complex word processor includes model longer common use file format convention across various system focus chapter five including newline convention formatted text information line handling chapter feature great deal material longer relevant easily interest anyone curious chapter six discus various way decomposing editor subcomponents going great detail concerning data structure used point book certainly detailed technical chapterchapter seven concern redisplay advanced chapter terminal redisplay algorithm technique chapter eight concern main loop editor perspective user rather comprehensive describing common facility command level chapter nine discus design command set chapter ten brief chapter recounting much book additional material related closely emacs plain text editingthe book make rather heavy use c language program example whatnot brief introduction c first appendix book make exhilerating look back computing consideration taken account historically bibliography also make good reading material wanting delve deeper topicif ever want implement text editor book worth taking look short easy read well
153,Lobsters,emacs,Emacs editor,Literate elisp: init.org,https://github.com/wasamasa/dotemacs/blob/master/init.org,literate elisp initorg,preface literate configuration orgmode arch linux init user interface superfluous ui element stop cursor blinking le jarring background change load theme solarized bozhidar batsov improve mode line smartmodeline disable advertisement gnu project fix display emoji adjust keystroke echo timeout emacs annoyance memory management fix question emacs se gnutls gnutls library scratch initial buffer find c function statistic http ftpgnuorggnuemacs shorten yesno prompt open url zero default splitting tresholds unique buffer name inhibit littering init file display nfo file appropriate code page fix scrolling indent space default manage backup autosave file allow multiple emacs daemon stop pasting mouse click point display buffer name frame title disable parenthesis blinking entering match display fringe indicator fix line movement enable every deactivated command save clipboard data program kill ring possible make recentering behave similiar program make something useful use dialog box package bundled emacs dired tramp calendar calfw cider ccmode emacs lisp cask scheme chicken common lisp sbcl nxml cs python typing emacs etags info nroff package outside emacs csv csvmode gnu elpa melpa vimplug makepkg autocompletemode navigation search grep ag libarchive behaviour custom command hook define utility function define setup function anacondamode companyjedi jediel jedi tern pry tex latex usage tweak behaviour candidate common auctex function required match paredit disable default pair add idelike autoinsertion brace wiki initial state emacslike feel keymap hacking evil extra keybindings evilnumbers acejump unimpairedvim load supplementary mode erc authentication identification znc freenode nickserv service basic usability tweak smart filter add extra keybinds hack wiki wiki entry point geiser slime keybinds hook basic setup modespecific setup load unpublished package set unpublished package postinit stuff mix yasnippet evil initial state via major mode hook epilogue esup,preface experiment find whether literate configuration single monolithic orgmode file actually perceivable benefit using configuration system running arch linux emacs configuration using latest greatest feature check system running use emacsclient editing need occasionally open emacs instance thing like irc testing purpose debug added property drawer following subtree export code block emacs mx orgbabeltangle please use emacs configuration suggest study instead inspect many variable involved builtin help system hitting v list literate emacs configuration drawn inspiration init user interface emacs come set pretty wonky default since ui see first deal swiftly part configuration set xresources effect used frame displayed price le flexibility experimentation reload configuration xrdb xresources keep mind hack might anything sufficiently fast machine load theme faster notice superfluous ui element prefer dealing menu bar tool bar scroll bar deactivate xresources emacsmenubar emacstoolbar emacsverticalscrollbars stop cursor blinking used give nightmare especially addition made cursor blink ten time stop blinking moving emacscursorblink le jarring background change default background color chosen white however using dark theme changing background color frame creation result flashing therefore modify background color equal one theme going load later emacsbackground ui element left stay visible throughout entire init time would mode line took bit puzzling figure right format making look theme eventually figured reading last paragraph emacs table resource info node read list string studying source facesel xfacesc sound kind obvious mean one debug error complex value like one box simply invoking readfromstring emacsmodelineattributeforeground emacsmodelineattributebackground emacsmodelineattributebox linewidth color load theme theme heavily customized solarized originally taken bozhidar batsov later rewritten support additional mode palette terminal variant toggling stored separate file accomodate fact need customize variable usermade theme addtolist customthemeloadpath codeelisppunpuntheme addtolist loadpath codeelisppunpuntheme defun myloadtheme optional frame withselectedframe frame selectedframe loadtheme punpunlight myloadtheme addhook aftermakeframefunctions myloadtheme let disable question theme loading setq customsafethemes tooltips themed well setq xgtkusesystemtooltips nil improve mode line mode line essentially huge nested list mode line item customize achieve prefered look simplest way getting useful mode line using smartmodeline package come useful colorcoded item interesting feature like shortening file name minor mode setq smltheme respectful smlmodewidth full smlnamewidth smlreplacerregexplist org emacsd ed however prefer hiding minor mode default disable advertisement first obvious thing one notice upon launching uncustomized emacs rather fancy splash screen informs usage advertises gnu project eventually grow annoyed setq inhibitstartupscreen le obvious one advertisement message displayed successful startup echo area culprit behind displaystartupechoareamessage go great length make sure seen first checking whether inhibitstartupechoareamessage set customize system user name scanning init file regular expression considering dislike using customize system conventional init file find pretty silly disable behaviour entirely redefining function display bit encouraging message instead defun displaystartupechoareamessage message let hacking begin fix display emoji starting use emacs irc discovered unlike everything else system using excellent fontconfig software fails displaying emoji infamous pile poo box afraid never find exact detail font fallback mechanism might better fix emacs emacsclient font size set fontset consisting favourite monospaced suitable fallback font x resource init file dejavu sans mono symbol dejavu sans symbol symbola emacsfont setq defaultframealist font dejavu sans defun myfixemojis optional frame setfontsetfont fontsetdefault nil symbola frame append myfixemojis addhook aftermakeframefunctions myfixemojis adjust keystroke echo timeout builtin feature expect useful type part keybind emacs display part echo area timeout one second bit long though taste setq echokeystrokes emacs annoyance every file stating file part gnu emacs often source code may crufty nauseainducing weird default need correct memory management let allow kib cache starting garbage collection setq gcconsthreshold fix linenumbermode linenumbermode display current line number mode line however stop buffer encountering least one overly long line display two question mark instead pretty unhelpful workaround able find increase linenumberdisplaywidth substantially higher value setq linenumberdisplaylimitwidth see also question emacs se gnutls idea apparently get nasty warning gnutls library using http default setting increasing minimum prime bit size something safer alleviates setq gnutlsminprimebits scratch since scratch buffer pretty hardwired emacs see bufferc least could getting rid initial message using mode instead emacslispmode questionable benefit function inserting evaluation value newline setq initialscratchmessage setq initialmajormode emacslispmode initial buffer however want see scratch buffer let display note file instead daily reminder left setq remembernotesinitialmajormode orgmode setq initialbufferchoice remembernotes bit mismatch keybindings remembernotesmode orgmode let fix withevalafterload remember definekey remembernotesmodemap kbd cc cc nil find c function fair number emacs function written emacs lisp see statistic able locate necessary grab tarball source put specific location recreate grab latest tarball http ftpgnuorggnuemacs extract content put src directory emacsd customize following variable setq findfunctioncsourcedirectory emacsdsrc shorten yesno prompt per default required type full yes whenever function yesornop invoked let substitute function definition allow n without even requiring confirmation fset yesornop yornp open url xdgopen set xdgopen use prefered browser http http url emacs claim detect whether system use however fails popular de running kid look browseurlcanusexdg replicates part xdgopen script setq browseurlbrowserfunction browseurlxdgopen zero default splitting tresholds idea actually work seems make emacs prefer horizontal split vertical split wide screen setq splitheightthreshold splitwidththreshold unique buffer name necessary since already using smartmodeline however better use le confusing style default put bracket around buffer name shared emacs setq uniquifybuffernamestyle forward inhibit custom littering init file whatever reason customization system write init file especially annoying version control like reasonably simple deactivate behaviour customizing customize using dedicated file however need delete line wrote load afterwards make aware already loaded successfully setq customfile emacsdetccustomel load customfile display nfo file appropriate code page since emacs autodetection encoding quite good omniscient give nudge display file way supposed addtolist autocodingalist nfo fix scrolling halfpage scrolling great reducing bandwidth jarring done automatically following setting make emacs scroll line line without scrolloff try keep point visual place scrolling page used scrolloff enabled scrollmargin variable introduced pretty nasty scrolling behaviour large file longer setq scrollconservatively scrollpreservescreenposition indent space default programming language work prefer space tab note mode bufferlocal variable setqdefault indenttabsmode nil manage backup autosave file backup file created save directory file end numbered make sense combined different save location automatic pruning setq backupdirectoryalist emacsdbackup setq versioncontrol setq deleteoldversions autosave file created save sufficient timeout current directory crash detection begin end let change save location well setq autosavelistfileprefix emacsdautosave setq autosavefilenametransforms emacsdautosave keep mind nothing regarding lock file except deactivating completely robs ability detect session clash symlinks created upon modification file question directory prefixed saving file make disappear unlike autosave file allow multiple emacs daemon although pretty sure make use prefer using local tcp connection socket file another benefit setting would allow make use emacsclient access remote emacs daemon stop pasting mouse click point middleclicking nice paste however adjust point paste adjusted point setq mouseyankatpoint display buffer name frame title default display invocation name host changing use different separator buffer name trivial however still annoying space front using regular expression rescue setq frametitleformat invocationname eval replaceregexpinstring buffername disable parenthesis blinking entering match done different package anyways therefore need setq blinkmatchingparen nil display fringe indicator fix line movement visuallinemode pretty nice option display word buffer hardwrapped around word boundary however confusing fringe indicator setq visuallinefringeindicators leftcurlyarrow rightcurlyarrow like remappings done operate visual line ca ce ck undefining setcdr visuallinemodemap nil enable every deactivated command rationale default seems avoid confusion beginner personally find kind annoying emacs editor kind thing offer straightforward option disable even setq disabledcommandfunction nil save clipboard data program kill ring possible hope necessity gone wayland viable option setq saveinterprogrampastebeforekill make recentering behave similiar program try hitting cl start top instead middle row setq recenterpositions top middle bottom make kill something useful lesser known fact sending signal emacs process make proceed soon possible debug window ignored however let bind alternative desirable function used emacs instance locked defun myquitemacsunconditionally interactive myquitemacs definekey specialeventmap kbd myquitemacsunconditionally use dialog box clicking install button instance make emacs spawn dialog box point setq usedialogbox nil package bundled emacs includes stuff bundled emacs obtained recent source well orgmode mostly refering smaller package though recentf recentfmode allows access list recent file used ido helm let save file somewhere else change size history setq recentfsavefile emacsdetcrecentf recentfmaxsaveditems savehist history prompt like saved let change save file history length first setq savehistfile emacsdetcsavehist historylength saveplace expect like functionality pretty neat start last place file next time visit aside putting save file somewhere else enable behaviour every buffer since bufferlocal setqdefault saveplace setq saveplacefile emacsdetcsaveplace windmove windmove provides useful command moving window focus direction prefer wraparound instead getting error though setq windmovewraparound bookmark yet another file prefer saved somewhere else setq bookmarkdefaultfile emacsdetcbookmarks ediff anything else emacsclient spawning frame pretty much useless assume vertical split done customized horizontal split prefered name alternative splitting function mistake emacs call horizontal windowel called vertical anything else setq ediffwindowsetupfunction ediffsetupwindowsplain ediffsplitwindowfunction splitwindowhorizontally debug debugger display position point evaluating buffer following rendition debugsetupbuffer display line number well withevalafterload debug defun debuggersetupbuffer debuggerargs initialize backtrace buffer entry debugger buffer current already setq bufferreadonly nil erasebuffer setbuffermultibyte nil stef setq bufferundolist let standardoutput currentbuffer printescapenewlines printlevel printlength backtrace gotochar pointmin deleteregion point progn searchforward n debug forwardline eq car debuggerargs debug remove implementdebugonentry frame point insert debugger entered lambda debugoncall function call next debug debugonentry function called pcase car debuggerargs lambda debug insert entering function n exiting function exit insert returning value setq debuggervalue nth debuggerargs debuggervalue currentbuffer insert n deletechar insert beginningofline debugger entered error error insert lisp error nth debuggerargs currentbuffer insert n debugoncall next thing eval insert beginning evaluation function call form n user call debug directly insert eq car debuggerargs nil cdr debuggerargs debuggerargs currentbuffer insert n frame us evalbuffer insert line state buffer position reading saveexcursion let tem evalbufferlist tem researchforward eval bufferregion nil beginningofline insert format error line withcurrentbuffer car tem linenumberatpos point withcurrentbuffer car tem buffername pop tem debuggermakexrefs dired time using dired prefer spawning endless amount buffer fact prefer using one buffer unless another one explicitly created everything withevalafterload dired definekey diredmodemap kbd ret diredfindalternatefile tramp tramp make backup file better kept locally remote setq trampbackupdirectoryalist backupdirectoryalist usual want fix file storing history withevalafterload trampcache setq tramppersistencyfilename emacsdetctramp honest prefer automatically interfering everything unloading entirely cause package break assume enabled therefore going main entry point dike defun mydisabletrampfilehandlers setq filenamehandleralist remove stringmatchp tramp symbolname cdr filenamehandleralist calendar general functionality calendar inside emacs split lot file customizing affect package including calfw following customizations make appear german since happen live germany uh setq calendarweekstartday calendardaynamearray sonntag montag dienstag mittwoch donnerstag freitag samstag calendarmonthnamearray januar februar märz april mai juni juli august september oktober november dezember setq solarnhemiseasons frühlingsanfang sommeranfang herbstanfang winteranfang setq holidaygeneralholidays holidayfixed neujahr holidayfixed mai holidayfixed tag der deutschen einheit setq holidaychristianholidays holidayfloat advent holidayfloat advent holidayfloat advent holidayfloat advent holidayfixed weihnachten holidayfixed weihnachtstag holidayfixed weihnachtstag holidayfixed heilige drei könige holidayeasteretc rosenmontag holidayeasteretc gründonnerstag holidayeasteretc karfreitag holidayeasteretc ostersonntag holidayeasteretc ostermontag holidayeasteretc christi himmelfahrt holidayeasteretc pfingstsonntag holidayeasteretc pfingstmontag holidayeasteretc fronleichnam holidayfixed mariae himmelfahrt holidayfixed allerheiligen holidayfloat totensonntag setq holidayorientalholidays nil holidaybahaiholidays nil holidayislamicholidays nil holidayhebrewholidays nil orgmode first ui editing tweak setq orgcatchinvisibleedits error orgstartupindented orgcycleincludeplainlists integrate orgellipsis orgreturnfollowslink orgmretmaysplitline nil orgsrcfontifynatively orgsrcpreserveindentation orgenforcetododependencies orgenforcetodocheckboxdependencies orglinkframesetup file findfile like taking note sometimes even take look agenda setq orgdirectory org orgagendafiles list orgdirectory orgdefaultnotesfile orginboxorg orgcapturetemplates n note entry fileheadline orginboxorg inbox todo h nn emptylines p pw entry fileheadline orgpworg pw todo h nn emptylines w work entry filedatetree orgworkorg h nn emptylines j journal entry filedatetree orgjournalorg h nn emptylines keep track much wrote taking note enable word counting minor mode upstream autoload entry point autoload wcmode wcmode enable wcmode addhook orgcapturemodehook wcmode export functionality handy stuff like using deactivated default setq orgexportbackends ascii beamer html latex md bit tricky color code listing permit flexible table setq orglatexlistings minted orglatexpackagesalist tabu minted orglatexpdfprocess pdflatex shellescape interaction nonstopmode outputdirectory f pdflatex shellescape interaction nonstopmode outputdirectory f org exporter rather weird way figuring open exported file give nudge note since emacs handle pdfs docview mailcap implementation prefers lisp viewer system viewer end using docview case tell placing pdf entry top still defining rather want use xdgopen instead piece rubbish setq orgfileapps pdf system automode emacs system xdgopen system comint come another particularly interesting emacs package allows one define major mode interacting replstyle process word give kind shell interpreter interaction common keybindings sql favourite programming language shell even emacs used try mx ielm however couple thing could improved one fact default buffer editable prompt customized easily readonly remaining output need bit work setq comintpromptreadonly defun mycomintpreoutputreadonly text propertize text readonly addhook comintpreoutputfilterfunctions mycomintpreoutputreadonly would better patch comintpreviousinput used comintnextinput negative argument worry take customizable value determines whether wrap around hacked wrapping around simplicity sake defun comintpreviousinput arg cycle backwards wraparound input history saving input interactive p unless eq comintinputringindex nil arg eq comintinputringindex arg comintstoredincompleteinput comintrestoreinput unless eq comintinputringindex ringlength comintinputring arg comintpreviousmatchinginput arg trivial clear entire comint buffer temporarily binding comintbuffermaximumsize zero calling cominttruncatebuffer however really want usually output last expression faulty need cleared replacing comment idea taken cider defun mycomintlastoutputbeg saveexcursion comintgotoprocessmark eq getcharproperty point field boundary point pointmin gotochar previouscharpropertychange point pointmin point pointmin point point defun mycomintlastoutputend saveexcursion comintgotoprocessmark eq getcharproperty point fontlockface cominthighlightprompt point pointmin gotochar previouscharpropertychange point pointmin let overlay car overlaysat point overlay eq overlayget overlay fontlockface cominthighlightprompt gotochar overlaystart overlay point defun mycomintclearlastoutput interactive let start mycomintlastoutputbeg end mycomintlastoutputend let inhibitreadonly deleteregion start end saveexcursion gotochar start insert propertize output cleared fontlockface fontlockcommentface killed comint process tend leave useless buffer around let kill noticing event process sentinel defun myshellkillbuffersentinel process event memq processstatus process exit signal bufferlivep processbuffer process killbuffer defun mykillprocessbufferonexit setprocesssentinel getbufferprocess currentbuffer myshellkillbuffersentinel dolist hook ielmmodehook termexechook comintexechook addhook hook mykillprocessbufferonexit recentering feel bit unintuitive since go middle first need top bottom command define command bind later defun myrecentertopbottom interactive gotochar pointmax let recenterpositions top bottom recentertopbottom another thing annoying comint buffer text readonly cursor movement appending kill ring still happen le useful since keep holding key delete word end traversing entire buffer instead stopping readonly boundary pollute kill ring remedy write word killing command typical emacs user fashion however advise builtins since know might possibly relying default behaviour defun mykillword arg interactive p unless bufferreadonly let beg point end saveexcursion forwardword arg point point saveexcursion gotochar arg nextsinglecharpropertychange point readonly previoussinglecharpropertychange point readonly point unless getcharproperty point readonly arg point end point end killregion beg point killregion beg end defun mybackwardkillword arg interactive p mykillword arg new functionality introduced bound key convenient use note remapping command withevalafterload comint definekey comintmodemap kbd remap killword mykillword definekey comintmodemap kbd remap backwardkillword mybackwardkillword definekey comintmodemap kbd csl mycomintclearlastoutput definekey comintmodemap kbd cl myrecentertopbottom shell unknown reason get input echoed back word sending l shell echo input twice output comint setting filter echo defun myshellturnechooff setq comintprocessechoes addhook shellmodehook myshellturnechooff eshell want cd unconditionally delete character quit empty prompt defun myeshellquitordeletechar arg interactive p eolp lookingback eshellpromptregexp eshelllifeistoomuch http emacshorrorscompostlifeistoomuch deleteforwardchar arg defun myeshellsetup definekey eshellmodemap kbd cd myeshellquitordeletechar addhook eshellmodehook myeshellsetup silly reason like rainbowcolored prompt addhook eshellloadhook nyanpromptenable ccmode ingenuity emacs developer decided make gnu style default style c code written decision help making contribution gnu project still adhering style including emacs fair bit easier hate using anything else know exact preference yet time user style good enough still customized something sophisticated setq cdefaultstyle javamode java awkmode awk cmode user eldocmode default idle delay way long also avoid displaying overly long function signature setq eldocidledelay eldocechoareausemultilinep nil emacs lisp cask file emacs lisp addtolist automodealist cask emacslispmode additionally keybindings like two extra keybinds evaluation repl defun myevalregionorbuffer interactive regionactivep evalregion regionbeginning regionend evalbuffer withevalafterload lispmode definekey emacslispmodemap kbd cc cc myevalregionorbuffer definekey emacslispmodemap kbd cc cz ielm eldoc nice helper avoid looking function signature function documentation addhook emacslispmodehook turnoneldocmode addhook ielmmodehook turnoneldocmode scheme like chicken setq schemeprogramname csi addtolist interpretermodealist chickenscheme schememode avoid typing mx runscheme define another useful keybinding withevalafterload scheme definekey schememodemap kbd cc cz runscheme binding replaced though launching repl eventually fix perhaps major mode indentation hint fortunately seem work language emacs lisp put match schemeindentfunction put matchlet schemeindentfunction put matchlet schemeindentfunction put schemeindentfunction put andlet schemeindentfunction put iflet schemeindentfunction put letlocation schemeindentfunction put select schemeindentfunction put bitmatch schemeindentfunction put bitpacket schemeindentfunction put withtransaction schemeindentfunction put foreignlambda schemeindentfunction schemey file format like automatically recognize addtolist automodealist sxml schememode addtolist automodealist sc schememode addtolist automodealist setup schememode addtolist automodealist meta schememode addtolist automodealist releaseinfo schememode common lisp like sbcl setq inferiorlispprogram usrbinsbcl nxml let automatically complete closing tag setq nxmlslashautocompleteflag cs indentation could bit narrow setq cssindentoffset python emacs aware versiondependent shebang addtolist interpretermodealist pythonmode addtolist interpretermodealist pythonmode reason guessing indentation offset default although nearly python code worked use space even care message displayed done setq pythonindentguessindentoffset nil typing emacs please litter home directory score file setq toehighscorefile emacsdetctoescore rebuilder interactive preview construction important note three flavour regular expression encountered emacs read syntax reminiscent dialect used prompt string syntax used code double amount backslashes string passed reader remove extraneous one finally rx macro one use writing lispy listed syntax supported rebuilder whatever reason though read syntax default make much sense since evil give searchreplace preview prefer string syntax default setq rebresyntax string etags created tag file finding definition c source quickly avoid prompting name one customize following setq tagsfilename tag info make copying use lispy syntax default normal syntax argument copy html link defun myinfocopycurrentnodename arg copy lispy form current node prefix argument copy link online manual instead interactive p let manual filenamesansextension filenamenondirectory infocurrentfile node infocurrentnode link arg format info manual node note work emacsrelated node format http wwwgnuorgsoftwareemacsmanualhtmlnode shtml manual string node top index replaceregexpinstring node killnew link message link withevalafterload info definekey infomodemap kbd c myinfocopycurrentnodename nroff pretend mdoc nroff addtolist automodealist mdoc nroffmode package outside emacs welcome blind spot emacsdevel unlike people pretend external package something speak hushed tone nice improvement vanilla mx give persistency better matching let give history different file setq smexsavefile concat useremacsdirectory etcsmex smexhistorylength csv installing csvmode gnu elpa found using set form customization option separator therefore figure internal variable setting customized setq csvseparators csvseparatorchars csv skipregexp csvseparatorregexp csvfontlockkeywords csvseparatorface clientside melpa hugely useful development also useful obtain package need built differently offer vimplug come close closest equivalent would makepkg utility customization necessary update package happen even already exist setq quelpaupgradep declarative popup window rule setq shacklerules circequerymode help align select helm regexp align compilationmode firestarter magitdiff regexp noselect ciderrepl regexp align size inferiorschememode shell eshell popup shackledefaultrule select shackledefaultsize shackleinhibitwindowquitonsamewindows le clumsy management window configuration switch back forth like configuration wrap around setq eyebrowseswitchbackandforth eyebrowsewraparound best autocompletion mode following set good amount ui tweak everything necessary global backends setq companyidledelay companyminimumprefixlength companyselectionwraparound companyshownumbers companyrequirematch never companydabbrevdowncase nil companydabbrevignorecase companybackends companyjedi companynxml companycss companycapf companydabbrevcode companykeywords companyfiles companydabbrev companyjedipythonbin python sometimes useful narrow candidate list overly long something better c withevalafterload company definekey companyactivemap kbd c helmcompany hitting esc exit evil insert state usually typing completable text still keep popup open similiar problem applies candidate search workaround defun mycompanyabort interactive companyabort boundandtruep evilmode eq evilstate insert evilforcenormalstate withevalafterload company definekey companyactivemap kbd escape mycompanyabort definekey companysearchmap kbd escape companysearchabort transitioned autocompletemode missing selection behaviour company quite yet remapping help withevalafterload company definekey companyactivemap kbd tab companycompletecommonorcycle definekey companyactivemap kbd tab companycompletecommonorcycle definekey companyactivemap kbd stab companyselectprevious definekey companyactivemap kbd backtab companyselectprevious helpful setting involve frontends preview current candidate inline triggering completion selected key including spc setq companyfrontends companypseudotooltipunlessjustonefrontend companyechometadatafrontend companypreviewfrontend companyautocomplete useful library bad know properly use yet since sprinkled code like extra syntax highlighting withevalafterload dash dashenablefontlock polarizing package say least good part actually try enabling abstraction complex selection ui bad part overly complex hard debug prone bizarre behaviour handed ten bug already expect last said find essential quickly find way emacs wish le idiosyncratic developer documentation navigation default navigation fast could automatically switching directory must note hack helmff autoupdatestate supposedly internal set using helmfindfiles essentially mean everything using file selector get autoswitching goody unless file found hack however hack go beyond helmffidostylebackspace customization unconditionally enables backspace going one level kind file selector setq helmffidostylebackspace always helmffautoupdateinitialvalue helmff autoupdatestate withevalafterload helmfiles definekey helmreadfilemap kbd backspace helmfindfilesuponelevel definekey helmfindfilesmap kbd backspace helmfindfilesuponelevel idiosyncracies resolved file selection want see boring file get prompted creating new file either creation new directory however kept setq helmffnewfilepromptp nil helmffskipboringfiles search grep fast best tool code search especially within compressed file go ag instead z option enables usage great libarchive helm recognize match properly need enable line number column output something vimgrep option irony another subtle hack hidden deliberately using recursing variant type search might break something far shown obvious sideeffects setq helmgrepdefaultcommand ag vimgrep z p f helmgrepdefaultrecursecommand ag vimgrep z p f two command pretty common query one going official emacs lisp source c part defun mygrepemacselisp interactive usrshareemacs lisp elgz usrshareemacs lisp elgz defun mygrepemacsc interactive emacsdsrc c emacsdsrc h completingread behaviour whatever reason findlibrary used properly helmmode enabled adding read handler fix withevalafterload helmmode addtolist helmcompletingreadhandlersalist findlibrary helmcompletingreadwithcandsinbuffer dislike helm taking tabcompletion irc client setq helmmodenocompletioninregioninmodes circechannelmode circequerymode circeservermode highlighting token match tad slow let speed setq helmmphighlightdelay like dotfiles repo default using helmcmdt directory versioncontrol setq helmcmdtdefaultrepo codedotfiles know helm try window management please stop setq helmdisplayfunction poptobuffer custom command withevalafterload helm defun myhelmrdictcc interactive helm source myhelmrdictccsource buffer helm rdictcc defvar myhelmrdictccsource helmbuildasyncsource rdictcc candidatesprocess myhelmrdictccprocess candidatenumberlimit filteredcandidatetransformer myhelmrdictcctransformer requirespattern defun myhelmrdictccprocess let proc startprocess rdictcc helmbuffer rdictcc c helmpattern setprocesssentinel proc lambda process event helmprocessdeferredsentinelhook process event defaultdirectory proc defun myhelmrdictcctransformer candidate source let result dolist candidate candidate stringmatchp ab ab candidate addfacetextproperty length candidate fontlockcommentface nil candidate push candidate result nreverse result language like linting see hook additionally thing tweak one prever texlacheck linter default texchktex linter want use emacslispcheckdoc one another thing want linting start idle timer rather opening buffer saving disk setq flycheckdisabledcheckers texchktex emacslispcheckdoc flycheckchecksyntaxautomatically modeenabled save whatever reason emacslisp checker stopped unconditionally initializing package check following avoids error dependency package write setq flycheckemacslispinitializepackages sure describe library defining keycentric interface use execute command singlekey press first foremost come define repetitionfree one define utility function defun myzsh interactive ansiterm zsh defun myinfoemacslispintro interactive info eintr defun myinfoemacslispmanual interactive info elisp defun myinfocl interactive info cl defun myinfoclloop interactive info cl loop facility defun interactive ewwopenfile usrsharechickendocmanualthe standardhtml defun mycapturejournal interactive orgcapture nil j defun mycapturenote interactive orgcapture nil n defun mycapturepw interactive orgcapture nil p defun mycapturework interactive orgcapture nil w defun myopeninbox interactive findfile orginboxorg defun myopenjournal interactive findfile orgjournalorg defun myopenpw interactive findfile orgpworg defun myopentracking interactive findfile orgtrackingorg autoload cfw openorgcalendar calfworg open org calendar define setup function used afterinithook defun mysetuphydra globalsetkey kbd defhydra hydrahelp color blue help helmapropos apropos c describechar describe char f findfunction find function f describefunction describe function k describekey describe key k findfunctiononkey find key describemode describe mode v findvariable find variable v describevariable describe variable globalsetkey kbd defhydra hydrapackages color blue package c helmcolors color f findlibrary find library g customizegroup customize group packageinstall package install p packagelistpackages package list q quelpa quelpa v customizevariable customize variable globalsetkey kbd defhydra hydrasearch color blue search helmimenuanywhere imenu anywhere e mygrepemacselisp grep emacs elisp e mygrepemacsc grep emacs c g helmdogrep grep h helmorgheadlines org headline helmimenu imenu helmmultioccur multioccur helmoccur occur globalsetkey kbd defhydra hydrafind color blue find b helmbufferslist buffer f helmfind find helmfindfiles find file l helmlocate locate helmcmdt cmdt globalsetkey kbd defhydra hydraeval color blue eval c calc calc e eshell eshell g magitstatus magit ielm ielm r helmregexp regexp shell shell myzsh term x helmcalculexpression calculate expression globalsetkey kbd defhydra hydradoc color blue doc c myinfocl cl e infoemacsmanual emacs manual info info l myinfoemacslispmanual emacs lisp manual helmmanwoman man myinfoclloop loop r globalsetkey kbd defhydra hydrazoom color blue zoom l helminsertlatexmath latex math u helmucs ucs globalsetkey kbd defhydra hydramisc color blue misc g helmgooglesuggest google suggest p helmlistemacsprocess emacs process list helmsurfraw surfraw helmtop top w helmworldtime world time globalsetkey kbd defhydra hydradistractions color blue distraction myirc irc tetri tetri globalsetkey kbd defhydra hydracapture color blue org capture c orgcapture capture j mycapturejournal journal n mycapturenote note p mycapturepw pw w mycapturework work globalsetkey kbd defhydra hydralookup color blue org lookup c cfw openorgcalendar calendar myopeninbox inbox j myopenjournal journal p myopenpw pw myopentracking tracking clojure interactive development environment rock like eldoc function signature hiding le interesting buffer also nice addhook nreplinteractionmodehook nreplturnoneldocmode setq nreplhidespecialbuffers superior lisp interaction mode emacs let fancy thing setq slimecontribs slimefancy idelike mode editing javascript due actually parsing code highlighting whatnot used dependency one cs using low indentation width day setq deal kind template file multiple mode one encounter web development template prefer using html day addtolist automodealist html webmode addtolist automodealist tmpl webmode addtolist automodealist erb webmode setq webmodemarkupindentoffset setq webmodecssindentoffset setq webmodecodeindentoffset companyjedi used part anacondamode complement builtin pythonel code navigation documentation lookup autocompletion guess update soon confused companyjedi got factored jediel bootstrap jedi automatically per file completion addhook pythonmodehook companyjedistart companytern tern kind cool forget installing via npm adding ternproject file project root addhook jsmodehook ternmode addtolist companybackends companytern using mode everything stock rubymode would used provides better syntax highlighting indentation using external process addtolist automodealist rb enhrubymode addtolist automodealist gemfile enhrubymode addtolist automodealist rakefile enhrubymode addtolist automodealist rake enhrubymode deep indentation allow bouncing towards le deep level setq enhrubybouncedeepindent emacs come mx infruby mx runpython pry awesome serf better ruby repl setq infrubydefaultimplementation pry improves standard editing facility thing tex latex usage tweak prefer tex engine deal unicode use font like setqdefault texengine luatex set viewer thing setq texquoteafterquote texautosave texparseself texviewprogramlist llpp llpp texviewprogramselection outputdvi stylepstricks dvips gv outputdvi xdvi outputpdf llpp outputhtml xdgopen enable pdf mode enable folding add convenience keybinds like cc ca run every command document viewed defun myextendhsmodesalist addtolist hsspecialmodesalist latexmode latexsectionregexp nil lambda arg latexnextsection skipcharsbackward tn nil autoload latexsectionregexp latexextra latex section regexp defun mylatexsetup texpdfmode latexsetupkeybinds myextendhsmodesalist addhook latexmodehook mylatexsetup completingread behaviour helmmode enables convenient completingread however bit silly candidate common auctex function required match withevalafterload tex defun texcommandmaster optional overrideconfirm run command current document prefix argument overrideconfirm given confirmation depend positive instead entry texcommandlist interactive p texcommand mytexcommandquery texmasterfile texmasterfile overrideconfirm defun texcommandquery name query user tex command use let default cond stringequal name texregion texcheckfiles concat name texoutputextension list name texfileextensions texsavedocument texmasterfile texcommanddefault memq majormode doctexmode latexmode want know bib file newer bbl nt care whether bib file open emacs texcheckfiles concat name bbl mapcar car latexbibliographylist append bibtexfileextensions texbiberfileextensions check bst file well latexusingbiber texcommandbiber texcommandbibtex texprocessgetvariable name texcommandnext texcommandshow texcommandshow completionignorecase answer texcommandforce completingread concat command default default texmodespecificcommandlist majormode nil default texcommandhistory answer latex expanded latex setq answer carsafe texassoc answer texcommandlist answer stringequal answer answer default withevalafterload latex defun latexsectionheading hook prompt latex section name insert hook latexsectionhook allow user change name sectioning command inserted latexsection let string completingread concat level default name latexsectionlist nil nil name update name zerop length string setq name string update level setq level latexsectionlevel name defun latexenvironment arg make latex environment begin end pair optional arg modify current environment may customized following variable latexdefaultenvironment favorite environment latexdefaultstyle favorite document class latexdefaultoptions favorite document class option latexfloat want figure table float latextablelabel prefix label table latexfigurelabel prefix label figure latexdefaultformat format array tabular latexdefaultwidth width minipage tabular latexdefaultposition position array tabular interactive p let environment completingread concat environment type default texnearbobp document latexdefaultenvironment latexenvironmentlist nil nil latexenvironmenthistory latexdefaultenvironment get default cond zerop length environment texnearbobp setq environment document zerop length environment setq environment latexdefaultenvironment setq latexdefaultenvironment environment let entry assoc environment latexenvironmentlist null entry latexaddenvironments list environment arg latexmodifyenvironment environment latexenvironmentmenu environment promise go beyond paredit structured editing lisp code supporting language lisplikes arbitrary kind pair use autopairing feature pair highlighting bit autoindent though disable default pair following wall code disables pair lisp texlike mode make absolutely sense withevalafterload smartparens splocalpair minibufferinactivemode nil action nil splocalpair minibufferinactivemode nil action nil splocalpair emacslispmode nil action nil splocalpair emacslispmode nil action nil splocalpair lispinteractionmode nil action nil splocalpair lispinteractionmode nil action nil splocalpair schememode nil action nil splocalpair schememode nil action nil splocalpair inferiorschememode nil action nil splocalpair inferiorschememode nil action nil splocalpair latexmode nil action nil splocalpair latexmode nil action nil splocalpair latexmode nil action nil splocalpair latexmode nil action nil splocalpair latexmode nil action nil splocalpair latexmode nil action nil splocalpair texmode nil action nil splocalpair texmode nil action nil splocalpair texmode nil action nil splocalpair texmode nil action nil splocalpair texmode nil action nil splocalpair texmode nil action nil add idelike autoinsertion brace working college assignment c java made wish interesting feature seen ides automatic insertion correctly indented newline closing brace allows enter content right away following stolen wiki defun mycreatenewlineandentersexp rest ignored open new brace bracket expression relevant newlines indent newline indentaccordingtomode forwardline indentaccordingtomode withevalafterload smartparens splocalpair cmode nil posthandlers mycreatenewlineandentersexp ret splocalpair javamode nil posthandlers mycreatenewlineandentersexp ret first long pair mismatch message please reserved debugging purpose setq spmessagewidth nil using evil funny thing happening cursor like going beyond end line normal state emulate bit vimlike paren highlighting pair shown inside setq spshowpairfrominside automatic quote escaping feel like mistake author well setq spautoescapestringquote nil curiously named variable control whether overlay spanning pair content disappears backwards motion something entirely different name suggests setq spcancelautoskiponbackwardmovement nil come set sane text editing keybindings live without implementation execution excellent reuse much emacs possible resulting high compatibility feature coverage thing complain source pretty much incomprehensible despite weakness managed writing addition improve integration good bit according taste initial state first plenty special mode neither insert state motion state suffice instead decided away motion state going emacs state whenever make sense aid evil modified function decides upon initial state major mode look derived mode alias defun myrealfunction fun figure actual symbol behind function return different symbol fun alias otherwise fun let symbolfunction symbolfunction fun symbolp symbolfunction symbolfunction fun defun myderivedmodep mode mode let parent myrealfunction mode parent memq parent mode setq parent myrealfunction get parent derivedmodeparent parent withevalafterload evilcore defun evilinitialstate mode optional default return evil state use mode return default initial state associated mode initial state mode set evilsetinitialstate let state mode catch done dolist entry nreverse evilstateproperty mode default setq state car entry mode symbolvalue cdr entry memq mode mode myderivedmodep mode mode throw done state setq evildefaultstate emacs evilemacsstatemodes nil evilinsertstatemodes nil evilmotionstatemodes nil evilnormalstatemodes textmode progmode fundamentalmode cssmode confmode texmode latexmode diffmode orgcapturemode minor mode need use hook instead go viewmode addhook orgcapturemodehook evilinsertstate addhook witheditormodehook evilinsertstate addhook viewmodehook evilemacsstate allow quitting mx magitblame q toggling evil current state defun myeviltoggle interactive cond memq evilstate insert normal evilemacsstate eq evilstate emacs evilexitemacsstate addhook magitblamemodehook myeviltoggle emacslike feel make movement undo search feel bit le weird setq evilcrosslines evilmovebeyondeol evilwantfineundo evilsymbolwordsearch however want cw still window map prefix emacs state instead standard killregion command customization setting applied evilmapsel loaded evilel need load enabling evilmode withevalafterload evilvars setq evilwantcwinemacsstate withevalafterload evilcommon evildeclaremotion recentertopbottom keymap hacking want yank end line setq evilwantyyanktoeol minor mode come keymaps reminiscent special major mode get overridden evil fixed using evilnormalizekeymaps least edebugmode addhook edebugmodehook evilnormalizekeymaps macrostepmode requires bit effort see evil code involved explanation defun mymacrostepsetup evilmakeoverridingmap macrostepkeymap normal evilnormalizekeymaps addhook macrostepmodehook mymacrostepsetup go ciderdebug defun myciderdebugsetup evilmakeoverridingmap cider debugmodemap normal evilnormalizekeymaps addhook cider debugmodehook myciderdebugsetup let poke hole keymaps anything bound passed emacs keymaps spc ret tab bound rather silly command vim unbinding allow much useful emacs command contextaware indentation following link scrolling page etc withevalafterload evilmaps definekey evilmotionstatemap kbd spc nil definekey evilmotionstatemap kbd ret nil definekey evilmotionstatemap kbd tab nil story c latter usually bound lookup symbol point former unbound fatfingering often withevalafterload evilmaps definekey evilnormalstatemap kbd c nil definekey evilnormalstatemap kbd nil hole poking continues time insert state ex completion keymap everything modifier except toggle key emacs state useful key go withevalafterload evilmaps setcdr evilinsertstatemap let togglekey stringtochar kbd eviltogglekey reject memq control eventmodifiers carsafe carsafe togglekey cdr evilinsertstatemap setcdr evilexcompletionmap reject memq control eventmodifiers carsafe abort prompt carsafe cc carsafe cg previousnext input carsafe cp carsafe cn cdr evilexcompletionmap cw cw work emacs state insert state let fix withevalafterload evilmaps definekey evilinsertstatemap kbd cw evilwindowmap ci ci used vim counterpart co going back forth jump list also happens interpreted tab simply terminal nightmare fortunately gui emacs told resolve ci indentation defining function keytranslationmap return desired key way sending custom ci evil active normal state ci opposed tab key pressed otherwise tab passed defun mytranslateci prompt length thissinglecommandrawkeys eql aref thissinglecommandrawkeys ci boundandtruep evilmode eq evilstate normal kbd ci kbd tab definekey keytranslationmap kbd tab mytranslateci withevalafterload evilmaps definekey evilmotionstatemap kbd ci eviljumpforward cu cu bound scroll command vim emacs however used prefix argument feel pretty weird bothered learning cu command killing whole line everything using readline library consider mu good replacement considering bound rather useless upcaseword command default definitely miss definekey globalmap kbd cu killwholeline definekey globalmap kbd mu universalargument definekey universalargumentmap kbd cu nil definekey universalargumentmap kbd mu universalargumentmore withevalafterload evilmaps definekey evilmotionstatemap kbd cu evilscrollup extra keybindings emacs introduced electricindentmode default happens global mode particularly fond anything starting electric disable later initialization done instead bind newlineandindent insert state withevalafterload evilmaps definekey evilinsertstatemap kbd ret newlineandindent let get rid questionable benefit modifier le hit entering ex state withevalafterload evilmaps definekey evilmotionstatemap kbd evilex definekey evilvisualstatemap kbd evilex u much fit key redoing cr withevalafterload evilmaps definekey evilnormalstatemap kbd u undotreeredo evilnumbers package pretty nice want use standard vim keybinds ca cx command instead going much mnemonic withevalafterload evilmaps definekey evilnormalstatemap kbd evilnumbersdecatpt definekey evilnormalstatemap kbd evilnumbersincatpt sure think acejump convenience reduced jump key homerow bound command setq acejumpmodemovekeys f g h j k l withevalafterload evilmaps definekey evilnormalstatemap kbd spc evilacejumpcharmode definekey evilnormalstatemap kbd sspc evilacejumpwordmode definekey evilnormalstatemap kbd cspc evilacejumplinemode definekey eviloperatorstatemap kbd spc evilacejumpcharmode definekey eviloperatorstatemap kbd sspc evilacejumpwordmode definekey eviloperatorstatemap kbd cspc evilacejumplinemode z map full keybindings never remember dealing code folding first get rid withevalafterload evilmaps setcdr evilnormalstatemap reject eq carsafe z cdr evilnormalstatemap setcdr evilmotionstatemap reject eq carsafe z cdr evilmotionstatemap next define toggling command bind defvar myhshide nil current state hideshow toggling withevalafterload evilcommon evildefinecommand myeviltogglefolds open close fold setq myhshide myhshide myhshide hshideall hsshowall defun mytogglemodelineminormodes interactive rmblacklist setq rmblacklist nil setq rmblacklist forcemodelineupdate defun mynarrowtoregionwithmode beg end mode interactive list regionbeginning regionend completingread major mode mapcar cdr automodealist nil unless regionactivep error region narrowing selected narrowtoregion beg end deactivatemark funcall intern mode defun myrevertbuffer interactive revertbuffer nil defun mythemetoggle interactive cond memq punpunlight customenabledthemes disabletheme punpunlight loadtheme punpundark memq punpundark customenabledthemes disabletheme punpundark loadtheme punpunlight withevalafterload evilmaps definekey evilnormalstatemap kbd z r myrevertbuffer definekey evilnormalstatemap kbd z b magitblame definekey evilnormalstatemap kbd z describechar definekey evilnormalstatemap kbd z e toggledebugonerror definekey evilnormalstatemap kbd z q toggledebugonquit definekey evilnormalstatemap kbd z mythemetoggle definekey evilnormalstatemap kbd z mytogglemodelineminormodes definekey evilnormalstatemap kbd z n mynarrowtoregionwithmode definekey evilnormalstatemap kbd z tab eviltogglefold definekey evilnormalstatemap kbd z backtab myeviltogglefolds define mostused helper stolen unimpairedvim next defun myevilunimpairedinsertnewlineabove count insert empty line point interactive p saveexcursion dotimes count evilinsertnewlineabove defun myevilunimpairedinsertnewlinebelow count insert empty line point interactive p saveexcursion dotimes count evilinsertnewlinebelow withevalafterload evilmaps definekey evilnormalstatemap kbd spc myevilunimpairedinsertnewlineabove definekey evilnormalstatemap kbd spc myevilunimpairedinsertnewlinebelow add convenience binding window map cw defun myworkonscratch interactive switchtobuffer getbuffercreate scratch withevalafterload evilmaps definekey evilwindowmap kbd n myworkonscratch definekey evilwindowmap kbd u winnerundo definekey evilwindowmap kbd b helmmini definekey evilwindowmap kbd killbuffer definekey evilwindowmap kbd killbufferandwindow definekey evilwindowmap kbd cd killbufferandwindow leader binding defun myswitchtolastbuffer interactive switchtobuffer otherbuffer defun myfindfilewithrootprivileges filename interactive f let pw concat passwordread enter password n sudoprocess startprocess sudo sudo sudo se filename processsendstring sudoprocess pw withevalafterload evilmaps definekey evilnormalstatemap kbd myswitchtolastbuffer definekey evilnormalstatemap kbd helmmini definekey evilnormalstatemap kbd helmfindfiles definekey evilnormalstatemap kbd myfindfilewithrootprivileges calc keep bewildering calculator bind latter oneoff calculation withevalafterload evilmaps definekey evilnormalstatemap kbd calculator load supplementary mode finally minor mode depending evil loaded defun myafterevil globalsurroundmode eyebrowsemode eyebrowsesetupopinionatedkeys addhook evilmodehook myafterevil snippet quite useful boilerplatey language like java although take far enough even something orgmode qualifies considering never remember proper syntax code block following set single directory snippet setq yassnippetdirs emacsdsnippets withevalafterload yasnippet yasreloadall rcirc small erc large chose circe irc client living inside emacs irc emacs first place wanted leave irssi behind really like weechat try something extensible authentication identification first let define change quitpart message something le advertising setq circedefaultnick wasamasa circedefaultuser wasamasa circedefaultrealname wasamasa circedefaultpartmessage bye circedefaultquitmessage bye using znc connect freenode network bitlbee jabber password nickserv service kept private file read password function setq mycredentialsfile emacsdetcprivateel defun myretrieveircpassword let network circeservernetwork withtempbuffer insertfilecontentsliterally mycredentialsfile let plist read bufferstring string network bitlbee plistget plist bitlbeepassword plistget plist zncpassword setq circenetworkoptions zncfreenode host brausecc port family user wasamasafreenode pas myretrieveircpassword host brausecc port family user pas myretrieveircpassword bitlbee nickservpassword myretrieveircpassword basic usability tweak imagine want use inline tabcompletion cycling exists irc client setq circeusecyclecompletion smart filter like best ircrelated invention ever setq circereducelurkerspam let customize format string setq circeformatselfsay nick body circeformatservertopic topic change userhost topicdiff circeserverbuffername network circepromptstring propertize face circepromptface entity using nickname ghosted default enable authenticating way setq circenickservghoststyle afterauth znc handle autojoins circe recognize instead ignore buffer opened implicitly setq circenewbufferbehavior ignore sending highlight hl buffer occasionally taking look please ignore tracking setq trackingignoredbuffers hl using circecolornicks contrib module please color nickname inside message well setq circecolornickseverywhere additionally make use color compatible theme setq circecolornickspooltype add extra keybinds let add extra keybindings common buffer circe spawn want word killing behave comint cl redraw reposition cu kill whole line since appropriate command default one bound cu defun mywindowcl interactive gotochar pointmax recentertopbottom withevalafterload lui definekey luimodemap kbd remap killword mykillword definekey luimodemap kbd remap backwardkillword mybackwardkillword definekey luimodemap kbd cl mywindowcl definekey luimodemap kbd cu luikilltobeginningofline copypasting source like browser leave one line text input area directly sending would annoying would result either multiple message autopaste detection avoid resorting joining line manually written command opposite mq named similiarly intent making given text conform suitable form defun myfillluiinput interactive filldeletenewlines luiinputmarker pointmax nil nil nil gotochar pointmax withevalafterload lui definekey luimodemap kbd mq myfillluiinput sometimes like knowing many people online defun mycircecountnicks interactive eq majormode circechannelmode message entity online length circechannelnicks buffername withevalafterload circe definekey circechannelmodemap kbd cc n mycircecountnicks hack standard nickname switching function bit silly bunch nickname use wasa one switching defun mycircenicknext oldnick cond string oldnick wasamasa wasa string oldnick wasa wasamasa setq circenicknextfunction mycircenicknext highlighting function yet could something useful like setting x urgency hint taken wiki aside want bit control treat highlight private query different channel highlight following code yank default one replaces something slightly better defun myxurgencyhint let wmhints append xwindowproperty wmhints nil wmhints nil nil nil flag car wmhints setcar wmhints logior flag xchangewindowproperty wmhints wmhints nil wmhints defun myanyregexinstring regexes string string anyp scontains string regexes defface mycircehighlightnotificationface weight bold face circe notification defun mycircemessageoptionhighlight nick user host command args let highlightregexps wubspider wasamasa wasa ircmessage cadr args highlightmatch myanyregexinstring highlightregexps ircmessage ircmessage equal nick circedefaultnick equal majormode circeservermode smatches lagmon ircmessage equal majormode circequerymode highlightmatch equal majormode circequerymode myxurgencyhint highlightmatch textproperties face mycircehighlightnotificationface message addhook circemessageoptionfunctions mycircemessageoptionhighlight setq circetrackfacespriorities mycircehighlightnotificationface circemymessageface circeserverface defun mycircedisablehighlightnick removehook luipreoutputhook circehighlightnick addhook circechatmodehook mycircedisablehighlightnick highlight quoted text green color fun profit honest discern people rest defface mycircegreentextface foreground spring green face greentext detected circe defun mycircecolorgreentext memq majormode circechannelmode circequerymode let bodybeg textpropertyany pointmin pointmax luiformatargument body greentextregex space word space bodybeg gotochar bodybeg lookingat greentextregex addtextproperties matchbeginning pointmax face mycircegreentextface addhook luipreoutputhook mycircecolorgreentext dislike custom want persistent fool advice defvar mycircefoolfile emacsdetcfools file store persistent fool defun mycirceserializefools fool withtempfile mycircefoolfile insert fool defun mycircedeserializefools fileexistsp mycircefoolfile withtempbuffer insertfilecontentsliterally mycircefoolfile read buffersubstringnoproperties pointmin pointmax defun mycirceloadfools setq circefoollist mycircedeserializefools defun mycirceupdatefools mycirceserializefools union mycircedeserializefools circefoollist defun mycircetruncatefools mycirceserializefools circefoollist defadvice circecommandfool persistentfools activate mycirceupdatefools defadvice circecommandunfool persistentfools activate mycircetruncatefools addhook circechannelmodehook mycirceloadfools pretty annoying interaction znc replay feature make lagmon reconnect kick much time spent replying anything hack deal disabling long going defun mycircedisplayprivmsg nick user host command args string nick string user znc let message cadr args cond string message buffer playback circelagmonmode string message playback complete circelagmonmode circedisplayprivmsg nick user host command args withevalafterload circe circesetdisplayhandler privmsg mycircedisplayprivmsg let test fluidwidth window circe emacs seem le wonky adapted wiki extended avoid rather annoying behaviour cursor jumping fringe reaching full text width setq luitimestampposition rightmargin luifilltype nil defun mynofillluisetup setq fringesoutsidemargins rightmarginwidth fillcolumn wrapprefix visuallinemode setf cdr assoc continuation fringeindicatoralist nil makelocalvariable overflownewlineintofringe setq overflownewlineintofringe nil addhook circechatmodehook mynofillluisetup entry point finally function entering irc defun myirc connect irc server enabling contrib module interactive circelagmonmode enablecircecolornicks enableluiautopaste require circechanop circe bitlbee circe circe zncfreenode defun myircdebug interactive circe freenode nick notwasamasa hltodo minor mode coloring todo note fixme many keywords sort prevalent comment string setq hltodokeywordfaces todo hltodo note hltodo hack hltodo fixme hltodo kludge hltodo withevalafterload hltodo hltodosetregexp macrostep expand macro interactively go recommended keybinding definekey emacslispmodemap kbd cx e macrostepexpand visualfillcolumn used longlinesmode display file softwrapped without breaking word using value fillcolumn however got deprecated visuallinemode except take fillcolumn account visualfillcolumn package fix want enable mode automatically enabling visuallinemode addhook visuallinemodehook visualfillcolumnmode magit best currently next branch get latest bugfixes feature reason started nagging optin default behaviour used without confirmation setq magitrevertbuffers silent setq magitpushalwaysverify nil geiser closest thing slime support three scheme implementation currently picking prefered one setq geiserdefaultimplementation chicken keybinds already help let turn ch mh readlinelike globalsetkey kbd ch deletebackwardchar globalsetkey kbd mh backwardkillword deactivate us insert shiftinsert globalsetkey kbd insert nil globalsetkey kbd cinsert nil fwiw yanking emacs call pasting text unlike vim stand copying text anyways want rectify curious default making sinsert paste place cy defun myyankprimary interactive let primary xgetselectionvalue xgetselection unless primary error selection available pushmark point insertforyank primary globalsetkey kbd sinsert myyankprimary install keybind save buffer asking use prefix argument inhibit question kill emacs including daemon defun myquitemacs arg interactive p savesomebuffers consp arg killemacs globalsetkey kbd myquitemacs make mx useful put original functionality cc mx instead globalsetkey kbd mx helmsmex globalsetkey kbd cc mx executeextendedcommand helm stuff globalsetkey kbd cx cf helmfindfiles globalsetkey kbd cx b helmbufferslist globalsetkey kbd helmresume cc c cc c pretty useful resize current buffer hack using setframefont altering font size defun myalterframefontsize fn let currentfontname frameparameter nil font decomposedfontname xdecomposefontname currentfontname fontsize stringtoint aref decomposedfontname aset decomposedfontname inttostring funcall fn fontsize setframefont xcomposefontname decomposedfontname defun myincframefontsize interactive myalterframefontsize defun mydecframefontsize interactive myalterframefontsize globalsetkey kbd c myincframefontsize globalsetkey kbd c myincframefontsize globalsetkey kbd c mydecframefontsize hook first let define helper function boilerplate u defun myaddfunctiontohooks function hook dolist hook hook addhook hook function basic setup start list hook everything special mode word related programming text editing inevitably contain mode properly derived might worth reporting defun mynonspecialmodessetup setq indicateemptylines setq indicatebufferboundaries top left bottom left setq showtrailingwhitespace hltodomode modifysyntaxentry w gotoaddressmode smartparensmode showsmartparensmode yasminormode formfeedmode myaddfunctiontohooks mynonspecialmodessetup textmodehook progmodehook cssmodehook diffmodehook deal programmingrelated hook textrelated hook myaddfunctiontohooks autofillmode textmodehook cssmodehook defun myprogmodessetup makelocalvariable commentautofillonlycomments setq commentautofillonlycomments autofillmode columnenforcemode myaddfunctiontohooks myprogmodessetup progmodehook modespecific setup fine tune completion behavior prefer companymode globalcompanymode add hook repls myaddfunctiontohooks companymode progmodehook cssmodehook nxmlmodehook sgmlmodehook cssmodehook ielmmodehook enable linting select mode default rest programming language happen use language linter installed would annoying always check like default emacslisp emacslispcheckdoc linter always assumes writing emacs package myaddfunctiontohooks flycheckmode pythonmodehook rubymodehook enhrubymodehook latexmodehook rainbowcolored delimiters still work best lisp mode myaddfunctiontohooks rainbowdelimitersmode emacslispmodehook ielmmodehook schememodehook inferiorschememodehook lispmodehook lispinteractionmodehook clojuremodehook nreplinteractionmodehook colored color code however make sense cs html xml myaddfunctiontohooks rainbowmode cssmodehook sgmlmodehook nxmlmodehook webmodehook smartparens ought enabled minibuffer defun mysmartparensminibuffersetup eq thiscommand evalexpression smartparensmode showsmartparensmode addhook minibuffersetuphook mysmartparensminibuffersetup load unpublished package emacs lisp file easily turned package one load install via packageel initialization done happens successful startup unpublished package reside emacsdunpublished need added loadpath addtolist loadpath emacsdunpublished set unpublished package bunch stuff working postinit package prematurely initialized following unconditionally run init finished defun myafterinit addtolist loadpath codecirce addtolist loadpath codeshackle addtolist loadpath codeeyebrowse addtolist loadpath codeformfeed addtolist loadpath codefirestarter smlsetup require dash recentfmode savehistmode require saveplace winnermode shacklemode firestartermode smexinitialize helmmode electricindentmode mysetuphydra evilmode mydisabletrampfilehandlers cllibhighlightinitialize cllibhighlightwarnclinitialize linenumbermode columnnumbermode addhook afterinithook myafterinit stuff learn yasnippet write snippet improve companymode ui check backends reconsider us mix yasnippet update companyjedi anacondamode configure smartparens properly contribute default fix showsmartparens configuration block figure use evil initial state via major mode hook get mode working prog textmodehook fixed make use tocorg fixing bug epilogue consider experiment successful managed uncruftify previous setup highly readable init file get recommendation github favourite reasonable amount people went better expected explaining reasoning hack config file fit better program code debugging suffered bit due indirection cx ce work globally longer cmx prefix argument version instrumenting need copy piece code scratch buffer esup report artificially low time unlike mx emacsinittime
154,Lobsters,emacs,Emacs editor,A NES Emulator writtein in Emacs,https://github.com/gongo/emacs-nes,ne emulator writtein emacs,join github today sign file permalink ne emulator requirement usage resource license reload reload,ne emulator written emacs lisp dismiss join github today github home million developer working together host review code manage project build software together sign file permalink failed load latest commit information type name latest commit message commit time ne emulator requirement emacs higher usage todo ne emulator written emacs lisp resource license perform action time signed another tab window reload refresh session signed another tab window reload refresh session
155,Lobsters,emacs,Emacs editor,"Multics Emacs: The History, Design and Implementation (1996)",https://www.multicians.org/mepap.html,multics emacs history design implementation,multics emacs history design implementation multics honeywell arpanet advanced research project agency multics source reveals le jetteur de gazongues available online mit table content prehistory editing multics ii history videooriented editing iii inception multics emacs iv multics emacs embryonic phase basic decision v early enhancement vi echo negotiation vii supdupoutput arpanet protocol viii place emacs multics ix experience conclusion x acknowledgement appendix redisplay appendix b extension language author copyright holder multics emacs history design implementation bernard greenberg august appendix prehistory editing multics ii history videooriented editing iii inception multics emacs iv multics emacs embryonic phase basic decision v early enhancement vi echo negotiation vii supdupoutput arpanet protocol viii place emacs multics ix experience conclusion x acknowledgement bibliography greenberg bernard unpublished paper honeywell dec crispin supdup protocol network document rfc crispin supdup telnet option network document rfc greenberg b supdupoutput telnet option network document rfc appendix appendix redisplay section iv section v section v section v section vi section iv section vi appendix b extension language section v home change multicians history feature bibliography site chronology story glossary paper humor document source link,multics emacs history design implementation copyright bernard greenberg april follows vast unpublished mother multics emacs paper lesser greater emacs paper published internal unpublished ultimately excerpted including prose con commercial textprocessing system lisp lisp conference proceeding honeywell conference paper time expose wwwhtml ideal vehicle multics longer produced offered sale honeywell longer even make computer people edit computer desktop cheap fast redisplay algorithm longer matter whole idea autonomous redisplay display editor longer given although autonomous redisplay illustrious child wysiwyg standard paradigm industry kind editor besides called video editor thus battle acrimony invidious arrogant comparison follows finished done viewed context historical document multics evolution editor part history multics emacs lisp many deficiency multics described thereafter remedied emacs managedvideo system inspired emacs although started rebellious hack multics emacs became integral part multics product term arpanet refers early stage called internet arpa advanced research project agency u department defense instigated underwrote development please enjoy david mery posted interesting story multics emacs nov multics source reveals le jetteur de gazongues source multics emacs available online mit table content prehistory editing multics ii history videooriented editing iii inception multics emacs iv multics emacs embryonic phase basic decision v early enhancement vi echo negotiation vii supdupoutput arpanet protocol viii place emacs multics ix experience conclusion x acknowledgement appendix redisplay appendix b extension language material presented ensure timely dissemination scholarly technical work copyright right therein retained author person copying information expected adhere term constraint invoked author copyright case work may reposted republished without explicit permission copyright holder multics emacs history design implementation bernard greenberg august paper multics emacs intended audience unclear idea put stuff paper posterity bracket xxx denote reference bibliography end main text multics emacs videooriented text preparation editing system running honeywell multics multics system distributed experimental offering multics release viewpoint multics represents first videomanagement software implemented first time characteratatimeinteraction used radical complete departure editing text preparation tool technique prevalent multics viewpoint similar system running elsewhere several feature noteworthy including major commitment programming language lisp moonual chineual useraccessible extensibility lisp internal implementation designed start often case displayoriented editing mind seemingly innate expense videooriented interaction also led development performance enhancement technique applicable system growth multics emacs user community mit multics system also led development protocol arpanet arpanet designed facilitate use videooriented software deviceindependent fashion multics emacs currently widespread use three multics exposuredevelopment site serving regular user due lack previous videooriented software multics many user large number highspeed video terminal connected multics system thus much usage multics emacs via dialup line fact combined acknowledged expense resource consumption multics emacs place multics emacs among choice editing tool given current resource economy communication device current site always tool choice even among fervid partisan paper describes background history multics emacs previous development climate created many salient feature design implementation criterion decision possible stated well experience design implementation important complete algorithm detailed notably redisplay algorithm detailed appendix prehistory editing multics four editor common use multics introduction multics emacs still widespread use two edm mpm qedx qug standard intended enduser interface editor lineoriented printingterminal editor conventional mold command mode line full editor command typed effect positioning printing deleting changing string substitution line entry input mode way new text may entered typing reserved character sequence exit input mode back command mode editor maintain buffer edm maintains one text buffer qedx many character string gap middle represents current point text may inserted neither editor address individual character edm editor extremely limited programmable intended novice user developed edl ct editor interface ct qedx editor developed strippeddown runtime efficiency version qed editor ct bell qed also ct many original multics developer worked ct editor oriented towards lowspeed halfduplex printing terminal interface minimal typeout design criterion solely editor bulk multics operating system application entered edited maintained implementation teco version standard dec editor built multics version derived original teco implementation mit ai lab tecdoc unlike latter multics teco display support complex controlstructure construct ai lab editor multics teco supported honeywell tool say enduser interface tool manual multics teco handful supporter never really achieved widespread use teco present interface repertoire singlecharacter command designed provide substantial power textprocessing programming language trying succeed editing language programming language teco fall short due necessary compromise nevertheless principal feature teco ability construct powerful textprocessing program macro readily multics teco often used remaining editor widely used multics version qedx ted developed james falksen adding substantial power including ability address character many command qedx lacking many failsoft feature help feature also stand falksen editor due large variety compatibility constraint product schedule improvement qedx made last five year resulting widespread dissatisfaction among multics user community inadequacy qedx thus falksen editor honeywell product distributed multics achieved almost exclusive use many multics site conceptually different qedx differing principally vastly extended command repertoire published documentation available ii history videooriented editing impetus multics emacs came outside late early author became acquainted emacs stallman itsdoc system mit ai lab emacs grew teco period background history development emacs order teco designed use displayoriented environment normal mode usage evolution emacs split user screen two region one user typed editor command one region text edited displayed user completed sequence teco command editor would update image text buffer displayed screen obviating need print command show line buffer request technology still revolved around user typing line editor command activating included therein request insert text normal editor command appropriate section buffer display would chosen automatically next advance editor technology development control r realtime edit mode teco mode called control r character invoked command entered allowed selected set character used realtime command instead entering string editor command user would type one character control delete character effect would immediately made visible buffer display command character typed text displayed would appropriately modified command character fixed small set drawn control character ascii character set ie nonprinting character typing printing character caused inserted directly buffer appear screen teco maintains point virtual pointer text buffer control r mode identification teco point terminal cursor made modification text edited appear cursor buffer display novelty control r mode freedom editor request terminal became editing device upon certain key predictable effect upon text displayed thereupon machine opposed interactive editor fact achieved whole new horizon interaction editing complex request line possible error longer among user tool effect command became visible command typed erroneous action could stopped erroneous command natural simple interface eventually one adopted independently standalone word processing machine wang xerox lanier etc within time became apparent realtime edit mode fact potent natural approach text editing conventional interactive even videooriented text editor end result control r mode user operating though editing screen typing key key typed text screen change control r mode command position cursor different character position therefore line text buffer attempt made position line screen teco chooses new portion buffer display automatically unlike editing terminal user fact editing screen thus need never concerned particular portion buffer fact screen user need never read new screen computer send screen computer similar implementationderived constraint control r mode depends upon ability interact characteratatime basis editor program teco single character typed teco must take action modifying buffer text edited updating display interaction innately expensive consumptive computer resource lineatatime request line conventional editor much historical interest development multics emacs derives necessity characteratatime interaction way ameliorating performance impact next significant advance introduction ability associate arbitrary macro teco program possibly usersupplied key control r mode ability allows arbitrarily complex action performed response given keystroke teco excels ability construct subroutine editor command internal register subroutine call recursively pas argument result around quite common teco construct macro perform arbitrarily complex textmanipulation task dealing sentence paragraph construct source representation specific programming language ability associate teco macro keystroke allowed editor developer user augment control r mode adding set key whose function tuned specific editing task several package teco macro tmacs tecmac proliferated package contained macro many common operation text entity brought power control r mode beyond today standalone word processor time use raw teco almost ceased almost universal use control r mode macro package teco augmented package fact transformed user terminal wordprocessing programprocessing mailprocessing highly specialized video device time richard stallman coalesced idea package created unified approach command set extensibility documentation integration facility created large unified set macro came known emacs name derived editor macro since user using emacs earlier package never deal command set teco action specified control r mode macro stallman rightly considers emacs editor implemented teco latter interpretive editor implementation language one suffering severe deficiency fact stallman viewpoint largely justified one adopt impact emacs emacsstyle editing far outweighs teco basic philosophy teco user interface largely masked emacs indeed teco simply vehicle emacs expressed soon found emacs could taught within minute hour technical experience experienced sophisticated user found emacs eminently usable previous form editing via construction macro processing lisp source program example could rapidly extended handle task manner emacs rapidly became standard editor remained writing iii inception multics emacs multics begun legacy ct left large variety ibm halfduplex printing terminal standard interactive device display terminal used multics storagetube graphic device used video editing consumer display terminal first became readily available multics user purchased terminal notably delta data kind terminal use multics installation university southwestern louisiana using either glass teletypes via local editing video terminal generate le noise le waste paper printing terminal higher line speed markedly le expensive user video terminal multics developed methodology using qedx falksen editor print line screen go input mode whereupon would edit screen pressing locallyprovided terminal control depress transmit button sending screen content prevalent technique user multics lisp maintained source file using local editing edit function read back poor programming practice severe limitation command set builtin editor terminal created poor result around eugene ciccarelli mit laboratory computer science lcs bb n major contributor preemacs teco macro package emacs felt need characteroriented interaction multics developed technique relied upon multics arpanet arpanet implementation effect input multics arpanet implementation limited lineatatime io ciccarelli constructed videoterminal oriented lineeditor using control r modelike command multics user system would log multics via arpanet invoke ciccarelli line editor editor user would log multics recursively via loopedback arpanet connection ciccarelli supported three popular terminal technique allowed user edit multics input line retrieve previous line acquired limited use lcs become popular use two process arpanet neither readily available user way efficient experimentation done ciccarelli charles r davis developing video editor environment never saw use left experimental stage ciccarelli effort first use characteratatime input form multics late people mit familiar video editing development began see state editing multics severely deficient although various proposal create new qedxlike editor bandied none achieved sufficient consensus implemented people critical editing multics impressed proposal realized experience realtime video editor emacs recognized rapidly becoming central user interface system supported began claim emacs symbolized everything right wrong multics numerous vocal partisan multics traditionally prided user interface sensitive criticism discussion rapidly grew whether multics could ever support emacslike editor emacslike editor purpose discussion realtime characteratatime interactive displayoriented editor control r modelike running mainframe large set people contended wrong way go given predicted economy terminal processor communication equipment party stated terminal would become intelligent would adept editing task technology advanced others notably stallman contended correctly author view integrated powerful program running mainframe could interface sufficient usability generality extensibility power supported discussion centered around feasibility characteratatime input multics multics never supported neither many large commercial mainframe dec minicomputer orientation provided facility implementors operating system dec hardware seem predisposed carry facility multics communication system complicated presence frontend processor known fnp performs linecontrol echoing function mainframefnp communication protocol optimized small transfer rapid interaction fnp interrupt multics central system expensive process wakeups multics expensive well working set multics process large predicted expense characteratatime interaction great yet fundamental importance feature type system contemplation acknowledged february discussion basically come whether someone multics organization could persuaded attempt implement editor author used emacs preparation course january become convinced unquestionable superiority desirability idea contained therein demonstration emacs using delta data honeywell cambridge information system lab scheduled march intent stimulating interest within multics development organization realtime editing demonstration widely attended however lack preparation hardware difficulty presence number unruly outsider led chaos many people went away idea markedly different brought demonstration one person impressed larry johnson multics communication specialist sufficiently impressed within hour end demonstration effected patch fnp cause transmission character mainframe typed implementation extremely inefficent causing interrupt wakeups every character typed yet inspired author people present consider characteratatime io longer possibility reality implementation realtime editing system could constructed felt would rapidly gain popularity necessary implementation efficiency would necessitated popular demand day author contemplated construction multics emacs several lesson learned history emacs inferior nature teco implementation language plus addon nature display support led consideration editor constructed realtime display editing primary goal removal overhead interpretation intermediate code eg teco seemed one way efficiency could rapidly bought back goaldirected implementation pli standard multics system application language suggested multics pli extremely complete welldebugged optimized system programming task however another lesson learned emacs extensibility modularity ability add program macro teco implementation augment editor crucial smaller primitive editor called efficient fashion would internal subroutine internal procedure large program would presumably grow without bound functionality increasing difficulty maintenance incremental growth debugging calling external program expensive multics approach taken ability extend function writing new code would require externally available interface editor primitive would presumably operate reduced efficiency never equalling efficiency code big procedure appeared unreasonable restriction alternative presented lexical inclusion code editor primitive seemed equally unpalatable incremental overhead creating new pli source program large subsystem substantial large amount communication information must lexically included source program even smallest component declaration necessary every temporary variable every builtin function every procedure name used substantial expense pli compiler must invoked every version code matter minor change test either source program proliferate without bound routine must packaged larger program increasing compilation overhead without bound possible user augmentation prime feature would include large amount declarative information giving internal structure editor database pli seem conducive interactive development subsystem choice language limited technology long since passed stage assembler language reasonable idea substantially augmenting multics teco seemed distasteful step backwards among standard language multics neither fortran cobol apl basic could given serious consideration point idea lisp editor implementation language occured author lisp function call substantially efficient multics pli external call far le efficient pli internal call lisp ideally suited buiding large subsystem many function many small lisp viewed properly lispbook highly objectoriented language masterfully adept maintaining complex data structure program added running lisp environment without need compilation debugging interactively debugged aid lisp interpreter global namespace lisp allows user reference variable need reference given task without compiledin assumption storage location structure lisp seemed solve many design problem inherent use pli author also substantial experience multics implementation maclisp moonual implemented large subsystem multics crashdump analyzer becoming sufficiently dependent upon time become maintainer implementation lisp acquired bad reputation several reason false people often point inefficiency interpreted code however production lisp code mature implementation compiled machine code kind pseudocode multics lisp compiler lcp welldebugged reasonably efficient people speak innate inefficiency datarepresentation lisp yet existence character string data type maclisp plus judicious use outsideofthelanguage facility appropriate create reasonable efficiency data representation people quick point unreadability unmaintainability source code lisp program yet precisely editor like emacs automatic technology editing formatting lisp code come given proper editing tool formatted code lisp readable opinion many blockstructured language finally many lisp implementation fully mature thus suited large subsystem implementation unique nature multics process environment allows subsystem multics maclisp invoke communicate readily multics facility outside lisp environment set facility available program running multics process one major feature multics status multics maclisp time holdover mit codevelopment day multics abovementioned dump analysis tool major us documentation moonual longer published available honeywell support officially way distributed multics program written lisp decision use multics maclisp implementation language profound consequence future large amount interest lisp eventually manifested desirous knowing solely able augment multics emacs nontechnical personnel observed acquire enough knowledge lisp extend emacs purpose lisp previously limited undergraduate computer science course artificial intelligence laboratory choice lisp turned wise choice incremental creation editor extensibility could done language evening march bruce edward author sat logged mit multics system coded debugged become central module multics emacs lisp program maintained buffer text list editorlines editorline representing one line text buffer editorline triplet linecontent previous editorline buffer next editorline lisp variable identified current editorline another variable current point current line linecontents initial implementation represented doublylinked list single character current point current line identified list node containing character point lisp function provided insert character current point delete character break line two inserting newline merge two line deleting one move current line current character pointer forward backward character line print line iv multics emacs embryonic phase basic decision program created day nothing maintain buffer text lisp list structure primitive operate upon buffer pointer visible effect invoked line printed invoking function provided purpose program much augmented since core multics emacs could used equally well implement nondisplay editor conventional qedx tecolike mold basic structure emacslike display editor consists three part program called basic editor interactive driver redisplay basic editor maintains text contains primitive operate upon interactive driver interprets character read keyboard invokes primitive basic editor execute request redisplay screen manager invoked interactive driver input character construct maintains display screen looking basic editor buffer effecting incremental change much said interactive driver redisplay later basic editor developed march several noteworthy design point representation text buffer list editorlines designed optimize redisplay display editor optimize uservisible internal primitive dealt line much editing textprocessing operation consits operation upon line iterated line search endofline character common operation seemed suboptimal specifically redisplay would identify line buffer line displayed upon screen screen last updated order move line around better know text compare redisplay time redisplay basically compareandupdate process discussed way making comparison heuristic cheaper tremendous value maintenance buffer liststructure also mean text moved around perform insertion deletion line deleted simply unlinked list representing buffer new line linked lisp garbage collection ultimately reclaims space used deleted node yet even nongarbagecollected programming language explicit storage management list node allows potent strategy utilized doublylinked list disadvantage representation empty buffer ie one containing line character difficult remains problem day multics emacs buffer created one line consisting newline character buffer considered empty reading file empty buffer specialcased produce desired result another problem approach difficulty searching character string particularly one containing imbedded newline character spite difficulty daniel weinreb subsequently adopted doublylinked buffer list editor zwei dlwthesis mit lisp machine chineual zwei also coded lisp decision made start represent linecontents two different way one way line current line current line representation medium current line must easily modifiable line must storageefficient maclisp string natural choice represent linecontents modifiable string lisp machine chineual hand arraylike object initial implementation current line represented doublylinked list character described linecontents line still lisp string current line copied modifiable representation first modified known opening line copied back new lisp string current line left ie longer current line strategy match fairly well normal user pattern moving line modifiying moving another line etc making sequential change buffer simply typing amount new text special case pattern realized quite early doublythreaded list character could efficient enough production implementation even attempting reuse storage list node representation deemed inefficient operation upon current line traditional characterstring buffer distinct advantage eventually three week development editor new type lisp object invented hold modifiable representation current line rplacable string lisp term rplaca rplacd primitive pointer storage modifier stored outside lisp environment multics segment pointer exist lisp pointer cell pointer type bit character string multics lisp pointer explicitly typed special bit pattern pointer indicates pointer must chased subjected dataobject relocation maclisp garbage collector multics implementation recompactingtype garbage collector gcpaper four rplacable string needed entire implementation rplacable string manipulated two kind primitive normal lisp lispinterfacing primitive view character string special primitive lap lispinterfacing assembler many implementation provided modify content delete character point insert character point primitive make use powerful multics hardware instruction perform overlapping string move either direction mapping precisely action inserting deleting character active current line lap function run lisp environment called efficiently one lisp function another next step development interactive driver function interactive driver emacslike editor basically teco control r mode read character user keyboard find program teco macro lisp function run binding key execute function executed interactive driver invokes redisplay reflect change buffer screen loop read character dispatch function redisplay repeated indefinitely basic control loop emacslike editor interactive driver provided special problem initial implementation atomic symbol moonual whose name character typed given lisp property function run character struck twokeystroke sequence mapped different property second character mechanism conducive switching key binding rapidly easily prevented latter implemented three month lasted storage inefficiency implicit storage property also undesirable nevertheless natural mapping keybindings lisp property mechanims provided easy path create operative mechanism allow rest editor grow significant difficulty availability characteratatime io experimentation growing editor completely experimental part recognized funded project resource immediately available among already highly overcommitted multics communication support specialist thus ciccarelli code sought find basis technique singlecharacterinput via multics arpanet within day interactive driver operating true characteratatime realtime mode process logged via multics arpanet redisplay lisp function printed current line overstruck current character position served place soon thereafter johnson patch effect singlecharacter transmission fnp applied regular basis cisl development multics site testbed system real user community editor development progressed went user mit multics system willing experiment new editor forced use via arpanet administratively allowed use arpanet experiment nonrealtime mode typing linefeed activate ie cause multics take cognizance previously typed input development path proceeded parallel application patch become known breakall mode patch slow dangerous operation requiring highly privileged access mit service system question next final step birth editor design creation redisplay redisplay job depict section content buffer video terminal screen redisplay invoked interactive driver function called performed arbitrary modification upon buffer redisplay must know precisely put upon screen previous time invoked compute must put upon screen time determine effectively efficiently modify screen using terminal facility available transform old screen content new screen content one fundamental design principal realtime video editor nature basic editor aware neither existence organization redisplay redisplay symmetrically aware neither organization action basic editor invocation redisplay given hint transformation upon buffer observe performed observe new state buffer including current line pointer etc philosophy lead highly desirable state affair extension ie usersupplied editor feature well basic editor need concerned display management manipulation text buffer via supplied primitive display managed automatically first coding multics emacs redisplay performed march delta data terminal cisl video terminal readily available fortunately spite severe implementation bug terminal feature better class consumer video terminal available ability insert delete character line screen thus designed redisplay start interface redisplay designed one lisp function redisplay took explicit argument current buffer current line pointer current character position pointer etc ie current state basic editor implicit parameter contract function redisplay determine displayed screen differs already screen update screen remember next time screen even appearance simple typed input screen manifestation redisplay theoretically redisplay occurs every two character typed redisplay put character screen including typed input one time typed fact later optimization discussed allow participation operating system negotiated simple echoing principle remains redisplay part editor interface terminal display system keyboard display terminal considered completely disjoint terminal said simply usable environment deviceindependent terminal support provided supplying separate lisp program known ctl controller terminal type supported function defined ctl provide common functionality terminal display example dctlpositioncursor two argument coordinate position terminal cursor coordinate dctldeletelines one argument number line deleted deletes many line current cursor initialization function dctlinit provided terminal ctl set parameter used redisplay state function available terminal subset maximal ctl function ctls call common interface output character terminal via ctl mechanism dynamic nature lisp workspace lisp function calling particular used add terminalspecific component editor invocation time type terminal used usually provided multics communication software thus loading ctl automatic heart redisplay screen image data structure redisplay remembers left screen one invocation might know start next rather array character representation screen image designed take advantage basic editor division buffer editorlines screen image lisp array moonual one dimension one element physical line display terminal element array called screen displayline pair editorline string exact character sequence known physical line display linedata several consecutive displaylines may editorline editorlines whose printed representation longer one physical terminal line content linedata reflect actual printed representation editorline part editorline linedatas contain newline character tab nonprinting character format effector number character linedata width column upon screen character singlewidth printing character character given position corresponding terminal line character corresponding position linedata nonprinting character editorline actually linecontent editorline converted printable representation ascii wru either e control e according multics convention user option tab converted appropriate number space note strategy readily extensible representation overstrikes multiwidth font although multics multifont support certainly multifont terminal readily available viewpoint editor use multiple font lack representability overstrikes problem underlined text quite common multics perhaps addition overstrike map form displayline structure solution basic flow redisplay compute whole screen displaylines new screen filling another array newscreen update screen based upon comparing array screen newscreen calling function ctl copy array newscreen screen fact operation performed perwindow basis every time redisplay invoked window section screen assigned display particular buffer although may today number window limitation conventional terminal restrict wide screen redisplay contains many optimization part editor effort optimization wellspent optimization linetransmission time ie least screenrewriting redisplay visible user however frequency invocation redisplay conceptual complexity task make computation time redisplay prime target optimization critical significance entire editor cpu time consumption mainfests system loading billable user expense reduced response time visible user lisp implementation string list node dynamically allocated minimization storage generation redisplay equally important consideration detailed algorithm optimization redisplay given appendix completion initial implementation redisplay basic loop interactive driverbasic editorredisplay functional providing operative editor next necessary addition extension provide useful function editor extension body code provides textmanipulating capability specific domain text processing operates invoking primitive extension basic editor extension know data format organization basic editor extension completely unaware existence display redisplay like basic editor extension manipulate text buffer calling basic editor however opposed actually manipulating editor data structure display follows automatically without explicit coding thereto extension often written user although set extension code incorporated editor primitive manipulating word sentence paragraph comment whitespace supplied extension loaded editor environment demand emacs library include code knowledgeable pli lisp syntax emacs mail system optional package extension written maclisp augmented set lisp macro moonual tune syntax maclisp data control construct necessary manipulation multics emacs environment extension language interesting one covered detail appendix b considered major feature language extension fluid powerful language specifically designed writing program contrast dramatically use teco extension coding emacs teco code quite baroque accessible expert extension language multics emacs sufficiently natural simple learn nontechnical personnel successfully written debugged nontrivial extension stallman stallman concurs relative merit teco versus lisp editor implementationextension language multics emacs provides number feature lispprogramediting mode facilitate interactive development debugging extension written function editor buffer added editor environment keystroke extension first week multics emacs developed way interactive incremental development lisp program way unlike technique developed mit lisp machine chineual dlwthesis among interesting initial feature provided use extension creation character set extendedtype object extension trying utilize characterscanning capability multics hardware primitive basic editor return exchange character string pair two lisp array designated character set another set primitive basic editor given character set scan buffer current point backwards forward possibly current line first character character set character set required array constitute character set set immediate use powerful multics hardware instruction translate test variety actually used perform scanning ability deal external file also provided naturally lisp typeextension ability arbitrarily define type object created composition possibly primitive object type editorlines whose content unmodified string external file linecontents pair pointer length list node pointer location character string multics hardware support character address pointer multics virtual memory lowestlevel lap primitive deal either lisp string object filecons identically representation character string thus readin file multics emacs cause storage generation copying string file maclisp string facility needed extension mark buffer pointer dlwthesis mark identification given character position given buffer extension use liberally least one mark uservisible feature mark used identify point buffer pair mark current point buffer mark used identify region buffer mark problematic need relocated text surrounding point represent modified deleted say mark identifies character line must made identify nearest remeaining character line character specifically one line line deleted imposes overhead almost every buffermodification operation check must made see mark current buffer need relocated account multics emacs approach minimization overhead associate mark line representing mark pair editorline position within line mark created primitive basic editor creates mark designating nowcurrent editor point buffer return keep list mark associated current buffer line opened modification list mark current buffer scanned mark designating current line secondary list mark mark current line developed list scanned buffer modified current line ever capable modified mark expected freed ie removed perbuffer list secondary list code created longer needed keep overhead mark growing limitlessly due definition buffer position emacs character simple tremendously important case adding text end current line never cause relocation mark secondary mark list need even scanned common modification interesting alternative strategy mark implemented weinreb dlwthesis zwei editor editorline data structure includes list mark line avoids perbuffer mark list ever scan pereditorline overhead implied approach however deemed great multics emacs list node much expensive multics maclisp bit lisp machine bit weinreb also admits nonrelocatable mark ie mark put mark list valid time invoking code obligation cause buffer modification core editor supplied extension operative development proceeded along three separate path simultaneously augmentation functionality performance improvement new interaction arpanet area discussed independently v early enhancement within first two month need arose support many text buffer simultaneously within editor people usually edit many file conventional multics editor provided capability addition many specialized us buffer develop time supporting many exotic feature editor implementation multiple buffer viewed task multiplexing extant function editor several buffer buffer edited defined two dozen lisp variable basic editor identifying current editorline current openclosed state first last editorlines buffer list mark forth switching buffer ie switching attention editor user see need consist switching value variable neither interactive driver redisplay need cognizant existence multiple buffer redisplay simply find different current editorline exists buffer switched call function basic editor aware existence multiple buffer deal many buffer switch etc code simply reference buffer state variable operates upon current buffer function basic editor implement command switch buffer saving value relevant lisp variable define buffer placing saved image list value property lisp symbol whose name current buffer similarly saved list target buffer retrieved contained value buffer state variable instated new buffer created simply replacing instatement step initialization state variable default value empty buffer buffer destruction accomplished simply removing saved state embedded property pointer buffer vanish thereby maclisp garbage collector take care rest alternate approach multiple buffer would buffer state variable referenced indirectly pointer simply replaced change buffer approach spite feasible lisp le desirable current approach distributes cost variable reference time bufferswitching time former much common one interesting perbuffer state variable list arbitrary variable placed extension code extension code register variable call appropriate primitive basic editor value variable registered given buffer saved restored buffer exited reentered ability lisp treat variable runtime object facilitates variable thus given perbuffer dynamic scope demand allowing extension operate many buffer simultaneously using code variable analogous fashion way multics program executing many process simultaneously emacs multics support notion mode specific tuning editor interface specific task tuning include set key binding setting uservisible perbuffer variable instance pli mode tab keycharacter mean indent current line correctly according standard pli indentation column column comment placed lisp mode tab mean indent current line correctly according standard lisp indentation comment go column mode take effect perbuffer basis buffer given mode fundamental mode initial default mode one significant advance emacs similar editor key ability support perbuffer mode ability change key binding rapidly conveniently buffer switched implementing meant replacing keybinding mechanism used lisp property replacing lisp array dispatch interactive driver basic structure used lisp array element one possible ascii character array element contain either lisp constant nil indicating key undefined lisp symbol defines function executed character pointer another similar array element character prefix character nonterminal character multicharacter sequence historical reason prefix character esc ascii escape specialcased dispatchvector second row rootnode dispatch vector list kept perbuffer key whose binding changed buffer element list give key path dispatch vector binding key binding changed placing list placing original binding dispatch vector list element changing element appropriate dispatch vector buffer exited list element dispatch vector element swapped element local keybinding list buffer entered swapping performed reinstating local key binding buffer command available set key dispatch vector without placing local list constitutes setting key globally buffer explicitly defined otherwise approach designed following desirable characteristic optimized buffer key binding different default thus overhead perbuffer dispatch vector exist plus concomitant problem making global change overhead switching buffer proportional number keybindings different default change global default made trivially clearly disadvantage approach overhead involved buffer almost every key different example normally trivial key normal printing character fairly odd machination manifestation well definitional issue attempt made change global definition key redefined locally major feature modern video system dividing screen window region different activity displayed highly advanced video system chineual parc often dozen window screen partially visible editor multiple window allow several document edited viewed simultaneously new old version etc emacs mailreading responding going two window buffer containing interactive message one user display activity proceeding parallel screen emacs support two window screen competitive incentive support multiple window multics emacs two userlevel windowmanagement scheme available multics emacs default static window experimental one popup window modelled loosely display software xerox parc parc relative merit two scheme yet clear use experimental scheme user option static scheme user creates destroys window explicit command window size set explicit user command special subsystem window editor assist operation activity including switching new buffer occurs one selected window user selects another window explicitly however certain command take advantage multiple window attempting place buffer display window besides selected one instance reply command issued reading mail build reply letter buffer multiple window use place reply window selects fact leastrecently used unless buffer already screen window case window selected another example command compile command pli fortran mode place compiler diagnostics window source program popup window mode may command switch buffer create new buffer enter type new activity attempt place window screen already window buffer somewhere creating new window destroying old one leastrecently used basis necesssary buffer already screen window window selected window destroyed either replaced explicitly user corresponding buffer destroyed window size set automatically dynamically user often find popup window erratic unpredictable nature especially low line speed still open design issue whether popup window valuable timesharing system accessed via communication line degree user visibility bufferwindow correspondence philosophy popup window rooted multiple window implemented multiplexing function redisplay window screen display one possible buffer buffer may display window one window one window although latter case introduces several human design technical problem one window time considered current selected window window cursor placed redisplay end invocation indicate current point current buffer current buffer always display current window interaction buffer window ofttimes subtle small change way correspondence managed seem produce significant change visible interface system array give screen location extent window well name buffer display therein mark buffer designating window point last current point buffer known redisplay time redisplay run performs compareupdate operation window defined array current line current point within used compute displayed selected window window point mark used window mark updated dynamically need buffer window modified redisplays editor switch window command tell redisplay choose another specific window selected window also tell basic editor switch buffer directed redisplay buffer name window array structure redisplay also use window point determine point buffer new window make current point thus window switched editing resume new buffer new window last point left screen content change buffer display one window window point identifies last place current point window selected window allows multiple window used edit multiple part buffer window management system contrast dramatically teco latter teco time display text window whose position extent screen set emacs response user command thus switching window say two alternate nonoverlapping location two document may edited however simultaneous update window occur whether text display one window auxiliary buffer managed informative display purpose active extension thoroughly unique feature emacs interrupt system soon mandated interaction multics emacs multics interactive console message system multics support usual two type interuser communication mail andmessages mail sent sender recipient mailbox file segment multics storage system read recipient leisure message intended communication transient nature sent using simpler command printed recipient console soon process multics control point go idle usually waiting console input sending mail incidentally sends message form mail alert recipient mailbox ought read message multics implemented process interrupt event call channel swg cause messageprinter invoked process wait coordinator process go wait message present process awakened waiting state happen new message arrives waiting among reason check made messageprinter invoked message present messageprinter normally function reading message printing user console interspersed among recorded input output user interactive session context emacs wholly inadequate message printed emacs used content screen redisplay envisions destroyed position cursor screen content longer managed effectively situation handled messageprinter informing teco whatever program control message printed screen destroyed latter must refresh entire screen attempt made use deemed inadequate widespread use lowspeed terminal would cause liberal screenrefreshing frustrating furthermore integrated screenmanagement system least allows message printed usable form emacsteco control multics state terminal interface software emacs control multics message arrived printed intelligibly emacs order perform lowlevel terminal control request terminal control software supervisor suspend control deemed best emacs handle messageprinting control emacs set called messageprinter message need printed needed interface messageprinter call program print actual message fact provided multics message system way emacs could print message saw fit integrate printing screen management performs keep transcript message received sent organize response message useful way emacs interrupt system introduced fulfill need asynchronous event message timedriven feature invoke entry point emacs subsystem queue information asynchronous event set unique interrupt cell associated type event interactive driver sample interrupt cell basic loop associated interrupt cell interrupthandler function extension invokes normal function basic editor including redisplay interface perform required processing case interactive message handler par message header place unique buffer associated sender buffer display window call redisplay primitive display top screen way redisplay know precisely portion screen need refreshed remove occurrence emacs interrupt cause inputcharacter reader return lowestlevel caller inputcharacter reader prepared return character interrupt allow interactive driver sample interrupt appropriately deep implication upon optimized echoing scheme discussed allow partial echoing operating system operating system must stopped echoing emacs interrupt occurs known screen content synchronized echoed point operating system emacs interrupt system used console message timeofday display update continuously receipt arpanet output user telnet user supdup mode buffer window used implement remote terminal connected foreign computer system multics emacs automatic documentation system unlike emacs documentation editor command displayed easily via special command request keystroke documented command documentation stored indexed sequential file maintained vfile multics file manager key index command name key used invoke command documentation stored format key almost never mentioned name rather command name ie gotobeginningofline instead control documentation displayed substitution made automatically command name binding key current buffer thus documentation accurate matter user customized key binding extension may document command placing documentation lisp property command supplied therein documentation system search first substitute display documentation though appeared documentation file special mode exists editor maintainer get unsubstituted documentation file edit add additional documentation feature derived emacs include ability find last fifty keystroke typed command match substring command name find command key invoke apropos given topic reason command function name must kept reasonably mnemonic vi echo negotiation soon multics emacs introduced people began react negatively idea large timesharing central processor interrupted every character waking multics process every character echo character worst case ie put typed character back screen multics hardware priceperformance le optimal working set multics process large introduction realtime editing viewed crippling blow already dangerous performance situation many observer rejected idea mainframe performing function associated intelligent terminal course objection invalid commercial terminal approach even weakest timesharing editor expressive power simplest approach implementation realtime editor involves every single character typed processed editor immediately described precisely approach taken teco however working set much smaller multics working set rarely run user characteratatime interaction profound negative performance implication way alleviating impact tremendous value simple entry text obvious candidate optimization error made text typein tremedously cheap operation using standard multics editor editing done smoothrunning interaction requiring action system echoing character characteratatime wakeup redisplay emacs buy nothing mode error made tremendous cost hand unity emacs interface lack text entry mode v edit mode similar implementation artifact fundamentally important feature traded amount implementation efficiency optimization must completely transparent automatic optimization design tradeoff normal multics interaction fullduplex nonlocal echoing terminal echoing performed frontend processor fnp unconditionally running emacs echoing turned emacs redisplay manage entire content screen completely fnp echo running emacs several reason redisplay know accurately screen fnp placing data well fnp general assume echoing valid typeahead input typed system responded previous typing placed screen system responded previous input positioning cursor determines next character placed input specifies fnp echoing however efficient fnp communication processor optimized task emacs echoing maximally inefficient thus scheme echo negotiation devised echnego fnp echo conditionally emacs use protocol address timing problem alluded operating maximum efficiency fnp echo character text typed emacs never interrupting mainframe waking emacs process end line editing attempted desired effect reducing mainframe interrupt wakeups factor equal average number character line implementation scheme involved augmentation terminal control software multics supervisor well code fnp echo negotiation entry new text automatically recognized basic editor interactive driver case defined waiting command character current point current line end already open line current buffer must display one window special call made multics supervisor whose meaning essentially get line worth character echo wake emacs return attention needed attention emacs echo break condition may several situation end terminal line reached emacs supply supervisor call computed length end screen nontrivial character typed emacs supply supervisor call bitmap character may echoed fnp notably among carriage return character rubout character tab character nonprinting thus potentially editing character emacs interrupt recognized occurrence echo break condition cause fnp stop echoing character transmit character cause wakeups character typed thereafter echoing regardless whether marked bitmap echoable character emacs wake receives character receives well count many echoed echoed portion must leading substring character returned special call made redisplay indicate echoed character screen special function basic editor insert echoed character end current line emacs processing continues character caused current input character time echo break condition time one echo negotiating inputreading call return emacs fnp entire multics input system terminal state would without echonegotiation namely shipping character one time typed causing wakeups character although multics scheduler optimizes attempted wakeups running process successive call read input character new text entry echo negotiating variety character read processed realtime typed state break table may changed key binding reassignment occurs switching buffer without affecting fnp echonegotiating input call made check made see input character typed yet read thus yet processed emacs returned immediately processing system remains characteratatime nonechoing state automatic echoing begin effect character read yet processed predicted emacs produce possible output make another input call thus slow system emacs racing typist process character fast typed automatic echoing state entered time emacs make two successive echonegotiating input call time input typed slow system effect echo negotiation noticeable character echoed instantaneously end line reached character echoing stop awaiting loading running emacs emacs run pick character typed interim performs redisplay outputting one burst instantaneous echo resume number character automatic echo performed leading prefix typed input line measure response time system vary two three character half line worst case depending upon speed typist slow typist observe larger percentage automatic echo slow system effect emacs interrupt system upon echo negotiation significant echoing must stopped console message updated timeofday whatever asynchronous occurrence might displayed echo break condition detected communication software external occurrence multics process case special call made stop system echoing acknowledgement stopped echoing awaited fnp system nonechoing characteratatime state echo break character returned usual indication many echoed interactive driver notice pending interrupt process usual echo negotiation believed prerequisite costeffective managed video system multics including tentative fullscreen process output management scheme consideration future extension echo negotiation include rubout processing deletion last typed character tab expansion issue make thing difficult transparency human interface consider example aforementioned feature display last character typed echo negotiation conceived developed released two stage first january negotiated echoing implemented interrupt side multics terminal control software mainframe reduce mainframe interrupt remove need process loading wakeups character fact synchronization notably determination typeahead thus echoing may begin could performed normal lockingsynchronization primitive multics supervisor fundamental importance implementation fnp involved implementation sent character mainframe one time emacs use software released multics release july fnp communication protocol augmented solve synchronization problem necessary determine safe start echoing stopping echoing response emacs interrupt moved negotiating echoing fnp removing necessity mainframe interrupt text entry emacs well fnp echoing software interface previously extant interruptside echoing software exact way latter interface emacs fact interface multics supervisor negotiated echoing emacs change design introduction fnp echoing virtually identical internal interface emacs input interface program three program emacs input interface multics terminal control code supervisor fnp software fact form hierarchy echonegotiating input supplier prepared echo character received lower level count among echoed echoed lower level among detail scheme set forth echnego passing interest use emacs motivated several change multics communication system period june characteratatime input implemented via cleanedup version original patch efficient became official multics feature allow experimentation emacs mitmultics emacs use became widespread communication protocol fnp mainframe required several transaction negotiate place store typed input mainframe system derives several obsolete design compatibility constraint widespread use emacs thus characteratatime input caused new optimal protocol devised implemented summer june fnp input buffer strategy totally redone largely due emacs use buffer collected communication hardware one buffer time per break character every character became break character strategy began inefficient stress failed switch buffer sufficient haste new strategy implemented divorce notion bufferswitching break character vii supdupoutput arpanet protocol mentioned introduction characteratatime input official feature june usage multics emacs cisl development machine via arpanet whose multics implementation supported characteratatime input spite hardy soul multics system release site phoenix arizona patched system great difficulty great risk intervening three month experiment desiring experiment new editor would either log arpanet directly tip support dialup connection one local host supported characteratatime interaction tip arpanet attempt terminal control character sent emacs ctls would arrive whatever video terminal dialed tip completely unprocessed attempting access mitmultics running included large number person central development emacs strong interest growing editor faced different problem provides completely integrated screen management could expected pas terminal control code telnet connection unmodified many user accessed specialized locallysupplied hardware knight tv system consisting several dozen highresolution rasterscan monitor keyboard controlled central dec control versatile fast device accomplished screen management system native control code seemingly local problem interface multics fact indicative general need full solution problem brought telnet supdupoutput option august option provides virtualized video support telnet connection based earlier supdup protocol based internal buffer code supdupoutput integrates support telnet way earlier telnet supdup option known implementation reason fails achieve output system operates three level three representation output based upon ascii character set normal printing character involved three different mode expression control format cursor position function output produced program main program level contains addition printing character ascii format effector carriage return tab new line etc special escape sequence escaped ascii dle character control p chosen mnemonic value effect video control cursor position form user telnet program communication multics effected data received foreign host coerced convert output internal buffer code tdcodes placing output buffer internal buffer code property code le octal considered printing allowing stanford university extended character set greater equal format effector express contextindependent cursor position video control expression format effector tab newlines backspace etc translated absolute cursor position video screen interestingly enough printing terminal supported degenerate screen actual conversion devicedependent character code control sequence performed output interrupt time canonical output buffer code strategy feature output cleanly aborted point interrupt side processed output buffer code cognizant exact cursor position thereupon supdup protocol confused telnet supdup option telnet supdupoutput option originally developed interits protocol telnetlike protocol used communicating one host logged another unlike telnet telnet however supdup defines virtual negotiated video terminal instead network virtual terminal printingterminallike device host communicating via supdup initiate communication exchanging description user terminal stating dimension well facility lack server host one logged remotely ie target thereupon convert program output internal buffer code official output expression code supdup case server host trivial simply pass output buffer network implementation stanford ai lab supdup server must convert local code output buffer code user host one user physically logged running user supdup program receives network output buffer code us control local screen case user host trivial simply placed local output buffer directly via special supervisor call provided purpose trying use multics emacs mitmultics host immediately faced inadequacy telnet dealing video terminal namely lack technique describing controlling attempted pas raw terminal control code terminal dec required local adjustment output system done failed transparent also failed address larger user community knight tv system point obscure obsolete feature user telnet program revived stanford university ai lab sail support large user community using datamedia model display terminal moderately capable device stanford negotiated special feature manufacturer device control code form standard video control code stanford system stanford supdup server convert datamedia code output buffer code sail creation supdup server using telnet communicate sail invoked special mode user telnet program converted datamedia control code mainprogram level code sail would treat telnet connection like almost else datamedia virtual datamedia would function late march ctl datamedia written user multics emacs told inform multics emacs using datamedia use datamedia emulation mode telnet phenomenal ingenious kludge worked tolerably well two month deficiency brought end datamedia substantially smaller screen knight tv wasted screen space due emulation frustrating new ctl written nonexistent large screen datamedia screen dimension knight tv user knight tv instructed use telnet limitcheck simulated datamedia code coming strategy worked even enough though datamedia control language much le powerful native power output system expressed output buffer code lacking notably facility express insertiondeletion multiple line caused multiline insertionsdeletions performed multics emacs visibly much slower capable additional disadvantage need switch datamedia emulation mode inapplicability technique itssupported terminal knight tv switching nature network connection telnet supdup midstream also ruled consideration time side time daniel weinreb author developed idea embedding transmission output buffer code telnet output stream escaped special sequence interim protocol known pyz protocol developed made operative june name pun classic czarist forgery emacs user would specify pyz terminal type selected ctl would express screen control output buffer code escaped special sequence ctl would assume screen dimension characteristic knight tv special version user telnet would used added facility watching special sequence feed escaped data directly output buffer way user supdup program result expected mode usage became popular next month pyz protocol augmented negotiate terminal characteristic fashion format supdup time datamedia emulation completely obsoleted itssupported terminal could used via pyz ctl mark crispin maintainer user telnet wisely insisted pyz developed official protocol would consent standardizing version user telnet supported thus august supdupoutput protocol adopted network information center telnet option special escape replaced telnet negotiation subnegotiations like telnet option supdupoutput offered server server bound refuse support even never heard thus upon officialization supdupoutput protocol subsequent installation user telnet supported multics emacs would attempt negotiate supdupoutput host automatically use supdupoutput ctl successful short user multics emacs invokes emacs multics special action entire terminal description control negotiated automatically january second userside implementation supdupoutput created time implementing access mit chaos net chaos another set centralizedlogic rasterscan terminal mit campus chaos net access arpanet specialized gateway server user terminal system use mitmultics gateway server regularly supdupoutput implementation allows automatic negotiated support multics emacs third known implementation user supdupoutput multics emacs feature known telnet mode maintains connection foreign host emacs window original server implementation multics emacs known supdupoutput server interestingly enough native multics user telnet support supdupoutput option lack native multics video support time investigation supdup led july writing multics user supdup lisp built spare part multics emacs us emacs ctls directly characteratatime input utilize echo negotiation like user supdups performs terminal control based upon receipt output buffer code almost communication mitmultics done program user using program multics access receives full integrated screen support supdupoutput provides protocol via server host total integrated screen management function program deal managed video communicate user host provide video support deviceindependent manner viii place emacs multics one controversial feature multics emacs incorporation large number mode parallel already available function multics typical emacs mail system place incoming outgoing mail buffer window facilitate realtime editing mail paging mail reading responding automatically generating reply exists complete integrated multics mail system outside emacs many validly raised point existence another one inside emacs nowhere complete questionable best however task mail composition seems overlap largely task text editing integration text editor seems appealing standard multics mail system sharp distinction made inputting mail editing mail use multiple window read reply mail ability page back forth natural wanted learn use emacs reason alone certainly multics integrated video management time serious design consideration mail system could use advantage indeed emacs mail system indeed way getting videomanaged mail nothing else however large percentage mailcomposingreading task editing mandate potent editing technology available used emacs emacs seems likely candidate contain mail system mail system contain emacs way done emacsimbedded mail system exists well unique nature multics process environment specifically ability call procedure subsystem known multics proper interface exist allow wide panorama function subsumed emacs experimentation video interface multics function performed creating function via emacs extension language calling external multics routine begets utility without build environment ground buy video management free virtue automatic redisplay prototypical many specialpurpose emacs mode directory editor dired exists multics emaces user inside emacs invokes directory editor via sequence command character display listing file storage system directory edited placed buffer thus virtue redisplay displayed screen normal emacs command used position line line describes one file directory display mode command would cause buffer modified may issued however command delete file show content file available keystroke thus user position around display directory listing examines file mark deletion actually deleted directory editor exited user never specify file name see large picture file directory time menu type interface typical many advanced video system parc menutype subeditor provided multics emacs edit buffer examine destroy unneeded one window move around boundary set size well another class specialpurpose mode invokes largescale multics subsystem within emacs process output useful way lisp mode single keystroke invokes multics lisp compiler upon function cursor pointing upon completion incorporates object program running maclisp environment display compiler diagnostics screen pli fortran mode keystroke invokes appropriate compiler upon source program edited compiler diagnostics placed buffer second window analyzed identify source line flagged error compiler dedicated command keystroke pli fortran mode move cursor source program next line flagged error compiler move current point diagnostics buffer next diagnostic displayed diagnostics window automatically pointer source line kept mark thus valid new editing source program way multiple window used reply sourceprogram error way mail response generated interactive message processor multics emacs already described discussion emacs interrupt system creates buffer associated sender interactive message buffer key binding set typing line send line interactive message associated user message sent user appear end buffer automatically conversation held another user simply going message buffer multiple message buffer like buffer displayed screen multiple window thus several conversation sometimes seen scrolling simultaneously automatically multics emacs screen facility go far allow automatic routing response interactive message coming foreign network site third type special mode provided user telnet user supdup mode mode communication foreign arpanet host established dedicated buffer usually window becomes virtual video terminal foreign system text typed telnet supdup buffer go foreign system telnet mode foreign system assumed integrated screen support realtime line editing virtue telnet protocol power emacs editing may applied input sent carriagereturn supdup mode screen management performed foreign system received network output interpreted output buffer code position around supdup mode buffer mode indicative desire emacs user stay within emacs entire duration multics login session running process emacs desirability feature would questionable multics process could telnet emacs running activating either needed multics stack architecture however make extremely difficult impossible coroutine architecture emacs buffer better model multitasking process provides easy way divide screen task well another specialpurpose mode interest lisp debug mode intended debugging emacs extension specialpurpose buffer set line typed evaluated lisp form carriagereturn entered result evaluation placed buffer well resulting transcript buffer like consolemessage mode lisp debug mode allows setting breakpoints extension code debugged breakpoint entered lisp debug mode buffer entered appropriate message variable may examined set via normal lisp form typed buffer lisp evaluator stack best debug function interpreted form may traced special command lisp debug mode return breakpoint lisp debug mode us multiple window advantage usual use three window using one display source code extension debugged one display text upon extension operating third lisp debug mode buffer breakpoint entered command lisp debug mode available display breakpoint source first window show position current point buffer operated upon moving cursor appropriate window thus current point may inspected manipulated issuing normal emacs command buffer operated upon breakpoint variable debugger one thus step extension via breakpoints watching action upon text buffer automatically redisplayed breakpoint time like else proceed halbert didl also implemented lispcoded displayoriented debugger share many concept ix experience conclusion year half since inception multics emacs grown toy lisp program multithousand line subsystem encompassing widely diverse multics facility used across country inspired wide variety reaction many way telling state computer marketplace way multics emacs share emacs experience novice experienced user find emacs easy learn use use video terminal rarely revert earlier editing habit people seem become productive proficient emacs le time conventional editor skilled programmer build extension subsystem accomplish sophisticated task library personal emacs extension abound impact emacs upon multics however quite unparalleled experience cognoscenti recognized ostensible similarity emacs standalone wordprocessing system attempted identify emacs integral part multics wordprocessing way sought support dozen hundred emacs user vain attempt approach economy standalone wordprocessors power mainframe realtime editor however nonexistent ability compete economically dedicated minicomputer system wordprocessing environment extensibility allows perform highly specialized sophisticated editing task cf plifortran error diagnostic mode minicomputer system capable people site multics emacs used appear use regardless substantial resource cost redisplaybased realtime video editor innately expensive people deal reality often use emacs even heavilyloaded system many system user directly pay resource consumed make expensive tool attractive emergence multics emacs sensitized multics user advantage integrated video support realtime line editing widespread conversion timesharing user video terminal left printingterminal oriented multics interface far behind emacs let user see video terminal managed intelligently result substantial agitation integrated video support multics terminal support communication area emergence multics emacs also seems put final nail coffin multics editor issue suggestion new printingterminal editor surfaced since emacs came multics emacs responsible renewed interest lisp many people wanting write emacs extension pursued lisp knew programming language rapidly become enamored multics emacs tremendously potent tool creation debugging lisp program taking pain indentation parenthesisbalancing similar mechanizable task power multics emacs tool developing ie extension overstated linebyline functionbyfunction incremental input debugging code facilitated lisp mode active maclisp environment allow code produced debugged second finely tuned reiterated way sculptor polish examines work interactive program development facility multics anything like emacs developing extension power facility directly responsible large number wide variety extension come multics emacs also provided testbed experimentation alternative multics user interface highly customized environment could validly stated user interface multics extend well video terminal need almost completely overhauled effective video terminal utilization mail system case point multics emacs provided path experimentation entire alternative interface multics multics emacs provided subject matter interesting discourse multics development community researcher mit stanford elsewhere working similar related issue addition valuable infusion new radically different idea multics giveandtake investigating similar interface stallman dlwthesis sine schiller development multics emacs fact grew related editor active stateoftheart research topic time choice lisp bold one alone responsible rapid development tremendous function multics emacs clear implementation pli concession elegance modifiability like one assembler language would support larger number user smaller cost none function would developed choice emacs interface extremely fortunate one subsequent observation indicated intuitive smoothness emacs interface large directly responsible ease learning conceptual advantage conventional editor x acknowledgement author deeply indebted large number people assistance encouragement prehistory development multics emacs would like thank william york gary palter richard lamson maintainer developer multics emacs responsible numerous feature fix enhancement infinite work richard stallman developing entire concept emacs offering fervid enthusiastic support first day honeywell information system inc specifically charlie clingen john gintell steve webber foresight allow resource committed project developing honeywell product dan weinreb dave moon nature assistance information encouragement support numerous mention larry johnson jerry stern robert coren maintainersdevelopers multics communication software earl killian eugene ciccarelli bruce edward early guidance continued support vast experience terminal support realtime display software paul schauble arizona contribution fortran mode fortranpli diagnostic scan mode roger roach staff mit information processing center allowing experimentation characteratatime realtime lispcoded editor service system allowing emacs user community grow mit ai lab allowing use system become familiar lee park charles frankston carl hoffman lindsey spratt suzanne krupp margaret minsky gerry sussman large number people sort help encouragement idea along way bibliography multics pli language specification order honeywell information system inc arpanet arpanet protocol handbook network information center bell qed bell telephone lab qed chaos mit ai lablab computer science chaos net ct crisman ed et al ct programmer guide mit chineual weinreb moon lisp machine manual mit didl halbert symbolic debugger c c mit sb thesis dlwthesis weinreb daniel l mit sb thesis zwei editor edoc documentation e editor edoc al echnego greenberg bernard echo negotiation paper multics technical bullet honeywell cambridge mass july gcpaper ancient cacm article became multics lisp gc fenichel yochelson etc itsdoc eastlake et al ai memo xxx user manual lcp greenberg bernard multics maclisp compiler basic hackery unpublished paper honeywell dec lispbook greenberg bernard note programming language lisp mit sipb mpm multics programmer manual ak moonual moon david maclisp reference manual mit multics corbatoclingendaley paper click multics info parc teitelman display programmer apprentice xerox parc qug honeywell qedx user guide preparation crispin supdup protocol network document rfc crispin supdup telnet option network document rfc greenberg b supdupoutput telnet option network document rfc sine anderson owen ted mit sb thesis sine editor swg multics subsystem writer guide order honeywell information system inc schiller schiller jeffrey mit sb thesis tore editor stallman stallman richard emacs customizable extensible display editor ai memo xxx mit ai lab tecdoc online documentation teco mit ai system telnet telnet protocol network document xxxxx tmacs tool multics system programming tool order honeywell information system inc appendix appendix redisplay multics emacs redisplay generated excitement designed hindsight several redisplays optimizes visibly well especially low speed many detailed analysis redisplay algorithm literature instructive valuable consider algorithm multics emacs redisplay detail redisplay intended use worst low speed baud environment take advantage terminal editing feature line character insertion deletion much possible multics yet provide ability synchronize termination output way telling whether output actually progress seems common feature multinode communication processing network multics emacs appears often generate extra redisplay sense screen updating low speed compare stallman wherein emacs described able stop redisplays new input typed inadequacy resulting multics emacs redisplay seems fulfill well goal optimal redisplay low speed basic function data structure terminology relating thereto redisplay given section iv datastructure terminology window management system given section v redisplay invoked interactive driver input character processed call basic editor extension call suppressed already input readahead multics supervisor redisplay given explicit argument return value basic task redisplay twofold update screen content window correctly display content buffer display position cursor point selected window corresponding current point current buffer redisplay data structure time redisplay invoked describes final content screen logically editorlines physically character time last redisplay secondary goal redisplay utilize information transform window display correct content first phase redisplay update window correct content driven iteration array window information alluded section v layout ie number extent content window changed since last redisplay redisplay aware simply considers current content current window including line may window line dash used divide window windowdividing line actually implemented lowestlevel windowdescription array window possible fullwidth nature window full line terminal needed draw incorrect line changed regardless origin current window task stated compute new content update screen reflect end processing displaylines representing new screen content placed correct element screen array next redisplay screen array indexed line window thus change window layout redisplays ignored computation new window content consists two phase implemented one pas logically distinct choice editorlines displayed window must made displaylines representing including printed representation must computed choice editorlines based upon one criterion editorline basic editor current line must appear window entirety possible selected window line window point used equivalently see section v time current line already screen new choice line must made thus threepass algorithm used choose line new window pas fill appropriate window element newscreen array freshlycomputed displaylines representing printed representation extent appropriate buffer tentative window starting point full window worth displaylines computed pas computes tentative windowcontent screen position assigned current editorline encountered remembered pas succeeds current line fact encountered case pass made failure pas mean tentative window content include current line position remembered used final phase entire redisplay position cursor selected window first pas attempt use old choice editorlines handle vast bulk case take editorline starting line current window content determined displayline first element window extent screen array starting point editorline may even exist may deleted basic editor since last redisplay account basic editor replaces linecontents deleted line unique object redisplay recognizes case object found linecontent first editorline old screen second used like pass computes displayline editorline following doublylinked list buffer structure get next editorline fill screen array displaylines second pas invoked first pas failed find current line window content based upon previous window content attempt choose window content place current line center window second pas measure predicts vertical screenextent editorlines going back buffer via doublylinked list one half window worth line passed line find tentatively chosen window starting line tentative window content computed third pas invoked second pas failed find current line occur rare case extremely long line normal redisplay however window redisplay procedure also invoked time demand user command display next window worth text quite common useful time third pas opted request explicitly choose window content given starting point third pas guaranteed find current line computation displaylines made storage timeefficient optimization based upon fact line precisely editorline changed printed representation precisely displaylines comprising representation redisplay data structure changed thus displaylines found need recomputed array oldlinecontents maintained element per screen line end ofthe window update process linecontent editorline display window stored specifically machine level pointer lisp string filecons linecontent corresponding element oldlinecontents displayline computed old window content scanned instance editorline whose new displayline computed machine level comparison pointer deliberate identity line given buffer representation used multics emacs basis technique editorline found displayline computed constructed editorline found check made see still ie identical instance lisp object say pointer equal linecontent saved corresponding element oldlinecontents array old displayline still valid displayline computation generation need performed old displayline used technique relies upon fact editorline modified must given different linecontent lisp storage never reused saved pointer oldlinecontents array used determine unambiguously whether editorline changed since last redisplay old linecontent current line never stored unique object stored instead force full displayline computation current line required optimization described subsequently window new content determined task comparative update begin linear scan displaylines new window content made maintaining pointer performing linear pas old window content parallel new displayline processed scan made remaining portion old window looking displayline describing editorline current new displayline found old window current pointer along old window ctl requested delete appropriate number line terminal screen insertion deletion line available displaylines simply compared updated oneforone via line update procedure described found editorline displayline current pointer old window sought among remaining displaylines new window found ctl asked insert line open new space terminal screen manipulation performed pointer index updated reflect line deleted new blank line screen displayline representing appropriate line screen comparatively updated redisplayed current displayline hand screen reorganized actually place line new line displayed neither line found screen image old new new old current displayline redisplayed respect whatever happens screen point insertion deletion line used open close space window every insertion deletion must performed first bottom window every deletion insertion blank line bottom window must performed subsequently region scrolling feature available hds concept dec terminal provide function directly much pleasing behavior multics emacs result insertion deletion performed old displaylines redisplayed new displaylines via lineupdate procedure two trivial check made identical line pointer comparison corresponding linedatas succeed optimization linecontents employed failing string comparison empty nonexistent line point considered line many blank ie old v new line content blank fact represents put new line old line screen length blank line chosen benefit comparative update algorithm obvious alternative one screen line worth blank le wellsuited availability terminal feature ie clear end line specialcase blank endsoflines linedatas old new displaylines compared characterforcharacter either end find point differ direction example old new line respectively able leap tall building single bound able find tall person within bound found eight character common left able six right bound computation cheap hardware help would great value two line partitioned left common area difference area right common area note presence tall difference area recognized model line change intended reflect common user behavior textediting environment type redisplays eg one updated screen showing system status main memory map etc might optimal textediting environment truly wonderful redisplays achieved model equallength difference area new difference area rewritten place device overstrike thus command uppercase word cursor point immediate visible local effect creating minimal redisplay overstriking device done equallength difference area special case nonequallength difference area insertion deletion character position must performed preserve right common area one common length difference area overwritten nonoverstriking device remaining length deleted old longer inserted new longer zerolength right common area right common area consisting entirely blank using terminal support insertion deletion character old line screen cleared end left common region end indeed least long new difference area nonblank printed nonblank right common point considered part difference area noninsertdeletecharacter terminal note nonblank right common significant terminal equallength differencearea case optimize weak terminal support clearing end line glass teletypes cursor addressing clearing end line delayed long possible rewriting new difference area first allows remains line right new difference area cleared overwriting blank potent optimization made overlength multidisplayline line character inserted deleted middle nonfinal displaylines consider oldnew pair line old seen light cand rejoiced new seen ligh ct rejoiced c multics conventional character sequence continuation line consider redisplay first displayline seen light v seen ligh left common area text seen difference area rest either line right common area yet natural operation model insertion occurred large amount redisplay rewriting rest line occur take action would like able take advantage character insertion thus detect case string search via hardware made suffix substring end string old difference area appears intact new difference area eg ligh vice versa detect deletion case done two linedatas long width screen right common either check succeeds difference area scrolled horizontally using insertdelete character feature terminal sometimes wrong check ie unexpected succeeds prior check amusing although completely correct redisplays result text displayed multics emacs ultimately put screen lineupdate procedure indeed even display completely new text eg file read upon blank screen seen line update line blank left common equal amount leading whitespace indentation line rest line difference area right common thus printing difference area zerorightcommon case extremely important statistically responsible majority character output emacs exclusive echonegotiated input optimization exists weak terminal cleartoendofline take advantage cursor addressing avoiding printing whitespace text output lineupdate procedure case text displayed scanned whitespace significant run whitespace displayed clearing end line done positioning start new nonblank text first important optimization redisplay implemented sense ancestor echo negotiation implemented anyone considering designing redisplay echo negotiation goal optimize insertion trivial character see section vi end current line objective optimization avoid substantial time storage expense full computation redisplay even optimization described tremendously important case implementation thereof involves one instance basic editor awareness redisplay allow redisplay detect case flag reset redisplay time invoked set basic editor time modification made editorline except insertion character end unique editorline current line time last redisplay demand reorganization screen eg redefinition reorganization window set flag well redisplay set variable visible basic editor editorline purpose time redisplay invoked line still current line flag set current point position current line end entire redisplay may performed simply typing ie sending terminal via ctl character current line extended since last redisplay actually presence nontrivial eg tab character line extension physical line overflow must checked well cause optimization used present old value location current point current line maintained redisplay line extension string may identified optimization known quick redisplay subsumes endredisplay positioning cursor updating oldlinecontents array mentioned avoids allowing current line optimized however subsume updating screen array however possible object part object could changed linedata displayline cursor left last redisplay whether quick otherwise always describes current editor line critical correct linedata current line even though quick redisplay use content next redisplay might quick one needed construction new lisp string linedata quick redisplay would exclusive echo negotiation line n character generate n string n quick redisplays creating n order n character storage avoid storage generation linedata current displayline maintained rplacable string see section iv quick redisplays simply update content final action normal nonquick redisplays instate string linedata current displayline already allocating real storage linedata last line state line upon return echonegotiated reading character redisplay invoked update screen image note definition valid circumstance echo negotiation quick redisplay quick redisplay would result fact special flag set suppressing actual output character redisplay echo negotiation output redisplay invoked fact redisplay quick redisplay result internal error occurred note normal redisplay quick redisplay considered even two level echoing hierarchy described section vi one remaining optimization similar last remains flag used deselect quick redisplays set modification performed upon line determined another flag reset redisplay time known basic editor current line line end last redisplay quick redisplay therefore occur case redisplay conclude happened user moved cursor around current line current buffer current line found current selected window entire window update phase redisplay skipped proceeding directly final cursor positioning important optimization much important yet oldlinecontent optimization implemented appendix b extension language multics emacs extension whether part standard editor loadable library userwritten written multics maclisp augmented set lisp macro provided lexicallyincludable program fragment system extension written environment consisting native maclisp function io function basic editor standard extension occasionally redisplay basic editor function provide ability manipulate current point buffer inspect change content line buffer lisp macro provided syntactic sugaring commonly used syntactic cliche create temporary variable assign mark current point perform code free mark well augment basic expressive power maclisp writer extension creates maclisp function via defun standard maclisp function definition facility addition invoking function extension environment function may invoke may lisp function connected key invoked automatically interactive driver selected key struck extension use data string integer buffernames mark see section v basic lisp data type symbol list implemented via con occasionally used fact reasonably expert extension writing accomplished person completely ignorant fundamental lisp data object type fact mark implemented lowerlevel lisp object transparent irrelevant extension writer allowed never reason decompose elegant nature lisp object abstraction extension writer knowledge dealing editorlines displaylines linecontents element basic editor redisplay data structure mentioned preceding section useful class function used extension already capable invoked key interactive driver instance forwardword commonly used editing position cursor past current word emacs user conceptualizes escapef escapef twokey sequence standardly used invoke common command extension writer hand conceptualizes forwardword function moving current buffer point beyond current word using function extension function valuable technique extension programmer always experiment function used invoking normal interactive ie via keystroke way determine detail behavior simple example extension function based upon command normally available keyboard name bracket word place word cursor point angle bracket defun bracketword forwardword insertstring backwardword insertstring empty parenthesis signify context function formal parameter function insertstring effect interactive user typing sequence selfinserting trivial printing character invocation forwardword backwardword position current point prior insertion character string end result running function would user typed escapef invokes forwardword rightanglebracket escapeb invokes backwardword left angle bracket net result buffer screen however intermediate state would visible user typing sequence visible screen extension run final state interactive driver invokes redisplay command character typed function visible inspection invoke redisplay invokes seen invoke common extension environment macro saveexcursion used remember location current point restore execution included code within macro example following extension function place star beginning current line leaf cursor place current line bear mind position remembered via mark relocated automatically buffer text change defun putstaratbeginningofline saveexcursion gotobeginningofline insertstring saveexcursion macro encompassing invocation gotobeginningofline insertstring ensure current point restored function run another similar macro saveexcursionbuffer used restore selection buffer dynamic scope switching buffer save location current point within buffer saveexcursionbuffer subsumes task saving point within buffer another set common macro extension writing dealing mark providing creation thereof freeing end contained code freeing mark important length basic editor mark list limit speed lineopening macro withmark name variable mark assigned execution time mark denote point buffer current time code contained macro begin execution following extension function deletes two word forward current point defun deletetwowordsforward withmark forwardword forwardword wipepointmark deletetwowordsforward invoked mark designating current point buffer created assigned local variable named artifact withmark macro two call forwardword executed presumably moving buffer point saved mark two word forward buffer wipepointmark invoked passing mark argument wipepointmark deletes text current buffer point point designated mark saving incidentally possible user recovery end execution deletetwowordsforward mark created macro freed another class emacs extension environment macro used supplement reimplement feature maclisp thought inadequate either learning purpose illtuned extension environment example extension documentation teach use macro opposed native maclisp cond fundamental conditional construct much simpler straightforward suffices almost case similar conditional construct almost language lisp native maclisp cond much general powerful power often needed seems presented stumbling block learning lisp another macro class doforever exit form stopdoing native maclisp two form one like fortran powerful multivariable generalization often extension writer want iterate integer variable buffer line character iteration variable thus global editor state need specify deal variable almost never needed undesirable doforever illustrated following extension function either find first blank line buffer complains none defun findfirstblankline gotobeginningofbuffer doforever lineisblank stopdoing lastlinep displayerror blank line nextline form stopdoing executed cause control exit doforever form function lastlinep suffix p traditional lisp nomenclature predicate test current point last line buffer function displayerror cause error message printed bottom screen via primitive intrinsic redisplay lisp io may used extension environment nonlocal transfer control whole function findfirstblankline reason stopdoing needed call displayerror experience extension language shown meaning transparent underlying lisp invisible emphasis lisp shift data world formalism organizing function invocation copyright bernard greenberg home change multicians history feature bibliography site chronology story glossary paper humor document source link
156,Lobsters,emacs,Emacs editor,It's Magit,https://www.youtube.com/watch?v=j-k-lkilbEs,magit,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature magit john wiegley youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature magit john wiegley youtube
157,Lobsters,emacs,Emacs editor,Emacsair! Work with Git Forges inside Emacs,https://emacsair.me/2018/12/19/forge-0.1/,emacsair work git forge inside emacs,post r twitter github macsair collecting frequentcommitter mile work git forge inside emacs forge usage manual prior art list major design decision p reddit,post r twitter github macsair collecting frequentcommitter mile work git forge inside emacs excited announce first public release forge allows work git github comfort magit rest emacs usage forge come manual gloss entirely unimportant topic creation api token mention every available command start using forge certain repository visit magit status buffer repository type f forgepull add entry database new value remote remote fetch instructs git fetch pullrequest reference subsequent invocation asynchronously fetch api data pullrequest reference done issue pullrequests listed status buffer forge command work given repository done though one tell use forgepull trying use forge command available dedicated popup many command also available point appropriate section magit buffer like case many command pullrequest branch created b checked b regular branching popup visit issue pullrequest separate buffer use ret point topic status buffer elsewhere use cc cv likewise use cc cw visit issue pullrequest using browser buffer visiting topic create new post using cc cn edit existing post metadata using cc ce post edited separate buffer like buffer used write commit message either confirm message using cc cc abort using cc ck prior art forge first package earlier implementation include magitghpulls magithub quite find list gitrelate emacs package forge quite similar magithub especially come feature package provide interface look package part magit tighly integrated magit also use ghub library forge us graphql package written author magithub two u collaborate end decided go forward plan implement forge scratch anyway hatched plan long magithub released time happened already working lowlevel part form ghub anyway nevertheless think fruitful collaboration expect resume shortly bit quiet late major design decision user explicitly pull data api feel time come inspired git also fetch random interval behind user back forge permanently store fetched data like git originally planned store much information using git object possible current version data stored sqlite database use database make certain future change difficult try keep breaking change minimum little hope make without case might even necessary user discard existing database package limited one already support github gitlab three gogs partially support meaning apis supported yet except id feature depend data api additionally forge support four cgit stgit stht like forge semiforge provides web interface git repository unlike forge support issue pullrequest andor provide api even without access api forge still provide feature forge also fetch pullrequest reference using git find quite surprising tool take advantage easily accessible information forge fetch ref even forge whose apis supported yet user experience much better api data also available even able checkout merge pullrequests using magit big win forge us graphql api possible forge graphql api yet case gitlab even github rest api used thing using graphql make fetching much faster even using graphql initial fetch still take minute though thousand issue subsequent fetch fast p writing forge took much longer expected would probably implement many planned magit feature first write forge feature done ie would starting forge many feature yet important one fairly easy quick add bunch new command going focus thing magit roadmap first comment reddit
158,Lobsters,emacs,Emacs editor,The Rise of Microsoft Visual Studio Code,https://triplebyte.com/blog/editor-report-the-rise-of-visual-studio-code,rise microsoft visual studio code,give u insight tool different cohort engineer prefer preference change time also allows u identify correlation tool engineer choose performance programming interview post data editor usage rate interview pas rate experience location conclusion visual studio code rise engineer use old school editor like vim emacs tend strong programmer engineer use go also especially strong engineer use eclipse visual studio le well average interview take grain salt would really appreciate feedback ammon triplebytecom lyn triplebytecom check process explore platform,tl dr visual studio code usage rising rapidly v code editor chosen majority engineer programming interview appears rapidly taking market share top editor triplebyte interview hundred engineer every week interview record editor language operating system used nt use information decide pass interview nt think would fair however fascinating data give u insight tool different cohort engineer prefer preference change time also allows u identify correlation tool engineer choose performance programming interview coworker mike wrote post data year ago triplebyte grown lot since enough data dive much deeper goal blog post editor usage rate get started pulled data editor used interview conducted last year first thing jump graph prominence visual studio code pie v code editor used plurality triplebyte candidate last year surprise two reason first v code relatively new product microsoft second last year nt even appear share small enough fall bucket get better view graphed data time yikes v code eating everyone else lunch story pretty clear past year v code usage gone time sublime text usage fallen atom usage fallen even eclipse falling v code accelerating every month google trend show thing v code rise poised become dominant editor ever seen maybe give try interview pas rate editor usage one part story however usage equal wanted see editor used best programmer look pulled data triplebyte candidate performed interview grouped editor used chart show rate editor user pas interview compared mean pas rate candidate first notice preeminence emacs vim engineer use editor pas interview significantly higher rate engineer effect size small emacs user pas interview rate higher engineer could explain phenomenon one possible explanation vim emacs old school might expect user experience thus better however notice v code third best brand new undercut narrative bit make v code look even dominant emacs vim user characteristic make likely succeed interview perhaps tend willing invest time effort customizing complex editor shortterm order get return powerful tool longterm negative end engineer use eclipse intellij visual studio pas interview lower rate eclipse intellij visual studio common well ides however pycharm also fullfeatured ide show high pas rate else could going another distinguishing feature eclipes intellij visual studio strong association java c might merely seeing result correlation specific editor specific language investigate looked interview pas rate language well java c relatively low pas rate although notice eclipse lower pas rate java v fully explain poor performance java dragging also going go go programmer great dig deeper question looked editor usage language percentage graph per editor see example engineer using pycharm program python make sense name eclipse dominated java visual studio mostly c c ca nt really say way causality go seems language java c ides eclipse visual studio associated lower pas rate interview data come internal interview result hold interview conducted outside company use platform triplebyte take language editor selection account making interview decision ton great c java programmer helped many get job company platform however seems average c java engineer go process le well average ruby go engineer idea another finding chart difference v code sublime v code primarily used javascript development le frequently python development sublime number basically reversed python javascript interesting v code user pas interview higher rate sublime engineer even though predominately use language lower success rate javasript experience location wrap thing sliced data experience level location see language usage experience level row sum chart show percentage people given level experience use language notable popular python java among candidate internship part time experience seeing folk recently graduated college using language taught editor usage experience level first see v code usage dropping experience level increase definitely popular among junior engineer also see vim emacs popular among experienced engineer seems plausible indeed main reason vim emacs user high pas rate interview finally looked relationship location language used like chart say bay area geography peninsula larger company tend located see lot java developer san francisco startup dominate see javascript conclusion summary trend tool usage saw past year along intriguing relationship tool engineer choose programming ability visual studio code rise past year become popular editor across board gaining ground every month wonder editor landscape experiencing tectonic shift relatively fractured market world single editor market engineer use old school editor like vim emacs tend strong programmer said finding may best explained fact editor especially popular among experienced engineer engineer use go also especially strong know please let know engineer use eclipse visual studio le well average interview correlation still stand interview external company use platform take grain salt want end saying nt think causative nt recommend start using emacs go stop using eclipse java basis data strong programmer use every set tool important thing interview using tool comfortable would really appreciate feedback lot question data would love know programmer think seen past year email ammon ammon triplebytecom lyn lyn triplebytecom matter editor choose engineer interested matched top tech company san francisco new york los angeles andor seattle check process company interested hiring great engineer explore platform
159,Lobsters,emacs,Emacs editor,Emacs Everywhere,https://ambrevar.xyz/emacs-everywhere/,emacs everywhere,recent addition helm,warning aficionado sparkle glitter behold exwm visually barren emacs get exwm last milestone course big shift fully emacsbased environment avid user awesomewm year time grew tired losing window among excess workspace tag awesome terminology screen wish could fuzzysearched fzf something similar never managed implement idea discovered exwm exwm benefit emacsbased particularity x window buffer part emacs buffer list make capability fuzzyselect window helm ivy lost window belong past opening several window configure display recent addition helm nice usecase first narrow window using helm pattern display exposé fashion finally select desired window visually concretely following binding sb helmmini helmmarkall hjkl windmove exposé binding sequence sb filter ret hjkl ret say wikipedia page want want select one title remember sb wikipedia ret usually enough sb wk ret sl sj ret second window right since window management extensible write helmwindowshowbuffersfunction finetune need always display compile buffer spot specific height buffer web browser window pop mosaic tiling use masterslave tiling behave differently depending number buffer depending content mode keep column tool right calendar calculator etc convenient lookup buffer exwmhelm quit using workspace aka tag altogether favour global approach maybe one noticeable benefit daily basis lift weight cognitive burden manage window emacs external window manager exwm need remember two set binding windowing rule windowing effectively fully centralized instance used reserve super key windowing binding awesomewm reserve emacs windowing operation need binding adept suckless philosophy would argue emacs leave windowing including external specialized program window manager perspective emacs user interface much heresy consider emacs precisely window manager emacs window manager additional benefit namely fully aware content emacs buffer allows specializing windowing action depending different buffer much harder window manager
160,Lobsters,emacs,Emacs editor,Lem: An editor/IDE well-tuned for Common Lisp,https://github.com/cxxxr/lem,lem editoride welltuned common lisp,lem editoride welltuned common lisp screenshot requirement platform play lem docker installation roswell installation guide updating usage screencast configuration http githubcomfukamachilem extension mode pareto electron version experiment lem platform without sbcl thread support eg raspberry develop lisp http githubcomcxxxrlemwikilispmode hack lem http githubcomcxxxrlemwikihowtohackonlemitself gitter chat contributor contribute backer become backer sponsor become sponsor license mit,lem editoride welltuned common lisp installing lem start developing common lisp skip writing tidy setting installing many plugins emacs screenshot requirement platform play lem docker try lem running docker container docker run rm ti v pwd app latest installation please install roswell first roswell installation guide please follow step bellow install lem roswell ro install cxxxrlem add path initialization file bashrc export path path roswellbin updating ro update lem usage lem filenamelisp watch screencast youtube screencast configuration lem load leminitlisp starting see example fukamachi also published init file github http githubcomfukamachilem extension mode pareto mode complement paredit make lisp code editing even efficient electron version experiment electron version experimental stage try please follow step node v check nodejs npm v npm install g cxxxrlem install lemelectron lemelectron electron version start lem platform without sbcl thread support eg raspberry installation fails due bordeauxthreads thread provided sbcl pc need use clozure common lisp ccl instead sbcl ro install cclbin ro use cclbin ro install cxxxrlem also need specify frontend ncursesccl launch lem follows lem frontend ncursesccl develop lisp see http githubcomcxxxrlemwikilispmode hack lem see http githubcomcxxxrlemwikihowtohackonlemitself question join gitter chat contributor project exists thanks people contribute contribute backer thank backer become backer sponsor support project becoming sponsor logo show link website become sponsor license mit
161,Lobsters,emacs,Emacs editor,Magit 2.90 released,https://emacsair.me/2018/11/08/magit-2.90/,magit released,post r twitter github macsair collecting frequentcommitter mile magit released magit git interface inside emacs http magitvc blog post breaking change release note last release support emacs git renamed many command improvement workinprogress ref specifying majormode used commit message change release note roadmap reddit,post r twitter github macsair collecting frequentcommitter mile magit released excited announce release magit version consisting commits since last feature release five month ago release note found magit git interface inside emacs magit textbased git user interface put unmatched focus streamlining workflow command invoked using short mnemonic key sequence take position highly actionable interface account provide contextsensitive behavior magit nearly everything using git commandline greater speed taking advantage advanced feature previously seemed daunting use daily basis many user find using magit become effective git user information magit see http magitvc blog post breaking change breaking change beside mentioned see release note last release support emacs git announced earlier older emacs git version supported much longer last magit release support emacs git ie release drop support emacs git soon emacs going required support older git release also dropped certain yet happen new minimal version renamed many command many command renamed making name longer old name defined alias part one two part change release rename example magittag magittagcreate later release magittagpopup going renamed magittag improvement workinprogress ref new mode magitwipmode added enables automatic committing workinprogress ref whenever make sense previously multiple magitwip mode enabled accomplish mode still exist new mode even implemented top explicit use user discouraged originally also planned change wip ref updated default new commit created current branch new behavior opted using new option magitwipmergebranch default wip ref reset point commit current branch new commit created current branch set magitwipmergebranch nonnil value current branch instead merged wip ref newly added approach make easier reason wip ref relate branch partially true default yet user rewrite history lot eg repeatedly amending commit graph get really complicated also merging real branch wip ref instead resetting latter mean wip commits never garbage collected complication make additional tooling necessary new approach become default two new command magitwiplogindex magitwiplogworktree added specifying majormode used commit message possible specify majormode used edit commit message perrepository basis majormode also used prettify commit message displaying existing commit message magitrevisionmode buffer set majormode used commit message add entry appropriate dirlocalsel file using gitcommitmode setting variable gitcommitmajormode usually work magit contains code make work eventhough gitcommitmode actually majormode gitcommitmode key also used set variable buffer used edit commit message effect temporary buffer used fontify existing commit message inserting revision buffer gitworktreegit file gitworktreedirlocalsel would normally apply editing file inside gitdir file edited write commit message magit explicitly us dirlocalsel working tree unless gitdirdirlocalsel exists otherwise would possible distribute file way would cause used contributor new mode gitcommitelisptextmode added intended used majormode commit message elisp project derives textmode additionally highlight symbol string course could also use textmode default markdownmode orgmode example gitcommitmode gitcommitmajormode gitcommitelisptextmode change release also contains many change bug fix listed release note considering long took release contain many truely exciting change change landed master branch yet change roadmap next week plan create initial release forge package feature provided package exist early form magit early implementation removed user want feature install forge release transient package merge transient branch master time release magit beginning december hopefully bit earlier magit start use libgit module contrary initial plan likely hard dependency mean maintain two implementation many function release githandlerel start using magit time release magit two biggest planned change likely make end year improvement diffing logging well try implement planned change diffing logging make cut unfortainly certain comment reddit
162,Lobsters,emacs,Emacs editor,Clojure Development with Spacemacs & Cider,https://practicalli.github.io/spacemacs,clojure development spacemacs cider,,thu aug british summer time
163,Lobsters,emacs,Emacs editor,Historical Emacs Software Preservation,https://github.com/larsbrinkhoff/emacs-history,historical emacs software preservation,http http http http http bitsaversorgbitsmitgnu http modified http http http http http http http http ftpgnuorgoldgnuemacs http devgentooorgulmemacs http http http ftptiscalinlpubmirrorssunfreewaresources http http ftpgnuorgoldgnuemacs http ftpxemacsorgatticreleases http brianorgreidmisc,teco emacs dump tape image binary file late teco emacs alfred szmidt aiemacstgz released september copy modification based ai emacs lock timestamp abouts ai system think one mc check really curious lack version string make interesting richard alderson dumper tape image teco emacs emacs emacsexe timestamp may extracted http mit cadr zwei alfred szmidt brad parker based zmacslisp time stamp abouts based system patchdir file written bsg based zmacslisp timestamp abouts mit cadr copy come tape mit cadr system backup brad parker found several year ago nn version system ti explorer zmacs alfred szmidt system based zmacslisp time stamp abouts ti explorer n version zmacs operating system even though symbolics genus zwei alfred szmidt genus based zwei patchdir file written lispm genus based zwei patchdir file written palter genus open genus based zwei patchdir file written palter genus copy come cdroms tape distributed symbolics lisp machine zweinnn nnn version zweizmacs zweilambdatarxz alfred szmidt joe marshall forfrom lambda know version sadly copy come joe marshall used work gigamos multics emacs webmitedu last changed emacs http possibly vms modification ftp ftpsplodecompubusersfriedmanemacs noah friedman recovered copy emacs source backup tape mit rms needed court case unisys put back ftp couple year later relatively easy find day usenet netsources seems official changelogs entry emacs emacstarz mike haertel tar file came nine track tape sent member unix user minnesota nt know original tar file made rms least timestamps file within look correct except maybe top level directory dated oct emacs ftp usenet netemacs emacs http help alfred szmidt emacs http http bitsaversorgbitsmitgnu http emacstarz modified ftp http http http http ftp ftp ftpcsaitacthpubpcdemacs http gnu emacs next system version plus rms change july interesting stock released august january http http http ftpgnuorgoldgnuemacs http devgentooorgulmemacs build emacs modern linux system http http http ftptiscalinlpubmirrorssunfreewaresources http http ftpgnuorgoldgnuemacs lemacs xemacs http ftpxemacsorgatticreleases http brianorgreidmisc brian reid found two version updated would work gcc paid russian kid update would work gcc gcc came would longer compile sort walked away got source little bit work would run untouched gcc came change every variableargument function call version identical version except two thing publishing file brian reid fine consider james property james gosling fine archaeology good thing goslingemacstar der mouse got prerelase eunice obtained one people behind eunice personally knew people lab hanging sometime started using real unix shortly sunos ripped specialcase eunice code maintaining slowly evolving year since gosling emacstap decusstuttgart universityneozeed apparently gosling emacs tape decus tape label unipress software inc product emacs screen editor vaxsun unix source c tar sn olduemacstargz dave conroy probably version predates daniel lawrence change need look around little find look like version
164,Lobsters,emacs,Emacs editor,Previously unpublished information on the creation of Emacs,https://raw.githubusercontent.com/PDP-10/its/master/doc/eak/emacs.lore,previously unpublished information creation emacs,,date jul david moon subject origin purestring loading emacshistory mitmc early rms put ej rmail recall allowed save impure part teco form would execute program boot teco saved lot time starting letting save teco loaded right stuff sometime summer tmacs group decided make sharable library improve paging performance make faster loader think invented ej patched teco support sure happened note august saying new faster pure loading scheme installed tmacs seemed work know pure loader went several iteration change protocol worked well tmacs unable use ej would never agree initial environment could nt use something preinitialized world everyone got person different key layout extent different macro recall one big thing attracted tmacs addition felt sharing important get better response several people using tmacs considered macro huge maybe block ej method nt share anything teco date jul moon mitmc rms mitai moon mitai think cause doubleechoing yes dired mm dired outside r yes clearly answer wo nt bother group another useless message date jul eugene c ciccarelli subject update bernie multics emacs history emacshistory mitmc mc eak emacs lore slightly revised version bernie earlier brief history multics emacs message revision also written bernie herein follows difference old new comparison dsk ecc old one dsk ecc new one option file dsk ecc old one brief history multics emacs compiled bsg bernie greenberg give rendition sipb lisp course edits note dan weinreb ai using emacs becomes file dsk ecc new one brief history multics emacs compiled bsg bernie greenberg give presentation sipb lisp course taker edits note dan weinreb ai using emacs becomes file dsk ecc old one pm greenberg decides know implemented flatout pli could even better little consideration modularity extensibility issue soon point lisp implementation language file dsk ecc new one pm conversation c frankston greenberg mus know implemented flatout pli could even better little consideration modularity extensibility soon lead lisp chosen implementation language file dsk ecc old one program e could build split line insert delete character file dsk ecc new one program e could build split line insert delete character file dsk ecc old one character reader developed allowed e driven reading character r mode tty greenberg take development point file dsk ecc new one character reader developed allows e driven reading character r mode tty greenberg take development point evening weinreb studied ciccarelli code ascertains needed read single character multics arpanet version server telnet hacked allow program read single character normal multics process characterinput first time ciccarelli technique involved special process soon version incipient editor exists performs character input network normal fnp access path multics limited using johnson patch cisl machine file dsk ecc old one understand appreciate tehe significance evening display support started dave moon present birth redisplay redisplay designed take advantage explicit line structure maintained editor first work delta data designed terminal support substitutable file dsk ecc new one understand appreciate significance evening display support started dave moon present birth redisplay redisplay designed take advantage explicit line structure maintained editor first support delta data designed terminal support substitutable olin sibert hang cisl night intensive debugging session new redisplay develops support package run display slave terminal twoterminal use debugging feature becomes heavy next week many falsely conclude two terminal necessary use editor file dsk ecc old one multics technical organization rather shriek horror document acclaimed enthusiasm file dsk ecc new one multics technical organization rather meeted shriek horror document acclaimed enthusiasm file dsk ecc old one file dsk ecc new one bill archy york join cisl becomes active editor codeveloper development assistant acquires skill point able write editor extension real time demonstration selfdocumentation package done largely installed file dsk ecc old one fortitude file dsk ecc new one fortitude jerry stern implementing bill york contributing large amount time improvement editor frequently pointing direction go date jul gls mitmc subject lisp grinder emacshistory mitai rms mitai richard stallman people persist giving credit gls wrote together right never forget day rms spent one moby hack session ten hour long wrote essentially one sitting believe major correction since minor tweak involving defun syntax thee way seem recall written directory comparator originally ca nt remember circumstance remember prompted necessity maintain lisp multiple machine date jul rms mitai richard stallman subject lisp grinder emacshistory mitai people persist giving credit gls wrote together date jul eugene c ciccarelli subject tmacs within tecmac emacshistory mitmc glimpse past glimpse thing come late life tmacs tecmac bob frankston decided liked tecmac environment tmacs mmcommand facility remember proudly showing two could actually run without completely destroying involve little shuffling assumed qregisters q believe actually compatible tmacs tecmac qreg name reader p push subroutine tmacs pushing f flag filename default think time date jul cbf mitmc subject dired emacshistory mitai life remember whether thought safe dired merely large rewrite definately responsible type yes instead felt easy accidentally nt make think enough nt remember bug reading anything nt type n yes something like reprompted might broken though also definately substantial rewrite within month two mine either moon ecc date jul john l kulp subject tecmac emacshistory mitmc ecc mitmc tecmac loading documentation jlk mitmc cc emacshistorians mitmc right recalling tecmac mechanism loading macro name autoloading package selfdocumentation documentation facility like tecmac could load whole macro file individual macro since named string qregs day could load r slot qregs obvious disadvantage scheme people wanted use one two macro one point strongly motivated development emacs pure string library selfdocumentation feature obviously needed work qregs r macro slot x etc driven documentation file ie like mm tecdoc documentation core emacs x l w obvious thing also md macro doc qregs etc date jul john l kulp subject tecmac emacshistory mitmc start tecmac time rms put feature teco allow r character defined came talk rlb making macro package made use feature within week two release teco hacked macro resided init file nt remember clearly exactly long started puting hairy command hacked loader think x scheme beginning date jul john l kulp subject minibuffer incremental search emacshistory mitmc cc rlb mitmc minibuffer believe idea originated rlb although rms also eary discussion idea sure really thought first rlb made first implementation pretty rudimentary fixed cause much redisplay added number feature window expansion recursive r indicator saving old minibuffer quiting display typed ahead etc emacs rms added idea minibuffer ring many original us minibuffer made obsolete read line main use day teco programmer want get temporary teco environment write quick macro investigate state variable etc incremental search think could wrong idea originated rms rlb various time grossly rehacked first quicky implementation rehacked completely upon transferal emacs idea due rlb macro move blank line possible rather inserting new one treating crlf single char rubout k deleting crlf argument accelerator old tecmac sure invention v came mark stack many thing got implemented number u sitting around bsing feature would win someone u would go implement rg suggested old x command saving restoring point qregister another idea generated gls rlb autofill mode lisp nt work terrifically except typing new code never revived original form gls mostly wrote lisp grinder tecmac also emacs cffk wrote macsyma grinder tecmacemacs gls originated mm compare directory macro tecmac grossly rehacked rms emacs rlb thought implemented loader format old tecmac think rlb first person come rotated directory display also first implementation implemented e n p move screen line rlb originiated edit macro sure arrived l w x prefix scheme old tecmac lisp word put yank get old tecmac primitive editing mode lisp word primarily redefined j well enough feel like flaming time send anyone interested old tecmac file datacomputer eeplasma tecmac date jul moon mitai david moon subject disorganized ramblings emacshistory mitai way feature yes answer dired echo top bottom screen still sometimes happens never figured circumstance seen happen ecc original misfeature type character first nt n x check whether yes tell loser still also guess nobody worry thing much fact still old tmacs tecmac code emacs might expect ie function way one mentioned fact tmacs relatively recent many year earlseugene editor charles le active hangerson name guess got name started talking people also deserving mentioned still least people maintain completely private editor based anyone else stuff thing often source inspiration public editor vice versa diversity good date jul eugene c ciccarelli subject dired emacshistory mitmc hell get either cbf moon whichever added safety dired keeping list file delete listing asking confirmation got grubby hand deleted file k screen would delete line containing file always saw directory going look like assuming later gave confirmation deletes two problem first terrible memory could nt keep track deleted whether really wanted last minute given list second redisplay unbearable baud subjected third believe way undelete file deletelist ca nt remember last quite well maybe nt considered contribution minimize redisplay confusion k put beginning file line perhaps undelete time perhaps one deleted hand r mode sidelight nt appear coherent yes typed user response dired deletequery echoed bottom screen query printed cute feature unfortunately later lost probably due teco change something date jul guy l steele jr subject birth emacs emacshistory mitmc account involvement given rms essentially accurate started getting tired kludginess tcmac command arrangement saw editor neat command could fit cleanly tecmac therefore decided perform total reorganization command structure carefully examine existing tecobased editor rmode doc everpopular tmacs work involved playing assignment command key running around organizing discussion soliciting comment made initial stab loader think invented reinvented notion compressing loader invented specific convention emacs loader using space though convention greatly refined later point rms others took development work much better job much faster could reason well pressure class maintenance lisp happy let others take thus provided initial impetus much original userlevel command structure development work succeeding refinement credit people name chosen hard type ddt one could win would force rational choice name later also initial work quux gls strongly influenced moon hence quuxmoon qm question mark date jul earl killian subject dired emacshistory mitmc believe wrote first version dired tmacs basic assumption r mode winning way edit program might win editing ie deleting file directory mm diredfoo put recursive r mode displaying directory foo k command r mode hacked delete line screen also delete file named line nt believe command trying convinced win released rest tmacs think almost everyone response dangerous ie single keystroke could mistakenly delete file several k worked used initial form safety minded person moon perhaps cbf changed save list k file ask confirmation exiting date jul rms mitai richard stallman subject rmail emacshistory mitmc rmail appears started early date jul rms mitai richard stallman subject mode emacshistory mitmc teco mode existed got think certainly time summer started working teco still used somebody printing terminal fixed date jul rms mitai richard stallman subject ej loading emacshistory mitmc seem remember ej antedated emacs least half year remember talking someone eak think convention tmacs loader macro time state teco blockloading offered considerable speed advantage convention oriented toward list macro qregisters r character go put buffer loader macro file processed deleted could handle passing rest next file birth emacs added bunch teco feature make lookup name faster effect removing advantage block loading also making mm command use loader macro desire able use call subroutine meant single macro loading convenient efficient decided change loader macro convention hard decision already put tmacs convention teco order intention many people could build library different way long conformed convention planning make library adhere luckily decided change anyway first made loader macro use new variant command put purpose time command started ignoring case became able abbreviate also made command smart skipping text loader macro contained large number tag tag followed relative index corresponding macro emacs reached sixth present size containing sixth many macro since lot small one written first good already took long since table full tag hack skipping nontag text fast nt buying much first tried renaming macro subroutine would come front mm command next r command looked init file mostly dumped emacs built last subroutine named starting except go qregisters nt need fast look mm therefore name starting soon nt enough either taking forever set default environment looking documentation macro way end would take frantically wrote fo binary search command switched using hack variable named mm replace command invented somebody else ca nt remember think also wrote first mm compile one way tmacs purify string hack used run rmail tmacs really horrified purified string standard tmacs loader format would make loader macro unusable date jul rms mitai subject word abbrevs emacshistory mitmc think word abbrevs started ecc talked either teco feature wanted facilitate writing abbrevs exactly make something happen r something assumed meant word abbrevs enlightened character abbrevs started urging word abbrevs well date jul rms mitai emacshistory mitmc think qregister loading macro one first thing implemented every macro package know macro rmode along think antedated r actually sure needed since offered cosmetic improvement command documentation began handled date jul rms mitai richard stallman subject birth emacs naming emacshistory mitmc name adopted far know nobody good idea name use case dumbstriking much severe usual could think nt know nbe called name e chosen saw e one remaining singleletters left nt traditionally abbreviate anything e emacs followed might confuse stanford people bonus fundamental motivation part another motivation desire use desire emphasize user would using teco work done gls consider large number possible command set suggest many interesting possible command b begin actual work purifier startup although none code survived week might never able start anything left often trouble getting ground really sure gls stopped working emacs think busy classrelated thing expected stay interested first thing done emacs support software purifier loader macro scheme scheme dumping emacs could start fast selfdocumentation finished editing command think helped bring quality selfdocumentation remember ej patched tmacs person heard theory behind emacs come tmacs rather tecmac tecmac come individual command guess x prefix character tecmac also surprised hear macro package nt prefix first rmacro written autofill space example could done wrote implementing redefinable character think rmail important first demonstration reliable system program could written teco first example one invoked running teco typing teco command able document without mentioning teco place end mentioned altmode command first heard tmacs assumed mm command r command found used two separate mechanism amazed making two uniform one primary initial goal going reasonable fashion tmacs explored kludge emacs full kludge inside hidden away inside generate library einit date jul charles frankston subject selfdocumentation tmacs emacshistorectemy really find hard keep mailing list straight tmacs documentation evolved order original mm macro mm info listed macro followed first line explanation mm info followed string argument would print whole doc macro tmacs also started keeping library r command first started called tmacs r command form documentation considered deficiency late tmacs life implemented documentation scheme r key also believe tmacs already pure string following moon advice began documentation doc since would sorted end string file could therefore paged better nt know people remember bad problem memory required editor nt idle experimentation tmacs started hacking pure string remember ai machine believe mm doc printined info r command could made prompt key document take long name command string arguement something note command word macro repeated documentation internally slow especially term paging call mm doc think doc scheme initally used macro long name r mode mm macro evolved use source documentation convention believe rms repsonsible developing point probably gls stayed using tmacs scheme expediency get editor date jul eugene c ciccarelli subject mm info emacshistory mitmc early tmacs mm day selfdocumentation mm command r command mm info would allow different form called mm info mmname looked qreg scanned til found start code mmname printed documentation found think comment right mmname label called mm info believe described mmcommands mm info given several string argument described mm command shortly birth mm info mm binfo appeared would briefly describe first documentation line mm command mentioned string argument date jul charles frankston subject timing ecc mitmc emacshistorians mitmc tecmac people really hacking time came mm remember chronology started hacking mm summer started using around september nt discover r mode couple month nt think tecmac stuff started yet date jul eugene c ciccarelli subject multics line editor terminal emacshistory mitmc couple note concerning terminal program bernie mentioned originally doug well concocted terminal show arpa people possible strippeddown process wake character coming net idea might supervisor kernel process provide echoing similar fnp next bob frankston put couple controlcharacters like sending quit perhaps rubout processing started using across machine cisl mit regular frontend think kept statistic like run time cost memory next think started adding feature make line editor somewhat based heard stanford one using function close teco r mode one acted within line found front end functionally preferable knew multics including telneting used multics hacking luckily hacking night usually terminal nt grossly expensive compared regular process ran cost regualr nt much anything response unbearable user finally prototypehack charlie davis tried twoprocess display editor using terminal partly easy fun hacking partly first multics display editor necessarily use partly see kind problem distributing editing might bring couple capability added terminal primarily ability regular process tell terminal break given character send edited far line also load line buffer given text editing regular user process ran bunch multics teco macro collectively referred perch per character perch would keep track screen perform interline operation loadread terminal line buffer terminal would edit display within one line result looked like raw teco r mode nt unimpressive user except many bug never worked since nt written using really think perch born weekend time date time last summer think latest last fall date jul john l kulp emacshistory mitmc cc henry mitai interesting point history henry lieberman ai hacked original lisp indent macro used tecmac improved somewhat nt know implementation preceeded used even r mode mh init think current generation lisp indenters little resemblence old one partly teco knowing lisp syntax concept back date jul dlw mitai subject name emacs emacshistory mitmc specifically remember xfile change name editor job looked interesting name dragon display remember name e one finger suai one often saw lot people running program named e editor rms told wanted fake everyone running something called e gee mit people running editor name emacs afterthought justify short name e also remember early day mm teco macro regularly used make listing emacs apparently emacs got going good obviated need listing date jul moon mitai subject birth emacs emacshistory mitmc august bunch hacker decided time write new editor using sharablelibrary namedcommands mm technology developed tmacs intended general use tmacs really set used anyone maintainer think every user different set key binding although time use perhaps eight ten people new editor initially called command name could typed ddt supposed take full advantage tv keyboard sensible consistent set command good selfdocumentation faster tecmac intended woo people away tecmac initial work point semiusable system done gls later rms got interested indefatigible fashion put large number feature made teco change greatly increase efficiency flavorfulness editor renamed emacs abbreviated e imitation name stanford editor otherwise resemble date greenberg mitmultics ecc mitmc brief history multics emacs compiled bsg bernie greenberg give presentation sipb lisp course taker edits note dan weinreb ai using emacs becomes convinced way go discussion group multics editor people formed debating whether multics ever could support real time editor debating various degree distribution editing task central system terminal opposing view held elder younger frankston brother becomes lively feature pointing work ciccarelli developed videooriented characteratatime line editor network use multics begin feel way investigate situation construct editor greenberg express view editor tv larry johnson multics communication expert fnpmeister asks demonstration one scheduled pm demonstration emacs held cisl delta data mc system used heavy load baud lack organization lack preparation hardware problem low speed load difficulty contribute almost totally ineffective presentation however impressed c frankston e killian e ciccarelli others participated pm larry johnson impressed say able devise fnp communication processor patch enables characteratatime input multics c frankston witness pm conversation c frankston greenberg mus know implemented flatout pli could even better little consideration modularity extensibility soon lead lisp chosen implementation language pm sipb friday night dinner eaten colleen various party throw around idea right way implement editor multics idea bruce edward recently implemented editor lisp stand important pm c frankston drive edward greenberg brookline heavy snow edward visit greenberg apartment life block log two hour beer tty paper later functional editor lisp exists program e could build split line insert delete character line move pointer display output capability driven call lisp function character reader developed allows e driven reading character r mode tty greenberg take development point evening weinreb studied ciccarelli code ascretains needed read single character multics arpanet version server telnet hacked allow program read single character normal multics process characterinput first time ciccarelli technique involved special process soon version incipient editor exists performs character input network normal fnp access path multics limited using johnson patch cisl machine morning software constructed weekend run cisl development machine printing via debugging function displaying cursor interacting characteratatime via reconstruction johnson patch understand appreciate significance evening display support started dave moon present birth redisplay redisplay designed take advantage explicit line structure maintained editor first support delta data designed terminal support substitutable olin sibert hang cisl night intensive debugging session new redisplay develops support package run display slave terminal twoterminal use debugging feature becomes heavy next week many falsely conclude two terminal necessary use editor mailing list user multics editor formed earl killian killian avid supporter beginning provides many good idea illumination way killian construct greenberg datamedia control package allowing user use editor via feature user telnet use becomes regular people mit begin using editor via arpanet support characteratatime interaction greenberg writes promulgates officially honeywell multics technical bulletin proposing multics emacs call shipped part multics containing scathing denunciation multics communication support existant editor proposing support distribution lisp part deal document distributed throughout multics technical organization rather meeted shriek horror document acclaimed enthusiasm idea shown concerned evening twowindow mode implemented first several hairy feature note feature birth fire killing people lisp process day stabilized richard lamson ipc becomes regular user subject buggy software new feature detailed comment accurate reporting lead rapid development multics change request submitted larry johnson proposing new teletype mode break every character explicit reason support bernie editor proposed experimental feature breakall mode pass change review board dissenting vote issue documentation bill archy york join cisl becomes active editor codeveloper development assistant acquires skill point able write editor extension real time demonstration selfdocumentation package done largely installed pli mode implemented comprising logic par pli statement using algorithm compiler significant series optional package included consolemessage processing automatic declaration package signifies kind feature indicating editor reaching maturity time least dozen terminal supported emacs get production use cisl machine people phoenix play regularly greenberg weinreb design implement youngers zion arpanet protocol variant supdup screen management done user telnet process multics emacs becomes totally effective tv potentially usable terminal enough support breakall mode allow used without patch installed mit multics lamson gary palter use first time via dialup line mit characterresponse mode note excellent performance normal midday load although response excellent resource consumption editor appears large problem must thank richard stallman perpetrating emacs upon world promulgating emacs philosophy significantly separation editing programming language editor earl killian seeing thing every step way guiding john gintell bos hisi allowing work bruce edward day editor caro factus erat dave moon eugene ciccarelli many incisive straightforward comment multics emacs grew misgrew richard lamson gary palter submitting software regularly giving accurate bug report larry johnson fnpmeister inventing implementing breakall mode expressing interest entire issue increasing fortitude jerry stern implementing bill york contributing large amount time improvement editor frequently pointing direction go dan weinreb perpetrator eine help along kind support charles frankston people sipb violent powerful support throughout date jul rms mitai emacshistory mitmc specific people gave idea display editor taken idea always based simply seeing use influenced heavily writing r mode using e sail fact started writing influence general manner operation specific command took first cmm previous r mode implemented think read e manual time look useful command put emacs also wrote info tutorial info somewhat based learned nls documentation got date jul eugene c ciccarelli subject mm r emacshistory mitmc date rms mitai emacshistorians mitmc couple comment origin mm r mode started sept nt redefinable character year statement tecmac defining prefix character must wrong sure whether tecmac even existed r mode reason x would nt work teco knew jumpcache mechanism would screw nt allow eventually made teco smart enough detect used cache particular jump watching emacs lore eagerly ever since inception hoping see sort neat stuff let get going note contribution go emacshistory date jul eugene c ciccarelli subject mm emacshistorians mitmc something early day mm cbf started working summer conjured moby macro stuck qregister think simplest type two character mnemonic extension teco idea suggested cbf thinking multics teco practice emfiles external macro several one segment branch right macro name segment used em macro would name added segment basically wanted call thing name rather one letter well try keep track lot macro think probably solving keeptrack problem time later tecmac people r prefixsolution unaware approach first mm teco problem contend teco nt multiple even virtual buffer yet learned clever trick using z bound changing part buffer also seriously teco would nt correctly execute x q branch variable problem context level would work would push label definition thus get unseen gotag error mm born problem fixed would pull copy buffer knowing search something top like label forget exactly replace actual stringargument label would stick modified version qregister macro since first mm thus saving buffer mmachinations hxs specific restoring calling took time proportional offset editing roundhouse operating system grew number macro grew thing became verrrry slow ml mc started dividing mmmacros two group general one roundhspecific one latter going son n however father outlived son
165,Lobsters,emacs,Emacs editor,racket-mode,http://www.greghendershott.com/2018/10/racket-mode.html,racketmode,racketmode emacs racket cast character melpa crossing chasm historical xrepl today match con eval exit exit mean run file drracket summer two step macro step expander step debugger commit message documentation future submitted approval repl zone syntax highlighting ad hoc indentation directory variable file variable conclusion,even though one timeconsuming project hardly blogged racketmode emacs major mode racket change post giving overview racketmode work well look might grow someday cast character racketmode consists two main part mix emacs lisp racket code delivered emacs package eg via melpa racket file come along crossing chasm emacs front end client sends command request racket back end server sends command response exactly happens aspect racketmode changed year historical earliest version racketmode thin wrapper around xrepl let enter command prefixed like enter filename racketmode would mostly comintsendstring command invisibly type buffer behalf user program read readline send command back end user program get later command response became important example racketmode racketdescribe command return html racket documentation shown emacs buffer well occasionally html might contain something like ndiv breaking code trying read response next repl prompt long story short like edge case love multiplexing textual command io user program io approach easy way start casually actually easier longterm move command io outofband possible suck demux today early summer changed command request response work racket back end start tcp command server emacs front end connects although connection method tcp protocol http instead command server command request nonce command param thread spun handle request longrunning command block others nonce supplied request returned response client match response command response either nonce ok sexp nonce error message code snippet give rough sense command match sexpr run mem pp ctx args dbg run mem pp ctx args dbg con path top syms syms def str finddefinition str mod sym findmodule sym maybemod describe str describe str doc str doc str type v type v macrostepper str intobase macrostepper str intobase macrosteppernext macrosteppernext requirestidy reqs requirestidy reqs requirestrim pathstr reqs requirestrim pathstr reqs requiresbase pathstr reqs requiresbase pathstr reqs findcollection str findcollection str getprofile getprofile getuncovered getuncovered path checksyntax pathstr checksyntax pathstr eval v evalcommand v replsubmit str eos replsubmit submitpred str eos debugeval src l c p code debugeval src l c p code debugresume v debugresume v debugdisable debugdisable exit exit approach also make reasonably simple emacs lisp front end issue command asynchronously fact lowestlevel command function async defvar racket cmdnonce callback makehashtable test eq hash nonce callback function defvar racket cmdnonce increment command request send defun racket cmdasyncraw commandsexpr optional callback send commandsexpr return later call callback response sexp callback supplied nil default ignore racket replensurebufferandprocess nil racket cmdconnectfinish clincf racket cmdnonce callback equal callback ignore puthash racket cmdnonce callback racket cmdnonce callback processsendstring racket cmdproc format sn con racket cmdnonce commandsexpr code need examine error response use simplified wrapper defun racket cmdasync commandsexpr optional callback probably want use instead racket cmdasyncraw callback called ok response ok v unwrapped v error response handled let buf currentbuffer racket cmdasyncraw commandsexpr callback lambda response pcase response ok v withcurrentbuffer buf funcall callback v error message v message unknown command response v ignore code need wait synchronously response use another wrapper defun racket cmdawait commandsexpr send commandsexpr await return ok response value raise error let awaiting racketreplawaiting response awaiting racket cmdasyncraw commandsexpr lambda v setq response v withtimeout racketcommandtimeout error racketcommand process timeout eq response awaiting acceptprocessoutput nil pcase response ok v v error error v error unknown command response v word asynchronous baseline synchronous special case callback setqs response main emacs thread poll mean run file main command run cause run specific rkt file run mean something similar drracket dynamicrequire relative module path use module namespace inside module see modulelevel definition even provide readevalprintloop repl see racketreplmode buffer importantly run us fresh custodian namespace therefore run discard change made repl reset namespace corresponding rkt file word single source truth source file one handy nuance run inside submodule depth enter submodule example put point within module test form cc cc run test repl inside test submodule explore experiment run main submodule course many wrinkle case instrument module support feature like profiling test coverage step debugging look run configureruntimes getinfos supplied lang warn lang supply topinteraction load racketgui lazily way get pointless gui frame window working textual program maybe set custom print handler use prettyprint file contains syntax error try distill skeleton thing create runtime modulelevel binding ie requires defines think replacing define id rh define id void way get namespace definition identifier available thing like autocomplete summer two step summer added couple feature theme stepping macro step expander new racketsteppermode present consistent diff u format ui wholefile expansion potentially take many second example good ability command response come asynchronous callback emacs frozen waiting step debugger also new interactive step debugger repeat commit message documentation mention commit message say started work several year ago decided merge new async command protocol one factor made easier also labeling experimental le worried turn much hassle support longterm curious see much people actually use found want interactive debugger much le often writing mostly functional racket writing imperative cc racket step debugger feel like nicetohave musthave even working emacs lisp racketmode sometimes found edebug handy see future modulo bug ux refinement say racketmode reached point pretty good langracketmode pretty good working sexpression langs like racket racketbase typedracket however attempt racketisaprogramminglanguageprogramminglanguagemode like drracket maybe head next aware three main area one done submitted approval repl zone lang may supply drracket submitpredicate say whether chunk text complete expression word user hit enter repl sent evaluation simply insert newline wait supply couple month ago racketmode actually look use syntax highlighting fontlock emacs call process changing appearance text syntax highlighting programming mode mostly done via regular expression although arbitrary function supplied fancier matching altering traditionally fontlock distinguishes language element keywords v builtins come racket sort weird distinction handled ad hoc drracket take different approach lang may supply colorlexer clearly correct way yet one great way make emacs feel sluggish fontlock poorly todate worried performance trying use colorlexers color text interface perform marshaled tcp connection force racketmode use racketgui always instead user program need indentation similarly racketmode could someday use langsupplied drracket indentation similarly naive indentation bring emacs knee currently racketmode indent using emacs lisp mostly hardcoded special handling known popular langs say mostly hardcoded extensible tradition lispmode schememode racketmode look racketindentfunction property emacs lisp symbol name racket macro racketmode set add emacs init file put racketmacroname racketindentfunction indentvalue also using emacs directory variable rkt file using emacs file variable example latter setting indentation sql package syntax local variable eval put insert racketindentfunction defun eval put update racketindentfunction defun eval put delete racketindentfunction defun eval put select racketindentfunction defun end although work ideal would nice racketmode use langsupplied drracket indentation however even seem enough fullblown lang really library module like sql ought able specify indent special syntax yet know good story rich indentation complete performant conclusion hopefully give overview racketmode work well currently attempt
166,Lobsters,emacs,Emacs editor,Evolution of Emacs Lisp,https://www.iro.umontreal.ca/~monnier/hopl-4-emacs-lisp.pdf,evolution emacs lisp,,obj linearized l h e n endobj xref n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n n trailer info r root r size prev id startxref eof obj metadata r outline r page r type catalog endobj obj filter flatedecode length stream g n endstream endobj obj annots r r r r content r r r mediabox parent r resource extgstate r font r procset pdf text imageb imagec imagei xobject r type page endobj obj bbox filter flatedecode formtype matrix resource font r procset pdf text imagec xobject r subtype form type xobject length stream x endobj obj basefont aljuuilinlibertinet encoding r firstchar fontdescriptor r lastchar subtype type font width r endobj obj bitspercomponent colorspace devicergb filter flatedecode height smask r subtype image type xobject width length stream zjz u mfp l e oz q k q u f ļ q c ļ u ۺ b vww mmqa x 숃 ѯ x hz qq
168,Lobsters,emacs,Emacs editor,Remacs continues to improve,http://db48x.net/rust-remacs-2018/,remacs continues improve,porting lisp function simple implementation macro sean perry brotzeit harry fei automation via bindgen bindgen porting lisp variable want help chat room,porting lisp function doubtless know emacs embedded lisp environment provides large number intersting lisp function user call many implemented c speed rewriting rust first thing look c implementation atan function take optional second argument make interesting complicated mathematical bit hand handled standard library allows u focus porting process without getting distracted math lisp value given argument tagged pointer case pointer double code check tag follow pointer retrieve real value note code invokes c macro called defun reduces boilerplate macro declares static varable called satan hold metadata lisp compiler need order successfully call function docstring pointer fatan function c implementation named defun atan fatan satan doc return inverse tangent argument one argument given return inverse tangent two argument x given return inverse tangent divided x ie angle radian vector x xaxis lispobject lispobject x double extractfloat nilp x atan else double extractfloat x return makefloat extractfloat check tag signalling invalid argument error tag double return actual value nilp check see tag indicates null value indicating user nt supply second argument next take look current rust implementation must also take optional argument also invokes rust macro reduce boilerplate declaring static data function however also take care type conversion check need order handle argument return value return inverse tangent argument one argument given return inverse tangent two argument x given return inverse tangent divided x ie angle radian vector x xaxis lispfn min pub fn atan emacsdouble x option emacsdouble emacsdouble match x none yatan x x see nt check see argument correct type code generated lispfn macro u also asked second argument option emacsdouble rust type value either valid double nt specified use match statement handle case code much better hard believe simple implementation macro call argument return value compiler rest dispatch method call correct implementation far ported individual lisp function c rust ported last year third total see graph actually completely ported several whole c file particular order sean perry finished srcfloatfnsc brotzeit cleared srcmarkerc emptied srccmdsc harry fei obliterated srcdecompressc automation via bindgen part remacs written rust bulk still c rust c code must able call function written language rust make fairly painless excellent support c ffi however manually translating function structure declaration rust quite painful worse tiny mistake come back haunt later crash weird bug nt make sense real problem several itermittant bug introduced complicated struct incorrectly translated rust part code stepping fixed problem using bindgen generate binding u aside saving u lot time bindgen also give u relatively nice way handle c enums union bitfields variablelength structure emacs frequently us great help first allow show fairly important c structure called lispsymbol struct hold information emacs know lisp symbol got number bit field well internal union note elided comment declaration struct lispsymbol boolbf gcmarkbit enumbf symbolredirect redirect enumbf symboltrappedwrite trappedwrite unsigned interned boolbf declaredspecial boolbf pinned lispobject name union lispobject value struct lispsymbol alias struct lispbufferlocalvalue blv union lispfwd fwd val lispobject function lispobject plist struct lispsymbol next enumbf boolbf c preprocessor hack allow code compiled even compiler nt support enums bools bitfield type bindgen generates following rust struct repr c pub struct lispsymbol pub bindgenbitfieldunit pub name lispobject pub val pub function lispobject pub plist lispobject pub next mut lispsymbol repr c pub union pub value lispobject pub alias mut lispsymbol pub blv mut lispbufferlocalvalue pub fwd mut lispfwd bindgenunionalign see bitfields become rather opaque longer listed struct however still see occupy two byte struct instead bindgen creates getter setter method add impl lispsymbol show excerpt impl lispsymbol inline pub fn gcmarkbit self boolbf unsafe std mem transmute inline pub fn setgcmarkbit mut self val boolbf unsafe let val std mem transmute val val union also little verbose put anonymously rest struct rust requires proper name bindgen generated one great suffice porting lisp variable may also aware c code must quickly frequently access current value large number lisp variable make possible c code store value global variable yes lot global variable fact nt file globals accessible one translation unit static variable accessible across whole program started porting rust well defvarlisp postselfinserthook vpostselfinserthook doc hook run end selfinsertcommand run inserting character vpostselfinserthook qnil like defun defvarlisp take lisp name c name c name becomes name global variable lisp name get used lisp source code setting default value variable happens separate statement fine hook run end selfinsertcommand run inserting character defvarlisp vpostselfinserthook postselfinserthook qnil rust version must still take name could simplified wrote macro using procedural macro also take default value docstring becomes comment rust tooling recognize might interested implemented well define defvarlisp lname vname doc static struct lispobjfwd ofwd defvarlisp ofwd lname globalsf vname false c macro complicated two somewhat subtle point first creates uninitialized static variable called ofwd type lispobjfwd hold variable value lispobject call defvarlisp function initialize field struct also register variable lisp runtime global environment making accessible lisp code first subtle point every invocation marco us variable name ofwd call macro inside scope would exact static variable instead macro body wrapped inside false loop one separate little scope live subtlty lispobjfwd struct actually pointer value still allocate storage value somewhere take address field something called globals real storage location globals object big global struct hold global variable one day emacs really multithreaded one per thread lot rest code work macroexport macrorules defvarlisp fieldname ident lispname expr value expr allow unusedunsafe unsafe allow consterr static mut ofwd hack hack data lispobjfwd unsafe hack hack uninitialized remacssys defvarlisp ofwdgetmut concat lispname asptr const mut remacssys globals fieldname remacssys globals fieldname value rust version macro rather longer primarily take lot typing get proper uninitialized value rust program would argue typing bad thing much unsafe operation basically promising precisely know value uninitialized completely correctly initialized end unsafe block call defvarlisp function value lispobjfwd struct get initialized registered exactly way c code take care ensure lisp name variable nullterminated string though want help know rust c know one want learn could lot worse lend hand anything read interesting read far assume case would love help like talk anyone involved project join u chat room many u hang
169,Lobsters,emacs,Emacs editor,Specific Ways to Improve Your Productivity With Emacs (2005),https://sites.google.com/site/steveyegge2/effective-emacs,specific way improve productivity emacs,specific way improve productivity emacs item discussion described url item item prefer backwardkillword backspace item item dialog box root evil buffer rescue emacs problem scrollbar optional keyboard win navigation mouse use case region selection menu lose em item mastering regular expression item keyboard macro transpose function avant stellar,specific way improve productivity emacs emacs world best text editor best editing program source best kind textediting mastering emacs make effective writing editing email documentation draft blog html page xml file virtually everything else requires typing tip little document geared towards emacs powerusers familiar basic launching editing emacs already know essential copying stuff emacs file debugging thing finding friendly emacs wizard something go wrong tip customizations emacs change desktop environment make work seamlessly emacs key understanding emacs efficiency includes economy motion trained musician tell economy motion critical becoming worldclass virtuoso unnecessary motion wasted energy yield sloppy result using mouse almost always worst possible violation economy motion pick hand fumble around mouse clumsy instrument emacs guru consider cache miss resort using compared emacs wizard graphicalide user equivalent amateur musician pawing instrument sort desperation ide blinking light pretty dialog ca nt interact properly see item give newbie nice comfortable sense control control extremely crude serious programmer prefer something give power ides also offer refactoring tool rage help automatically fix screwedup code fine far go tell secret refactoring tool nt understand english wo nt help one bit something tool nt designed handle refactoring tool cookiecutter solution emacs offer level finegrained control environment make equal editing challenge however often point seen believed even believe need make serious lifelong commitment emacs order master mastering involves learning lisp customizing emacs finest degree imaginable simply serf increase hunger control automation even mastered emacs never really finished extending editor faint heart blog targeted people already made commitment want improve mastery elegant timeless piece software rest think eclipse finished launching get back work window mac keyboard ctrl key awkwardly located far lowerleft position keyboard ctrl key critical using emacs time never become emacs virtuoso unless move easier position position home row cap lock best choice location control key unix workstation keyboard precisely reason window xp requires registry hacking start menu choose run enter regedit leftside tree view click hkeylocalmachinesystemcurrentcontrolsetcontrolkeyboard layout click keyboardlayout entry give focus make sure focus one child edit menu choose new binary value name scancode map show type regbinary select new scancode map entry created edit menu whose content changed choose modify binary data dialog box called edit binary value enter following data select ok close dialog exit registry editor cap ctrl key swapped soon log back may require reboot linux xwindows use xmodmap utility create file home directory called xmodmap nt already exist put following line swap capslock controll remove lock capslock remove control controll keysym controll capslock keysym capslock controll add lock capslock add control controll save add line xmodmap xmodmap bashprofile mac o x panther jaguar need install modified keyboard driver little scary seems work discussion driver alternately using mac laptop appears xml file edit root described url information system altx one frequently typed emacs key combo involves scrunching left hand anything going thousand time streamlined want able start mx sequence ctrl key completed item another important reason get habit using ctrl sequence alt key unreliable nonstandard across platform particular logged remote host via telnet ssh altx may may work depending system type terminal configuration rather mess headache learning configure every system work know alt key easier use key sequence always work key sequence use ctrlx ctrlm note invoke sequence modifier key hold modifier key press key key sequence invoking mx involves pressing holding ctrl typing x typing enable ctrlx ctrlm sequence add following line emacs file globalsetkey cxcm executeextendedcommand globalsetkey cccm executeextendedcommand add second line ctrlc ctrlm also invoke make key sequence even forgiving miss ctrlx hit ctrlc accidentally still work neither key sequence bound default emacs biffing useful shortcut practice key sequence get used almost never need use altx still use alt key command cover later incidentally want finetune tip extraordinary level probably nt want use ringfinger typing xkey hit ctrlx use left index finger since used way probably better using left middle finger reason hand nt technically home row left pinkie jammed capslock key turned ctrl point use whatever requires least amount stretching followed least amount finger motion experiment find comfortable item prefer backwardkillword backspace emacs wizard try avoid hitting backspace key remote enough homerow annoying make typing mistake time type faster wpm economical kill entire word retype painstakingly backspace error add emacs file globalsetkey cw backwardkillword globalsetkey cxck killregion globalsetkey ccck killregion note ctrlw already bound killregion important command need rebind something else killregion chose ctrlx ctrlk sloppinessforgiving companion ctrlc ctrlk primarily way old company filled wise emacs wizard taught lot know rebinding ctrlx ctrlk mean longer available editkbdmacro use infrequently enough something miss shortcut added benefit many unix command shell provide emacslike commandline editing key ctrlw usually default binding backwardkillword usage consistent shell faster type valuable tip becomes gradually develop feel fastest way back correct various kind typing mistake general finger decide day mistyped character two fairly long word cursor still located right typo use backspace key typo somewhere last character usually backwardkillword kill backward typo retype word typo back still line use altb skip cursor back word typo ctrlb move within word get typo mistake away use fast navigation get item cover least part technique one thing need careful use ctrlw backwardkillword ctrlw hardwired kill window many window application pas go collect browser window save content form field mean typing something html form field accidentally make typo hit ctrlw kapow work lost instantly good ole microsoft window know way override horrid behavior know please tell moving cursor around efficiently one key becoming emacs wizard ide user spend time fumbling around mouse would nt dream way nt realize inefficient motion hand master emacs becomes powerful efficient textediting tool planet large part allows almost everything without using mouse emacs wizard always emacs session tall possible filling screen vertically vertical screen space premium viewing document view fair number line text screen using incremental search often much faster way precisely positioning cursor get habit using ctrlr isearchbackward ctrls isearchforward moving around document whenever need jump cursor backward forward line see target location using isearch effectively nt necessarily need search exact word want put cursor let eye defocus slightly take whole paragraph region around target point choose word look reasonably unique easy type isearch navigate may need hit ctrlr ctrls repeatedly anchor word turn unique emacs highlight match couple ctrlg search choose another anchor word difficult overemphasize powerful technique mastered mastering simply requires repeatedly finger automatically emacs eventually becomes like extension body performing hundred different keystroke minitechniques like one without thinking comparable hundred subtle technique acquire driving car well one powerful thing emacs ability swiftly generate new buffer nt associated file process get used using technique sorely miss functionality editor application create temp buffer switch ctrlx b invokes command switchtobuffer type adsflj whatever come drumming keyboard instantly got scratchpad take note dump temporary result use way convenient problem hand plan keeping multiple temp buffer around might give memorable name foo bar baz buh want see temp buffer sidebyside another buffer split screen horizontally vertically see item temp buffer nt associated file kill quickly created using ctrlx k killbuffer command decide want save content temp buffer somewhere switch buffer ctrlx ctrlw invoke writefile command prompt filename saving kill buffer safely revisit file content later frequently want editing task multiple window open emacs us slightly different terminology application buffer logical space contains text possibly tied file process window visible region screen displaying exactly one buffer part frame call window oslingo standalone window title bar important command master ctrlx splitwindowvertically split current window two equalheight window showing buffer change one show something else ctrlx splitwindowhorizontally people nt use often occasionally useful split window leftside rightside ctrlx balancewindows make visible window approximately equal height useful done ctrlx twice row two window one window ctrlx make height ctrlx otherwindow move cursor next window window list usually mean moving window current one wrapping back top ctrlx deleteotherwindows make currently focused window fill entire frame others go away note buffer visiting stay around bufferlist always perfectly safe execute command ctrlx ctrlb listbuffers show list buffer open nicely formatted buffer called buffer list buffer mode many convenience key manipulating buffer list instance typing cursor one entry flag buffer deletion x kill buffer use mx describebindings view buffermenu key binding dialog box root evil emacs incredibly powerful editor design choice particular really stand biggest individual contributor one fact emacs dialog box actually requirement order give emacs full functionality running textonly terminal window happy accident also one key feature help make emacs insanely powerful dialog box suck starter always focus issue often cause poorlydesigned application lock fail refresh dialog open dialog box never seem play along customizations video mode example set dualmonitor display using card application dialog window tend pop wrong window making whole experience really annoying pain as dialog sometimes come unpredictable place even singlemonitor machine even welldesigned application like microsoft office suite modal dialog still wind buried behind bunch window screen make application seem like totally unresponsive find rogue dialog bring front strange reason dialog box often nonresizable opposite application window almost always resizable app designer usually take great pain make ui rearrange fill space nicely resize window dialog default seems nonresizable possibly os dialog screwedup hack added long window manager designed without dialog mind guess know hell even mess java swing nt get started button dialog box gui least year people still ca nt agree standard set button even standard place put button dialog put title bar bottom right side rarely clear happen use window control title bar close dialog bypassing button choice whole experience giant crap sandwich everyone know intuitively everyone assumes thing problem dialog box go even deeper focus sizing positioning problem dialog never ever full peer rest application ui define keyboard macro emacs app excel word wo nt work dialog box dialog scrollable widget option navigating using scrollbar illustrate fire internet explorer choose internet option tool menu go advanced tab pathetic global customization option ie want find particular option scroll slowly looking ca nt use editfind dialog course modal dialog course also nonresizable dialog like buffer rescue emacs output go buffer buffer firstclass citizen favorite navigation shortcut available buffer including isearch select copy text buffer thing modal buffer keep output around long like continuing work window nt even visible dialog output stay buffer list dismiss nothing else quite like emacs buffer experience applicationdom realize consistent powerful model application become slightly distasteful know ui getting way learn master buffer window sling around ease way emacs wizardhood nt need menu bar crutch placed disoriented newbie also nt need toolbar big happy icon need scrollbar thing loser taking precious screen realestate turn following code emacs file fboundp scrollbarmode scrollbarmode fboundp toolbarmode toolbarmode fboundp menubarmode menubarmode wo nt miss cover find way around next tip note added jan recently saw comment person hated entire essay tip person expressed great deal disgruntlement evidently quite attached mouse menu took affront called disoriented newbie person went claim using mouse proven faster countless study figure elaborate bit remainder tip new thanks disgruntled reader blog first observe often wish emacs richer rendering engine enabling gui graphic par desktop application may never happen blogrant emacs problem talk bit love see bring evidence thoughtless antigui person scrollbar optional usually turn scrollbar emacs keystroke achieve effect however scrollbars advantage providing analog feedback far buffer long digital feedback provided indicator status area nt easy read countless study proven u navy us analog gauge reactor plant instance easy glance digital ie numeric gauge misread real problem scrollbars comfortable aware tempt reach mouse certain operation eg jumping beginning end buffer much faster use keyboard user study necessary justify claim either simple timing experiment convince even skeptical reader keyboard win navigation let say want put row hyphen beginning end long buffer currently middle buffer slightly contrived done putting together cut excerpt containing buffer content using keyboard done second ready move next task key sequence type cx cu ret cx e cu key press simply way could reliably second mouse since make complete roundtrips mouse grab scroll button aka thumb elevator drag top bottom return keyboard type text quick trial took close second scrolling top move cursor first character also carefully position cursor sure could practice bit maybe get second bother going exact operation frequently write macro mouse use case region selection clearly operation faster mouse interacting window system outside emacs usually faster mouse interacting application nt emacslike keyboard navigation inside emacs think one thing faster mouse region selection particularly selecting rectangle sometimes region selection keyboard faster instance setting mark holding ctrln start selecting line ctrlf grow selection character time keyboard repeat rate set hardware feel annoyingly slow see line text buffer window display selecting line keyboard assuming starting point somewhere middle take second selecting mouse returning home row take second need select line visible area mouse usually nt worth however need select region taller window size dragselecting need select region whose beginning end column fall midline somewhere mouse reliably fast approach use happily using mouse selection nt turning ui though slightly related tip point actually timing experiment like opinion gui emacs backed year kind experimentation recommending turn menu really menu lose em menu fine exploration learning emacs capability unfortunately easily lull thinking cover everything emacs however many emacs package nt menu support supermeticulous package designer go effort adding menu support using menu browsing exploring emacs missing lot functionality another problem menu related rant dialog earlier nt scale well want provide user choice putting menu tax windowing system limit ability emacs buffer trivial give lot realestate nice layout grouping choice type mx listcolorsdisplay mx listfacesdisplay see example mean another huge problem menu searchable nt autocompletion easily find digging way submenu heirarchy thinking getting close actually barking wrong tree nowhere near flexible exploration mechanism searchable help every bit true microsoft application emacs finally memorized menu action always go back menu possibly submenu perform often action time wasted compared using keyboard shortcut think emacs menu good nt show everything emacs nt suggest alternative ca nt find want capable scaling thousand choice good generalpurpose ui mechanism compared something like tree view slow access even know use short turn menu big shiny button well gosh anything important enough button important enough fast keyboard shortcut find keyboard shortcut defined current buffer type mx describebindings show list key command mapped move cursor one command list hit enter show help command find particular key use mx describekey type key sequence interested go directly help key key currently bound command interested finding command guess name nt sure exactly called use mx apropos followed regular expression see item use matching command name emacs command well function variable property list kept global table searched mx apropos instance looking function sends buffer way back list could type mx aproposcommand buffer show available command word buffer command name near top command burybuffer whose documentation say burybuffer mx burybuffer ret command put buffer end list buffer et voila command looking easily winnow search large list specifying restrictive regexp perhaps important help function mx info brings emacs interactive menudriven info engine learn use info thousand page documentation hyperlinked custom way predates web unfortunately much easier navigate say man page mastered navigation key info faster navigating html help browser even local static file part info ability perform search across multiple info file part emacs simply better navigation capability web browser best way get friedl book mastering regular expression worth every programmer copy matter language editor using emacs regular expression idiosyncracies everyone dislike insurmountable learned open new horizon editing power two important regexprelated command isearchforwardregexp isearchbackwardregexp default bound esc cr esc c respectively key lame though sequence requires hitting actual escape key lame altctrls compaq machine invisible emacs brings system diagnostics dialog isearch regexp command bound altr alt since use much alt nt normally bound default emacs binding altr command movetowindowline wo nt need use item moving around within window mode insist rebinding altr alt annoying bunch permode hack rebind nt mode covered someone suggest way bind altr alt way ca nt overridden mode please let know muchly appreciative next two important regexprelated command replaceregexp queryreplaceregexp function identically prompting regular expression replacement string queryreplaceregexp prompt type n possible replacement use queryreplaceregexp frequently alias defalias qrr queryreplaceregexp way type mx qrr invoke function useful command take regexps mx listmatchinglines show line buffer match regexp mx apropos show command whose name match given regexp frequently asked question emacs regexps insert newline regexp replacement string hitting enter key simply tell command done entering regexp start replacement good reason preferring queryreplaceregexp replaceregexp confident regexps right first try still yet answer need insert j character emacs us represent newlines function command point regexp replacement need insert newline hit ctrlq followed ctrlj ctrlq emacs quote command rather executing following keystroke emacs insert key current buffer minibuffer useful thing know emacs regular expression need doubleescape regexp metacharacters string elisp code singleescape entering regexps minibuffer emacs code much matching parens emacs regexps reverse paren character metacharacter emacs regexp match actual parens create matching group replacement string use etc inserting matchgroups regexp enter regexp nt work undo result command actually changed anything type command prompt use arrow key scroll find regexp replacement string modify place save lot typing frustration yank text middle regexp typing regexp command isearch regexp command yank weird thing love know fix mastering regular expression command use one important component becoming emacs wizard emacs provides many small useful command surgery text add laserlike efficiency starter nt tempted rebind ctrlk function kill whole line including newline know way killline work editor clumsy coarse compared way killline work default default behavior kill text end line nt kill newline give finergrained control lead efficient text surgery whole trust emacs user use application support fatfingered killwholeline version plenty opportunity use approach reason default way keyboard macro believe state without slightest hint exaggeration emacs keyboard macro coolest thing entire universe sense finegrained specialpurpose get create fly solve specific editing problem whenever find need make specific patterned change say time create keyboard macro really easy first help trial run macro done put cursor beginning first place change use ctrlx start recording macro make edits make sure put cursor corresponding place next line several line appropriate macro execute exactly pattern every time stop recording type ctrlx invoke macro use ctrlx e calllastkbdmacro something art define robust macro learn use anchor like beginningofline endof line make sure macro stable point adding another action incrementalsearch useful skipping forward next place invoke macro use isearch within macro find place start invocation macro later automatically perform search time convenient ok make minor navigational mistake recording macro move cursor back keep recording mistake replayed every time execute macro happen fast unlikely notice trick getting good macro persistent make sure get macro working nt give even mean spending time fiddling macro making edits manually next time around easier eventually become second nature keyboard macro one powerful feature emacs make life much easier one last tip keyboard macro typically play dozen even hundred time file across multiple file bind calllastkbdmacro single keystroke key usually babysitting job pressing key watching change make ensure nt hork something unintentionally fine bound faraway key like set like globalsetkey calllastkbdmacro transpose function finally find transpose command surprisingly useful get used even though look like gimmick probably useful transposewords amazed often find using command bound altt two us swapping two adjacent word dragging single word forward backward sentence transposewords function aware modespecific syntax word boundary instance putting cursor two word hitting altt result transpose word across hyphen html tag basically punctuation pretty handy feature need transpose word eg dog food leftmost word swap rightmost assuming cursor somewhere beginning first word end second one resulting food dog cursor move still right word moved right apply repeatedly word move along sentence right nt think builtin way make dragwordleft would easy write short function corresponding eclipse plugin would line code source file would take nine day write debug also transpose char line sentence paragraph useful perform editing operation raw text even source code experiment try remember eventually also become secondnature point collected documented tip point scott meyers eat heart made valiant effort one sitting gave changed blog heading specific way specific way least entry one sitting little hour eclipse user would spent much time digging manual looking refactoring tool write blog fat chance upcoming tip come mind particularly useful fillparagraph altp intelligently linewraps text absolute must work inside sourcecode comment gnuserv automatically open certain document type including view source browser emacs mx dired powerful way manage file directory thing tool least aware including renaming arbitrary group file one regexp another whitespacemanipulation command cx co deleteblanklines deletetrailingwhitespace tabify untabify indentregion nxmlmode way fly editing xml authored xml guru james clark knock sock idebased xml editor today picturemode best way draw ascii art useful surprising number situation minibuffer management mastering recursive edits learning abort various situation command completion commandentry trickery effortless navigation rebind key move cursor direction char word holding alt pressing various letter key region management choosing nondisgusting color highlighted region covering regionrelated command rectangle command yet another incredibly important set related command analogue editor wonder lived without emacs shell tip trick getting bash command shell running emacs subprocess alignregexp new favorite command learned recently use almost every day frame initialization put emacs exactly want every time start autodetecting screen dimension computing using goal column thing every emacs poweruser know setting fill column get fillregion fillparagraph optimizing o setting speeding keyboard repeat rate choosing ideal emacs font browsing editing archive tar gzip zip jar etc people idea feature exists nothing short amazing advanced keybinding learn syntax binding function key homeend oddball key learn make keybindings local particular buffer mode mastering kill ring including using derek upham fancy new mode viewing content mastering info customizing info dir finding adding new info file advanced navigation bookmarking using mx customize learn beast work use avoid needed utility apps mx calendar mx calc others list go ah well get around someday wrap heading bed published jan last update mar comment random comment yank isearch prompt use instead cy emacs info node incremental search talk rebinding cy cw etc isearch prompt repeat execution last kbd macro hitting cxe run keep hitting e key repeated execution zaptochar mz incredibly useful need change mydatafilehandler mystreamhandler point first char change simple mz e zap datafile part type replacement orthogonal backwardkillword bound cbackspace since work window browser window well everything else feel needed optimal mostly depends point already posted ami f january pm swap capslock control could get keyboard already swapped let swap hardware happy hacking keyboard example former like avant stellar keyboard latter binding altr alt try setting minor mode definition want stick keymap front minormodemapalist tip use iswitchb mode faster switching buffer provides feedback use mode sure download recent version installed emacs integration selection written work well xterm sucky default policy mean work badly modern apps badly slow network connection say vpn home written new set command make emacs talk clipboard make life much easier posted derek u january pm swapping controlcaplock key done hkeycurrentuserkeyboard layout instead hkeylocalmachine posted chris w january disagree agressive rebinding key used rebind almost emacs key would familiar window user ctrlc copy ctrlv paste etc however found loss tried using neighbor computer default emacs installed always learn default emacs keybindings first overwrite find appropriate example rebound ctrlj gotoline macro default ctrlj enters newline bound anything default made bound compile macro keybinding actually come visual studio extent keybindings needuse use noncustomized emacs still get work done cheer brian posted brian january pm pursue aggressive editor keyboard customizations people stick standard bogus argument opinion firstly often really use terminal even often write scad code usually couple quick edits optimize time setup secondly annoy enough care always load rc file remotely use vim vimrc hardlinked workplace directory say vim u netericwworkplacevimrc really need magic certain done emacs customization one main selling point powerful editor wrist two valuable asset developer nt understand people eschew customization fear small percentage time wo nt posted eric w january pm brian afraid eric one friend nonstandard keyboard case avoid repetitivestress injury ca nt type workstation little secret though work like charm say uh type ok much secret gotten everyone customizes environment sdes use font small actually ca nt read use custom window manager noncua hotkeys behavior people use window linux macos different unix shell different default keybindings alias tell everyone use plainvanilla window installation customizations effectively arguing reduce least common denominator productivity argument debunked domain eg make people good vision wear blurinducing glass nobody feel like natural disadvantage nt hold water either welcome use default binding course would nt get bandwagon try discourage people getting better job slippery slope think want avoid anyway issue laptop wireless ivpns even bring environment issue anymore posted steve yegge january pm want know tip allude number tune next time section updownleftright browsing trying train use cn cp cf cb friend awkward nt getting easier also plllleeeeasssseee see emacs file posted charles g february march luke gorrie wrote howdy know bad form comment blog entry without read thoroughly take chance eternal salavation stake use ch backspace emacs move helpcommand elsewhere globalsetkey ch backwarddeletecharuntabify definekey isearchmodemap ch isearchdeletechar globalsetkey hyper h helpcommand also work shell along cm cj ci etc offered consideration march anupam kapoor wrote hi regarding tip imho better disable via xresources rather loading making invisible haveshown via better turn emacs already loaded emacsmenubar emacstoolbar scrollbars fur emacsverticalscrollbars kind regardsanupam march scott anderson wrote steve great articlereading section became amused person claimed countless study whatever proven mouse wasfasteri guessing never studied goms method decomposinguis basic operation performing objectivecomplexity time analysisa quick typist hit key per second per key touse mouse four movement involved move keyboardto mouse move cursor location perform operation atthe location move hand back keyboardmoving hand take moving mouse cursor screentakes without even anything used second amouse click take second dragging something youmeasure click drag release adding toanother secondsso let say want highlight line copy mouse move move cursor first depress drag highlight optimistic depending good finicky target like highlighting release move copy altw ctrlc whatever count control key separate keypress second performkb scenario best case already beginning mark ctrlspace endofline ctrle second perform nearly time fastkb scenario worst case requires navigation line linestarts reading move start line ctrlr readi ctrlr mark ctrlspace endofline ctrle still fasteras turn thing mouse really good issomething involving gross motor movement like moving window orthe like unless crappy typistanyway good article looking forward reading rest ofthemregards scott
170,Lobsters,emacs,Emacs editor,rmsbolt - A godbolt embedded in Emacs,https://gitlab.com/jgkamat/rmsbolt,rmsbolt godbolt embedded emacs,,supercharged godbolt embedded emacs read
171,Lobsters,emacs,Emacs editor,Emacs and Pairs,https://ebzzry.io/en/emacs-pairs,emacs pair,emacs pair table content introduction installation configuration usage point basic navigation start end traversing list block movement toplevelish traversal freeform movement manipulation wrapping unwrapping slurp barf swapping killing key earlier closing remark matus goljer andreas sahlbach,emacs pair august last updated august white noise beat within white darkness rhythm life pulse never truly left stage proxy ergo proxy table contentsintroductionin article exclusively talk package wish used earlier presuming use yet new read along may good refreshersmartparens one package drastically improves change one us emacs like cybernetic make jump higher punch hardertake note though name misnomer handle parenthesis handle anything pair performs function stellarlyinstallationinstalling smartparens straightforward mx packageinstall ret smartparens retconfigurationlet enable smartparens startup hook major hook usepackage smartparensconfig ensure smartparens config progn showsmartparensglobalmode addhook progmodehook turnonsmartparensstrictmode addhook markdownmodehook turnonsmartparensstrictmode usagemanaging paired character like parenthesis brace bracket quotation mark angle bracket conceivable pairable character always pain package solve problem partially however still miss several pointsin code snippet symbol used represent point basicsin smartparens input pairable character defn foo matching pair get inserted point positioned inside pair defn foo navigationstarts endsif expression let x foo bar baz blah want move point start string let x foo bar baz blah execute spbeginningofsexp bound cmaconversely move point end expression let x foo bar baz blah execute spendofsexp bound cmetraversing listsif expression defun formatdate format insert date format specification using specific locale let systemtimelocale insert formattimestring format want move point insert defun formatdate format insert date format specification using specific locale let systemtimelocale insert formattimestring format execute spdownsexp bound cdownif expression str foo bar baz qux want move point str foo bar baz qux execute spupsexp bound cupif expression defn foo bar let x x want move point preceeding defn foo bar let x x execute spbackwarddownsexp bound mdownif expression insert formattimestring format want move point format insert formattimestring format execute spbackwardupsexp bound mupblock movementsif expression require clojurestring want move point require clojurestring execute spforwardsexp bound cmfconversely move back require clojurestring execute spbackwardsexp bound cmbtoplevelish traversalif expression defn blah return blah foo foo want move point defn blah return blah foo foo execute spnextsexp bound cmnconversely move back defn blah return blah foo foo execute spprevioussexp bound cmpfreeform movementsif expression defn blah let x x want move point blah defn blah let x x execute spbackwardsymbol bound csbconversely expression defn blah let x x want move point let defn blah let x x execute spforwardsymbol bound csfwhat navigate around expression delimiters like parens bracket brace existmanipulationwrappingif expression var mod var want var surrounded var mod var pressing cmspace esc cspace followed make whole region become surrounded matching also applies key like etc depending mode usingalternatively may define wrapping function defmacro defpairs pair define function pairing pair alist name string con name function name created string singlecharacter string mark opening character defpairs paren bracket defines function wrapwithparen wrapwithbracket respectively progn loop key val pair collect defun read concat wrapwith key optional arg interactive p spwrapwithpair val defpairs paren bracket brace singlequote doublequote backquote advantage requiring region operate bound first three function cc cc cc respectively expression defn foo args let x inc x want surround args defn foo args let x inc x press cc sometimes inadvertently delete one pair result unbalanced expression smartparens prevents u hit backspace expression var mod var nothing happen smartparens save u lot trouble hereunwrappingif expression foo bar x z want unwrap bar expression removing parenthesis around foo foo bar x z execute spbackwardunwrapsexp bound conversely want unwrap bar expression removing parenthesis around bar foo bar x z execute spunwrapsexp bound slurp barfif expression foo bar baz want baz become part foo bar foo bar baz execute spforwardslurpsexp bound crightconversely want remove baz foo bar baz execute spforwardbarfsexp bound mrightif expression blah foo bar want blah become part foo bar blah foo bar execute spbackwardslurpsexp bound cleftconversely want remove blah blah foo bar execute spbackwardbarfsexp bound mleft swappingif expression foo bar want foo bar trade place bar foo execute sptransposesexp bound cmt killingif expression let x xxx yy yyy z want kill yy yyy let x xxx z execute spkillsexp bound cmkif want kill yy yyy z let x xxx execute spkillhybridsexp bound ckif expression require clojurestring want kill clojurestring require execute spbackwardkillsexp bound mkkeysthe following snippet summarizes key binding used article use bindkeys conveniently map key discussed earlier article defmacro defpairs pair define function pairing pair alist name string con name function name created string singlecharacter string mark opening character defpairs paren bracket defines function wrapwithparen wrapwithbracket respectively progn loop key val pair collect defun read concat wrapwith key optional arg interactive p spwrapwithpair val defpairs paren bracket brace singlequote doublequote backquote bindkeys map smartparensmodemap cma spbeginningofsexp cme spendofsexp c spdownsexp c spupsexp spbackwarddownsexp spbackwardupsexp cmf spforwardsexp cmb spbackwardsexp cmn spnextsexp cmp spprevioussexp csf spforwardsymbol csb spbackwardsymbol c right spforwardslurpsexp right spforwardbarfsexp c left spbackwardslurpsexp left spbackwardbarfsexp cmt sptransposesexp cmk spkillsexp ck spkillhybridsexp mk spbackwardkillsexp cmw spcopysexp cmd deletesexp backspace backwardkillword c backspace spbackwardkillword remap spbackwardkillword backwardkillword spbackwardunwrapsexp spunwrapsexp cx ct sptransposehybridsexp cc wrapwithparens cc wrapwithbrackets cc wrapwithbraces cc wrapwithsinglequotes cc wrapwithdoublequotes cc wrapwithunderscores cc wrapwithbackquotes closing remarksthe plethora command smartparens may daunting first investement time learning minimal compared benefit reapsmartparens brainchild matus goljer information smartparens go like project may donate herethanks andreas sahlbach correction
172,Lobsters,emacs,Emacs editor,EmacsCast: podcast about Emacs from beginner's point of view,https://emacscast.org/,emacscast podcast emacs beginner point view,download listen youtube discussion redditcomremacs shownotes intro config news hyper key permalink download listen youtube discussion redditcomremacs part shownotes intro config news writing permalink download listen youtube discussion redditcomremacs shownotes config news writing blogging longform writing permalink download listen youtube discussion redditcomremacs shownotes permalink download listen youtube discussion redditcomremacs support emacscast patreon shownotes config news back basic permalink download listen youtube discussion redditcomremacs shownotes config news exporting html org mode blogging oxhugo main blog english hugo oxhugo latex article math produced mathjax permalink download listen youtube discussion redditcomremacs shownotes config news spacemacs doom modal editing emacs permalink download listen youtube discussion redditcomremacs shownotes plan next episode permalink download listen youtube discussion redditcomremacs shownotes plan next episode permalink download listen youtube discussion redditcomremacs shownotes plan next episode permalink,podcast fabled extensible text editordownload listen youtube discussion redditcomremacsafter long break let get back emacs talk obsession small tweak improvement config arrow additional modal key could help long hardtoremember emacs key combinationsshownotesintroconfig newshyper keynovember permalinkdownload listen youtube discussion redditcomremacslet continue talking writing short long text emacs part see part newswritingapril permalinkdownload listen youtube discussion redditcomremacslet talk writing short long text blog post book emacs outlining exporting publishing part newswritingblogginglongform writingmarch permalinkdownload listen youtube discussion redditcomremacsanswering question listener rambling tool optimization writer mattshownotesjanuary permalinkdownload listen youtube discussion redditcomremacstrying reduce amount code running life going back basic emacs possible power defaultsyou support emacscast patreon perk wonderful feeling helping project like shownotesconfig newsback basicsoctober permalinkdownload listen youtube discussion redditcomremacsswitching helm ivy castlemacs blogging org mode oxhugo hugo static site generatorshownotesconfig newsexporting html org modeblogging oxhugomy main blog english powered hugo oxhugo org modehugo another static website generatoroxhugo carefully crafted org exporter backend hugosection oxhugo documentation latexsome article math produced mathjaxseptember permalinkdownload listen youtube discussion redditcomremacsfew update overview two popular communitydriven emacs distribution focused evil mode comparison vanilla emacs configshownotesconfig newsspacemacsdoommodal editing emacsseptember permalinkdownload listen youtube discussion redditcomremacsfresh config news overview org mode powerful emacs package keeping note maintaining todo list planning project authoring document fast effective plaintext systemshownotesplans next episodereviewing feedbackconfig news vanilla emacs v evil mode v spacemacs v doomaugust permalinkdownload listen youtube discussion redditcomremacsi explain setup configuration orgbabel package moment simple flexible starting point beginner thinkshownotesplans next episodehopefully reviewing feedback listener good resource beginner emacs org mode configsbasics orgmode maybe august permalinkdownload listen youtube discussion redditcomremacspilot episode let talk podcast make obsession tool somewhat fixed tried emacsshownotesplans next episodemy configuration org formathow orgbabel helpsquick overview initial sane default packagesaugust permalink
173,Lobsters,emacs,Emacs editor,"Castlemacs: modern, minimalist Emacs for macOS",https://github.com/freetonik/castlemacs,castlemacs modern minimalist emacs macos,castlemacs modern minimalist emacs macos installation changelog feature table content intro core principle faq name installation install emacs emacsformacosxcom alternative version advanced install dependency ripgrep install castlemacs setup keyboard note mojave user usage modifier key basic navigation basic movement http tonskymeblogcursorkeys moving text simple jumping within text smart jumping within buffer buffer search replace editing word line deleting text multiple cursor http githubcommagnarsmultiplecursorsel indentation region window management splitting window moving window restoring window configuration project management projectile git git gutter gitgutter doc magit magit magit user manual terminal shell file tree open buffer programming language mode code completion http companymodegithubio emmet emmet mode spellchecking thesaurus definition spellchecking install dependency thesaurus http wwwpowerthesaurusorg word definition org mode http orgmodeorg name,castlemacs modern minimalist emacs macos installation changelog feature compatibility common macos keybindings ergonomic keybindings follow simple sensible rule easy window management movement easy movement point file file multiple cursor project manager git front end file tree terminal handy spellchecker builtin thesaurus word definition lookup handful tiny useful helper function table content intro emacs extensible customizable text editor framework creating text editor want goal castlemacs build simple modern minimalist emacs setup tailored macos following core principle beginnerfriendly anyone able start using castlemacs like start using v code sublime etc respect macos common systemwide keybindings work expect respect emacs never break vanilla emacs compatibility always provide way go full emacs user desire layer complexity custom configuration layer dsl nothing new simple initel package installed configured via usepackage go minimal possible example use lightweight avy instead fullfeatured helm faq castlemacs compatible nonmacos system yes nothing bind castlemacs macos except convention long key keyboard play role super eg window key good go know emacs use castlemacs hard need know emacs help goal project make setup suitable absolute beginner similar spacemacs spacemacs big custom distribution additional layer top emacs castlemacs simply preconfigured emacs need learn anything new know way around emacs castlemacs support something probably unless go core principle feel free open issue setup work well terminal work built terminal use since one core principle behave like native macos application called castlemacs see name store private config store regular private config privateel file changed castlemacs worry conflict castlemacs us system clipboard separately kill ring kill ring system powerful potentially confusing newcomer way integrated system clipboard default make even confusing reason castlemacs us system clipboard via usual macos key combination keep kill ring system independently available want installation install emacs download emacs emacsformacosxcom alternative version advanced simplest way canonical emacs distribution macos however number disadvantage due build option related graphic certain extension like powerline produce incorrect color rgb space issue emoji support kind stuff subpixel smooth scrolling native support orgprotocol important consider installing mitsuharu yamamoto port instead brew tap railwaycatemacsmacport brew install emacsmac withnaturaltitlebar ln usrlocaloptemacsmacemacsapp application install dependency castlemacs relies ripgrep quickly search within project install castlemacs requires aspell free open source spell checker install also need gnutls gnu transport layer security tl library install castlemacs backup current emacs config exists clone castlemacs github mv emacsd emacsdbak git clone http githubcomfreetonikcastlemacs emacsd launch emacs wait several minute first launch download install package done status line bottom stop outputting text restart emacs worry warning message first launch go away first restart setup keyboard highly recommend changing cap lock control going system preference keyboard modifier key way comfortable control left pinky use japanese magic keyboard anything since control good place already note mojave user macos mojave emacs build might fail due change xcode command line tool xcode command line tool must pointed release version xcode instead beta version use xcodeselect accomplish usage modifier key castlemacs take advantage two fact command key used macos major system shortcut user muscle memory emacs recognizes super key almost never us default command key becomes super nameon mac keyboardemacs key supercommand metaleft alt controlcontrol document refer key common macos name cmd alt ctrl basic basic combination command work expected bindingdescriptionemacs default escapecancel current actioncg cmdzundoc cmdshiftzredona cmdssave filecx c cmdshiftssave file ascx cw cmdoopen filecx cf cmdaselect whole buffercx h cmdqquit emacscx cc cmdshiftpopen command palettemx ctrlx copen private config filena ctrlx copen init config filena navigation basic movement button j k l form natural alternative arrow key move around holding cmd using key without leaving home row press cmd right thumb see http tonskymeblogcursorkeys background motivation bindingdescriptionemacs defaultalternative cmdigo upcparrow cmdkgo downcnarrow cmdjgo leftcbarrow left cmdlgo rightcfarrow right moving text hold alt move current line sometimes called bubbling bindingdescription altupmove line altdownmove line simple jumping within text cmd fn arrow work like everywhere else macos holding shift selects region movement bindingdescriptionemacs default cmdleftbeginning cmdrightend linece cmdupbeginning bufferm cmddownend bufferm fnuppage upcv fndownpage downmv fnaltuppage windowcmv fnaltdownpage windowcmsv beginning line smart command move cursor first nonwhitespace character press move cursor real beginning line keep pressing jump cursor two position smart jumping within buffer buffer many command emacs write current position mark ring example editing line performed search cmdf something want come back press cmd go back line cmd go forward bindingdescriptionemacs default prev markcu spc cmdgo next markna cmd go prev buffercx left cmd go next buffercx right holding shift lift meaning movement instead jumping previousnext position current buffer jump previousnext buffer current window search replace bindingdescriptionemacs default cmdfsearch filecs cmdrvisual replacena cmdaltfvisual replacena editing word line bindingdescriptionemacs default cmdretnew line belowna cmdshiftretnew line abovena cmdcomment linecx c cmdjjoin next line join line regionna altuupcase current word regionmu altldowncase current word regionml altccapitalize wordmc deleting text bindingdescriptionemacs default altbackspacedelete word backwardsna altshiftbackspacedelete word forwardsmd cmdbackspacedelete current linena ctrlkdelete end linectrlk ctrlddelete characterctrld multiple cursor bindingdescription cmddselect next cmdshiftdselect occurrence altcmddadd cursor line region text selected cmdd add new cursor next line multiple cursor active bindingdescription cg escquit multiple cursor mode ctrl hideshow line cursor active ctrlv altvscroll screen center cursor learn feature multiple cursor http githubcommagnarsmultiplecursorsel indentation emacs pretty good indenting stuff automatically pressing tab line region indent needed castlemacs assumes never use tab space use space default language bindingdescription tabindent current line region correctly cx tabrigidly change indentation line region region command apostrophe expands selection holding shift contract bindingdescription cmd expand region cmdshift contract region window management note emacstalk pane called window splitting window binding based default emacs convention save one keypress also cmdw close current window like browser tab bindingdescriptionemacs default windowscx horizontallycx verticallycx current windowcx cmdwkill current windowcx moving window move left right like iterm hold shift make bindingdescriptionalternative cmd move leftctrlcmdleft cmd move rightctrlcmdright cmdshift move upctrlcmdup cmdshift move downctrlcmddown restoring window configuration winnermode capture current window configuration allows restore get changed emacs action bindingdescriptionemacs default cmdalt restore previous configurationcc left cmdalt go next configuration undo restore cc right project management castlemacs us projectile project management lot feature discoverable socalled command map bindingdescriptionemacs default ctrlcmdpopen projectile command mapcc p ctrlcmdp pswitch projectcc p p cmdpfind file projectcc p f cmdshiftfsearch projectcc p note emacs default make much sense context since projectile part emacs try provide commonly used combination case cc p projectile author suggests example many configs follow suggestion search mode bindingdescription ctrlaltmpreview current file ctrlaltnnext file preview ctrlaltpprevious file preview escquit search git git gutter change current file shown gutter left side change appearance symbol search gitgutter section initel see list available color run altx counselcolorsemacs see gitgutter doc info magit castlemacs us magit wonderful package aspires complete git porcelain bindingdescription cmdgmagit status status window everything basic command available within magit status window bindingdescription sstage current file chunk copen commit window fopen pull window popen push window cheat sheet available within magit refer magit user manual info terminal shell toggleable popup shell actually full blown terminal emulator ansiterm us system default shell load appropriate environment bindingdescription cmdtoggle shell file tree open buffer bindingdescription cmdbswitch another buffer open recent file cmdshiftbtoggle filetree programming language mode emacs support many programming language default castlemacs add support yaml markdown web mode html cs php templating etc emmet feel free add feature sending pr opening issue code completion code completion popup show immediately possible popup active bindingdescription enterselect current candidate altdigitquickly complete one first tabcomplete common part documentation selected candidate ctrlwshow source selected candidate note backends support last two command feature provided company mode package learn company mode http companymodegithubio emmet bindingdescription ctrlenter ctrljexpand emmet learn emmet mode spellchecking thesaurus definition spellchecking spellchecking requires external command available see install dependency bindingdescriptionemacs default cmdcorrect current word via popupna cmdctlrcorrect current word via listm last three line popup allow add current word personal dictionary accept correct current session long emacs open current buffer correcting via list press quickly add word personal dictionary note personal dictionary located aspelllangpws default thesaurus quickly search synonym requires internet connection since package us http wwwpowerthesaurusorg backend bindingdescription cmdshiftsearch synonym current word select synonym press enter replace word word definition requires internet connection bindingdescription altdefine current word org mode org mode keeping note maintaining todo list planning project authoring document fast effective plaintext system learn org http orgmodeorg caution black hole castlemacs provides nice default visually indent section tab source block act like corresponding major mode code highlighting work code block todo change state history go logbook todo becomes done current time date recorded shift selection arrow work unless spot org mode default action kick put org file org use dropbox similar cloud provider suggest storing actual org folder providing symlink like ln dropboxorg org org agenda look inside file org name castlemacs take advantage heavily used command key macos command key icon looped square known place interest sign used information sign practice started finland spreading nordic country symbol derived shape castle example borgholm castle sweden
174,Lobsters,emacs,Emacs editor,"Configuring Emacs, lsp-mode and the python language server",https://vxlabs.com/2018/06/08/python-language-server-with-emacs-and-lsp-mode/,configuring emacs lspmode python language server,language server protocol lspmode palantir pythonlanguageserver cquery language server goal prerequisite python side prerequisite emacs side emacs configuration putting together,language server protocol proposed microsoft way different editor development environment share language analysis backends post describes configure emacs lspmode palantir pythonlanguageserver improved code intelligence working python project planning companion post emacs c cquery language server goal starting motivating see working towards correctly configured setup emacs sport amongst others improved completion interactive documentation imenu navigation documentation hover really snazzy find definition find reference see following screenshots example prerequisite python side install pythonlanguageserver virtual environment user environment planning use day tend use pipenv cd myproject pipenv install pythonlanguageserver mean installs optional provider eg yapf formatting prerequisite emacs side emacs install required optional package using example mx packageinstall lspmode main language server protocol package lspui uirelated lsp extra sideline info doc flycheck etc companylsp companybackend lspbased code completion http githubcombbatsovprojectile projectile http githubcomtechnomancyfindfileinproject findfileinproject use single function determine root directory project emacs configuration add following emacs initel forget read comment yet using usepackage would good time upgrade usepackage lspmode ensure config make sure lspimenu everywhere lsp require lspimenu addhook lspafteropenhook lspenableimenu get lsppythonenable defined nb use either projectileprojectroot ffipgetprojectrootdirectory function used find root directory project lspdefinestdioclient lsppython python projectileprojectroot pyls make sure activated pythonmode activated lsppythonenable created macro addhook pythonmodehook lambda lsppythonenable lsp extra usepackage lspui ensure config setq lspuisidelineignoreduplicate addhook lspmodehook lspuimode usepackage companylsp config push companylsp companybackends nb required prefer instead default send pyls config via lspafterinitializehook harmless server due pyls key would prefer sending pyls get initialised initialize function lspdefinestdioclient invoked early server start cpbotha defun lspsetcfg let lspcfg pyls configurationsources todo check lsp curworkspace decide per server project lsp setconfiguration lspcfg addhook lspafterinitializehook lspsetcfg putting together importantly use pyenv something similar switch relevant virtualenv opening first python file open file pyls automatically started edit away lsppowered code intelligence often give better detailed result elpy probably pyls us mix static dynamic introspectionbased analysis furthermore handling lsp server emacs unified giving consistent level support across whole range programming language
175,Lobsters,emacs,Emacs editor,Why You Should Buy Into the Emacs Platform,https://two-wrongs.com/why-you-should-buy-into-the-emacs-platform,buy emacs platform,dropin vim replacement,started using emacs dropin vim replacement year ago last month discovered may emacs better vim really dig emacs discover great thing wish knew much earlier entire ecosystem hidden people regularly use emacs care editor use source code use care look know magit exists even use emacs capacity may want use may least made informed decision thing go bunch application run inside emacs saying use emacs little like saying use jvm sure may well true host reason reason know jvm easily fixable error
176,Lobsters,emacs,Emacs editor,Minimal Coding with Spacemacs and Olivetti,http://www.petecorey.com/blog/2018/09/10/minimal-coding-with-spacemacs-and-olivetti/,minimal coding spacemacs olivetti,twitter spacemacs first screenshots olivetti emacs package using olivetti within spacemacs layer get lost see entire file,mentioned twitter experimenting lately using visually minimal spacemacs setup using new setup every day several week absolutely love want screenshots overview work read first screenshots olivetti emacs package designed create distractionfree writing experience within editor olivetti screenshots show context editing markdown make sense term distractionfree writing usually applied context writing prose want distractionfree writing environment writing code turn olivetti still perfectly suited job check screenshots current spacemacs setup note screenshots capture entire screen edge edge nothing behind curtain spacemacs olivetti configured olivetti activate progmode textmode mean thing like spacemac home buffer inline terminal retain original layout distinction working beautifully far spacemacs multiterm using olivetti within spacemacs get olivetti working spacemacs needed olivetti layer unfortunately outofthebox spacemacs layer exist olivetti thankfully process creating custom private layer difficult one create new private layer within spacemacs running configurationlayercreatelayer command mx spc let call layer olivetti creates new emacsdprivateolivetti folder populates packagesel file boilerplate replace content packagesel following defconst olivettipackages olivetti defun olivettiinitolivetti usepackage olivetti tell spacemacs need olivetti package use package loaded done need edit spacemacs configuration file spc f e add olivetti entry dotspacemacsconfigurationlayers list instruct spacemacs load new private layer defun dotspacemacslayers setqdefault dotspacemacsconfigurationlayers olivetti finally need configure olivetti run progmode textmode dotspacemacsuserconfig callback addhook textmodehook lambda interactive message olivetti textmodehook olivettisetwidth hiddenmodelinemode spacemacstogglevitildefringeoff olivettimode addhook progmodehook lambda interactive message olivetti progmodehook olivettisetwidth hiddenmodelinemode spacemacstogglevitildefringeoff olivettimode use opportunity tune olivetti spacemacs liking feel free make change deem necessary good go get lost key getting lost without visual indicator always know may sound like truism visually paring code editing environment made realize substitute deep understanding mastery tool need modeline tell mode already know need constant reminder line navigate directly given line many visual indicator modern editor provide really noise going say noise never helpful almost always get without interested seeing exactly spacemacs set see entire spacemacs file ugly warning
177,Lobsters,emacs,Emacs editor,"Goodbye VSCode, hello Emacs (again)",https://hotair.tech/blog/goodbye-vscode/,goodbye vscode hello emacs,emacs year love emacs undone one week vscode karabiner emacs plugin v code project manager projectile git interface counselgitgrep dired ivy tidemode ndb ledger anantha kumaran,month ago decided reorient development career devops space web development javascript first tried apply editor choice emacs continually frustrated mediocre support working javascript particularly compared python wasting least day trying get emacs config support basic completion syntax checking javascript came across blog post year love emacs undone one week vscode title really struck spent exactly year emacs decided top swimming upstream jump wholeheartedly v code mixed experience instantly struck amazing v code support javascript language library web environment every tutorial react vuejs electron name recommends using v code v code experience became even better learned drop tscheck every file v code language support awesome highly doubt editor ever seriously compete regard time hit pretty significant pain point instantly use emacs keybindings everywhere shell browser name o x karabiner mapped binding linux laptop gnome toplevel feature v code found constantly closing editor accidentally deleting text buffer common command use thousand time day probably muscle memory mf forward word mb backward word cw cut text mw copy text cspace start selection ca beginning line ce end line back paragraph forward paragraph c search forward cj change buffer many found emacs plugin v code muddled situation memory supported command annoying bug made plugin trouble worth dropped emacs plugin tried thing v code way kind worked soon encountered hurdle developer whole set thing projectrelated task working git renaming file moving around maintaining personal todo list logging error troubleshooting information personal log executing shell command writing documentation markdown rest asciidoc v code likely support found v code plugins area lacking tried example found jumping project project manager poor comparison emacs incredible projectile important note project manager addon may improved significantly since last used month ago existing git addons also pale comparison emacs fantastic git interface counselgitgrep across huge codebase truly superpower video one crazy people run terminal inside emacs even keybinding mj use toggle character line mode terminal v code terminal ok nothing write home use emacs dired mode manipulating file directory work ridiculously well magit projectile dired missed emacs ivy completion framework anything else really see believe video could use v code writing javascript still found spending work time emacs mismatch keybindings vscode rest tool kept tying finger knot far talked whole lot emacs feature miss v code surely ask wo nt v code implement feature even better emacs given v code team extensive developer resource maybe would surprised doubt v code team intends give kitchen sink capability see emacs one month decided reinvestigate using emacs javascript came upon awesome tidemode took day got working satisfaction hold candle v code provides enough feature productive javascript feature tidemode provides autocompletion via companymode linting syntaxchecking together w flycheck documentation point basic refactoring tidemode action note using tidemode drop jsconfigjson javascript tsconfigjson typescript project order use install typescript project work optimally leverage tsserver ship typescript note need project dependency install thus npm install typescript using emacs sure well work emacs nt found good way fully support jsx file regular j extension far simply renamed file containing jsx jsx order get webmode tidemode work properly may mistaken believe tsserver ship typescript developed team make v code without irony emacs mode using replace v code depends software developed v code team v code excellent ide would recommend new software developer use excellent tidemode longer need find emacs configuration javascript p nt figured great solution following would love hear reader debugging still use v code looked ndb nt know yet worthy replacement html element cs attribute completion one favorite thing v code support completion inline documentation cs html technology know pathetically little browsing mozilla cs documentation within emacs anyone good solution iirc helmdash something useful seriously investigated autocompletion linting flow nt use flow able skip far much would like browse contribute desktop application ledger us flow extensively pps thanks much anantha kumaran work tidemode wout would stuck v code update magic incantation used webmode configuration get jsx syntax highlighting regular j file setq webmodecontenttypesalist jsx j x
178,Lobsters,emacs,Emacs editor,Robust Notes with Embedded Code,https://www.arcadianvisions.com/blog/2018/org-nix-direnv.html,robust note embedded code,deep,sometimes want something little tricky haskell embedded within larger piece code extracting tricky bit poke see reacts hugely useful something recently involved lens aeson library working json data main haskell compiler ghc provide repl drawback us slightly different syntax eg multiline input pragmas immediately support use playground mean playground programming environment make easy see effect small change screenshot repl session useful artifact rerun perhaps upgraded software easily tweak see responds shellnix import nixpkgs mkshell buildinputs ghcwithpackages p plens paeson plensaeson ptext pvector create envrc file enable direnv echo use nix envrc direnv allow note file jump small hoop orgbabel support haskell robust example need support babel interesting feature like setting parameter source block persistent session mind define runhaskell language support orgbabel elisp source block evaluate block cc cc teach emacs use runhaskell subsequent runhaskell block evaluated preamble teach emacs use runhaskell beginsrc elisp result silent defun orgbabelexecute runhaskell body params orgbabeleval runhaskell orgbabelexpandbody generic body params addtolist orgsrclangmodes runhaskell haskell endsrc deep json traversal json document nested list singlefield object instead toplevel object multiple field want flatten list using deep lens package type nt make obvious example using beginsrc runhaskell result output language overloadedstrings import controllens view deep import dataaeson import dataaesonlens object import datatext text import datavector fromlist array value value array array fromlist main io main print view deep object x x array object name bob text array object age int array endsrc result fromlist age number name string bob
180,Lobsters,emacs,Emacs editor,Emacs Nifty Tricks,https://www.emacswiki.org/emacs/EmacsNiftyTricks,emacs nifty trick,lathi emacschannel emacscrashtips emacscrashcourse diredpower editing movingthectrlkey capskey keyboardmacros keyboardmacrostricks frame window trulsarnegaard tinytools collaborativeediting insertdate insertanydate picturemodetrailingwhitespacetrick filladapt adaptivefillmode textcursor linecopychar linecopychar zaptochar sivaramn use online thesaurus http wwwantisleepcomdownloadelispgsenumberrectel scottevans markcommands breadcrumbforemacs register picturemode searching replacing xuefuqiao isearchotherend basicnarrowing transientmarkmode minibuffer function recursiveedit copy paste select secondaryselection secondselel register xemacs xemacs regtext xemacs buffer file searchfixedsetoffiles buffermenuplus ibuffermode bufferlocalcommand iswitchbuffers interactivelydothings iswitchbuffers icicle iswitchbuffers workgroupsforwindows recentfiles dotemacs icicle ediffmode dotemacs midnightmode daniellundin tinytools aaronbrady findfileatpoint piotrmieszkowski brandonschendel auto mode autocompressionmode trampmode outline overview selectivedisplay outlinemode selectivedisplay dalewiles gnuemacs xemacs categorizinginformationmanager jurilinkov diredmode external tool bookmarkel daniellundin rubikitch audiovisual setting bell whistle colortheme linenumbers activemenu fullscreen gnuemacs xemacs xemacs xemacs bumpwindowup user interface icicle completion face point completion icicle screenshot xemacs trackscroll otherframecommands savehist emacssession minibufferhistory windowconfiguration frameconfiguration register windowsandregisters framesandregisters idletimers cursorchgel changingcursordynamically mail gnusniftytricks programming xuefuqiao functionkeys skeletonmode mariolang electricpair hippieexpand mx rebuilder emacsfordevstudiousers javadevelopmentenvironment semanticbovinator semanticbovinator tabcompletion celdocmode replaceregexp sorting uniquify emacstags xuefuqiao linhdang ryandavis ftp ftpdinakvldkpubstaffperabrahamsenauctexallel jonaquino jonaquino jonaquino jonaquino drewadams jonaquino rectanglecommands miscellaneous xuefuqiao emacsasdesktopbackground yesornop escreen lathi danieljanus browseaproposurl idea nifty trick register mathiasdahl emacsniftytricks see also dayinthelife categorydotemacs categorydocumentation categoryediting categoryhelp,used emacs many year never reached maximum potential anon think motto every emacs user lathisome programmer enormously productive using emacs hand seem quickly run keyboard accomplishing thing minute take others hour accomplish must know many emacs trick allow work rapidly asked hesitant show trick understandably would probably take many hour show tricksthis web page describes little trick using emacs effectivelysome mentioned emacschannelsee also emacscrashtips emacscrashcoursenifty trick dired page diredpower editingmovingthectrlkey redefining capskey one important customizations computer use general especially emacsuse keyboardmacros various keyboardmacrostricks herea useful adjunct keyboard macro ability use multiple buffer window macro complex keyboard macro sometimes lose track point mark maybe need keep track location splitting frame using one window input output often make thing lot simpler get sedlike way editing data trulsarnegaarddelete tinyeat available tinytoolscollaborativeeditinginsertdateinsertanydateremove trailing whitespace deletetrailingwhitespace emacs later u using earlier version use picturemodetrailingwhitespacetrickmx autoinsertmode file start user defined templatefilladapt better adaptivefillmode teach autofillmode bulleted numbered listsinsert character abovebelow textcursor linecopycharemacs come git vcursorel extension linecopychar give second cursor keybindings copying character second cursor point word second cursor git vcursorel also good seeing two location file time due autosplitting window second cursor would move view git vcursorel split current window two show area around point one area around second cursor window use zaptocharmspc remove except space character suppose blank tree point positioned anywhere space word hitting mspc make tree sivaramnwith recent emacs cyclespacing command cycle one space space original spacing evaluate substitutekeydefinition justonespace lambda interactive cyclespacing currentglobalmap test easily online thesaurus replace word point synonym choosinga month ago finally wrote code incremental numbering column life better http wwwantisleepcomdownloadelispgsenumberrectel scottevansthere also rectanglenumberlines bound cx r nuse markcommands remember go back forth location buffer across buffersuse breadcrumbforemacs set series breadcrumb bookmark buffer jump back quickly visiting bookmark window quick way browse bookmarked locationswhen inserting register cx r may use prefix argument jump end inserted text forget use cx cxuse mm instead ca tab jump identation point also consider switching ca mm since time want backtoindentationuse reindentthennewlineandindent command example long line want move part new line move point place splist must done mx reindentthennewlineandindent ret also consider globalsetkey kbd ret reindentthennewlineandindent use cx cn setgoalcolumn vertical editingfor really heavyduty vertical editing consider picturemodesearching replacingwhen isearch cw add word following point search buffer useful cy add rest current line search buffer sometimes usefulcy isearch bound isearchyankkill since gnu emacs xuefuqiaouse isearch navigation mechanism consider modifying isearch behavior using isearchotherendregexps limited region using basicnarrowing selecting active region transientmarkmodeset variable enablerecursiveminibuffers nonnil bring complex search replace done either work want tweak try want another similar one minibuffer using history mechanism use search replace edit original search replace example replaced aabbcc zzbbyy want replace aaddcc zzddyy bring original search use replacestring change bb string dd pattern replacementthis function add useful tool search forward token current point use recursiveedit isearchmodehelp ch search good tip use edit search string mr toggle regularexpression mode mc toggle casesensitivity start queryreplace lot useful binding described therecopy paste selectuse secondary selection secondaryselection mark text without moving point want copy word elsewhere text point doubleclick word insert easy library secondselel swap primary secondary use ring secondary selection also mousecopyel come emacs secondary selection steroid normally copy paste require two step mark region copied paste middle mouse button using mousecopyel mark region pasting done automaticallycopy paste register cx r r cx r g r think registersetregisterget work slightly different xemacs info page xemacs regtext cx r r store copy text region register named r cx r r insert text register r buffer least true xemacs filessearchfixedsetoffiles name suggestsbuffermenuplus ibuffermode enhancement standard buffer menubufferlocalcommand defining command local specific bufferiswitchbuffers incremental picking buffer including middle name ie entering scr pick scratch bufferinteractivelydothings idoel part gnu emacs like iswitchbuffers also filesicicles like iswitchbuffers idoel complete regexp matching virtually minibuffer input file buffer cycle completion candidate perform action candidate manipulate set remembers opened file window configuration save name load later great work multiple project need switch themrecentfiles recentfiles menu gnu emacs add recentfmode dotemacs use icicle get findfile completioncycling interface recent filesediffmode emacs diff system handy viewing merging difference show word word difference line lineregister jumping cx r j e open dotemacs cx r j open idea file setregister e file emacs setregister file orgideasorg many open buffer try midnightmode never kill buffer manually againkeep tilde file showing everywhere set backupdirectoryalist try mx customizegroup backup turn fullpath prependfilename daniellundintinytools tinybuffer best buffer switching tinyeat great well aaronbradyopen file using ffap findfileatpoint use ffapalist tell emacs find piotrmieszkowskiuse two sidebyside window followmode easier working widescreen monitor google search emacs multiple column one buffer modesautocompressionmode allows use compressed file normal file put autocompressionmode emacs activate mx autoimagefilemode view image rather high asciitrampmode access remote file multiple protocolsoutlines overviewsselectivedisplay poorman outlinemode hide line provided number space front help getting quick overview file long paragraph line indented headline great viewing man page cu mx setselectivedisplay show heading mx ret disable againmore selectivedisplay setselectivedisplay cx default make lot friendlier wrapper dalewiles globalsetkey cx setselectivedisplaydlw defun setselectivedisplaydlw optional level fold text indented cursor level set set indent level level display entire buffer interactive p setselectivedisplay level currentcolumn highlightchangesmode sometimes emacs asks want save change buffer know changed tell fact highlight change made editing process part gnuemacs anybody know available xemacs get categorizinginformationmanager jurilinkov great way categorize view emacs let see list buffer process info doc file switch view specific type data looking example mx eebuffers brings list buffer jump view encoding diredmode style directory project etc awesome external tool cu insert result shellcommand directly buffer quite handy stuff like uptime uname etc cu replaces current region output shell command get region passed input use cx h cu ret apply command current bufferbookmarks file cx r somekey add bookmark cx r b somekey visit bookmark cx r l list bookmark see bookmarkel bookmarkel daniellundin mx enableflowcontrol ret use nasty terminal ncsa telnet macintosh instance let use c cq run savebufferskillemacs without processkilling query bet faq rubikitch defadvice savebufferskillemacs around noquerykillemacs activate prevent annoying active process exist query quit emacs flet processlist addoit audiovisual setting bell whistlescolorthemeline column number put line number left buffer try mx linummode put globallinummode initfile see linenumbers b get modeline try mx linenumbermode mx columnnumbermode columnnumbermode linenumbermode initel use fontlockaddkeywords tweak fontification highlight fixme comment add extra keywords etc stop emacs dinging use ctrlg setq visiblebell nil setq ringbellfunction lambda let facebackground facebackground default setfacebackground default dodgerblue setfacebackground default facebackground removing interface bar customize toolbarmode scrollbarmode menubarmode permanently hide see activemenu another le persistent solution menu bar get rid title bar given o run emacs full screen commandline option f fullscreen see page fullscreen detail example window specific methodsto remove startup message put setq inhibitsplashscreen setq inhibitstartupechoareamessage yourusername initfile add evalafterload startup fset displaystartupechoareamessage lambda get rid everywhere mx transientmarkmode gnuemacs zmacsregion xemacs make highlight active region lot nifty stuff make xemacs menu look like gtk add xresources emacs xlw menu fontset helveticamediumrnormal emacs xlw menu foreground black emacs xlw menu shadowthickness minibuffer taskbar window xemacs trick bumpwindowupuser interfaceicicles completion cycling virtually minibuffer input regexp matching completion candidate perform action multiple candidate perform set operation candidate set lot moreshrinkwrap resize frame fit selected window lisp fitframeel lisp autofitframeelset nextlineaddnewlines stop worrying whether end file cn rightaddnewlines find face used point several way mx describetextproperties cu c mx describeface face applied text listed default value completion use icicle describeface show facename candidate buffer completion using face screenshot faceatpoint emacs mousedragel scroll buffer dragging xemacs use trackscroll strokesmode use mouse gesture key event mx mouseavoidancemode ret setq echokeystrokes see typingrunning command another frame otherframecommands mx webjump jump directly predefined website using browseurl savehist emacssession remember minibufferhistory variable emacs session damn coolstore windowconfiguration frameconfiguration register windowsandregisters framesandregistersuse idletimersuse cursorchgel changingcursordynamically sometimes find inadvertently overwriting text overwrite mode expect might prove useful change cursor color shape indicate readonly overwrite mode another way setq hczsetcursorcolorcolor setq hczsetcursorcolorbuffer defun hczsetcursorcoloraccordingtomode change cursor color according minor mode let color bufferreadonly black overwritemode red blue unless string color hczsetcursorcolorcolor string buffername hczsetcursorcolorbuffer setcursorcolor setq hczsetcursorcolorcolor color setq hczsetcursorcolorbuffer buffername addhook postcommandhook hczsetcursorcoloraccordingtomode mailsend mail using messagemode gnu want mail archived gnu use cx setq mailuseragent messageuseragent setq mailuseragent gnususeragent see also gnusniftytricks programmingif work language use studlycaps like use glassesmode separate word visually without altering content bufferfor studlycaps use csubwordmode mode setup make movement text command recognize casechange word boundaryin subwordel defineobsoletefunctionalias csubwordmode subwordmode xuefuqiaouse functionkeysskeletonmode suggested mariolanguse electricpair automatically close pair symbol bring symbol upper key row move frequently used symbol easytoreach key autocompletes word good long variable name guess typing right first time keep pressing completes correctly used awhile probably want rebind hippieexpand defun evalafterload dabbrev defalias dabbrevexpand hippieexpand globalsetkey shift end lambda interactive otherwindow trouble building regex mx rebuilder emacsfordevstudiousersjavadevelopmentenvironment semanticbovinator jde us semantic semantic tightly integrated hippieexpand semantichippieexpand eldoc bovinemode speedbar lot function detail whichfuncmode classnamefuncname modeline tool wish every languagespecific mode supported semanticbovinatortabcompletion complete text buffer mx flyspellprogmode ret flyspell comment stringsceldocmode onthefly function documentation c programsmake sure proper psgml proper dtd writing html fact write html write xhtml emacspsgmldtd make productivelearn version control stufflearn use queryreplaceregexp see replaceregexpuse feed bit text perl ruby oneliners script cu replace textsorting mx sortlines follow mx sortlines mx uniquifybuffer defined uniquify remove one line every sequence repeated line buffer get effect cx h uniq ret system uniq use emacstagsbind mg mx gotoline mg made prefix rms gotoline bound mg g mg mg xuefuqiaopoor man tagging find file project use emacs search buffer completion ttnuse lxr run cron job every night tag entire code base wrote modperl module take http request query lxr database spit sexpsan emacs package grab symbol point sends http request modperl module read sexps server depending command jump function definition completes symbol show reference symbol la grep better tag tag symbol completion ccjava mode faster grep grep could used mysql client directly lxr database accept remote client security reason linhdang listmatchinglines desktopel bsel use wikiget wikiputbuffer edit wiki page emacs binding see ryandavishandy binding desktopel allows multiple named desktop switch inout really easy dc sqloracle dcshow edit line matching regex ftp ftpdinakvldkpubstaffperabrahamsenauctexallel jonaquinodelete line matching regex flushlines jonaquino countmatches jonaquinoreplace tab space vice versa untabify tabify jonaquino use unknown bad written code also replace inside string literal one reason literal tab inside string use untabify act region typically problem better guideline use region contains tab insignificant whitespace iow proble badly written code knowing code isdoes act drewadams make region lowercase downcaseregion jonaquinoalign line region common string mx alignregexp delete space around point mrectanglecommands kill yank insert delete rectangle miscellaneous mx phasesofmoon awoooo function obsolete since use lunarphases instead xuefuqiaoemacsasdesktopbackground real active background window esc esc esc go back one window deleting selected window fset yesornop yornp make yes prompt show n instead see yesornopescreen handy either temporarily switch task temporarily open new buffer give new frame mess anything frame advantage cx also screw window layout desktop lathihere emacs help fight procrastination danieljanussearch google wikipedia browseaproposurl update january binary line navigation available minormode package melpa despise longpressing cfcb moving particular position long line use binary navigation repeatedly decide whether go either right left point first time jump jump midpoint point beginning jump left end jump right line subsequent jump move point half distance last jump either left right direction bind jump left mj jump right mk although override existing binding lexicallet beg end prevmid defun backwardbinary interactive prevmid point setq beg end setq end prevmid beg setq beg linebeginningposition end point setq prevmid beg end gotochar prevmid defun forwardbinary interactive prevmid point setq beg end setq beg prevmid end setq beg point end lineendposition setq prevmid beg end gotochar prevmid globalsetkey meta j backwardbinary globalsetkey meta k forwardbinary navigating like feel bit odd first badly miss feature terminalsfurther idea nifty tricksonce week browse info file looking curious corner worthwhile one learn registersopen simpleel check nice function mathiasdahlread emacsniftytricks drop emacs channel ircfreenodenet chat gurussee alsosee also wiki greatemacsfeatures dayinthelifecategorydotemacs categorydocumentation categoryediting categoryhelp
181,Lobsters,emacs,Emacs editor,A list of people with nice emacs config files,https://github.com/caisah/emacs.dz,list people nice emacs config file,join github today sign file permalink starter packsdefaults list people nice emacs config file emacsd emacsconfig cleanemacssetup dotemacs emacsd emacsd emacsd emacsd emacsd dmacs settingsorg emacsd dotfiles dotemacs emacsd emacsd emacssettings emacsd emacs configuration dotemacs emacsconfig emacsliteralconfig emacsd config emacsd emacsd hemacs emacsd emacsd emacsd dotemacs emacsd readmeorg emacsd emacsd emacsd emacsd emacsd oremacs emacsd emacsd emacsconfig emacsd radian dotemacs emacsd emacsd steckemacsel emacsd emacs emacsd emacsd emacstvconfig emacsd dotemacs emacsd xahemacsinit emacsd faq people melpa remacs emacs stackexchage get list kiddin thread ask friend list list come first place awesomeemacs topic resource reload reload,awesome emacs config file dismiss join github today github home million developer working together host review code manage project build software together sign file permalink failed load latest commit information type name latest commit message commit time starter packsdefaults list people nice emacs config file nameconfigkey bindingsliteratepackageemacs versionclonablehighlights aaron latex scala alex system arne ido org utils bailey lingdotemacsevil chen window chris subtrees instead emacs package manager christopher youtube jekyll chunyang helm damien cassouemacsdclassicborg multi mail account carddavcaldav password store daniel exwm remote setup email dennis blog matlab latex email dmytro ukrainian localization webbrowsing howard programming language file management ista zahndotemacsclassic friendly ide like scientist ivan projectile org export language support jason lot goody jay jim fully featured project navigation joe di castroemacs us even image hydra john fully featured lot utils gnu module jonathan lot weird stuff might see configs joost orgbabel jordon biondoemacsdkey chord jorgen julien helper prose programming language lisp junpeng qiuemacsdevil justin programming language karl osindependent hydra pim kaushal window termux android custom theme lars lars magnar matthew nix haskell tangle matthew matus goljeremacsdevil classicpackage musa documented nathan nicolas oleh ono phil pythonnutemacsconfigevilstraight protesilaos radon rosboroughradianclassicstraight consistency futureproof deferred installation ryan c sacha samuel steve development syohei taichi terencio thierry tianxiang vasilij wilfred xah yuta faq people people list either heavy contributor melpa people get involved community beyond emacsd dir spend time checking melpa package remacs emacs stackexchage would probably know get list first ask would want get list kiddin time pull request would suffice keep mind though accept self submission config vetted people original enough one also contribute adding suggestion thread ask friend list though real friend would probably also state make config special list come first place list inspired awesomeemacs started simple list popular configs lately getting lot attention p awesome emacs config file topic resource perform action time signed another tab window reload refresh session signed another tab window reload refresh session
182,Lobsters,emacs,Emacs editor,"Introducing""XWidget Webkit"": A state-of-the-art browser for your modern Emacs",https://emacsnotes.wordpress.com/2018/08/18/why-a-minimal-browser-when-there-is-a-full-featured-one-introducingxwidget-webkit-a-state-of-the-art-browser-for-your-modern-emacs/,introducing xwidget webkit stateoftheart browser modern emacs,fill form browser edit textareas xwidget webkit browser step ensure emacs support xwidgets step pretend filing bug report step pay attention emacs show step emacs support find emacs support one build one step install custom menu step check menu step browse site say google http wwwgooglecom step browser check menu step enter search string textbox step editing html textareas say wiki page github concluding word like,earlier post learnt eww emacs web browser minimal one extract text image webpage render much notably support javascript modern feature make web page rich one user convinced labeled minimal actual fact crippled prefer stay mile away minimal stuff need shy away browsing within emacs alternative browser called xwidget webkit browser modern one featurerich browser used heard article give quick introduction using browser specifically learn fill form edit textareas html page yes heard right workflow step different need change old habit make full use xwidget webkit browser browser made appearance emacs using older emacs definitely need upgrade emacs delve detail couple video demonstrates power xwidget webkit browser first video demonsrates edit form web second video demonstrates edit textareas web fill form xwidget webkit browser video edit textareas xwidget webkit browser video step ensure emacs support xwidgets check emacs support xwidgets check emacs feature pretending reporting bug yes heard right pretend reporting bug stop short reporting step pretend filing bug report prompted subject press enter step pay attention emacs show ensure see xwidgets step emacs xwidgets support find emacs support one build one detail build custom emacs beyond scope article learn one future post either grab emacs xwidgets support built willing build custom emacs let leave hint debian unstable building emacs need step install custom menu xwidget webkit install custom menu xwidget webkit copy emacs lisp emacs restart emacs http rawgithubusercontentcomemacksnotesemacsnoteswordpresscommastermyxwidgetmenuel require xwidget featurep xwidgetinternal easymenudefine myxwidgettoolsmenu nil menu xwidget webkit xwidget webkit visible featurep xwidgetinternal browse url xwidgetwebkitbrowseurl help ask xwidgetwebkit browse url end edit textarea xwidgetwebkitendedittextarea help end editing webkit text area easymenuadditem menubartoolsmenu nil myxwidgettoolsmenu separatornet easymenudefine myxwidgetmenu xwidgetwebkitmodemap menu xwidget webkit xwidget webkit browse url xwidgetwebkitbrowseurl help ask xwidgetwebkit browse url reload xwidgetwebkitreload help reload current url back xwidgetwebkitback help go back history insert string xwidgetwebkitinsertstring help current webkit widget end edit textarea xwidgetwebkitendedittextarea help end editing webkit text area scroll forward xwidgetwebkitscrollforward help scroll webkit forward scroll backward xwidgetwebkitscrollbackward help scroll webkit backwards scroll xwidgetwebkitscrollup help scroll webkit scroll xwidgetwebkitscrolldown help scroll webkit scroll top xwidgetwebkitscrolltop help scroll webkit top scroll bottom xwidgetwebkitscrollbottom help scroll webkit bottom zoom xwidgetwebkitzoomin help increase webkit view zoom factor zoom xwidgetwebkitzoomout help decrease webkit view zoom factor fit width xwidgetwebkitfitwidth help adjust width webkit window width adjust size xwidgetwebkitadjustsize help manually set webkit size width w height h adjust size dispatch xwidgetwebkitadjustsizedispatch help adjust size according mode adjust size content xwidgetwebkitadjustsizetocontent help adjust webkit content size copy selection kill xwidgetwebkitcopyselectionaskill help get webkit selection put killring current url xwidgetwebkitcurrenturl help get webkit url place killring show element xwidgetwebkitshowelement help make webkit xwidget xw show named element elementselector show id element xwidgetwebkitshowidelement help make webkit xwidget xw show idelement elementid show id named element xwidgetwebkitshowidornamedelement help make webkit xwidget xw show name element id elementid show named element xwidgetwebkitshownamedelement help make webkit xwidget xw show named element elementname cleanup xwidgetcleanup help delete zombie xwidgets event handler xwidgeteventhandler help receive xwidget event xwidget webkit mode xwidgetwebkitmode style toggle selected xwidgetwebkitmode help xwidget webkit view mode step check xwidget webkit tool menu step browse site say google try using menu item find fails work see error report go like posnsetpoint position text area window intermittent bug possibly one ever thought invoking browser menu overlook error proceed invoking command directly mx xwidgetwebkitbrowseurl ret http wwwgooglecom ret step browser check xwidget webkit menu step enter search string textbox remember quirk enter search string say emacs xwidget webkit search box hurry specific way need enter search text search box step doubleclick mousecursor search box take help xwidget webkit menu see press enter ret minbuffer prompt enter search string press enter submit everything go well welcomed following screen use xwidget webkit menu scroll buffer collect note personal diary step back web history step editing html textareas say wiki page github remember quirk edit html textareas proceed ie press ret text area browser open buffer named textarea fundamental mode buffer filled current text edit text area heart content submit content back browser use end edit textarea shown end edit textarea browser wrap around softbreaks newline escape switch browser window see new content text area concluding word xwidget webkit browser day writing drawback specifically noticed following thing browser refuse take command via menu browser display flicker type text minibuffer submitting textareas hit miss affair mouse cursor disappears brief period soon submit text ie handing x event emacs webkit bit tardy behaviour disorienting despite drawback convinced xwidget webkit browser future browsing web within emacs among develop application web lot cheer browser like like loading related
183,Lobsters,emacs,Emacs editor,The Design of the Emacs Logo,https://www.ee.ryerson.ca/~elf/emacs/logo/index.html,design emacs logo,design emacs logo introduction content part logo nt part ii four letter line part iii gnu logo redux appendix elf eeryersonca,design emacs logo introduction homer odyssey begin middle en medias re story creation emacs logo neé gnu logo initial concept version appears run emacs story told email message exchanged artist emacs developer evolution logo illustrated using scan artist sketchbook content part logo nt part ii four letter line part iii gnu logo redux appendix gnu recursive acronym gnu unix luis fernandes elf eeryersonca last modified thu dec
184,Lobsters,emacs,Emacs editor,Emacs Lisp JIT Compiler,https://lists.gnu.org/archive/html/emacs-devel/2018-08/msg00393.html,emacs lisp jit compiler,date prev date next thread prev thread next date index thread index emacs lisp jit compiler emacs lisp jit compiler emacs lisp jit compiler emacs lisp jit compiler emacs lisp jit compiler emacs lisp jit compiler emacs lisp jit compiler emacs lisp jit compiler emacs lisp jit compiler emacs lisp jit compiler emacs lisp jit compiler emacs lisp jit compiler,date prev date next thread prev thread next date index thread index emacs lisp jit compiler tom tromey subject emacs lisp jit compiler date sun aug useragent gnu gnulinux hi written jit compiler emacs lisp like check jit based gnu libjit like attempt come however one somewhat faster primarily stack manipulation compile time runtime simple benchmark faster bytecode interpreter tested whether jit work given platform primarily libjit suspect jit wo nt work withwideint something could fix currently jit set always compile eligible function bytecompiled lexicallybound function robust enough far tell everything work fine mode would possible bit lazier say compile invocation something like aside possible withwideint thing two bug know first libjit never free function function jitcompiled redefined old jit code linger possible fix custom allocator libjit patch sent nt checked yet second nt gotten around emulating quitcounter behavior bytecode interpreter seems straightforward version compiler pretty basic compiles bytecode le obvious thing plan make calling convention bit le expensive allow inlining note change involve semantic change emacs lisp also libjit unavailable jit simply disabled tom emacs lisp jit compiler tom tromey emacs lisp jit compiler paul eggert emacs lisp jit compiler tom tromey emacs lisp jit compiler tom tromey emacs lisp jit compiler daniel colascione emacs lisp jit compiler paul eggert emacs lisp jit compiler daniel colascione emacs lisp jit compiler paul eggert emacs lisp jit compiler eli zaretskii emacs lisp jit compiler paul eggert emacs lisp jit compiler eli zaretskii
185,Lobsters,emacs,Emacs editor,Two Years With Emacs as a CEO (and now CTO),https://blog.fugue.co/2018-08-09-two-years-with-emacs-as-a-cto.html,two year emacs ceo cto,blog post reddit hackernews hackernews worked better suspected would gave using orgmode schedule todo list emacs use spread fugue docsfugueco wrist thanking keyboardio nt done much config except controlling cloud ludwigmode mode monitor last ceoemacs post,two year ago wrote blog post got notice surprised piece going back emacs primary content creation tool first ceo cto brief recap spent career programmer software architect preferred emacs code editor much time reconsidering emacs experiment excited nt sure would work internet post met roughly equal part disdain appreciation ten thousand people read seems touched something interesting challenging funny post reddit hackernews predicted hand shaped like claw lost eyesight use white background pleased report dire consequence resulted fact wrist thanking decision folk worried using emacs would cognitive drain ceo taken fugue idea backyard powerful product great enthusiastic customer find emacs solace thing actually difficult still use white background recently post rediscovered posted hackernews got number request follow post thing gone since report post also focus emacs functional programming highly relevant emacs work product fugue us functional programming automate cloud computing received lot feedback level detail color commentary useful post also fairly verbose spend effort explaining thinking recently moved ceo cto role fugue content post reflects work ceo expect work code emacs going forward yak shaving ahead always ymmv caveat emptor etc worked better suspected would time filled nearly constant communication outside within company communication thing get done world enemy reflection real contemplation difficult complex problem rarest commodity startup ceo time focus without distraction emacs particularly good invested time learn handful command application call noticed well configured emacs get way visually mentally nt change unless want cleaner interface blank screen beautiful typography world constant interruption simplicity allows focus solely thinking rather computer best program provide access computer without demanding attention folk pointed original post much criticism modern computer interface recommendation emacs agree disagree modern interface particularly applicationcentric approach v contentcentric user focused task oriented emacs avoids fallacy part like much brings merit table well emacs portal power computer rabbit hole worth descending idiom path discovering creating definition creativity one sad thing modern computing largely made black box shiny interface provide momentary gratification rather real satisfaction make u consumer rather creatorsmakers technology nt care background understand computer make thing fun satisfying hard think get started often underappreciate effect environment psychology emacs imparts feeling calm freedom rather urgency annoyance excitement latter enemy thought contemplation like thing last get way provide insight take time pay attention emacs meet criterion use emacs every day content creation pleased little think emacs learning curve steeper bicycle similar payoff nt think anymore imparts feeling freedom tool nt elegant tool civilized age happy seem entering another civilized age computing emacs gaining popularity gave using orgmode schedule todo list spent word original post using orgmode schedule gave using orgmode do like coordinate many meeting call every day dozen people ask rest world adapt choice tool time transcribe automate moving thing org primarily mac shop use google calendar etc native mac osios tool good job collaboration also use plain old pen notetaking meeting find laptopkeyboard use meeting rude limiting ability listen think therefore largely abandoned idea emacsorg help schedule organizing life orgmode great lot thing though goto writing document including one word use largely way author nt intend great hope someone say work fugue someday emacs use spread fugue started original post admonition may love emacs probably hate therefore little concerned documentation team fugue picked standard tool thought perhaps influenced appreciation couple year later pretty sure good call leader team time bright programmer two writer hired make fugue documentation le technical background figured case manager imposing wrong tool hear would resolve fugue antiauthoritarian culture people unafraid call bullshit anything anyone including original manager left fugue last year doc team slick integrated cicd toolchain docsfugueco become enthusiastic emacs user learning curve emacs tall even steep climbing real benefit productivity general happiness also reminder liberal art focused people every bit smart capable technology programmer perhaps le prone technology religion tribalism wrist thanking spending hour day computer since mideighties taken toll wrist well back unreservedly recommend tag capisco chair combination emacs ergonomic keyboard made rsi wrist issue go away point nt thought year prior daily pain particularly right wrist issue know distracting worrying folk asked keyboard mouse interested currently using keyboardio though mainly used truly ergonomic keyboard last couple year week using keyboardio absolutely love shaped key cap amazing knowing without looking thumb key seem obvious retrospect particularly emacs control meta constant companion using pinkie highly repetitive task amount mousing much lower using office ides helped lot still need mouse using rather dated looking highly functional ergonomic clearly superior trackball life name specific tool aside main point great keyboard combined mouse avoidance proved effective reducing wear tear body emacs central nt mouse around menu get thing done navigation key right finger pretty convinced hand movement away standard typing position cause lot tendon stress ymmv doctor etc nt done much config predicted spend lot time yak shaving configuration wondered right paid attention left config largely alone paying attention issue made realize much tool use demand attention time emacs easily lowest maintenance piece software use mac o window constantly demanding update far le intrusive adobe suite office update intrusion world occasionally update emacs still work way largely near zero cost operation one choose please sorry disappoint number folk wanted know done keep renewed emacs community output added thing config last two year consider success emacs tool hobby said love hear new thing want share except controlling cloud lot emacs fan fugue ludwigmode ludwig declarative functional dsl automating cloud infrastructure service recently alex schoof took flight evening hour build fuguemode act emacs console fugue cli nt familiar fugue make cloud automation governance tool leverage functional programming give user great experience interacting cloud apis well lot fuguemode cool number reason allows buffer constantly reporting status cloud infrastructure since often modify infrastructure quickly see effect coding fugue organizes cloud workload process fuguemode lot like top cloud workload also allows perform operation like creating new infrastructure deleting stuff nt needed anymore without much typing fuguemode prototype pretty handy use regularly mode monitor added mode integration really workceo function hacking around haskell scheme weekend fun added haskellmode geiser emacs great language repl divide screen different window running different mode including repls shell geiser great scheme done working sicp joy possibly revelation age lot example cargo cult programming install mit scheme geiser got something feel bit like symbolics environment lore brings another topic nt cover post screen management like use single portrait mode monitor writing configuration home primary office programming mixed use like new ultrawide monitor provide fuguers prefer divide screen three column center main editing buffer left side shell fuguemode buffer divided horizontally right either documentation buffer another editing buffer two easily done first using ctlx twice ctlx make window equal width give three equal column subdivide like ctlx horizontal division screenshot look like last ceoemacs post first reason cto fugue also many topic looking forward blogging time planning deeper dive post topic like functional programming type safety infrastructureascode roll awesome new fugue capability post achievable cloud using fugue
188,Lobsters,emacs,Emacs editor,Emacs & TLS,https://lwn.net/Articles/759370/,emacs tl,page question concern posted reddit post network security manager explained blog post emacs subsequent emacsdevel post listed badsslcom diffiehellman acknowledged filed bug feature planned security tradeoff certificate pinning said concerned emacs web wowser put think suggested put another message prime bit asked opposed concerned including postavsky according ingebrigtsen response thought posted certificate transparency switching tl library project run incompatibility relicense able switch moved noted lengthy message log,please consider subscribing lwnsubscriptions lifeblood lwnnet appreciate content would like see subscription help ensure lwn continues thrive please visit page join keep lwn net jake edgejuly recent query status network security tl setting particular emacs led long thread emacsdevel mailing list thread touched number different area including using openssl tl library rather gnutls kind problem lead complaint box setting default setting could change emacs discombobulate user latter issue one lot project struggle kind change appropriate bugfix release versus feature release emacs lengthy development cycle coupled perceived urgency security change make question even difficult question concern midjune jimmy yuen ho wong posted question concern emacs network security list run test making tl connection web site bad certificate found emacs complain problem default value security setting inadequate said proposed set better default still failure wondered update default network security setting starttlsel tlsel obsolete gnutls nt seem good job link something better maintained openssllibresslboringsslnss emacsdevel post came much le temperate reddit post noted tlsel starttlsel deprecated master branch using could build emacs without gnutls use openssl commandline program tl connection option going away mailing list post also asked nsmel emacs network security manager seemingly redundant check tl setting reasonable history obsolete tlsel starttlsel setting wong complained gnutlsverifyerror gnutlsminprimebits gnutlsalgorithmpriority actually lowerlevel gnutlsel library interface gnutls lars ingebrigtsen explained emacs network security manager user interface job handling various class insecure network access class said developer nsm wrote blog post merged back nsm released part emacs subsequent emacsdevel post clarified role nsm network security management done nsmel underlying library nsm provides name implies network security stuff like certificate pinning warns starttls connection degraded nontls connection course gnutlsel function ca nt still problem wong found listed around two dozen badsslcom site give error accessed emacs using default setting three failure rated concerning revoked pinningtest another bit concerning invalidexpectedsct run default value networksecuritylevel medium setting high resulted complaint two site small diffiehellman key size ingebrigtsen acknowledged problem suggested site result complaint high security level diffiehellman complaint move high medium seemed le convinced certificatepinning problem interested patch implement complaint revoked certificate also filed bug remind feature planned make protocol check extensible security tradeoff certificate publickey important perry e metzger said contrast ingebrigtsen ambivalence metzger said matter life death many people site request public key stored browser using http public key pinning hpkp could disastrous pinning done site like gmail prevent third world dictatorship using stolen certificate credential spy citizen people victim email read arrested state security force dissent tortured death lack certificate pinning working browser emacs comaintainer eli zaretskii concerned adopting measure result extra prompt inconvenience living condition nt emacs way secondguess user need definitely decide nt matter life death provide option reasonable default let user make informed decision default good enough imo unreasonable make default match happens dictatorship describe would unnecessarily inconvenience majority user let follow bad example tsa whose rationale unsurprisingly also matter life death setting various web browser often discussed thread least starting point emacs default nsm used web browsing imap example emacs fit exact emacs web wowser eww used browse web though emacs learn browser paul eggert put however emacs used browse web powerful argument model security practice web browser lot practical experience gone firefox chrome security model would much much efficient u emacs developer reuse wheel instead reinventing zaretskii think since emacs tl web browsing nsm used every net connection behalf eww arguing nsm apply different setting eww connection kind separate issue richard stallman weighed well disclaimed knowledge detail suggested possible avenue choosing good response want ensure early user get way least consider question might thug torture chamber spying put another message idea make sure user see chance choose alternative convenience safety early enough wo nt unsafe choice come explanation option first stating situation recommended one really disagreed idea also really focus ongoing effort idea seems reasonable harder sound prime bit current setting emacs minimum number bit prime number used part diffiehellman key exchange algorithm woefully small according wong others various kind attack key exchange small prime known tlsdowngrade attack used force key exchange use smaller prime number currently browser set minimum bit still thought susceptible statelevel attacker given noam postavsky asked default could bumped release branch zaretskii opposed release branch since amount testing would require would likely delay emacs bugfix release part change ingebrigtsen planned would change medium security level nsm would complain small prime clear change would make zaretskii concerned unintended breakage kind change others including postavsky think unfortunate still going release silently accepts prime smaller bit default turn however nsm complain prime smaller bit according ingebrigtsen bit inconsistent gnutlsel setting least solve problem user need connect server diffiehellman prime still without changing gnutlsminprimebits albeit warning wong got bit heated response though ingebrigtsen thought make sense lower layer still thing upper layer warn user also pointed wong may looking big picture place thread seem fixate particular use case interested extent say use case wrong somehow people different need different approach emacs empower get work done pressure way think along way wong also posted plan handling area nsm date latest tl best practice includes support certificate transparency ct deployed browser instead hpkp better support hpkp better cipher suite tl extension check ingebrigtsen quibble actually looked code think wong much right track would seem long emacs better network security may get user emacs whenever might switching tl library suggestion switch openssl popular barrier well one likely occur anyone keeping eye openssl year licensing openssl unique license compatible gpl project run incompatibility along way openssl actively working relicense apache software license march project close able switch plan next release another potential issue gnu gnutls something accident history gnutls moved gnu project back normally gnu project emacs strongly encouraged support use gnu project longer consideration however zaretskii noted emacs switched gnutls primary mean emacs maintaining gnutls openssl version tl code would maintenance burden firmly opposed idea end wong le agreed lengthy message covered lot topic said addition day try live motto nt let perfect enemy good replacing gnutls openssl significantly harder writing couple c function get gnutls replacing without major regression even harder besides emacs network security problem come use gnutls deficiency nsm believe emacs network security get much better faster focus effort current design long scattered thread end result look like nice improvement emacs network security come new emacs went process assigning copyright fsf one subthreads lot fiddly bit come network protocol especially involving encryption key exchange new expert interested working problem boon emacs user log post comment
189,Lobsters,emacs,Emacs editor,Mastering Key Bindings in Emacs,https://www.masteringemacs.org/article/mastering-key-bindings-emacs,mastering key binding emacs,mastering key binding emacs make key bind keymaps key bind command representing key code must remapping command reserved key take note lower case keymap lookup order global v local defining command invoking command parameter describing command putting together keymaps listing mode map quick keymap example hook listing mode hook quick hook example template function template purpose definition example basic global key bind purpose definition example add key definition keymap purpose definition example complex command key bind purpose definition example binding key mode hook purpose definition example remapping function purpose definition example custom prefix purpose definition example conclusion,mastering key binding emacs mickey petersen altering key binding emacs face difficult task reason emacs manual dedicated page describing great detail subtlety nuance bind keysto save time reading written guide cover need know bind key even complex command set template use codethis guide assume little knowledge elispwhat make key bind emacs selfhosting depending ask close achieving sentience almost emacs written emacslisp weighing roughly million line code complex elisp function use turn built simpler building block right core c source code layeremacs key engine similar emacs let control almost every facet selfinsertion key bind instance press f run selfinsertcommand special command repeat last typed key n time type cu f see ffffffffff printed screen see every keypress even elemental one like typing character screen associated key binding modify even removekeymapsa keymap internal data structure used emacs store key associated action keymaps rarely modified directly set command manipulate data structure emacs user never interact keymaps aside indirectly assigning key themevery buffer major minor mode keymap keymap defines key key sequence sent buffer key divided three category undefined prefix key complete key undefined selfexplanatory operation invoked prefix key key like cx cc part complete key constituent part prefix key made keymap complete key command input executes associated commandit possible emacs enumerate active minor major mode key binding buffer typing ch command useful want learn major minor mode likewise type part complete key say m type ch get list key belong prefixkey bind commandsthere several way define undefine key table show reality dozen way hack keymaps definekey keymap key def defines key keyboard map use want change keymap current buffer map localsetkey key command bind key local keymap used active buffer unlike definekey take explicit keymap bind key globalsetkey key command bind key global keymap making available buffer caveat see globalunsetkey key remove key global keymap localunsetkey key remove key active local keymaprepresenting key codein order actually bind key must first tell emacs key intend use unfortunately one way representing key emacs string vector concern either use handy macro built emacs called kbdthe kbd macro translates humanreadable key format emacs understandone important point note must surround function navigation key key include fkeys arrow key home row key like home want represent key cc p write kbd cc p remapping commandsyou tell emacs want replace key pointing certain command one choosing using remap event done instead passing key key bind function using arguably best way replacing existing command emacs automagically handle key reassignment backgroundexample definekey currentglobalmap remap killline myhomemadekillline globally remap key bind point killline myhomemadekilllinefor handson example read article fixing mark command transient mark modereserved keysyou pick keyboard combination desire even key bind already taken careful emacs set aside certain key use user generally key prefixed cc single character reserved alone practice thirdparty package give hoot gladly stuff key bind therethe set reserved key fkeys onwards two prefix key reserved hyper super remnant ancient keyboard used live today emacs pccompatible keyboard super hyper key people rebind window key application context key hyper super insteadanyway want use hyper use prefix key h eg hq want super use prefix key take note lower case window add emacs enable hyper super setq hyper setq super setq hyper x play around xmodmap tool choicekeymap lookup orderemacs look key certain order order described keep mind active keymaps used order toptobottom first match used subject criterion care aboutoverridingterminallocalmap terminalspecific key bindsoverridinglocalmap key override local keymaps careful use keymap char property point keymaps local character point used stuff like field yasnippet customize dialogemulationmodemapalists advanced multimode keymap managementminormodeoverridingmapalist overriding keymaps used minor mode major modesminormodemapalist exactly like overriding version preferred mean specifying keymaps minor modeskeymap text property point like one char property text property onlycurrentlocalmap keymaps defined buffer current local mapcurrentglobalmap last place emacs look key bind global onesall care minor mode key come local key turn checked global keysglobal v locala global key functionally identical local one except declared global keymap governed currentglobalmap function usually point default globalmap variable therefore possible define global key simply passing currentglobalmap function definekey often better alternative use designated function globalsetkeyin similar vein bind local key use designated function localsetkey general definekey like global map exists equivalent function currentlocalmap return keymap local buffer important know although major mode buffer define bulk key bind used buffer minor mode often add remove change key bind take precedence local keymapdefining commandif thought mechanic keymaps key difficult think deciding want bind key even harder especially want command specific thing like switching specific buffer name got trick sleeve help cut elisp writing letting emacs heavy liftinginvoking commandbefore talk emacs command important mention emacs handle interactive function commonly known command emacs command one interactive statement top function body magic statement tell emacs command interactive intended consumption user also determines invoke command mx promptwhen bind function key important keep mind invoke noninteractive function key binding must command also key definition function must invoke command parameter intent often call function parameter must wrap little helper function like lambda expression even standard defun prepared template see show thisdescribing commandthere two way describing command elisp manual way smart way let start manual waythe manual way use ch k key describe key bound way describe function function ch f function emacs selfdocumenting editor function variable key etc loaded emacs accessed way describexxx command type ch ch see emacs hacker usebut another smarter way one teensyweensy little downside work interactive function one call command remember complex command command need user input minibufferthe smarter way name repeatcomplexcommand conveniently bound key cx esc esc type emacs ask redo last typed command showing elisp expression execute change thenandthere rerun copy use code practical example cm foo ret bar ret queryreplaceregexp replacing foo bar type cx esc esc see something similar reformatted clarity queryreplaceregexp foo bar nil transientmarkmode markactive regionbeginning transientmarkmode markactive regionend observe emacs kindly filled function argument queryreplaceregexp including optional parameter run command say pasting prompt asked interactively search replace search term foo replacement bar already filled another one time type cx b scratch switch scratch buffer switchtobuffer scratch obviously command seen interactive command stuff like replacing string buffer normally done specialist elisp function require user input may big deal writing quickanddirty key bindsputting togetheryay made far need explain important concept confuse lot newbie mode hook modespecific keymaps templatesmost major minor mode usually set key module first loaded good news u use definekey add key definition straight mode map map hold key relevant mode mode advanced several map isearch good example mess around source code possibly info manual find add keysit mode force use mode hook problem must set key mode launched using mode hook take little bit workit convention emacs major mode function one activate mode end mode eg pythonmode also required mode map named xxxxmodemap major mode hook xxxxmodehookkeymapsmodifying keymap dirt simple use definekey mentioned easy determining keymap modify first placelisting mode mapsif type emacs give apropos buffer known mode map follow major mode naming scheme cu mx aproposvariable ret modemap retamusingly use repeatcomplexcommand trick get expression use key bind custom keymap examplethis assumes using builtin python mode come gnu emacslet say want extend pythonmode adding key use switch python process buffer currently bound cc cz definekey pythonmodemap kbd pythonswitchtopython use manual way ch k cc cz determine name command smart way work command complex require user input minibufferhooksa mode hook zeroormore function called mode activated like say open file us mode change major mode bufferyou add mode hook using special function addhook take name hook say pythonmodehook name function calllisting mode hooksif unsure exact name mode hook use handy trick list one emacs see cu mx aproposvariable ret modehook retthat show mode hook known emacs including docstring description see mode may emacs loaded outright lack autoload keywordquick hook examplelet add key cc q run mx shell local pythonmode using hook work need special hook function named mpaddpythonkeys need localsetkey function add key active buffer local map observe command called within context buffer invoked major modenext command tell emacs want add mode hook python defun mpaddpythonkeys localsetkey kbd cc q shell addhook pythonmodehook mpaddpythonkeys templateshere bunch template various usecases cut n paste use code recommend naming thing sensibly giving docstring incode documentation explains code well best way avoid accidentally overriding another function name would suggest use moniker prefix use mp suggest read article evaluating elisp emacs learn evaluate test code write function templatepurposerequired want invoke noninteractive function functionscommands parameter use function name command definition argumentdefinition defun myfunctionnamehere interactive place code line inside bracket exampledisplays message hello world echo area invoked defun mpdisplaymessage interactive place code line inside bracket message hello world basic global key bindpurposecreates global key bind available buffersdefinition globalsetkey kbd keybindhere interactivecommandhere examplebinds mx shell globalsetkey kbd shell add key definition keymappurposeadds key associated command local keymap useful extending major mode custom key bindsdefinition definekey keymap kbd keybindhere interactivecommandhere examplebinds cc p pythonswitchtopython definekey pythonmodemap kbd cc p pythonswitchtopython complex command key bindpurposecreates global key bind invokes multiple command row use create compound key invoke command take parameter us code function templatedefinition defun nameofinteractivecommandhere interactive insert compound command globalsetkey kbd keybindhere nameofinteractivecommandhere exampleswitches scratch buffer insert hello world point switch back came defun switchtoscratchandinserttext interactive saveexcursion setbuffer scratch insert hello world globalsetkey kbd cc switchtoscratchandinserttext binding key mode hookpurposeuse mode hook template bind key work standard definekey template require local binding reason advantage mode hook also give opportunity set modespecific setting like indentation etcdefinition defun myhookfunction add code called every time major mode run addhook mymodehook myhookfunction examplemake return key automatically indent newline emacslispmode enable eldoc mode well defun enablemyelispsettings turnoneldocmode localsetkey kbd cm newlineandindent addhook emacslispmodehook enablemyelispsettings remapping functionpurposethis template remap key point specific function say want rebind killline bound ck want code override key bind killline actually bound use template replace existing command without worrying explicitly rebinding keydefinitionnote replace global key must use globalmap call currentglobalmap definekey keymap remap originalfunction myownfunction exampleexample taken article fixing mark command transient mark mode remap key point exchangepointandmark function exchangepointandmarknoactivate defun exchangepointandmarknoactivate identical exchangepointandmark activate region interactive exchangepointandmark deactivatemark nil definekey globalmap remap exchangepointandmark exchangepointandmarknoactivate custom prefixespurposecreating prefix easy nowadays explicitly create prefix keymaps provided use localsetkey globalsetkey use custom prefix group categorize commandsdefinition globalsetkey kbd globalsetkey kbd exampleglobal key insert either time day current date type cc insert date cc insert time type cc ch list bound key cc prefix defun mpinsertdate interactive insert formattimestring x defun mpinserttime interactive insert formattimestring x globalsetkey kbd cc mpinsertdate globalsetkey kbd cc mpinserttime conclusioni covered almost every facet key binding emacs user would care know know lot tutorial essentially capture template section edification decided wanted cover everything near well anyway make key definitionthat dedicate much topic outset appears straightforward highlight flexibility complexity emacs hope guide taught one frequentlyasked thing emacs
190,Lobsters,emacs,Emacs editor,Emacs as a Complete Computing Environment,http://doc.rix.si/cce/cce.html,emacs complete computing environment,gpd pocket best interest heart keyboard matrix decentralized rpc future plan,word build o top emacs system provides level deep integration customization history emacs fact little gui system lisp interpreter mean replace modify nearly part want make wildly powerful wildly dangerous make act like vim build autocomplete framework insert whatever code like want email client irc client publishing system music player behave similarly make farflung change affect entire system single sexpression powerful mean perfect emacs code base mess supporting vastly different platform obsolete support others nt support asynchronous operation emacs lisp dialect messy poorly documented default keybindings chord leave feeling confused anxious still incredibly powerful malleable system many shy away system like craftsman care mastery tool incredibly important thing lead build system computing environment work everything fucking text though ui treat like though everything emacs buffer sometimes formatted text really neat side effect make programming interesting one simple one generate editing macro transform augment deep dark part system mail newsfeeds execute way would otherwise impossible emacs provides functional window manager single set keybindings manage text gui integrates cleanly plasma desktop various system service provided kde pragmatically though stem simple goal control world handful handcrafted optimised workspace currently look like gpd pocket desktop racked server running cloudbased service system built around core function largely fashion variance input method time progress consumer technology meet requirement become available exact configuration shift direction unity flow long held belief though taking much world computing time smartphones nt smart ca nt nt real work even remotely useful modern smartphones require push personal data party service nt ca nt best interest heart want review document worked work subway probably travel around fucking world get written root know many harddrives owned google nsa public record imagine instead single compute storage core could contain data meld world around hunk plastic plug inch display become workstation slot back eink display render aformentioned pdf headless communicated voice audio cue core keyboard screen fit purse fit cozy corner coffee shop write novel weekend workflow accomplish core task assuring user free spying hacked account working sync solution goal complete computing environment single hardwaresoftware pairing future computing hopefully inspiration others course single computer powerful enough provide functionality need thing would prudent act thin client system potential server sitting closet terabyte storage ram cpu shake stick case general integration plan use either matrix decentralized rpc perhaps tor hidden service unified fabric various subsystem come home compute core notifies homeserver matrix turning light simple example using matrix webrtc signaling plane thing like cider repls example could prove killer feature requiring ssh crazy setup simple peertopeer encrypted message passing channel dig future plan documention
191,Lobsters,emacs,Emacs editor,An Introduction to the Emacs Editor (1978),https://web.archive.org/web/20110723033542/http://www.burlingtontelecom.net/~ashawley/gnu/emacs/doc/emacs-1978.html,introduction emacs editor,introduction emacs editor introduction emacs editor transcriber note abstract useful lisp charactercommands useful text charactercommands environment preface autodocumenting feature emacs pointer elsewhere whither hither thither starting emacs basic bufferediting info basic filehandling command useful mmcommands autodocumenting feature emacs basic filehandling command autodocumenting feature emacs mm dired extended character set useful charactercommands rcommands controlx describe cx command help autodocumenting feature emacs pointer elsewhere mm apropos mstring mm environment mm describe commandname mm meta describe following character mm list command mm mm list redefinition mm environment controlx describe cx command useful mmcommands mm dired useful charactercommands rcommands useful text charactercommands useful lisp charactercommands environment minibuffer detail mmcommands bnf mm dired directory editing mark region basic bufferediting info environment teco emacs library teco realtime mode r mode realtime mode r mode emacs pointer elsewhere information,introduction emacs editor introduction emacs editor eugene ciccarelli ai memo january artificial intelligence laboratory massachusetts institute technology copyright massachusetts institute technology transcriber note document typeset using gnu texinfo modified small way original document us uppercase version emacs changed contemporary usage capitalized emacs many charactercommands original document typeset teletype font face square line around abbreviate key combination mimic appearance key found keyboard computer terminal mit replaced common representation introduced intermittently original document c cm applying control meta controlmeta input modification respectively followed literal input character document retyped typeset celebration emacs year anniversary rededicated richard stallman emacs hacker june abstract emacs realtime editor primarily intended display terminal intent memo describe emacs enough detail allow user edit comfortably circumstance knowing get information needed basic command described cover buffer editing file handling getting help two section cover command especially useful editing lisp code see useful lisp charactercommands text word paragraphcommands see useful text charactercommands brief cultural interest section see environment describes environment support emacs command preface memo aimed user unfamiliar emacs editor also operating system however used able skip itsrelated part without trouble newcomer emacs least read section start strongly urge try emacs know relying help feature see autodocumenting feature emacs rather attempting memorize many different command basic knowledge emacs use memo skipping section primarily toward beginning seem know already rule thumb skipping section skim indented example make sure recognize everything note last section pointer elsewhere tell information found though emacs used printing terminal primarily intended much easier use display terminal memo describes use emacs display great deal ambiguity regarding special character particularly controlcharacters referring print following list give example memo convention controlcharacters typed conventional terminal cais controla c control also type terminal typing controlspace altmode labeled escape terminal careful terminal meta key eg ai tv escape altmode alt altmode deli rubout delete chi backspace emacs print anything referring controlcharacters always represent uparrowed letter controla rubout real uparrow ever intended followed space finally people contributed development emacs teco behind special mention appreciation go richard stallman gave teco power generality brought together good idea many different tecofunction package added tremendous amount new idea environment created emacs personally one joy avocational life writing tecoemacs function make fun painful rich set tool work rms somewhere whither hither thither starting emacs emacs run machine ai ml mc dm people coming arpanet tip host number ai ml mc dm tell tip transmit every character typed let echo e e r log username letter eg initial say xyz nt regular username might first ensure user nt already use initial whois program type colon whois whois xyz whois nt find regular user xyz use name login xyz talking ddt toplevel monitor program make sure system know terminal type directly connected telneting another coming say tip tctyp program tell system terminal type get help using tctyp help instance coming tip say tctyp start emacs running ddt emacs enough emacs exit back ddt typing cx cc normal way exiting emacs cx cc cz break key stop emacs whatever return ddt typing something like cz iot location instruction emacs executing log logout many time program type fit screen pause typing happens typeout continue type space otherwise typeout flushed aborted information read primer entitled introduction macsyma user ellen lewis available room quick help type help cr ddt emacs type cx cc get back ddt getting help continue emacs continue cr cx cc help continue basic bufferediting info section describes basic editing text buffer display terminal see basic filehandling command transfer text buffer file emacs soon type character action performed see resulting buffer generally graphic printing character insert control character editing simple description various control character cfmove forward one character cbmove backward one character chmove backward one character cb cddelete forward one character deldelete backward one character camove beginning line cemove end line cnmove next line cpmove previous line ckkill rest line cyunkill yank skilled inserting buffer current position c mark place buffer cwkill wipe marked place cy unkill cw killed text clclear screen redisplay buffer cq quote insert next character typed whatever cxprefix character follow another character make cx command cx ccexit emacs ddt normal method czstop emacs return ddt easy way move text around kill move unkill unkill number time create copy different place near bottom screen line begin emacs called mode line ignoring information line right end may see indicates text buffer screen currently showing moving forward enough get emacs refresh screen show part buffer action character altered providing argument character usually repetition count eg arg cd mean delete next character general way specifying arg typing cu followed digit ending character execute eg cu cd give cd arg cu cd give cd arg alternatively type followed digit character execute eg convenience cu generate power repeated cu digit afterward number cu power eg cu set arg cu cu arg etc convenient moving around quickly actual number character line moved critical argument next character digit cu argument next character cuset argument cu cuset argument typing two altmodes mm put minibuffer occupying top line screen type edit buffer command action readily available controlcharacter key command known mmcommands since must preceded mm eg mm mm replace string mthis mthat mm cause string current position buffer change mmcommands take numeric argument eg mm mm replace stringmthis mthat mm replaces next string string argument followed mmcommands like replace string separated one altmode two altmodes typed consecutively end minibuffer causing mmcommand execute back normal buffer mmcommands described fully separate section memo see useful mmcommands mm mm mmenter minibuffer given mmcommand execute emacs quit cg emacs executing command command stop back typing character command buffer quite minibuffer may need two cg one empty minibuffer next quit already started mmcommand running typing mm longer minibuffer one quit finally emacs several feature automatically document help find appropriate command feature described separate section see autodocumenting feature emacs one feature use immediately typing ie altmode question mark followed character graphic control one listed describe action character case forgotten sure specific eg typing cb tell controlb move back one character several describe next character action basic filehandling command many command manipulating file section cover enough allow get started read section help see autodocumenting feature emacs look file command wish typing cx cr let type name file read buffer terminate filename carriage return file new file printed bottom screen easy way clear buffer announce intention creating new file given name command set filename default displayed near bottom screen emacs mode line typing cx c followed anything write buffer modified c mnemonic save default filename used write buffer different file default wish cx cw followed file name return cx cr filename crread file buffer cx cssave buffer modified cx cw filename crwrite buffer file filename edited little rubout rubout past beginning filename emacs take abort cancel command typing cu erase typed far file part name completely specified device directory generally device dsk directory username say xyz generally need specified unless differ last file named usually mnemonically useful eg foo may letter long digit allowed best use usually version number automatically handle version number writing file foo generate new version number eg writing foo foo existed reading file foo read highest version file reading foo read lowest version file best way delete file using mm dired described detail later section see mm dired want run mm dired type get help mm mm dired mm extended character set unless otherwise stated number octal normal buffer editing emacs run command whenever character typed command determined character ascii code extended cover two extra bit provided knight display tv terminal ai lab extra bit produced special shift key tv meta control keyboard typing controla produce code controla tv control key merely bit octal character basic ascii code typing controla produce octal controla produce similarly meta key bit character code metaa metaa two key may combined holding control meta key typing ie typing controlmetaa produce character like etc controlified metized choosing character command execute emacs map control character typed conventional keyboard controlbit version using uppercase character eg typing ce converted controle referring extended character set rather conventional terminal key memo emacs documentation abbreviate control meta prefix c let user normal keyboard simulate tv keyboard run command character like ca c cmf etc three character change following character code typing metizes following character ie bit typing c controlifies next character oring bit typing cm controlmetizes next character oring mabecomes mabecomes cabecomes ca type ca delbecomes ca cabecomes del cmabecomes cma cmbecomes cmc cmabecomes cma people prefer ca convenience typing cma cmb become cmb etc allows keep finger control key especially convenient typing cmc see useful charactercommands rcommands cmcbecomes cmc note explains minibuffer characterdescribing command called mm metaaltmode command character set minibuffer meta read next character may also metized controlified eg type cma describes command prefixed cx different however described another section see controlx describe cx command cx extended character set command help autodocumenting feature emacs command section important know since allow remember choose choice remember mmcommand must preceded mm run minibuffer unless already command may want type fit screen pause filling screen position cursor mode line bottom screen type space typeout continue typing anything else cause typeout flushed character typed executed command finished typeout screen redisplay buffer type something type space see buffer type anything space character executed probably buffer displayed see pointer elsewhere deal suspected emacs bug mm apropos mstring mm command list command string name space string argument significant briefly describes command mmcommands character command run typing character normal editing listed character command name preceded r distinguish mmcommands see environment derivation r told character currently invoke appropriate charactercommands thus want find charactercommand move forward past word like unto cf character could type mm mm apropos mword mm would get list wordhacking command including r forward word r move forward one word invoked via metaf r forward word command name rest first line brief description r specifies charactercommand typing mf eg mf move word might guess take optional argument specifying many word move mm apropos look several match separating string co since minibuffer editable buffer co something quote cq co eg mm mm apropos mdelete cq co kill mm would list command delete kill name mm apropos print list titled command defined mm variable mmvariables essentially link mmcommands eg might type mm mm apropos find mm might see mmvariable listed mm foo find outer otter mean command mm foo linked mm find outer otter note apropos find match linkedfrom linkedto mmcommand name mm describe commandname mm give full description command one listed mm apropos following two example illustrate describing mm charactercommands mm mm describe replace string mm mm mm describe r forward word mm meta describe following character charactercommand describe command invoked typing following character character typed extended character set may modified meta control controlmeta prefix c cm addition cx command may given codescribe co mfdescribe mf cdescribe c cmdescribe cm cx csdescribe cx c mm list command mm command list mmcommands briefly describing thus good string match appropriate command interested mm charactercommands thing use mm list redefinition mm command list command invoked every character extended character set invokes something nontrivial many basic control character graphic character considered trivial actually command list character emacs redefines teco see environment thus see metathis controlmetathat one fell swoop controlx describe cx command cx describe one cx command depending character typed next type cx command listed briefly described type another character cx command described detail cx list briefly describe cx command cx csdescribe cx c useful mmcommands following briefly described whet appetite info mm describe command deal occurrence string buffer mm replace stringreplace n occurrence string mm query replaceshow occurrence ask replace mm occurlist line containing occurrence string mm manycount many occurrence string command help edit english etc text mm text modeset command work best editing text mm auto fill modemode typing space may break line getting long see two command cause mode line show text andor fill command help edit lisp code mm lisp modeset command work best editing lisp note auto fill mode work well inside lisp mode directoryrelated command mm list fileslist name file current directory get full listing mm ey mm note ey mmcommand raw teco command put mm front mm clean directorygood cleaning excess version file accumulate use good practice command spot file version asks delete mm dired edit directory control deleting file see mm dired miscellaneous others mm untabifychange tab equivalent number space eg moving file multics us tab every multics every mm tabifychanges space tab wherever possible useful charactercommands rcommands section briefly describe command invocable default emacs environment info use command named character invoke long r name argument eg specific cu written number n character n clredisplay current line made nth line screen maltmodeenter minibuffer last mini content already n cycorrect unkill earlier kill csflexible incremental search string crbackwards search need ed move beginning buffer move end buffer cvmove display next screen mvmove display previous screen cmcexit r mode command may put eg mm dired e command useful text charactercommands following note similarity ca ce cf etc mamove beginning sentence memove end sentence mfmove forward one word mbmove backwards word mddelete forward word mruboutdelete backward word mqfill adjust paragraph move start last paragraph move start next paragraph useful lisp charactercommands note similarity ca ce cf etc cmamove beginning previous defun cmemove end defun cmfmove forward sexpression cmbmove backward sexpression cmkdelete next sexpression cmruboutdelete last sexpression cmnmove forward list cmpmove backward list cm move one level list backwards cm move one level list forward tabindent line make ground lisp code indent comment insert cmqindent line next sexpression aligning comment well character command option addition inserting show matching cause happen mm lu mlisp hack mm note mmcommand setting emacs variable see environment setting option typing insert momentarily position cursor matching returning second minibuffer detail mmcommands section provides detail may help use read description mmcommands minibuffer allows edit command executed soon type two consecutive altmodes control character still available editing text eg ca cb cd ck altmode redefined insert aid separating string argument thus metacommands available altmode however c also defined metize next character used place altmode general format mmcommand numeric argument followed mmcommand name altmode followed string argument separated altmodes mmcommand numargs mm mmname stringargs numargs null n n n stringargs null string stringargs mmcommand name eg replace string whether occurs mmname string argument another mmcommand may preceded space enough name make unambiguous need typed eg instead mm replace string say mm replace another example mm describe mreplace generally mmcommand take numeric args say either n n however case make sense say something like mm precomma arg second arg might undesired effect like changing default many mmcommands may specified minibuffer may concatenated line best put onto line mmcommands return value could provide value numarg next mmcommand putting one line clear stray value returned thus might say mm mm auto fill mode mm text mode mm first mmcommand end one altmode delimit mmname see bnf mmcommand two altmodes end serve delimit second mmcommand also exit execute minibuffer many mmcommands string argument pattern search mm apropos mm replace string mm query replace mm occur etc string argument may control search somewhat cq co cq quote insert co cause search either cx string match character others probably suffices mm dired directory editing mm mm dired mm put buffer containing directory allows move around making file deletion examination previous buffer content still around exit mm dired back get info using mm dired run type emacs command moving around searching etc still usable certain letter mark file deleted type let look first type e typing q tell dired ready quit list file deleted n continue mm dired eg undelete u highestversion file mistakenly marked deletion importantly mark file highest version name generally see think twice saying yes examine file using mm dired typing e cursor desired file line buffer containing file mode recommended editing file examining ready return mm dired type two controlc becomes cmc would ccc mark region section basic buffer editing see basic bufferediting info mentioned type c mark current position buffer cw kill text current position lastmarked spot buffer definition region part buffer mark current point mark identifies buffer position character offset position ie number character buffer position time marking insert character mark indicate text set thus mark generally used either temporarily eg killing text approximate buffer position also emacs maintains stack mark command c push new mark argument work differently cu c pop mark point ie make top mark current position pop cu cu c pop top mark throw away mark stack hold mark c push point onto mark stack cu c pop mark stack point cu cu c pop mark stack many command act currentlydefined region information try mm mm apropos mark cq co region mm environment teco emacs library section included cultural interest edit quite well without knowing basically environment layered teco string listprocessing languageinterpreter r mode teco command cr enters realtime edit mode emacs set teco function powerful editing extensible environment support library extra teco function loaded personal tailoring environment running infrequentlyused function teco teco string listprocessing language interpreter heavily slanted towards writing interactive displayoriented program manipulate text editor feature relate emacs environment comprise buffer display teco primitive command displaying buffer know terminal characteristic try hard redisplay little possible keep hash code line think terminal screen compare hash calculated line buffer window detail see section rmode realtime mode r mode object object teco either number string buffer array called qvector array contain object lisp grown shrunk point even middle efficiently buffer teco allows multiple buffer created destroyed user garbagecollected need buffer comprises two contiguous area virtual memory separated gap inserting deleting area gap contains text current point area gap contains text current point window teco mechanism dividing screen several window horizontal dividing line window selected teco buffer display affect window variable teco provides arbitrarilynamed variable limited set fastaccess qregisters primarily local temporary variable qregisters contain teco object qregisters special system significance eg whatever qregister contains current buffer qregister q contains symbol table variable whose name written surrounding altmodes mcomment column function variable qregister contain string evaluated macroed function written teco function given two evaluated prefix argument read number unevaluated string argument text following call mthere function qregister q called two prefix args read two string args hell function may return two object value teco inits startup file function allow user set function variable etc running emacs equivalent running teco emacs grossly large startup however shortcircuited running emacs provides alreadyinitialized teco convenience parsestring space teco load speciallyformatted file area garbage collect unused string allows emacs function sit around ready use without taking qregisters variable also allows page shared teco provides mean finding base area function loaded file format find function name emacs set special purestring function caller qregister thus typing mm foo call read string argument look purestring function name transfer function one named foo realtime mode r mode cr teco command enters recursive realtime mode provides mechanism calling function based character code typed code determines special qregister name eg ca implies qregister cr md implies qregister cr teco provides builtin function attached control character cb cd cf co rubout survive emacs r mode attempt minimize redisplay buffer changed mechanism includes addition basic linehashcoding scheme mentioned command report range buffer changed r merges together line displayed r remove range needing display exempts line redisplay immediately r keep track buffer line start convert cursor position character number last redisplay opposed using current content buffer r detect bottom portion screen text moved different position move using insert deleteline operation terminal support r stop redisplaying whenever input appears remembering much done know start processing input emacs emacs set function written teco reside purestring space pointer initially r qregisters besides supplying many editing function emacs provides support function accessing changing environment emacs inits started emacs first look file named emacs init found content evaluated allowing user load personal library alter environment set emacs chooses variable function provided list create alter variable many variable exist already control action various function eg mauto fill mode could control space function finder qregister mm us take name return pointer purestring function search rule used say looking function foo first check variable named mm foo allows redefinition quicker access instance function indent use subroutine function named indent variable mm indent point either indent without tab mmvariable found search loaded library purestring space mostrecently loaded first thus personal library checked standard emacs buffer emacs allows user create named buffer many perbuffer characteristic mode text lisp teco auto fill default filename window emacs support two window selected window buffer may selected typeout eg mm describe inside one window stay user edits window thus select window typeout edit leaving typeout previous window convenient feature size window may grown shrunk user library generation user create file named teco function simple format heavily commented create library combining library source source form function name function description function body function name function description three major function performed mm generate library comment extra whitespace function body removed description separated function named doc function name used mm describe etc finally result purified ie converted form purestring area name sorted list pointer elsewhere information emacs much information using emacs available mm apropos mm list command mm describe etc instance multiple buffer window useful mechanism several mm charactercommands deal command generally window buffer file name try mm apropos also use info program run program within emacs typing cx mm mm info mm info selfdocumenting suggest run type h learn two file emacs emacs chart emacs emacs doc list character mmcommands emacs chart brief summary invocable charactercommands emacs doc give mm describe like description invocable charactercommands mmcommands mailing list infoemacs message concerning emacs eg change new feature ask someone put list watch done hard think encountered emacs teco bug first try ask experienced emacs teco person make sure confused something bug report bug emacs report happened enough detail hopefully allow someone repeat fix bug cc ever suddenly find emacs teco actually print something like val jrst val significant jsrt example neversupposedtohappen error return ddt following pdump crash teco bug emacs described reporting happened mentioning dump crash teco teco primer teco file teco teco primer complete though much le digestible documentation teco command exists file teco tecord primer quite short printable complete documentation long tecord frequently placed buffer emacs used finding information desired teco command command start column whereas description indented alternatively use mm tecdoc command look teco command tecord word abbrev mode library emacs command allow define abbreviation automatically expand type use info program learn info type emacs word abbrev mode see memo introduction type macsyma user ellen lewis available room use info program type ddt learn ddt
192,Lobsters,emacs,Emacs editor,Emacs 26 Brings Generators and Threads,http://nullprogram.com/blog/2018/05/31/,emacs brings generator thread,recently released bit emacs lisp enthusiast generator native thread correction update threadsanitizer tsan completely untrustworthy use emacs thread purpose generator python generator javascript generator personally enthused see also best exploit expected implementation iterator object generally readable jump straight back position share state sufficient build primitive top thread web worker api binding threadlocal otherwise incredibly useful macro building generator thread stack clashing article http githubcomskeetothriter asynchronous request emacs dynamic module sits forever waiting next never come last resort future thread connected joystick emacs using dynamic module,may emacs recently released would expect major release come lot new goody bit emacs lisp enthusiast two interesting new feature generator iter native thread thread correction generator actually introduced emacs sept emacs doh update threadsanitizer tsan quickly show emacs threading implementation many data race making completely untrustworthy fixed nobody use emacs thread purpose thread disabled compile time generator generator one cool language feature provide lot power small implementation cost like constrained form coroutines unlike coroutines typically built entirely top firstclass function eg closure mean additional runtime support needed order add generator language complication change compiler generator compiled way normal function despite looking similar perhaps coolest lispfamily generator including emacs lisp compiler component implemented entirely macro compiler need modified making generator library actually part language exactly implemented emacs lisp emacslispgeneratorel generator function return iterator object iterator object invoked eg iternext evaluates body generator iterator independent make unusual useful evaluation paused middle body return value saving internal state iterator normally pausing middle function possible requires special compiler support emacs lisp generator appear closely modeled python generator though also share similarity javascript generator make like python use signal flow control something personally enthused though see also python generator completes throw stopitertion exception emacs lisp iterendofsequence signal signal outofband avoids issue relying special inband value communicate end iteration contrast javascript solution return rich object wrapping actual yield value object done field communicates whether iteration completed avoids use exception flow control caller unpack rich object fortunately flow control issue normally exposed emacs lisp code time use iterdo macro preference new clloop keyword iterby illustrate generator work really simple iterator iterates list iterdefun walk list list iteryield pop list might used setf walk b c iternext iternext b iternext c iternext error iterendofsequence iterator object opaque rely part structure said firm believer understand thing work underneath hood make effective use program rely particular iterator object internals correctness wellwritten program employ way best exploit expected implementation currently iterator object closure iternext invokes closure internal protocol asks closure return next value next operation iterclose asks clean close operation since closure another really cool thing emacs lisp generator iterator object generally readable serialize print bring back life read even another instance emacs exist independently original generator function work one value captured iterator object readable eg buffer pausing work well one exciting new feature emacs introduction jump table opcode switch lamented past large cond clcase expression could lot efficient emacs byte code supported jump table turn n sequence comparison lookup jump essentially perfect foundation generator since used jump straight back position evaluation paused buuut generator currently use jump table generator library predates new switch opcode independent author daniel colascione went best option time chunk code yield packaged individual closure closure linked together bit like node graph creating sort state machine get next value iterator object invokes closure representing next state manually macro expanded walk generator form roughly resembles expansion iterdefun defun walk list let state clflet signal iterendofsequence nil pop list null list setf state null list setf state setf state lambda funcall state omits protocol mentioned yield result value passed iterator actual expansion whole lot messier le optimal hopefully handrolled generator illustrative enough without protocol iterator stepped using funcall rather iternext state variable keep track body generator iterator currently paused continuing iterator therefore matter invoking closure represents state state closure may update state point new part generator body terminal state obviously notice state transition occur around branch said generator implemented library emacs lisp unfortunately there hole unwindprotect valid yield inside unwindprotect form unlike say throwcatch mechanism trap unwinding stack restarted later state closure need return fall unwindprotect jump table version generator might look like following used cllabels since allows recursion defun walk list let state cllabels closure clcase state null list setf state setf state closure pop list null list setf state signal iterendofsequence nil closure byte compiled emacs clcase turned jump table switch form closer generator implemented language iterator object share state close common environment course use global variable setf foo let list b c list funcall iterlambda list iteryield pop list funcall iterlambda list iteryield pop list iternext nth foo iternext nth foo b iternext nth foo c year crude way pause function allow function run acceptprocessoutput work context process five year ago sufficient build primitive top unlike old process function generator block thread including user interface really important thread emacs also bring u thread attached bolted fashion much subset pthreads shared memory thread recursive mutexes condition variable interface look like pthreads much done integrate naturally emacs lisp ecosystem also first step bringing threading emacs lisp right effectively global interpreter lock gil thread run one time cooperatively like generator python influence obvious theory sometime future interpreter lock removed making way actual concurrency think useful contrast javascript also initially designed singlethreaded lowlevel threading primitive exposed though mostly javascript typically run sandboxed safe way expose primitive instead got web worker api expose concurrency much higher level along efficient interface thread coordination emacs lisp prefer something safer like javascript approach lowlevel pthreads great way wreck emacs deadlock cg escape playing around new threading api day already restart emacs bunch time bug emacs lisp normally lot forgiving one important detail designed well dynamic binding threadlocal really essential correct behavior also easy way create threadlocal storage tl dynamically bind variable thread entrance function lexicalbinding defvar foocountertls defvar foopathtls defun foomakethread path makethread lambda let foocountertls foonametls path however clletf binding threadlocal make otherwise incredibly useful macro quite dangerous presence thread one way new threading api feel bolted building generator thread stack clashing article showed different way add coroutine support c one method spawned percoroutine thread coordinated using semaphore new thread api emacs possible exactly thing since generator limited form coroutines mean thread offer another different way implement thread api provide semaphore condition variable fill pause middle generator wait condition variable naturally see could make work call thread iterator thriter api similar iter http githubcomskeetothriter merely proof concept actually use library anything threadbased generator slower iter generator lot heavyweight needing entire thread per iterator object make thriterclose important hand generator problem yielding inside unwindprotect originally article going dive detail threaditerators worked thriter turned quite bit complicated anticipated especially worked towards feature matching iter gist side nextyield transaction get condition variable share common mutex value passed thread using slot iterator object side currently running wait condition variable side free releaser wait condition variable result similar asynchronous request emacs dynamic module rather use signal indicate completion modeled javascript generator iterators return con cell car indicates continuation cdr hold yield result terminate iterator early thriterclose garbage collection threadsignal used essentially cancel thread knock condition variable since thread garbage collected failing run threaditerator completion would normally cause memory leak thread sits forever waiting next never come deal finalizer attached iterator object way visible thread lost iterator eventually cleaned garbage collector usual finalizers last resort future thread threaditerator project initial little experiment emacs lisp thread similar connected joystick emacs using dynamic module expect current thread api go away really suitable general use raw form bug emacs lisp program virtually never bring emacs require restart outside thread situation break rule easy avoid obvious something dangerous happening dynamic module dangerous necessity concurrency really need safe highlevel api clean thread isolation perhaps higherlevel api eventually build top lowlevel threading api
193,Lobsters,emacs,Emacs editor,Emacs 26.1 released,https://lists.gnu.org/archive/html/emacs-devel/2018-05/msg00765.html,emacs released,,
194,Lobsters,emacs,Emacs editor,Emacs Mini Manual - The Basics,https://tuhdo.github.io/emacs-tutor.html,emacs mini manual basic,,emacs behind anything function function accept argument also pas argument emacs command modify behaviour however nt write code call function argument compile evaluate pas argument interactively exercise earlier learned motion command cf cb cp cn remember move forward character cf move backward character cb line upward cp line downward cn try command see anything different great instead executing command ie move forward character repeat command time ie move forward many command allow multiple repetition prefix argument even pas negative prefix argument try executing command right control minus see also execute command time reverse cf instead moving forward character move backward time might wonder differ cb right many command reversed version negative argument always useful circumstance try executing cu cf see thing cf need cu terminal use control digit key cu tell emacs enter numeric argument ready accept input different way thing supply prefix argument directly execute cu cf numeric argument default try cu cf see move character forward try time get used execute cu consecutively numeric argument power press cu resulting argument cu cu result cu cu cu result know large power hard calculate plugin display calculation display number plugin helm discus later part number cu nt know
195,Lobsters,emacs,Emacs editor,eshell as a main shell,https://ambrevar.bitbucket.io/emacs-eshell/,eshell main shell,link ambrevarxyz,website moved redirected automatically follow link ambrevarxyz
198,Lobsters,emacs,Emacs editor,Setting Emacs Theme Based on Ambient Light,https://matthewbilyeu.com/blog/2018-04-09/setting-emacs-theme-based-on-ambient-light,setting emacs theme based ambient light,setting emacs theme based ambient light stackoverflow,written matt bilyeu april setting emacs theme based ambient light sit next window work sunny day easier see light editor theme sky dark dark theme easier eye decided try macbook automatically switch emacs theme based reading ambient light sensor two part solution commandline executable read data sensor small elisp function theme switching program stackoverflow slightly modified get applelmucontroller io service service ready print light sensor data stdout exit lmutrackermm clang lmutracker lmutrackermm framework iokit framework corefoundation include machmachh import iokitiokitlibh import corefoundationcorefoundationh static double updateinterval static ioconnectt dataport void updatetimercallback cfrunlooptimerref timer void info kernreturnt kr output value output kr ioconnectcallmethod dataport nil nil value output nil kr kernsuccess printf value exit kr kioreturnbusy return macherror io kit error kr exit kr int main void kernreturnt kr ioservicet serviceobject cfrunlooptimerref updatetimer serviceobject ioservicegetmatchingservice kiomasterportdefault ioservicematching applelmucontroller serviceobject fprintf stderr failed find ambient light sensorsn exit kr ioserviceopen serviceobject machtaskself dataport ioobjectrelease serviceobject kr kernsuccess macherror ioserviceopen kr exit kr setbuf stdout null updatetimer cfrunlooptimercreate kcfallocatordefault cfabsolutetimegetcurrent updateinterval updateinterval updatetimercallback null cfrunloopaddtimer cfrunloopgetcurrent updatetimer kcfrunloopdefaultmode cfrunlooprun exit accompanying elisp code invoke executable timer change theme based light reading setq currenttheme dark defconst lighttheme majapahitlight defconst darktheme majapahitdark apply dark theme room dark light theme room bright defun changethemeforlighting let currentlightsensorreading stringtonumber shellcommandtostring lmutracker currentlightsensorreading stringequal currenttheme dark loadtheme darktheme setq currenttheme dark stringequal currenttheme light loadtheme lighttheme setq currenttheme light probably want run le frequently every second runwithtimer changethemeforlighting edit read russian translation post
199,Lobsters,emacs,Emacs editor,Using Emacs as a Development Environment,https://www.freebsd.org/doc/en/books/developers-handbook/emacs.html,using emacs development environment,using emacs development environment editorsemacs control h control alt emacs tutorial extending range language emacs understands,using emacs development environmentemacs highly customizable customized point like operating system editor many developer sysadmins fact spend practically time working inside emacs leaving log outit impossible even summarize everything emacs feature interest developer powerful editor allowing searchandreplace string regular expression pattern jumping startend block expression etc etcpulldown menu online helplanguagedependent syntax highlighting indentationcompletely customizableyou compile debug program within emacson compilation error jump offending line source codefriendlyish frontend info program used reading gnu hypertext documentation including documentation emacs itselffriendly frontend gdb allowing look source code step programand doubtless many overlookedemacs installed freebsd using editorsemacs portonce installed start ch read emacs mean hold control press h let go control press alternatively use mouse select menu although emacs menu well worth learning key binding much quicker editing something press couple key try find mouse click right place talking seasoned emacs user find often casually throw around expression like mx replaces ret foo ret bar ret useful know mean case emacs far many useful function fit menu barsfortunately quite easy pick keybindings displayed next menu item advice use menu item say opening file understand work feel confident try cx cf happy move another menu commandif remember particular combination key select menu type tell also use menu item find command contain particular word key binding next itby way expression mean hold meta key press x release meta key type replaces short feature emacs abbreviate command press return key type foo string want replaced press return key type bar string want replace foo press return emacs searchandreplace operation requestedif wondering earth meta special key many workstation unfortunately pc one usually alt unlucky escape key oh get emacs cx cc mean hold control key press x press c release control key unsaved file open emacs ask want save ignore bit documentation say cz usual way leave leaf emacs hanging around background really useful system virtual terminal emacs many wonderful thing built need configuredinstead using proprietary macro language configuration emacs us version lisp specially adapted editor known emacs lisp working emacs lisp quite helpful want go learn something like common lisp emacs lisp many feature common lisp although considerably smaller thus easier master best way learn emacs lisp download emacs tutorialhowever need actually know lisp get started configuring emacs included sample emacs enough get started copy home directory restart emacs already running read command file hopefully give useful basic setupunfortunately far much explain detail however one two point worth mentioningeverything beginning comment ignored emacsin first line emacslisp edit emacs within emacs get fancy feature editing emacs lisp emacs usually try guess based filename may get right emacsthe tab key bound indentation function mode press tab key indent current line code want put tab character whatever writing hold control key pressing tab keythis file support syntax highlighting c c perl lisp scheme guessing language filenameemacs already predefined function called nexterror compilation output window allows move one compilation error next mn define complementary function previouserror allows go previous error mp nicest feature cc cc open source file error occurred jump appropriate linewe enable emacs ability act server something outside emacs want edit file type emacsclient filenameand edit file emacs example sample emacs emacslisp file designed reevaled use variable firsttime avoid problem defvar firsttime flag signifying first time emacs evaled meta globalsetkey setmarkcommand globalsetkey mch backwardkillword globalsetkey mcr queryreplace globalsetkey mr replacestring globalsetkey mg gotoline globalsetkey mh helpcommand function key globalsetkey manualentry globalsetkey info globalsetkey repeatcomplexcommand globalsetkey advertisedundo globalsetkey evalcurrentbuffer globalsetkey buffermenu globalsetkey otherwindow globalsetkey findfile globalsetkey savebuffer globalsetkey nexterror globalsetkey compile globalsetkey grep globalsetkey compile globalsetkey grep globalsetkey nexterror globalsetkey previouserror globalsetkey displayfaces globalsetkey dired globalsetkey killcompilation keypad binding globalsetkey cp globalsetkey cn globalsetkey left cb globalsetkey right cf globalsetkey home ca globalsetkey end ce globalsetkey prior mv globalsetkey next cv globalsetkey cup mcb globalsetkey cdown mcf globalsetkey cleft mb globalsetkey cright mf globalsetkey chome globalsetkey cend globalsetkey cprior globalsetkey cnext mouse globalsetkey imenu misc globalsetkey ctab cqt control tab quote tab setq backupbycopyingwhenmismatch treat cr yes n fset yesornop yornp definekey queryreplacemap return act definekey queryreplacemap cm act load package require desktop require tarmode pretty diff mode autoload ediffbuffers ediff intelligent emacs interface diff autoload edifffiles ediff intelligent emacs interface diff autoload edifffilesremote ediff intelligent emacs interface diff firsttime setq automodealist append cpp cmode hpp cmode lsp lispmode scm schememode pl perlmode automodealist auto font lock mode defvar fontlockautomodelist list cmode cmode ccmode emacslispmode lispmode perlmode schememode list mode always start fontlockmode defvar fontlockmodekeywordalist ccmode cfontlockkeywords perlmode perlfontlockkeywords association mode keywords defun fontlockautomodeselect automatically select fontlockmode current major mode fontlockautomodelist memq majormode fontlockautomodelist progn fontlockmode globalsetkey fontlockfontifybuffer new dabbrev stuff require newdabbrev setq dabbrevalwayscheckotherbuffers setq dabbrevabbrevcharregexp sw addhook emacslispmodehook lambda set makelocalvariable dabbrevcasefoldsearch nil set makelocalvariable dabbrevcasereplace nil addhook cmodehook lambda set makelocalvariable dabbrevcasefoldsearch nil set makelocalvariable dabbrevcasereplace nil addhook textmodehook lambda set makelocalvariable dabbrevcasefoldsearch set makelocalvariable dabbrevcasereplace c c mode defun mycmodehook setq tabwidth definekey cmodemap cm reindentthennewlineandindent definekey cmodemap cce ccommentedit setq cautohungryinitialstate none setq cdeletefunction backwarddeletechar setq ctabalwaysindent setq cindentlevel setq ccontinuedstatementoffset setq cemptyarglistindent defun mycmodehook setq tabwidth definekey cmodemap cm reindentthennewlineandindent definekey cmodemap cce ccommentedit setq cautohungryinitialstate none setq cdeletefunction backwarddeletechar setq ctabalwaysindent bsdish indentation style setq cindentlevel setq ccontinuedstatementoffset setq cbraceoffset setq cargdeclindent setq clabeloffset perl mode defun myperlmodehook setq tabwidth definekey cmodemap cm reindentthennewlineandindent setq perlindentlevel setq perlcontinuedstatementoffset scheme mode defun myschememodehook definekey schememodemap cm reindentthennewlineandindent emacslisp mode defun mylispmodehook definekey lispmodemap cm reindentthennewlineandindent definekey lispmodemap ci lispindentline definekey lispmodemap cj evalprintlastsexp add hook addhook cmodehook mycmodehook addhook cmodehook mycmodehook addhook schememodehook myschememodehook addhook emacslispmodehook mylispmodehook addhook lispmodehook mylispmodehook addhook perlmodehook myperlmodehook complement nexterror defun previouserror n visit previous compilation error message corresponding source code interactive p nexterror n misc transientmarkmode setq markevenifinactive setq visiblebell nil setq nextlineaddnewlines nil setq compilecommand make setq suggestkeybindings nil put evalexpression disabled nil put narrowtoregion disabled nil put setgoalcolumn disabled nil emacsmajorversion setq showtrailingwhitespace elisp archive searching autoload formatlispcodedirectory lispdir nil autoload lispdirapropos lispdir nil autoload lispdirretrieve lispdir nil autoload lispdirverify lispdir nil font lock mode defun mymakeface face color optional bold create face color optionally make bold makeface face copyface default face setfaceforeground face color bold makefacebold face eq windowsystem x progn mymakeface blue blue mymakeface red red mymakeface green dark green setq fontlockcommentface blue setq fontlockstringface bold setq fontlocktypeface bold setq fontlockkeywordface bold setq fontlockfunctionnameface red setq fontlockdocstringface green addhook findfilehooks fontlockautomodeselect setq baudrate globalsetkey ccmm menubarmode globalsetkey ccms scrollbarmode globalsetkey backspace backwarddeletechar globalsetkey delete deletechar standarddisplayeuropean loadlibrary isotransl pc using direct screen writes windowsystem progn globalsetkey hilitrepaintcommand globalsetkey cu setq hilitmodeenablelist textmode cmode cmode emacslispmode lispmode schememode hilitautohighlight nil hilitautorehighlight visible hilitinhibithooks nil hilitinhibitrebinding require require paren setq baudrate slow serial connection tty type terminal windowsystem equal systemtype msdos progn firsttime progn keyboardtranslate ch c keyboardtranslate c ch unix equal systemtype msdos progn firsttime serverstart add face change addhook termsetuphook mytermsetuphook defun mytermsetuphook eq windowsystem pc progn setfacebackground default red restore desktop late possible firsttime progn desktoploaddefault desktopread indicate file read least setq firsttime nil need debug anything setq debugonerror nil done message done userloginname extending range language emacs understandsnow well want program language already catered emacs c c perl lisp scheme happens new language called whizbang come full exciting feature first thing find whizbang come file tell emacs language usually end el short emacs lisp example whizbang freebsd port locate file find usrportslangwhizbang name el printand install copying emacs site lisp directory freebsd usrlocalshareemacssitelispso example output find command wasusrportslangwhizbangworkmiscwhizbangelwe would cp usrportslangwhizbangworkmiscwhizbangel usrlocalshareemacssitelispnext need decide extension whizbang source file let u say sake argument end wiz need add entry emacs make sure emacs able use information whizbangelfind automodealist entry emacs add line whizbang lsp lispmode wiz whizbangmode scm schememode mean emacs automatically go whizbangmode edit file ending wizjust find fontlockautomodelist entry add whizbangmode like auto font lock mode defvar fontlockautomodelist list cmode cmode ccmode emacslispmode whizbangmode lispmode perlmode schememode list mode always start fontlockmode mean emacs always enable fontlockmode ie syntax highlighting editing wiz fileand needed anything else want done automatically open wiz add whizbangmode hook see myschememodehook simple example add autoindent
200,Lobsters,emacs,Emacs editor,Serve files over HTTP directly from emacs,https://gist.github.com/TeMPOraL/f6f5333ae93de4ce9b5bd82cdad87d32,serve file http directly emacs,reload reload,instantly share code note snippet serve file http directly emacs webserver emacs basically fast replacement servethis fish usepackage webserver config defvar myfileserver nil file server running hold instance defun mywsstart handler port optional logbuffer rest networkargs like wsstart unbroken emacs let server makeinstance wsserver handler handler port port log logbuffer getbuffercreate logbuffer setf process server apply makenetworkprocess name wsserver service port server filter wsfilter server nowait nil family coding noconversion plist append list server server log list logbuffer log log log lambda proc request message let c processcontact request buf plistget processplist proc logbuffer withcurrentbuffer buf gotochar pointmax insert format st st st formattimestring wslogtimeformat first c second c message networkargs push server wsservers server defun myservethis optional port start file server port serving content directory associated current buffer file interactive nport taken http eschultegithubioemacswebserverfileserverhtml fileserver myfileserver message file server already running progn setf myfileserver lexicallet docroot bufferfilename filenamedirectory bufferfilename expandfilename defaultdirectory mywsstart lambda request withslots process header request let path substring cdr assoc get header wsindirectoryp docroot path filedirectoryp path todo better wssenddirectorylist wssenddirectorylist process expandfilename path docroot wssendfile process expandfilename path docroot process port nil log buffer host message serving file port port defun mystopserver stop file server running interactive myfileserver progn wsstop myfileserver setf myfileserver nil message stopped file server message file server running provide initwebserver perform action time signed another tab window reload refresh session signed another tab window reload refresh session
201,Lobsters,emacs,Emacs editor,C++ system browsing and visualization in Lucid Energize (1993),https://www.youtube.com/watch?v=pQQTScuApWk,c system browsing visualization lucid energize,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature lucid energize demo vhs youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature lucid energize demo vhs youtube
202,Lobsters,emacs,Emacs editor,org-brain: org-mode wiki + concept-mapping,https://github.com/Kungsgeten/org-brain,orgbrain orgmode wiki conceptmapping,orgbrain concept mapping orgmode brain blog video introducing orgbrain article setup requirement usepackage evil capture category icon category customizing look entry title headline file entry limiting headline entry format limiting file entry usage editing text editing command general information slash file entry title renaming file archiving entry special tag multiple brain take note slow export format orgbrainexport helm ivy helm ivy backwards compatibility breaking change useful package chronological entry category rosetree similar package wiki mode emacs,orgbrain orgbrain implement variant concept mapping emacs using orgmode heavily inspired piece software called brain view introduction program also provide blog great idea think organizing brain think orgbrain combination wiki mind map wiki page mind map node orgmode file resides orgbrainpath headline id property one file called entry entry linked together view network link mind map using mx orgbrainvisualize video introducing orgbrain pinned index python game developmentgame design programming book programmingemacs v game programming computer game game maker unity resource http enwikipediaorgwikigameprogramming passing ghost pacman inhouse engine development technical tip text game programming art programming computer game visualizing entry see entry relationship entry four different type relationship orgbrain parentsentries visualized entry visualized entry headline parent headline orgmode file one parent case top level headline file considered parent additional parent added manually example programming game development parent visualized game programming entry childrenentries visualized entry default subheading visualized entry level one headline visualized entry file add child residing elsewhere manually example game maker unity child game programming siblingsthese appear right parent entry sibling child visualized entry parent friendsthese appear right visualized entry friend provide way adding hierarchy independent twoway relationship two entry friend must added manually example computer game game programming friend article describing use different relationship brain jump thought equivalent friend orgbrain apart visualized entry relationship orgbrainvisualize also show pinned entry shown independently visualized entry index pinned entry example orgbrainvisualize also show list entry resource link attachment text entry example three resource short text resource text gathered orgmode automatically also option visualize entry tree similar mind map zoom order show grandparent grandchild relationship entry pinned entry resource link pressedclicked visualize entry visit resource etc also annotate connection visualized entry one entry think annotating edge two node graph annotation show minibuffer hovering annotated connection setup requirement easiest way get orgbrain melpa want clone git repository download orgbrainel add loadpath example using usepackage assumes using melpa could use require orgbrain add loadpath usepackage instead configuration necessary showcase option usepackage orgbrain ensure init setq orgbrainpath directorypathwhereiwantorgbrain evil user withevalafterload evil evilsetinitialstate orgbrainvisualizemode emacs config bindkey cc b orgbrainprefixmap orgmodemap setq orgidtrackglobally setq orgidlocationsfile emacsdorgidlocations addhook beforesavehook orgbrainensureidsinbuffer push b brain plain function orgbraingotoend emptylines orgcapturetemplates setq orgbrainvisualizedefaultchoices setq orgbraintitlemaxlength setq orgbrainincludefileentries nil orgbrainfileentriesusetitle nil allows edit entry directly orgbrainvisualize usepackage polymode config addhook orgbrainvisualizemodehook orgbrainpolymode orgbrain requires emacs orgmode need part emacs configure orgbrainpath default brain orgdirectory directory want put orgbrain file could location already keep org file wish transform existing org file orgbrain file set example config presented mx customizegroup ret orgbrain evil user want add evilsetinitialstate orgbrainvisualizemode emacs orgbrain configuration orgbrain use orgid order speed thing variable orgidtrackglobally already default may want modify orgidlocationsfile add entry orgbrain directly orgmode must assign headliens id comfortable way command orgbrainensureidsinbuffer even comfortable add beforesavehook run saving orgbrainprefixmap bound key make orgbrain command accessable edit entry orgmode see editing orgmode usage might want add information end entry without visiting file way use capture template one presented lot entry might take time gather information entry using orgbrainvisualize could change value orgbrainvisualizedefaultchoices default include file even file direct root orgbrainpath feel orgbrainvisualize cluttered may want set orgbrainshowresources andor orgbrainshowtext nil long entry name orgbrainvisualize may take lot horizontal space cap shown length entry title setting orgbraintitlemaxlength user find confusing headline entry file entry see may preferable use headline entry setting orgbrainincludefileentries nil probably also set orgbrainfileentriesusetitle nil another possibility using file entry case set orgbrainscanforheaderentries nil polymode package available melpa allows several majormodes buffer required package use mx orgbrainpolymode inside orgbrainvisualize example add orgbrainpolymode orgbrainvisualizemodehook category icon orgbrain support showing icon entry depending category use variable orgagendacategoryiconalist specify icon category see example using alltheicons useful package customizing look entry title visualizing might want see additional information entry done customizing following variable orgbrainvistitleprependfunctions orgbrainvistitleappendfunctions orgbrainviscurrenttitleprependfunctions orgbrainviscurrenttitleappendfunctions variable list function take entry single parameter return string string prepended appended entry title according name function variable name current applies function currently visualized entry focused one suitable function add list might orgbrainentryicon included orgbrainvistitleprependfunctions default orgbrainentrytodostate orgbrainentrytagsstring headline file entry two type entry orgbrain headline entry file entry part used way main difference content stored inside orgbrain directory orgfiles inside orgbrainpath considered file entry content typically text first headline file headline id property inside file considered headline entry default subdirectory inside orgbrainpath scanned recursively file subdirectory file considered part brain choose root orgbrainpath scanned file setting orgbrainscandirectoriesrecursively nil headline entry want convert file entry use mx orgbrainheadlinetofile unfortunately currently function convert file entry headline entry limiting orgbrain headline entry orgmode tailored towards working headline orgbrain limitation regarding possible file entry concept headline file entry confusing user prefer use headline entry set variable orgbrainincludefileentries nil also make sense set orgbrainfileentriesusetitle nil may choose exclude file part entry name choosing among entry orgbrain pass two object file headline emacs format function setting orgbrainheadlineentrynameformatstring orgbrain show headline title example may suitable setup without file entry setq orgbrainincludefileentries nil setq orgbrainfileentriesusetitle nil setq orgbrainheadlineentrynameformatstring setq mydefaultorgbrainfile brain setq orgbraindefaultfileparent mydefaultorgbrainfile limiting orgbrain file entry instead prefer work file entry set orgbrainscanforheaderentries nil still possible add headline entry excluded search choosing among entry usage create new entry mx orgbrainvisualize typing name nonexisting entry could also use mx orgbrainaddentry want visualize new entry also command add child parent friend link entry create new entry way se general information find orgbrain missing entry list entry exist try using mx orgbrainupdateidlocations syncs orgbrain entry orgid caching system orgbrainvisualize primary usage orgbrain mx orgbrainvisualize might want bind key browse entry addremove relationship open entry editing etc following keybindings available orgbrainvisualize keycommanddescription morgbrainvisualizemindmaptoggle normal mindmap visualization j tabforwardbuttongoto next link k stabbackwardbuttongoto previous link borgbrainvisualizebacklike back button web browser h orgbrainaddchildheadline add new child headline entry corgbrainaddchild add existing entry new file child corgbrainremovechild remove one entry child relation eorgbrainannotateedgeannotate connection visualized entry entry link point porgbrainaddparent add existing entry new file parent porgbrainremoveparent remove one entry parent relation forgbrainaddfriendship add existing entry new file friend forgbrainremovefriendship remove one entry friend relation norgbrainpin toggle entry pinned norgbrainaddnicknameadd nickname entry several name entry sorgbrainselectdwimselect entry batch processing sorgbrainselectmapprefix key batch processing selected entry torgbrainsettitlechange title entry torgbrainsettagschange tag entry dorgbraindeleteentrychoose entry delete lorgbrainvisualizeaddresourceadd new resource link entry rorgbrainopenresourcechoose open resource entry cyorgbrainvisualizepasteresourceadd new resource link clipboard aorgbrainvisualizeattachrun orgattach entry headline entry aorgbrainarchivearchive entry headline entry oorgbraingotocurrentopen current entry editing oorgbraingotochoose edit one orgbrain entry vorgbrainvisualizechoose visualize different entry vorgbrainvisualizefollowsimilar orgagendafollowmode view visualized entry another window worgbrainvisualizerandomvisualize one entry random worgbrainvisualizewandervisualize random set interval w cancel cc cx cvorgtoggleinlineimagesdisplay orgmode image entry text mmove prefixmove refile current entry rorgbrainrefilemove current entry another entry change local parent porgbrainchangelocalparentchoose among entry parent make another local parent command marked run universal argument cu order operate entry link point instead visualized entry may use orgstorelink inside orgbrainvisualize order store link currently visualized orgbrain entry universal argument cu used running orgbrainvisualizerandom orgbrainvisualizewander randomized target restricted descendant child grandchild grandgrandchildren etc currently visualized entry use instance cu w wander among descendant universal argument cu also used orgbrainopenresource let choose resource visualized entry also descendant child grandchild etc entry universal argument cu used calling orgbrainannotateedge annotation oneway default behaviour otherwise annotate connection direction using mind map visualization toggle pressing use following keybindings order show hide successive level hierarchy relative current entry keycommanddescription orgbrainshowdescendantlevelshow one level entry right child child etc orgbrainhidedescendantlevelhide rightmost level descendant entry zorgbrainshowancestorlevelshow one level entry left parent parent etc zorgbrainhideancestorlevelhide leftmost level ancestor entry want select several entry removeadd childrenparentsfriends use key orgbrainselectdwim select entry point button link entry entry selected otherwise select currently visualized entry entry already selected unselected instead selected entry wish use use prefix key batch processing selected entry keybindings prefix keymap identical orgbrainvisualize could instance use c add selected entry child visualized entry p remove parent relationship selected entry done wish clear selection use orgbrainclearselected bound editing text orgbrainvisualizemode polymode package installed edit entry directly orgbrainvisualizemode run mx orgbrainpolymode add orgbrainpolymode orgbrainvisualizemodehook editing use cx c bound orgbrainpolymodesave save change editing orgmode edit orgbrain entry directly orgmode use default orgmode outline structure define parentchildren relationship keep mind entry id property considered entry orgbrain use mx orgbraingetid create id property current orgmode headline another alternative use mx orgbrainrefile create id also create id headline buffer mx orgbrainensureidsinbuffer might find useful add beforesavehook command available orgbrainvisualize also used orgmode directly case operate entry point word use mx orgbrainaddchild directly orgmode order add child orgbrain entry point may also want use command orgbraingoto relationsship navigate entry command available orgbrainvisualizemode also bound prefix keymap orgbrainprefixmap bind key orgmode instance cc b could type cc b p add parent current entry example config definekey orgmodemap kbd cc b orgbrainprefixmap may want create link orgbrain entry orgmode file necessarily orgbrain file orgbrain provides several link type purpose use orginsertlink bound cc cl orgmode default insert one link common clicked open orgbrain entry editing inserting link like orgbrain run completion upon entry brain default kind link let visit another orgbrain entry clicked variable orgbrainbacklink brainlink also created resource link target linking back link created orgbrainbacklink set string string added prefix title backlink example set orgbrainbacklink create brain link rabbit linking carrot resource description rabbit created carrot brainchild inserted using orginsertlink make linked entry child current orgbrain entry upon completion keep mind work type link manually completion orginsertlink brainparent like brainchild make linked entry parent current entry brainfriend like brainchild add linked entry friend brainswitchif multiple brain may want link switch specific brain one entry brainswitch link allows name relationship inserting link brainchild brainparent brainfriend customized variable orgbrainchildlinkname orgbrainparentlinkname orgbrainfriendlinkname customization done loading orgbrain using usepackage put customization init block command browsing file want add file current line file resource entry use mx orgbrainaddfileasresource mx orgbrainaddfilelineasresource run universal argument cu add resource currentlast visualized entry general information try add childparentfriend entry exist entry created true many command prompting entry like orgbrainvisualize name new entry written like file headline headline created level one headline file create new entry without headline part default created file entry possible change though setting variable orgbraindefaultfileparent default file let say set variable brain add entry banana nonexistent entry would thing writing brain banana adding child parent friend multiple entry added separating title orgbrainentryseparator default instance mx orgbrainaddparent ret music artist would add music artist parent another available command mx orgbrainagenda used run orgagenda orgbrain file slash file entry title giving file entry title title contain slash orgbrainfileentriesusetitle renaming file orgbrain headline entry use orgid identify headline manually renamed without worry file entry hand us filename identifier cause problem try manually rename file inside orgbrain order rename file use mx orgbrainrenamefile archiving entry orgarchive problem orgbrain relationship maintained even though entry really removed brain please use orgbrainarchive instead command remove relationship entry brain archiving command also insert handy link archived entry relationship special tag might headline really want entry orgbrain basic way exclude headline simply add id property however orgbrain also provide two tag use tag headline nobrain tag excludes headline subheading orgbrain entry change tag name modifying orgbrainexcludetreetag childless tag exclude headline excludes subheading change tag name modifying orgbrainexcludechildrentag work file entry following tag modifies kind information shown entry visualized notext show entry text orgbrainvisualize change tag name modifying orgbrainexcludetexttag resourceless show entry resource orgbrainvisualize change tag name modifying orgbrainexcluderesourcestag showchildren default local child entry shown text setting tag entry get entire subtree text change tag name modifying orgbrainshowchildrentag work file entry nosiblings may entry lot child visualize one child might want see sibling parent good example would index entry similar tagging parent nosiblings parent child show sibling parent change tag name modifying orgbrainexcludesiblingstag nolocalparent similar nosiblings tagged parent shown one local child visualized following tag modify way information shown entry visualized ownline make child tagged entry appear line tagged entry visualized affect tagged entry work akin temporarily setting orgbrainchildfillcolumnsexp nosort display child tagged node order child listed file rather sorted order determined orgbrainvisualizesortfunction affect order node child child list tagged node visited sibling list one tagged node child visited multiple brain multiple brain simply one brain folder way folder becomes separate brain switch using mx orgbrainswitchbrain also use brainswitch link orgmode switch brain run orgbrainvisualize inside orgfile root orgbrain directory orgbrain automatically switch brain take note orgbrain creates us several headline property property drawer orgmode headline brainparents brainchild brainfriends brainedge identifier id nickname property also mirrored file keywords top file entry instance brainchild propertieskeywords meant manipulated directly want remove property use corresponding command instead orgbrainremovechild similar currently command remove nickname though moment done manually might also see orgbrain insert resource drawer okay modify drawer manually name parentschildrenfriends property prefix edge property resource drawer customized setting variable orgbrainparentspropertyname orgbrainchildrenpropertyname orgbrainfriendspropertyname orgbrainedgepropertyprefixname orgbrainresourcesdrawername respectively course customization propertydrawer name existing brain file adjusted manually orgbrain slow feel orgbrain slow indexing entry instance running mx orgbrainvisualize customize orgbrainfileentriesusetitle set nil display file name indexing instead file entry title faster export format orgbrain builtin functionality exporting format started experimenting another package named orgbrainexport might merged orgbrain future orgbrainexport early stage development helm ivy use helm ivy use command helmbrain counselbrain respectively allow visualizing entry adding parentschildrenfriends entry point also allow selecting multiple entry command keybindings default backwards compatibility breaking change version entry description deprecated made visualization slow quite hassle actually write help echo text used edge annotation instead relevant using orgbrain version version june orgbrain rewritten order increase performance add option older setup considered obsolete prior file considered entry also headline id property included entry prior orgbrain using brain link brainpinned file keyword connect file slow due need searching file link version orgbrain us combination headline property file keywords orgid data file orgbraindatafile data old configuration lost update connection entry done using mx orgbraincreaterelationshipsfromlinks please backup orgbrain directory first still possible add child entry using brainchild link link inserted orginsertlink bound cc cl orgmode default linking specific headline file via brain filename headline deprecated longer work instead convert headline entry link directly useful package missing functionality orgbrain may find useful however package might improve orgbrain experience suggestion feel free create issue send pull request example available melpa chronological entry orgexpiry orgbrain add information entry created hard get list entry chronological order managed use orgexpiry part orgpluscontrib add created property orgbrain headline entry use orgagenda show entry chronological order setup orgexpiry define orgagenda function compare timestamps require orgexpiry setq orgexpiryinactivetimestamps defun orgexpirycreatedcomp b compare orgexpirycreatedpropertyname property b let ta ignoreerrors orgtimestringtoseconds orgentryget gettextproperty orgmarker orgexpirycreatedpropertyname tb ignoreerrors orgtimestringtoseconds orgentryget gettextproperty orgmarker b orgexpirycreatedpropertyname cond ta tb ta tb tb tb ta tb ta ta add created property adding new orgbrain headline entry addhook orgbrainnewentryhook orgexpiryinsertcreated finally add function let u watch entry chronologically defun orgbraintimeline list orgbrain headline chronological order interactive let orgagendafiles orgbrainfiles orgagendacmpuserdefined orgexpirycreatedcomp orgagendasortingstrategy userdefineddown orgtagsview nil format orgexpirycreatedpropertyname use orgbraintimeline view entry chronological order newest first simple command take url clipboard insert orgmode link title page found url current buffer command us orgcliplink add link clipboard orgbrain resource guess description url title bound l orgbrainvisualize defun orgbraincliplinkresource add url clipboard orgbrain resource suggest url title description resource interactive let url orgcliplinkclipboardcontent orgbrainaddresource url orgcliplinkretrievetitlesynchronously url definekey orgbrainvisualizemodemap kbd l orgbraincliplinkresource linkhintel inspired link hinting functionality vimlike browser browser plugins pentadactyl provides command using avy open copy link installing linkhint could bind linkhintopenlink key use orgbrainvisualizemode want use linkhint orgbrainvisualizemode could add following initfile definekey orgbrainvisualizemodemap kbd cl linkhintopenlink convert simple ascii art line drawing region current buffer unicode asciiarttounicode useful want orgbrainvisualizemode look bit nicer installing add following initfile defface nil face box drawing character adviceadd filterreturn lambda str propertize str face defun let inhibitreadonly makelocalvariable faceremappingalist addtolist faceremappingalist orgbrainwires ignoreerrors pointmin pointmax withevalafterload orgbrain addhook orgbrainaftervisualizehook utility package collect various icon font propertize within emacs installing alltheicons could decorate resource orgbrain using orgbrainafterresourcebuttonfunctions small example defun orgbraininsertresourceicon link insert icon based content orgmode link insert format cond stringprefixp brain link alltheiconsfileicon brain stringprefixp info link alltheiconsocticon info stringprefixp help link alltheiconsmaterial help stringprefixp http link alltheiconsiconforurl link alltheiconsiconforfile link addhook orgbrainafterresourcebuttonfunctions orgbraininsertresourceicon could also use alltheicons add icon entry category instance two category named computer book want icon setq orgagendacategoryiconalist computer list alltheiconsmaterial computer nil nil ascent center book list alltheiconsfaicon book nil nil ascent center emacs mode quickly browsing filtering editing directory plain text note inspired notational velocity installing deft add function initfile defun orgbraindeft use deft file orgbrainpath interactive let deftdirectory orgbrainpath deftrecursive deftextensions org deft search heading content entry org buffer display entry match search term whether term appear heading content installing helmorgrifle add function initfile defun helmorgriflebrain rifle file orgbrainpath interactive let helmorgriflecloseunopenedfilebuffers nil helmorgrifledirectories list orgbrainpath defun helmorgrifleopeninbrain candidate let buffer po candidate withcurrentbuffer buffer gotochar po orgbrainvisualizeentryatpt addtolist helmorgrifleactions con show entry orgbrain helmorgrifleopeninbrain orgnoter purpose let create note kept sync scroll pdf etc document thanks rosetree providing tip installing orgnoter add following initfile addhook orgnoterinsertheadinghook orgidgetcreate defun orgbrainopenorgnoter entry open orgnoter entry run interactively get entry context interactive list orgbrainentryatpt orgwithpointat orgbrainentrymarker entry orgnoter orgbrainopenorgnoter run orgnoter current entry let save pdf note orgbrain link entry etc good idea add command orgbrainvisualize like definekey orgbrainvisualizemodemap kbd cc n orgbrainopenorgnoter orgboard bookmarking web archival system emacs org mode building idea pinboard archive bookmark access even online site hosting go similar package emacs wiki article wiki mode emacs orgroam roam replica built top allpowerful orgmode orgroam solution effortless nonhierarchical notetaking orgmode orgroam note flow naturally making notetaking fun easy orgroam also work plugandplay solution anyone already using orgmode personal wiki orgroam aim implement core feature roam leveraging mature ecosystem around orgmode possible eventually hope introduce feature enabled emacs ecosystem opinionated setup managing large collection interlinked org file orgwiki orgmode extension provides tool manage build personal wiki desktop wiki wiki page orgmode file
204,Lobsters,emacs,Emacs editor,emacs anywhere,https://github.com/zachcurry/emacs-anywhere,emacs anywhere,cknadlervimanywhere emacs anywhere table content install o x system preference keyboard shortcut service linux emacs anywhere xorg switch ubuntu xorg dependency install window usage try emacs anywhere emacs anywhere environment emacsclient emacsclient emacs anywhere command toggleea emacs anywhere variable eaon emacs anywhere eacopy eapaste emacs anywhere eaappname emacs anywhere eawindowtitle emacs anywhere eax emacs anywhere eay emacs anywhere eawidth emacs anywhere eaheight emacs anywhere hook eapopuphook emacs anywhere example update uninstall todo contributing license,inspired cknadlervimanywhere emacs anywhere provides configurable automation hook containing window info bust move anywhere quick customizable fashion table content install o x curl fssl http rawgithubcomzachcurryemacsanywheremasterinstall bash open system preference navigate keyboard shortcut service check box beside emacs anywhere click add shortcut key shortcut linux order use emacs anywhere must use xorg window manager switch window manager ubuntu going login screen clicking cog icon selecting xorg dependency install dependency needed sudo aptget install dependency install curl fssl http rawgithubcomzachcurryemacsanywheremasterinstall bash create keyboard shortcut run emacsanywherebinrun window tbd usage try make sure emacs server running start server like emacs daemon focus application window text input text area browser key keyboard shortcut chosen emacs anywhere write text delete frame cx q use evilmode emacs anywhere copy text buffer emacs anywhere clipboard delete buffer switch focus window step two paste buffer content text input environment eaeditor environment variable used override way emacsclient run example could put following statement bashprofile export eaeditoremacsclient c environment variable set invocation look like hood emacsclient c e elisp code prefix emacsclient path emacs anywhere ca nt find path environment variable command command description toggleea toggled state emacs anywhere nothing frame deleted variable variable description eaon boolean nil denote state emacs anywhere respectively default value eacopy true emacs anywhere buffer copied clipboard default value eapaste true emacs anywhere paste window launched default value eaappname name application process window emacs anywhere launched eawindowtitle title window emacs anywhere launched eax xcoordinate upperleft corner window emacs anywhere launched eay ycoordinate upperleft corner window emacs anywhere launched eawidth width window emacs anywhere launched eaheight height window emacs anywhere launched note o x window title position size information available application accessiblity permission enabled hook hook function signature description eapopuphook appname windowtitle x w h function run emacs anywhere session start example define function use lambda signature defun popuphandler appname windowtitle x w h stuff hook function addhook eapopuphook popuphandler hook function thing like set major mode based application name window title defun githubconversationp windowtitle stringmatchp pull request windowtitle stringmatchp issue windowtitle defun popuphandler appname windowtitle x w h set major mode cond githubconversationp windowtitle gfmmode markdownmode default major mode set frame size position fit bottom window defun popuphandler appname windowtitle x w h setframeposition selectedframe x h unless zerop w setframesize selectedframe w configure automation setting defun popuphandler appname windowtitle x w h equal appname terminal tell emacs anywhere paste launched terminal setq eapaste nil update emacsanywhereupdate uninstall emacsanywhereuninstall todo contributing tbd license mit copyright zach curry right reserved
205,Lobsters,emacs,Emacs editor,Emacs Lisp Lambda Expressions Are Not Self-Evaluating,http://nullprogram.com/blog/2018/02/22/,emacs lisp lambda expression selfevaluating,taming old dragon requires special hook glibc lispy thing exploiting class bug mail client web server par data downloaded across network wine portable dumper compile time evalafterload talked importance evaluating lambda workaround situation sparked article bytecode object evaluating function object lambda expression selfevaluating dynamic scope lambda expression evaluation idempotent imagine implementation solving problem one character,february week made mistake ultimately enlightened nature function object emacs lisp three kind function object behave differently evaluated object get let talk one emacs embarrassing old misstep evalafterload taming old dragon one longstanding issue emacs loading emacs lisp file el elc slow process even file byte compiled number dirty hack place deal issue biggest nastiest dumper also known unexec emacs routinely use throughout day actually previous instance emacs resurrected dead undead emacs probably created month year earlier back originally compiled first stage compiling emacs compile minimal c core called temacs second stage loading bunch emacs lisp file dumping memory image unportable platformdependent way linux actually requires special hook glibc emacs know love dumped image loaded back memory continuing left compiled regardless feeling matter admit lispy thing two notable cost emacs dumper dumped image contains hardcoded memory address mean emacs position independent executable pie take advantage security feature called address space layout randomization aslr would increase difficulty exploiting class bug might important emacs process untrusted data used mail client web server generally par data downloaded across network possible crosscompile emacs since dumped running temacs target platform experiment attempted dump window version emacs linux using wine unsuccessful good news portable dumper work make lot le nasty adventurous already disable dumping run temacs directly setting cannotdumpyes compile time warned though nondumped emacs take several second worse initialize even begin loading configuration also somewhat buggy since seems nobody ever run way productively major way emacs user worked around slow loading aggressive use lazy loading generally via autoloads major package interactive entry point defined ahead time stub function stub invoked load full package override stub definition finally stub reinvokes new definition argument assist lazy loading evaluated defvar form override existing global variable binding mean certain extent configure package loaded package clobber existing configuration load also explains bizarre interface various hook function like addhook runhooks accept symbol name variable rather value variable would normally case addtolist function thing intended cooperate lazy loading variable may defined yet evalafterload sometimes enough need configuration take place package loaded without forcing load early need tell emacs evaluate code particular package load evalafterload come play except fatal flaw take word eval completely literally first argument evalafterload name package fair enough second argument form passed eval package loaded hold minute general rule thumb calling eval probably something seriously wrong function exception completely wrong mechanism task second argument function either sharp quoted symbol function object instead eval would something sensible like funcall perhaps improved version would named callafterload runafterload big problem passing sexpression left uncompiled due quoted talked importance evaluating lambda evalafterload encourages badly written emacs lisp demand bad evalafterload simplehttpd push c textplain httpdmimetypes corrected emacs second argument evalafterload function result applying functionp nonnil us funcall also new macro withevalafterload package nicely better emacs evalafterload simplehttpd lambda push c textplain httpdmimetypes best emacs withevalafterload simplehttpd push c textplain httpdmimetypes though example compiler likely warn httpdmimetypes defined problem another day workaround need use emacs situation sparked article bad version evalafterload could situate lambda evaluated smuggle resulting function object form passed evalafterload using backquote note subtly broken evalafterload simplehttpd funcall lambda push c textplain httpdmimetypes everything compiled backquoted form evalutes funcall bytecode httpdmimetypes c textplain second value bytecode object however comment note subtly broken cleaner correct way solve named function damage caused evalafterload mostly minimized defun mysimplehttpdhook push c textplain httpdmimetypes evalafterload simplehttpd funcall mysimplehttpdhook let go back anonymous function solution broken evaluating function object evaluating function object happens evaluate expression like one eval look like first eval notice given nonempty list probably function call first argument name function called funcall remaining element argument element must evaluated first result evaluation becomes argument value list symbol selfevaluating evaluates value value symbol treated variable value list go function call process describing one number special case macro expansion lambda expression special form conceptually eval recurses function object function object list symbol selfevaluating problem bytecode object selfevaluating let x bytecompile lambda eq x eval x code compiled rather bytecode object kind function object interpreter let examine dynamic scope shudder case lambda appears evaluate appearance deceiving eval lambda lambda however selfevaluation lambda expression selfevaluating merely coincidence result evaluating lambda expression look like original expression emacs lisp interpreter currently implemented strictly speaking implementation detail happens mostly compatible bytecode object selfevaluating would mistake rely instead dynamic scope lambda expression evaluation idempotent applying eval result return equal identical eq expression contrast selfevaluating value also idempotent evaluation eq result selfevaluating let x lambda eq x eval x nil evaluation idempotent let x lambda equal x eval x let x lambda equal x eval eval x dynamic scope subtly broken backquote example still work sheer luck lexical scope situation lucky lexicalscope lambda closure nil interpreted lambda function neither selfevaluating idempotent passing second argument eval tell use lexical scope shown selfevaluating let x lambda eq x eval x nil idempotent let x lambda equal x eval x nil let x lambda equal x eval eval x error voidfunction closure imagine implementation emacs lisp dynamic scope lambda expression boat even idempotent example lexicalbinding nil lambda totallynotaclosure emacs lisp would work fine change code make kind logical mistake nested evaluation lambda expression would break essentially already happened lot code quietly switched lexical scope emacs lambda idempotency lost wellwritten code notice temptation emacs define closure function special form would allow interpreter closure object either selfevaluating idempotent would mistake would serve hack cover logical mistake lead nested evaluation much better catch problem early solving problem one character fix subtly broken example strategically placed quote right comma evalafterload simplehttpd funcall lambda push c textplain httpdmimetypes form passed evalafterload becomes compiled funcall quote dynamic scope funcall quote lambda lexical scope funcall quote closure quote prevents eval evaluating function object would either needle harmful also argument made perfect situation sharpquote exists quote function
206,Lobsters,emacs,Emacs editor,Deldo is a sex toy control and teledildonics mode for Emacs,https://github.com/qdot/deldo,deldo sex toy control teledildonics mode emacs,deldo,deldo deldo sex toy control teledildonics mode emacs tekedeikdonics archived using rudel video showing feature deldo viewed video script available scriptorg file
207,Lobsters,emacs,Emacs editor,Wanted: Console Text Editor for Windows,https://virtuallyfun.com/2018/02/15/wanted-console-text-editor-for-windows/,wanted console text editor window,vim emacs microemacs elvis xvi stevie vi editor watcom semware tse pro brief manual kinesics text editor aka kit minimum profit fte portable version setedit far manager midnight commander gnu nano jed web page ednt pdf manual hessling editor programmer editor editor wordstar emacs vi pico nedit tde build aurora osplus text editor ht microsoft editor z editor microsoft c sdked blog post kedit make one textadept micro,guest post antoni sawicki aka tenox since microsoft pushing concept running window server headless without gui administering everything powershell remember sitting countless teched ignite session year year could see blue powershell command prompt everywhere wizard form mmc gui based administration suddenly thing past take look server core winpe nano p remoting window ssh server recovery console emergency management service even system center front end powershell nowadays everything seems text mode overall good news great improvement since previous generation window need create edit powershell cmd script config file oooops look like screwed seems redmond forgot include crucial tool sysadmin job simple text mode editor wtf microsoft party alternative yes quite lot unfortunately none perfect old unmaintained article aim grand tour whatever available note throughout article repeatedly referring portable editor mean single exe file carried around usb pen drive network share also cry lot window build work lot winpe environment available first let start obvious choice well known intertubes search window console editor vim emacs naturally pop firstthese editor need introduction praising use vim every day emacs every two port window long remember term quality stability definitely top problem completely foreign plain unusable typical window user learning curve pretty steep also portability suffers lot least emacs editor come hundred supporting file massive size emacsexe binary whopping mb size zip file contains two case whole unpacked folder mb emacs window console vim fortunately much much better extract single vimexe binary package use without much complaint vim window console talking vi emacs hard mention historical version emacs little brother microemacs available window since earliest day going attempt link particular one since many flavor microemacs vim little brother vi also come different shape form let take look elvis elvis window xvi xvi window stevie special case rumor editor played crucial role development window nt used since earliest day nt part private sdk could ever look window source code bet could probably find buried inside ported folk redmond quality pretty good unfortunately readme state incomplete vi fully tested use risk historical note according wikipedia stevie port amiga used bram moolenaar base source code vim stevie window aka nt vi one particularly interesting case vi editor watcom compiler suite nice tui known msdos editor syntax highlighting online help one nicest version vi available window small portable around handy editor probably main go text editor working winpe server core unfortunately well known hope gain popularity deserves openwatcom vi editor thanks federico bianchi learned busbybox port window build portable single exe file importantly contains working vi editor understands window resizing path going keeping one around awesome job busybox last thought wish also included nano busybox vi editor want article vi emacs clone let nice color menu segue native window do editor least departing hardcore keystroke unix change theme let look semware tse pro editor originally started qedit do advanced feature one could ever imagine text mode editor including resizable window hex editor macro spell checker really wish could use everyday life unfortunately tse drawback lack portable version install little cumbersome currently build author working tse free license allows install many machine need semware tse pro next one brief used popular time sparked quite bit following numerous editor brief style nice small console based text editor come two version basic free professional paid pro version support splitting multiple window regexp unicode unfortunately run per user build portable edition brief also open source clone brief called grief flipping manual impressive set feature including windowing feature macro unfortunately rather unportable due large amount dll file build could probably made someone wanted grief free brief clone talk le costly option kinesics text editor aka kit well known search google completely free installing find binary file make somewhat portable able run winpe instance recently editor version chance use much practice tui appears well rounded easy use right mouse click brings menu seem advanced feature stable actively maintained frankly matter editing console may actually right missing window console editor kinesics aka kit another one minimum profit fully open source support lot platform windowing text mode lot interesting feature syntax highlighting spell checked menu easily made portable need lot file scripting language also find screen refresh somewhat funky update version available minimum profit let look somewhat well known fte nice text editor available many platform qnx course window nice tui split window syntax highlighting folding bookmark tool html authoring etc overall awesome editor falling short tse support nt console available since recently fixed couple bug built portable version fte editor one could also forget borland turbo c ide apparently open source clone ide regular editor called setedit multi platform editor msdos style window menu syntax highlighting macro regular amenity look like do version play song code native winnt build made bcpp run window install do version overwrite do exe file win nt exe editor absolutely awesome unfortunately currently work portable manner binary however open source could probably made setedit borland turbo c ide clone talking msdos style window norton commander like file manager come mind one particular built specifically window far manager written author winrar originally shareware since released bsd license far come built text editor hence featured actively supported developed designed ground window probably stable trustworthy application post normally use much keep copy lying around need heavy lifting window console binary default unfortunately far hardly made portable come file far manager text editor talking norton commander clone let forget midnight commander unofficial native window console build called similar far mc nice builtin text editor mc overall seems far nicer far multi platform rather window specific officially supported trust much day day use gnu midnight commander topic unix let talk gnu nano native habitat popular stable editor making perfect choice text mode console unfortunately window port lacking quite lot especially thing like resizing window handling file name official build look like fusion cygwin mingw pdcurses horrible stuff version come mingwmsys portable far failed attempt build static window binary hand nano predecessor uw pico unfortunately never console terminal window port author pine decided make semi graphical application window menu button sad story pico nano hopefully one day someone make native window port another nonvi nonemacs unix editor window console port jed frankly used jed much past although play original web page jed editor seem menu multi window unfortunately look like easily made portable image jed port yet another obscure editor ednt dec edt clone unfortunately seems completely dead unmaintained source still available archiveorg perhaps could still looked someone wanted edt editor window ednt going obscurity via archiveorg one also mention zabed specifically console version know anything editor little lazy play extensively although pdf manual available probably little old obscure every day use perhaps even obscure mere mortal hessling editor aka based vmcms editor xedit briefly use vmcms xedit early never liked much come native binary easily portable requires additional file also binary source code available aka hessling editor thanks andreas kohl learned programmer editor also nt console version editor seems nice extensive help syntax highlighting etc unfortunately never used editor last version released loo long ago sadly update since hope author continue maintain programmer editor andreas also brought personal editor come look like really well maintained stable editor designed developed specifically window bit version really cool however editor seem portable license probably prevent using professionally environment would need never le look like fine editor another find editor pretty interesting stuff written assembler available many operating system including do window look like still maintained last version released support multiple mode wordstar emacs vi pico nedit renaming linking main executable definitely portable need extra file exe take emacs unfortunately assembler think release time soon overall seem really cool keep one around editor really cool last minute find public domain tde thomsondavis editor released long ago do window console executable do style menu syntax highlighting resizable window bunch feature look like handy editor know miss since source code available able make build really untested use risk tde also recent find shareware editor called aurora never chance use past taking quick spin fell love text mode ui feel like windowing operating system originally do unix port relatively new unfortunately longer maintained even sold sad editor extremely cool hope author may willing release source code could maintained aurora thanks richard well learned osplus text editor really cool little editor borland style tui multi window seem advanced feature built calculator allows background play wav mid also allows format conversion various format like word write rtf text using microsoft office converter pretty cool need read word based documentation text console sadly look like application longer maintained guess little bit luck version could compiled using msvc osplus text editor also recently learned ht intended binaryexehex editor analyzer however seems excellent plain text editor html c syntax highlighting advanced feature one stand detailed change log much like photoshop history show exactly changed order pretty cool heavy editing important file latest version portable single exe unfortunately guess easy enough build one ht freshly rediscovered microsoft editor editor port mark zbikowski port z editor msdos widely used microsoft c mep sdk sdked shockingly look like window nt actually console mode text editor since earliest day even earlier included window nt prerelease cd later official window sdks hiding plain sight console mode mepexe microsoft included editor window world would different place recently dug sdk made available also additional build including dedicated blog post microsoft editor aka mep aka z many commercial editor open source edition z named kedit modern reimplementation scratch written c lua build window probably chance version today author k provide ready binary able make one k editor window reader brdlph pointed pretty fresh editor named textadept cross platform gui tui editor window console version us curse performs remarkably well look feel modern programmer text editor syntax highlighting line number etc zip archive come file rather portable also seem window build although one linux application seem well maintained latest release january textadept reader andreas kohl mentioned slickedit text mode editor do window console visual slickedit stole name according company employee version editor used window nt team member develop operating system early day slickedit cto traveled redmond port application barely yet functioning nt console system developer could use native dev environment slickedit likely fist commercial application window nt available alpha mips powerpc edition hoping obtain old evaluation copy far able get screenshot slickedit window last least new kid block micro modern time editor platform including window look really cool seem recent amenity editor sublime text atom multi window syntax highlighting even built terminal emulator running subshell micro portable come single exe file mb size think well worth keeping around unfortunately builtin file browser yes plugin know use also seems issue window style path name however really happy new editor developed recent time great chance becoming missing window text mode editor future definitely worth keeping eye micro editor positive news time wrap summarize currently perfect text mode editor window hope microsoft one day step provide one mean time usually stick around openwatcom vi far manager people wish learn vi kinesics kit may probably perfect editor short term micro future also hope someone make good gnu nano port using native apis without going pdcurses cygwin thank suggestion forgotten missed editor please let know promptly add list note please include editor work cygwin
209,Lobsters,emacs,Emacs editor,Emacs Rocks!: Magit,https://www.youtube.com/watch?v=rzQEIRRJ2T0,emacs rock magit,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature emacs rock episode magit youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature emacs rock episode magit youtube
210,Lobsters,emacs,Emacs editor,Dwarf Fortress and ivy-mode,http://vfoley.xyz/ivy-df/,dwarf fortress ivymode,dwarf fortress ivymode dwarf fortress ivy,dwarf fortress ivymode nov new version dwarf fortress released last week incentive needed start playing suck df love game savantly combine depth complete wackiness oldschool lookandfeel certainly appeal yet think game least one huge flaw menu system make ed look positively userfriendly comparison lot task one perform dwarf fortress select region dug build kind shop accessory manage militia etc task accessed keyboard navigating menu consider instance build main menu idiosyncracies menu item ordered alphabetically grouped related task new played need read entire list find want menu item hotkeys necessarily match instance seat shortcut c chair presumably c wallfloorstairstrack construct tell looking item menu open submenu eg workshop wallfloorstairstrack hunting task perform could read item menu without finding looking clue right track looking two submenu see idiosyncracies unordered item unrelated keyboard shortcut also floor submenu floor hatch primary menu tarn adam main developer dwarf fortress said little interest making menu better constantly add remove item still wonder would possible make dwarf fortress interface better little development overhead think ivy gnu emacs package provides attractive solution problem ivy completion narrowing framework replaces emacs default autocompletion system much powerful user need enter information completed ivy show possibilites user navigate list type narrow list possibility example ivy showing file managed git project mine use updown pageuppagedown key move selected element also type fragment narrow list screenshot typed term one result left pressing enter open file thanks ivy integration emacs external tool git grep etc user quickly find jump anything want file function man page search string etc kind design would work quite well dwarf fortress rather searching haphazardly menu player could open small window enter substring quickly select action want perform used ivy mock system would look like know else think type interface good idea tarn adam indeed screen dwarf fortress exact interface management screen allows player efficiently issue order eg construct wooden barrel management screen contains hundred screenshot show screen look like first filtering interface ideal management screen typing wood bar tarn adam probably want focus magic system yes code dwarf fortress closed however community dedicated enough people created tool interact dwarf fortress eg dwarf therapist also improve dwarf fortress dfhack perhaps motivated hacker attempt improve ui leveraging searchnarrow framework already inside dwarf fortress
211,Lobsters,emacs,Emacs editor,[EXPERIMENT] Emacs with the SpiderMonkey garbage collector,http://lists.gnu.org/archive/html/emacs-devel/2017-11/msg00575.html,experiment emacs spidermonkey garbage collector,date prev date next thread prev thread next date index thread index experiment emacs spidermonkey garbage collector http githubcompipcetemacstreec experiment emacs spidermonkey garbage collector experiment emacs spidermonkey garbage collector,date prev date next thread prev thread next date index thread index experiment emacs spidermonkey garbage collector pip cet subject experiment emacs spidermonkey garbage collector date thu nov hello everyone typing version emacs us spidermonkey mozilla javascript engine garbage collector succeeded starting first time experiment perfectly happy abandon leave learned think interesting experiment might help actually wanting use different garbage collector official version emacs code available http githubcompipcetemacstreec code wo nt work asis yet afraid trying figure get gnulib file build c also missing recent change hoping fix soon actually want try thing might best contact email also anyone could help find better place host free software would much appreciated experiment currently slow unstable contains known bug work except gnulinux x specific hacked version spidermonkey library leak memory provides practical advantage official emacs writing trying decide much time spend would appreciate comment feedback course question main difference current markandsweep garbage collector spidermonkey garbage collector latter copying garbage collector precise meaning object may change address gc typed value memory location might might must traced minor difference gc happen time code javascript api meaning longer get away stretch code never gc hoping find bug official emacs process mostly unsuccessful found bug one introduced previous change let describe detail change made made make emacs compile cc g cflags fpermissive harder sound fact ended writing simple parser emacs c unpreprocessed source code appears repository performing necessary replacement automatically side effect declaration form int x rewritten int x int replace lispobject source code plan use j value object instead lispobject order properly use spidermonkey stack object must rooted decided use separate type stack value value structs live stack b value heap c value structs live heap return value e function argument order elispvalue elispheapvalue elispstructvalue elispreturnvalue elisphandle lispobject value need protected pointer lispobject need simple elisppointer type currently bloated determines run time whether pointing elispvalue elispstructvalue well vector resizeable array array fixed size type luckily able modify ctoc conversion script determine automatically replacement type use instance lispobject emacs source code fact decided keep approach modifying c source code little necessary turning c h file src directory c ccc hhh file ideally modifying resulting c file currently quite clean way replace lisph replacement jslisphhh defines elispvalue etc c type based spidermonkey j value nonnan double nanboxed object pointer integer undefined null javascript symbol string using double integer javascript object string symbol javascript object including qnil object point using jsgetprivate pointer unmovable structure memory turn contains copy javascript value represents combine disadvantage moving nonmoving garbage collector good enough experiment elispvalue example rooted type nontrivial constructor register j value contains root list destructor remove ordinary code otherwise use much like lispobject apart beginning javascript value actual constantaddress structure mostly unchanged moved lispobject struct member previously nt gc nt need pseudovector lispobject area could trace replace allocc allocc married current garbage collector needed replaced simplified order leave memory management spidermonkey instead new file jsccc contains new rootingtracing code register hook spidermonkey garbage collector trace directly indirectly emacs data except stack value traced spidermonkey stack unwinding emacs us setjmp longjmp think code converted use c exception instead decided would easier make stack unwinding work spidermonkey problem destructors intervening stack frame called unwinding stack must find destroy object unwindtocatch turn easily possible though violate spidermonkey api accessing field private structure save stack pointer struct handler structure compare current stack pointer upon entering unwindtocatch walk root list find rooted object live intervening stack region destroy autorooted vector work way use slightly different code calling convention usual spidermonkey calling convention function return gc type argument handle essentially readonly pointer j value decided return j value object directly except wrapped another class open race condition function returning elispreturntype value illegal call another function g g return value traced trigger gc moved segfault worse possible extend ctoc script deal automatically assigning elispvalue temporary situation also decided pas function argument j value object rooting callee instead decision open revision misc union turned structs order ease tracing structs duplicated stack heap version many previouslyunrooted nt need object staticpro added directly tracing code elisppointer data type representing pointer j value modified require explicitlynamed method rather operator overloading catch bug introduced new bug finally much debugging emacs showed usable frame nt think right spidermonkeyspecific code emacs nt need pretty much automatic api emacs garbage collector good enough spidermonkey trivially implemented existing markandsweep garbage collector like make work making little code possible depend innards elispvalue etc advocate switching garbage collection mechanism official emacs converting official emacs c renaming lispobjects official emacs advocate making official emacs compile g fpermissive option help experiment also think way make easier future switch complicated garbage collector investigate need think ctoc converter seems potentially useful project initial approach try coccinelle never got work right extended provide temporary variable automatically point change calling convention back one us handle readonly argument using jsobject structure everything wasteful particularly case con cell require byte think possible modify spidermonkey assign unique tag con cell allowing u get byte car cdr hash value longer use address might change like get away dual constantaddressstructurepointeronlyjsobject approach could use jsobjects store rarelyneeded property javascript property store commonlyused data private structure case forego private structure entirely con cell unimplemented list incomplete nonx environment nongnulinux environment weak hash table finalizers finalizing marker thread unclear whether possible module image sound debuggingbacktraces dumping currently using cannotdumpyes supposed work nt without change initial lisp file sure ever work reduce warning fpermissive produce copious warning valid need fixed code right ignoring long result work remove fpermissive signal handler need protected specially ctoc converter operator precedence global perchunk data function prototype performance one place us false null garbage collection marker number marker per buffer mean tends dominate gc scenario including typical usage trivial fix javascript nt distinguish integer floatingpoint number spidermonkey relevant emacs sometimes us floatingpoint argument mean something different equivalent integer argument sorry got quite long comment private public would appreciated experiment emacs spidermonkey garbage collector pip cet experiment emacs spidermonkey garbage collector stefan monnier
214,Lobsters,emacs,Emacs editor,Introducing ivy-feedwrangler: An Emacs package for Feedwrangler,https://adamsimpson.net/writing/introducing-ivy-feedwrangler,introducing ivyfeedwrangler emacs package feedwrangler,ivy package write small package feedwrangler install package via melpa ivy github repo ivyfeedwrangler inline image authinfo elfeed feedwrangler api,secret become quite emacs fan past couple year one favorite thing emacs ivy package counsel swiper course exploring ivy capable idea write small package used ivy interface r service choice feedwrangler check repository install package via melpa ivy ivy according github repo generic completion mechanism emacs quite simply ivy interface quickly working list data whether ivyfeedwrangler ivy make manipulating filtering list super quick easy fact say quickest way work kind data working r feed lightning fast feature ivyfeedwrangler mark individual post read mark read view text post inside buffer emacs support inline image quickly filter unread item since ivy handle regex box us authinfo handle authentication us gpg encrypt credential big perk using ivyfeedwrangler unlike elfeed package r emacs interacts directly feedwrangler api mean read thing emacs state synced correctly phone viceversa feedwrangler account give ivyfeedwrangler try let know think
215,Lobsters,emacs,Emacs editor,Emacs on the Linux Subsystem for Windows,http://www.lonecpluspluscoder.com/2017/11/15/emacs-on-the-linux-subsystem-for-windows/,emacs linux subsystem window,xming vcxsrv previous instruction building gnu emacs ubuntu,linux subsystem window enabled quite time beta release fall creator update ended redoing setup scratch usual grabbed emacs bunch package initially disappointed looking textmode emacs might something lack x free x server window choice xming vcxsrv used xming long time ago happy pay software decided go something free initial proof concept plus curious vcxsrv picked really like installer includes everything needed right box including font brief install export ubuntu command line ubuntu emacs running window window desktop without using thirdparty vm desktop running xwindows gnu emacs running linux subsystem window far good given ubuntu subsystem window running ubuntu lts older version emacs specifically emacs clearly also rather curious ubuntu subsystem good enough previous instruction building gnu emacs ubuntu would work let go find first time install build dependency emacs timo hgreposlonecppwp sudo aptget builddep sudo password timo reading package list done e must put source uris sourceslist ah well entirely unexpected source repository enabled easy normally enable gui first figure enable command line turn easy edit etcaptsourceslist uncomment debsrc line job done uncommented debsrc entry main restricted universe multiverse repository might needed work fine also forget run sudo apt update enabling repos install build dependency sudo apt builddep long download usual plethora package everything place build emacs source sticking usual approach using current release version tried building emacs first usual configuremakemake install dance get far unfortunately dumping name emacs warning system gap bs heap byte usually mean execshield something similar effect dump may fail see section execshield etcproblems information recipe target bootstrapemacs failed make bootstrapemacs segmentation fault core dumped make leaving directory recipe target src failed make src error oops much time research issue yet look like might hit quirk linux subsystem window necessarily present ubuntu lts quick test tried build different version picked emacs pretest suitable version hey nothing like bit living edge keep everything inside ubuntu linux subsystem pulled using wget ran usual sequence configuremakemake install wget ftp cd builddir tar xvjf cd configure prefix homelocal make make install surprisingly good news pretest built fine core dump dumping emacs quick check confirmed running fine terminal window yay text mode running gnu emacs pretest linux subsystem window time push boundary especially fall creator update linux subsystem window support xgui application per microsoft unfortunately build attempting run resulting binary gui executable produced bunch error empty window contained menu bar localbinemacs glibgobjectwarning invalid unclassed pointer cast gtkwidget gtkcritical gtkwidgethide assertion gtkiswidget widget failed glibgobjectwarning invalid unclassed pointer cast gobject glibgobjectcritical gobjectgetdata assertion gisobject object failed guess might attempt push thing little far microsoft say xgui apps supposed work simple fact able get stock emacs working big surprise may try figure causing error see get emacs pretest working x window well find spare related
216,Lobsters,emacs,Emacs editor,"Emacs Horrors - Chirp, chirp",http://emacshorrors.com/posts/chirp-chirp.html,emacs horror chirp chirp,twitteringmode compatibility check emacs version bundled entirety urlel inline certificate hashing gpg helper uncommon variant last form source twaddle,casually mentioned emacsde twitteringmode ten thousand line code aid evaluation twitter client emacs take cursory look source really mind first compatibility check emacs version load bundled entirety urlel using inline certificate like antique japanese emacs lisp floating around reinvents half networkrelated functionality recent emacs release come including pure emacs lisp implementation hashing obscure gpg helper hack existing json xml parser support fallback uncommon variant even speak way actually twitterrelated functionality implemented like marvel last form source progn boundp intern mapconcat identity twittering oauth consumer key eval setq intern mapconcat quote identity quote twittering oauth consumer key apply string mapcar quote boundp intern mapconcat identity twittering oauth consumer secret eval setq intern mapconcat identity twittering oauth consumer secret apply string mapcar quote first time ever seen lisp obfuscation leave taking apart exercise inclined reader edit case wondering evaluation went twaddle considered easier hack understand
217,Lobsters,emacs,Emacs editor,Elnode: Backend web services in elisp,https://www.emacswiki.org/emacs/Elnode,elnode backend web service elisp,httpserver emacslisp elnode emacslisp emacslisp nodejs select function elnode good emacslisp nodejs using builtin wiki example elnode org example nicferrier github project getting elnode elnode database elnode nicferrier mongodb postgresql talking elnode tutorial elnode nicferrier categoryextensions,elnode asynchronous httpserver framework use write http service emacslisp elnode access log bufferwhat elnode iselnode nonblocking io webserver written entirely emacslisp like emacslisp version nodejselnode performance better expected get request per second limiting factor likely emacs async io us select function replacing epoll fast equivalent would likely give u nodejs like performanceelnode come webserver wiki server applicationwhat elnode good elnode optimized rapid development designed get going quickly emacs great development environment emacslisp elnode application rapid easy buildsome suggestion elnode useful personal webserver easy mix file serving wiki serving hackselnode serve emacs data especially exciting emacs data often locked away like diaryelnode defer processing could also used writing general purpose comet apps nodejs nodejs evented io server framework javascript nodejs browser thing server side thing write event driven server mean write code single process rely natural blocking client give concurrency course standard technique spawn process handle work communicating asynchronouslyusing builtin wikiinstalling latest version elnode automatically install working wiki webserver apps listening port webserver default serf file example included emacsdelnodepublichtml lot stuff builtin webserver including serf file configured elnode customizations mx customizegroup ret elnode ret see allthe wiki server default serf wiki page emacsdelnodewiki configured tooan example elnodewant publish directory orgmode file full elnode program defines handler publish org file directory also start server port defvar myorgdir workorg defun myelnodeorghandler httpcon elnodedocrootfor myorgdir orgfile httpcon withcurrentbuffer findfilenoselect orgfile let orghtml orgexportashtml nil string elnodesendhtml httpcon orghtml elnodestart myelnodeorghandler port visit one file directly bit work would adding index could pick orgfile wanted look atmore org exampleslot people ask orgmode elnode integration nicferrier started specific github project package tool utilsgetting elnodethe latest version elnode latest development version elnode includes magic make webserver wiki work box configproper child processing async spawned child process communicate elnode serversfixes bit piece version planned include easy logging processesheroku runnabilitya stable vagrant imagea stable ami running elnode amazon databasesbecause database access important part web application elnode includes simple database layer builtin implementation serializes lisp object filesother database implementation worked nicferrier working mongodb implementation postgresql implementationtalking elnodewe talk elnode emacs often shout people emacs know quite lot elnode toowe mailing list yet would like provide one ad free please please get toucha tutorial elnodepeople asked tutorial nicferrier started make one progress hereyou need latest version elnode make tutorial workcategoryextensions
218,Lobsters,emacs,Emacs editor,Emacs Lisp Guide (2014),https://github.com/chrisdone/elisp-guide,emacs lisp guide,emacs lisp guide table content audience alternative source programming emacs lisp emacs lisp one important difference dynamic binding lexical binding read manual leisure reading guide manual trivial basic see manual manual manual evaluation discoverability finding function keybindings getting documentation find binding current buffer searching documentation topic jumping definition elispslimenav describe function basic concept buffer buffer bufferlocal variable manual projectwide bufferlocal variable file point manual entry point narrowing region manual text property debugging editing paredit paredit smartparens lispy navigating killing raising wrapping splitting manipulating buffer text property navigating buffer save excursion querying buffer temporary buffer defining interactive function see manual defining major mode manual defining minor mode manual marker manual overlay manual overlay standard practice namespacing alternative source,emacs lisp guide table content audience programmer busy read long tutorial manual want extend editor nt need learn everything ground enough knowledge selfsufficient using emacs time started making handy extension bunch existing guide nt strike right balance useful helpful list function others try explain emacs lisp ground language nt need know everything right away see alternative source section list programming emacs lisp going explain emacs lisp language detail programming emacs lisp look wikipedia page academic detail similar programming python scheme common lisp javascript ruby language like syntax funny otherwise imperative language similar data structure one important difference compared usual language aware dynamic scope default see dynamic binding manual detail almost emacs lisp code come across today using lexical binding recently added emacs take permeate like lisp emacs lisp macro read manual leisure reading guide best comprehensive resource emacs lisp manual reference manual throughout guide repeat already reference manually random access fashion need solve problem reference manual throughout guide html link read inside emacs run ch elisp ret trivial basic basic syntax lookup guide looking emacs lisp code assuming programmer pick thing like looking code include use later concat b defun func always document function function body defvar varname value always document variable let x lisp normal let nt let refer previous variable need use let likely trip people include many thing one expression use progn see manual detail way set variable obvious equality comparison operator eq majormode string b string b emacs lisp bunch equality operator see manual gory detail data structure available list vector ring hashtables look manual evaluation use evaluate emacs lisp expression print result personally use constantly use cx ce evaluate previous sexpression buffer personally never use see next binding use cmx evaluate current toplevel sexpression use reapply defvar defun declaration repl available mx ielm tend use rather repl might like use mx evalbuffer evaluate whole buffer emacs lisp code discoverability important thing emacs lisp programmer able get information want keystroke list way find need writing elisp code finding function keybindings find function called keybinding ch k show something like cp run command previousline interactive compiled lisp function simpleel bound cp previousline optional arg tryvscroll click link simpleel go directly definition function handy indeed getting documentation function variable distinguished emacs lisp two command lookup run ch f show documentation function also work macro run ch v show documentation variable see something like mapcar builtin function c source code mapcar function sequence apply function element sequence make list result result list long sequence sequence may list vector boolvector string find binding current buffer run ch b show massive list keybindings command run see something like eg markdownmode cc cx markdownmovedown cc cx l markdownpromote cc cx markdowninsertlistitem searching documentation topic use command called apropos mx apropos mx aproposcommand mx aproposlibrary mx aproposdocumentation jumping definition install package elispslimenav use jump identifer point jump back describe function range mx describe function useful mx describemode aka ch mx describeface one mentioned keybindings basic concept buffer emacs lisp code run current buffer operation claim work buffer work current buffer handy function run ch f get info currentbuffer get current buffer withcurrentbuffer bufferorname temporarily use given buffer setbuffer bufferorname set current buffer without switching switchtobuffer name switch buffer visually see buffer manual detailed info bufferlocal variable buffer local variable example use variable see mode need want set bufferlocal variable use defvar yourvariablename nil documentation later code run given buffer use set makelocalvariable yourvariablename thevalue handy many scenario writing functionality note buffer local variable reset revert buffer change mode see manual detail projectwide bufferlocal variable handy way set buffer local variable every file within directory structure use dirlocalsel file nil indenttabsmode fillcolumn cmode cfilestyle bsd subdirs nil srcimported nil changelogdefaultname changeloglocal point emacs lisp code current point current buffer number refers cursor see manual entry point basic point current point pointmax maximum point buffer pointmin minimum point buffer narrowing region sometimes region active use emacs lisp code manipulate text specially see manual detail rundown regionbeginning beginning region point regionend end region point useregionp whether try use regionbeginningregionend manipulation handy use command regionactivep also handy know whether region active command us region function defun printupperregion demo print uppercased version active region interactive regionactivep message let string buffersubstring regionbeginning regionend withtempbuffer insert string upcaseregion pointmin pointmax buffersubstringnoproperties pointmin pointmax run cmx select text run mx printupperregion text property manipulate text elisp property applied property queried full detail see manipulating buffer section guide example debugging run setq debugonerror ret error open debugger write using debugger stepper breakpoints later editing paredit install enable paredit nobody sane writes lisp without paredit shiny cousin smartparens evil twin lispy never unbalanced parenthesis bracket brace string learn accept enjoy mode discussed discoverability section use ch f pareditmode ret see documentation mode learn following helpful keybindings navigating cmu go node go end node end parent node repeated cmf go end node cmb go start node killing ck kill everything end line including following line included scope node killed also kill inside string stop end string raising mr replace parent node current node foo foo foo bar mu bar foo bar mu zot bob foo mu bob wrapping cm wrap following node parens alternatively cmspc select whole node use normal region selection run wrap selection splitting m split current node work parenthesized expression string mj join two node work reverse manipulating buffer common insert foo bar insert text point deleteregion start end delete region text insertbuffersubstringnoproperties buffer start end insert text another buffer insertfilecontents filename insert file command insert thing called emacs lisp text property add property text buffer use puttextproperty start end mypropertyname value completely reset property text use settextproperties start end mypropertyname value retrieve property back text use gettextproperty point mypropertyname propertize string inserted buffer use propertize hello mypropertyname value anotherprop navigating buffer common one gotochar point go point forwardchar n go forward n char accepts negative argument endofline selfexplanatory beginningofline selfexplanatory skipcharsforward char skip given char skipcharsbackward char skip given char back searchforward foo search foo move cursor searchbackward foo search backward searchforwardregexp blah regexes searchbackwardregexp blah regexes kind navigation want nt know function name think would keyboard use ch k command find function run save excursion often want jump around buffer either query manipulate something go back originally use example saveexcursion beginningofline lookingat x return whether current line start x similarly savewindowexcursion querying buffer buffersubstring start end get string point including text property buffersubstringnoproperties start end get string point excluding text property bufferstring return string whole buffer lookingat azaz text following point match regex lookingback azaz text preceding point match regex temporary buffer often useful work temporary buffer use normal elisp code generate string property example withtempbuffer insert hello defining interactive function able run function keybinding need interactive need add interactive defun defun foo function interactive dosomestuff bunch variation interactive see manual function foo interactive use keybinding definekey emacslispmode kbd cc cf foo defining major mode generally use definederivedmode see manual example definederivedmode hypertextmode textmode hypertext major mode hypertext hypertextmodemap setq casefoldsearch nil definekey hypertextmodemap dohyperlink defining minor mode minor mode act enhancement existing mode see manual defineminormode dummy example defvar elispguidemodemap makesparsekeymap defineminormode elispguidemode simple minor mode example lighter elguide keymap elispguidemodemap boundandtruep elispguidemode message elisp guide activated message bye definekey elispguidemodemap kbd cc ca elispguidego defun elispguidego interactive message go run mx elispguidemode activate run disable real example minor mode marker marker handy object store point change buffer make marker position move along see manual good section explaining usecase probably intermediate tutorial like include aware example defun myindentregion beg end interactive r let marker makemarker setmarker marker regionend gotochar regionbeginning point marker funcall indentlinefunction forwardline need store end region start changing buffer integer position increase start indenting line store marker marker value update buffer content change overlay see manual overlay handy tool special kind text behaves separate buffer advanced time want use overlay happy reading manual entry standard practice namespacing emacs lisp nt support module go convention module name foo name toplevel binding prefixing foo example defun foogo go provide foo make easier finger use something like defun emacslispexpandclever cleverly expand symbol normal dabbrevexpand also symbol foo expand modulenamefoo interactive saveexcursion backwardsexp lookingat searchforward lookingat eq lastcommand thiscommand callinteractively dabbrevexpand let modulename emacslispmodulename progn saveexcursion backwardsexp lookingat searchforward unless string buffersubstringnoproperties point min pointmax point length modulename modulename insert modulename callinteractively dabbrevexpand callinteractively dabbrevexpand defun emacslispmodulename search buffer provide declaration saveexcursion gotochar pointmin searchforwardregexp provide nil symbolname symbolatpoint definekey emacslispmodemap kbd emacslispexpandclever write defun blah get defun fooblah need provide foo line bottom file work alternative source
219,Lobsters,emacs,Emacs editor,Emacs Rocks! Episode 17: magit,http://emacsrocks.com/e17.html,emacs rock episode magit,emacs rock,emacs rock episode magitvideowant download episode use youtubedl great
220,Lobsters,emacs,Emacs editor,Treemacs - a tree layout file explorer for Emacs,https://github.com/Alexander-Miller/treemacs,treemacs tree layout file explorer emacs,treemacs tree layout file explorer emacs content quick feature overview winum acewindow projectile fancy gifs quick start detailed feature list project workspace workspace selection conveniently editing project workspace navigation without project workspace frame locality mouse interface followmode tagfollowmode fringeindicatormode gitmode filewatchmode session persistence terminal compatibility highly customizable tag view ggtags currentdirectory awareness tramp support org support theme support configuration additional package treemacsevil treemacsprojectile treemacsmagit treemacsiconsdired treemacspersptreemacsperspective treemacsalltheicons alltheicons treemacs framework see installation configuration variable sidewindow face evil compatibility customizing theme icon creating modifying theme custom icon icon according gui v tui resizing icon alltheicons indent issue indent guide keymap unbound function default keymaps project keybinds prefix workspace keybinds prefix node visit keybinds prefix toggle keybinds prefix copy keybinds prefix general keybinds compatibility persp perspective eyebrowse popwin windowpurpose shackle emacs bug faq link prefix argument contributing config table commit working code base wiki dependency,treemacs tree layout file explorer emacs content quick feature overview treemacs file project explorer similar neotree vim nerdtree largely inspired project explorer eclipse show file system outline project simple tree layout allowing quick navigation exploration also possessing basic file management utility specifically quick feature overview look follows project managementtreemacs let view multiple file tree project quickly add remove group project workspace easy navigationquickly move project use shortcut jump parent neighbouring node versatile file accessdecide exactly file opened including using acewindow choose window launching external application understanding framesevery frame receive treemacs buffer live die frame finding file tagstreemacs follow along keep focus currently selected file even tag point using either manually automatically using either treemacsfollowmode treemacstagfollowmode git integrationtreemacs use different face file directory based git status git process run asynchronously minimizing performance impact winum acewindow compatibilitythe presence treemacs interfere winum acewindow usual layout projectile integrationthe treemacsprojectile package let quickly add projectile project treemacs workspace simple mouse interfaceleft click work used graphical application session persistencetreemacs automatically save restores workspace dashing good lookstreemacs us optionally resizable png image hd resolution icon quantity course another matter run terminal simple fallback used tag viewtreemacs display file tag file type emacs generate semantic imenu index supported visual feedbackwhen would otherwise difficult see message minibuffer successfailure indicated pulseel theming supporttreemacs support using multiple icon theme changed ease usetreemacs offer many configuration option come set hopefully sane default installation aside two obligatory piece setup choosing convenient keybindings run treemacs use evil requiring treemacsevil integrate treemacs evil enable jk navigation also summon helpful hydra remind treemacs many keybindings feature bookmark integrationrunning bookmarkset treemacs item store bookmark treemacs buffer item fancy gifs various way open file workspace administration orgmode automatic reaction change file system automatic reaction change git fullfeatured mouse interface resizable icon quick start care reading full readme list bare bone basic get started first press summon helpful hydra use evil forget also install treemacsevil use projectile install treemacsprojectile allow quickly add projectile project treemacs treemacs bind global key need use whatever fit best full install setup found otherwise add keybind treemacs navigation use np jk evil mnmp move sameheight neighbour u go parent cnck move project half dozen different way open node bound prefix pick favourite tab ret particularly configurable see treemacstabretactionsconfig project administration bound cc cp prefix detailed feature list project workspace previously used different explorer like neotree nerdtree earlier version treemacs matter probably used display system wherein see exactly single file tree whose exact root arbitrarily change system make difficult work switch multiple project treemacs used still remedy limitation making every treemacs buffer unique frame redesigned able display multiple file tree project treemacs workspace simply named collection project project mostly consists thing location file system name info need provide want add new project workspace like project add remove rename switch workspace time design approach various advantage disadvantage longer possible free roam file system treemacs ie longer arbitrarily switch single file tree root directory point current root parent another restriction part file system may appear part workspace example possible document documentsprojectx project workspace since internally treemacs heavily relies every node unique natural key absolute path nonetheless pro certainly outweigh con multiroot setup allows work multiple project combination concernbuffer separating framework perspperspective eyebrowse projectile also open potential concurrent display file system eg currently open buffer workspace selection workspace first needed treemacs select workspace following manner current buffer editing file treemacs try find first workspace project containing file fails treemacs resort using fallback workspace defined simply first element list workspace order workspace see calling treemacseditworkspaces see next chapter interactively set fall backback workspace calling treemacssetfallbackworkspace selection happen treemacs first started command like treemacsselectwindow function requires current workspace known used like adding removing project conveniently editing project workspace two way edit project workspace call single addremoverenameswitch command either cc cp cc cw prefix call treemacseditworkspaces edit entire layout form single orgmode buffer used orgformat quite simple level headline name workspace level headline name project workspace every project path given description list starting optional leading space empty line line starting ignored everything else lead error worry making mistake either something wrong call treemacsfinishedit cc cc treemacs point incorrect line tell missing note list path property allows indentation space much greater visible indentation caused orgindentmode navigation without project workspace strict workspace project structure described stringent usecase certain circumstance use treemacs freely navigate file system similar dired workspace contains exactly single project use h l treemacsrootup treemacsrootdown arbitrarily change single project root h navigate one level upward file system l move directory point also use treemacsdisplaycurrentprojectexclusively switch current project deleting others might present frame locality treemacs buffer limited scope visible frame created treemacs buffer created life alongside inside frame also destroyed frame calling treemacs inside new frame create new buffer regardless many treemacs buffer already exist multiple unique treemacs buffer still show workspace project treemacs buffer belong frame may still made visible manually selecting buffer list would break various assumption treemacs code base effectively fall undefined behaviour bad idea around mouse interface treemacs handle left click much way modern graphical application single click set focus double click expands collapse directory tag section node visit filemoves tag filetag node additionally tag section expanded collapsed single click filetag section icon prefer expandcollpase node single mouse click also use treemacssingleclickexpandaction definekey treemacsmodemap treemacssingleclickexpandaction right click popupmenu also available also open file specific window dragging using left click treemacs required window followmode treemacsfollowmode global minor mode allows treemacs view always move focus currently selected file mode run idle timer exact duration inactivity second move called determined treemacstagfollowdelay tagfollowmode treemacstagfollowmode global minor mode extends effectively replaces treemacsfollowmode activated follows current file also current tag work alongside treemacs integration imenu file type providing imenu implementation compatible mode like followmode run idle timer exact duration inactivity second move called determined treemacstagfollowdelay note order move tag treemacs treemacs buffer window need temporarily selected reset blinkcursormode timer enabled result cursor blinking seemingly pausing short time giving appearance tag follow action lasting much longer really fringeindicatormode treemacsfringeindicatormode global minor mode display little icon fringe move cursor make selected line visible hllinemode stand theme gitmode treemacsgitmode global minor mode enables treemacs check file directory git status information highlight accordingly see also treemacsgit face mode available variant simple extended deferred simple variant start git status process par output elisp parsing kept quick simple info missed version includes git status information file directory extended variant highlight file directory greatly increase complexity length parsing process therefore done asynchronous python process sake performance extended variant requires work deferred variant extended except task rendering node highlighting separated former happens immediately latter treemacsdeferredgitapplydelay second idle time may faster truth least appereance git process given much greater amount time finish downside effect node changing color may somewhat jarring though effect largely mitigated due use caching layer called interactively treemacsgitmode ask variant use lisp code appropriate symbol directly passed minor mode function treemacsgitmode deferred version use asynchronous git process optimized work necessary performance cost part constant amount time take fork subprocess repository case treemacsmaxgitentries default value limit number git status entry treemacs process ignoring rest filewatchmode treemacsfilewatchmode global minor mode enables treemacs watch file displaying change automatically refresh detects change file system decides relevant change event relevant treemacs new file created deleted file changed treemacsgitmode enabled event caused file ignored per treemacsignoredfilepredicates likewise counted relevant refresh called immediately event received treemacs instead wait treemacsfileeventdelay m see file changed avoid refresh multiple time short period time treemacs refresh entire view make detected change visible instead make update directory change happened using mode therefore far expensive full refresh every change save mode applies directory opened mode activated mean enable file watching already existing treemacs buffer need killed rebuilt turning mode hand instantaneous immediately turn existing file watch process outstanding refresh action known limitation staging committing change produce file change event use treemacsgitmode still need manual refresh see file face go changed untracked unchanged commit session persistence treemacs session workspace project contains saved emacs shuts restored treemacs first loaded persistence process fully automatic independant therefore fully compatible desktopsavemode persisted state saved useremacsdirectorycachetreemacspersist default exact file location saved variable treemacspersistfile something go wrong loading file erroneous state saved treemacslasterrorpersistfile debugging terminal compatibility run terminal treemacs fall back much simpler rendering system foregoing usual png icon using simple character instead exact character used highly customizable tag view treemacs able display file system also tag found individual file tag list sourced using emacs builtin imenu functionality file type emacs generate imenu index supported imenu cache result avoid stale tag list setting imenuautorescan recommended tag generated help semanticmode likewise supported ggtags treemacs show tag produced ggtags switch buffer imenu index function use ggtags setqlocal imenucreateindexfunction ggtagsbuildimenuindex currentdirectory awareness treemacs always set defaultdirectory variable based nearest path current node falling back home directory node path point mean various command like findfile magitstatus helmprojectileag correctly act based current directory project context tramp support treemacs support project remote directory eg scp remoteserver pathtodirectory however tramp support restriction treemacsusecollapseddirectories effect remote directory org support treemacs support storing link file node mean orgstorelink theme support using different treemacs theme work way using different emacs theme call treemacsloadtheme either programmatically interactively former case need supply name theme string like treemacsloadtheme default keep mind default treemacs theme support theory standard installation includes default theme feature meant easily allow others extend create distribute theme treemacs detailed explanation modifying theme icon found configuration section additional package next treemacs optionally install treemacsevil must installed loaded use evil keybindings cursor setup properly otherwise also enable navigation jk instead np treemacsprojectile allows quickly add projectile project treemacs workspace treemacsmagit small utility package fill small gap left using filewatchmode gitmode conjunction magit inform treemacs un staging file commits happening magit treemacsiconsdired allows use treemacs icon dired buffer treemacsiconsdiredmode treemacspersptreemacsperspective integration perspmode perspectiveel allows treemacs buffer unique inside active perspective instead default framebased buffer scope treemacsalltheicons provides theme using alltheicons treemacs framework treemacs extended display arbitrary node well used general rendering backend treelike structure see extended tutorial demonstration installation treemacs included spacemacs dev branch using development version spacemacs simply add treemacs dotspacemacsconfigurationlayers replace default neotree check spc h spc treemacs detail otherwise need add treemacs dotspacemacsadditionalpackages treemacs also available melpa want quickly start using grab usepackage example customize needed remove treemacsevil use customize keybindings taste etc either way keep mind treemacs default keybindings globally callable initialization function user supposed select keybindings function like treemacsfindfile based whatever find convenient find exhaustive overview function keybindings function need bind following usepackage snippet includes list treemacs configuration variable default setting setting necessary listed encourage discoverability usepackage treemacs ensure defer init withevalafterload winum definekey winumkeymap kbd treemacsselectwindow config progn setq treemacscollapsedirs treemacspythonexecutable treemacsdeferredgitapplydelay treemacsdirectorynametransformer identity treemacsdisplayinsidewindow treemacseldocdisplay treemacsfileeventdelay treemacsfileextensionregex treemacslastperiodregexvalue treemacsfilefollowdelay treemacsfilenametransformer identity treemacsfollowafterinit treemacsgitcommandpipe treemacsgototagstrategy refetchindex treemacsindentation treemacsindentationstring treemacsisneverotherwindow nil treemacsmaxgitentries treemacsmissingprojectaction ask treemacsmoveforwardonexpand nil treemacsnopngimages nil treemacsnodeleteotherwindows treemacsprojectfollowcleanup nil treemacspersistfile expandfilename cachetreemacspersist useremacsdirectory treemacsposition left treemacsrecenterdistance treemacsrecenterafterfilefollow nil treemacsrecenteraftertagfollow nil treemacsrecenterafterprojectjump always treemacsrecenterafterprojectexpand ondistance treemacsshowcursor nil treemacsshowhiddenfiles treemacssilentfilewatch nil treemacssilentrefresh nil treemacssorting alphabeticasc treemacsspacebetweenrootnodes treemacstagfollowcleanup treemacstagfollowdelay treemacsusermodelineformat nil treemacsuserheaderlineformat nil treemacswidth treemacsworkspaceswitchcleanup nil default width height icon pixel using hidpi display uncomment double icon size treemacsresizeicons treemacsfollowmode treemacsfilewatchmode treemacsfringeindicatormode pcase con null executablefind git null treemacspythonexecutable treemacsgitmode deferred treemacsgitmode simple bind map globalmap treemacsselectwindow cx treemacsdeleteotherwindows cx treemacs cx b treemacsbookmark cx ct treemacsfindfile cx mt treemacsfindtag usepackage treemacsevil treemacs evil ensure usepackage treemacsprojectile treemacs projectile ensure usepackage treemacsiconsdired treemacs dired ensure config treemacsiconsdiredmode usepackage treemacsmagit treemacs magit ensure usepackage treemacspersp treemacspersective use perspectiveel v perspmode treemacs perspmode perspective v perspmode ensure config treemacssetscopetype perspective configuration variable treemacs offer following configuration option describevariable usually offer detail variabledefaultdescription number time level indented file tree specified integer px indentation single integer pixel wide space treemacsindentationstring string used create indentation treemacsindentation specified pixel treemacs window treemacsshowhiddenfilestdotfiles shown set hidden otherwise treemacsfollowafterinitnilwhen follow currently selected file initializing treemacs buffer regardless treemacsfollowmode setting treemacssortingalphabeticascindicates treemacs sort file directory file always shown directory treemacsignoredfilepredicates list predicate test file directory ignored emacs ignored file never shown treemacs buffer treemacsprefileinsertpredicatesnillist predicate test file directory rendered unlike treemacsignoredfilepredicates predicate apply file git status information available long millisecond collect file event refreshing see also treemacsfilewatchmode treemacsgototagstrategyrefetchindexindicates move tag buffer dead treemacsdefaultvisitactiontreemacsvisitnodenosplitdefault action opening node eg file directory tag treemacsvisitfiledefault action treemacs actionsconfig call function treemacsretactionsconfigprefers visiting node closingopeningalist defining behaviour treemacsretaction treemacstabactionsconfigprefers closingopening node visitingalist defining behaviour treemacstabaction treemacsdoubleclickactionsconfigclosesopens tag visit filesalist defining behaviour treemacsdoubleclickaction many directory one possible directory collapsible content consists nothing another directory treemacssilentrefreshnilwhen nonnil completed refresh announced log message applies manual refreshing well automatic due treemacsfilewatchmode treemacssilentfilewatchnilwhen nonnil refresh due filewatchmode cause log message treemacsisneverotherwindownilprevents treemacs selected otherwindow treemacspositionleftposition treemacs buffer valid value left right second inactivity treemacstagfollowmode trigger treemacstagfollowcleanuptwhen nonnil treemacstagfollowmode keep current file tag visible treemacsprojectfollowcleanupnilwhen nonnil treemacsfollowmode keep current project expanded others closed treemacsnopngimagesnilwhen nonnil treemacs use tui string icon even running gui treemacspythonexecutable python binary used treemacs treemacsrecenterafterfilefollownildecides call recenter treemacsfollowmode move new file treemacsrecenteraftertagfollownildecides call recenter treemacstagfollowmode move new tag treemacsrecenterafterprojectjump alwaysdecides call recenter navigating project treemacsrecenterafterprojectexpand ondistancedecides call recenter expanding project node distance window topbottom treemacs call recenter tagfilefollowmode treemacspulseonsuccesstwhen nonnil treemacs pulse current line success indicator eg creating file treemacspulseonfailuretwhen nonnil treemacs pulse current line failure indicator eg failing find file tag treemacselispimenuexpression large list imenu expression treemacs us elisp buffer treemacspersistfileemacsdcachetreemacspersistpath file treemacs us persist state treemacslasterrorpersistfileemacsdcachetreemacspersistatlasterrorpath file treemacs us persist state treemacsspacebetweenrootnodestwhen nonnil treemacs separate root node empty line treemacswraparoundtwhen nonnil treemacs wrap around buffer edge moving line vertical bar fringe bitmap used fringeindicator minor mode idle time git highlighting apply using deferred treemacsgitmode second idle time treemacs follow selected window treemacsdisplayinsidewindowtwhen nonnil treemacs use dedicated sidewindow number git status entry treemacs process anything number ignored treemacsmissingprojectactionaskwhen persisted project missing filesystem ask prompt action keep keep project project list remove remove without prompt treemacsshowcursornilwhen nonnil cursor stay visible treemacs buffer treemacsgitcommandpipe text appended treemacs git command useful filtering something like grep treemacsnodeleteotherwindowstprevents treemacs window deleted command like deleteotherwindows magitstatus treemacseldocdisplaytenables eldoc display file path point requires eldocmode treemacsbookmarktitletemplate treemacs project label using bookmarkset treemacs default template bookmark label following pattern available project label label n labelpath labelpath n filepath filepath n treemacsfileextensionregextext last perioddetermines treemacs detects file extension set use text first last period treemacsdirectorynametransformeridentitytransformer function applied directory name rendering sort cosmetic effect treemacsfilenametransformeridentitytransformer function applied file name rendering sort cosmetic effect treemacsusermodelineformatnilwhen nonnil treemacs use mode line format otherwise format provided spaceline moodymodeline doommodeline used finally treemacs text displayed treemacsuserheaderlineformatnilwhen nonnil treemacs use header line format treemacsmoveforwardonexpandnilwhen nonnil treemacs move first child expanded node treemacsworkspaceswitchcleanupnilindicates buffer deleted workspace switch valid value nil file face treemacs defines us following face facebased ondescription treemacsdirectoryfacefontlockfunctionnamefaceface used directory treemacsdirectorycollapsedfacetreemacsdirectoryfaceface used collapsed part directory treemacsfilefacedefaultface used file treemacsrootfacefontlockconstantfaceface used project root treemacsrootunreadablefacetreemacsrootfaceface used local unreadable project root treemacsrootremotefacefontlockfunctionnameface treemacsrootfaceface used readable remote tramp project root treemacsrootremoteunreadablefacetreemacsrootunreadablefaceface used unreadable remote tramp project root treemacsrootremotedisconnectedfacewarning treemacsrootfaceface used disconnected remote tramp project root treemacstagsfacefontlockbuiltinfaceface used tag treemacshelptitlefacefontlockconstantfaceface used title helpful hydra treemacshelpcolumnfacefontlockkeywordfaceface used column header helpful hydra treemacsgit facevarious font lock facesfaces used treemacs various git state treemacstermnodefacefontlockstringfaceface directory node symbol used treemacs run terminal treemacsonsuccesspulseface fg bg face used pulsing successful action treemacsonfailurepuseface fg bg face used pulsing failed action evil compatibility make treemacs get along evilmode need install load treemacsevil define function offer configuration option making sure loaded sufficient customizing theme icon creating modifying theme creating modifying theme icon done single step using dedicated macro create theme use treemacscreatetheme requires name theme accepts optional keyword argument directory theme icon stored using png icon name theme extending config final form responsible creating theme icon config typically consist nothing call treemacscreateicon treemacscreatetheme default icondirectory fjoin treemacsdir iconsdefault config progn treemacscreateicon file rootpng fallback extension root treemacscreateicon file emacspng fallback extension el elc treemacscreateicon file readmepng fallback extension readmemd treemacscreateicon icon alltheiconsiconforfile yaml extension yml yaml file argument relative icon directory theme created using image icon icondirectory argument omitted file argument switched icon supply icon string directly tui fallback also optional used default finally list extension determines file extension icon used treemacs extension either entire file name text last period unless treemacsfileextensionregex customized mean match normal file name like initel extensionless file name like makefile full name checked first possible give special file icon example readmemd use different icon normal markdown file instead string extension symbol also used case treemacs also create variable icon named treemacsicon symbol treemacs us several icon variable new theme define version extending default theme following icon used root dirclosed diropen fallback tagopen tagclosed tagleaf error info warning analogous creating new theme treemacsmodifytheme used change add existing theme treemacsmodifytheme default icondirectory othericonsdir config progn treemacscreateicon icon extension dirclosed treemacscreateicon icon extension diropen finally keep mind treemacs icon bufferlocal value likely defined trying access value directly need programmatically access treemacs icon use treemacsgeticonvalue treemacsgeticonvalue root nil default treemacsgeticonvalue org custom icon treemacs also offer quick straighforward way add gui icon currently active theme without caring name declaring icon directory defvar treemacscustomhtmlicon alltheiconsiconforfile namehtml treemacsdefinecustomicon treemacscustomhtmlicon html htm important restriction icon must must exactly character long including space separate icon filename icon according automodealist file extension like cc hh immediately obvious major mode open file thus icon assigned treemacs offer option automate decision based automodealist use function treemacsmapiconswithautomodealist change assigned icon list file extension based major mode icon mapped automodealist treemacsmapiconswithautomodealist take argument first list file extension alist decides icon used mapped major mode example code decide icon hh cc file automodealist would look like treemacsmapiconswithautomodealist cc hh cmode treemacsgeticonvalue c cmode treemacsgeticonvalue cpp gui v tui possible force treemacs use simple tui icon gui mode setting treemacsnopngimages resizing icon emacs compiled imagemagick support using emacs arbitrarily change size treemacs icon interactively programmatically calling treemacsresizeicons alltheicons indent issue depending font may experience problem treemacs icon seemingly jumping around left right expanded collapsed using alltheicons theme straighforward solution use different font may also try workaround using different font applies onyl tab character used align treemacs alltheiconsbased icon load treemacsalltheicons require instead use following alternative provided treemacs treemacsloadalltheiconswithworkaroundfont hermit hermit font used example need pick font available system suffer tab width issue line load treemacsalltheicons must loaded previously enable alltheicons theme given font argument used font alignment tab used icon hopefully alleviating indentation problem addition treemacsindentation treemacsindentationstring set fontchanged tab character respectively customizing probably possible indent guide really part icon useful visual feature nonetheless indent guide like effect created selecting appropriate value treemacsindentation treemacsindentationstring setq treemacsindentationstring propertize face fontlockcommentface treemacsindentation keymap unbound function function bound key default left user find convenient key bind actiondescription treemacsshowhideinitialize treemacs treemacsbookmarkfind bookmark treemacs treemacsfindfilefind focus current file treemacs treemacsfindtagfind focus current tag treemacs treemacsselectwindowselect treemacs window visible call treemacs treemacsdeleteotherwindowssame deleteotherwindows delete treemacs window treemacsshowchangelogopens buffer showing changelog treemacsloadthemeload different icon theme treemacsiconcatalogueshowcases theme icon treemacsprojectileadd project projectile treemacs treemacsaddanddisplaycurrentprojectadd current project treemacs open treemacsdisplaycurrentprojectexclusivelyadd current project treemacs open deleting others treemacsselectscopetypeselect scope treemacs buffer unique default keymaps treemacs keybindings distributed several keymaps based common keybindings project keybinds prefix cc cp keyactiondescription cc cp atreemacsaddprojecttoworkspaceselect new project add treemacs workspace cc cp ptreemacsprojectileselect projectile project add workspace cc cp dtreemacsremoveprojectfromworkspaceremove project point workspace cc cp rtreemacsrenameprojectrename project point cc cp c ctreemacscollapseprojectcollapse project point cc cp c ostabtreemacscollapseallprojectscollapse project cc cp c otreemacscollapseallprojectscollapse project except project point workspace keybinds prefix cc cw keyactiondescription cc cw rtreemacsrenameworkspacerename workspace cc cw atreemacscreateworkspacecreate new workspace cc cw dtreemacsremoveworkspacedelete workspace cc cw streemacsswitchworkspaceswitch current workspace cc cw etreemacseditworkspacesedit workspace layout via orgmode cc cw ftreemacssetfallbackworkspaceselect default fallback workspace node visit keybinds prefix keyactiondescription ovtreemacsvisitnodeverticalsplitopen current file tag vertically splitting nextwindow ohtreemacsvisitnodehorizontalsplitopen current file tag horizontally splitting nextwindow oorettreemacsvisitnodenosplitopen current file tag performing split using nextwindow directly oaatreemacsvisitnodeaceopen current file tag using acewindow decide window open file oahtreemacsvisitnodeacehorizontalsplitopen current file tag horizontally splitting window selected acewindow oavtreemacsvisitnodeaceverticalsplitopen current file tag vertically splitting window selected acewindow ortreemacsvisitnodeinmostrecentlyusedwindowopen current file tag recently used window oxtreemacsvisitnodeinexternalapplicationopen current file according mime type external application linux window mac supported toggle keybinds prefix keyactiondescription thtreemacstoggleshowdotfilestoggle hiding displaying dotfiles twtreemacstogglefixedwidthtoggle whether treemacs window fixed width see also treemacswidth tftreemacsfollowmodetoggle treemacsfollowmode tatreemacsfilewatchmodetoggle treemacsfilewatchmode tvtreemacsfringeindicatormodetoggle treemacsfringeindicatormode copy keybinds prefix keyactiondescription yytreemacscopypathatpointcopy absolute path node point yrtreemacscopyprojectrootcopy absolute path project root node point yftreemacscopyfilecopy file point general keybinds keyactiondescription treemacshelpfulhydrasummon helpful hydra show treemacs keymap jntreemacsnextlinego next line kptreemacspreviouslinego previous line mjntreemacsnextlineotherwindowgo next line nextwindow mkptreemacspreviouslineotherwindowgo previous line nextwindow pgup treemacsnextpageotherwindowgo next page nextwindow pgdn treemacspreviouspageotherwindowgo previous page nextwindow mjmntreemacsnextneighbourgo next samelevel neighbour current node mkmptreemacspreviousneighbourgo previous samelevel neighbour current node utreemacsgotoparentnodego parent node point possible mup treemacsmoveprojectupswitch position project point one mdown treemacsmoveprojectdownswitch position project point one wtreemacssetwidthset new value width treemacs window rettreemacsretactionrun action defined treemacsretactionsconfig current node tabtreemacstabactionrun action defined treemacstabactionsconfig current node grgrtreemacsrefreshrefresh project point dtreemacsdeletedelete node point rtreemacsrenamerename node point cftreemacscreatefilecreate file cdtreemacscreatedircreate directory qtreemacsquithide treemacs window qtreemacskillbufferdelete treemacs buffer ptreemacspeekpeek file tag point without fully opening yytreemacscopypathatpointcopy absolute path node point yrtreemacscopyprojectrootcopy absolute path project root node point yftreemacscopyfilecopy file point mtreemacsmovefilemove file point streemacsresortset new value treemacssorting btreemacsaddbookmarkbookmark currently selected file dir tag location htreemacsrootupmove treemacs root one level upward work single project workspace ltreemacsrootdownmove treemacs root directory point work single project workspace htreemacscollapseparentnodecollapse parent node point treemacsrunshellcommandforcurrentnoderun asynchronous shell command current node replacing path path treemacsrunshellcommandinprojectrootrun asynchronous shell command root current project replacing path path compatibility correctness treemacs display behaviour large degree ensured window property reacting change window configuration package likely cause trouble treemacs therefore interfere emacs buffer spawning window splitting behaviour treemacs included spacemacs spacemacs user therefore treemacs guarantee firstclass support compatibility windowmanaging package used spacemacs namely perspperspective eyebrowse popwin windowpurpose well shackle everything else may issue depending complexity problem may decide worth fixing aside following known incompatibility package invoking fontlockensure treemacs buffer reset face treemacs button known emacs bug possible cause issue using old version swiper rainbow mode activated treemacs likewise produce behaviour make sure include rainbowmode part specialmodehook since mode treemacsmode derived faq hide file want see need define predicate function add treemacsignoredfilepredicates function accepts two argument file name absolute path must return nonnil treemacs hide file example code ignore file eiter called foo located xyz would look like withevalafterload treemacs defun treemacsignoreexample filename absolutepath stringequal filename foo stringprefixp xyz absolutepath addtolist treemacsignoredfilepredicates treemacsignoreexample keep treemacs showing file ignored git short answer treemacsgitmode extended withevalafterload treemacs addtolist treemacsprefileinsertpredicates treemacsisfilegitignored simple gitmode would also work file deferred mode delay would always use last run git information might look like reacting incorrectly especially first run slightly longer explanation hook render process found documentation string treemacsprefileinsertpredicates seeing file icon directory treemacs permanently fall back simple tui icon detects emacs instance run create image test evaluating createimage png code return error like invalid image type emacs support image get treemacs stop telling refreshed especially filewatchmode see treemacssilentrefresh treemacssilentfilewatch enospc space left device may run error use filewatchmode solution increase number allowed user watch described link also want see responsible setting file watch first place since treemacs watch directory displaying produce couple dozen watch best treemacs warning able find background color falling back something else treemacs need color make sure background color icon correctly align hllinemode png image background highlighted hllinemode default treemacs manually correcting every time hlline overlay moved make correction work need know two color current theme default background hlline background color treemacs find hllines background color fall back default background color even find default background fall back warning serve inform fallback theme define required color set treemacs load like setfaceattribute hlline nil background want disable warning defining variable treemacsnoloadtimewarnings exact value irrelevant matter exists since warning issue treemacs first loaded variable must defined treemacs initialized best achieved adding line defvar treemacsnoloadtimewarnings treemacs usepackage init block expand everything node yes need expand prefix argument closing node prefix argument work well case treemacs forget node opened one closed reopen automatically contributing contribution much welcome fit general scope style treemacs following list guideline met exception confirm rule one commit per feature commit message start note bracket roughly describes area commit relates example icon add icon code must right place codebase split many small file right place probably go treemacscoreutilsel general implementation detail go new feature must documented readme example mentioning new config option config table must compiler warning test suite must pas treemacs us cask setup local testing environment makefile simplifies compiling testing codebase first run cask install locally pull treemacs dependency use following makefile target make preparedownloads update cask dependency dependency test compile target make compilecompiles code base treat compiler warning error make cleanremoves generated elc file make lintruns first compile clean even former fails make testruns testsuite graphical environment terminal finally want add icon take commit example though icon since moved module treemacsiconsel working code base want delve treemacs code base check wiki general pointer dependency emacs fel sel dash cllib acewindow pfuture ht hydra optionally evil optionally projectile optionally winum optionally python
221,Lobsters,emacs,Emacs editor,Org-Mode Is One of the Most Reasonable Markup Languages to Use for Text,http://karl-voit.at/2017/09/23/orgmode-as-markup-only/,orgmode one reasonable markup language use text,lightweight markup language vim notepadexe atom notepad markdown asciidoc wikitext restructuredtext orgmode intuitive easy learn remember markdown pandoc restructuredtext mode emacs example wikipedia orgmode easily typed orgmode make sense outside emacs pandoc github gitlab orgmode excellent tool support want keyboard shortcut might want use learn keyboard shortcut write whole ebooks within org mode revocation valid point related missing standardization org mode variation interpreting org mode file emacs pandoc betaversion syntax definition manual lazyblorg issue footnote macro replacement url reference rest markup,update simplified table syntax even update comment standardization argument update extended syntax example make sense outside emacs tool support added backlinks update comment ian zimmerman disclaimer nerdy blog entry lightweight markup language think org mode best lightweight markup language many usecases lightweight markup language mean syntax way express heading list font variation bold face italic thing please note emacs org mode syntax advantage even used outside emacs type org mode vim notepadexe atom notepad text editor opinion advantage compared common lightweight markup standard markdown asciidoc wikitext restructuredtext course org mode favorite syntax despite personal choice see got pretty convincing argument underline statement well matter personal taste already grin face nt clue keep reading make excellent example making fun nerd next dinner party orgmode intuitive easy learn remember almost anything need know org mode syntax heading subheading subsubheading paragraph separated least one empty line bold italic underlined strikethrough monospaced http karlvoitat link description http karlvoitat link without description list item another item subitem also enumerated like yet done x item done simple preformatted text source code also respect line break bold bold yes people advanced syntax mind everything basic common objection source code need begin end marker instead string prefix like org mode providing well beginsrc python myresult print hello europe str myresult endsrc seen many coworkers typed org mode markup taking note text editor even know anything intuitive say learning org mode even use cheatsheet syntax normally natural type org mode right start table bit complicated like markup language know column column last column foo bar baz abcdefg probably wo nt type table like outside emacs manual alignment without toolsupport tedious even able deliver perfectly fine org mode table simply ignoring alignment altogether column column last column foo bar baz abcdefg almost ridiculous argument opinion markup use tool tool b however markup language different example widely used markup language named markdown many flavor choose pandoc list six different markdown flavor output format absolutely bad situation foil original idea behind lightweight markup language web service tell use markdown text field dig deeper find many different markdown standard web page talking continue look cheatsheet dialect nothing difficult differentiate multiple standard almost really usability hell get furious every time enter hell additional notion lack standardization file extension using markdown syntax seen md mkdn markdown even txt markdown org mode life easy snippet previous section explains tool interprets org mode accepts simple easy remember syntax extension always org many lightweight markup language offer multiple way typing heading basically three way defining heading prefix heading pre postfix heading underlined heading example category prefix heading heading heading heading pre postfix heading heading heading heading underlined heading heading heading heading prefer prefix heading style org mode use well prefix character asterisk deeper level heading pre postfix heading offer bad usability user manually synchronize number prefix character number postfix character totally unclear something like heading different number prepostfix character going turn interpreted case user already used markup language simple prefix heading logical need postfix character even worse underlined heading category user completely irritated multiple reason besides tedious manual work align stupid heading character heading title clear character must used heading line got bigger document different level heading get confused heading character stand heading level tilde character level one equal character asterisk without cheatsheet occasional markup user completely lost get even worse markup language let choose order heading character result weird situation example one author starting write restructuredtext document using favorite heading syntax second author joining analyze document order know heading syntax must use restructuredtext mode emacs find following function visualize hierarchy section adornment current buffer invoking rstdisplayadornmentshierarchy bound cc ca cd temporary buffer appear fake section title rendered style current document useful editing people document find section adornment correspond level yes got right true function purpose generate dummyhierarchy heading visualize markup used heading one heading forth single document bad design decision markup need hack know heading look like markup even familiar first place one markup language even allow mixed heading style use underlined heading style heading level prefix style level another underlining style level forth chaos perfect one let look different markup element external link already remember org mode link look like http karlvoitat home page difficult thing remember url beginning description follows url many markup language add additional unnecessary level difficulty example wikipedia comment user might irritated asciidoc form simple complex url text might look like part url beautiful least something could live markdown text http examplecom text http examplecom title bracket parenthesis first using different kind markup character first place like bracket title part url part text confusing design decision point view restructuredtext text http examplecom holy moly weird stuff first grave accent apostrophe underscore character end complicated define simple url even prefer hard type html version linking disaster something lightweight class name even basic formatting syntax markdown assume flavor show high level inconsistency italic bold monospace strikethrough italic monospace require one character string inbetween others require two inconsistent therefore hard learn errorprone compare org syntax format italic bold monospace strikethrough org made different choice syntax opinion better mnemonic could disagree however one leading one trailing syntax character sure easier learn type recognize due better consistency orgmode easily typed simple syntax org mode imply typing unnecessary character nt manually align something like underlined heading anybody using simple text editor fast adding markup heading font variation forth previous section proved markup language clearly fail many case orgmode make sense outside emacs nt use emacs editor write work org mode markup text mentioned many people already org mode intuitive clean way typing text character got text information org mode markup process many tool prominent important example file pushed within github repository swiss army knife named pandoc able convert org mode dozen format like html odt libreoffice docx word latex pdf forth many lightweight markup nt come decent tool support using eg markdown solution nt syntax highlighting real reason written org mode syntax instead yes org mode came perfect tool support first place point syntax many advantage adapted toolsupport main focus application well write render org mode github gitlab use text editor like notepad personal note especially tool support easy type manually syntax orgmode excellent tool support want mentioned beginning article emacs nevertheless anybody familiar emacs mention emacs tool support writing org mode syntax perfect way might start mouseonly usage menu item important function user want get minimum efficiency menu item show keyboard shortcut might want use org mode really easy learn basically use tab toggle collapsing expanding heading list block alt arrow key move around heading list item even table columnsrows ctrlreturn creates new heading list item without need entering markup character manually matching indentation level three thing good write org mode syntax efficiently basic file opensave finding help exiting emacs stuff accessible icon menu need learn keyboard shortcut nt want experienced great toolsupport user typically eager learn nt might happy org mode capturing minute meeting shopping list however others master additional thing write whole ebooks within org mode since article emacs want explain mention perfect emacs support point org mode deserves adopted kind usecases simple read simple type lightweight markup needed however want decent tool support lightweight markup better tool support compared org mode within emacs find tool support markdown asciidoc wikitext restructuredtext anywhere could compete cozy org mode support within emacs yes could tool support outside emacs point change syntax support people lightweight markup language designed used minimum effort compared fullblown therefore complicated markup language html latex job better others experience many design decision widely adapted markup markdown restructuredtext others questionable usability point view least issue use daily life unfortunately hardly see people using org mode markup language outside emacs although good reason easy learn easy use markup language blog article wanted point usefulness org mode even using emacs writing tool backlinks revocation valid point related missing standardization org mode comment statement refer lightweight markup basic thing org mode syntax explicitly listed heading list font variation bold face italic thing cover full syntax statement standard opinion currently possible outside emacs various reason course variation interpreting org mode file emacs pandoc also pandoc support subset org mode otherwise pandoc would reimplement embed emacs parsing purpose specific case pandoc seems strict parser related leading space line keywords pretty sure pandoc project accepts issue bug doubt interpretation emacs definition goldenstandard org mode syntax even betaversion syntax definition mention optional space keywords manual mention orgelementparsebuffer orglint would probably best choice defining official standard would search one however relate intention article design basic org mode syntax compared lightweight markup language issue mentioned markup show inconsistency usability issue org mode seems advantage still apply completely independent standardization argument personal believe would use org mode syntax element outside emacs would much higher pressure formally defining org mode syntax pandoc even emacs could use golden standard far even necessity defining golden standard nobody outside emacs community know even using org mode tried change bit markup language tend hurt geeky soul use ian wrote email comment restructuredtext rest argument make least sense miss point rest link syntax url nt inline normal style use blog like blah blah blah follow interesting link foo blah blah blah blah bluh bleh foo http wwwfooexamplecom among thing mean mention link foo multiple time without repeating url maybe way org nt know total beginner reading post note added additional space character http example work around lazyblorg issue first question related defining url referring multiple time aware org mode feature providing functionality except footnote specific url even general approach could use powerful macro replacement however discussion thing far away discussion markup lightweight second acknowledge cover possibility define url reference rest markup opinion try look hypothetic user perspective think still prof point logical explanation underscore character already add backticks syntax element combining backticks additional underscore make sense furthermore place block url defined paragraph visual clutter end text fragile imho nt get started two dot underscore switching place certainly putting weight thought rest syntax higher level logic somebody looking smooth easy remember lightweight markup language still think nothing beat org mode general even totally neglect emacs integration percent featureset allows complex requirement still consistent lightweight syntax
222,Lobsters,emacs,Emacs editor,Arbitrary code execution vulnerability fixed in Emacs 25.3,http://lists.gnu.org/archive/html/emacs-devel/2017-09/msg00211.html,arbitrary code execution vulnerability fixed emacs,date prev date next thread prev thread next date index thread index announce emacs released http wwwgnuorgsoftwareemacs http http http http http wwwgnuorgprepftphtml http ftpgnuorggnuemacs http shopfsforgproductemacsmanual announce emacs released announce emacs released announce emacs released announce emacs released announce emacs released announce emacs released announce emacs released announce emacs released announce emacs released announce emacs released announce emacs released,date prev date next thread prev thread next date index thread index announce emacs released nicolas petton subject announce emacs released date mon sep hi version emacs text editor available information emacs see http wwwgnuorgsoftwareemacs retrieve source nearest gnu mirror using one following link http http get pgp signature http http choose mirror explicitly list http wwwgnuorgprepftphtml mirror may take time update main gnu ftp server http ftpgnuorggnuemacs emergency release fix security vulnerability emacs enriched text mode support decoding xdisplay disabled feature allows saving display property part text emacs display property support evaluation arbitrary lisp form part instantiating property decoding xdisplay vulnerable executing arbitrary malicious lisp code included text eg sent part email message vulnerability introduced emacs work around emacs version append following emacs init file evalafterload enriched defun enricheddecodedisplayprop start end optional param list start end gnu longer support richtext enriched inline mime object support disabled avoid evaluation arbitrary lisp code contained email message news article printed copy emacs manual available purchase free software foundation online store http shopfsforgproductemacsmanual version sale updated emacs remains great reference book current emacs buying copy great way support work fsf regard nico signatureasc description pgp signature announce emacs released nicolas petton announce emacs released andreas schwab announce emacs released nicolas petton announce emacs released andreas schwab announce emacs released rostislav svoboda announce emacs released eli zaretskii announce emacs released pitclaudel announce emacs released nicolas petton announce emacs released andreas schwab announce emacs released rostislav svoboda announce emacs released eli zaretskii
224,Lobsters,emacs,Emacs editor,Magit crowd-funding campaign,https://www.kickstarter.com/projects/1681258897/its-magit-the-magical-git-client,magit crowdfunding campaign,funding period,funding period sep oct day
225,Lobsters,emacs,Emacs editor,which-key: simple emacs key-binding discovery,https://github.com/justbur/emacs-which-key,whichkey simple emacs keybinding discovery,whichkey recent change added manual activation added custom string replacement added introduction guidekeymode table content install melpa melpa manually initial setup side window bottom option side window right option side window right bottom minibuffer option manual activation additional command special feature configuration option popup type option minibuffer side window frame custom custom string replacement option automatic keybased replacement key description replacement pdcawley pr sorting option paging option method default using ch method bind key face customization option option support thirdparty library keychord evil operator godmode example nice display split frame known issue issue thanks bmag iqbalansari,whichkey recent change added whichkeyshowearlyonch allows one trigger whichkey demand rather automatically see docstring manual activation added whichkeyenableextendeddefinekey allows concise syntax specify replacement text using definekey alternative use definekey internally see docstring custom string replacement added whichkeyshowmajormode show active binding current majormode map introduction whichkey minor mode emacs display key binding following currently entered incomplete command prefix popup example enabling minor mode enter cx wait default second minibuffer expand available key binding follow cx many space allows given setting includes prefix like cx shown different face screenshots popup look like included whichkey started rewrite guidekeymode feature set diverged certain extent table content install melpa setting melpa repository use mx packageinstall whichkey preferred method need call whichkeymode enable minor mode course manually add whichkeyel loadpath require something like addtolist loadpath pathtowhichkeyel require whichkey whichkeymode initial setup setup required happy default setup try option choice default configs preconfigured customize liking main choice want whichkey buffer display screenshots default option shown next section case show many key binding fit buffer within constraint constraint determined several factor including emacs setting size current emacs frame whichkey setting described many substitution ability included quite flexible ability use regexp example make whichkey customizable side window bottom option popup side window bottom current default restore setup use whichkeysetupsidewindowbottom side window right option popup side window right default use whichkeysetupsidewindowright note default fairly conservative tend display narrower frame get message saying whichkey display key try making frame wider adjusting default related maximum width see mx customizegroup whichkey side window right bottom combination previous two choice try use right side room switch using bottom usually easier fit key setting helpful size emacs frame change frequently might case using dynamictiling window manager whichkeysetupsidewindowrightbottom minibuffer option take minibuffer recommended configuration use whichkeysetupminibuffer note maximum height minibuffer controlled builtin variable maxminiwindowheight also paging command work reliably minibuffer option use side window bottom option need paging manual activation want whichkey popup need try setup along following line allow ch trigger whichkey done automatically setq whichkeyshowearlyonch make sure whichkey nt show normally refreshes quickly triggered setq whichkeyidledelay setq whichkeyidlesecondarydelay whichkeymode prevent whichkey showing automatically allow use ch middle key sequence show whichkey buffer keep open remainder key sequence additional command whichkeyshowtoplevel show key binding without prefix many probably interesting user whichkeyshowmajormode show currently active majormode binding similar ch whichkey format also aware evil command defined using evildefinekey whichkeyshownextpage command used paging whichkeyundo used undo last keypress middle key sequence special feature configuration option option one described configurable variable available mx customizegroup whichkey popup type option three different popup type whichkey use default display available key variable whichkeypopuptype decides one used minibuffer setq whichkeypopuptype minibuffer show key minibuffer side window setq whichkeypopuptype sidewindow show key side window popup type option location whichkey window valid value top bottom left right list two list whichkey always try first location first go second location enough room display key first location setq whichkeysidewindowlocation bottom max width whichkey window displayed left right valid value number column integer percentage current frame width float larger smaller setq whichkeysidewindowmaxwidth max height whichkey window displayed top bottom valid value number line integer percentage current frame height float larger smaller setq whichkeysidewindowmaxheight frame setq whichkeypopuptype frame show key popup frame popup work well terminal one frame shown given moment popup type option max width whichkey frame number column integer setq whichkeyframemaxwidth max height whichkey frame number line integer setq whichkeyframemaxheight custom write display function requires write three function whichkeycustompopupmaxdimensionsfunction whichkeycustomshowpopupfunction whichkeycustomhidepopupfunction refer documentation variable information working example current implementation sidewindow bottom setq whichkeypopuptype custom defun whichkeycustompopupmaxdimensionsfunction ignore con whichkeyheightorpercentagetoheight whichkeysidewindowmaxheight framewidth defun fithorizonatally let fitwindowtobufferhorizontally fitwindowtobuffer defun whichkeycustomshowpopupfunction actpopupdim let alist windowwidth fithorizontally windowheight fitwindowtobuffer getbufferwindow whichkey buffer displaybufferreusewindow whichkey buffer alist displaybufferinmajorsidewindow whichkey buffer bottom alist defun whichkeycustomhidepopupfunction bufferlivep whichkey buffer quitwindowson whichkey buffer custom string replacement option customize way key show buffer using three different replacement method corresponds replacement alist basic idea behind alist specify selection string car con cell replacement string cdr automatic newer option set whichkeyenableextendeddefinekey advises definekey allow whichkey preprocess argument statement definekey somemap f foo longnameforcommandfoo valid emacs setting variable make whichkey automatically replace corresponding command name text string nice example naming prefix following bind b nil name binding prefix definekey somemap b barprefix keybased replacement using method description key replaced using string provide example whichkeyaddkeybasedreplacements cx cf find file first string key combination whose description want replace form suitable kbd key combination whichkey overwrites description second string find file second type entry restrict replacement majormode example whichkeyaddmajormodekeybasedreplacements orgmode cc cc org cc cc cc ca org attach first entry majormode followed list first type entry case key combination listed majormode majormode version take precedence key description replacement second third method target text used key description directly relevant variable whichkeyreplacementalist example one default key replacement push alnum nil nil whichkeyreplacementalist element outer con cell con cell form key binding car outer con determines match key binding cdr determines match replaced see docstring whichkeyreplacementalist information next example show replace description push nil left nil lft whichkeyreplacementalist example using key replacement include unicode character result unfortunately using unicode character may upset alignment whichkey buffer unicode character different width even monospace font alignment based character width addtolist whichkeyreplacementalist tab nil nil addtolist whichkeyreplacementalist ret nil nil addtolist whichkeyreplacementalist del nil nil addtolist whichkeyreplacementalist spc nil nil cdr may also function receives con form key binding produce con form allows interesting idea like one suggested pdcawley pr push con nil pareditmode lambda kb con car kb pareditmode x pareditmode pareditmode whichkeyreplacementalist box checked pareditmode currently active sorting option default output sorted key custom order default order sort lexicographically within class key class order special spc tab single character ascii modifier c control order setting variable also show available option default setq whichkeysortorder whichkeykeyorder default except single character sorted alphabetically setq whichkeysortorder whichkeykeyorderalpha default except prefix key grouped together end setq whichkeysortorder whichkeyprefixthenkeyorder default except key local map shown first setq whichkeysortorder whichkeylocalthenkeyorder sort based key description ignoring case setq whichkeysortorder whichkeydescriptionorder paging option least several prefix many key bound like cx whichkey display many key given setting prefix may enough paging feature give ability bind key function whichkeychdispatch allow cycle page without changing key sequence middle typing two slightly different way method default using ch helpchar easiest way turned default use setq whichkeyusechcommands nil disable behavior take effect toggling whichkeymode already enabled ch used prefix switch page multiple page key change default behavior emacs show list key binding apply prefix example type cx ch would get list command follow cx us whichkey instead show key unlike emacs default save incomplete prefix entered next keystroke complete command command cycle page forward n cn cycle backwards p cp undo last entered key u cu call default command bound ch usually describeprefixbindings h ch especially useful like helmdescbinds also want use ch whichkey paging key note ch default equivalent context method bind key essentially need prefix like cx following bind relevant command definekey whichkeymodemap kbd cx whichkeychdispatch completely equivalent setq whichkeypagingprefixes cx setq whichkeypagingkey latter provided convenience lot prefix face customization option face whichkey us faceapplied todefault definition whichkeykeyfaceevery key sequence inherit fontlockconstantface whichkeyseparatorfacethe separator inherit fontlockcommentface whichkeynotefacehints note inherit whichkeyseparatorface whichkeyspecialkeyfaceuserdefined special key inherit whichkeykeyface inversevideo weight bold whichkeygroupdescriptionfacecommand group ie keymaps inherit fontlockkeywordface whichkeycommanddescriptionfacecommands localmap inherit fontlockfunctionnameface whichkeylocalmapdescriptionfacecommands localmap inherit whichkeycommanddescriptionface last two deserve explanation command life one many possible keymaps distinguish local map depend buffer mode active etc global map applies everywhere might useful distinguish two one way remove default face whichkeycommanddescriptionface like setfaceattribute whichkeycommanddescriptionface nil inherit nil another make local map key appear bold setfaceattribute whichkeylocalmapdescriptionface nil weight bold also use mx customizeface customize face liking option option also available customize default shown set time delay second whichkey popup appear value zero might cause issue nonzero value recommended setq whichkeyidledelay set maximum length character key description command prefix description longer truncated added setq whichkeymaxdescriptionlength use additional padding column key variable specifies number space add left column setq whichkeyaddcolumnpadding maximum number column display whichkey buffer nil mean nt impose maximum setq whichkeymaxdisplaycolumns nil set separator used key description change setting ascii character font show default arrow second setting allows extra padding unicode character whichkey us character mean width measurement wide unicode character throw calculation setq whichkeyseparator setq whichkeyunicodecorrection set prefix string inserted front prefix command ie command represent submap setq whichkeyprefixprefix set special key automatically truncated one character whichkeyspecialkeyface applied disabled default example setting setq whichkeyspecialkeys spc tab ret esc del setq whichkeyspecialkeys nil show key prefix left top bottom nil mean hide prefix prefix consists key typed far whichkey also show page information along prefix setq whichkeyshowprefix left set show count key shown v total key mode line setq whichkeyshowremainingkeys nil support thirdparty library support provided thirdparty library use standard method looking command need enabled explicitly code includes hack please report problem keychord enabled default evil operator evil motion text object following operator like looked standard way support controlled whichkeyalloweviloperators nonnil evil loaded whichkey whichkeyshowoperatorstatemaps need enabled explicitly hack former allows inner outer text object map show latter show motion well godmode call whichkeyenablegodmodesupport loading godmode enable support godmode key sequence new experimental please report issue example nice display split frame unlike guidekey whichkey look good even frame split several window known issue user reported crash related whichkey popups quitting key sequence cg possible fix discussed issue thanks special thanks bmag helping initial development finding many bug iqbalansari among thing adapted code make whichkeyshowtoplevel possible
226,Lobsters,emacs,Emacs editor,Major mode for reading EPUBs in Emacs,https://github.com/wasamasa/nov.el,major mode reading epubs emacs,join github today sign file permalink resource license reload reload,repository archived owner readonly major mode reading epubs emacs dismiss join github today github home million developer working together host review code manage project build software together sign file permalink failed load latest commit information type name latest commit message commit time major mode reading epubs emacs resource license perform action time signed another tab window reload refresh session signed another tab window reload refresh session
227,Lobsters,emacs,Emacs editor,An Emacs front-end for lobste.rs with ivy,https://github.com/julienXX/ivy-lobsters,emacs frontend lobster ivy,join github today sign file permalink ivylobstersel introduction lobster helmlobsters screenshot requirement usage topic resource license reload reload,browse lobster story emacs ivy dismiss join github today github home million developer working together host review code manage project build software together sign file permalink failed load latest commit information type name latest commit message commit time ivylobstersel introduction ivylobstersel ivy frontend lobster prefer helm check helmlobsters screenshot requirement emacs higher ivy higher usage mx ivylobsters ret show latest story ivy use ret browse story mo access option browse lobster story emacs ivy topic resource license perform action time signed another tab window reload refresh session signed another tab window reload refresh session
228,Lobsters,emacs,Emacs editor,Five Useful Org-Mode Features,http://thagomizer.com/blog/2017/03/16/five-useful-org-mode-features.html,five useful orgmode feature,five useful orgmode feature table spreadsheet table spreadsheet todos checklist todos checkboxes org code note doc babel tangle exampleorg learn,five useful orgmode feature writing tutorial working new code creating talk usually take note couple year ago adopted orgmode emacs note mostly use outlining tool step tutorial section talk get headline collapse expand section help focus writing code use outline mode track user story create subbullets break needed often put code snippet question detail outline recreate later needed org good much outline emacs operating system org task tracker time tracking spreadsheet flashcard app note taking application operating system couple favorite org feature table spreadsheet table org builtin table editor create table type ascii art table like cat name owner name emma aja nick aja mr squeak elyse org take care aligning column also build table typing cc org prompt dimension table include header row automatically moreover existing data csv form highlight data type cc get csv converted table well also command move add delete row column info check resource spreadsheet earlier week analytics data org table quickly needed sum column thought trying move spreadsheet app decided see org could calculation turn since girl scout cookie season seattle table tracking sale several fictional girl scout scout mint peanut butter shortbread ann betsy carmen daphne want total column scout column type cookie add necessary column row get scout mint peanut butter shortbread total ann betsy carmen daphne total like spreadsheet application org shortcut referring cell row column column one indexed prefixed dollar sign first column example row referred indexed well including header second row shortcut last row range specified second fourth column current row forget syntax type cc table cell org annotate table reminder add formula summing ann sale type vsum total column end ann row type cc cc emacs calculate value fill rest column type cu cc sum column use vsum bottom row resulting table look like scout mint peanut butter shortbread total ann betsy carmen daphne total todos checklist many people use org task manager time tracker yet still omnifocus paper planner person use task tracking working user story testing tutorial written using org example org file used outline post todo todos checklist done todos todo cycling cc customizing todo cycle summarizing todo status todo item todo checklist basic checklist nested checklist item one item two check item cc cc todos create todo item put todo cap start outline heading also toggle todo state heading typing cc complete task type cc toggle status done list state org cycle customized setting orgtodokeywords variable variable also allows set multiple workflow long use unique keywords show automatic status summary put todo heading org automatically calculate status summary child heading checkboxes org also support checkboxes plain list org single dash front item convert plain list checklist put item space square bracket necessary nest list check box use summary like todos check item type x box use cc cc find struggling find thing org file use tag tag word preceded followed colon blogpost every heading multiple tag type tag colon use cc cc specify tag minibuffer org autocomplete using tag already buffer want specify list tag use given file org metadata like tag blogpost video twitter code search buffer tag u cc org mode hide content match search org code working tutorial plan publish use org syntax embedding code block name name beginsrc language switch header argument body endsrc example note doc railsconf talk name visionexamplerb beginsrc ruby require gcloudvision v gcloudvision vimage g railsconfpostcardsfremonttrolljpg vannotate landmark endsrc typing cc code block brings editor using correct majormode assuming installed saving editor save org document many thing code org extract code separate file use babel tangle evaluate code inside org text real place org shine though text share org file coworker use emacs even use text editor still read use content feature like progress summary checkboxes work meat document entirely usable used word processor task management app true moreover happy say github page render org like markdown see check org file used writing post exampleorg learn want learn resource used writing post
229,Lobsters,emacs,Emacs editor,Getting Started With Emacs,https://chaseadams.io/getting-started-with-emacs/,getting started emacs,getting started emacs using emacs month post would hurculean task editor pull away shane hansen awesome go developer used vim used emacs emacs best editor still orgmode orgmode orgmode orgmode valuable reason learn emacs written javascript considering giving emacs shot go open mind go emacs tutorial wait install plugins coming vim keybindings deal breaker install evilmode use evilmode eventually try using emacs without check sacha chua learn emacs visual tutorial read doc orgmode orgmode doc check emacs dotfiles dotfiles emacs config tangled bootstraporg osxdefaults executed emacs setup new osx environment,getting started emacsi using emacs month post would hurculean task editor pull away beginning december joined new team walmartlabs writing go optimize requestresponse lifecycle conversation one new teammate shane hansen awesome go developer editor usedi used vim used emacsi using vim year religiously moment realized first emacs user ever met led ask never given emacs try night googled emacs started journey rabbit hole nt come back since fact given considering editor emacs best editor mewhy using emacsi tried number editor coda sublime atom vscode clearly vim never able leave vim always felt darn productive using iteven though knew sacrificing initial productivity major reason willing try emacs emacs around since still group people contributing heavily stuff none editor used dolearning lisp different emacs lisp make editor incredibly powerful flexibleit selfdocumenting want know particular keybinding type help command prompt type keybinding show doc whatever method bound neat orgmode orgmode orgmode going get blog post org mode amazing feature editor ever used way write todo list way keep agenda editor capture todos capture note capture anything heart desire anywhere editor quickly way practice literate programming rather write code document comment write documentation org file run code file tangle file shell script really amazing orgmode valuable reason learn emacsand one minor reason written javascript debated whether bring nt think javascript right language editor get better io response keystroke visual lag emacs vm atom vscode host machine always love javascipt nt love core language editor considering giving emacs shot advice like give willing try emacs go open mind everything new scary easy justify putting time saying scary stupid nt time saying learn emacs saying choosing invest time give fair shakego emacs tutorial learning keybindings functionality emacs one critical step successwait install plugins know white background probably jarring especially using dark theme current editor much box gone tutorial chance getting good chunk current editor give need thing write go javascript install plugins good get feel editor installing stuff may needif coming vim keybindings deal breaker install evilmode use vim keybindings everywhere installed evilmode found provided used vim pretty awesome testament whoever wrote evilmode vim keybinding extension editor missing basic feature made hard use meif use evilmode eventually try using emacs without disabled evilmode wanted give keybindings emacs fair shake bad using emacs without evilmode productively almost two week nowcheck sacha chua learn emacs visual tutorial pretty much every subrabbit hole gone emacs either started ended something sacha blog gold mine information learning emacsread doc orgmode seriously ca nt convey awesome orgmode single post hoping churn bunch new content explaining systematic way use orgmode effective engineer check orgmode doc herecheck emacs dotfiles dotfiles org file either tangled executed dotfiles directory checkout emacs config loaded initel tangled bootstraporg read osxdefaults executed emacs setup new osx environment mention much love orgmode published published
230,Lobsters,emacs,Emacs editor,Suggest.el: Synthesising Constants,http://www.wilfred.me.uk/blog/2017/08/06/suggest-el-synthesising-constants/,suggestel synthesising constant,suggestel supplying constant ranking suggestion smarter search literature review related project section file bug,suggestel offer really interesting new way making suggestion supplying constant suppose user give u input b c desired output would already suggest car get first element list may wanted elt nth get element specific position try adding constant user input specifically nil make suggestel much effective example mentioned input one per line b c desired output suggestion car b c elt b c new nth b c new suggest grouping item list pairwise input one per line b c e f desired output b c e f suggestion partition b c e f new converting vector list input one per line vector desired output list suggestion stringtolist vector append vector nil new rotate vector new concat vector nil new truncating list input one per line b c e desired output c e suggestion drop b c e new slice b c e new cdr cdr b c e choosing good value constant difficult current set seems good tradeoff performance likelihood finding result number useful result ranking suggestion possibility ordering suggestion complex first prototype always get ordering correct input one per line desired output suggestion new new user probably looking increment function feel like stating obvious suggestel prefers function call require extra argument giving u better order input one per line desired output suggestion new new smarter search suggestel try function return save value looking saved list intermediate value important finding nested function call intermediate value common especially exploring arithmetic many way convert integer float value example sqrt float fround ffloor fceiling ftruncate suggestel previously considered every single way generating value try unique value time allows u explore unique possibility increasing likelihood finding result giving literature review finally spent time researching similar tool documented related project section interesting see approach suggestel benefited comparison smalltalk finder example also explores bitwise operation suggestel simple code snippet think suggestel find please file bug routinely surprised result find sure could smarter still
231,Lobsters,emacs,Emacs editor,Literate DevOps with Emacs,https://www.youtube.com/watch?v=dljNabciEGg,literate devops emacs,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature literate devops emacs youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature literate devops emacs youtube
232,Lobsters,emacs,Emacs editor,Optimising Dash.el,http://www.wilfred.me.uk/blog/2017/07/29/optimising-dash-el/,optimising dashel,measure first great optimisation blog post full benchmark code observed outperforming matching primitive performance full benchmark code help emacs stack exchange leveraging bytecompiler open source ftw emacs stack exchange,dashel lovely library one popular melpa squeeze every last drop performance everyone benefit let take look black art making elisp faster measure first chris wellons great optimisation blog post discus performance overhead creating lambda mapcar look map indeed create anonymous function defmacro map form list anaphoric form map mapcar lambda form list creating anonymous function instantiates closure free let write iterative equivalent defmacro maploop form list declare debug form form let resultsym makesymbol result let resultsym dolist list push form resultsym nreverse resultsym list length mapcar second dolist second full benchmark code surprisingly mapcar consistently faster particular benchmark emacsers observed dolist outperforming mapcar short list mapcar primitive primitive tend fast dolist clearly speedup situation let try something else matching primitive performance dashel function equivalent primitive function example firstitem equivalent car drop equivalent nthcdr could write firstitem like defun firstitem lst car lst however add overhead extra function call compared calling car directly instead dashel defalias firstitem car let small benchmark ensure defalias giving u peformance want approach time second wrapper function alias use car directly full benchmark code shame alias still fast using primitive let compare disassembly using mx disasemble defalias caralias car defun usecaralias x caralias x byte code usecaralias args x constant caralias varref x call return defun usecardirectly x car x byte code usecardirectly args x varref x car return intriguingly car bytecode used usecardirectly little help emacs stack exchange see byteoptel look byteopcode property function function symbol property bytecompiler replace function custom bytecode ensure call firstitem compiled single opcode like car put firstitem byteopcode bytecar put firstitem bytecompile bytecompileonearg make performance firstitem indistinguishable car lose ability advise firstitem possible car either leveraging bytecompiler function alias bytecompiler help u turn bytecompiler actually calculate value compile time suppose define pure function drop first two item list defun item cdr cdr item defun message byte code args nil constant message constant constant constant call call return annotate function pure bytecompiler helpfully run compile time defun item declare pure cdr cdr item defun message byte code args nil constant message constant constant call return work calling literal know value literal compile time even annotate function side effect situation bytecompiler remove call entirely evalandcompile work around emacs bug evalandcompile defun item declare sideeffectfree cdr cdr item defun x x foo byte code doc args constant foo return bytecompiler helpfully report warning value returned x unused open source ftw latest version dashel includes improvement simply upgrade take advantage find needing squeeze every last drop performance elisp follow done benchmark code benchmarkrun profilerstart disassemble function diassemble ask friendly emacsers eg emacs stack exchange good luck may editing experience never laggy
233,Lobsters,emacs,Emacs editor,Indium: a JavaScript development environment for Emacs,https://github.com/NicolasPetton/Indium,indium javascript development environment emacs,indium documentation readthedocs warning installation instuctions screenshots missing feature backends,indium javascript development environment emacs indium connects browser tab nodejs process provides many feature javascript development including repl auto completion object inspection inspector history navigation scratch buffer mx indiumscratch javascript evaluation j buffer indiuminteractionmode stepping debugger similar edebug cider documentation installation instruction documentation found readthedocs warning indium us clientserver architecture see installation instuctions screenshots stepping debugger repl companymode repl showing clickable output inspector missing feature indium young list missingwanted feature code evaluation using cx ce project j buffer adding breakpoints remove need debugger statement network inspector could get inspiration restclientel dom inspector start process chromium node grunt gulp etc emacs attach indium connection backends currently support chrom eium nodejs firefox backend todo list
234,Lobsters,emacs,Emacs editor,Eschewing Zshell for Emacs Shell,http://www.howardism.org/Technical/Emacs/eshell-fun.html,eschewing zshell emacs shell,,eshell lisp repl following work expect repl message hello world hello world however shell care simplicity speed typing semantic clearness case drop parens result message hello world hello world function begin eshell available eshell without prefix calling eshellecho function make shell experience le surprising echo hello world hello world put parens need give full name eshellecho hello world hello world type normal shell everything string eshell foot world echo hello world hello world list two string however attempt pas echo least directly car echo hello world return error car list hello world see bring parens also bring syntactic specificness would need car list hello world eshell listify convert argument list string listify hello world hello world want pas data something like car need surround curly brace eshell way saying call shelllikegoodness return like lisp car listify hello world hello upon cursory review appears little difference simple list using listify certain circumstance behavior listify hello world hello world list hello world hello world listify list list hello world hello world escaped listify hello world hello world escaped however got following message david said difference listify list appears calling listify list nest another list eg eshelllistify list element list list one element seems useful context input may list
235,Lobsters,emacs,Emacs editor,Emacs and Magit,https://lwn.net/Articles/727550/,emacs magit,page magit look magit melpa directly github kill ring smerge ediff including magit emacs expressed wish long list developer said limited saying response announced log,please consider subscribing lwnsubscriptions lifeblood lwnnet appreciate content would like see subscription help ensure lwn continues thrive please visit page join keep lwn net jonathan corbetjuly git sourcecode management system widely known flexibility distributed development model support reputation ease use le well established thus opening frontend system make git easier use one comprehensive git front end magit work within emacs editor wide following magit run turbulence within emacs development community blocking wider distribution look magit magit emacslisp elisp program available melpa package archive directly github web site directly address pronunciation usage found suggests sound like magic maggot probably good thing magit installed user system hooked emacs magitstatus command bring window emacs terminology pane within window many others primary control mechanism show information available git status command used directly look uncommitted change found within repository tab key used expand hide various subsection window many git operation keystroke two away one window position changed file hit stage change u unstage individual hunk also staged unstaged desired typing c brings commit option another c bring window commit message cc finalize commit p command used push another repository course set option examining commit stream many produce asciiart version merge history shown tool like gitk many common git logging option limiting specific author searching given string available log display enhanced diffstat information actual patch content magit work reflog well regular commit stream blame mode another useful way examine file history first started annotate source file set header indicating commit added line along author date subjectline info actual commits keystroke away running magitblame recursively go version file prior line point added commit interest found mw put appropriate hash kill ring easy access later naturally support merging use either smerge ediff latter editor opinion one nicer emacs feature general ediff also invoked examine difference two revision file support rebasing including handy command quickly editing commit history rebasing branch top result simple task like example adding ackedby commit magit far easier quicker using git rebase directly common git operation managing remote branching tagging cherrypicking stashing generating pull request etc supported special mode bisecting goodorbad test scripted entire bisection process run automatically magit told appear comprehensive interface git functionality needed user whether one see magit better way use git depend naturally one attitude toward emacsbased interface general keyboardbased course befits text editor pulldown menu emacs running within window user probably nt invoke often vast number operation option provided go well beyond user expected remember expected since git like get around problem magit us series popups displaying available keystroke experience somewhat similar working wordstar word processor oldtimer complaint made system even highly modal interface sits well git command put strange error message unusual occurrence git magit tends throw hand say go look buffer error message operation take long time measured minute logging command editor tried visual indication magit working progress making lot seemingly irrelevant message reverted buffer show message line operation proceeding perfect seamless interface mean including magit emacs emacs editor ship wide array addon package magit one topic recent discussion emacs development list dismay participant richard stallman expressed wish someone would write package comparable magit could included emacs would seem like strange wish magit appears best emacs interface git providing functionality lot emacs user wish licensed large package active development community something could quickly replaced anything resembling current level functionality stallman calling project compete established free emacs package answer course magit contains work long list developer quite filed paperwork assigning copyright free software foundation fsf still insists paperwork refusing case take software claim ownership sort discussion come occasionally emacs list result every time case john yates said magit could emerge one ohsoelusive creature true killer app emacs platform added sometimes community might important copyright assignment asked stallman reconsider stefan monnier seen many discussion limited saying want distribute something like magit emacs need write replacement simply include magit since license allows u hurdle one emacs maintainer put stallman however known swayed argument response case made clear going change position either significant contributor magit must sign paper fsf code holdout replaced entirely new emacs interface git must written phillip lord announced make attempt get paper magit order time tell succeed either way though lot work expended either enable distribution software already distributable try replace equivalent functionality hard see win emacs user developer would appear winning strategy emacs general log post comment
236,Lobsters,emacs,Emacs editor,Remacs – A community-driven port of Emacs to Rust,https://github.com/Wilfred/remacs,remacs communitydriven port emacs rust,rust emacs emacs rust table content emacs totally introspectable incremental programming environment mutable environment provides functionality without application incredible software concept nt hit mainstream yet infinite clipboard undoing historical state reverse variable search structural editing recursive editing documentation culture broad ecosystem emacs learning curve pay rust fantastic learning curve documentation superb excellent tooling packaging story excellent easily interoperates c port rust incrementally many compiletime check fork xemacs guile emacs emacsjit deuce jemacs el compilador explore new development approach drop legacy platform compiler idea emacs current implementation emacs getting started requirement rust installed dockerized development environment docker dockercompose building remacs building remacs running remacs design goal compatibility leverage rust leverage rust ecosystem great doc progress progress section longterm goal porting elisp primitive function contributing rust code conduct low hanging fruit porting cookbook gitter channel,rust emacs communitydriven port emacs rust table content emacs emacs change think programming emacs totally introspectable always find code run press button emacs incremental programming environment editcompilerun cycle nt even editrun cycle execute snippet code gradually turn finished project distinction editor interpreter emacs mutable environment set variable tweak function advice redefine entire function nothing offlimits emacs provides functionality without application rather separate application functionality integrated emacs instance amazingly work ever wanted use snippet tool writing c class well email emacs full incredible software concept nt hit mainstream yet example many platform single item clipboard emacs infinite clipboard undo change continue editing ca nt redo original change emacs allows undoing historical state even allowing treebased exploration history emacs support reverse variable search find variable given value perform structural editing code allowing make change without breaking syntax work lisp paredit nonlisps smartparens many application use modal gui example ca nt edits findandreplace operation emacs provides recursive editing allow suspend currently perform edits continue original task emacs documentation culture emacs includes usage manual lisp programming manual pervasive docstrings even interactive tutorial emacs broad ecosystem want edit code niche language probably emacs package emacs nt monopoly good idea great tool nonetheless believe emacs learning curve pay rust rust great alternative c rust fantastic learning curve documentation superb community helpful get stuck rust excellent tooling compiler make great suggestion unit test framework good rustfmt help ensure formatting beautiful consistent rust packaging story excellent easy reuse great library available easy factor code benefit others replace entire c file emacs wellmaintained rust library code written rust easily interoperates c mean port rust incrementally working emacs step process rust provides many compiletime check making much easier write fast correct code even using multithreading also make much easier newcomer contribute give try think like fork emacs widely used tool long history broad platform support strong backward compatibility requirement core team understandably cautious making farreaching change forking longstanding tradition emacs community trying different approach notable emacs fork include xemacs guile emacs emacsjit also separate elisp implementation deuce jemacs el compilador forking explore new development approach use pull request workflow integrated ci drop legacy platform compiler remacs never run msdos ok difference idea emacs current implementation emacs forking allows u explore even emacsy getting started requirement need rust installed file rusttoolchain indicates version get installed happens automatically nt override toolchain manually important whenever toolchain update reinstall rustfmt manually need c compiler toolchain linux something like apt install buildessential automake clang libclangdev macos need xcode linux apt install texinfo libjpegdev libtiffdev libgifdev libxpmdev gnutlsdev libxtdev macos brew install gnutls texinfo autoconf use installed version makeinfo instead builtin usrbinmakeinfo one need make sure usrlocalopttexinfobin usrbin path mojave install header open dockerized development environment nt want bother setup use provided docker environment make sure docker dockercompose available spin environment run first time run command docker build image subsequent startup happen le second command fails needing absolute path make sure set pwd environment variable calling command like pwd pwd dockercompose working directory remacs mounted path container editing file host machine automatically reflected inside container build remacs use step building remacs prefixed dockercompose exec remacs ensure command executed inside container building remacs autogensh configure enablerustdebug make release build nt pas enablerustdebug makefile obeys cargo rustflags variable additional option passed cargo cargoflags example make cargoflags vv rustflags zunstableoptions cfg markerdebug running remacs run shiny new remacs build using q ignore emacsd remacs start quickly rustbacktrace optional useful instance crash srcremacs q design goal compatibility remacs break existing elisp code ideally provide ffi leverage rust remacs make best use rust ensure code robust performant leverage rust ecosystem remacs use existing rust crate wherever possible create new separate crate code could benefit others great doc emacs excellent documentation remacs different progress point focus porting lisp function c rust currently function rust c may progress section wiki also list longterm goal project porting elisp primitive function first thing look c implementation atan function take optional second argument make interesting complicated mathematical bit hand handled standard library allows u focus porting process without getting distracted math lisp value given argument tagged pointer case pointer double code check tag follow pointer retrieve real value note code invokes c macro called defun reduces boilerplate macro declares static variable called satan hold metadata lisp compiler need order successfully call function docstring pointer fatan function c implementation named defun atan fatan satan doc return inverse tangent argument one argument given return inverse tangent two argument x given return inverse tangent divided x ie angle radian vector x xaxis lispobject lispobject x double extractfloat nilp x atan else double extractfloat x return makefloat extractfloat check tag signalling invalid argument error tag double return actual value nilp check see tag indicates null value indicating user nt supply second argument next take look current rust implementation must also take optional argument also invokes rust macro reduce boilerplate declaring static data function however also take care type conversion check need order handle argument return value return inverse tangent argument one argument given return inverse tangent two argument x given return inverse tangent divided x ie angle radian vector x xaxis lispfn min pub fn atan emacsdouble x option emacsdouble emacsdouble match x none yatan x x see nt check see argument correct type code generated lispfn macro u also asked second argument option emacsdouble rust type value either valid double nt specified use match statement handle case code much better hard believe simple implementation macro call argument return value compiler rest dispatch method call correct implementation contributing pull request welcome copyright assignment required project rust code conduct lot keep list low hanging fruit easily choose one find information porting cookbook ask help gitter channel
237,Lobsters,emacs,Emacs editor,The Emacs Operating System,https://writequit.org/eos/eos.html,emacs operating system,cedet orgmode setup usepackage,initel file emacs read start bootstrapping eos module loaded load module cleanup end worth noticing even though would tangle eosel default get symlinked emacsdinitel since error may occur loading eos file set debugging thing debugger entered problem get unset everything load successfully setq debugonerror setq debugonquit load couple custom version library included emacs run newer version bundled particular check existence load otherwise us bundled version custom version cedet load custom version cedet available fileexistsp srcelispcedetcedetdevelloadel load srcelispcedetcedetdevelloadel hardcode version orgmode load custom version orgmode available fileexistsp srcelisporgmodelisp addtolist loadpath srcelisporgmodelisp addtolist loadpath srcelisporgmodecontriblisp require org also let make cl thing available right start ca nt live without x dvorak b qwerty hard cx thing hit maybe one day switch evil godmode done much convenient switch cx ct keyboard nt transpose thing nearly often cx thing definekey keytranslationmap ct cx definekey keytranslationmap cx ct packageel setup strategy regard packaging simple make heavy use usepackage installing ensure keyword need set source least require package packageinitialize orgmodeorg unfortunately support http addtolist packagearchives org http orgmodeorgelpa addtolist packagearchives gnu http elpagnuorgpackages addtolist packagearchives melpastable http stablemelpaorgpackages addtolist packagearchives melpa http melpaorgpackages let also set custom file load anything fancy want make sure keep customize setting file instead initel setq customfile emacsdcustomel fileexistsp customfile load customfile define eosdidrefreshpackages used signal installpkgs need refresh package archive defvar eosdidrefreshpackages nil flag whether package refreshed yet installpkgs simple elisp function iterate list install package installed eosdidrefreshpackages set nil also refresh package manager defun installpkgs list dolist pkg list progn packageinstalledp pkg progn eosdidrefreshpackages progn packagerefreshcontents setq eosdidrefreshpackages packageinstall pkg pin package go wonky use bleeding edge boundp packagepinnedpackages setq packagepinnedpackages orgpluscontrib org cider melpastable accider melpastable clojuremode melpastable clojuremodeextrafontlocking melpastable companycider melpastable install thing need future package installationconfiguration particular usepackage need installed require everywhere else installpkgs usepackage load usepackage used loading package everywhere else require usepackage nil set debug package loading nil disable setq usepackageverbose nil
238,Lobsters,emacs,Emacs editor,Synthesising Elisp Code,http://www.wilfred.me.uk/blog/2017/07/02/synthesising-elisp-code/,synthesising elisp code,suggestel anyway let segfault emacs upstream fixed underlying issue function number argument slightly magical judicious search heuristic testing search outro barliman video available melpa,released suggestel emacs package discovering elisp function supply example input output make suggestion much smarter almost magical place let take look anyway communicating suggestel difficult bodil tweet much better job communicating usage overhauled readme full example like suggestel also help find tricky dashel function input one per line list b c c desired output suggestion elemindex c list b c help user get idea suggestel let segfault emacs turn bruteforcing elisp primitive expose nasty emacs bug suggestel longer make emacs crash upstream fixed underlying issue function since initial release suggestel suggest additional function suggestel able help find value vector convert symbol string much besides serendipitous discovery much likely number argument input list might able call function apply get desired result given input output suggestel propose apply slightly magical suggestel major limitation need combine function get result want added breadthfirst search nested function call using judicious search heuristic suggestel search three nested function call proved really fun feature sometimes produce surprising result input one per line desired output suggestion float length numbertostring converting string taking length indeed produce numbertostring length float sorting result still open problem suggestel prefers fewer function call crude notion simple function input one per line b c desired output c suggestion clthird b c c lastitem b c c cadr cdr b c c car last b c c apply last last b c c clthird v lastitem v car last largely matter taste last result entirely silly testing search also written series test verify search return intended result addition others really helpful tweaking search heuristic wrapped pretty macro ertdeftest suggestpossibilities particularly deep search shouldsuggest ensure offer builtin list function shouldsuggest b c c cdr cdr however implementation shouldsuggest macro pretty macro great finding better way expressing idea often find produce insight lead refactoring away entirely time tell macro worth maintenance outro like suggestel blown away barliman take idea synthesising much much even generate quine see video great demonstration suggestel available melpa discover interesting function combination love hear
239,Lobsters,emacs,Emacs editor,ergoemacs-mode Quick start Guide,https://ergoemacs.github.io/,ergoemacsmode quick start guide,different,enable emacs add following emacs emacsdinitel file setq ergoemacstheme nil us standard ergoemacs keyboard theme setq ergoemacskeyboardlayout u assumes qwerty keyboard layout ergoemacsmode key theme keyboard layout initilization code different however qwerty key binding
240,Lobsters,emacs,Emacs editor,evil-goggles: displays a visual hint when editing with evil-mode,https://github.com/edkolev/evil-goggles,evilgoggles display visual hint editing evilmode,evilgoggles evil preview usage installation action visual hint edit action hint evil plugins hint customizations appearance customization customizations news recent significant change,evilgoggles evilgogglesmode display visual hint editing evil preview usage enable evilgogglesmode edit text like normally would try example yy p dd normal state installation usepackage evilgoggles ensure config evilgogglesmode optionally use diffmode face result deleted text highlighed diffremoved face typically red color defined color theme face diffadded used action evilgogglesusedifffaces mx packageinstall ret evilgoggles ret add initel evilgogglesmode action visual hint edit action hint delete change yank paste indent operator join format gq operator shift left right operator undo redo set mark startstop macro recording evil plugins hint customizations appearance customization pulse visual hint rather show hide setq evilgogglespulse default pulse running graphic display change default face customsetfaces evilgogglesdefaultface inherit highlight default inherit region run mx listfacesdisplay fresh emacs get list face emacs default goggles face inherit evilgogglesdefaultface turn inherits emacs region face use different face per edit action customsetfaces evilgogglesdeleteface inherit shadow evilgogglespasteface inherit lazyhighlight evilgogglesyankface inherit isearchfail following face defined evilgoggles evilgogglesdefaultface inherits region default evilgogglesdeleteface others inherit evilgogglesdefaultface evilgoggleschangeface evilgogglesindentface evilgogglesyankface evilgogglesjoinface evilgogglesfillandmoveface evilgogglespasteface evilgogglesshiftface evilgogglessurroundface evilgogglescommentaryface evilgogglesnerdcommenterface evilgogglesreplacewithregisterface evilgogglessetmarkerface evilgogglesundoredoaddface evilgogglesundoredoremoveface evilgogglesundoredochangeface evilgogglesrecordmacroface customizations duration overlay configured evilgogglesduration setq evilgogglesduration default fine grained duration configuration modified variable affect blocking hint example deleting hint displayed deletion delayed blocked hint disappers hint removed deletion executed make sense duration short setq evilgogglesblockingduration default nil ie use evilgogglesduration variable affect async hint example indenting indentation performed hint visible ie hint displayed action indent executed asynchronous hint removed highlighting result indentation setq evilgogglesasyncduration default nil ie use evilgogglesduration disable hint certain action modify variable evilgogglesmode started disable hint pasting setq evilgogglesenablepaste nil list onoff variable default value evilgogglesenabledelete evilgogglesenablechange evilgogglesenableindent evilgogglesenableyank evilgogglesenablejoin evilgogglesenablefillandmove evilgogglesenablepaste evilgogglesenableshift evilgogglesenablesurround evilgogglesenablecommentary evilgogglesenablenerdcommenter evilgogglesenablereplacewithregister evilgogglesenablesetmarker evilgogglesenableundo evilgogglesenableredo evilgogglesenablerecordmacro news recent significant change jul make async hint cleanup robust jun refactor code use around advice source edgecaseissues feb show hint startstop macro recording dec pulsing hint longer experimental nov add option evilgogglesasyncduration evilgogglesblockingduration sep add experimental support pulsing hint longer experimental since dec sep support undoredo longer experimental sep emacs support aug add experimental support undoredo longer experimental since sep may switched using peraction onoff custom variable deprecated evilgogglesblacklist may switched using custom face per action deprecated evilgogglesfacesalist
241,Lobsters,emacs,Emacs editor,borg: iPhone Org-mode app,http://appsonthemove.com/blog/2017/05/25/borg/,borg iphone orgmode app,note borg called beorg app store read version orgmode emacs mobileorg borg appsonthemovecom borg appsonthemovecom,note borg called beorg app store read version use orgmode iphone carry reading know orgmode fantastic plaintext based system outlining task planning authoring many people included started using emacs orgmode probably also aware io orgmode app called mobileorg allows sync editing org file io device however allow quickly see agenda harder tool use popular io apps thing omnifocus wunderlist newcomer orgmode feasibly able continue using carry around iphone need alerted task upcoming deadline able quickly glance day week look like borg really new app may eventually provide relatively complete orgmode experience iphone least term todo list project note far take borg depends feedback orgmode user whether sufficiently fund ongoing development mind looking orgmode user test first version borg lot limitation explain however use orgmode certain way prove useful tool got excited new toy play stop reading email borg appsonthemovecom ask put list tester would really useful explain experience orgmode looking mobile orgmode app main limitation work dropbox however app architected eventually allow sync solution syncs file folder dropbox recurse subfolders support repeating complex date representation see dated task see detail task see task date completely readonly editing currently implemented iphone moment ipad support introduced due course probably lot depending complex orgmode usage roadmap currently look like tip jar release app store following implementation vital change suggested tester show basic item detail including note show list todos date provide list org file app readonly outline style view file outline folding quick capture editing existing file creation new file search interested getting app providing feedback create tool hopefully bring many user orgmode fold send email borg appsonthemovecom get build
242,Lobsters,emacs,Emacs editor,Xah Fly Keys,http://ergoemacs.org/misc/ergoemacs_vi_mode.html,xah fly key,emacs xah fly key new xahlee discord vi video intro download http githubcomxahleexahflykeys http melpaorg xahflykeys melpa install emacs install package elpamelpa manual install command mode key activate command mode command mode visual indicator insert mode key activate insert mode insert mode visual indicator leader key command use whichkeymode help learn leader sequence http githubcomjustburemacswhichkey emac mx never need press meta standard control key shortcut isearch dired mode org mode single key dired xah fly key tutorial emacs xah fly key tutorial customization emacs xah fly key customization batman keyboard normal pc keyboard apple keyboard laptop keyboard xah gergo layout frequently asked question compare ergoemacsmode http ergoemacsgithubio compare evilmode http githubcomemacsevilevil long take learn xahflykeys xahflykeys work terminal chat forum history emacs xah fly key history vi keybinding v emacs keybinding testimonial xah fly key testimonial,emacs xah fly key xah lee date last updated new old version xah fly key key engine change major engine rewrite dan langlois dey big thank xah fly key priority wo nt annoying problem mode like magit org next day going update customization page vast majority code work problem goto xahlee discord file bug report support qwerty norwegian layout thanks support norman layout fancy ergo layout colemak colemakmoddh dvorak programerdvorak workman norman plus international one qwerty azerty azertybe qwertyabnt qwertz chat xahflykeys discord xahlee discord xahflykeys efficient vim keybinding set history xahflykeysel modal editing mode emacs like vi design keycommand choice based command frequency statistic easeofkey score frequently used command easy key hand pain using emacs consider using xahflykeys never need press ctrlx never need press meta anymore xah fly key kinesis keyboard friend video intro like watch video intro video intro xah fly key download download http githubcomxahleexahflykeys also melpa http melpaorg xahflykeys melpa install see emacs install package elpamelpa installed melpa put following init require xahflykeys xahflykeyssetlayout qwerty xahflykeys manual install put file xahflykeysel emacsdlisp put following emacs init addtolist loadpath emacsdlisp require xahflykeys xahflykeyssetlayout qwerty xahflykeys command mode b c e f g h j k l n p q r u v w x z xah fly key command mode layout mx isearch insert undo mark w reformat paste cut copy cmt goto next window split unsplit select leader key cmd mode line word quote show qwerty show dvorak show colemak command mode right hand letter key moving cursor general example j k l arrow left hand letter key deletingmodifying text key activate command mode command activate command mode altx xahflycommandmodeactivate default following key altspace home menu key key microsoft keyboard usually besides right ctrl command mode visual indicator command mode cursor shape black rectangle wo nt work text terminal command mode first character emacs status bar aka mode line display capital c xahflykeys command mode insert mode insert mode key insert character whatever letter key current major mode example dired mark file key activate insert mode command activate insert mode altx xahflyinsertmodeactivate command mode f activates insertion mode command mode space space also activates insertion mode insert mode visual indicator insert mode cursor shape ibeam wo nt work text terminal insert mode first character emacs status bar aka mode line display capital xahflykeys insert mode leader key command never need press ctrlx example ctrlx b switchtobuffer space f ctrlx ctrlf findfile space e ctrlx deleteotherwindows command mode first key key sequence call example space leader key space f command mode space leader key globally leader key key example f switchtobuffer need switch command mode first example frequently used one space space xahflyinsertmodeactivate space enter executeextendedcommand space f switchtobuffer space h beginningofbuffer space n endofbuffer space r queryreplace space k r queryreplaceregexp command leader key sequence frequently used command key command key rarely used use whichkeymode help learn leader sequence learning xahflykeys recommend using whichkey http githubcomjustburemacswhichkey whichkey press leader key subsequent key command displayed emacs whichkeymode emac mx command mode executeextendedcommand space return executeextendedcommand never need press meta emacs command meta keybinding also keybinding without meta xahflykeys example altf forwardword command mode alt queryreplace space r command mode find key altx describekey press meta key combination emacs print keybinding standard control key shortcut following standard key supported default disabled ctrltab xahnextuserbuffer ctrlshifttab xahprevioususerbuffer ctrlv paste yank ctrlw xahclosecurrentbuffer ctrlz undo ctrln xahnewemptybuffer ctrlo open findfile ctrls savebuffer ctrlshifts save writefile ctrlshiftt xahopenlastclosed ctrl zoomin textscaleincrease ctrl zoomout textscaledecrease necessary use key shortcut command key need ctrl time need press ctrl key ctrlc major mode command ctrlg cancel ctrlq quotedinsert ctrlh help isearch command mode n start isearchforward isearch ctrly paste leftright arrow key search backwardforward updown arrow key previousnext search history return exit isearch leave cursor current location ctrlg exit isearch leave cursor original location dired mode org mode single key plain gnu emacs mode typing letter key insert letter run special command example dired mark u unmark xahflykeys insert mode typing letter key whatever mode command xah fly key tutorial emacs xah fly key tutorial customization emacs xah fly key customization batman keyboard xahflykeys designed keyboard made sure work well normal pc keyboard apple keyboard laptop keyboard work well text terminal graphical user interface batman keyboard much merrier suggested optimal configuration gergo keyboard xah fly key layout xah gergo layout frequently asked question compare ergoemacsmode ergoemacsmode remaps frequently used emacs command use altkey key choice based frequency command call ergoemacsmode part fsf gnu emacs elpa repository probably download version melpa usually uptodate nt like modal way recommend ergoemacsmode http ergoemacsgithubio ergoemacsmode lead matthew fidler ergoemacs mode use alt primary key emacs command compare evilmode evilmode let use vim key emacs large number user advantage able use emacs vim http githubcomemacsevilevil long take learn xahflykeys take time learning vi first time practice hour per day probably month fluent xahflykeys work terminal yes chat forum history emacs xah fly key history see also vi keybinding v emacs keybinding testimonial xah fly key testimonial
243,Lobsters,emacs,Emacs editor,The Astounding Variety of Groovy Strings,http://www.wilfred.me.uk/blog/2017/05/23/the-astounding-variety-of-groovy-strings/,astounding variety groovy string,emacs mode official doc try highlight lazily evaluated making work emacs,writing groovy recently groovy shockingly flexible string syntax discovered trying improve emacs mode groovy try really hard make happy provides normal string hello world since recent scripting language provides string interpolation def name wilfred hello name groovy stop however oh string interpolation flexible access object attribute even write arbitrary groovy expression hello username interpolation challenging highlight nest hello true else naturally might always want interpolation groovy provides escaping mechanism additional syntax escaping cost interpolation singlequoted string cost want multiline string groovy interpolated raw flavour hello world hello world useful sometimes want start line groovy let escape def foo line newline line line scripting language also support foo syntax groovy user might want well course available tricky highlight correctly empty string begin comment fob ar az brave heart interpolate regular expression simple interpolation def name wilfred user name however want use pattern work legal interpolation magically fall back literal pattern user groovy even stop string many embedded singlequotes doublequotes interpolated multiline dollarslashystring available dollarslashystring awkward highlight even official doc try highlight def message dear usercapitalize thank signing acme mailing list kind regard string syntax escaping mechanism foo bar foo bar stake claim incredibly versatile syntax groovy string one last trick sleeve string lazily evaluated def number def eagerstring number number assert eagerstring however def number def lazystring number assert lazystring number assert lazystring needle say total madman would try write syntax highlighter groovy really neat language excellent glue code whole lot fun making work emacs
244,Lobsters,emacs,Emacs editor,"The keyboards that informed Vim's hjkl, Emacs's chording, and Ctrl-C/X/V",http://xahlee.info/kbd/keyboard_hardware_and_key_choices.html,keyboard informed vim hjkl emacs chording ctrlcxv,history emacs vi key emacs meta control curious look emacs one thousand keybindings lisp machine keyboard emacs cursor movement key cn cp cf cb came http lisp programer daniel weinreb died emacs nt controlshiftletter key vi esc key j k h l http vi mode switching idea came vi us j k h l cursor movement keyboard use h j k l arrow instead j k l http http newsycombinatorcomitem local copy ascii table vi keybinding v emacs keybinding interview bill joy creator vi interview bill joy creator vi terminal key linux terminal control sequence key gaming w dvorak keyboard layout second life x c v cut copy paste image source apple macintosh keyboard year control key capslock key position old keyboard window prtscnsysrq screenshot conclusion dvorak keyboard layout arrow key efficiency vim hjkl v ijkl ban key chord print screen sysrq scrlk pause break key flock key problem http newsycombinatorcomitem http twittercomlproven http newsycombinatorcomitem patreon,history emacs vi key xah lee date last updated study keyboarding past year noticed choice many shortcut many apps adopted many aspect keyboard hardware time use community emacs keybinding simply based first letter command qwerty layout key position significant influence also applies letter choice unix shell command much influence design unconscious emacs meta control example emacs meta key heavy use ctrl primary modifier avoiding ctrlshiftletter keyboard shortcut caused lisp keyboard hardware dumb terminal see curious look emacs one thousand keybindings symbolics lisp machine keyboard pn rev c photo joey devilla http used permission see lisp machine keyboard emacs cursor movement key cn cp cf cb came time guy steele put together emacs default key mapping many people target user community people mit already using key binding would hard get new emacs binding accepted community differed basic command point anyone using emacs easily change based ergonomic preference emacs keybinding daniel weinreb http accessed see lisp programer daniel weinreb died emacs nt controlshiftletter key terminal controlshiftletter signal controlletter see also vi esc key j k h l keyboard image source http note position escape key arrow h j k l also position ctrl position colon key vi mode switching idea came back terminal screen column line realtime editing edit typing command call another command screen update show result command vi evolved also emacs manual call time display emacs first one first time editor vi us j k h l cursor movement unix vi use j k h cursor movement choice escape key mode switching came keyboard developed terminal keyboard use h j k l arrow instead j k l reason appears heavily influenced design ascii encoding involved clever assignment binary code letter tweak one bit character z corresponds nonprintable character starting code nonprintable character choice interpretation corresponds arrow direction corresponding letter h j k l jgrahamc wrote reason keyboard arrow key key correspond ctrlh j k l ctrl key back worked killing bit bit character typed effect h ascii would become backspace look ascii table example http wwwasciitablecom notice uppercase ascii letter line nicely control character dropping bit get thing lowercase drop bit control character ctrlh j k l therefore correspond b lf vt ff b backspace ie left lf vt vertical tab ff form feed case take right sure ff used right also ctrli tab ctrld end communication go back teletype day also telnet user see ctrl line nicely esc see printed terminal see corresponds null byte one interesting thing ascii uppercasing downcasing done twiddling single bit look picture teletype see come control character keyboard correspond ascii set ascii evolved earlier teletype character set http source http newsycombinatorcomitem local copy ascii control charbackspacelinefeedvertical tabformfeed input methodctrlhctrljctrlkctrll see ascii table see also vi keybinding v emacs keybinding fully answer terminal keyboard arrow printed h j k l key really know one must read terminal manual interactive display terminal operator arrow key apparantly arrow key used control key held simply sends corresponding ascii control code control code interpreted move cursor vi designer bill joy simply used key vi modal way without needing hold control key interview bill joy creator vi interview bill joy creator vi see also terminal key many terminal key linux familiar today keyboard shortcut keybindings proper simply input method ascii control character example ctrld exit terminal cursor beginning prompt detail see linux terminal control sequence key gaming w gaming convention w avatar movement key also shaped pc keyboard physical key layout used time people need use right hand mouse operating gun view left hand used controlling avatar movement right hand dexterous hand people operating mouse need dexterity pressing arrow key move avatar arrow key problem arrow key right side keyboard making awkward use left hand cluster key left side keyboard used instead w example e f key e f standard typing position w suitable w closer capslock tab shift ctrl alt gamers need use firing shield jump change weapon etc w became convention also note common layout qwerty w inverted qwerty layout using dvorak keyboard layout w key scattered problem fact early day many game respect user choice key layout operating system provide way user change key even today game software still problem notably second life early day say mid operating system window hardly consistent keyboard layout api programers anyway many software protocol standard layer gradually established later thing x c v cut copy paste another history convention x c v key cut copy paste came apple macintosh keyboard year photo muirium image source see apple macintosh keyboard year q w z x c v apple computer starting macintosh made undo cut copy paste concept popular mass general concept computer keyboard shortcut key chosen adjacent left side keyboard key also set quit q close w select save duplicate undo z exception open print p right side keyboard key become de facto standard application window mac linux today except ctrlshiftz redo duplicate see also control key capslock key position old keyboard window prtscnsysrq screenshot printscreensysrq scrolllock pausebreak insert today pc keyboard find quite relic key printscreensysrq scrolllock pausebreak insert used meaningful purpose earlier separate key computer hardware change software change dramatically past year keyboard change fast due habit key became defunct name somewhat relates screen capture microsoft chosen key saving screenshots similarly backspace key chosen key web browser go back previous page note key labeled apple keyboard even sent exact signal apple operating system mac classic mac o x since early key used browser back function around apple started adopt many window convention see also conclusion conclusion many keyboard shortcut hotkey choice based practical time issue logical design ergonomics consistency efficiency le important concept nt even exist time choice good time computer system hardware keyboard changed retrospect many choice best today example qwerty layout practical time dvorak layout invented late convention already established concept keyboard ergonomics may even exist typing computer done everyone today chatting email sort communication programing become field million time number typist year ago see dvorak keyboard layout emacs primary modifier ctrl much better alt position today pc keyboard escape might better today pc keyboard alt capslock position vi h j k l still pretty good j k l equally efficient intuitive see arrow key efficiency vim hjkl v ijkl way capslock work deprecated work key capitalize next letter key press way shift entirely removed modifier key shift deprecated instead special key starting key key sequence call command like microsoft window alt key work window window see ban key chord defunct key insert printscreen scrolllock pause break really gone see print screen sysrq scrlk pause break key numlock number keypad also relic time long past keyboard nt dedicate arrow key page updown homeend etc key today need key change sound level playpause music nextprevious song luckily keyboard since mid standardized layout similarly need key launch frequently used apps email web browser also widely popular keyboard need key switch previous next appwindowtab also needed dedicated key copy cut paste undo redo used every application hourly basis major keyboard maker microsoft logitech started make keyboard function preassigned function key however creates problem function key already us many application especially programers microsoft also introduced flock key toggle purpose f function key created problem worth see flock key problem addendum hacker news discussion http newsycombinatorcomitem thanks liam proven http twittercomlproven correction apple keyboard photo used addendum hacker news discussion http newsycombinatorcomitem question put patreon message
245,Lobsters,emacs,Emacs editor,Less intrusive color theme,http://vfoley.xyz/syntax-highlighting/,le intrusive color theme,le intrusive color theme sublime text written texbook material theme dracula,le intrusive color theme apr purpose syntax highlighting draw attention certain part code help u identify comment string literal properly terminated keyword misspelled escape sequence invalid lately find editor colorize many element use many color recentlyacquired annoyance maybe age worse eyesight something every syntactic construct highlighted none jump defeat purpose take look screenshot sublime text find difficult focus anything much highlighted programmer written turning syntax highlighting entirely extreme texbook knuth give advice reader special typeface special font effective emphasis sustained reading eye would tire long portion manual entirely set bold slanted italic face therefore roman type account bulk typeset material many common programming text ideal neither competely barren buffer book exclusively used time new roman would extremely difficult read moderation key tried many emacs theme year lucky large collection welldesigned theme mind lot color material theme quite nice however since find one used color decided build purp hard emacs plenty opensource theme one use inspiration education purp tried minimize number color number element highlighted see result screenshots consider following element important enough color string character literal want know properly terminated comment want find quickly language nested comment syntax highlighting show made error function name theme called dracula give function name bright color find help identify function begin better indentation stole idea preprocessor command often subject rule base language wanted see easily warning language mode eg rust use face identify dangerous construct bad idea make sure visible everything else us default typeface think code look much calmer sublime screenshot purp publicly available yet still lot work left installation emacs defines face org mode defined color
246,Lobsters,emacs,Emacs editor,Polywell: Emacs inspired Text Editor in Love2d,https://gitlab.com/technomancy/polywell/,polywell emacs inspired text editor,polywell,polywell project id
247,Lobsters,emacs,Emacs editor,Configure Git Pairs with Magit,http://www.danieldeaguiar.com/git-pair/,configure git pair magit,configure git pair magit email protected email protected config,configure git pair magit like probably used git pair script point number script work way creating local git config pair author information used avid user git cli changed since switched magit unfortunately still need want setup git pairing session decided change partly keep switch emacs also exercise improve elisp chop requirement override commit author committer single command add author override minibuffer single command remove author override single command toggle author override persist override across buffer overridden author value must visible magit commit popup code spelunking found magit expose variable magitcommitarguments defined gitcommitel hold list string representing commit argument customizable requirement call user experience little dynamic setting emacs custom variable using variable satisfy requirement time write code manipulate first create function named mygitsetauthor let add author commit argument defun mygitsetauthor author set author argument input author string author addtolist magitcommitarguments concat author author minibuffermessage concat author overridden author work interactive meaning invoked minibuffer get prompt input good start though add another function fill gap defun mygitoverrideauthor activates git commit author override using input author interactive let author readstring ie u thor email protected mymagitgcoverrideauthor mygitsetauthor author function mygitoverrideauthor interactive prompt message convenient reminder author format satisfies requirement set need able remove function mygitremoveauthoroverride defun mygitremoveauthoroverride remove author commit argument interactive setq magitcommitarguments removeif lambda stringmatch author magitcommitarguments minibuffermessage author override removed great add remove override check requirement time add override toggling define variable mymagitgcoverrideauthor persist author override update mygitoverrideauthor use follows defun mygitoverrideauthor activates git commit author override using input author interactive let author readstring ie u thor email protected mymagitgcoverrideauthor setq mymagitgcoverrideauthor author mygitsetauthor author implement mygitauthortoggle check requirement defun mygitauthortoggle toggle git commit author override interactive findif lambda stringmatch author magitcommitarguments mygitremoveauthoroverride mygitsetauthor mymagitgcoverrideauthor finally tie together keybindings get set magit initialized really like usepackage thing like usepackage magit bind cc cp mygitoverrideauthor cc cu mygitremoveauthoroverride cc ct mygitauthortoggle require magitcommit otherwise magitcommitarguments wo nt initialized first try commit something require magitcommit future probably add nicety like support selecting known pair support pair initial good enough full implementation found emacs config got goody peruse config keep mind use prelude emacs distribution cheer dan footnote
248,Lobsters,emacs,Emacs editor,"One person submitted 10% of the 18,500 Emacs bug reports over the past nine years",https://lists.gnu.org/archive/html/emacs-devel/2017-03/msg00222.html,one person submitted emacs bug report past nine year,date prev date next thread prev thread next date index thread index bug report statistic o arch bug report statistic o arch,date prev date next thread prev thread next date index thread index bug report statistic o arch glenn morris subject bug report statistic o arch date fri mar useragent gnu wwwgnusorg gnu emacs wwwgnuorgsoftwareemacs friday afternoon statistic emacs bug database nt represent anything making bug report including template information amusement nt done anything fancy like include distinct reporter email address particularly enthusiastic bug reporter could skew result based arch triplet eg gnu emacs xxx line report dating back year linuxgnu mingw apple cygwin freebsd solaris netbsd openbsd aix hpux irix kfreebsdgnu powerpc mips sparc arm hppa alpha based system distribution line report dating back year ubuntu debian fedora arch suse gentoo mint rhel trisquel gnewsense centos elementary o scientific linux devuan lmde raspbian none tell one person responsible emacs bug report past year next enthusiastic see effect significant bug report statistic o arch glenn morris
249,Lobsters,emacs,Emacs editor,Wireworld in Emacs,http://dustycloud.org/blog/wireworld-in-emacs/,wireworld emacs,activitypub fosdem chicagolug implemented wireworld emacs wireworld cellular automaton conway game life wikipedia say know fully working computer seeing cool hack digital clock implemented conway game life try implementing computer golly guix code,truth universally acknowledged hacker pressure deadline must want distraction todo list mountain high especially cracking stress trying get thing moving along activitypub test suite write turned hard several deadline row also meant blog several thing say talk gave fosdem chicagolug got leak inbox running long basement email developed undertow today instead getting knew done instead went something much interesting say implemented wireworld emacs wireworld cellular automaton unlike conway game life except wireworld cell play bit constrained set wire electron run along multiply die path stay rule simple implement wikipedia say know build incredible thing even fully working computer anyway like many hack one appeared boredomdistraction long wanted play wireworld reminded seeing cool hack digital clock implemented conway game life reminded much wanted try implementing computer even much simpler circuitry never able get started could nt find working implementation easy package started packaging golly guix got stuck reason ca nt remember started thinking much liked typing ascii art emacs cool would draw circuit buffer started experimenting within two hour working implementation two hour later major mode syntax highlighting handy cc cc keybinding advancing buffer live hacking emacs amazing could done would nice shortcut say cc c start simulation new buffer run simulation automatically without clobbering main buffer could work way mx life anyway code want play around happy circuit hacking
250,Lobsters,emacs,Emacs editor,Emacs org-mode examples and cookbook,http://ehneilsen.net/notebook/orgExamples/org-examples.html,emacs orgmode example cookbook,,c code handled little differently must compiled run block header includes mathh flag lm header var var var beginsrc c export double pi atan double r theta phi r sqrt x xy yz z theta acos zr phi x printf f f f r theta phi endsrc generates compiles run c code include mathh double x double double z int main double pi atan double r theta phi r sqrt x xy yz z theta acos zr phi x printf f f f r theta phi return result result final result look like evaluated exported double pi atan double r theta phi r sqrt x xy yz z theta acos zr phi x printf f f f r theta phi trick multiple includes must passed elisp list example beginsrc c includes mathh timeh
251,Lobsters,emacs,Emacs editor,Mathematical Notation in Emacs,https://ekaschalk.github.io/post/prettify-mode/,mathematical notation emacs,prettymode prettymode prettifysymbolsmode prettify symbol ligature fira code pragmata pro pretty mode prettymode prettify symbol mode math unicode symbol list ligature check package implement fira code http caveat experience,sequence character represented single token using prettymode prettymode provides greek subscript symbol prettifysymbolsmode prettify symbol ship emacs add support custom unicode replacement symbol ligature unicode replacement common operator see fira code font use pragmata pro font combination tool may chosen fira code required utilize prettifysymbols prettymode similarly entire fira code font required use fira ligature replacement purely visual searching find symbol pretty mode package prettymode provides default symbol replacement including greek letter overlap fira code operator handled deactivating operator equality arrow group subsuperscripts greek letter sigma summation must manually activated logic group overlapsinterferes prettifysymbols disabled set group interferes int symbol replacement unknown reason redefine symbol prettifysymbolsmode later require prettymode globalprettymode prettydeactivategroups equality ordering orderingdouble orderingtriple arrow arrowstwoheaded punctuation logic set prettyactivategroups subandsuperscripts greek arithmeticnary commented symbol replaced fine within docstrings comment replacement entirely visual searching buffer lambda find λ check prettymodeel full list group symbol supported mode prettify symbol mode prettify mode enabled setting globalprettifysymbolsmode default replacement majormode specific python go go lambda go λ additional symbol added prettifysymbolsalist globalprettifysymbolsmode addhook pythonmodehook lambda mapc lambda pair push pair prettifysymbolsalist syntax def return yield base type int float str true false mypy dict list tuple set iterable union change aggressive mix match code taste command insertchar cx ret prompt unicode character name insert point also describechar mm h c give information character point use conjunction eg math unicode symbol list explore option may encounter unicode symbol rendering despite containing font installed use setfontsetfont fontsetdefault symbola force font particular character set mathematical bold script capital use symbola check font support character ligature update original implementation ligature emacs longer hosted check package implement fira code enable need add prettyfontssetkwds prettyfontsfirafont progmodehook orgmodehook ligature require firacodesymbol font entire fira code font link ligature font installed http asterisk ligature conflict orgmode header others like disabled ligature caveat ligature number visual point composing replacement composing character instance ligature occupies two space case prettifysymbols prettymode alpha reduced one character line width see may actual width two effect line could exceed character prettifymode disabled indentation performed using unicode replacement actual spacing circumvent problem would recommend using linter like pylint show infraction actual line width prepostprocessing hook disables prettify indent buffer savesexportscommits reenables prettify indent also ligature export html experience found change improve code readability significantly instantly tell exit point function distinguish generator logicals comparison easy parse similarly distinguishing instantaneous lambda le cumbersome mypy type debatably natural read symbol true false none stand subjective eyecandy consideration besides discussed caveat main downside disassociation see type experience issue adjustment quick
252,Lobsters,emacs,Emacs editor,Optimal Emacs Settings for Org-mode for Literate Programming,http://fgiasson.com/blog/index.php/2016/06/21/optimal-emacs-settings-for-org-mode-for-literate-programming/,optimal emacs setting orgmode literate programming,,important configuration related use orgmode literate programming environment behavior occurs save orgmode document purpose literate programming write computer software writing development process purpose implementation etc however every time save literate file want literate environment extract tangle code file clojure source file executed enable behavior add function call emacs aftersavehook function make sure buffer saved orgmode buffer run orgmode tangling procedure tangle org file save however given nature literate programming clojure often case another buffer tangled source file open mean change code org file get tangled save buffer code file open automatically refreshed newly tangled code fix issue set globalautorevertmode mean soon file change file system open emacs buffer buffer refreshed content finally orgmode code block also enabled final behavior save org file often leave todo task different place org file tell work need done place however start developing multiple project orgmode start using orgmode others feature way track left todo item across entire computer system programing project orgmode created global list todo item via agenda feature see list todos across org file created access using mx orgtodolist however problem org file want accessible agenda push agenda system problem becomes problem forget push relevant org file agenda choose automatically push org file org agenda every time org file saved way worry check global list todos sure tangle org file save defun tangleonsaveorgmodefile string message majormode orgmode orgbabeltangle addhook aftersavehook tangleonsaveorgmodefile enable autorevert mode globally quite useful multiple buffer opened orgmode update tangling buffer updated changed disk globalautorevertmode add org file agenda save defun toagendaonsaveorgmodefile string message majormode orgmode orgagendafiletofront addhook aftersavehook toagendaonsaveorgmodefile
253,Lobsters,emacs,Emacs editor,in which four pieces are placed in a row,http://technomancy.us/182,four piece placed row,connect adapted physical game program kid game polywell state drawing mode binding older newer,day son friend house way home leaving saw game connect asked could play since way told ca nt play game get home program game play nt sure exactly would work thought fun way nt first time adapted physical game program kid since done game using lua game framework along polywell text editor development tool run polywell roughly port emacs found foundation provides buffer mode keymaps useful kind game bonus use text editing feature polywell code game within game make experimentation reloading seamless son sat knocked implementation connect pretty quickly using polywell thought would interesting step work since serve succinct explanation use polywell state drawing local e require polywell local board local color red yellow local turn yellow start loading polywell putting e local e editor game state board table empty table column connect board seven column piece dropped bit unusual represent column list piece bottom token subject gravity fall bottom column placed finally set color map player color name rgb triplet store final bit state current turn turn local far good local draw function n color ipairs board col local x col n lovegraphicssetcolor color color lovegraphicscircle fill x end end end draw function natural understand unusual structure board simply loop column inner loop piece column piece represented n numeric position within list piece color calculate x col n respectively draw colored circle piece bottom column upwards basically place use framework directly mode binding edefinemode nil drawdraw readonlytrue using polywell definemode function create mode contain key binding game mode polywell assumed textual unless otherwise specified since game graphical pas nil second argument mode inherit existing mode third argument pas previouslydefined draw function mode draw property overriding default draw simply display current mode text also mark readonly avoid accidentally inserting text buffer ebind escape function echangebuffer console end ebind backspace function lumeclear board end end polywell bind function allows u attach function called specific keystroke pressed specific mode case say escape switch back lua console backspace clear column board ebind tostring key function local column board key column return end tableinsert column turn turn turn red yellow red end end almost done meat game loop number column game column bind number key function grab corresponding column table board check make sure column nt full one hold piece insert color current player column tableinsert change turn next player eopen nil finally us open function create new buffer named mode active first argument nil buffer attached filesystem freefloating thing nt get loaded saved could leave line polywell would simply boot lua console could invoke mode manually line took son race playing game writing kept involved asking step way next wrote draw function able test editing board table directly using lua code console first pas number key function simply called tableinsert tried able point feature still missing could ask leading question helped piece together roughly needed address thing course lot polywell nt take much code get simple game going try might lot fun lua table bit confusing since single data structure act sequentially board basically used vectorarray associatively color act like map thing remember sequentialassociative property inherent table rather part used older newer
254,Lobsters,emacs,Emacs editor,Emacs Themes,http://www.greghendershott.com/2017/02/emacs-themes.html,emacs theme,emacs theme emacs theme solarized material multiple theme emacs init file advice hook package usepackage hydra hydra lunaryorn init file,emacs theme emacs month ago use emacs theme customsetfaces form init file gradually accumulated face spec like lintroller started use solarized mostly light sometimes dark switching using mx loadtheme worked fine later liked look material although highcontrast use fulltime work well certain situation installed two annoyance love button look give orgmode heading must tweak switching solarized material theme using loadtheme definitely work well old theme defined face new theme old face would remain effect example might switch material back solarized get weird mix mostly solarized material org heading address issue multiple theme understand first emacs support many theme enabled simultaneously variable customenabledthemes plural list result loadtheme mean use one theme mean layer theme top already enabled want one theme time must first disabletheme currentlyenabled theme little defun ghdisableallthemes interactive mapc disabletheme customenabledthemes fine need issue two command give convenience give death one idea would make new ghloadtheme command composes ghdisableallthemes loadtheme remember mx instead another idea would advise loadtheme continue mx loadtheme bonus advice also provide kind theme hook feature way call function specific theme loaded emacs init file snippet emacsdinitel advice hook theme hook defvar ghthemehooks nil themeid function defun ghaddthemehook themeid hookfunc addtolist ghthemehooks con themeid hookfunc defun ghloadthemeadvice f themeid optional noconfirm noenable rest args enhances loadtheme two way disables enabled theme clean slate call function registered using ghaddthemehook unless noenable ghdisableallthemes apply f themeid noconfirm noenable args unless noenable pcase assq themeid ghthemehooks f funcall f adviceadd loadtheme around ghloadthemeadvice package configuration theme package add theme hook make tweak manage package install config init file using wonderful usepackage personal preference material usepackage materialtheme ensure defer init defun ghmaterialthemehook setfaceattribute whichkeykeyface nil foreground faceattribute error foreground loop n setfaceattribute internsoft format orglevel n nil height unspecified background unspecified box unspecified ghaddthemehook material ghmaterialthemehook ghaddthemehook materiallight ghmaterialthemehook solarized usepackage solarized ensure solarizedtheme defer init defun ghsolarizedthemehook setfaceattribute fontlockconstantface nil weight normal setfaceattribute fontlockfunctionnameface nil weight bold setfaceattribute whichkeykeyface nil foreground faceattribute error foreground ghaddthemehook solarizeddark ghsolarizedthemehook ghaddthemehook solarizedlight ghsolarizedthemehook config setq solarizedusevariablepitch nil solarizeduselessbold solarizedusemoreitalic nil solarizeddistinctdocface solarizedhighcontrastmodeline find different font size irritating hydra finally let use hydra package usepackage hydra ensure config setq hydralv nil use echo area make easy switch among theme single key press defhydra ghthemeshydra hint nil color pink theme solarized material dark dark z zenburn del none light light loadtheme solarizeddark loadtheme solarizedlight loadtheme material loadtheme materiallight z loadtheme zenburn del ghdisableallthemes ret nil done color blue bindkeys cc w ghthemeshydrabody incidentally bind hydra cc w following idea saw lunaryorn init file use bindkeys usepackage put command cc prefix additional prefix key group related command example windowrelated command cc w prefix use whichkey label prefix binding anyway upshot type cc w keep pressing single hydra key switch among theme upon finding optimal mood management tap return exit hydra
255,Lobsters,emacs,Emacs editor,How to Write Fast(er) Emacs Lisp,http://nullprogram.com/blog/2017/01/30/,write fast er emacs lisp,dynamic module ast parsing interactive completion virtual machine use lexical scope code correct prefer builtin function avoid unnecessary lambda function dashel prefer using function dedicated opcodes bytecompel update unroll loop using andor using macro similar find optimization opportunity,january everything written emacs lisp need fast emacs around written emacs lisp part generally performancecritical otherwise function would builtins written c extension emacs choice outside exception like dynamic module inferior process must written emacs lisp including performancecritical bit common performance hot spot automatic indentation ast parsing interactive completion guideline specific emacs lisp result faster code nonintrusive guideline could applied time matter style choosing one equally expressive maintainable form another performs better one caveat guideline focused emacs nearby version emacs constantly evolving change virtual machine bytecode compiler may transform currentlyslow expression fast code obsoleting guideline future add note article anything change use lexical scope guideline refers following first line every emacs lisp source file write lexicalbinding point worth mentioning code correct measurably faster dynamic scope still optin explicit use special variable absolutely reason using lexical scope written clean dynamic scope code switching lexical scope effect behavior along similar line special variable lot slower local lexical variable use necessary prefer builtin function builtin function written c expected significantly faster equivalent written emacs lisp complete much work possible inside builtin function even might mean taking conceptual step overall example fastest way accumulate list item new item go tail algorithm reason list must constructed head might tempted keep track tail list appending new element directly tail setcdr via setf defun fibtracktail n let b head list tail head dotimes n head psetf b b b setf cdr tail list b tail cdr tail fibtracktail actually much faster construct list reverse destructively reverse end defun fibnreverse n let b list list dotimes n nreverse list psetf b b b push b list might look nreverse fast builtin got opcode using push loop finishing nreverse canonical fastest way accumulate list item fibtracktail added complexity tracking tail emacs lisp much slower zipping entire list second time c avoid unnecessary lambda function talking mapcar friend slower defun exptlist list e mapcar lambda x expt x e list listen know love dashel higher order function habit cheap bytecode compiler know inline lambda additional perelement function call overhead worse using lexical scope like told example form closure e mean new function object created eg makebytecode time exptlist called clear mean lambda recompiled time bytecode string shared instance lambda unique function vector constant vector allocated initialized time exptlist invoked related miniguideline create garbage strictly necessary performancecritical code compare implementation explicit loop using nreverse listaccumulation technique defun exptlistfast list e let result dolist x list nreverse result push expt x e result unnecessary garbage created unnecessary perelement function call fastest possible definition function need use performancecritical code personally prefer list comprehension approach using clloop cllib defun exptlistfast list e clloop x list collect expt x e clloop macro expand essentially previous definition making practically equivalent take getting used writing efficient loop whole lot le tedious clloop emacs earlier catchthrow implemented converting body catch lambda function calling code inside catch access variable outside catch likely lexical scope turn closure resulting garbage function object like emacs later bytecode compiler us new opcode pushcatch whole lot efficient longer reason shy away catchthrow performancecritical code important often way perform early bailout prefer using function dedicated opcodes following guideline using builtin function might several pick builtin function dedicated virtual machine opcodes making much faster invoke prefer function possible tell function assigned opcode take peek bytedefop listing bytecompel optimization often involves getting weed shy example assq assoc function search matching key association list alist builtin function difference former compare key eq eg symbol integer key latter equal typically string key difference performance eq equal important another factor assq opcode mean performancecritical code prefer assq perhaps even going far restructuring alists specifically eq key last step probably tradeoff mean want make benchmark help decision another example eq eql equal macro function use eql especially cllib inherits eql default common lisp take clcase like switch c family language compare element eql defun opapply op b clcase op norm b b disp ab b isin b sin clcase expands cond since emacs bytecode lack support jump table much room cleverness update emacs released may introduced jump table opcode defun opapply op b cond eql op norm b b eql op disp ab b eql op isin b sin turn eql pretty much always worst choice clcase four equality function listed one lacking opcode eql faster definition would use eq theory clcase could done know key symbol defun opapply op b cond eq op norm b b eq op disp ab b eq op isin b sin fortunately eq safely compare integer emacs lisp need eql comparing symbol integer float unusual unroll loop using andor consider following function check argument list number bailing first match used instead mod since former opcode latter defun detect x catch found dolist f x f throw found f bytecode compiler know unroll loop fortunately something using compiler turn clean efficient jump bytecode defun detectunrolled x x x x x x x x x x x x emacs earlier oldfashioned lambdabased catch unrolled definition seven time faster faster pushcatchbased catch twice fast mean loop overhead account half work first definition function update pointed comment particular example equivalent cond literally true way bytecode would clearer way express unrolled code real code often quite equivalent unlike guideline certainly something want code know sure performancecritical maintaining unrolled code tedious errorprone success approach unrolling loop using macro similar generate unrolled form defmacro withdetect var list clloop e list collect var e e condition finally return condition defun detectunrolled x withdetect x find optimization opportunity use mx disassemble inspect bytecode hot spot observe bytecode change response change function take note sort form allow bytecode compiler produce best code exploit
256,Lobsters,emacs,Emacs editor,vkazanov/elfuse - FUSE filesystems in Emacs Lisp,https://github.com/vkazanov/elfuse,vkazanovelfuse fuse filesystems emacs lisp,elfuse compile running example additional note background quick python script chris wellons blog post,elfuse elfuse little experiment implementing dynamic emacs module idea expose libfuse possibility emacs lisp code word possible implement file system emacs lisp compile elfuse dynamic module emacs compiled dynamic module support required currently emacs requires supplying special flag configure time withmodules additionally elfuse developed tested linux ubuntu using libfuse guaranty platform libfuse version compilation trivial linux recent gcc cd elfusedirectory make running example run one elfuse example example directory using configless separated emacs instance something like following cd elfusedirectory mkdir mount make helloel emacs window open mx elfusestart mount mount elfuse instance mount path l mount fake file appear mx elfusestop unmount elfuse start emacs elfuse loaded load example elfuse project fact recommended way run elfuse instance ie emacs q load elfuseel notice elfusestart elfusestop function main uservisible entry point example included helloel static list file dummy content dynamic list file ie possible create file mount path listbuffersel expose list emacs buffer list file buffer name compatible posix portable filename definition listed buffer content also mirrored possible create emacs buffer using touch writebufferel edit emacs buffer elfuse buffer terminal additional note elfuse currently much documentation apart source code example el play library user consult example also strictly recommended try list mounted elfuse directory using emacs instance run elfuse definitely block emacs elfuse run libfuse loop using dedicated pthread thread syscalls arrive thread signal sends signal main emacs thread block main thread find time respond request elfuse currently support mounting multiple fuse path actually us single set predefined callback name ie elfuse readirop case thing go wrong fusermount u pathtoamount help case thing go horribly wrong umount f pathtoamount trick background time ago wrote quick python script allows mount orgmode file fuse filesystems obvious problem script needed custom orgmode file parser would always lag behind mainstream orgmode would miss important feature wondering using native parser possible point chris wellons jumped mentioned might possible implement dynamic emacs module emacs lisp binding fuse later chris came blog post way elfuse work elfuse us interesting trick interested detail follow link
257,Lobsters,emacs,Emacs editor,Announcing Remacs: Porting Emacs to Rust,http://www.wilfred.me.uk/blog/2017/01/11/announcing-remacs-porting-emacs-to-rust/,announcing remacs porting emacs rust,remacs port emacs rust list good first bug writing first elisp function using rust port rust full list project idea emacs propaganda rust propaganda join u,delighted announce remacs project port emacs rust emacs heart lisp interpreter written c remacs replacing c code rust elisp know love work ever fancied contributing core emacs great opportunity learn internals ton low hanging fruit list good first bug even walkthrough writing first elisp function using rust rust perfect port incrementally want replace entire regular expression engine want replace function c code even notice fullblown emacs every step way rust also terrific language work compiler autoformatter safety check community make great developer experience emacs support pretty good port rust porting rust give u lot opportunity leverage rapidlygrowing crate ecosystem drop support legacy compiler platform looking msdos add docstrings unit test core function exposed elisp also ton fun remacs based emacs got enough type definition write interesting builtin function project still early stage using got builtin elisp function written entirely rust arithmetic type check even basic list functionality like join u plenty could port small c function lisph lisprs port favourite builtin elisp function rust feeling ambitious eventually want explore porting remacs regex crate major performance speedup using existing gui binding crate full list project idea naturally also provide emacs propaganda rust propaganda travisbased workflow github waiting ever wanted hack world powerful editor love join u
259,Lobsters,emacs,Emacs editor,Emacs Byte-code Internals,http://nullprogram.com/blog/2014/01/04/,emacs bytecode internals,people write bytecode humble stack machine bytecompel segmentation fault warning bad bytecode cause emacs crash bytecode object like vector literal parameter list unibyte string bytecode constant vector maximum stack usage docstring interactive specification opcodes calling convention dynamic scope calling convention lexical scope calling convention project idea people write bytecode,january bytecode compilation underdocumented case recent lexical binding update undocumented part emacs user know elisp usually compiled bytecode saved elc file bytecode load run faster uncompiled elisp user really need know gnu emacs lisp reference manual specifically discourages poking around much people write bytecode job left byte compiler provide disassembler satisfy catlike curiosity screw want handcraft bytecode purpose article introduce internals elisp bytecode interpreter explain work lexically scoped code faster demonstrate writing bytecode hand humble stack machine bytecode interpreter simple stack machine stack hold arbitrary lisp object interpreter backwards compatible forward compatible old version run new bytecode instruction byte first byte opcode second third byte either single operand single intermediate value operand packed opcode byte writing emacs opcodes declared obsolete opcodes refer commonly used builtin function fast access looking selection elisp really geared towards text considering packed operand potential opcodes unused reserved future opcodes opcode opcode opcodes opcodes opcodes easiest place access opcode listing bytecompel beware opcode comment currently date segmentation fault warning bytecode offer safety normal elisp bad bytecode cause emacs crash try right emacs batch q eval print evaluate code manually buffer save everything first segfault caused referencing beyond end constant vector emacs bug boundary test would slow bytecode interpreter performing test runtime practical engineering decision emacs developer instead chosen rely valid bytecode output compiler making disclaimer anyone wanting write bytecode try come element bytecode function inconsistent emacs may crash call function always leave byte compiler create object make element consistent hope warned time start playing firecracker bytecode object bytecode object functionally equivalent normal elisp vector except evaluated function element accessed constant time syntax similar vector syntax v length though valid function must least element two way create bytecode object using bytecode object literal makebytecode like vector literal bytecode literal need quoted makebytecode error invalid byte opcode element object literal function parameter lambda list unibyte string bytecode constant vector maximum stack usage docstring optional nil none interactive specification optional parameter list parameter list take two different form depending function lexically dynamically scoped function dynamically scoped argument list exactly appears lisp code bytecompile lambda b optional c b optional c nil really shorter way represent parameter list preserving argument name critical remember dynamic scope function body evaluated variable globally bound eww function argument function lexically scoped parameter list packed elisp integer indicating count different kind parameter required optional rest least significant bit indicate number required argument notice limit compiled lexicallyscoped function required argument bit number rest argument remaining bit indicate total number optional required argument counting rest really easy parse head viewed hexadecimal portion almost always fit inside digit bytecompilemakeargsdesc args rest required bytecompilemakeargsdesc b args rest required bytecompilemakeargsdesc b optional c args rest required bytecompilemakeargsdesc b optional c rest args rest required name argument matter lexical scope purely positional tighter argument specification one reason lexical scope faster bytecode interpreter need parse entire lambda list assign variable function invocation unibyte string bytecode second element unibyte string strictly hold octet interpreted sort unicode encoding string created unibytestring string may return multibyte string disambiguate string type lisp reader higher value present string printed escaped octal notation keeping string literal inside ascii character set unibytestring unusual see bytecode string end bytereturn perhaps implicit talk bytecode constant vector bytecode limited operand operand bit fill entire byte occasionally two byte meat function hold constant function symbol variable symbol constant vector normal elisp vector created vector vector literal operand reference either vector index stack bytecompile lambda b myfunc b b b myfunc note constant vector list variable symbol well external function symbol lexically scoped function constant vector variable listed myfunc maximum stack usage maximum stack space used bytecode value derived bytecode precomputed bytecode interpreter quickly check stack overflow underreporting value probably another way crash emacs docstring simplest component completely optional either docstring docstring especially large con cell indicating compiled elc position lazy access one position start needed lisp reader used load know recognize end interactive specification element present nonnil function interactive function hold exactly content interactive uncompiled function definition bytecompile lambda n interactive nnumber n n n nil nnumber bytecompile lambda n interactive list read n n n nil list read interactive expression always interpreted never bytecompiled usually fine definition code going waiting user input however slows keyboard macro playback opcodes bulk established opcode byte variable stack constant access opcodes use packed operand stackref stack reference varref variable reference constant vector varset variable set constant vector varbind variable binding constant vector call function call immediate number argument unbind variable unbinding constant vector constant direct constant vector access except last item kind instruction come set nth instruction mean access nth thing example instruction copy third stack item top stack instruction push onto stack value variable named second element listed constant vector however instruction set take operand byte two instruction take operand take operand operand written littleendian byteorder regardless host platform example let manually craft instruction return value global variable foo opcode named constant bytex worry actual bytecode number require bytecomp named opcodes defvar foo hello defalias getfoo makebytecode argument unibytestring bytevarref ref variable first constant bytereturn pop return foo constant using stack space getfoo hello tada handcrafted bytecode function left change offset function exact behavior le optimal defalias getfoo makebytecode unibytestring bytevarref form varref bytereturn nil nil nil foo foo constant would need use operand version behavior le optimal defalias getfoo makebytecode unibytestring bytevarref form varref operand constant index bytereturn nil nil nil nil nil nil nil nil nil foo dynamicallyscoped code make heavy use varref lexicallyscoped code rarely us global variable instead relying heavily stackref faster different calling convention come play calling convention kind scope get calling convention finally get glimpse really great work stefan monnier updating compiler lexical scope dynamic scope calling convention remembering back parameter list element bytecode object dynamically scoped function keep track argument name executing function interpreter examines lambda list bind varbind every variable globally argument caller bytecompiled argument started stack popped bound variable accessed function pushed back right onto stack varref lot argument indirection function call lexical scope calling convention lexical scope argument name actually bound evaluation bytecode name completely gone compiler converted local variable stack offset calling lexicallyscoped function bytecode interpreter examines integer parameter descriptor check make sure appropriate number argument provided unprovided optional argument push nil onto stack function rest parameter extra argument popped list list pushed onto stack function access argument directly stack without named variable misdirection even consume directly lexicalbinding defun foo x x symbolfunction foo bytecode foo single instruction return function argument already stack anything strangely maximum stack usage element wrong cause crash writing bytecompile always us dynamic scope bytecompile foo x x take longer set x implicitly bound make explicit variable dereference varref clean unbinding x implicit unbind wonder lexical scope faster note also disassemble function examining bytecode reveals part story disassemble foo byte code args x varref x return elisp bytecompiler intermediate language called lapcode lisp assembly program much easier optimize bytecode basically assembly language built sexpressions opcodes referenced name operand including packed operand handled whole instruction con cell opcode operand program list let rewrite last getfoo using lapcode defalias getfoo makebytecode bytecompilelapcode bytevarref bytereturn nil nil nil nil nil nil nil nil nil foo worry form varref using even encode operand lapcode assembler took care detail project idea emacs bytecode compiler interpreter fascinating spent time studying really tempted build project top perhaps implementing programming language target bytecode interpreter improving compiler optimization really big project jit compiling emacs bytecode people write bytecode
260,Lobsters,emacs,Emacs editor,Concurrency has landed,https://lists.gnu.org/archive/html/emacs-devel/2016-12/msg00378.html,concurrency landed,date prev date next thread prev thread next date index thread index concurrency landed please test merge concurrency br please test merge concurrency branch please test merge concurrency branch please test merge concurrency branch concurrency landed please test merge concurrency branch concurrency landed concurrency landed concurrency landed concurrency landed concurrency landed concurrency landed concurrency landed concurrency landed,date prev date next thread prev thread next date index thread index concurrency landed please test merge concurrency br eli zaretskii subject concurrency landed please test merge concurrency branch date sat dec date fri dec eli zaretskii address hidden cc tom tromey address hidden ken raeburn address hidden serious issue uncovered land master tomorrow evening utc done welcome concurrency emacs many thanks tom developing please test merge concurrency branch continued please test merge concurrency branch joseph mingrone please test merge concurrency branch achim gratz concurrency landed please test merge concurrency branch eli zaretskii concurrency landed eli zaretskii concurrency landed paul eggert concurrency landed daniel colascione concurrency landed paul eggert concurrency landed daniel colascione concurrency landed paul eggert concurrency landed stefan monnier concurrency landed paul eggert
261,Lobsters,emacs,Emacs editor,Why I switched from Vim to Emacs,https://matthaffner.wordpress.com/2016/12/07/why-i-switched-from-vim-to-emacs/,switched vim emacs,,using vim keybindings emacs spacemacs beautiful experience use vim keybindings writing code use keybindings anywhere emacs including shell convenient might think say example produced typo multiple typo issuing shell command rn supposed written rm needed make two change rn needed changed rm second instance needed changed wanted modify traditional terminal emulator would probably use arrow retrieve last command use left arrow ctrlhome get beginning line modify rn use right arrow perhaps combination ctrl modify second instance folder way easier emacs simply retrieve previous command get beginning line change rn navigate second instance number using get typo r used replace errant character instead using combination arrow backspacesdeletes etc vimapproach terminal within emacs using vim used terminal emulator terminator would frequently window open combination shell file wanted copy terminal command one window place code file copy command one code file place another code file way really figured selecting text mouse absofruitly abhor using ctrlshiftc copy ctrlshiftv paste new window spacemacs incredibly simpler simply navigate window shell use yy yank line want navigate back code file switching window spacemacs effortless eg get first window done without leaving home row copyingyanking pasting done without mouse
262,Lobsters,emacs,Emacs editor,The Emacs dumper dispute,https://lwn.net/SubscriberLink/707615/286fbe1405669d74/,emacs dumper dispute,buying subscription covered commit happened october well summarized portable dumper patch worried responded pointed described said feel strongly enough guardedly favorable favor accepted log,know lwnnet subscribersupported publication rely subscriber keep entire operation going please help buying subscription keeping lwn net jonathan corbetnovember emacs editor core c program much editor functionality actually implemented special elisp dialect lisp starting editor requires loading great deal elisp code initializing state process take long time avoid making user wait process emacs long used scheme whereby elisp code loaded memory image written disk starting emacs becomes matter reading memory image back much faster process supporting dumping functionality also known unexec never easy beyond technical challenge appears may lead significant split within emacs community covered january emacs dumping undumping mechanism long depended lowlevel hook gnu c library memory allocation subsystem glibc developer would like modernize improve code improving library overall removing hook emacs depends upon end january discussion emacs developer decided move workaround implementation allowed dumper continue work absence glibc support note seems actual breakage happened commit glibc thanks florian weimer correction nobody realized time loss glibc hook happened october release expected february would affect existing emacs release surprising way particular fall back older interface called ralloc perform well result well summarized emacs comaintainer eli zaretskii october based learned hard way last couple week say emacs version including unstable gnu system degree making almost unusable unstable sort behavior user text editor normally go well way avoid also sort thing could give vi definitive advantage interminable editor war something clearly need done make emacs dumping facility stable preferably maintainable going forward something would unclear posting possible solution appears simply muddied water solution come form portable dumper patch daniel colascione patch small add line code emacs yet complete rather try capture state c library memoryallocation subsystem simply marshal save set elisp object known editor file format designed performance setting least emacs start simply mapping file memory initializing set pointer colascione describes result way point gargantuan patch rip unexec implementation replace loading data file contains emacs heap image dependency executable rewriting disabling aslr saving restoring internal malloc state system work fully positionindependent executables malloc implementation also say match startup performance current unexec system within yet time collect bunch lowhanging optimization fruit word seems like interesting solution problem patch size always going generate discussion discussion focused dumper work addressspace layout randomization aslr use current emacs binary must disable aslr entirely thus losing security benefit aslr meant provide new dumper require disabling aslr contain optimization applied dump file successfully mapped specific address data therein used directly mapped image without need allocate storage copy speed startup process considerably cost always mapping dump image location paul eggert worried potential security implication losing aslr protection bulk editor data colascione responded since part data image marked executable little risk attacker running code eggert pointed view overlook important detail memory full elisp bytecode executed editor anything attacker might want approach adopted fixedlocation mapping might turned least default however bigger disagreement involving zaretskii described work wrong direction objection short patch add lot lowlevel complexity implemented c maintenance burden going forward said threat future project number people aboard matteroffactly hack emacs internals c level consistently going already small counted one hand must make emacs depend le people small diminishing group want development pace increased even kept current level mean keep many feature lowlevel c limit futzing clevel internals lisp object lisp interpreter absolute minimum make sense put thought maintainability code base evolved attract developer entirely clear though c programmer actually dying breed longterm supply elisp developer certain case emacs community need fix startup problem oppose portable dumper solution presumably something else mind zaretskii preferred solution would make elisp loader faster point used read elisp code directly startup time solution others might like see well one significant shortcoming code toward goal exists sign anybody working area colascione solution instead exist interested developer behind almost development project working code ongoing maintenance carry lot weight zaretskii feel strongly enough issue threatened resign comaintainer portable dumper adopted appears nearly alone stance though colascione said repeatedly see way get required performance richard stallman guardedly favorable solution noting far easier maintain current unexec code john wiegley emacs comaintainer also favor going portable dumper code wind thus appears blowing direction adopting portable dumper patch nobody seems want see zaretskii relinquish comaintainer role role accepted last july portable dumper merged community hope change mind large development project occasionally make decision opposed developer even developer maintainer venerable emacs editor still still end problem solve log post comment
263,Lobsters,emacs,Emacs editor,Lineage of vi,http://web.mit.edu/kolya/misc/txt/editors,lineage vi,,eric fischer newsgroups altosmultics altfolklorecomputers messageid apg bobnewsrcnnet subject emacs editor date nov gmt joachim pense wrote finally historical relation qed x ted unix zoo editor edexvised appears look dangerously mentifexlike assure actually supposed represent vicentric family tree editor link ca nt prove want believe shown question mark undoubtedly error omission anyone correct would appreciate eric colossal typewriter john mccarthy roland silver photon typesetter editor michael barnett kalon expensive typewriter createedit kelley teco steve piner ct ibm dan murphy expensive typewriter editor edits memomodify vedit improved arthur leslie victor peter deutsch samuel lowry yngve ct ct ct teco qed greenblatt berkeley holloway deutsch lined typset ct nelson butler lampson jerry saltzer editor dec qed qed teco published ct cacm ken thompson ed edl eda edb teco stopgap ct qed multics bill weiher ken thompson edit so multics charles garman qedx qed steve multics gcos savitzky emacs dennis ritchie edm teco multics rms et al quid george coulouris ed et al unix ken thompson zeddoc multics vaughan emacs ed pratt bernard unix teco greenberg various version gnu emacs ed unix ed em ucla unix ed addition george coulouris ex em unix ed addition variant bill joy charles ded haley richard bornat harold thimbleby ex unix ed addition bill joy exvi extended mark horton
264,Lobsters,emacs,Emacs editor,Introspecting Glue Code,http://www.wilfred.me.uk/blog/2016/11/05/introspecting-glue-code/,introspecting glue code,emacsracer flycheck,writing glue code easy writing well harder glue code particularly common developing editor plugins want leverage existing tool often via command line interface bug occur hard know fault lie issue glue code underlying tool frequently face problem emacsracer user feel powerless know misconfigured something glue code wrong hit genuine racer bug turn flycheck already great solution flycheck actually tell run checker mx flycheckselectchecker looking flycheck realised exactly emacsracer needed built mx racerdebug command tell exactly happened reproduce issue outside emacs mx racerdebug make much easier see racer great bug report help u develop new feature developer see exactly data receive racer still surprised versatility introspective tool building functionality incredibly useful able ask happened debuggable debugging tool superpower
265,Lobsters,emacs,Emacs editor,Buttery Smooth Emacs,https://www.facebook.com/notes/daniel-colascione/buttery-smooth-emacs/10155313440066102/,buttery smooth emacs,landed history readevalwtf react rms graphical redisplay callback xt gtk sigio flicker killing flicker double buffering extension modernity emacs global variable awful overall result,emacs flickered year flickerfree landed support doublebuffered rendering port able edit resize introduce bug awful codebase without seeing partiallyrendered buffer incited murder barelyperceptible white flash editing disappear look themhistoryyou might say great doublebuffered rendering textbook solution problem displaying incomplete rendering user driving kill dog maniacal frustration true emacs predates textbook gnu emacs oldschool c program emulating symbolics lisp machine emulating oldfashioned motifstyle xt toolkit emulating text terminal emulating teletype compiling emacs challenge adding modern rendering feature redisplay engine miraclereadevalwtf emacs great operating system old joke go need decent text editor far truth emacs basically lisp interpreter married big bunch c code called redisplay iä iä fhtagn normal operation emacs sits idle waiting input read input map input command function executes command function display result executing command fairly simple model high level different readevalprint loop see run python simple command line interface emacs visual system display ing result subtlety emacs organizes view outside world frame rest world call window window rest world call pane buffer rest world call document given time user might looking number frame displaying number buffer distributed number pane user hit key emacs whatever keycommand say update frame window buffer reflect result whatever change command made act updating display reflect emacs internal model world called redisplay one simple approach implementing redisplay redraw frame window buffer scratch approach might good enough shitty video game like nuclide eclipse emacs emacs designed much constrained system men men woman woman bandwidth expensive consequently emacs try hard optimize redisplay internally emacs model frame used look like last invocation redisplay model one redisplay input another input current content emacs buffer redisplay essentially diffs lastknown display configuration supposed displaying right emits minimal set terminal control code needed change lastknown state currentgood state incidentally approach applied web mobile core react jordan walke eat heart redisplay code written long time ago one time k r function prototype author mainly rms whose present sanity reflects effort intended redisplay used text terminal slow link emacs day code activates think running connection slower baud environment redisplay work well affords compelling advantagesgraphical redisplayone day fool wanted run emacs gui native gui program rest changelogto understand emacs unusual important understand normal gui program differs normal terminal henceforth tui program tui program driven readevalprint loop like program something world stand still program read input something squirt byte response life simple worst problem tui program consider terminal change sizeby contrast gui program event driven innumerable thing happen program outside control user move resize window click button use vr google lovingly career titlebar thing generally unpredictable happen completely unexpected time write gui program scratch usually register kind callback run response various event happening callback program work display result callback happen arbitrary order arbitrary time gui event model hard programming model different tui one set event much richerwhoever made emacs native program port emacs event driven model tui neat subset instead pretended gui text terminal everything wrong emacs stem decision emacs like gui program receive gui message respond emacs main mode operation still honeybadgeresque readevalprint loop everything emacs respond window event happens inside read horrifyingly eval part processrendering worth mentioning one callback normal gui program receive called expose name window equivalent wmpaint expose event say need program render part window program perfectly happy responding expose callback drawing need draw emacs program emacs lisp machine pretending running text terminal going draw want draw stupid gui system tell drawconsequently emacs window rendering push pull emacs get expose event draw god damn white square tide window system get around letting redisplay still think talking teletype redraw display redisplay happens term character cell cursor position pixel emacs demand window system let emacs draw onto screen whenever want response expose eventthe pretending stop terminal though first gui port emacs based gui framework called xt xt worked well many year motif ring bell yes old enough seen shit modern nonxt toolkits came along eventually xt work differently gtk gtk much better different modeldid emacs adapt whatever nonxt toolkits emacs adopt modern best practice gtk modern gui library emacs support gtk emacs wellbehaved gtk program lololololololololololololof course emacs pretend gtk oldfashioned xt toolkit entire emacs philosophy force modernthing behave like xt like tty emacs awful thing gtk maintain illusionkeep mind emacs xdispc try support five different toolkits including two different major version gtk ifdefs runtime abstraction define three four different version damn function nightmare facebook famous convincing android thing never intended think gained appreciation perversion joined facebook emacs first best school awful hack sigioremember emacs crap display result oblivious outside world model work well combined window system ask emacs arbitrary thing arbitrary time emacs middle syntaxhighlighting line c file window system say paint window emacs could wait convenient time get around painting strategy would produce poor user experienceto provide better user experience emacs installs sigio signal handler socket whatever emacs wherever code gui want tell emacs something emacs stop run redisplay redisplay fiendishly complicated algorithm designed minimize modem bill also need threadsafe respect every part emacsin sigio callback run whenever gui asks emacs something emacs run limited version redisplay gimped version redisplay say cope current state emacs arranges full version redisplay done later case emacs usually paint white background whatever area redisplay consider momentsigio handler interrupt emacs moment sense like thread safety ever tried make singlethreaded program safe thread hard yes well emacs like except acknowledge thread global lock called blockinput particularly hilarious sigio happen middle redisplay repl loop emacs case read eval print read eval wtf recursiveflickeremacs flicker like crazy flickering predictable consequence fuck want want redisplay strategy emacs us coordination video card gui system emacs sinful soul say draw line text step one erase line background color step two draw character text one one line video card happens refresh middle process see momentarily incomplete state next frame probably perfect gui system sampled emacs middle drawing operation perceive eye seeing incomplete rendering flickera program like emacs minimize flicker minimizing amount drawing actually emacs redraw every window every frame see massive flickering redisplay optimized modem pretty good optimizing updating screen usually see flicker still see sometimes fundamental problem singlebuffer immediatemode directdrawing system always get unlucky gui always show emacs middle changing underwearthe amount flicker actually see depends thing like whether redisplay optimized last update video driver purity soul singlebuffer environment compositing manager video driver sample emacs essentially arbitrary interval double buffering guarantee see either valid old state valid new state random bullshit inbetween killing flickeri sinner unrepentant damned thusly emacs flicker constantly hate flicker love emacs something change decided hack emacs eliminate antediluvian flickeringeliminating flicker conceptually hard problem basic idea rendering drawing offscreen area done atomically ie allornothing show human user result drawing user see either complete new state complete old state modern gui toolkits like qt gtk deal problem automatically modern gtk program get expose event asks everything affected expose event draw onto bitmap everything drawn blits bitmap main screen never see embarrassing intermediate stateit elegant also easy implement emacs recall emacs still think running terminal complete control output flicker driving crazy retrofit double buffering onto horrible systemdouble buffering extensionmodern incarnation x window system nice extension called doublebuffer extension let program pretend rendering directly user fact rendering intermediate buffer program control gui recall copy intermediate buffer primary display functionality perfect emacsmodernity emacsin order eliminate flickering emacs rendering needed retrofit double buffering byzantine system x double buffer extension helped emacs still belief drawing normal x window reality rendering back buffer keep mind emacs draw time enough copy intermediate buffer primary display end processing commandwe either render often imposing unacceptable load x server seldom generate uservisible bug remember emacs draw arbitrary point clear point expose back buffer one contains result accumulated thusby invisible drawing operation code reentrant thead safe full special case achieves result desiredthe problem imposing welldefined render publish cycle freeforall program global variable awfuleventually settled solution global block redraw count emacs way indicating dirtiness drawing decided code asked draw would mark parent frame dirty end processing event unless blocked blocked count reached zero walk frame bufferflip might dirtied since last bufferflip operation want minimize number bufferflip operation try coalesce many possible challenging sigio interrupt anythingi started trying figure part program might redraw display display flip ie atomic redraw quickly started licking wall cuddling stared distance imagined better day emacs redraw display anywhereinstead created system emacs keep track dirty ie drawn region redraw end x command inefficient maybe satisfying eh sleep tonight probably global lock count transition one zero flip dirty buffer redisplay lock buffer flipping component depending context redraw block redraw count transition one zero redisplay always block redraw asynchronous input block redraw timer block redraw eventually work decrement counter one zero show new view onto shitty awful codeoverall resultemacs render smoothly modern gui program provides functionality mechanism completely alien antithetical modern gui framework internally emacs still belives text program pretend xt text terminal pretend gtk xt toolkit fractal delusionemacs us extension doublebuffer largely seen historical artifact hack describe like putting scrollbars window contrary intent design gtk people extension allows u reuse existing drawing code redirect offscreen buffer gtk lucid motif whatever using oblivious diff turn scrollbars widget share screen space doublebuffered region independent x window overall giant hackbut work somehow work result emacs smooth flickerfree modern gui program regular user idea horror lie beneathdamn love working program
266,Lobsters,emacs,Emacs editor,Adding A New Language major mode to Emacs,http://www.wilfred.me.uk/blog/2015/03/19/adding-a-new-language-to-emacs/,adding new language major mode emacs,getting started melpa full syntax highlighting sophisticated syntax highlighting puppetmode great example indentation simple minded indentation engine smie steve yegge indentation example juliamode flycheck flycheck flycheckpyflakes completion company companycheaders piprequirements eldoc eldoc celdoc repl integration cider sly polish still improved,writing major mode rite passage elisp hacker sooner later find programming language configuration format new obscure emacs support decide roll sleeve plug hole emacs ecosystem write major mode make major mode great getting started bare minimum major mode syntax table highlight comment string mode useful write minimal j mode defconst myjsmodesyntaxtable let table makesyntaxtable string delimiter modifysyntaxentry table string delimiter modifysyntaxentry table punctuation comment starter modifysyntaxentry table n comment ender modifysyntaxentry n table table definederivedmode myjsmode progmode simple j mode syntaxtable myjsmodesyntaxtable fontlockfontifybuffer result might seem like much often sufficient config file format congratulation elisp hacker add major mode melpa others use contribute new mode full syntax highlighting huge scope expand want look sophisticated syntax highlighting cover entire syntax language major mode becomes sophisticated think testing many major mode test selfrespecting hacker like like bug stay fixed first step create sample file syntax cornercases open becomes repetitive eventually want programmatic test fortunately puppetmode great example indentation next want tackle indentation user expect emacs indent code correctly regardless current state need examine syntax around point calculate current nesting level usually matter searching buffer backwards point counting instance equivalent scope delimiter adjust current line indented mymodetabwidth count provided careful string comment work alternatively emacs provides simple minded indentation engine smie write bnf grammar get basic indentation movement command free could total lunatic emacs make happy steve yegge indentation practice user disagree correct indentation provide setting different style get right able open large file existing project run indentregion pointmin pointmax nothing change indentation logic easy test see example juliamode also need test indentation quick large file easy end slow algorithm flycheck want probably want set linter flycheck even sophisticated lint tool available highlighting syntax error asyoutype helpful flycheckpyflakes showing unused variable completion great major mode provide autocompletion provide completion writing company backend example inspire companyclang part company us clang discover struct member companycheaders inspects local filesystem suggest c header piprequirements access internet find package available eldoc eldoc minor mode display information minibuffer thing point typically used function signature type use anything assuming sort static analysis available major mode eldoc provides great way providing relevant contextual information eldoc showing docstrings elisp celdoc showing function prototype function point repl integration finally best major mode let run code interactively inside emacs emacs provides comintmode allows define interpreter start interacting many major mode especially inside emacs core derive comintmode project like cider sly offer even sophisticated repl integration allow allowing query interpreter process docstrings autocompletion macroexpansion much cider offer deep integration emacs clojure repl polish emacs core supported programming c since beginning yet still improved release early release often create something wonderful
267,Lobsters,emacs,Emacs editor,Multics Emacs History/Design/Implementation (1979),http://www.multicians.org/mepap.html,multics emacs historydesignimplementation,multics emacs history design implementation multics honeywell arpanet advanced research project agency multics source reveals le jetteur de gazongues available online mit table content prehistory editing multics ii history videooriented editing iii inception multics emacs iv multics emacs embryonic phase basic decision v early enhancement vi echo negotiation vii supdupoutput arpanet protocol viii place emacs multics ix experience conclusion x acknowledgement appendix redisplay appendix b extension language author copyright holder multics emacs history design implementation bernard greenberg august appendix prehistory editing multics ii history videooriented editing iii inception multics emacs iv multics emacs embryonic phase basic decision v early enhancement vi echo negotiation vii supdupoutput arpanet protocol viii place emacs multics ix experience conclusion x acknowledgement bibliography greenberg bernard unpublished paper honeywell dec crispin supdup protocol network document rfc crispin supdup telnet option network document rfc greenberg b supdupoutput telnet option network document rfc appendix appendix redisplay section iv section v section v section v section vi section iv section vi appendix b extension language section v home change multicians history feature bibliography site chronology story glossary paper humor document source link,multics emacs history design implementation copyright bernard greenberg april follows vast unpublished mother multics emacs paper lesser greater emacs paper published internal unpublished ultimately excerpted including prose con commercial textprocessing system lisp lisp conference proceeding honeywell conference paper time expose wwwhtml ideal vehicle multics longer produced offered sale honeywell longer even make computer people edit computer desktop cheap fast redisplay algorithm longer matter whole idea autonomous redisplay display editor longer given although autonomous redisplay illustrious child wysiwyg standard paradigm industry kind editor besides called video editor thus battle acrimony invidious arrogant comparison follows finished done viewed context historical document multics evolution editor part history multics emacs lisp many deficiency multics described thereafter remedied emacs managedvideo system inspired emacs although started rebellious hack multics emacs became integral part multics product term arpanet refers early stage called internet arpa advanced research project agency u department defense instigated underwrote development please enjoy david mery posted interesting story multics emacs nov multics source reveals le jetteur de gazongues source multics emacs available online mit table content prehistory editing multics ii history videooriented editing iii inception multics emacs iv multics emacs embryonic phase basic decision v early enhancement vi echo negotiation vii supdupoutput arpanet protocol viii place emacs multics ix experience conclusion x acknowledgement appendix redisplay appendix b extension language material presented ensure timely dissemination scholarly technical work copyright right therein retained author person copying information expected adhere term constraint invoked author copyright case work may reposted republished without explicit permission copyright holder multics emacs history design implementation bernard greenberg august paper multics emacs intended audience unclear idea put stuff paper posterity bracket xxx denote reference bibliography end main text multics emacs videooriented text preparation editing system running honeywell multics multics system distributed experimental offering multics release viewpoint multics represents first videomanagement software implemented first time characteratatimeinteraction used radical complete departure editing text preparation tool technique prevalent multics viewpoint similar system running elsewhere several feature noteworthy including major commitment programming language lisp moonual chineual useraccessible extensibility lisp internal implementation designed start often case displayoriented editing mind seemingly innate expense videooriented interaction also led development performance enhancement technique applicable system growth multics emacs user community mit multics system also led development protocol arpanet arpanet designed facilitate use videooriented software deviceindependent fashion multics emacs currently widespread use three multics exposuredevelopment site serving regular user due lack previous videooriented software multics many user large number highspeed video terminal connected multics system thus much usage multics emacs via dialup line fact combined acknowledged expense resource consumption multics emacs place multics emacs among choice editing tool given current resource economy communication device current site always tool choice even among fervid partisan paper describes background history multics emacs previous development climate created many salient feature design implementation criterion decision possible stated well experience design implementation important complete algorithm detailed notably redisplay algorithm detailed appendix prehistory editing multics four editor common use multics introduction multics emacs still widespread use two edm mpm qedx qug standard intended enduser interface editor lineoriented printingterminal editor conventional mold command mode line full editor command typed effect positioning printing deleting changing string substitution line entry input mode way new text may entered typing reserved character sequence exit input mode back command mode editor maintain buffer edm maintains one text buffer qedx many character string gap middle represents current point text may inserted neither editor address individual character edm editor extremely limited programmable intended novice user developed edl ct editor interface ct qedx editor developed strippeddown runtime efficiency version qed editor ct bell qed also ct many original multics developer worked ct editor oriented towards lowspeed halfduplex printing terminal interface minimal typeout design criterion solely editor bulk multics operating system application entered edited maintained implementation teco version standard dec editor built multics version derived original teco implementation mit ai lab tecdoc unlike latter multics teco display support complex controlstructure construct ai lab editor multics teco supported honeywell tool say enduser interface tool manual multics teco handful supporter never really achieved widespread use teco present interface repertoire singlecharacter command designed provide substantial power textprocessing programming language trying succeed editing language programming language teco fall short due necessary compromise nevertheless principal feature teco ability construct powerful textprocessing program macro readily multics teco often used remaining editor widely used multics version qedx ted developed james falksen adding substantial power including ability address character many command qedx lacking many failsoft feature help feature also stand falksen editor due large variety compatibility constraint product schedule improvement qedx made last five year resulting widespread dissatisfaction among multics user community inadequacy qedx thus falksen editor honeywell product distributed multics achieved almost exclusive use many multics site conceptually different qedx differing principally vastly extended command repertoire published documentation available ii history videooriented editing impetus multics emacs came outside late early author became acquainted emacs stallman itsdoc system mit ai lab emacs grew teco period background history development emacs order teco designed use displayoriented environment normal mode usage evolution emacs split user screen two region one user typed editor command one region text edited displayed user completed sequence teco command editor would update image text buffer displayed screen obviating need print command show line buffer request technology still revolved around user typing line editor command activating included therein request insert text normal editor command appropriate section buffer display would chosen automatically next advance editor technology development control r realtime edit mode teco mode called control r character invoked command entered allowed selected set character used realtime command instead entering string editor command user would type one character control delete character effect would immediately made visible buffer display command character typed text displayed would appropriately modified command character fixed small set drawn control character ascii character set ie nonprinting character typing printing character caused inserted directly buffer appear screen teco maintains point virtual pointer text buffer control r mode identification teco point terminal cursor made modification text edited appear cursor buffer display novelty control r mode freedom editor request terminal became editing device upon certain key predictable effect upon text displayed thereupon machine opposed interactive editor fact achieved whole new horizon interaction editing complex request line possible error longer among user tool effect command became visible command typed erroneous action could stopped erroneous command natural simple interface eventually one adopted independently standalone word processing machine wang xerox lanier etc within time became apparent realtime edit mode fact potent natural approach text editing conventional interactive even videooriented text editor end result control r mode user operating though editing screen typing key key typed text screen change control r mode command position cursor different character position therefore line text buffer attempt made position line screen teco chooses new portion buffer display automatically unlike editing terminal user fact editing screen thus need never concerned particular portion buffer fact screen user need never read new screen computer send screen computer similar implementationderived constraint control r mode depends upon ability interact characteratatime basis editor program teco single character typed teco must take action modifying buffer text edited updating display interaction innately expensive consumptive computer resource lineatatime request line conventional editor much historical interest development multics emacs derives necessity characteratatime interaction way ameliorating performance impact next significant advance introduction ability associate arbitrary macro teco program possibly usersupplied key control r mode ability allows arbitrarily complex action performed response given keystroke teco excels ability construct subroutine editor command internal register subroutine call recursively pas argument result around quite common teco construct macro perform arbitrarily complex textmanipulation task dealing sentence paragraph construct source representation specific programming language ability associate teco macro keystroke allowed editor developer user augment control r mode adding set key whose function tuned specific editing task several package teco macro tmacs tecmac proliferated package contained macro many common operation text entity brought power control r mode beyond today standalone word processor time use raw teco almost ceased almost universal use control r mode macro package teco augmented package fact transformed user terminal wordprocessing programprocessing mailprocessing highly specialized video device time richard stallman coalesced idea package created unified approach command set extensibility documentation integration facility created large unified set macro came known emacs name derived editor macro since user using emacs earlier package never deal command set teco action specified control r mode macro stallman rightly considers emacs editor implemented teco latter interpretive editor implementation language one suffering severe deficiency fact stallman viewpoint largely justified one adopt impact emacs emacsstyle editing far outweighs teco basic philosophy teco user interface largely masked emacs indeed teco simply vehicle emacs expressed soon found emacs could taught within minute hour technical experience experienced sophisticated user found emacs eminently usable previous form editing via construction macro processing lisp source program example could rapidly extended handle task manner emacs rapidly became standard editor remained writing iii inception multics emacs multics begun legacy ct left large variety ibm halfduplex printing terminal standard interactive device display terminal used multics storagetube graphic device used video editing consumer display terminal first became readily available multics user purchased terminal notably delta data kind terminal use multics installation university southwestern louisiana using either glass teletypes via local editing video terminal generate le noise le waste paper printing terminal higher line speed markedly le expensive user video terminal multics developed methodology using qedx falksen editor print line screen go input mode whereupon would edit screen pressing locallyprovided terminal control depress transmit button sending screen content prevalent technique user multics lisp maintained source file using local editing edit function read back poor programming practice severe limitation command set builtin editor terminal created poor result around eugene ciccarelli mit laboratory computer science lcs bb n major contributor preemacs teco macro package emacs felt need characteroriented interaction multics developed technique relied upon multics arpanet arpanet implementation effect input multics arpanet implementation limited lineatatime io ciccarelli constructed videoterminal oriented lineeditor using control r modelike command multics user system would log multics via arpanet invoke ciccarelli line editor editor user would log multics recursively via loopedback arpanet connection ciccarelli supported three popular terminal technique allowed user edit multics input line retrieve previous line acquired limited use lcs become popular use two process arpanet neither readily available user way efficient experimentation done ciccarelli charles r davis developing video editor environment never saw use left experimental stage ciccarelli effort first use characteratatime input form multics late people mit familiar video editing development began see state editing multics severely deficient although various proposal create new qedxlike editor bandied none achieved sufficient consensus implemented people critical editing multics impressed proposal realized experience realtime video editor emacs recognized rapidly becoming central user interface system supported began claim emacs symbolized everything right wrong multics numerous vocal partisan multics traditionally prided user interface sensitive criticism discussion rapidly grew whether multics could ever support emacslike editor emacslike editor purpose discussion realtime characteratatime interactive displayoriented editor control r modelike running mainframe large set people contended wrong way go given predicted economy terminal processor communication equipment party stated terminal would become intelligent would adept editing task technology advanced others notably stallman contended correctly author view integrated powerful program running mainframe could interface sufficient usability generality extensibility power supported discussion centered around feasibility characteratatime input multics multics never supported neither many large commercial mainframe dec minicomputer orientation provided facility implementors operating system dec hardware seem predisposed carry facility multics communication system complicated presence frontend processor known fnp performs linecontrol echoing function mainframefnp communication protocol optimized small transfer rapid interaction fnp interrupt multics central system expensive process wakeups multics expensive well working set multics process large predicted expense characteratatime interaction great yet fundamental importance feature type system contemplation acknowledged february discussion basically come whether someone multics organization could persuaded attempt implement editor author used emacs preparation course january become convinced unquestionable superiority desirability idea contained therein demonstration emacs using delta data honeywell cambridge information system lab scheduled march intent stimulating interest within multics development organization realtime editing demonstration widely attended however lack preparation hardware difficulty presence number unruly outsider led chaos many people went away idea markedly different brought demonstration one person impressed larry johnson multics communication specialist sufficiently impressed within hour end demonstration effected patch fnp cause transmission character mainframe typed implementation extremely inefficent causing interrupt wakeups every character typed yet inspired author people present consider characteratatime io longer possibility reality implementation realtime editing system could constructed felt would rapidly gain popularity necessary implementation efficiency would necessitated popular demand day author contemplated construction multics emacs several lesson learned history emacs inferior nature teco implementation language plus addon nature display support led consideration editor constructed realtime display editing primary goal removal overhead interpretation intermediate code eg teco seemed one way efficiency could rapidly bought back goaldirected implementation pli standard multics system application language suggested multics pli extremely complete welldebugged optimized system programming task however another lesson learned emacs extensibility modularity ability add program macro teco implementation augment editor crucial smaller primitive editor called efficient fashion would internal subroutine internal procedure large program would presumably grow without bound functionality increasing difficulty maintenance incremental growth debugging calling external program expensive multics approach taken ability extend function writing new code would require externally available interface editor primitive would presumably operate reduced efficiency never equalling efficiency code big procedure appeared unreasonable restriction alternative presented lexical inclusion code editor primitive seemed equally unpalatable incremental overhead creating new pli source program large subsystem substantial large amount communication information must lexically included source program even smallest component declaration necessary every temporary variable every builtin function every procedure name used substantial expense pli compiler must invoked every version code matter minor change test either source program proliferate without bound routine must packaged larger program increasing compilation overhead without bound possible user augmentation prime feature would include large amount declarative information giving internal structure editor database pli seem conducive interactive development subsystem choice language limited technology long since passed stage assembler language reasonable idea substantially augmenting multics teco seemed distasteful step backwards among standard language multics neither fortran cobol apl basic could given serious consideration point idea lisp editor implementation language occured author lisp function call substantially efficient multics pli external call far le efficient pli internal call lisp ideally suited buiding large subsystem many function many small lisp viewed properly lispbook highly objectoriented language masterfully adept maintaining complex data structure program added running lisp environment without need compilation debugging interactively debugged aid lisp interpreter global namespace lisp allows user reference variable need reference given task without compiledin assumption storage location structure lisp seemed solve many design problem inherent use pli author also substantial experience multics implementation maclisp moonual implemented large subsystem multics crashdump analyzer becoming sufficiently dependent upon time become maintainer implementation lisp acquired bad reputation several reason false people often point inefficiency interpreted code however production lisp code mature implementation compiled machine code kind pseudocode multics lisp compiler lcp welldebugged reasonably efficient people speak innate inefficiency datarepresentation lisp yet existence character string data type maclisp plus judicious use outsideofthelanguage facility appropriate create reasonable efficiency data representation people quick point unreadability unmaintainability source code lisp program yet precisely editor like emacs automatic technology editing formatting lisp code come given proper editing tool formatted code lisp readable opinion many blockstructured language finally many lisp implementation fully mature thus suited large subsystem implementation unique nature multics process environment allows subsystem multics maclisp invoke communicate readily multics facility outside lisp environment set facility available program running multics process one major feature multics status multics maclisp time holdover mit codevelopment day multics abovementioned dump analysis tool major us documentation moonual longer published available honeywell support officially way distributed multics program written lisp decision use multics maclisp implementation language profound consequence future large amount interest lisp eventually manifested desirous knowing solely able augment multics emacs nontechnical personnel observed acquire enough knowledge lisp extend emacs purpose lisp previously limited undergraduate computer science course artificial intelligence laboratory choice lisp turned wise choice incremental creation editor extensibility could done language evening march bruce edward author sat logged mit multics system coded debugged become central module multics emacs lisp program maintained buffer text list editorlines editorline representing one line text buffer editorline triplet linecontent previous editorline buffer next editorline lisp variable identified current editorline another variable current point current line linecontents initial implementation represented doublylinked list single character current point current line identified list node containing character point lisp function provided insert character current point delete character break line two inserting newline merge two line deleting one move current line current character pointer forward backward character line print line iv multics emacs embryonic phase basic decision program created day nothing maintain buffer text lisp list structure primitive operate upon buffer pointer visible effect invoked line printed invoking function provided purpose program much augmented since core multics emacs could used equally well implement nondisplay editor conventional qedx tecolike mold basic structure emacslike display editor consists three part program called basic editor interactive driver redisplay basic editor maintains text contains primitive operate upon interactive driver interprets character read keyboard invokes primitive basic editor execute request redisplay screen manager invoked interactive driver input character construct maintains display screen looking basic editor buffer effecting incremental change much said interactive driver redisplay later basic editor developed march several noteworthy design point representation text buffer list editorlines designed optimize redisplay display editor optimize uservisible internal primitive dealt line much editing textprocessing operation consits operation upon line iterated line search endofline character common operation seemed suboptimal specifically redisplay would identify line buffer line displayed upon screen screen last updated order move line around better know text compare redisplay time redisplay basically compareandupdate process discussed way making comparison heuristic cheaper tremendous value maintenance buffer liststructure also mean text moved around perform insertion deletion line deleted simply unlinked list representing buffer new line linked lisp garbage collection ultimately reclaims space used deleted node yet even nongarbagecollected programming language explicit storage management list node allows potent strategy utilized doublylinked list disadvantage representation empty buffer ie one containing line character difficult remains problem day multics emacs buffer created one line consisting newline character buffer considered empty reading file empty buffer specialcased produce desired result another problem approach difficulty searching character string particularly one containing imbedded newline character spite difficulty daniel weinreb subsequently adopted doublylinked buffer list editor zwei dlwthesis mit lisp machine chineual zwei also coded lisp decision made start represent linecontents two different way one way line current line current line representation medium current line must easily modifiable line must storageefficient maclisp string natural choice represent linecontents modifiable string lisp machine chineual hand arraylike object initial implementation current line represented doublylinked list character described linecontents line still lisp string current line copied modifiable representation first modified known opening line copied back new lisp string current line left ie longer current line strategy match fairly well normal user pattern moving line modifiying moving another line etc making sequential change buffer simply typing amount new text special case pattern realized quite early doublythreaded list character could efficient enough production implementation even attempting reuse storage list node representation deemed inefficient operation upon current line traditional characterstring buffer distinct advantage eventually three week development editor new type lisp object invented hold modifiable representation current line rplacable string lisp term rplaca rplacd primitive pointer storage modifier stored outside lisp environment multics segment pointer exist lisp pointer cell pointer type bit character string multics lisp pointer explicitly typed special bit pattern pointer indicates pointer must chased subjected dataobject relocation maclisp garbage collector multics implementation recompactingtype garbage collector gcpaper four rplacable string needed entire implementation rplacable string manipulated two kind primitive normal lisp lispinterfacing primitive view character string special primitive lap lispinterfacing assembler many implementation provided modify content delete character point insert character point primitive make use powerful multics hardware instruction perform overlapping string move either direction mapping precisely action inserting deleting character active current line lap function run lisp environment called efficiently one lisp function another next step development interactive driver function interactive driver emacslike editor basically teco control r mode read character user keyboard find program teco macro lisp function run binding key execute function executed interactive driver invokes redisplay reflect change buffer screen loop read character dispatch function redisplay repeated indefinitely basic control loop emacslike editor interactive driver provided special problem initial implementation atomic symbol moonual whose name character typed given lisp property function run character struck twokeystroke sequence mapped different property second character mechanism conducive switching key binding rapidly easily prevented latter implemented three month lasted storage inefficiency implicit storage property also undesirable nevertheless natural mapping keybindings lisp property mechanims provided easy path create operative mechanism allow rest editor grow significant difficulty availability characteratatime io experimentation growing editor completely experimental part recognized funded project resource immediately available among already highly overcommitted multics communication support specialist thus ciccarelli code sought find basis technique singlecharacterinput via multics arpanet within day interactive driver operating true characteratatime realtime mode process logged via multics arpanet redisplay lisp function printed current line overstruck current character position served place soon thereafter johnson patch effect singlecharacter transmission fnp applied regular basis cisl development multics site testbed system real user community editor development progressed went user mit multics system willing experiment new editor forced use via arpanet administratively allowed use arpanet experiment nonrealtime mode typing linefeed activate ie cause multics take cognizance previously typed input development path proceeded parallel application patch become known breakall mode patch slow dangerous operation requiring highly privileged access mit service system question next final step birth editor design creation redisplay redisplay job depict section content buffer video terminal screen redisplay invoked interactive driver function called performed arbitrary modification upon buffer redisplay must know precisely put upon screen previous time invoked compute must put upon screen time determine effectively efficiently modify screen using terminal facility available transform old screen content new screen content one fundamental design principal realtime video editor nature basic editor aware neither existence organization redisplay redisplay symmetrically aware neither organization action basic editor invocation redisplay given hint transformation upon buffer observe performed observe new state buffer including current line pointer etc philosophy lead highly desirable state affair extension ie usersupplied editor feature well basic editor need concerned display management manipulation text buffer via supplied primitive display managed automatically first coding multics emacs redisplay performed march delta data terminal cisl video terminal readily available fortunately spite severe implementation bug terminal feature better class consumer video terminal available ability insert delete character line screen thus designed redisplay start interface redisplay designed one lisp function redisplay took explicit argument current buffer current line pointer current character position pointer etc ie current state basic editor implicit parameter contract function redisplay determine displayed screen differs already screen update screen remember next time screen even appearance simple typed input screen manifestation redisplay theoretically redisplay occurs every two character typed redisplay put character screen including typed input one time typed fact later optimization discussed allow participation operating system negotiated simple echoing principle remains redisplay part editor interface terminal display system keyboard display terminal considered completely disjoint terminal said simply usable environment deviceindependent terminal support provided supplying separate lisp program known ctl controller terminal type supported function defined ctl provide common functionality terminal display example dctlpositioncursor two argument coordinate position terminal cursor coordinate dctldeletelines one argument number line deleted deletes many line current cursor initialization function dctlinit provided terminal ctl set parameter used redisplay state function available terminal subset maximal ctl function ctls call common interface output character terminal via ctl mechanism dynamic nature lisp workspace lisp function calling particular used add terminalspecific component editor invocation time type terminal used usually provided multics communication software thus loading ctl automatic heart redisplay screen image data structure redisplay remembers left screen one invocation might know start next rather array character representation screen image designed take advantage basic editor division buffer editorlines screen image lisp array moonual one dimension one element physical line display terminal element array called screen displayline pair editorline string exact character sequence known physical line display linedata several consecutive displaylines may editorline editorlines whose printed representation longer one physical terminal line content linedata reflect actual printed representation editorline part editorline linedatas contain newline character tab nonprinting character format effector number character linedata width column upon screen character singlewidth printing character character given position corresponding terminal line character corresponding position linedata nonprinting character editorline actually linecontent editorline converted printable representation ascii wru either e control e according multics convention user option tab converted appropriate number space note strategy readily extensible representation overstrikes multiwidth font although multics multifont support certainly multifont terminal readily available viewpoint editor use multiple font lack representability overstrikes problem underlined text quite common multics perhaps addition overstrike map form displayline structure solution basic flow redisplay compute whole screen displaylines new screen filling another array newscreen update screen based upon comparing array screen newscreen calling function ctl copy array newscreen screen fact operation performed perwindow basis every time redisplay invoked window section screen assigned display particular buffer although may today number window limitation conventional terminal restrict wide screen redisplay contains many optimization part editor effort optimization wellspent optimization linetransmission time ie least screenrewriting redisplay visible user however frequency invocation redisplay conceptual complexity task make computation time redisplay prime target optimization critical significance entire editor cpu time consumption mainfests system loading billable user expense reduced response time visible user lisp implementation string list node dynamically allocated minimization storage generation redisplay equally important consideration detailed algorithm optimization redisplay given appendix completion initial implementation redisplay basic loop interactive driverbasic editorredisplay functional providing operative editor next necessary addition extension provide useful function editor extension body code provides textmanipulating capability specific domain text processing operates invoking primitive extension basic editor extension know data format organization basic editor extension completely unaware existence display redisplay like basic editor extension manipulate text buffer calling basic editor however opposed actually manipulating editor data structure display follows automatically without explicit coding thereto extension often written user although set extension code incorporated editor primitive manipulating word sentence paragraph comment whitespace supplied extension loaded editor environment demand emacs library include code knowledgeable pli lisp syntax emacs mail system optional package extension written maclisp augmented set lisp macro moonual tune syntax maclisp data control construct necessary manipulation multics emacs environment extension language interesting one covered detail appendix b considered major feature language extension fluid powerful language specifically designed writing program contrast dramatically use teco extension coding emacs teco code quite baroque accessible expert extension language multics emacs sufficiently natural simple learn nontechnical personnel successfully written debugged nontrivial extension stallman stallman concurs relative merit teco versus lisp editor implementationextension language multics emacs provides number feature lispprogramediting mode facilitate interactive development debugging extension written function editor buffer added editor environment keystroke extension first week multics emacs developed way interactive incremental development lisp program way unlike technique developed mit lisp machine chineual dlwthesis among interesting initial feature provided use extension creation character set extendedtype object extension trying utilize characterscanning capability multics hardware primitive basic editor return exchange character string pair two lisp array designated character set another set primitive basic editor given character set scan buffer current point backwards forward possibly current line first character character set character set required array constitute character set set immediate use powerful multics hardware instruction translate test variety actually used perform scanning ability deal external file also provided naturally lisp typeextension ability arbitrarily define type object created composition possibly primitive object type editorlines whose content unmodified string external file linecontents pair pointer length list node pointer location character string multics hardware support character address pointer multics virtual memory lowestlevel lap primitive deal either lisp string object filecons identically representation character string thus readin file multics emacs cause storage generation copying string file maclisp string facility needed extension mark buffer pointer dlwthesis mark identification given character position given buffer extension use liberally least one mark uservisible feature mark used identify point buffer pair mark current point buffer mark used identify region buffer mark problematic need relocated text surrounding point represent modified deleted say mark identifies character line must made identify nearest remeaining character line character specifically one line line deleted imposes overhead almost every buffermodification operation check must made see mark current buffer need relocated account multics emacs approach minimization overhead associate mark line representing mark pair editorline position within line mark created primitive basic editor creates mark designating nowcurrent editor point buffer return keep list mark associated current buffer line opened modification list mark current buffer scanned mark designating current line secondary list mark mark current line developed list scanned buffer modified current line ever capable modified mark expected freed ie removed perbuffer list secondary list code created longer needed keep overhead mark growing limitlessly due definition buffer position emacs character simple tremendously important case adding text end current line never cause relocation mark secondary mark list need even scanned common modification interesting alternative strategy mark implemented weinreb dlwthesis zwei editor editorline data structure includes list mark line avoids perbuffer mark list ever scan pereditorline overhead implied approach however deemed great multics emacs list node much expensive multics maclisp bit lisp machine bit weinreb also admits nonrelocatable mark ie mark put mark list valid time invoking code obligation cause buffer modification core editor supplied extension operative development proceeded along three separate path simultaneously augmentation functionality performance improvement new interaction arpanet area discussed independently v early enhancement within first two month need arose support many text buffer simultaneously within editor people usually edit many file conventional multics editor provided capability addition many specialized us buffer develop time supporting many exotic feature editor implementation multiple buffer viewed task multiplexing extant function editor several buffer buffer edited defined two dozen lisp variable basic editor identifying current editorline current openclosed state first last editorlines buffer list mark forth switching buffer ie switching attention editor user see need consist switching value variable neither interactive driver redisplay need cognizant existence multiple buffer redisplay simply find different current editorline exists buffer switched call function basic editor aware existence multiple buffer deal many buffer switch etc code simply reference buffer state variable operates upon current buffer function basic editor implement command switch buffer saving value relevant lisp variable define buffer placing saved image list value property lisp symbol whose name current buffer similarly saved list target buffer retrieved contained value buffer state variable instated new buffer created simply replacing instatement step initialization state variable default value empty buffer buffer destruction accomplished simply removing saved state embedded property pointer buffer vanish thereby maclisp garbage collector take care rest alternate approach multiple buffer would buffer state variable referenced indirectly pointer simply replaced change buffer approach spite feasible lisp le desirable current approach distributes cost variable reference time bufferswitching time former much common one interesting perbuffer state variable list arbitrary variable placed extension code extension code register variable call appropriate primitive basic editor value variable registered given buffer saved restored buffer exited reentered ability lisp treat variable runtime object facilitates variable thus given perbuffer dynamic scope demand allowing extension operate many buffer simultaneously using code variable analogous fashion way multics program executing many process simultaneously emacs multics support notion mode specific tuning editor interface specific task tuning include set key binding setting uservisible perbuffer variable instance pli mode tab keycharacter mean indent current line correctly according standard pli indentation column column comment placed lisp mode tab mean indent current line correctly according standard lisp indentation comment go column mode take effect perbuffer basis buffer given mode fundamental mode initial default mode one significant advance emacs similar editor key ability support perbuffer mode ability change key binding rapidly conveniently buffer switched implementing meant replacing keybinding mechanism used lisp property replacing lisp array dispatch interactive driver basic structure used lisp array element one possible ascii character array element contain either lisp constant nil indicating key undefined lisp symbol defines function executed character pointer another similar array element character prefix character nonterminal character multicharacter sequence historical reason prefix character esc ascii escape specialcased dispatchvector second row rootnode dispatch vector list kept perbuffer key whose binding changed buffer element list give key path dispatch vector binding key binding changed placing list placing original binding dispatch vector list element changing element appropriate dispatch vector buffer exited list element dispatch vector element swapped element local keybinding list buffer entered swapping performed reinstating local key binding buffer command available set key dispatch vector without placing local list constitutes setting key globally buffer explicitly defined otherwise approach designed following desirable characteristic optimized buffer key binding different default thus overhead perbuffer dispatch vector exist plus concomitant problem making global change overhead switching buffer proportional number keybindings different default change global default made trivially clearly disadvantage approach overhead involved buffer almost every key different example normally trivial key normal printing character fairly odd machination manifestation well definitional issue attempt made change global definition key redefined locally major feature modern video system dividing screen window region different activity displayed highly advanced video system chineual parc often dozen window screen partially visible editor multiple window allow several document edited viewed simultaneously new old version etc emacs mailreading responding going two window buffer containing interactive message one user display activity proceeding parallel screen emacs support two window screen competitive incentive support multiple window multics emacs two userlevel windowmanagement scheme available multics emacs default static window experimental one popup window modelled loosely display software xerox parc parc relative merit two scheme yet clear use experimental scheme user option static scheme user creates destroys window explicit command window size set explicit user command special subsystem window editor assist operation activity including switching new buffer occurs one selected window user selects another window explicitly however certain command take advantage multiple window attempting place buffer display window besides selected one instance reply command issued reading mail build reply letter buffer multiple window use place reply window selects fact leastrecently used unless buffer already screen window case window selected another example command compile command pli fortran mode place compiler diagnostics window source program popup window mode may command switch buffer create new buffer enter type new activity attempt place window screen already window buffer somewhere creating new window destroying old one leastrecently used basis necesssary buffer already screen window window selected window destroyed either replaced explicitly user corresponding buffer destroyed window size set automatically dynamically user often find popup window erratic unpredictable nature especially low line speed still open design issue whether popup window valuable timesharing system accessed via communication line degree user visibility bufferwindow correspondence philosophy popup window rooted multiple window implemented multiplexing function redisplay window screen display one possible buffer buffer may display window one window one window although latter case introduces several human design technical problem one window time considered current selected window window cursor placed redisplay end invocation indicate current point current buffer current buffer always display current window interaction buffer window ofttimes subtle small change way correspondence managed seem produce significant change visible interface system array give screen location extent window well name buffer display therein mark buffer designating window point last current point buffer known redisplay time redisplay run performs compareupdate operation window defined array current line current point within used compute displayed selected window window point mark used window mark updated dynamically need buffer window modified redisplays editor switch window command tell redisplay choose another specific window selected window also tell basic editor switch buffer directed redisplay buffer name window array structure redisplay also use window point determine point buffer new window make current point thus window switched editing resume new buffer new window last point left screen content change buffer display one window window point identifies last place current point window selected window allows multiple window used edit multiple part buffer window management system contrast dramatically teco latter teco time display text window whose position extent screen set emacs response user command thus switching window say two alternate nonoverlapping location two document may edited however simultaneous update window occur whether text display one window auxiliary buffer managed informative display purpose active extension thoroughly unique feature emacs interrupt system soon mandated interaction multics emacs multics interactive console message system multics support usual two type interuser communication mail andmessages mail sent sender recipient mailbox file segment multics storage system read recipient leisure message intended communication transient nature sent using simpler command printed recipient console soon process multics control point go idle usually waiting console input sending mail incidentally sends message form mail alert recipient mailbox ought read message multics implemented process interrupt event call channel swg cause messageprinter invoked process wait coordinator process go wait message present process awakened waiting state happen new message arrives waiting among reason check made messageprinter invoked message present messageprinter normally function reading message printing user console interspersed among recorded input output user interactive session context emacs wholly inadequate message printed emacs used content screen redisplay envisions destroyed position cursor screen content longer managed effectively situation handled messageprinter informing teco whatever program control message printed screen destroyed latter must refresh entire screen attempt made use deemed inadequate widespread use lowspeed terminal would cause liberal screenrefreshing frustrating furthermore integrated screenmanagement system least allows message printed usable form emacsteco control multics state terminal interface software emacs control multics message arrived printed intelligibly emacs order perform lowlevel terminal control request terminal control software supervisor suspend control deemed best emacs handle messageprinting control emacs set called messageprinter message need printed needed interface messageprinter call program print actual message fact provided multics message system way emacs could print message saw fit integrate printing screen management performs keep transcript message received sent organize response message useful way emacs interrupt system introduced fulfill need asynchronous event message timedriven feature invoke entry point emacs subsystem queue information asynchronous event set unique interrupt cell associated type event interactive driver sample interrupt cell basic loop associated interrupt cell interrupthandler function extension invokes normal function basic editor including redisplay interface perform required processing case interactive message handler par message header place unique buffer associated sender buffer display window call redisplay primitive display top screen way redisplay know precisely portion screen need refreshed remove occurrence emacs interrupt cause inputcharacter reader return lowestlevel caller inputcharacter reader prepared return character interrupt allow interactive driver sample interrupt appropriately deep implication upon optimized echoing scheme discussed allow partial echoing operating system operating system must stopped echoing emacs interrupt occurs known screen content synchronized echoed point operating system emacs interrupt system used console message timeofday display update continuously receipt arpanet output user telnet user supdup mode buffer window used implement remote terminal connected foreign computer system multics emacs automatic documentation system unlike emacs documentation editor command displayed easily via special command request keystroke documented command documentation stored indexed sequential file maintained vfile multics file manager key index command name key used invoke command documentation stored format key almost never mentioned name rather command name ie gotobeginningofline instead control documentation displayed substitution made automatically command name binding key current buffer thus documentation accurate matter user customized key binding extension may document command placing documentation lisp property command supplied therein documentation system search first substitute display documentation though appeared documentation file special mode exists editor maintainer get unsubstituted documentation file edit add additional documentation feature derived emacs include ability find last fifty keystroke typed command match substring command name find command key invoke apropos given topic reason command function name must kept reasonably mnemonic vi echo negotiation soon multics emacs introduced people began react negatively idea large timesharing central processor interrupted every character waking multics process every character echo character worst case ie put typed character back screen multics hardware priceperformance le optimal working set multics process large introduction realtime editing viewed crippling blow already dangerous performance situation many observer rejected idea mainframe performing function associated intelligent terminal course objection invalid commercial terminal approach even weakest timesharing editor expressive power simplest approach implementation realtime editor involves every single character typed processed editor immediately described precisely approach taken teco however working set much smaller multics working set rarely run user characteratatime interaction profound negative performance implication way alleviating impact tremendous value simple entry text obvious candidate optimization error made text typein tremedously cheap operation using standard multics editor editing done smoothrunning interaction requiring action system echoing character characteratatime wakeup redisplay emacs buy nothing mode error made tremendous cost hand unity emacs interface lack text entry mode v edit mode similar implementation artifact fundamentally important feature traded amount implementation efficiency optimization must completely transparent automatic optimization design tradeoff normal multics interaction fullduplex nonlocal echoing terminal echoing performed frontend processor fnp unconditionally running emacs echoing turned emacs redisplay manage entire content screen completely fnp echo running emacs several reason redisplay know accurately screen fnp placing data well fnp general assume echoing valid typeahead input typed system responded previous typing placed screen system responded previous input positioning cursor determines next character placed input specifies fnp echoing however efficient fnp communication processor optimized task emacs echoing maximally inefficient thus scheme echo negotiation devised echnego fnp echo conditionally emacs use protocol address timing problem alluded operating maximum efficiency fnp echo character text typed emacs never interrupting mainframe waking emacs process end line editing attempted desired effect reducing mainframe interrupt wakeups factor equal average number character line implementation scheme involved augmentation terminal control software multics supervisor well code fnp echo negotiation entry new text automatically recognized basic editor interactive driver case defined waiting command character current point current line end already open line current buffer must display one window special call made multics supervisor whose meaning essentially get line worth character echo wake emacs return attention needed attention emacs echo break condition may several situation end terminal line reached emacs supply supervisor call computed length end screen nontrivial character typed emacs supply supervisor call bitmap character may echoed fnp notably among carriage return character rubout character tab character nonprinting thus potentially editing character emacs interrupt recognized occurrence echo break condition cause fnp stop echoing character transmit character cause wakeups character typed thereafter echoing regardless whether marked bitmap echoable character emacs wake receives character receives well count many echoed echoed portion must leading substring character returned special call made redisplay indicate echoed character screen special function basic editor insert echoed character end current line emacs processing continues character caused current input character time echo break condition time one echo negotiating inputreading call return emacs fnp entire multics input system terminal state would without echonegotiation namely shipping character one time typed causing wakeups character although multics scheduler optimizes attempted wakeups running process successive call read input character new text entry echo negotiating variety character read processed realtime typed state break table may changed key binding reassignment occurs switching buffer without affecting fnp echonegotiating input call made check made see input character typed yet read thus yet processed emacs returned immediately processing system remains characteratatime nonechoing state automatic echoing begin effect character read yet processed predicted emacs produce possible output make another input call thus slow system emacs racing typist process character fast typed automatic echoing state entered time emacs make two successive echonegotiating input call time input typed slow system effect echo negotiation noticeable character echoed instantaneously end line reached character echoing stop awaiting loading running emacs emacs run pick character typed interim performs redisplay outputting one burst instantaneous echo resume number character automatic echo performed leading prefix typed input line measure response time system vary two three character half line worst case depending upon speed typist slow typist observe larger percentage automatic echo slow system effect emacs interrupt system upon echo negotiation significant echoing must stopped console message updated timeofday whatever asynchronous occurrence might displayed echo break condition detected communication software external occurrence multics process case special call made stop system echoing acknowledgement stopped echoing awaited fnp system nonechoing characteratatime state echo break character returned usual indication many echoed interactive driver notice pending interrupt process usual echo negotiation believed prerequisite costeffective managed video system multics including tentative fullscreen process output management scheme consideration future extension echo negotiation include rubout processing deletion last typed character tab expansion issue make thing difficult transparency human interface consider example aforementioned feature display last character typed echo negotiation conceived developed released two stage first january negotiated echoing implemented interrupt side multics terminal control software mainframe reduce mainframe interrupt remove need process loading wakeups character fact synchronization notably determination typeahead thus echoing may begin could performed normal lockingsynchronization primitive multics supervisor fundamental importance implementation fnp involved implementation sent character mainframe one time emacs use software released multics release july fnp communication protocol augmented solve synchronization problem necessary determine safe start echoing stopping echoing response emacs interrupt moved negotiating echoing fnp removing necessity mainframe interrupt text entry emacs well fnp echoing software interface previously extant interruptside echoing software exact way latter interface emacs fact interface multics supervisor negotiated echoing emacs change design introduction fnp echoing virtually identical internal interface emacs input interface program three program emacs input interface multics terminal control code supervisor fnp software fact form hierarchy echonegotiating input supplier prepared echo character received lower level count among echoed echoed lower level among detail scheme set forth echnego passing interest use emacs motivated several change multics communication system period june characteratatime input implemented via cleanedup version original patch efficient became official multics feature allow experimentation emacs mitmultics emacs use became widespread communication protocol fnp mainframe required several transaction negotiate place store typed input mainframe system derives several obsolete design compatibility constraint widespread use emacs thus characteratatime input caused new optimal protocol devised implemented summer june fnp input buffer strategy totally redone largely due emacs use buffer collected communication hardware one buffer time per break character every character became break character strategy began inefficient stress failed switch buffer sufficient haste new strategy implemented divorce notion bufferswitching break character vii supdupoutput arpanet protocol mentioned introduction characteratatime input official feature june usage multics emacs cisl development machine via arpanet whose multics implementation supported characteratatime input spite hardy soul multics system release site phoenix arizona patched system great difficulty great risk intervening three month experiment desiring experiment new editor would either log arpanet directly tip support dialup connection one local host supported characteratatime interaction tip arpanet attempt terminal control character sent emacs ctls would arrive whatever video terminal dialed tip completely unprocessed attempting access mitmultics running included large number person central development emacs strong interest growing editor faced different problem provides completely integrated screen management could expected pas terminal control code telnet connection unmodified many user accessed specialized locallysupplied hardware knight tv system consisting several dozen highresolution rasterscan monitor keyboard controlled central dec control versatile fast device accomplished screen management system native control code seemingly local problem interface multics fact indicative general need full solution problem brought telnet supdupoutput option august option provides virtualized video support telnet connection based earlier supdup protocol based internal buffer code supdupoutput integrates support telnet way earlier telnet supdup option known implementation reason fails achieve output system operates three level three representation output based upon ascii character set normal printing character involved three different mode expression control format cursor position function output produced program main program level contains addition printing character ascii format effector carriage return tab new line etc special escape sequence escaped ascii dle character control p chosen mnemonic value effect video control cursor position form user telnet program communication multics effected data received foreign host coerced convert output internal buffer code tdcodes placing output buffer internal buffer code property code le octal considered printing allowing stanford university extended character set greater equal format effector express contextindependent cursor position video control expression format effector tab newlines backspace etc translated absolute cursor position video screen interestingly enough printing terminal supported degenerate screen actual conversion devicedependent character code control sequence performed output interrupt time canonical output buffer code strategy feature output cleanly aborted point interrupt side processed output buffer code cognizant exact cursor position thereupon supdup protocol confused telnet supdup option telnet supdupoutput option originally developed interits protocol telnetlike protocol used communicating one host logged another unlike telnet telnet however supdup defines virtual negotiated video terminal instead network virtual terminal printingterminallike device host communicating via supdup initiate communication exchanging description user terminal stating dimension well facility lack server host one logged remotely ie target thereupon convert program output internal buffer code official output expression code supdup case server host trivial simply pass output buffer network implementation stanford ai lab supdup server must convert local code output buffer code user host one user physically logged running user supdup program receives network output buffer code us control local screen case user host trivial simply placed local output buffer directly via special supervisor call provided purpose trying use multics emacs mitmultics host immediately faced inadequacy telnet dealing video terminal namely lack technique describing controlling attempted pas raw terminal control code terminal dec required local adjustment output system done failed transparent also failed address larger user community knight tv system point obscure obsolete feature user telnet program revived stanford university ai lab sail support large user community using datamedia model display terminal moderately capable device stanford negotiated special feature manufacturer device control code form standard video control code stanford system stanford supdup server convert datamedia code output buffer code sail creation supdup server using telnet communicate sail invoked special mode user telnet program converted datamedia control code mainprogram level code sail would treat telnet connection like almost else datamedia virtual datamedia would function late march ctl datamedia written user multics emacs told inform multics emacs using datamedia use datamedia emulation mode telnet phenomenal ingenious kludge worked tolerably well two month deficiency brought end datamedia substantially smaller screen knight tv wasted screen space due emulation frustrating new ctl written nonexistent large screen datamedia screen dimension knight tv user knight tv instructed use telnet limitcheck simulated datamedia code coming strategy worked even enough though datamedia control language much le powerful native power output system expressed output buffer code lacking notably facility express insertiondeletion multiple line caused multiline insertionsdeletions performed multics emacs visibly much slower capable additional disadvantage need switch datamedia emulation mode inapplicability technique itssupported terminal knight tv switching nature network connection telnet supdup midstream also ruled consideration time side time daniel weinreb author developed idea embedding transmission output buffer code telnet output stream escaped special sequence interim protocol known pyz protocol developed made operative june name pun classic czarist forgery emacs user would specify pyz terminal type selected ctl would express screen control output buffer code escaped special sequence ctl would assume screen dimension characteristic knight tv special version user telnet would used added facility watching special sequence feed escaped data directly output buffer way user supdup program result expected mode usage became popular next month pyz protocol augmented negotiate terminal characteristic fashion format supdup time datamedia emulation completely obsoleted itssupported terminal could used via pyz ctl mark crispin maintainer user telnet wisely insisted pyz developed official protocol would consent standardizing version user telnet supported thus august supdupoutput protocol adopted network information center telnet option special escape replaced telnet negotiation subnegotiations like telnet option supdupoutput offered server server bound refuse support even never heard thus upon officialization supdupoutput protocol subsequent installation user telnet supported multics emacs would attempt negotiate supdupoutput host automatically use supdupoutput ctl successful short user multics emacs invokes emacs multics special action entire terminal description control negotiated automatically january second userside implementation supdupoutput created time implementing access mit chaos net chaos another set centralizedlogic rasterscan terminal mit campus chaos net access arpanet specialized gateway server user terminal system use mitmultics gateway server regularly supdupoutput implementation allows automatic negotiated support multics emacs third known implementation user supdupoutput multics emacs feature known telnet mode maintains connection foreign host emacs window original server implementation multics emacs known supdupoutput server interestingly enough native multics user telnet support supdupoutput option lack native multics video support time investigation supdup led july writing multics user supdup lisp built spare part multics emacs us emacs ctls directly characteratatime input utilize echo negotiation like user supdups performs terminal control based upon receipt output buffer code almost communication mitmultics done program user using program multics access receives full integrated screen support supdupoutput provides protocol via server host total integrated screen management function program deal managed video communicate user host provide video support deviceindependent manner viii place emacs multics one controversial feature multics emacs incorporation large number mode parallel already available function multics typical emacs mail system place incoming outgoing mail buffer window facilitate realtime editing mail paging mail reading responding automatically generating reply exists complete integrated multics mail system outside emacs many validly raised point existence another one inside emacs nowhere complete questionable best however task mail composition seems overlap largely task text editing integration text editor seems appealing standard multics mail system sharp distinction made inputting mail editing mail use multiple window read reply mail ability page back forth natural wanted learn use emacs reason alone certainly multics integrated video management time serious design consideration mail system could use advantage indeed emacs mail system indeed way getting videomanaged mail nothing else however large percentage mailcomposingreading task editing mandate potent editing technology available used emacs emacs seems likely candidate contain mail system mail system contain emacs way done emacsimbedded mail system exists well unique nature multics process environment specifically ability call procedure subsystem known multics proper interface exist allow wide panorama function subsumed emacs experimentation video interface multics function performed creating function via emacs extension language calling external multics routine begets utility without build environment ground buy video management free virtue automatic redisplay prototypical many specialpurpose emacs mode directory editor dired exists multics emaces user inside emacs invokes directory editor via sequence command character display listing file storage system directory edited placed buffer thus virtue redisplay displayed screen normal emacs command used position line line describes one file directory display mode command would cause buffer modified may issued however command delete file show content file available keystroke thus user position around display directory listing examines file mark deletion actually deleted directory editor exited user never specify file name see large picture file directory time menu type interface typical many advanced video system parc menutype subeditor provided multics emacs edit buffer examine destroy unneeded one window move around boundary set size well another class specialpurpose mode invokes largescale multics subsystem within emacs process output useful way lisp mode single keystroke invokes multics lisp compiler upon function cursor pointing upon completion incorporates object program running maclisp environment display compiler diagnostics screen pli fortran mode keystroke invokes appropriate compiler upon source program edited compiler diagnostics placed buffer second window analyzed identify source line flagged error compiler dedicated command keystroke pli fortran mode move cursor source program next line flagged error compiler move current point diagnostics buffer next diagnostic displayed diagnostics window automatically pointer source line kept mark thus valid new editing source program way multiple window used reply sourceprogram error way mail response generated interactive message processor multics emacs already described discussion emacs interrupt system creates buffer associated sender interactive message buffer key binding set typing line send line interactive message associated user message sent user appear end buffer automatically conversation held another user simply going message buffer multiple message buffer like buffer displayed screen multiple window thus several conversation sometimes seen scrolling simultaneously automatically multics emacs screen facility go far allow automatic routing response interactive message coming foreign network site third type special mode provided user telnet user supdup mode mode communication foreign arpanet host established dedicated buffer usually window becomes virtual video terminal foreign system text typed telnet supdup buffer go foreign system telnet mode foreign system assumed integrated screen support realtime line editing virtue telnet protocol power emacs editing may applied input sent carriagereturn supdup mode screen management performed foreign system received network output interpreted output buffer code position around supdup mode buffer mode indicative desire emacs user stay within emacs entire duration multics login session running process emacs desirability feature would questionable multics process could telnet emacs running activating either needed multics stack architecture however make extremely difficult impossible coroutine architecture emacs buffer better model multitasking process provides easy way divide screen task well another specialpurpose mode interest lisp debug mode intended debugging emacs extension specialpurpose buffer set line typed evaluated lisp form carriagereturn entered result evaluation placed buffer well resulting transcript buffer like consolemessage mode lisp debug mode allows setting breakpoints extension code debugged breakpoint entered lisp debug mode buffer entered appropriate message variable may examined set via normal lisp form typed buffer lisp evaluator stack best debug function interpreted form may traced special command lisp debug mode return breakpoint lisp debug mode us multiple window advantage usual use three window using one display source code extension debugged one display text upon extension operating third lisp debug mode buffer breakpoint entered command lisp debug mode available display breakpoint source first window show position current point buffer operated upon moving cursor appropriate window thus current point may inspected manipulated issuing normal emacs command buffer operated upon breakpoint variable debugger one thus step extension via breakpoints watching action upon text buffer automatically redisplayed breakpoint time like else proceed halbert didl also implemented lispcoded displayoriented debugger share many concept ix experience conclusion year half since inception multics emacs grown toy lisp program multithousand line subsystem encompassing widely diverse multics facility used across country inspired wide variety reaction many way telling state computer marketplace way multics emacs share emacs experience novice experienced user find emacs easy learn use use video terminal rarely revert earlier editing habit people seem become productive proficient emacs le time conventional editor skilled programmer build extension subsystem accomplish sophisticated task library personal emacs extension abound impact emacs upon multics however quite unparalleled experience cognoscenti recognized ostensible similarity emacs standalone wordprocessing system attempted identify emacs integral part multics wordprocessing way sought support dozen hundred emacs user vain attempt approach economy standalone wordprocessors power mainframe realtime editor however nonexistent ability compete economically dedicated minicomputer system wordprocessing environment extensibility allows perform highly specialized sophisticated editing task cf plifortran error diagnostic mode minicomputer system capable people site multics emacs used appear use regardless substantial resource cost redisplaybased realtime video editor innately expensive people deal reality often use emacs even heavilyloaded system many system user directly pay resource consumed make expensive tool attractive emergence multics emacs sensitized multics user advantage integrated video support realtime line editing widespread conversion timesharing user video terminal left printingterminal oriented multics interface far behind emacs let user see video terminal managed intelligently result substantial agitation integrated video support multics terminal support communication area emergence multics emacs also seems put final nail coffin multics editor issue suggestion new printingterminal editor surfaced since emacs came multics emacs responsible renewed interest lisp many people wanting write emacs extension pursued lisp knew programming language rapidly become enamored multics emacs tremendously potent tool creation debugging lisp program taking pain indentation parenthesisbalancing similar mechanizable task power multics emacs tool developing ie extension overstated linebyline functionbyfunction incremental input debugging code facilitated lisp mode active maclisp environment allow code produced debugged second finely tuned reiterated way sculptor polish examines work interactive program development facility multics anything like emacs developing extension power facility directly responsible large number wide variety extension come multics emacs also provided testbed experimentation alternative multics user interface highly customized environment could validly stated user interface multics extend well video terminal need almost completely overhauled effective video terminal utilization mail system case point multics emacs provided path experimentation entire alternative interface multics multics emacs provided subject matter interesting discourse multics development community researcher mit stanford elsewhere working similar related issue addition valuable infusion new radically different idea multics giveandtake investigating similar interface stallman dlwthesis sine schiller development multics emacs fact grew related editor active stateoftheart research topic time choice lisp bold one alone responsible rapid development tremendous function multics emacs clear implementation pli concession elegance modifiability like one assembler language would support larger number user smaller cost none function would developed choice emacs interface extremely fortunate one subsequent observation indicated intuitive smoothness emacs interface large directly responsible ease learning conceptual advantage conventional editor x acknowledgement author deeply indebted large number people assistance encouragement prehistory development multics emacs would like thank william york gary palter richard lamson maintainer developer multics emacs responsible numerous feature fix enhancement infinite work richard stallman developing entire concept emacs offering fervid enthusiastic support first day honeywell information system inc specifically charlie clingen john gintell steve webber foresight allow resource committed project developing honeywell product dan weinreb dave moon nature assistance information encouragement support numerous mention larry johnson jerry stern robert coren maintainersdevelopers multics communication software earl killian eugene ciccarelli bruce edward early guidance continued support vast experience terminal support realtime display software paul schauble arizona contribution fortran mode fortranpli diagnostic scan mode roger roach staff mit information processing center allowing experimentation characteratatime realtime lispcoded editor service system allowing emacs user community grow mit ai lab allowing use system become familiar lee park charles frankston carl hoffman lindsey spratt suzanne krupp margaret minsky gerry sussman large number people sort help encouragement idea along way bibliography multics pli language specification order honeywell information system inc arpanet arpanet protocol handbook network information center bell qed bell telephone lab qed chaos mit ai lablab computer science chaos net ct crisman ed et al ct programmer guide mit chineual weinreb moon lisp machine manual mit didl halbert symbolic debugger c c mit sb thesis dlwthesis weinreb daniel l mit sb thesis zwei editor edoc documentation e editor edoc al echnego greenberg bernard echo negotiation paper multics technical bullet honeywell cambridge mass july gcpaper ancient cacm article became multics lisp gc fenichel yochelson etc itsdoc eastlake et al ai memo xxx user manual lcp greenberg bernard multics maclisp compiler basic hackery unpublished paper honeywell dec lispbook greenberg bernard note programming language lisp mit sipb mpm multics programmer manual ak moonual moon david maclisp reference manual mit multics corbatoclingendaley paper click multics info parc teitelman display programmer apprentice xerox parc qug honeywell qedx user guide preparation crispin supdup protocol network document rfc crispin supdup telnet option network document rfc greenberg b supdupoutput telnet option network document rfc sine anderson owen ted mit sb thesis sine editor swg multics subsystem writer guide order honeywell information system inc schiller schiller jeffrey mit sb thesis tore editor stallman stallman richard emacs customizable extensible display editor ai memo xxx mit ai lab tecdoc online documentation teco mit ai system telnet telnet protocol network document xxxxx tmacs tool multics system programming tool order honeywell information system inc appendix appendix redisplay multics emacs redisplay generated excitement designed hindsight several redisplays optimizes visibly well especially low speed many detailed analysis redisplay algorithm literature instructive valuable consider algorithm multics emacs redisplay detail redisplay intended use worst low speed baud environment take advantage terminal editing feature line character insertion deletion much possible multics yet provide ability synchronize termination output way telling whether output actually progress seems common feature multinode communication processing network multics emacs appears often generate extra redisplay sense screen updating low speed compare stallman wherein emacs described able stop redisplays new input typed inadequacy resulting multics emacs redisplay seems fulfill well goal optimal redisplay low speed basic function data structure terminology relating thereto redisplay given section iv datastructure terminology window management system given section v redisplay invoked interactive driver input character processed call basic editor extension call suppressed already input readahead multics supervisor redisplay given explicit argument return value basic task redisplay twofold update screen content window correctly display content buffer display position cursor point selected window corresponding current point current buffer redisplay data structure time redisplay invoked describes final content screen logically editorlines physically character time last redisplay secondary goal redisplay utilize information transform window display correct content first phase redisplay update window correct content driven iteration array window information alluded section v layout ie number extent content window changed since last redisplay redisplay aware simply considers current content current window including line may window line dash used divide window windowdividing line actually implemented lowestlevel windowdescription array window possible fullwidth nature window full line terminal needed draw incorrect line changed regardless origin current window task stated compute new content update screen reflect end processing displaylines representing new screen content placed correct element screen array next redisplay screen array indexed line window thus change window layout redisplays ignored computation new window content consists two phase implemented one pas logically distinct choice editorlines displayed window must made displaylines representing including printed representation must computed choice editorlines based upon one criterion editorline basic editor current line must appear window entirety possible selected window line window point used equivalently see section v time current line already screen new choice line must made thus threepass algorithm used choose line new window pas fill appropriate window element newscreen array freshlycomputed displaylines representing printed representation extent appropriate buffer tentative window starting point full window worth displaylines computed pas computes tentative windowcontent screen position assigned current editorline encountered remembered pas succeeds current line fact encountered case pass made failure pas mean tentative window content include current line position remembered used final phase entire redisplay position cursor selected window first pas attempt use old choice editorlines handle vast bulk case take editorline starting line current window content determined displayline first element window extent screen array starting point editorline may even exist may deleted basic editor since last redisplay account basic editor replaces linecontents deleted line unique object redisplay recognizes case object found linecontent first editorline old screen second used like pass computes displayline editorline following doublylinked list buffer structure get next editorline fill screen array displaylines second pas invoked first pas failed find current line window content based upon previous window content attempt choose window content place current line center window second pas measure predicts vertical screenextent editorlines going back buffer via doublylinked list one half window worth line passed line find tentatively chosen window starting line tentative window content computed third pas invoked second pas failed find current line occur rare case extremely long line normal redisplay however window redisplay procedure also invoked time demand user command display next window worth text quite common useful time third pas opted request explicitly choose window content given starting point third pas guaranteed find current line computation displaylines made storage timeefficient optimization based upon fact line precisely editorline changed printed representation precisely displaylines comprising representation redisplay data structure changed thus displaylines found need recomputed array oldlinecontents maintained element per screen line end ofthe window update process linecontent editorline display window stored specifically machine level pointer lisp string filecons linecontent corresponding element oldlinecontents displayline computed old window content scanned instance editorline whose new displayline computed machine level comparison pointer deliberate identity line given buffer representation used multics emacs basis technique editorline found displayline computed constructed editorline found check made see still ie identical instance lisp object say pointer equal linecontent saved corresponding element oldlinecontents array old displayline still valid displayline computation generation need performed old displayline used technique relies upon fact editorline modified must given different linecontent lisp storage never reused saved pointer oldlinecontents array used determine unambiguously whether editorline changed since last redisplay old linecontent current line never stored unique object stored instead force full displayline computation current line required optimization described subsequently window new content determined task comparative update begin linear scan displaylines new window content made maintaining pointer performing linear pas old window content parallel new displayline processed scan made remaining portion old window looking displayline describing editorline current new displayline found old window current pointer along old window ctl requested delete appropriate number line terminal screen insertion deletion line available displaylines simply compared updated oneforone via line update procedure described found editorline displayline current pointer old window sought among remaining displaylines new window found ctl asked insert line open new space terminal screen manipulation performed pointer index updated reflect line deleted new blank line screen displayline representing appropriate line screen comparatively updated redisplayed current displayline hand screen reorganized actually place line new line displayed neither line found screen image old new new old current displayline redisplayed respect whatever happens screen point insertion deletion line used open close space window every insertion deletion must performed first bottom window every deletion insertion blank line bottom window must performed subsequently region scrolling feature available hds concept dec terminal provide function directly much pleasing behavior multics emacs result insertion deletion performed old displaylines redisplayed new displaylines via lineupdate procedure two trivial check made identical line pointer comparison corresponding linedatas succeed optimization linecontents employed failing string comparison empty nonexistent line point considered line many blank ie old v new line content blank fact represents put new line old line screen length blank line chosen benefit comparative update algorithm obvious alternative one screen line worth blank le wellsuited availability terminal feature ie clear end line specialcase blank endsoflines linedatas old new displaylines compared characterforcharacter either end find point differ direction example old new line respectively able leap tall building single bound able find tall person within bound found eight character common left able six right bound computation cheap hardware help would great value two line partitioned left common area difference area right common area note presence tall difference area recognized model line change intended reflect common user behavior textediting environment type redisplays eg one updated screen showing system status main memory map etc might optimal textediting environment truly wonderful redisplays achieved model equallength difference area new difference area rewritten place device overstrike thus command uppercase word cursor point immediate visible local effect creating minimal redisplay overstriking device done equallength difference area special case nonequallength difference area insertion deletion character position must performed preserve right common area one common length difference area overwritten nonoverstriking device remaining length deleted old longer inserted new longer zerolength right common area right common area consisting entirely blank using terminal support insertion deletion character old line screen cleared end left common region end indeed least long new difference area nonblank printed nonblank right common point considered part difference area noninsertdeletecharacter terminal note nonblank right common significant terminal equallength differencearea case optimize weak terminal support clearing end line glass teletypes cursor addressing clearing end line delayed long possible rewriting new difference area first allows remains line right new difference area cleared overwriting blank potent optimization made overlength multidisplayline line character inserted deleted middle nonfinal displaylines consider oldnew pair line old seen light cand rejoiced new seen ligh ct rejoiced c multics conventional character sequence continuation line consider redisplay first displayline seen light v seen ligh left common area text seen difference area rest either line right common area yet natural operation model insertion occurred large amount redisplay rewriting rest line occur take action would like able take advantage character insertion thus detect case string search via hardware made suffix substring end string old difference area appears intact new difference area eg ligh vice versa detect deletion case done two linedatas long width screen right common either check succeeds difference area scrolled horizontally using insertdelete character feature terminal sometimes wrong check ie unexpected succeeds prior check amusing although completely correct redisplays result text displayed multics emacs ultimately put screen lineupdate procedure indeed even display completely new text eg file read upon blank screen seen line update line blank left common equal amount leading whitespace indentation line rest line difference area right common thus printing difference area zerorightcommon case extremely important statistically responsible majority character output emacs exclusive echonegotiated input optimization exists weak terminal cleartoendofline take advantage cursor addressing avoiding printing whitespace text output lineupdate procedure case text displayed scanned whitespace significant run whitespace displayed clearing end line done positioning start new nonblank text first important optimization redisplay implemented sense ancestor echo negotiation implemented anyone considering designing redisplay echo negotiation goal optimize insertion trivial character see section vi end current line objective optimization avoid substantial time storage expense full computation redisplay even optimization described tremendously important case implementation thereof involves one instance basic editor awareness redisplay allow redisplay detect case flag reset redisplay time invoked set basic editor time modification made editorline except insertion character end unique editorline current line time last redisplay demand reorganization screen eg redefinition reorganization window set flag well redisplay set variable visible basic editor editorline purpose time redisplay invoked line still current line flag set current point position current line end entire redisplay may performed simply typing ie sending terminal via ctl character current line extended since last redisplay actually presence nontrivial eg tab character line extension physical line overflow must checked well cause optimization used present old value location current point current line maintained redisplay line extension string may identified optimization known quick redisplay subsumes endredisplay positioning cursor updating oldlinecontents array mentioned avoids allowing current line optimized however subsume updating screen array however possible object part object could changed linedata displayline cursor left last redisplay whether quick otherwise always describes current editor line critical correct linedata current line even though quick redisplay use content next redisplay might quick one needed construction new lisp string linedata quick redisplay would exclusive echo negotiation line n character generate n string n quick redisplays creating n order n character storage avoid storage generation linedata current displayline maintained rplacable string see section iv quick redisplays simply update content final action normal nonquick redisplays instate string linedata current displayline already allocating real storage linedata last line state line upon return echonegotiated reading character redisplay invoked update screen image note definition valid circumstance echo negotiation quick redisplay quick redisplay would result fact special flag set suppressing actual output character redisplay echo negotiation output redisplay invoked fact redisplay quick redisplay result internal error occurred note normal redisplay quick redisplay considered even two level echoing hierarchy described section vi one remaining optimization similar last remains flag used deselect quick redisplays set modification performed upon line determined another flag reset redisplay time known basic editor current line line end last redisplay quick redisplay therefore occur case redisplay conclude happened user moved cursor around current line current buffer current line found current selected window entire window update phase redisplay skipped proceeding directly final cursor positioning important optimization much important yet oldlinecontent optimization implemented appendix b extension language multics emacs extension whether part standard editor loadable library userwritten written multics maclisp augmented set lisp macro provided lexicallyincludable program fragment system extension written environment consisting native maclisp function io function basic editor standard extension occasionally redisplay basic editor function provide ability manipulate current point buffer inspect change content line buffer lisp macro provided syntactic sugaring commonly used syntactic cliche create temporary variable assign mark current point perform code free mark well augment basic expressive power maclisp writer extension creates maclisp function via defun standard maclisp function definition facility addition invoking function extension environment function may invoke may lisp function connected key invoked automatically interactive driver selected key struck extension use data string integer buffernames mark see section v basic lisp data type symbol list implemented via con occasionally used fact reasonably expert extension writing accomplished person completely ignorant fundamental lisp data object type fact mark implemented lowerlevel lisp object transparent irrelevant extension writer allowed never reason decompose elegant nature lisp object abstraction extension writer knowledge dealing editorlines displaylines linecontents element basic editor redisplay data structure mentioned preceding section useful class function used extension already capable invoked key interactive driver instance forwardword commonly used editing position cursor past current word emacs user conceptualizes escapef escapef twokey sequence standardly used invoke common command extension writer hand conceptualizes forwardword function moving current buffer point beyond current word using function extension function valuable technique extension programmer always experiment function used invoking normal interactive ie via keystroke way determine detail behavior simple example extension function based upon command normally available keyboard name bracket word place word cursor point angle bracket defun bracketword forwardword insertstring backwardword insertstring empty parenthesis signify context function formal parameter function insertstring effect interactive user typing sequence selfinserting trivial printing character invocation forwardword backwardword position current point prior insertion character string end result running function would user typed escapef invokes forwardword rightanglebracket escapeb invokes backwardword left angle bracket net result buffer screen however intermediate state would visible user typing sequence visible screen extension run final state interactive driver invokes redisplay command character typed function visible inspection invoke redisplay invokes seen invoke common extension environment macro saveexcursion used remember location current point restore execution included code within macro example following extension function place star beginning current line leaf cursor place current line bear mind position remembered via mark relocated automatically buffer text change defun putstaratbeginningofline saveexcursion gotobeginningofline insertstring saveexcursion macro encompassing invocation gotobeginningofline insertstring ensure current point restored function run another similar macro saveexcursionbuffer used restore selection buffer dynamic scope switching buffer save location current point within buffer saveexcursionbuffer subsumes task saving point within buffer another set common macro extension writing dealing mark providing creation thereof freeing end contained code freeing mark important length basic editor mark list limit speed lineopening macro withmark name variable mark assigned execution time mark denote point buffer current time code contained macro begin execution following extension function deletes two word forward current point defun deletetwowordsforward withmark forwardword forwardword wipepointmark deletetwowordsforward invoked mark designating current point buffer created assigned local variable named artifact withmark macro two call forwardword executed presumably moving buffer point saved mark two word forward buffer wipepointmark invoked passing mark argument wipepointmark deletes text current buffer point point designated mark saving incidentally possible user recovery end execution deletetwowordsforward mark created macro freed another class emacs extension environment macro used supplement reimplement feature maclisp thought inadequate either learning purpose illtuned extension environment example extension documentation teach use macro opposed native maclisp cond fundamental conditional construct much simpler straightforward suffices almost case similar conditional construct almost language lisp native maclisp cond much general powerful power often needed seems presented stumbling block learning lisp another macro class doforever exit form stopdoing native maclisp two form one like fortran powerful multivariable generalization often extension writer want iterate integer variable buffer line character iteration variable thus global editor state need specify deal variable almost never needed undesirable doforever illustrated following extension function either find first blank line buffer complains none defun findfirstblankline gotobeginningofbuffer doforever lineisblank stopdoing lastlinep displayerror blank line nextline form stopdoing executed cause control exit doforever form function lastlinep suffix p traditional lisp nomenclature predicate test current point last line buffer function displayerror cause error message printed bottom screen via primitive intrinsic redisplay lisp io may used extension environment nonlocal transfer control whole function findfirstblankline reason stopdoing needed call displayerror experience extension language shown meaning transparent underlying lisp invisible emphasis lisp shift data world formalism organizing function invocation copyright bernard greenberg home change multicians history feature bibliography site chronology story glossary paper humor document source link
268,Lobsters,emacs,Emacs editor,Mastering Emacs: Effective Editing I: Movement,https://www.masteringemacs.org/article/effective-editing-movement,mastering emacs effective editing movement,effective editing movement overview command argument universal argument numeric argument negative argument basic movement fundamental movement key extended movement movement word definition word movement paragraph sentence move beginningend buffer reading article mark command advanced movement movement sexpression moving list moving forward backward list isearch back indentation register bookmark mark article mark command mark visible repositioning point supercharged ido version imenu goal column subword mode smart scan smartscan github goto line next prev error beginning end defun conclusion,effective editing movement mickey petersen master movement editing emacs effectively conquered two biggest productivity booster available emacs unrivaled movement editing capability aside enabling ido mode thing emacs poundforpound give bigger productivity boostoverviewemacs grown organically might say uncontrollably like kudzu year history time honed sharpened tool effective text source code editing met lot ide user use mouse edit text access menu option even though realize ineffective old habit die hard ide advanced text editing capability poorlyemulated brief mode wonder people botheredthe best way maximize productivity eliminate common bottleneck like learning touch type course mastering emacs editing text effectively take learn many specialized tool available make life easier using emacs long time still learn new way thing faster ultimately tenacity persistence pay long runincluded series code snippet suggestion rebinding key tip trick picked year may want use fine try highlight importance switching changing something give idea much improvement iscommand argumentsuniversal argumentthis concept deserves mention invoke extended typically complex version command default numeric argument meaning essentially though typed cu universal argument also known prefix argument multiplicative invoked repeatedlynumeric argumentthe numeric argument called let pas numeric constant command number used depends entirely command use cp move n line command nothing depends command would expectbecause numeric argument useful bound multitude key cu num duplicating command multiple time move finger execute command us c cm run command forwardword bound mf time type mfsimple thing like duplicate keybindings cut fingerstraining typing increase likelihood people actually using numeric argument first place odd hard reach key used le empirically difficult conclusion reachnegative argumentwhen used numeric argument negative argument inverts operation command would otherwise carry outlike numeric argument negative argument bound multiple key minimize unnecessary finger movement bound meta followed dash c cm negative argument useful let operate word line phrase finished typing want capitalize last word typed type mc command inverse unexpected thing particularly thirdparty command almost key talking series work negative argumentbasic movementif experienced emacs user muscle memory start somewhere beginning best placeemacs support navigation key arrow key pg updown better learn real emacs key every time take hand home row use navigation key wasting time time add considering often move around code text good emacs hacker constantly move edits rapid succession folly stop start stop start every time navigate bufferfundamental movement keysthe four fundamental movement key cn next logical line cp previous logical line cf move forward character cb move backward characteri recommend adding emacs make cn insert newlines point end buffer useful mean reach return key add newlines setq nextlineaddnewlines move beginning end line command bear mentioning well also crucial part movement move beginning line type ca move end type ceextended movementit rarely efficient use fundamental movement key moving point character stage make judgment call decide fastest way getting going ismovement wordthe keybindings movement word emacs almost movement character instead prefix c move forward one word use mf move backward one word use mbmovement word make bulk intraline movement pay understand work way understand must know word isdefinition wordwhat word governed syntax table altogether fascinating topic deserves article point keeping simple syntax table governs emacs treat almost every character unicode well role function like forwardword runfor thing particularly source code word almost always alphanumeric possibly character like underscore may seem counterintuitive fluid definition word think make perfect sense consider word writing text may writing code definition say variable may also differ languagesmovement paragraph sentencemovement emacs limited character word frequently writing text forwardbackwardparagraph forwardbackwardsentence come handy move sentence use handy keybinds paragraph key bound lessthanhelpful cdownup navigation keyswhat considered paragraph governed variable like paragraphstart paragraphseparate hold true sentence us sentenceend function variable determine sentence boundary boundary usually full stop followed one two whitespacesyou also scroll page mean deserves article cv scroll mv scroll use word scroll concept page emacs editor doubt anybody care refer page something often catch doingthe command cmv also bear mention scroll window depends many split window open frame key useful reading documentation another window frame want scroll without hassle switching window incidentally one command scroll window one mentioned scroll backwards use negative argument firstmove beginningend bufferuse move beginning buffer move end buffer jump command useful leave mark originating position meaning jump back came cu cspc recommend reading article mark command show make mark command usefuladvanced movementadvanced movement command meant augment basic command described make advanced require bit forethought use functionality contextaware movement key described make emacs stand editor important work command daily workpattern greatly speed movement thus editingmovement sexpressionmoving sexpression little misleading unless edit lisp case name apt really mean movement balanced expression balanced expression like moving word subject syntax table common example quote bracket movement sexpression similar movement character word prefix cm move forward cmf backward cmbmoving sexpression take bit getting used quickly find effective mean navigating source code word character lot thing development deal quoted string expression parenthesis even regular text code ignoring quote parenthesis moving sexp still useful everyday navigation forwardbackwardsexp treat larger swath character part one unit basically boil intelligent grouping letter together meaningful chunk move around use replace movement word learn properly navigate sexp thank promise reallymoving listslike command move past balanced expression emacs also let move one list command obviously meant lisplikes serve purpose well languagesto move list type cmd move list type cmu move emacs pick nearest group balanced parenthesis move wish move say neighboring pair must get scan error position emacs determine carry trying domoving forward backward listsmoving forward backward nichelevel command indeed unless write lot lisp work much manner moving list although move forward backward neighboring pair parenthesis share depthisearchlearn move around buffer isearch c cr cm regexpaware isearch incremental search engine emacs look type myriad feature type c followed ch ch see important one isearch mode cw add word point yank text cr reverse search direction mc toggle case sensitivity folding mn p go history past searchesisearch superfast way get around code often looking word source code would recommend everuseful isearchforwardword m w fuzzyfind match code cleverly ignores thing like punctuation look whole word instead superduper usefuloh one tip type c c repeat last searched queryback indentationif ever typed ca mf something effect move point past whitespace line good news better way emacs command backtoindentation move point beginning line move forward past indentation command bound easytoreach key mmregisters bookmarksyou use emacs register bookmark functionality store location point care transient storage get lost emacs exit use register desire something permanent perhaps bookmark want bookmark register introduce myriad feature introduce later article command affect movement cx r spc store point register cx r j jump point stored registerthe bookmark functionality emacs flexible let much simply storing retrieving point location use bookmark functionality store retrieve list bookmark type cx r save named bookmark type cx r b jump named bookmark cx r l list bookmarksthe markthe mark command emacs used define one part region point also used form transient beacon recall point functionality useful several movement command emacs set mark like moving beginning end buffer saymy article mark command tell optimize use mark command use transient mark mode sometimes tmm get way using mark transient beacon boundary regionthe command interest far movement concerned cx cx toggle point mark buffer yank text exchange point mark jump beginning end yanked textanother useful command command jump head mark ring subsequent call cycle mark buffer mark ring command cu cspc bear mention aforementioned article suggests binding useful command jumping mark useful explicitly setting useful tmm get way command set mark cspc note universal argument also activate region annoying article custom code set mark activate regionthe mark invisible default use cool module called visiblemarkel make well mark visiblerepositioning pointyou move point top center bottom default visible window without actually scrolling command sometimes useful want reach text one previous three area although configure variable recenterpositions change command bound mr make easy reach thus useimenu useful extensible tool emacs let jump key area buffer usually function definition source code unfortunately imenu marred somewhat default key binding mx imenu invoke making le known another negative us standard completion mechanism terrible quickly navigating feel use supercharged ido version imenu bind mi key globalsetkey kbd mi idogotosymbol tag ancient technology us external tool called ctags etags index function signature source file one big flat file emacs excellent support tag lack fuzziness ido provides unless write elisp tag never meant modern objectoriented language struggle hierarchical nature code another big problem tag unbearably slow large codebases making unusable singlethreaded emacsthe two breadandbutter tag command find stuff bound use jump back also emacsstyle apropos command called mx tagsapropos wildcard searchif use code use c find file tag file like poor man idestyle project filei remember wrote code simply snarfed somewhere modified require etags defun idofindtag find tag using ido interactive tagscompletiontable let tagnames mapc lambda x unless integerp x push x tagnames tagscompletiontable findtag idocompletingread tag tagnames defun idofindfileintagfiles interactive saveexcursion let enablerecursiveminibuffers visittagstablebuffer findfile expandfilename idocompletingread project file tagstablefiles nil globalsetkey remap findtag idofindtag globalsetkey kbd c idofindfileintagfiles goal columnif find editing multiple line row perhaps macro may want change default column point move change line naturally possible functionality called goal column bound cx cn cu cx cn disable subword modeediting code withcamelcasewritinglikethis frustrating part emacs treat camelcased identifier single word good news though emacs something called subwordmode called csubwordmode earlier emacsen rewires movement edit command work capitalizedwordssmart scana long time ago used ide feature let quickly search whatever identifier point decided wanted something like emacs wrote code snippet see perfectly possible isearch use code avoids hassle fidgeting isearch get term point search fieldin code command bound mp mnsmart scan main advantage isearch need move point whatever identifier wish search press mn find next match buffer main use go looking identifier wish search first probably better using isearch main advantage already writing code stepping debugger smart scan beat isearchsmart scan also clever enough ignore comment string containing identifier looking foryou download smartscan githubgoto lineemacs course support jumping specific line bound two command mg g everybody seems use easiertotype mg mg goto command smart enough default whatever number point command invoked come handy combine command cu mg mg executes gotoline previous buffer buffer came use case switch buffer say shell output window want jump line buffer came fromone important thing note using gotoline buffer narrowed goto line command still count first line buffer rather first line narrowed buffernext prev errorif use compile mode compile mode also used thing like grep occur emacs free gain ability jump nextprev error compile buffer invoking mg mn mg mp next previous error respectivelybeginning end defundespite cryptic lisp name function function beginningofdefun endofdefun work great programming mode emacs jumping beginning duh end functionclass definition point contained inthe command bound cma cme making easy reach use definitely make editing code easierconclusionemacs staggering array command make moving around buffer much much easier course easier said done learn make part daytoday life start slow incorporate one command time long speeding text code
269,Lobsters,emacs,Emacs editor,The Lemacs/FSFmacs schism (2000),https://www.jwz.org/doc/lemacs.html,lemacsfsfmacs schism,jamie zawinski jwz jwzorg open source xemacs xemacs xemacs versus gnu emacs emacs timeline thalidomidelucid bermudaypacad wendyfateuunet leluhutfi infernolucid molegnuaimitedu molegnuaimitedu amilcoil molegnuaimitedu amilcoil amilcoil hugolucid ireqrobothydroqcca sergeimitreorg wintermutencsauiucedu thalidomidelucidcom molegnuaimitedu thalidomidelucidcom molegnuaimitedu thalidomidelucidcom molegnuaimitedu thalidomidelucidcom molegnuaimitedu thalidomidelucidcom molegnuaimitedu molegnuaimitedu infernolucidcom pdxgateuucp atalantaadocxeroxcom thymussynaptics thalidomidelucidcom thymussynaptics thalidomidelucidcom hawnewswatsonibmcom lokeiesdaucdk thymussynaptics motmotdocicacuk atalantaadocxeroxcom thalidomidelucidcom hoshihipatrcojp thymussynaptics thymussynaptics atalantaadocxeroxcom thalidomidelucidcom thymussynaptics amadeusireqrobothydroqcca thymussynaptics thalidomidelucidcom lokeiesdaucdk thalidomidelucidcom atalantaadocxeroxcom totorocsoberlinedu nealctdcomsatcom anthemnlmnihgov kingstoncsuclaedu thalidomidelucidcom thalidomidelucidcom thalidomidelucidcom molegnuaimitedu bullwinkleatcllmitedu wlbriipogtegsccom baloogsfcnasagov infernolucidcom molegnuaimitedu,lemacsfsfmacs schism jamie zawinski jwz jwzorg working lucid inc newest product energize integrated development environment c c unix design development environment involved tight integration various tool compiler linkers debugger graphers editor course needed powerful editor tie whole thing together obvious u one editor would emacs time current version gnu emacs fsf emacs another version gnu emacs called epoch developed alan carroll later ncsa epoch set patch emacs gave much better gui support emacs much tty program gui support crudely grafted afterthought last year emacs due released real soon expected integrate various feature epoch cleaner way epoch maintainer saw epoch interim measure awaiting release emacs lucid nt want tie emacs epoch code base considered obsolete maintainer wanted use emacs product idea product would operate offtheshelf version emacs people would already preinstalled system anyway way energize would make use extent tool already already using problem emacs nt done yet decided could help solve problem providing money resource get emacs finished even though energize proprietary commercial product work emacs gcc gdb released gpl even assigned copyright work back fsf proprietary interest emacs per se tool wanted use wanted work well best achieved making modification freely available possible one earliest earliest example commercial product built significant extent open source software well attempt help fsf complete emacs project pretty much disaster reached point could nt wait longer needed ship product customer product needed editor bundled work gnu emacs called lucid emacs released world incident become famous one significant fork free software code base lucid went business came netscape passed torch maintenance lucid emacs chuck thompson ncsa ben wing sun renamed lucid emacs xemacs day xemacs popular fsfmacs still provides feature design many people find superior fsf version attribute lucid emacs success two thing primarily first focus user interface attempt make emacs good citizen modern gui desktop make easy new user pick emacs gui editor second ran lucid emacs project much open inclusive way rms ran project willing eager delegate significant critical piece project hacker shown knew rms basically never willing anybody thing helped lucid emacs success probably le important gave user wanted first people anticipating emacs year stopped dragging foot finished got u lot user front however xemacs current popularity ca nt attributed since anyway lucid emacs technically superior many way u mindshare many good developer preferred working lucid emacs fsf emacs would nice technical superiority mattered realistically factor probably important one far number user concerned following message lucid emacs mailing list comprise bulk entirety public discussion lucid fsf camp split happened merger never current xemacs maintainer much pusillanimous summary history xemacs versus gnu emacs page jwz dramatis persona richard stallman creator emacs founder fsf jamie zawinski hacking lucid emacs managed project near end tenure dozen people working lucid emacs regular basis reviewed tested code emailed well stewarding mailing list day public cv server richard gabriel founder lucid inc bos longtime friend richard stallman richard mlynarik prolific contributor lucid emacs almost work merging change made fsf version back lucid version largest contributor lucid emacs nt actually getting paid work marc andreessen probably heard guy probably nt know used one maintainer epoch ncsa joseph arceneaux fellow initially employed fsf lucid hack emacs started working jim blandy employed fsf hack version emacs arceneaux kyle jones author vm one emacs mail reader dave gillespie author calc scientific calculator application run inside emacs calc hit harder lucid emacs compatibility problem emacs package emacs timeline also might helpful messageid thalidomidelucid date fri jun pdt jamie zawinski jwz heavensgatelucidcom helplucidemacs lucidcom buglucidemacs lucidcom subject lucid gnu emacs released labreastanfordedu pubgnulucid new rearranged lisp directory handful file toplevel everything moved subdirectory speed automatic generation loadpath since stat fewer file input display character set variable ctlarrow something nonnil nont highbit character displayed current font instead octal load xcomposeel sundeclike compose processing see comment file random bug fix installation problem fix portability ifdefs prebuilt binary compiled optimization old nt use configure yet olit menubar still nt work next release sure enjoy jamie messageid bermudaypacad dansmith autodeskcom daniel smith date fri jun pdt ebubra ebuericssonse bertil askelid csuiucedu epoch ebuericssonse cc rms aimitedu helplucidemacs lucidcom subject epoch emacs merger curious people think likelyhood emacs epoch merging single release nt called emacs would nice new lucidemacs feature get rolled getting confusing emacs epoch emacs lucid emacs based floating around time instance make frequent use dup screen epoch something else lucid emacs nt used emacs wondering yet another thing gather really nt widely available yet anyways think competition good thing also hoping nt start getting hand going three different version emacs gnu license perspective relatively new user emacs year year vi keep difference straight mind way binding key everything look etc however explaining something emacs version someone new see contortion face etc starting look like history rock band like happened year band yes would worthwhile people work towards common gnu emacs goal richard stallman think tossing going three gnuish emacii fine keep straight personally hope nt splintering perhaps emacs summit meeting anyways user perspective wondering going nt necessarily know history behind keep flame informative rather outright hostile daniel messageid wendyfateuunet kyle wendyfateuunet date fri jun dansmith autodeskcom daniel smith cc csuiucedu epoch ebuericssonse ebubra ebuericssonse bertil askelid helplucidemacs lucidcom rms aimitedu subject epoch emacs merger would worthwhile people work towards common gnu emacs goal nt think anything think would worthwhile consider pulling emacs apart component much o developer pulled apart operating system good idea embodied emacs think could improved distilling monobloc horribly mix metaphor nt place discussion dansmith autodeskcom daniel smith would nice new lucidemacs feature get rolled getting confusing emacs epoch emacs lucid emacs based floating around time instance make frequent use dup screen epoch something else lucid emacs nt used emacs wondering yet another thing many incompatibility really present yet emacs epoch identical except epoch extension emacs nt yet current incompatibility include exactly difference epoch lucid x command related interface difference general emacs lucid emacs lucid folk think good job handling latter problem former problem could temporarily solved epoch emulator package lucid idea tossed around helplucidemacs vice versa gather really nt widely available yet nt available yet basically marc marc andreessen epoch development team university illinois urbanachampaign marca ncsauiucedu messageid leluhutfi date sat jun rms leluhutfi dansmith autodeskcom cc ebubra ebuericssonse epoch csuiucedu helplucidemacs lucidcom subject epoch emacs merger long delay releasing emacs fsf fault sense therefore mine regrettable multiple version ca nt blame people filling gap fsf left one goal copyleft allow people one central maintainer lapse hold back rest community however people wrote lucid version nt try make change usable u charged ahead without discussing design main emacs maintainer reimplemented thing already done asked work making part usable u said result much code lucid version ever appear fsf version feature worth need reimplemented like happen sooner one way volunteer work emacs already feature epoch couple rock glass house would really useful someone familiar leamcs epoch could give everyone idea major difference much detail place major abstraction differ instace lemacs face epoch style look fairly similar converting would irritating suicideinducing hav nt looked screen creation etc lemacs detail seen treat screen parallel window epoch treat parallel buffer currentscreen v selectedscreen etc difference go deep might painful b would really good would simulator epoch lemacs le interested getting existing epoch code giving code future path going combined date tvtwm soon honest rjc messageid infernolucid date mon jun pdt rpg lucidcom richard p gabriel helplucidemacs lucidcom epoch csuiucedu cc rms gnuaimitedu dansmith autodeskcom ebubra ebuericssonse subject epoch emacs merger read rms message sadness past two year tried hard figure way work fsf emacs lot time thought working together apparently failed wish read effort read postscript note outline lucid involvement sortof history event still want work fsf contribution become part fsf emacs eager hear suggestion proceed rpg p rms letter paint unflattering unfair picture lucid involvement emacs particular motif effort hacker free software foundation remarkable organization many year supported personally still company support goal product support term time effort dollar rms say however people wrote lucid version nt try make change usable u charged ahead without discussing design main emacs maintainer reimplemented thing already done asked work making part usable u said lucid remember event although may difference without distinction recount event recall let reader supply characterization lucid set course year ago develop cc programming environment using emacs key component needed small number specific thing run x using multiple window support multiple font least little support embedded glyph icon support attaching active region contiguous block character support hypertextlike facility support menubars support readonly region text goal respect fsf anything including paying money get change official fsf source sacrifice quality schedule lengthy therefore apparently safe first two year prototyped functionality needed xwidgetbased text editor epoch summer emacs appeared right around corner entered discussion person fsf led believe official emacs coder joe arceneaux appeared goal fsf line proposed pay consulting fee speed emacs development plus get change agreed wrote contract volunteered manpower help contract period started october last approximately month pay approximately paid milestone appeared deliver addition provided office space sparcstation lucid conclusion period appeared joe arceneaux longer official emacs coder spring became apparent effort going badly emacs text editor slow full bug people lucid dared use arceneaux moreover emacs performed hideously new area outlined behavior especially bad respect active region even worse seatofthepants prototype epoch nevertheless persevered rearranged emacs team priority work closely arceneaux confident arrangement could work safe put best hacker arceneaux summer last year became aware rms hiredappointed jim blandy official emacs person time one hacker went cambridge talk rms proceed appeared reached reasonable working arrangement time went determined fsf code emacs unwieldy bugridden convoluted work started rewriting part addition listening design idea rms policy require u provide source diffs explain every changed line effort towards release mounting rewriting massive amount system source diffs nt make sense rms blandy unwilling unable work higher level traveled cambridge work thing team numerous phone conversation rms one area completely rewritten implementation active region various attempt made discus design rms including hour telephone conversation one hacker completely unwilling consider another point view first apparently nt understand difference attaching active region text attaching font text finally wedded design putting font text wanted u implement design font active region support hacker wanted rms cooperate extent would first implement version support feature see well worked would nt even agree worth noting original fsf version spite rather elaborate treebalancing code hackery precomputing display characteristic emacs redisplay spent time active region code much simpler version spends significantly le redisplay time corresponding code even buffer thousand active region nt say original design could nt made work several manmonths effort gone original version took le manmonths implement debug code shipped version finally version approximately number line original general us le memory early last fall spending approximately arceneaux let contract expire put leased kb digital line x terminal arceneaux apartment san francisco mile away lucid could continue work emacs fsf lucid support learned last summer fsf established emacs steering committee one organization put even informed existence came conclusion fsf interest working u stopped trying punch line rms statement true would nt thing way wanted nt charge ahead without talking fsf reimplement thing already done thing reimplemented completely broken true end work unusable fsf seems u willingness use anything else rms concludes result much code lucid version ever appear fsf version feature worth need reimplemented like happen sooner one way volunteer work trouble imagining anyone could worked may failed attempt history trying succeeded area addition working emacs contributing cygnus initial implementation new feature gdb malloc support multiple heap code save internal gdb symbol table state given executable file various c debugging feature well paying feature officially incorporated gdb past year dedicated approximately personyear spread people producing new emacs manual addition spent lot time trying figure work amicably fsf also supported fsf rms selecting several fsf component product endorsement quality usefulness since lucid regularly contributed code occasionally money fsf lucid paid support fsf product last year contributed hackeryears improve fsf product personally member lpf related fsf related rms travel debating various people rms name actively supported rms various private way could nt figure work fsf rms even though year hundred thousand dollar spend manyears volunteer would done differently offer free emacs anyone want exactly condition fsf providing commercial support paying customer improvement arising support become part free version well course well answering question incorporating change received user net continue develop rewrite redisplay code probably work internationalize emacs also using scarce documentation resource emacs manual copyright still held jointly rms however unlike fsf also listen idea people one thing someone implement improved version feature nt arrogant inflexible enough refuse consider using hacker worked version concerned good job sake emacs sake company ego time ceased expecting work closely fsf emacs would still like far tell reason fsf wo nt use work nt interested working u rather want u work precisely tell u way say schedule perhaps assume design implementation substandard far know never really looked done messageid molegnuaimitedu date tue jun rms gnuaimitedu richard stallman rpg lucidcom cc helplucidemacs suncom epoch csuiucedu dansmith autodeskcom ebubra ebuericssonse subject epoch emacs merger summer thought emacs would come soon one reason nt lucid hired away maintainer put work adding new feature wanted instead getting program shape release one discussed would affect maintenance emacs fact nt even told couple week going feature lucid wanted implement useful time wanted get emacs door delay release additional feature could nt change plan make best suggested design one oriented toward editing formatted text feature wanted emacs eventually find someone else work getting emacs ready release one person available jim blandy careful methodical fast nt worked large program took get swing thing also unhappy leave previous project desktop system fair cause delay well compounded since lucid sometimes tried cooperate u attempt worked communication failure example last summer gabriel found emacs steering committee one lucid invited join apparently nt invited even told nt recall ever hearing committee think something got garbled transmission set committee looked would nt thought lucid told stopped employing arceneaux nt know continuing work version emacs thought nt anything last summer told someone would work project needed emacs updating manual think september asked progress told dropped project higher priority work took time later learned lucid people arceneaux working version emacs december gabriel area told wanted lucid programming work emacs fit fsf emacs release told reach programmer glad discover source additional hand work called wanting discus design told already chosen design done much implementation would nt consider redoing deadline finish following path set tried talk jim blandy find working emacs release sure knew person known working could told speak people offer fsf change program fsf maintains fsf maintainer always consider line line part maintainer task maintainer might reject change ask rewriting also part maintainer task mainly nt even get stage problem became visible general design level conversation found problem slowness interval processing called arceneaux looked code found localized bug balancing binary tree created interval front back would balancing leaving tree maximally unbalanced effect rather roundabout linear search luck would lucid application usually created interval front back always saw worst possible behavior anyway bug simple found took day lucid programmer seen slowness decided basic approach fault decided rewrite interval code scratch said nt need support editing large file formatted text usage small number interval enough wrote faster straightforward linear search willing offer fsf code nt useful matter cleanly written linear search becomes disaster large file lot interval explained binary tree approach inherently slow said late code worked purpose deadline could nt consider redoing anything worked well enough need mean charging ahead told problem saw choosing start scratch could told problem could made solid binary tree implementation nt tell since giving joe arceneaux supervision expect provide interval implementation emacs nt want delay feature nt think gabriel wanted happen think good intention nt explain troop thought supposed implement certain set feature particular requirement discus design hope lucid would like rectify situation entirely hand messageid molegnuaimitedu date tue jun rms gnuaimitedu richard stallman rpg lucidcom cc helplucidemacs suncom epoch csuiucedu dansmith autodeskcom ebubra ebuericssonse subject epoch emacs merger past year dedicated approximately personyear spread people producing new emacs manual might useful thing nt tell sooner last summer put touch someone lucid going work updating emacs manual documenting new feature already implemented understood mean later told drop project message today first heard whole new manual free read sorry feel hard figure work sometimes hard work sometimes stubborn manage work lot people emacs full idea contributed others contributed code well ca nt expect bat odds wo nt like every single idea suggest let choose subset suggestion glad accept make choose none likely choose none nt think meant nt include plan late effect good idea lucid already accepted one asked joe arceneaux implement temporary highlighting interval part text addition permanent interval part hearing lucid going use made realize important ca nt use idea easy way using lucid code code nt designed fit permanent interval support temporary interval good idea nt make lack permanent interval good idea would like people adapt lucid code combine idea idea want use would like work first step tell sort thing want work start work second step discus design commit particular design consider various alternative work good combination idea messageid amilcoil date tue jun idt danny amilcoil danny bardov rms gnuaimitedu richard stallman cc dansmith autodeskcom ebubra ebuericssonse epoch csuiucedu helplucidemacs suncom rpg lucidcom subject epoch emacs merger since giving joe arceneaux supervision expect provide interval implementation emacs nt want delay feature understand want feature continue use lucidemacs emacs wait future emacs might kind merge lucidemacs leading one fsf emacs danny messageid molegnuaimitedu date tue jun rms gnuaimitedu richard stallman danny amilcoil cc dansmith autodeskcom ebubra ebuericssonse epoch csuiucedu helplucidemacs suncom rpg lucidcom subject epoch emacs merger since giving joe arceneaux supervision expect provide interval implementation emacs nt want delay feature understand want feature continue use lucidemacs emacs wait future emacs might kind merge lucidemacs leading one fsf emacs using phrase feature implies one set feature discussed really true though overlap exampe emacs support including formatting file edit also support temporary highlighting interval lucid emacs support latter course version nt support either messageid amilcoil date tue jun idt danny amilcoil danny bardov rpg lucidcom richard p gabriel cc dansmith autodeskcom ebubra ebuericssonse epoch csuiucedu helplucidemacs suncom rms gnuaimitedu subject epoch emacs merger infernolucid read full answer rms believe would really like hear fsf answer let user community judge danny messageid amilcoil date tue jun idt danny amilcoil danny bardov rms gnuaimitedu richard stallman cc danny amilcoil dansmith autodeskcom ebubra ebuericssonse epoch csuiucedu helplucidemacs suncom rpg lucidcom subject epoch emacs merger using phrase feature implies one set feature discussed really true though overlap since emacs released yet way know new feature see lucidemacs new mean emacs emacs lucid feature news file emacs happy compare lucid news file danny messageid hugolucid date tue jun pdt jla heavensgatesuncom joseph arceneaux rms gnuaimitedu cc rpg lucidcom helplucidemacs suncom epoch csuiucedu dansmith autodeskcom ebubra ebuericssonse subject epoch emacs merger person somewhat middle extended phlegm strike account history contain certain degree inaccuracy may would like urge party involved forget make effort join force lucid talented hacker done good thing emacs fact version already us code boss work politics community benefit joseph arceneaux messageid ireqrobothydroqcca date tue jun edt martin boyer gamin ireqrobothydroqcca jla aimitedu cc dansmith autodeskcom ebubra ebuericssonse epoch csuiucedu helplucidemacs suncom rms gnuaimitedu rpg lucidcom subject epoch emacs merger would like urge party involved forget make effort join force heartily agree mere user outside starting look like sunat v osf battle one true unix gnu emacs became de facto standard feature nothing else widely available right seems lucid emacs two quality gnu emacs ala nt available please think community delay would introduced confusion let face lucid going drop version since sale depend hand fsf satisfied going redo coding implement feature consider suggestion let work towards making lucid emacs long awaited official emacs learn integrate fsf long term plan emacs thanks kyle jones pair newsgroups bidirectionally gatewayed buglucidemacs helplucidemacs newsgroups altlucidemacsbug altlucidemacshelp expect many want unsubscribe mailing list read message newsgroup form instead however would advise wait week unsubscribing know gateway functioning properly wanted newsgroups gnulucidemacsbug gnulucidemacshelp fsf folk willing allow creation group fact would appear unwilling even allow u announce existence version emacs newsgroups jamie messageid sergeimitreorg date mon jul edt bcotton sergeimitreorg robert cotton hansmuller engsuncom han muller cc bcotton sergeimitreorg helplucidemacs suncom subject switched epoch lucid emacs han muller writes considering making committment epoch lucid emacs curious decided make switch beyond fact hilit package make two comparable thing lucid emacs prefer epoch thought subject would appreciated han made switch emacs epoch back biggest reason multiple screen one process ability edit multiple buffer text one display important one consideration making switch region hilighting via mouse drag people started writing code epoch feature like displaying filename point another screen man page another screen hypertext like see also section nifty infomode became part emacs epoch gave xsupport seemed intuitive environment one source code hilighting came hooked live without one thing kept moving lemacs sooner reason wanted stop using epoch intermittent bug like spontaneous quitting killing random xterms quit overall level unstableness unusable annoying lemacs probably similar level annoyance also nice feature like menubar alot using bam package forgot using epoch gave functionality menu bar lemacs hilighting package several time faster lemacs epoch although different package hilit v brightlight get functionality cost interface x lemacs much cleaner get box functionality one would expect xbased editor would take several package epoch thing like double triple click word line hilighting menubar although elisp programmer overall interface lemacs much cleaner epoch make sorry guy epoch look like hack hope help bob messageid wintermutencsauiucedu date tue jul marcus ncsauiucedu marc andreessen aux acct bcotton sergeimitreorg cc hansmuller engsuncom bcotton sergeimitreorg helplucidemacs suncom subject switched epoch lucid emacs made switch emacs epoch back reason wanted stop using epoch intermittent bug like spontaneous quitting killing random xterms quit overall level unstableness unusable annoying umm folk epoch quite quite bit stable spontaneous quitting killing random xterms et al certainly ought fixed please let know thanks marc marc epoch middle name andreessen marca ncsauiucedu people keep mind successor emacs come lucid gnu emacs still ca nt say exactly public release going start testing number site gnu emacs support broad spectrum machine like emacs ensuring purpose testing please nt volunteer enough pretesters people offer dealing message slow thing make sure indeed working reliably various different system public beta test release emacs support adding property range text using switch font future epoch people help merge support variablewidth font meanwhile almost finished updating emacs lisp manual next edition describe emacs announcement know edition available people keep mind successor emacs come lucid gnu emacs still ca nt say exactly public release going start testing number site free software great thing freedom distribution use freedom price great thing company recognize value giving thing away mechanism goodwill paying back community serf mechanism show potential customer quality style software expect company four year ago embarked development project one whose central portion would emacs emacs enhanced capability active region property text font color menubars popup menu true x integration free software foundation time beginning work emacs lucid paid author thencurrent emacs prototype help u get ready well poorer month older closer goal started assigned best developer work emacs last summer released world run bunch platform actively maintained centerpiece user interface commercial product thousand people use working volunteer around world best part operate like fsf free source code updated manual incorporate reasonable change way fsf difference emacs welltested user love another difference developer nt need handout keep maintaining emacs good business concept free software nt belong anyone dream value free software idea compelling others pick standard improve others take time thing champion cause community get fresh blood applied waited year year emacs idea free software good one live need let go free software idea good nt smother claiming free software foundation nt concept free software nt exclusive right work emacs wait private test wait beta test wait general release wait wait wait ftp pubgnulucid labreastanfordedu today use afternoon help u move emacs emacs rpg two year ago hired fsf staff person charged getting emacs door soon feature got two week notice leaving set work implementing new feature planned emacs try get emacs back track took new maintainer come speed result long delay emacs would come two year ago later assigned programmer work another version emacs without telling found month later luck nt tell nt ask discus design implemented whatever reason nt cooperative way working well finally dealt problem caused two year ago happens asking people make mind gnu emacs dead quickly chance crack shell overall conduct leaf something desired would happy see someone capable take work emacs fsf might happy see lucid approached openly good spirit lucid implement thing good feature clunky asked programmer work think would better people soon able compare design analogous feature form opinion shown bad spirit want emacs worthy hand think possibility finished updating emacs lisp manual next three week update user manual went back found mail exchange lucid involement emacs fsf still think tried hard reasonable organization work fsf still saddened puzzled peculiar memory reproduced exchange people see judge relative behavior emacs used widely yet hear anything embarassingly high praise want help community think could nt let go enough allow u help thing think need done make better unfortunately continue duplicate effort everyone love race suppose rpg inclusion earlier message elided earlier mention public contributed delay emacs polite yes really sometimes took blame sake amity using mailing list actively urge people work u feeling late seek amity tell public match actually think could nt let go enough allow u help handy cheap shot always easy make accusation one ever disprove point gave work emacs people within fsf given maintenance program wrote people outside fsf raising fund give away maintenance gcc someone outside fsf politely kept quiet last year role emacs delay even criticising publicly hope achieving cooperation would nt done thing sort person whose ego would never let go project hope find someone suitable hand emacs maintenance someone competent cooperative upright nt think found someone yet would capable enough sometimes willing listen every step way given cooperation lip service take special gall present earlier politeness indication misremembering happened believe cooperating people approach trying cooperate one point hoped person point action say user going ask stop cooperating lucid since lucid emacs free software wrong cooperate appeal gnu emacs continue working fsf gnu emacs listen lucid asks stop always fun talking richard listening skill many u could stand learn try learn think problem shall try experiment ready eager try make work one time got million emacs already shall cc conversation design cooperative effort list tell jwz take start rpg shall try experiment ready eager try make work one time got million emacs already understanding technically hard merge two version lucid emacs set use require x toolkit version use one think expensive require toolkit especially since already got feature want without toolkit principle like idea supporting mode operation toolkit without programmer lucid told last summer using toolkit required farreaching change many part emacs including making cg fail interrupt running program something worked hard couple year ago make work right sound impractical support mode least unless something done change requirement toolkit nt blame lucid anyone made mistake designed x toolkits idea mainly support sun thread system thread would possible use separate thread synchronous interaction toolkit make mimic usual kind asynchronous input interface emacs expects hide within toolkit interface file fit gnu emacs modular way might also make cg work right toolkit case perhaps make possible support toolkit nontoolkit mode operation perhaps version could merged two area difference design menu event lucid emacs separate opaque data type gnu emacs us preexisting lisp object job keymaps serve menu ordinary number symbol list serve input event hard write lisp function imitate lucid function using data structure support interface final area difference interval discrepancy sure wo nt hard deal messageid thalidomidelucidcom date thu feb pst jamie zawinski jwz lucidcom rms gnuaimitedu richard stallman cc helpgnuemacs prepaimitedu rpg lucidcom subject emacs richard stallman wrote lucid emacs set use require x toolkit version use one think expensive require toolkit especially since already got feature want without toolkit feature nt guaranteed correct interaction x resource appdefaults file ability build widget emacs process also using toolkit improves portability since whoever ported toolkit done hairy select hacking already want compile without support x different running without x issue systemdependent hacking anyway think overhead using xt anything concerned speed cost associated xt insignificant increase executable size small nonexistent using shared library b proven acceptable already widespread use toolkit toolkits derived principle like idea supporting mode operation toolkit without programmer lucid told last summer using toolkit required farreaching change many part emacs including making cg fail interrupt running program something worked hard couple year ago make work right event loop rewritten support xtbased command loop true rewritten believe much retargetable way dependent xt happens currently xt backend supported sure would much easier write homegrown nonxt backend eventloop lemacs would make fsf command loop work xt fact designed way perhaps unclear previous message seem confusing implementation detail cg handing uservisible behavior spent lot time ensuring emacs command loop including handling cg elisplevel interrupt identical behavior emacs user point view would certainly break thing badly enough cg nt work nt blame lucid anyone made mistake designed x toolkits mistake made design x toolkits sure nt think adversely affected lucid emacs aside time spend work around jamie messageid molegnuaimitedu date thu feb rms gnuaimitedu richard stallman jwz lucidcom cc helpgnuemacs prepaimitedu rpg lucidcom subject emacs segment community want emacs us toolkit people use lucid emacs part segment also segment people whose machine wo nt support think large number site limited memory shared library using gnu emacs know also know always complaint large emacs people whose machine small overloaded lucid wo nt get many complaint people nt like liver wo nt complain chef chopped liver liver nt mean number also segment user whose machine nt x window three segment large program appeal one get enthusiastic reception think lucid found fsf follows suit large number user unhappy would like add capability use toolkit without giving ability work without one like add modular way sake future maintenance belief opinion lucid change input structure based lucid staff told last summer told toolkit insisted calling emacs subroutine would deliver another event emacs returned recall noting would stop cg working someone confirmed asked toolkit provided way peek ahead told information dissuaded goal merging two version lucid programmer agreed impossible support mode operation change pervasive think saying possible clean design propose glad hear write technical proposal change emacs command loop andor input reading routine preparation supporting toolkit nontoolkit x noxatall mode operation messageid thalidomidelucidcom date thu feb pst jamie zawinski jwz lucidcom rms gnuaimitedu richard stallman cc helpgnuemacs prepaimitedu rpg lucidcom subject emacs richard stallman wrote belief opinion lucid change input structure based lucid staff told last summer told toolkit insisted calling emacs subroutine would deliver another event emacs returned recall noting would stop cg working someone confirmed asked toolkit provided way peek ahead told told think serious miscomunication none true never believed true one wrote basically code question write technical proposal change emacs command loop andor input reading routine preparation supporting toolkit nontoolkit x noxatall mode operation even better point working implementation liberally commented find upsetting despite criticism heap upon u clear never even run lucid emacs description lucid emacs currently lowest level various technical detail elided messageid molegnuaimitedu date fri feb rms gnuaimitedu richard stallman jwz lucidcom cc helpgnuemacs prepaimitedu rpg lucidcom subject emacs belief opinion lucid change input structure based lucid staff told last summer told insisted calling emacs subroutine would deliver another event emacs returned recall noting would stop cg working someone confirmed asked toolkit provided way peek ahead told told nt know person lucid told nt seem important matter nt glad discouraging news time eventstream mechanism sound good could send code part lucid emacs think install job separating mass rest something much easily doubt installed verbatim since probably made change surrounding context least sound like job worth else change needed work toolkituse code messageid thalidomidelucidcom date thu feb pst jamie zawinski jwz lucidcom rms gnuaimitedu richard stallman cc helpgnuemacs prepaimitedu rpg lucidcom subject emacs richard stallman wrote eventstream mechanism sound good could send code part lucid emacs think install job separating mass rest something much easily doubt installed verbatim since probably made change surrounding context least sound like job worth send file doubt much surrounding context left else change needed work toolkituse code hard say change pervasive said merge large task jamie else change needed work toolkituse code hard say change pervasive said merge large task almost impossible merge one program another unit lot difference far easiest way find cohesive unit change one program various part changed together need work separate change think one time merging change efficiently done u extraction efficiently done please help u merge messageid molegnuaimitedu date fri feb rms gnuaimitedu richard stallman helpgnuemacs gnuaimitedu jwz lucidcom rpg lucidcom subject merged emacs part job producing merged version lucid willing work merging fsf say try make version capability version little work possible many case implemented pretty much equivalent functionality stick implementation merging capability nt mainly relate xt use thing needed support merged version exists would happen work version together u hope keep working new feature current lucid version feature require considerable rewriting fit merged version way job merging would unending put differently someone contributed clean optional xview backend would consider integrating future version gnu emacs yes whether install would depend thing like clean much continuing work would need gnu emacs provide clean separation backends maintenance required notifier backend would level required xt backend supporting xview gui menu dialog box much work supporting widget based gui given clean generic interface gui front end guess reason start thinking integrating xview gnu emacs interface defined guess reason start thinking integrating xview gnu emacs interface defined think adopt eventstream data structure convention lucid us communication toolkits sort rms gnuaimitedu richard stallman writes think adopt eventstream data structure convention lucid us communication toolkits sort make possible prototype functionality lucid emacs would backend emacs emacs emacs kind thing generic gui support menu dialog box tried hard make eventstream model general enough support window system keep xspecific code well isolated currently lot xisms lemacs almost entirely related redisplay nt done much work yet always thought native nextstep port would great think nextstep nice window system certainly design wo nt truly vindicated used window system x suspect window nt port useful could also write wrapper function next implemented whatever x call emacs making know someone done simulate xt another window system think pretty poor way go though might easier short term however wonder gross low level call thing like movexy x drawstring font string could easily lemacs nt exercise xlib heavily probably abstraction missing like getting pixelsize string particular font easy fix xt stuff isolated eventstream callback jamie newsgroups gnuemacshelp date mar rms gnuaimitedu richard stallman subject emacs also segment user whose machine nt x window imply fsf might support windowing system talking people window system principle could support window system practice nt resource sorry would take lot work would way enhance gnu system almost impossible merge one program another unit lot difference far easiest way find cohesive unit change one program various part changed together need work separate change think one time merging change efficiently done u extraction efficiently done please help u merge largely merged fsf emacs lucid emacs except redisplay code keyboardc neverending changing extra argument function windowc totally uninterested merge way reason believe people lucid working emacs far competent far tasteful programmer nt wasting large amount fsf resource would much much better spent elsewhere working program people like jamie zawinski many excellent hacker type also vastly easier trying cooperate rms anything messageid thalidomidelucidcom date wed mar pst jamie zawinski jwz lucidcom rms gnuaimitedu richard stallman cc helpgnuemacs gnuaimitedu rpg lucidcom subject merged emacs concern merging lucid emacs fsf insufficient motivation part fsf compromise particular concerned fsf decide include feature consider critical feature interface quite different need implemented way preclude supporting interface need however version emacs fsf everything require lucid emacs would use also better interface something designed would motivated use general change interface make merge harder make take longer nt preclude switching implementation interface eliminated functionality important u would preclude merge thing think moment believe need merged version particular order messageid molegnuaimitedu date wed mar rms gnuaimitedu richard stallman jwz lucidcom cc helpgnuemacs gnuaimitedu rpg lucidcom subject merged emacs glad would willing use merged version fsf work producing sound like statement lucid willing work necessary produce merged version sad hear time lucid sound exigent regarding feature include exclude thus combination stringent demand refusal help accomplish combination set situation cooperation predictably unlikely certainly merge feature seem important nt already whether merge every last thing lucid want depends resource generally useful feature seem u install feature lucid want lucid help job couple specific point disturbing another way seem insist remove feature gnu emacs unification menu keymaps use standard lisp data type rather creating new opaque type chance could accept compromise support interface use well one prefer messageid thalidomidelucidcom date thu mar pst jamie zawinski jwz lucidcom rms gnuaimitedu richard stallman cc helpgnuemacs gnuaimitedu rpg lucidcom subject merged emacs rms wrote sound like statement lucid willing work necessary produce merged version case willing help work towards merge willing unless say get final arbiter go without time confidence wo nt wasting time fact speak tried hard work fsf spent hundred thousand dollar several manyears clearly done successfully regardless fault failure lie try undeniable nt think much ask make first move show faith burned like see commitment side committing money resource endeavor time lucid sound exigent regarding feature include exclude whether include exclude version emacs decision feature need version emacs version emacs simply adequate purpose couple specific point disturbing another way seem insist remove feature gnu emacs unification menu keymaps use standard lisp data type rather creating new opaque type call feature call bug contractual obligation maintain version emacs distribute design data structure used great bearing difficult chance could accept compromise support interface use well one prefer yes compromise always possible jamie messageid molegnuaimitedu date thu mar rms gnuaimitedu richard stallman jwz lucidcom cc helpgnuemacs gnuaimitedu rpg lucidcom subject merged emacs working version emacs working fsf identical past lucid done lot work lucid emacs rarely tried work fsf latest message state intention work merging future good emotional tone show contrary attitude sure make mixed message fsf merge feature lucid emacs case see reasonable use specifically pertain generic interface windowsystem support code followed support x toolkit compiletime option principle capability would object supporting fashion would work add would think minor importance better capability already thus merging latter class depends lucid messageid molegnuaimitedu date thu mar rms gnuaimitedu richard stallman jwz lucidcom cc helpgnuemacs gnuaimitedu rpg lucidcom subject merged emacs seem disagree menu supported think clean simple convenient keymaps serve also menu think abstract interface cleaner limited choosing one two alternative look like irreconcilable difference proposed one compromise supporting interface nt like please propose another messageid infernolucidcom date fri mar pst rpg lucidcom richard p gabriel rms gnuaimitedu cc jwz lucidcom helpgnuemacs gnuaimitedu subject merged emacs need study implementation menu keymaps away next week worry two abstraction mixed unless fundamentally good reason implementation ease implementation shortcut reason look rpg messageid pdxgateuucp newsgroups gnuemacshelp date mar gmt marcus eecscspdxedu meta everything subject emacs regarding lucid merge use windowing toolkits avid epoch nextstep user interested hearing possibility generalizing windowing interface emacs familiar lucid emacs nt feel whether necessary practical even desirable rmslucid discussion nt entirely clear whether supporting vanilla x xt toolkit design would require enough restructuring make another layer indirection worthwhile like work native nextstep support interface could implemented marcus daniel based heard recent discussion ought possible gnu emacs support xt future optional feature first step towards supporting generic interface reading input event gnu emacs already generic event structure much like lucid one main job supporting general hook interface program reading second step might support new kind frame interface via xt instead via xlib perhaps create set clean hook interfacing messageid atalantaadocxeroxcom richard mlynarik mly lcsmitedu date thu may pdt jimb totorocsoberlinedu jim blandy lynbech daimiaaudk cc buglucidemacs lucidcom subject fsf emacs lemacs merge beta tester sought jimb totorocsoberlinedu jim blandy date mon may way imply merge two version getting closer gnu emacs incoroporates many feature lucid emacs using section lucid code benefited advice deliberately implemented feature incompatible way better screw emacs user lucid emulation package lucidel may may terribly effective see use terribly much real advance lucid code area stallman deliberately chosen implement incompatible functionality even given lucid precedent fsf lucidel consists largely alias function named screen lucid emacs emacs renamed frame fsf desirable name change believe lucid emacs author preferred compatibility better nomenclature time imagine lucid may change also given precedent user pain couple utility lisp function rms nt want small pure simple emacs eg copytree removehook remprop function totally insane include part basic emacs keymapparent mapkeymap etc data abstraction anyway couple miscellaneous utility eg addtimeout anything really effective whole imagine deal real incompatibility eventstream face extent far see rms whole course make everything real issue divergent possible systematically substituting worse better feature lucid probably never stallman nt like since people real influence design product zawinski stallman rather stubborn would nt hold breath complete unification aim nt unification either rmsmacs code simply perverse wrong many area eg event keymaps diverged deliberately far lucid code simple effort made nonwindowsystem kind guy face screen etc aim incorporate many compatible change made fsf code many bug fix feature many dubious kludge like findfilenamehandler possible exiting lucid emacs distribution take advantage good work done fsf emacs hacker make future sourcecompareandmerge operation simpler anybody resolve technical ability time perform messageid thymussynaptics buglucidemacs lucidcom date mon may dave gillespie daveg thymussynapticscom subject fsf emacs lemacs merge various people listing reason switching lemacs might add horizontal scrolling splitting list several people bashed gnu rms lately alleged disregard established precedent set record straight lucid folk le guilty particular sin lucid threw rms event keymap model example maybe lucid approach better entirely clear system plus minus rms first lucid emacs released earlier reason fault rms sticking original scheme gnu emacs make much greater attempt backward compatibility one little thing noticed recently unreadcommandchar variable still supported well alternative hold event instead char lucid simply deleted old variable giant pain fix reference calc sure wish lucid put compatibility higher priority dave messageid thalidomidelucidcom date tue may pdt jamie zawinski jwz lucidcom daveg thymussynapticscom cc buglucidemacs lucidcom subject event model fsf emacs lemacs merge dave gillespie wrote lucid threw rms event keymap model example maybe lucid approach better entirely clear system plus minus think better rms event keymap model beyond fact first ie compatibility one little thing noticed recently unreadcommandchar variable still supported well alternative hold event instead char lucid simply deleted old variable giant pain fix reference calc sure wish lucid put compatibility higher priority new event model lucid emacs portability problem sure could remain compatible old model keeping lastcommandchar ascii equivalent lastcommandevent example could think way keep unreadcommandchar still make progress goal make emacs better editor perhaps nt think removing restriction ascii character set worth pain think nt like design decision made please suggest better one converting ascii back loses information package read unread character ascii could easily cause wrong command executed could put hack would mostly work time wrong thing argument favor improving software adding kludge top kludge instead stepping back reevaluating original decision chose take approach maybe disagree gave editor year ago think vast improvement started jamie messageid thymussynaptics date tue may dave gillespie daveg thymussynapticscom jamie zawinski uunet lucidcom jwz uunetuunet cc buglucidemacs lucidcom rms gnuaimitedu subject event model fsf emacs lemacs merge think better rms event keymap model beyond fact first ie compatibility one simple keystroke event represented go long way toward compatibility emacs mapping string event vector much natural leading gnu emacs provide still compatibility area keymaps backwardcompatible fairly close two common event atomic object mean nt need resort explicit memory management event object keep garbage collecting day long bulk event nt need collected symbol integer three event keymaps built plain lisp object make easier examine debugging easier construct modify necessary four event usageoriented le xoriented probably make easier transition window system future thing inherent representation like also feature nt could add without losing event model handling drag event nice lucid model act click whereas rms model usually act release seems work fine practice allows generate drag event user although nt yet could also generate doubleclick event second two consecutive click hint hint nudge nudge also fix stupid problem mouse command leave message behind erased releaseevent processed hand method advantage keystroke event carry position timestamp information allows key emulate extra mouse button pinch b event representation certain elegance elegance muffled need keep garbage collector away event management though c something else liked ca nt think offhand come back eventually overall though seem found item rms favor made list thinking two system equal merit could think way keep unreadcommandchar still make progress gnu emacs simply character unreadcommandchar stuff input stream event unreadcommandevents stuff order priority nt really matter could still retained compatibility using name unreadcommandchar instead unreadcommandevent current variable allowing contain integer well event object goal make emacs better editor perhaps nt think removing restriction ascii character set worth pain think maybe rms system evolved since first saw represents function key symbol also represent full set modifier bit printable key term key system equally expressive far see include time stamp though could conceivably handy enough choose simplicity rms model though opinion package read unread character ascii could easily cause wrong command executed yes zillion place calc stuff event know printable character change every single one model detect incompatible code either older program simply go ahead store something unreadcommandchar silently fail gave editor year ago think vast improvement started question dave messageid thalidomidelucidcom date tue may pdt jamie zawinski jwz lucidcom synaptx daveg uunetuunet cc buglucidemacs lucidcom rms gnuaimitedu subject event model fsf emacs lemacs merge dave gillespie wrote think better rms event keymap model beyond fact first ie compatibility one simple keystroke event represented go long way toward compatibility emacs yes realize said beyond compatibility wanted know meant besides mapping string event vector much natural leading gnu emacs provide still compatibility area key buffercharacters thing string made stuff buffer made key show represent controlshifta controlbackspace string two common event atomic object mean nt need resort explicit memory management event object keep garbage collecting day long nt need resort explicit memory management drop event floor garbage collected like lisp object simply efficient reuse probably matter one place emacs single event reused main command loop even hardly matter common misconception need explicitly manage event starting regret made possible three event keymaps built plain lisp object make easier examine debugging easier construct modify necessary harder programmatically tell apart thing eventp unpleasantly heuristic perhaps le opaque give example wanted four event usageoriented le xoriented probably make easier transition window system future carefully designed event structure expose component emacs would need running window system x specific say lucid model act click whereas rms model usually act release lucid delivers event bind command either seems work fine practice allows generate drag event user although nt yet could also generate doubleclick event second two consecutive click hint hint nudge nudge handling double click drag event controverial varies window system window system nt build c substrate instead made processed lisp tangential point want talk send mail also fix stupid problem mouse command leave message behind erased releaseevent processed hey bug nothing event model per se b event representation certain elegance elegance muffled need keep garbage collector away event management though see gnu emacs simply character unreadcommandchar stuff input stream event unreadcommandevents stuff order priority nt really matter could still retained compatibility using name unreadcommandchar instead unreadcommandevent current variable allowing contain integer well event object reason nt canonical use unreadcommandchar something like let c readchar c progn setq unreadcommandchar c user type key unambiguous ascii equivalent work fine user type controlshifta shiftlinefeed ascii equivalent right lemacs readchar signal error csha typed return shlfd lfd mean either code would fail work many otherwise legitimate keystroke would unread lfd instead shlfd could different binding likewise code read unreads lose distinction controlh backspace maybe think compatibility important feature b ch nt thing perfectly legitimate opinion ca nt think way using model int would returned ca event would returned csha bsch one return event equally bad choice maybe rms system evolved since first saw represents function key symbol also represent full set modifier bit printable key term key system equally expressive far see last time checked ch cshifth b cbs cshiftbs distinguishable fsf version changed yes zillion place calc stuff event know printable character change every single one understand massive compatibility problem defense think calc atypical emacs application find package nt work way far common use unreadcommandchar unread arbitrary character read user model detect incompatible code either older program simply go ahead store something unreadcommandchar silently fail yes true however issue compilation warning could make setq signal error storing unreadcommandchar seems pretty perverse jamie messageid hawnewswatsonibmcom date wed may gmt helplucidemacs lucidcom newsgroups altlucidemacshelp hines brooklynfishkillibmcom charles hines subject first impression fsf lisp library change next lucid version first impression fsf v lucid emacs liked scroll bar horizontallysplit window selective display etc working fsf menu tacky imho high time fsf emacs began use xt widget properly anyone x xt anyway lucid event keymap implementation generally better lisp library however fsf emacs much polished lucid emacs lisp except changed due change lucid c code largely hodgepodge seperate package tied gnu documentation better also liked scrollbars menu horrid choose go motif lucids motif style widget menu scrollbars would love next version lucidemacs capability place vertical horizontal scroll bar motif style edit area plan chuck messageid lokeiesdaucdk date may gmt buglucidemacs lucidcom newsgroups altlucidemacsbug abraham researchattcom per abrahamsen subject event model fsf emacs lemacs merge jwz lucidcom jamie zawinski said last time checked ch cshifth b cbs cshiftbs distinguishable fsf version changed yes feature provided gnu emacs seem superset feature provided lucid emacs tried messageid thymussynaptics date wed may dave gillespie daveg thymussynapticscom jamie zawinski uunet lucidcom jwz uunetuunet cc buglucidemacs lucidcom rms gnuaimitedu subject event model fsf emacs lemacs merge jamie zawinski writes key buffercharacters thing string made stuff buffer made key show represent controlshifta controlbackspace string key fact statistically nearly key actually typed likewise many key sequence dealt program silly incorporate important fact program concept event lucid emacs anyway allowing string context event vector expected kludge context allow others require use eventtocharacter inverse rms model represents key distinction subset key ascii character represented ascii code natural vector operation lisp apply string well thought simply special vector optimized store ascii character relation string event vector also becomes natural rms scheme system nt advantage seen claim system obviously completely superior simply case nt need resort explicit memory management drop event floor garbage collected like lisp object simply efficient reuse know commendable purely matter efficiency say matter one point command loop one little thing little ugli show place lemacs event function thinking nextevent take blank event object filled rather simply returning new event object inelegant unlispish expedient nt necessary rms model common misconception need explicitly manage event starting regret made possible never misunderstood interpreted design deriving need manage event command loop performance reason kludge hidden inside command loop would nt mattered design nextevent must take event filled rather consing one lastcommandevent must copied scribbled next input event model hardly crippled inelegant system whose main virtue argued elegance rms model neatly sidestep whole issue way elegant harder programmatically tell apart thing list used kind thing right lisp nt seem hurt anything lambda expression ca nt distinguished list except context okay context enough likewise event keymaps know event got place event perhaps le opaque give example wanted tempted resist miss point context like large objectoriented software system opaque data type virtue others flexibility malleability prime virtue think emacs fall latter class system like nt want wait example would good access particular thing want give access much possible assumption ingenious soul later find way use worry little bit fact rms model forgets time stamp keystroke event vague sense would useful absolute faith people given information able cool thing misremembered event model storing mouse position keystroke event could also useful though le portable window system carefully designed event structure expose component emacs would need running window system x specific say went back looked event though xlike character agree xdependent gnu lucid model act click whereas rms model usually act release lucid delivers event bind command either gnu emacs command traditionally bound instead way default binding work set pretty strong precedent way people binding also fix stupid problem mouse command leave message behind erased releaseevent processed hey bug nothing event model per se event model decision process instead event emacs clear echo area processing command click active operation click act like null command side effect clearing last message fixing bug active downclicks would require kludge active upclicks whole problem go away could still retained compatibility using name unreadcommandchar etc reason nt canonical use unreadcommandchar something like reading character stuffing back maybe think compatibility important feature b ch nt thing perfectly legitimate opinion ca nt think way understand readchar unreadcommandchar idiom loses information nobody asking forego unreadcommandevent feature providing backwardcompatible feature well allow code hobble along someone time fix nt give one everybody happy short term long term last time checked ch cshifth b cbs cshiftbs distinguishable fsf version changed yes distinguishable using model int would returned ca event would returned csha bsch one return event equally bad choice event csha number highend modifier bit set event ch event b symbol backspace rather like lucid ch treated regular control character b treated function key make choice happened make choice rms model irregular way handle modifier bit thing lucid emacs much orthogonal nice expect two system equally convenient deal practice could make setq signal error storing unreadcommandchar seems pretty perverse second thought nt want suggest public dave messageid motmotdocicacuk date may helplucidemacs lucidcom mjb docicacuk matthew j brown newsgroups altlucidemacshelp subject fsf lisp library change next lucid version next release lucid emacs contain emacs lisp change fsf obviously thing nt compatible way lucid emacs work rest first impression fsf v lucid emacs liked scroll bar horizontallysplit window selective display etc working fsf menu tacky imho high time fsf emacs began use xt widget properly anyone x xt anyway lucid event keymap implementation generally better lisp library however fsf emacs much polished lucid emacs lisp except changed due change lucid c code largely hodgepodge seperate package tied gnu documentation better morven messageid atalantaadocxeroxcom date wed may pdt richard mlynarik mly adocxeroxcom daveg synapticscom cc buglucidemacs lucidcom subject event model fsf emacs lemacs merge harder programmatically tell apart thing list used kind thing right lisp nt seem hurt anything lambda expression ca nt distinguished list except context okay context enough likewise event keymaps know event got place event nt think find much anybody involved lisp world apart taste set concrete circa believe adhoc mess vector length list whose first element symbol indirect whose tail alist con whose substitute actual structure object varous degree opacity one thing argue perversion might make sense reason compatibility quite another claim representing hashtables keymaps event forth term con vector symbol way feature nt window process window configuration represented way fsfmacs anyway way fsfmacs nt allow fillarray makekeymap incompatibly broke bunch code wrote messageid thalidomidelucidcom date wed may pdt jamie zawinski jwz lucidcom synaptx daveg uunetuunet cc buglucidemacs lucidcom rms gnuaimitedu subject event model fsf emacs lemacs merge dave gillespie wrote lucid emacs anyway allowing string context event vector expected kludge context allow others require use eventtocharacter inverse believe function take event vector also take string function take event also accept ascii integer unreadcommandevent must event ascii integer particular objection making able take integer well except nt see particularly useful event accessor function would need modified work ascii integer well code reference unreadcommandevent would modified check see really integer either would consider ugly wart functionsvariables return key sequence key return event vector event think good thing uniformity key event sometimes event sometimes integer make le work programmer yes incompatible yes make work people porting code talking purity design compatibility existing code rms model represents key distinction subset key ascii character represented ascii code natural make work programmer type key change know commendable purely matter efficiency say matter one point command loop one little thing little ugli show place lemacs event function thinking nextevent take blank event object filled rather simply returning new event object inelegant unlispish expedient nt necessary rms model right arg nextevent optional list used kind thing right lisp nt seem hurt anything mly reply said exactly would said system like nt want wait example would good access particular thing want give access much possible assumption ingenious soul later find way use far clear fact everybody know keymaps alistsvectors big problem lot code got written used aset fillarray instead advertised interface definekey making harder add power keymaps lemacs fsfmacs also fix stupid problem mouse command leave message behind erased releaseevent processed hey bug nothing event model per se event model decision process instead event emacs clear echo area processing command click active operation click act like null command side effect clearing last message fixing bug active downclicks would require kludge active upclicks whole problem go away well really think getting track opinion one choose bind command downstroke whether prescedent command upstroke upstroke cause minibuffer cleared used work lemacs broken right understand readchar unreadcommandchar idiom loses information nobody asking forego unreadcommandevent feature providing backwardcompatible feature well allow code hobble along someone time fix nt give one everybody happy short term long term think existing code hobble along way sometimes loses information good solution never subscribed unixlike idea mostly working time good enough think better incompatible change cause code work lose obscure way otherwise never get fixed could see way cause existing code work without compromising design would thought compatibility important enough compromise design would event csha number highend modifier bit set event ch event b symbol backspace really three representation event ascii code asciilike code bit beyond set symbol lemacs single representation string allowed well interest compatibility fsf model good compatibility think model cleaner lispy way thing jamie messageid hoshihipatrcojp date wed may gmt helplucidemacs lucidcom newsgroups altlucidemacshelp ebg hoshihipatrcojp ed gamble subject fsf lisp library change next lucid version mjb docicacuk matthew j brown writes lisp library however fsf emacs much polished lucid emacs lisp except changed due change lucid c code largely hodgepodge seperate package tied example important question however lucid fsf emacs keep jumping minor version number lucid next release lucid emacs see fsf jump ed messageid thymussynaptics date wed may dave gillespie daveg thymussynapticscom richard mlynarik uunet adocxeroxcom mly uunetuunet cc buglucidemacs lucidcom subject event model fsf emacs lemacs merge richard mlynarik writes one thing argue perversion might make sense reason compatibility quite another claim representing hashtables keymaps event forth term con vector symbol way feature gnu emacs nt hashtables sort far tell right would work better primitive lisp object remains seen whether gnu emacs suffer using alists instead hash table store function key mouse map map get big enough gnu keymaps admittedly pretty baroque nt window process window configuration represented way fsfmacs anyway window process probably contain data conveniently dealt strictly c level might also funny business garbage collector certainly buffer marker often wondered window configuration opaque occasionally frustrating way fsfmacs nt allow fillarray makekeymap incompatibly broke bunch code wrote true see still shame keymaps could nt backward compatible dave messageid thymussynaptics date wed may dave gillespie daveg thymussynapticscom jamie zawinski uunet lucidcom jwz uunetuunet cc buglucidemacs lucidcom rms gnuaimitedu subject event model fsf emacs lemacs merge jamie zawinski writes believe function take event vector also take string function take event also accept ascii integer setq unreadcommandevent gave error unreadcommandevent must event ascii integer particular objection making able take integer well except nt see particularly useful term suggestion variable allowed still retained name unreadcommandchar existing lisp code would able function le perfectly would work various author time redo properly talking purity design compatibility existing code appreciate purity design would kludge lucid emacs return string thiscommandkeys sometimes kludge gnu emacs vector ascii event gnu emacs would vector bytesized integer string serve functional substitute kludge meta character gnu system though see possibly coming back haunt day make work programmer type key change could although think rarely going matter much gnu emacs provide accessors getting thing like modifier key lot code got written used aset fillarray instead advertised interface definekey making harder add power keymaps lemacs fsfmacs true certainly guilty honestly think balance merit lot interesting issue event keymaps lucid keymap model work perfectly well even devil advocate managed come halfhearted argument favor vector con rms event model nice feel still could nice add extra stuff event future model mouse event keystroke advantage weigh think better incompatible change cause code work lose obscure way otherwise never get fixed perhaps lucid command loop yell see unreadcommandchar bound anything dave messageid atalantaadocxeroxcom date wed may pdt richard mlynarik mly adocxeroxcom synaptx daveg uunetuunet cc buglucidemacs lucidcom subject event model fsf emacs lemacs merge one thing argue perversion might make sense reason compatibility quite another claim representing hashtables keymaps event forth term con vector symbol way feature gnu emacs nt hashtables sort far tell intern lemacs general nonstringkeyed table messageid thalidomidelucidcom date wed may pdt jamie zawinski jwz lucidcom synaptx daveg uunetuunet cc buglucidemacs lucidcom rms gnuaimitedu subject event model fsf emacs lemacs merge dave gillespie wrote believe function take event vector also take string function take event also accept ascii integer setq unreadcommandevent gave error variable explained last message nt make able take integer variable return value well taking argument nt want integer returned event term suggestion variable allowed still retained name unreadcommandchar existing lisp code would able function le perfectly would work various author time redo properly understand argument code would work time existing bug would obscured make work programmer type key change could although think rarely going matter much may well existing code fail rare case user nt encounter nt think good thing code us readchar unreadcommandwhatever correct fsf model must accept event integer symbol existing code assumes integer work type key represented integrally majority code still incorrect lead obscure error unlikely noticed long time think better incompatible change cause code work lose obscure way otherwise never get fixed perhaps lucid command loop yell see unreadcommandchar bound anything guess mean set bound yes think good idea jamie messageid thymussynaptics date wed may dave gillespie daveg thymussynapticscom richard mlynarik uunet adocxeroxcom mly uunetuunet cc buglucidemacs lucidcom subject event model fsf emacs lemacs merge gnu emacs nt hashtables sort far tell intern lemacs general nonstringkeyed table sigh well referring generalpurpose hash table sort implementation gnu version emacs really matter dave messageid amadeusireqrobothydroqcca newsgroups altlucidemacsbug gamin ireqrobothydroqcca martin boyer subject event model fsf emacs lemacs merge date thu may gmt buglucidemacs lucidcom dave gillespie writes worry little bit fact rms model forgets time stamp keystroke event vague sense would useful doubleclicking key space bar instance useful mouse see useful mouseless terminal messageid thymussynaptics date wed may dave gillespie daveg thymussynapticscom jamie zawinski uunet lucidcom jwz uunetuunet cc buglucidemacs lucidcom rms gnuaimitedu subject event model fsf emacs lemacs merge believe function take event vector also take string setq unreadcommandevent gave error variable point unless symmetry event character carried way always something slip crack even function fixed variable break ca nt easily fixed reason stated perhaps lucid command loop yell see unreadcommandchar bound anything guess mean set bound yes think good idea thinking boundp yes suppose set right word dave messageid thalidomidelucidcom date wed may pdt jamie zawinski jwz lucidcom synaptx daveg uunetuunet cc buglucidemacs lucidcom rms gnuaimitedu subject event model fsf emacs lemacs merge dave gillespie wrote point unless symmetry event character carried way always something slip crack even function fixed variable break ca nt easily fixed reason stated rather seeing omission design slip crack implies see piece backward compatibility simply provided lemacs us string ascii code compatibility could get away without breaking every emacs file ever existed lemacs would nt use backward compatibility place would nt adversely affect core design think clean consistent compatibility kludge complete nt think worth price jamie messageid lokeiesdaucdk date may gmt buglucidemacs lucidcom newsgroups altlucidemacsbug abraham iesdaucdk per abrahamsen subject event model fsf emacs lemacs merge wed may pdt mly adocxeroxcom richard mlynarik said nt think find much anybody involved lisp world apart taste set concrete circa believe adhoc mess vector length list whose first element symbol indirect whose tail alist con whose substitute actual structure object varous degree opacity went ahead implemented monster lisp environment collapsed weight technique needed survive environment lean mean lisp environment gnu emacs apart would agree jamie zawinski event model better benefit clean event model much smaller problem two different event model keymaps problem since gnu emacs emulate lucid interface messageid thalidomidelucidcom date wed may pdt jamie zawinski jwz lucidcom ebg hoshihipatrcojp ed gamble cc helplucidemacs lucidcom subject fsf lisp library change next lucid version ed gamble wrote important question however lucid fsf emacs keep jumping minor version number lucid next release lucid emacs see fsf jump jimb nt really good idea say nt pick last lemacs great cosmic coincidence really alpha release fsf version probably call next lemacs hope people mention one mean emacsversion lucid jamie messageid atalantaadocxeroxcom date wed may pdt richard mlynarik mly adocxeroxcom abraham iesdaucdk per abrahamsen cc buglucidemacs lucidcom subject event model fsf emacs lemacs merge nt think find much anybody involved lisp world apart taste set concrete circa believe adhoc mess gt vector length list whose first element symbol indirect whose tail alist con whose substitute actual structure object varous degree opacity went ahead implemented monster lisp environment collapsed weight technique needed survive environment lean mean lisp environment gnu emacs stupid forget p hope never use struct c code messageid totorocsoberlinedu date thu may jimb totorocsoberlinedu jim blandy buglucidemacs lucidcom subject event model fsf emacs lemacs merge personally find difficult argue favor gnu keymap structure seems building keymaps using simple type following argument favor requires change allocation code gc code thing break requires new read syntax printed representation nt need worry thinking necessary primitive beforehand since people roll obvious looking structure work get leverage ability apply existing routine assq etcetera kind stretched really hard write allocation parsing unparsing code hacker come hard come good set primitive keymap function mapping event onto command many thing need obvious use know binding gnu keymap structure act like default catchall binding providing way create keymap catch event exactly mean nconc one keymap onto another sure longer effectively apply existing utility routine like assq gnu keymap assq nt know vector keymaps hairy operated anything code know dealing keymap pain upgrade keymap change probably largest source broken lot code gnu anyone think going happen doodyhead restricts implementation expect people poke around data structure raw discourages making reasonable improvement like lucid reverse index yet hear single mildly persuasive argument anyone favor gnu keymap structure rms great programmer got gcc got emacs got macarthur got luxurious pad fourth floor posh go work hoping rub turn single common theme thought much work going take long nt bother take punchline lifelong pursuit hackerdom apprenticing blacksmith case messageid nealctdcomsatcom date may gmt helplucidemacs lucidcom neal ctdcomsatcom neal becker newsgroups altlucidemacshelp subject first impression fsf lisp library change next lucid version wed may gmt hines brooklynfishkillibmcom charles hines said first impression fsf v lucid emacs liked scroll bar horizontallysplit window selective display etc working fsf menu tacky imho high time fsf emacs began use xt widget properly anyone x xt anyway lucid event keymap implementation generally better lisp library however fsf emacs much polished lucid emacs lisp except changed due change lucid c code largely hodgepodge seperate package tied gnu documentation better also liked scrollbars menu horrid choose go motif lucids motif style widget menu scrollbars motif cost money lucid widget stuff free licensing restriction would love next version lucidemacs capability place vertical horizontal scroll bar motif style edit area plan would welcome addition would help convert lot antiemacs type around messageid anthemnlmnihgov date may gmt helplucidemacs lucidcom newsgroups altlucidemacshelp warsaw nlmnihgov barry warsaw subject fsf lisp library change next lucid version hmm maybe lucid emacs would solve problem messageid kingstoncsuclaedu date may gmt helplucidemacs lucidcom newsgroups altlucidemacshelp jrobbins kingstoncsuclaedu jason robbins subject fsf lisp library change next lucid version article hoshihipatrcojp ebg hoshihipatrcojp ed gamble writes important question however lucid fsf emacs keep jumping minor version number lucid next release lucid emacs see fsf jump rate gnu bug fix version comming maybe small nnumber lucid avoid confusion soon exist gnu version jason messageid thalidomidelucidcom date thu may pdt jamie zawinski jwz lucidcom helplucidemacs lucidcom epoch csuiucedu helpgnuemacs prepaimitedu subject future lucid emacs release gnu emacs fsf mean lucid emacs going away continue developing merging bug fix new feature fsf version appropriate plan discard functionality rms chosen include version long awaited great redisplay rewrite well underway new guise great epoch merge work end done epoch developer close communication within two month expect version lucid emacs new redisplay run epoch code without alteration excepting area lemacs incompatible lucid emacs run dumb ttys shortly thereafter time probably release new version lemacs week contains bug fix portability improvement bunch internal improvement nt user visible next release probably month epoch merge reached point stability latest released lucid emacs found labreastanfordedu pubgnulucid see readme version lucid emacs beta test send mail like help hacker please jamie messageid thalidomidelucidcom date thu may pdt jamie zawinski jwz lucidcom neal ctdcomsatcom neal becker cc helplucidemacs lucidcom subject first impression fsf lisp library change next lucid version neal becker wrote also liked scrollbars menu horrid choose go motif lucids motif style widget menu scrollbars motif cost money lucid widget stuff free licensing restriction lucid emacs compiled motif also come simple set motiflookalike widget used menubar popup menu code copylefted need xt even motif recommend use lucid widget since load faster though compatible would love next version lucidemacs capability place vertical horizontal scroll bar motif style edit area plan yes next release soon jamie messageid thalidomidelucidcom date thu may pdt jamie zawinski jwz lucidcom mjb docicacuk matthew j brown cc helplucidemacs lucidcom subject fsf lisp library change next lucid version matthew j brown wrote next release lucid emacs contain emacs lisp change fsf obviously thing nt compatible way lucid emacs work rest probably nt time current beta version lemacs many fsf change merged along lot internal improvement file lemacs lispprim directory merged fsf counterpart rest lisp library something volunteer could easily since nt require intimate knowledge lemacs internals gnu documentation better likewise nt much time hack documentation want redisplay bug fixed also still looking noble volunteer add configure support lemacs quite simple current lemacs beta since point lemacs directory basically identical counterpart jamie messageid molegnuaimitedu date thu may rms gnuaimitedu richard stallman jwz lucidcom cc rpg lucidcom cc rms gnuaimitedu subject future lucid emacs recall message february posted list feature would find essential order able use emacs asked fsf show merge two version emacs work emacs contains several feature merged lucid emacs x selection code face also contains comparable menu event feature emulation lucid interface contains feature comparable interval emulation lucid interval function easy add almost feature list provided would seem proper pitch merge thing toolkit output sound output dialogue box emacs end split posting today seems describe quite different plan however willing end split date thu may pdt jamie zawinski jwz lucidcom rms gnuaimitedu richard stallman cc rpg lucidcom subject future lucid emacs lot merging source direction taking new feature putting source tree result two emacses closer together nt think current strategy incompatible eventual merge version emacs help long run need talk end people involved vacation day send mail later jamie messageid bullwinkleatcllmitedu date may helplucidemacs lucidcom newsgroups altlucidemacshelp haydens bullwinkleatcllmitedu hayden schultz subject scrollbars first impression please nt use motifstyle scrollbars remember emacs like able control mouse button bound scrollbars nt care look like motif scrollbars nt act like hate motif open look matter scrollbars like one button scroll another scroll another scroll absolutely ala xterm scrollbars annoys click gizmo gizmo really anoys gizmo move past mouse cursor clicking scrolling start scroll bet add scrollbars people want bind function interesting thing hayden messageid wlbriipogtegsccom date wed jun gmt helplucidemacs lucidcom newsgroups altlucidemacshelp amc wlviipogtegsccom allen cohen subject like lucid emacs better emacs want say keep good work tried emacs must say lemacs quite superior especially menubars hopefull scroll bar also like way middle mouse button used completion etc thanks jamie et al messageid baloogsfcnasagov date jun gmt helplucidemacs lucidcom steve baloogsfcnasagov steven rezsutek newsgroups altlucidemacshelp subject like lucid emacs better emacs second third kudos since brought lucid emacs nt even bothered bring gnu today release version left lying around get used dial pppx yet congrats keep good work thanks steve decided whether like work merge two version wanting ask volunteer merge lucid xt interface code emacs put want merge version better finding someone else getting point ought ask someone else nt want tomorrow gnu bof behoove ask volunteer work thing like merging xt support gnu emacs hoping announce going guess nt going must carry messageid infernolucidcom date wed jun pdt rpg lucidcom richard p gabriel rms gnuaimitedu cc jwz lucidcom subject calling volunteer richard got together discussed idea completing merge code version decided primary reason structure gnu emacs lack clean internal interface fundamentally unmaintainable believe trying maintain along addition emacs need adding thing need would expensive u unfortunately gnu emacs constructed following modern programming practice even though procedural interface functionality group one could say abstraction boundary maintained mishmash data structure clumsy incoherent make life maintainer easy proven fact arceneaux unable add extension needed early version gnu emacs given somewhat year time fact taken blandy long get gnu emacs believe merge direction proper way thing course shall pursue thing done gnu emacs good believe best way proceed clean put lucid emacs maintainability important u even though gnu emacs warranty must support warranty commercial product includes lemacs component think good outcome emacs user community hate criticize implementation gnu emacs point clean code good structure count false sense parsimony point reached rpg messageid molegnuaimitedu date fri jun rms gnuaimitedu richard stallman rpg lucidcom cc jwz lucidcom subject calling volunteer sad wo nt help looked lucid interval code intending merge changed mind could nt understand
270,Lobsters,emacs,Emacs editor,Spacemacs 0.200 released,http://spacemacs.org/news/news01.html,spacemacs released,,scary section one feared user let honest rather big amount change user jumping master first visible change spc spc trigger mx instead avy jump character spc key spacemacs central key act leader key key binding made sense give sense root key sequence spc spc spc spc central sequence execute interactive function emacs avy command reorganised ground prefix spc j jump command convention doubled key often used default command given prefix instance spc b b buffer selection spc f f file selection jump character command avy spc j j detailed list new spc j prefix avy command behind prefix spc j jump spc j j jump character buffer work evil motion spc j l jump line avy work evil motion spc j w jump word current buffer work evil motion following key binding moved spc j j split line moved spc j n mnemonic new line spc j h spc j l moved spc j spc j respectively spc j split string sexp moved spc j lot handy command prefix let discover key menu closing deleting killing thing tough call distinguish find confusion spacemacs key binding instance close window delete buffer also kill buffer whereas make sense lot user still user finding confusing decided simplify notion closingdeleting thing key delete moved spc w c spc w c spc w spc w generally tried map prefix spc b spc w action bring convention avy command capital letter manipulate window buffer result detailed spc b k removed spc b ck kill buffer matching regexp spc b cd spc b buffer move removed functionality available via spc w spc w hjkl spc w hjkl spc w spc b k kill buffer spc b map spc w maximize bufferwindow effectively delete window spc b kill buffer using acewindow buffer action nt delete window default use universal prefix argument instance spc u spc b spc u spc b delete buffer also window another example spc u spc b maximize buffer helm new friend release called ivy adopter since new package capable helm command decided remove helm related command prefix spc h spc h exclusively help command following helm command moved spc h b helmfileteredbookmarksis spc f b spc h l helmresume spc r l spc h l helmlocatelibrary spc f e l git related command drastically simplified leverage magit dispatch menu instead replicating magit dispatch key spc g prefix define key binding spc g display magit dispatch menu get several benefit first free lot valuable key spc g second consistent key binding since always use magit dispatch menu previously action bound different key spc g magit dispatch menu accessible new available key allowed u move key binding directly spc g like gitlink spc g l make sense spc g l since agnostic hosting platform ie work github gitlab spacemacs layout restrict scope buffer list opened spc b b use spc b b list buffer layout also key select layout close layout menu use switch layout keep menu opened conclude section key binding change breaking change microstates spacemacs dead say hi transientstates took advantage microstates refactoring change name accurate new name transientstates indeed state leverage notion transient map emacs refactoring replaces custom backend hydra powerful popular package define transient map effect macro spacemacsdefinemicrostate deprecated replaced new hydra powered macro spacemacsdefinetransientstate
271,Lobsters,emacs,Emacs editor,Searching A Million Lines Of Lisp,http://www.wilfred.me.uk/blog/2016/09/30/searching-a-million-lines-of-lisp/,searching million line lisp,parsing elsearch analysing performance ton avoid work find shortcut use c function write impure function cheat display wrapup available github available melpa,time another emacs adventure emacs today way find caller function macro emacsers grab favourite text search tool sadly dumb text search know nothing syntax better emacs without little fanatical tool building let make happen parsing everyone know parse lisp right read turn homoiconic language hard parse want know found code first place language separate ast ast type includes file position lisp list frill briefly explored writing parser coming sens know following legal elisp variable start number let backquote immediately precede expression quoting foo cripes anyway totally ripped inspired similar functionality elsearch read move point end expression read use scansexps find beginning using technique recursively find position every form file analysing ok parsed code preserving position form actually look like function call requires little thought tricky example reference foo function defun somefunc foo lambda foo let foo let foo call foo foo lambda x foo let x foo let x foo foo funcall foo necessarily call definitely reference function foo afunc foo simply walk list foo may may function call depending context model context build path describes contextual position current form path list show first element enclosing form plus position within example given code let x bar setq x foo build path setq let looking foo give u enough context recognise function call normal code aha say experienced lisper macro well elisprefs understands common macro macro evaluate argument mean walk form spot function call perfect work well practice also provide elisprefssymbol command find reference symbol regardless position form performance turn emacs ton elisp current instance loaded three quarter million line code emacs actually lazily load file functionality use uh little optimisation needed wrote benchmark script learnt make elisp fast firstly avoid work elisprefs need calculate form position user jump file correct location however form contain match need expensive calculation secondly find shortcut emacs littleknown variable called readwithsymbolpositions variable report symbol read parsing form looking function call somefunc reference symbol somefunc skip form entirely thirdly use c function c algorithm say building hash map give fast lookup elisprefs use assoc small alists c function fast list big enough benefit lookup fourthly write impure function elisp provides various way preserve state current buffer particularly saveexcursion withcurrentbuffer bookkeeping expensive elisprefs creates temporary buffer dirties else fails cheat elisprefs report progress make faster certainly feel like display something work search code current emacs instance le second display result first prototype showing matching form isolation initially displayed form result buffer turn context useful added rest matching line avoid confusion underlined section code matched search second prototype adding context custom face second prototype also custom face styling improvement force emacs theme author add support face defined package still work well hoped get stuck ui ask would magit decided magit would take advantage existing emacs face final ui using normal syntax highlighting final version us standard elisp highlighting highlight surrounding context comment mean match favourite colour scheme new user find ui familiar added flourish see result second prototype often indented final version unindents result make match easier read quickly wrapup elisprefs available github available melpa ready use go forth search elisp
272,Lobsters,emacs,Emacs editor,"Possibly a clone of Emacs, written in Forth",https://github.com/larsbrinkhoff/fmacs,possibly clone emacs written forth,join github today sign file permalink limitation lbforth installation key binding topic resource license reload reload,dismiss join github today github home million developer working together host review code manage project build software together sign file permalink failed load latest commit information type name latest commit message commit time possibly clone emacs written forth limitation run lbforth block editor ie fixed line character installation either load running forth fmacssh script build standalone executable make key binding evaluate forth expression mx execute extended command cf cb cp cn cursor movement mf mb move forwardbackward word ca ce go beginningend line go beginningend buffer cd del delete character rightleft mw copy region kill ring md mdel delete word copy kill ring cy insert text kill ring cj cm stub break line cx cf stub load file ch stub provide helpful message cx u c stub undo cq quoted insert cg quit c cspc set mark cx cx exchange point mark cz return forth type fmacs get back fmacs cx cc exit forth emacs clone forth topic resource license perform action time signed another tab window reload refresh session signed another tab window reload refresh session
273,Lobsters,emacs,Emacs editor,Emacs 25.1 released,https://lists.gnu.org/archive/html/emacs-devel/2016-09/msg00451.html,emacs released,date prev date next thread prev thread next date index thread index emacs released http wwwgnuorgsoftwareemacs http http http http http wwwgnuorgprepftphtml http ftpgnuorggnuemacs http shopfsforgproductemacsmanual emacs released emacs released emacs released emacs released emacs released emacs released emacs released emacs released emacs released emacs released,date prev date next thread prev thread next date index thread index emacs released nicolas petton subject emacs released date sat sep version emacs text editor available information emacs see http wwwgnuorgsoftwareemacs retrieve source nearest gnu mirror using one following link http http get pgp signature http http choose mirror explicitly list http wwwgnuorgprepftphtml mirror may take time update main gnu ftp server http ftpgnuorggnuemacs highlight release include emacs load shareddynamic library module experimental support cairo drawing enhanced network security tlsssl certificate validity like new minor mode electricquotemode using curved quote type character folding support isearchel xwidgets new feature embedding native widget inside emacs buffer new improved facility inserting unicode character many change summary see etcnews file view emacs ch n complete list change people made see various changelog file source distribution summary people contributed emacs see etcauthors file printed copy emacs manual available purchase free software foundation online store http shopfsforgproductemacsmanual version sale updated emacs remains great reference book current emacs buying copy great way support work fsf regard nico signatureasc description pgp signature emacs released nicolas petton emacs released tino calancha emacs released alex dunn emacs released drew adam emacs released kaushal modi emacs released drew adam emacs released nicolas petton emacs released phillip lord emacs released richard copley emacs released phillip lord
274,Lobsters,emacs,Emacs editor,How to build your own Spacemacs,https://sam217pa.github.io/2016/09/02/how-to-build-your-own-spacemacs/,build spacemacs,previous post melpaorg getting emacs ready job introduce structure config rescue melpaorg really move emacs way aboabo bind emacs way meeting goal build great spacemacslike experience recipe modern emacs experience,emacs great environment build text editor really old piece software searching internet always lead best recent result goal help build editor inside emacs using best tool job modern tool wellcrafted package previous post described tool needed build great spacemacslike experience inside emacs post want explain process building detail hope serf building cool editor way like emacs proficient reader skip part jump directly usepackage part already know usepackage jump talk ivy swiper counsel general want read strange frenchenglish prose jump directly put recipe modern emacs experience emacs text editor programming environment built top programming language like python java called emacslisp text editing ability bare emacs distribution decent today emacs user extend piece software called module package also written emacslisp often user emacs became frustrated lack feature thought could better result big ecosystem emacslisp package get idea melpaorg anybody download use extend functionnalities emacs one main strength emacs extensibility flexibility first step going learn configure using basic emacs function getting emacs ready job installed recent version emacs using beloved package manage opened emacs create directory home directory called emacsd emacs start read file directory called emacsdinitel execute emacslisp command find going use file customize emacs liking version control adept symlinked initel dotfile repository vc inside emacs press cx cf meaning controlf controlf emacs command open file emacs prompt file open type emacsdinitel emacs really old default configuration somewhat er mysterious mystical going use initel introduce sane default paste following chunk using cy setq deleteoldversions delete excess backup version silently setq versioncontrol use version control setq vcmakebackupfiles make backup file even version controlled dir setq backupdirectoryalist emacsdbackups directory put backup file setq vcfollowsymlinks nt ask confirmation opening symlinked file setq autosavefilenametransforms emacsdautosavelist transform backup file name setq inhibitstartupscreen inhibit useless oldschool startup screen setq ringbellfunction ignore silent bell make mistake setq codingsystemforread use default setq codingsystemforwrite setq sentenceenddoublespace nil sentence end point setq defaultfillcolumn toggle wrapping text character setq initialscratchmessage welcome emacs print default message empty scratch buffer opened startup place cursor closing paren first line press cx ce execute previous bit code setq emacslisp word meaning set following variable following value first line could translate plain english set variable deleteoldversions save initel modification pressing cx c quit emacs pressing cx cc restart press mx depending o corresponds altx describevariable deleteoldversions open buffer documentation variable line saying value basically emacs started evaluated line code emacsdinitel press mx describekey press ce print buffer describing function attached keybindings ce simple exercise covered important emacs notion every command bound function function time defined emacslisp important function defined c performance learned emacs thorough documentation describing variable function learned modify variable using emacslisp learned emacs execute code startup leverage customize liking introduce structure config usepackage rescue emacslisp package archive wich interact melpaorg time writing package abundance module sometimes lead something emacs user call emacs bankruptcy state user understand emacs configuration give past year emacs career emacs configuration file grew embarrassing level morning well line looming burden disorganization startup time poor customizations exist language use anymore ahem csharpmode way ryanmcgeary prevent john wiegley current emacs maintainer put great package called usepackage second step going set usepackage use first time meta package package manage package way interact put following line emacsdinitel require package line basically say emacs make available command present package module setq packageenableatstartup nil tell emacs load package starting following line tell emacs internet look new package setq packagearchives org http orgmodeorgelpa gnu http elpagnuorgpackages melpa http melpaorgpackages marmalade http marmaladerepoorgpackages packageinitialize guess one bootstrap usepackage unless packageinstalledp usepackage unless already installed packagerefreshcontents updage package archive packageinstall usepackage install recent version usepackage require usepackage guess one best way learn work reading documentation nah let use first read restart emacs put following line initel go end line ce press cx ce usepackage general ensure check general package make sure accessible ensure part previous chunk tell usepackage download place somewhere accessible emacsdelpa default every function general package available use usepackage statement customize general package need config keyword usepackage macro usepackage general ensure config generaldefinekey c third line said bind c press function mean need avy package let use usepackage download load avy package usepackage avy ensure need package right start emacs wait first call command avy package going put command list command trigger loading avy package use command keyword usepackage avy ensure command start emacs avy package loaded first press c call trigger loading avy package usepackage kind trick make sure code executed loaded needed really need check usepackage way mold emacs liking move emacs aboabo way emacs text editor move type move buffer ie text file loaded memory move line move sentence move semantics unit move file search file search text search regexp search project really help uniform interface common command call one prolific emacspackage developper know called oleh krehel aboabo twitter past two year developped ecosystem around completion framework wrote called ivy ecosystem composed three package called ivy counsel swiper counsel allow find recently visited file switch buffer search string current git directory search file current git directory search emacs function search system application open search music rythmbox well get idea swiper allow find text really really quickly inside emacs buffer ivy proposes completion candidate two many emacs function need completion narrowing may heard another ecosystem centered around helm spacemacs dev chose use helm central tool assure regret chosing ivy way really really fast really well thought really convenient use ton function bind still way make easy bind emacs general way recently growing user base emacs user started use evil vim emulation built top emacs command work flawlessly developped way bind key function like vim one successful solution evilleader another evil user pseudo noctuid created package called generalel way know define key emacs one versatile simplest solution defining keybindings many way define keybindings generalel since constructed around generaldefinekey flexible let use bind key generaldefinekey replace default keybindings c swiper search string current buffer mx counselmx replace default mx ivy backend one pretty simple bind c swiper mx counselmx two key probably amongs two used keybindings emacs general allows complex solution keybindings definition let say want personnal keybindings bound cc xy xy combination choice define prefix generaldefinekey prefix cc bind simple key press b ivyswitchbuffer change buffer chose using ivy counselgitgrep find string git project bind double key press ff counselfindfile find file using ivy fr counselrecentf find recently edited file pf counselgit find file git project cc b switch buffer using ivy cc f f find file cc f r find recent file see pattern placed command related finding file cc f prefix would great could know press cc f corresponds hey emacs package called whichkey guess usepackage whichkey ensure press cc nice buffer show pressing b execute ivyswitchbuffer show f prefix better indicate whichkey cc f related function corresponds file related operation usepackage whichkey ensure config whichkeyaddkeybasedreplacement cc f file cc ff find file cc fr recently edited cc p project execute code cx ce usual press cc see much whichkey awesome never forget keybinding easy beginner swift clean kind code duplication define using general describe using whichkey fact statement using whichkey integration general generaldefinekey prefix cc bind simple key press b ivyswitchbuffer change buffer chose using ivy counselgitgrep find string git project bind double key press f ignore whichkey file ff counselfindfile fr counselrecentf p ignore whichkey project pf counselgit whichkey find file git dir evaluate code press cc output see general great meeting goal build great spacemacslike experience evil user general also nice integration evil state mean easily define keybindings match spacemacs design style yet retain ability build editor want came emacs beginning check chunk usepackage general ensure config generaldefinekey state normal visual insert emacs prefix spc nonnormalprefix cspc simple command itermfocus whichkey iterm itermgotofiledirorhome whichkey iterm goto dir counselag tab switchtootherbuffer whichkey prev buffer spc whichkey go char application ignore whichkey application ar ranger ad dired evil normal visual state prefix spc spacemacs evil insert emacs state prefix cspc define key direct access describe using whichkey define prefix easily using ignore keyword see close spacemacs use spacemacs done well like spc prefix thing much let spacemacs dev decide keybindings must refer want make emacs want able define prefix easily want understand emacs without read entire spacemacs code base want editor customize inner deepness without hit design choice make spacemacs one major drawback qwertykeyboard oriented mean use another keyboard layout make weird movement accomodate spacemacs keybindings recipe modern emacs experience put recipe build spacemacslike emacs based done systematically build reasonable usable emacs spot package seems interesting install using usepackage ensure keyword use hour two determine function need create autoloading using usepackage ability deferred loading create keybinding using general prefix like use spc look like spacemacs describe using whichkey using whichkey keyword general definition step use package mean really need seven step need usepackage general whichkey finally also need aboabo package awesome
275,Lobsters,emacs,Emacs editor,Kanban in Emacs Org-Mode to Get More Work Done,http://jr0cket.co.uk/2016/09/Kanban-board-Emacs-Org-mode-to-get-work-done.html,kanban emacs orgmode get work done,update list view kanban board designing kanban board todo done planning progress blocked review done planning progress blocked review done creating orgmode stage configuring emacs orgmode managing task create orgmode file create kanban board adding task kanban board moving task across board el kanban updating board task stage change el kanban reference,kanban board way visualise work help get work done organise work task need completeing use board show state card kanban encourages get work finished starting new work amazing emacs orgmode used create fast easy use kanban board ever update using orgmode doesnt give everything want kanban board interesting exersice sticking list view kanban board orgmode built emacs spacemacs need install package layer following designing kanban boardthe column kanban board represent state work represent typical workflow represent state generic todo done workflow anything specific add value manage work using kanban using five stage workflow planning progress blocked review done planning work like need organising progress currently working try keep minimum get thing done blocked thing started working currently arent able complete review work completed check follow task lesson learnt done thing completed give feeling satisfaction creating orgmode stagesits easy create orgmode stage represent state work kanban board please see earlier article configuring emacs orgmode managing task create orgmode filecreate new file opening new buffer mx findfiles type new file name ending org file org filename extension automatically set emacs major mode orgmode use file called kanbanorg kanban board spacemacs emacs spc f f cx cf mx spacemacshelmfindfiles mx findfiles create kanban boardlets assume created file called kanbanorg edit file create table kanban board start creating th manually typing table layout use mx orgtablecreate enter number column row table example create table column row would speciify add name kanban board first row table use mx orgtablecreate add header row mx orgtableinserthline kanban board give adding task kanban boardeach item board represents task use orgmode interal link jump board detail task create link name task simply type name inside double square brakets moving task across boardits easy enough move column around alt arrowkeys orgmode single keybinding move cell move individual task column use selective cut paste move cursor cell want move use cc cx cw use tab move new cell pasteyank value new cell using cc cx cy however simply moving task update orgmode stage task link click link taken task easily update task stage match board would great moving task board updated associated task stage vice versa el kanban updating board task stage changesi found el kanban package updated kanban board based task orgmode stage us orgmode table format directive run time want update board installed package pull custom orgmode stage header unfortunately pull task board either need fix package find another solution suggestion welcome reference thank
277,Lobsters,emacs,Emacs editor,"My ambivalent view on Vim superintelligence, contrasted with GNU Emacs",https://utcc.utoronto.ca/~cks/space/blog/unix/VimSmartsVsGNUEmacs,ambivalent view vim superintelligence contrasted gnu emacs,often want vim get way vi powerful conceptual model heart magit privileged language core run limit,historically extremely ambivalent attitude vim superintelligent editor standard remark want editor gnu emacs part often want vim get way part used vi vi good part come see fundamental philosophical difference editor put simply vi powerful conceptual model heart gnu emacs already start basically big random ball stuff sure gnu emacs certain amount concept core mechanism wiring keystroke lisp function nice collection keystroke conceptual unity behind make easier remember fundamental model gnu emacs edits text make necessary way vi command vi really feel like breaking rule gnu emacs rule convention may freely violated without pain however much love magit clearly break rule gnu emacs flagrant way binding ordinary alphabetical character sort special action status buffer gnu emacs course perfectly fine long history consequence gnu emacs fundamentally relatively arbitrary much easier make random superintelligent thing without damaging conceptual integrity clear hook core editor superintelligent thing running lisp code response keystroke gnu emacs advantage gnu emacs put one way lisp way even lisp c conceptual level often practical level gnu emacs written language superintelligent extension extension kind thing everything except lowest level code often exactly interface privileged language core gnu emacs neither true vim instead vim hard core conceptual model implementation environment plugin model attached side instead fundamental component emacs autoindentation conceptually simple rebind newline run lisp code analyzes state text buffer insert right number space maybe tab well newline difference plain newline processing running lot lisp code inserting single character vim well need entirely new conceptual model hooking keystroke happens completely different path nt smart autoindentation active change raise relatively deep question example normally repeat insertion happens insertion newline environment autoindent insert actual end result text basically rerun user typing thus retrigger autoindentation new context answer question presumably vim question get raised start adding various form superintelligence vim feel ambivalent whole endeavour one hand see appeal necessity hand feel messy way base vi nt sort touched vi run limit whole issue mind reason beyond scope entry optimistically think might possible create vilike composable operation editor strong conceptual model gracefully allowed extension autoindentation intelligence idea result would look like might look entirely like vi perhaps nt permit arbitrary extension functionality instead clear model say parsing buffer content expressing autoindentation rule based parse state
279,Lobsters,emacs,Emacs editor,Example Driven Development,http://www.wilfred.me.uk/blog/2016/07/30/example-driven-development/,example driven development,feature implemented smalltalk build emacs implementation lisp win bruteforce performance eval way exploiting emacs ui overlay special property change hook choosing function convincingly persuaded predicate function use give try github melpa tweet file issue,hey colleague function take list return list like function hard google often easier speak concrete example list x z index want list without element position x z blown away saw feature implemented smalltalk decided build emacs implementation super helpful need screenshot show action lisp win project much easier language little syntax suppose looking arithmetic function suggestel simply list function try one turn fact syntactically function big help need special formatting infix function bruteforce performance suggestel bruteforce search list function ignores anything throw error return value different output requested currently list function expecting slow instant also need try every permutation argument computationally expensive want user discover function like nth even get argument wrong order lot permutation typically user use argument problem suggestel find match try ordering prevents u suggesting user would probably prefer order proposed anyway eval way suggestel evals expression given allowing user enter literal variable even function expression convenient developing new package want use value package screenshot note suggested expression sum list us exactly expression given copypasted however show final value clear function exploiting emacs ui take best advantage emacs ui need work like text editor suggestmode derives emacslispmode favourite lisp package work entire buffer valid lisp file get highlighting free suggestel add extra touch top use overlay highlight heading override comment highlighting heading output also use special property readonly guide user typing correct place suggestel also us change hook pictured inform user need rerun suggestupdate show cc cc default keybinding default like emacs tutorial suggestel always use current keybindings choosing function suggestel whitelist function safe run function include suggestel position responsibility affect code user write function absolutely sideeffects calling deletefile could catastrophic function mutated input argument would safe necessarily user expected strictly requiring pure function mean many builtin emacs function offered wherever possible suggest builtin function show first suggestel decide function alias show convincingly persuaded predicate function use p suggestel prefers alias suggestel also favour cllib popular deprecated cl eg clfirst first also decide package include suggestel includes thirdparty package consider important dashel sel fel long term hope package add suggestfunctions using evalafterload thirdparty package often higher proportion pure function case fel included impure function read filesystem safe also tricky pick function belong whitelist suggestel try offer function likely stumble across found best function take argument simple type unlikely find higherorder function random example also want function characterised single example singleargument predicate much use since need several example demonstrate behaviour currently function list alists plists hash table number string symbol path cover much daytoday development already learnt new function give try suggestel github melpa would love hear feedback tweet file issue
280,Lobsters,emacs,Emacs editor,Unexecute,http://emacshorrors.com/posts/unexecute.html,unexecute,linker memory security measure strictly forbidden guile emacs try getting rid,epitome craziness could well give search scary thing emacs much doubt find anything fearinducing first let explain wrong unlike previous example something show pointing code snippet problem much fundamental nature exact detail emacs build process always bit mystery sure compiling c source obtain emacs lisp interpreter using bytecompile emacs lisp file make sense loading file dump emacs binary time heard reading discussion creating executables common lisp apparently achieved serializing program current state disk however work bit differently emacs loading bare minimum temacs executable necessary emacs lisp file socalled unexec function read executable originating scan entire process memory modifies file contain state obtained save emacs executable word file contains partial platformspecific reimplementation linker take look existing one searching file name unex c turn support linux bsd window do cygwin hp series o x aix irix sgi solaris pretty gross unportable hack probably fail system using memory security measure something people fully understand let alone able fix faced problem stage build process personally see value obtaining emacs executables containing desired state something people ask deal long startup time bad done anymore sufficiently recent version emacs dumping already dumped emacs executable strictly forbidden hope least guile emacs try getting rid either making startup fast enough dumping platformindependent file loaded emacs executable could work please nuke nightmare orbit fast possible edit guile emacs got rid code still included though
282,Lobsters,emacs,Emacs editor,Debugging GNU Emacs memory leaks (part 1),http://notes.secretsauce.net/notes/2015/09/19_debugging-gnu-emacs-memory-leaks-part-1.html,debugging gnu emacs memory leak part,http,many month later finally figured make leak command result described mailing list http apparently starting daemon repeatedly creatingdestroying client frame made memory use consistently climb following zsh snippet tickle bug emacs daemon true seq timeout emacsclient c done sleep done memory use could monitored bit zsh true p h p pidof emacs r sleep done leak visible emacs q nt load user configuration emacs load full configuration leak much pronounced configuration loaded bisected configuration find bit causing leak found winnermode apparently winnermode keep list active frame nt clean dead frame list longrunning daemon workflow frame created destroyed time list end keeping reference data structure longer active turn prevents gc cleaning associated memory simple patch winnermode fix clearly see result fixed memory leak obvious memory leak feeling clearly leak since memory consumption growing even configuration loaded still way
284,Lobsters,emacs,Emacs editor,vdiff - A tool like vimdiff for Emacs,https://github.com/justbur/emacs-vdiff,vdiff tool like vimdiff emacs,vdiff table content introduction recent significant change separate repository screenshot basic two file diff refined hunk three file diff target sending change installation usage basic viewing transmitting change buffer fold ignoring case whitespace saving updating exiting evilcollection evilcollectionvdiffel hydra hydra package customization,vdiff tool like vimdiff emacs table content introduction vdiff compare two three buffer basis output diff tool buffer kept synchronized move one buffer top active buffer aligns corresponding top buffer similar ediff work ediff use third control buffer move diffed buffer key difference vdiff meant actively edit one buffer display update automatically buffer similar ediff vdiff provides command send receive hunk one buffer well command traverse diff hunk useful trying merge change contrast ediff vdiff also provides folding capability fold section buffer contain change folding occurs automatically finally encouraged bind key vdiffhydrabody use hydrael elpa create convenient transient keymap containing useful vdiff command functionality inspired equivalent vimdiff tool vim contribution suggestion welcome recent significant change region active change sent buffer line intersection region hunk sent allows sending individual line similar individual line staged magit add option use various git diff algorithm see vdiffdiffalgorithm option split vdiffmagitel separate repository added magit integration function vdiffmagitel added threeway diff support see screenshot basic two file diff refined hunk three file diff target sending change installation usage vdiff available melpa recommended way install keep date install may mx packageinstall ret vdiff ret start vdiff session main entry point commanddescription vdiffbuffersdiff two open buffer vdifffilesdiff two file three open buffer three file vdiffcurrentfilelike ediffcurrentfile diff buffer disk version file vdiffmergeconflictuse vdiff resolve merge conflict current file installing bind command preferred key prefix like require vdiff definekey vdiffmodemap kbd cc vdiffmodeprefixmap bind command cc prefix vdiffmode active course pick whatever prefix prefer cc prefix command would basic keycommanddescription cc gvdiffswitchbufferswitch buffer matching line cc nvdiffnexthunkmove next hunk buffer cc pvdiffprevioushunkmove previous hunk buffer cc hvdiffhydrabodyenter vdiffhydra viewing transmitting change buffer keycommanddescription cc rvdiffreceivechangesreceive change buffer cc rvdiffreceivechangesandstepsame cc r cc n cc svdiffsendchangessend change buffer cc svdiffsendchangesandstepsame cc cc n cc fvdiffrefinethishunkhighlight changed word hunk cc xvdiffremoverefinementsinhunkremove refinement highlighting none vdiffrefinethishunksymbolrefine based symbol none vdiffrefinethishunkwordrefine based word cc fvdiffrefineallhunkshighlight changed word none vdiffrefineallhunkssymbolrefine based symbol none vdiffrefineallhunkswordrefine based word fold keycommanddescription cc nvdiffnextfoldmove next fold buffer cc pvdiffpreviousfoldmove previous fold buffer cc cvdiffclosefoldclose fold point region cc cvdiffcloseallfoldsclose fold buffer cc tvdiffcloseotherfoldsclose fold buffer cc ovdiffopenfoldopen fold point region cc ovdiffopenallfoldsopen fold buffer ignoring case whitespace keycommanddescription cc cvdifftogglecasetoggle ignoring case cc wvdifftogglewhitespacetoggle ignoring case saving updating exiting keycommanddescription cc wvdiffsavebufferssave buffer cc uvdiffrefreshforce diff refresh none vdiffrestorewindowsrestore window configuration cc qvdiffquitquit vdiff evilmode user might prefer something like following use comma prefix normal state require vdiff require evil evildefinekey normal vdiffmodemap vdiffmodeprefixmap vimdifflike binding provided evilcollection evilcollectionvdiffel hydra using hydra package vdiffhydra allows quick movement change made buffer default life h command prefix map bind vdiffhydrabody directly customize key binding customization current customization option default whether lock scrolling default starting vdiff setq vdifflockscrolling diff programalgorithm use allows choice diff git diff along various algorithm provided command see vdiffdiffalgorithms associated command line argument setq vdiffdiffalgorithm diff command use specify list car command use remaining element argument command setq nt use folding vdiff buffer nonnil setq vdiffdisablefolding nil unchanged line leave unfolded around fold setq vdifffoldpadding minimum number line fold setq vdiffminfoldsize nonnil allow closing new fold around point update setq vdiffmayclosefoldonpoint function return string printed closed fold argument passed number line folded text first line width buffer setq vdifffoldstringfunction vdifffoldstringdefault default syntax table class code use identifying word vdiffrefinethischange useful option w default word w symbol word plus symbol constituent information see http wwwgnuorgsoftwareemacsmanualhtmlnodeelispsyntaxclasstablehtml setq vdiffdefaultrefinementsyntaxcode w nonnil automatically refine hunk setq vdiffautorefine nil represent subtraction ie deleted line default full mean add number fake line removed choice single mean add one fake line choice fringe mean nt add line indicate subtraction location fringe setq vdiffsubtractionstyle full character use filling subtraction line see also vdiffsubtractionstyle setq vdiffsubtractionfillchar
285,Lobsters,emacs,Emacs editor,OrgMode Tutorial Series,https://www.youtube.com/watch?v=sQS06Qjnkcc&list=PLVtKhBrRV_ZkPnBtt_TD1Cs9PJlU0IIdE,orgmode tutorial series,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature orgmode headline outline mode youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature orgmode headline outline mode youtube
286,Lobsters,emacs,Emacs editor,Effective Reproducible Research with Org-Mode and Git,https://www.researchgate.net/publication/281886434_Effective_Reproducible_Research_with_Org-Mode_and_Git,effective reproducible research orgmode git,,worth investing time also understand theneed simplify use thus currently many initiative port orgmode make work completely vior web browser already work notfully mature complete yet thus quite conﬁdentthat orgmode completely emacs independent thenear futurethere also problem regarding management andstoring large data ﬁles repository wellknown community already solved forthe mercurial revision control tool even exhaustive research could ﬁnd satisfactory solutionfor git many tool proposed leading gitannex shortcoming tool aregenerally meant alternative synchronization service like dropbox google drive rather helpdealing large data trace originating remote machine experiment large git repository severalgb hinder daily committing signiﬁcantlyslow pull checkout operation branch comprising huge number data set typically data art branch still unclear approach would scale multiple user working simultaneously code modiﬁcationsand experiment parallel theory work everyone suﬃcient experience tool workﬂow never tried two person another interesting feature yet experienced iscollaboration external user researcher couldclone project work try reproducethe result build upon work potentially improving code contribute data set back even thoughsuch utilization work smoothly could somepitfalls anticipated yetone could also ask question whether providing somuch information interest much informationmay make important thing harder distinguishregardless answer question believe anywaythat beyond actual experimental content openlaboratory notebook structure technique weused keep track information make analysis couldbe useful othersin near future plan write several simple scriptsthat completely automate workﬂow scriptswill packaged available debian linux system way gitﬂow approach software development time managing experimental researchalthough methodology undoubtedly improvableand several alternative nonetheless found itvery fast eﬃcient daily usage extremely beneﬁcial work encourage people buildon simple workﬂows conduct study itis eﬀective way conduct reproducible reference c augonnet thibault r namyst pa wacrenier starpu uniﬁed platform task scheduling heterogeneous multicore architecture concurrency computation practice feb buchert l nussbaum j gustedt workﬂowinspired modular robust approach experimentsin distributed system research report inria nov h casanova giersch legrand quinson andf suter versatile scalable accurate simulationof distributed application platform journal ofparallel distributed computing june c drummond replicability reproducibility noris good science proceeding evaluationmethods machine learning workshop k hinsen data code model reproducible research executable paper procedia computer science proceeding international conference computational science imbert l pouilloux j rouzaudcornabas l ebre hirofuchi using execo toolbox perform automatic reproducible cloud experiment international workshop using andbuilding cloud testbeds unico collocated ieeecloudcom sept j mirkovic b schwab j wroclawski faber b braden deter project advancing thescience cyber security experimentation test inproceedings ieee homeland security technology conference ieee hst mytkowicz diwan hauswirth p fsweeney producing wrong data without anything obviously wrong proceeding international conference architectural support programming language operating system asplosxiv page acm c ruiz richard j emeras reproducible software appliance experimentation proceeding ofthe international icst conference testbeds andresearch infrastructure development network community tridentcom c c ruiz sanabria richard b videau andi oleg managing large scale experiment distributedtestbeds proceeding iasted international conference acta press e schulte davison dye c dominik amultilanguage computing environment literate programming reproducible research journal statistical software l stanisic thibault legrand b videau andjf modeling simulation dynamictaskbased runtime system heterogeneous multicore architecture proceeding europarconference springerverlag aug l stanisic b videau j cronsioe degomme v marangozovamartin legrand performance analysis hpc application onlowpower embedded platform proceeding theconference design automation test europe date page eda consortium v stodden f leisch r peng editor implementing reproducible research r series chapmanand hallcrc apr companion starpusimgrid article hostedon figshare http online version access theexperimental data script org source
288,Lobsters,emacs,Emacs editor,Emacs standing alone on a Linux Kernel,http://www.informatimago.com/linux/emacs-on-user-mode-linux.html,emacs standing alone linux kernel,jump emacs shell emacs standing alone linux kernel user mode linux initialize rootfs least mb compile emacs without x statically install emacs sbininit compile mount statically boot linux emacs shell,jump emacs shell emacs standing alone linux kernel purpose experiment see emacs work alone linux kernel external tool needed mount rootfsemacs could used normal partition live cd experiment run user mode linux initialize rootfs least mb cd uml dd ifdevzero ofrootfsemacs yes rootfsemacs mkdir emacs mount loop rootfsemacs emacs cd emacs ln emacs create link simplify config prefix emacs cp dev dev boldly copy whole dev mkdir etc sbin tmp directory installed emacs cat etcfstab eof default eof compile emacs without x statically cd src tar jxvf cd cflagsstatic ldflagsstatic configure withoutx prefixemacs make make install install emacs sbininit cd emacs ln binemacs sbininit cat emacs eof message init starting setq autosaveinterval defun shutdown interactive yesornop really shut system actually killemacs signal emacs ie init make linux panic killemacs globalsetkey cxcc shutdown globalsetkey keyboardquit strangely cg work callprocess binmount nil log n rw remount fileexistsp etcmtab deletefile etcmtab callprocess binmount nil log f message init done eof compile mount statically cd src tar jxvf cd cflagsstatic ldflagsstatic configure make install mountumount mountmount emacsbin boot linux cd uml umount emacs linux launch emacs shell mx eshell ret l l ret get file edit option buffer tool help welcome emacs shell l l total drwxrxrx jul bin drwxrxrx jan dev lrwxrwxrwx jul emacs drwxrxrx jul etc drwxrxrx jul info drwxrxrx jul libexec drwx jul lostfound drwxrxrx jul man drwxrxrx jul sbin drwxrxrx jul share drwxrxrx jul tmp eshell eshell course quite number syscalls missing emacs available elisp primitive would hard enough everything emacs starting point another realistic alternative would use commonlisp implementation ffi portable hemlock emacs shell emacs easily used shell echo usrbinemacs etcshells chsh usrbinemacs gooduser echo setenv shell binbash gooduseremacs case user want use mx shell use rather setenv shell usrbinclisp echo eshell gooduseremacs launch eshell automatically one could use dired defaultdirectory instead su gooduser hosanna
289,Lobsters,emacs,Emacs editor,Org Mode - Organize Your Life In Plain Text!,http://doc.norang.ca/org-mode.html,org mode organize life plain text,editing clock entry,okay admit clocking fanatic clock everything work orgmode make really easy rather clock much stuff enough find easier get habit clocking everything make possible look back day see spending much time enough time specific project also help lot need estimate long something going take use clocking data similar task help tune estimate accurate without clocking data hard tell long something took fact use concept punching punching start end work day punch arrive work punch lunch punch lunch punch end day every minute clocked punchin punchout time punching defines default task clock time whenever clock would normally stop found default orgmode setup would lose clocked minute day minute minute add especially true write note moving done state case clock normally stop composed note good note take minute write clocking setup basically work like punch start clock clock predefined task orgid default task clock whenever clock normally stop clock task normally let moving done state clock clocking automatically clock time parent task move back predefined default task parent exists continue clocking whatever task work punch stop clock free change default task multiple time day clock moving project tree clock longer need simply single task get clocked punchin punchin prefix task project x task automatically becomes default task clocked time go project either punch punch task org file look like todoorg filetags personal task organization property clockmodelinetotal today id end working task simply clock task clocking move clock parent task todo keyword keep clock time subtree parent task todo keyword clock move back default clocking task punch clock task interruption occurs start capture task keep clocked time interruption task close cc cc work really well example consider following org file todo project next task todo task todo task task todo miscellaneous task work file following sequence punch start day clock organization task id todoorg file review block agenda pick todo miscellaneous task work next clock clock todo miscellaneous task complete task mark done cc ct stop clock move back organization task want work project clock task work task mark done clock task move clock project work task clock entire time working clocking subtask project clock time interval applied somewhere project tree eventually mark project done clock move back default organization task editing clock entry sometimes necessary edit clock entry reflect reality find maybe entry week occassionally clock task time away computer case previous clocked task still running count time task wrong make note time get back computer clock right task edit start end time correct clock history visit clock line entry quickly use agenda log mode l show clock line today use navigate appropriate clock line quickly go current clocked task agenda log mode better finding visiting older clock entry use l open agenda log mode show logged clock time move cursor clock line need edit hit tab edit clock entry put cursor part date want edit use keyboard mouse since clicking timestamp mouse go back agenda day hit arrow arrow key change time following setting make time editing use discrete minute interval rounding increment setq orgtimestamproundingminutes quote editing time shift arrow combination also update total clock line nice convenience always check nt created task overlap fixing time clock entry viewing log mode agenda new view agenda hit v c daily agenda clock gap overlap identified want clock entry accurate possible following setting show minute clocking gap setq orgagendaclockconsistencychecks quote maxduration minduration maxgap gapokaround
290,Lobsters,emacs,Emacs editor,An implemenatation of the Shen programming language in Emacs Lisp,https://github.com/deech/shen-elisp,implemenatation shen programming language emacs lisp,shen elisp shen elisp shen programming language installation installation quelpa spacemacs running getting started website caveat documentation orgbabel,shen elisp shen elisp implemenatation shen programming language elisp end goal provide easy way play shen installation hassle assuming use emacs firstclass development experience writing shen idea editor understands code much helpful one end roadmap involves full gamut source code introspection debugging tool installation port completely selfcontained however since lean heavily relatively new lexicalbinding feature emacs required also note installation emit large number bytecompiler warning nothing worry annoying attempt silence thus far failed quelpa install package directly github using quelpa tool quelpa shenelisp repo deechshenelisp fetcher github file shen el upgrade since alpha software upgrade end always pull latest version spacemacs user following add following dotspacemacsadditionalpackages variable dotspacemacsadditionalpackages shenelisp location recipe repo deechshenelisp fetcher github file shen el upgrade spc spacemacsemacsreload invoke shenrepl installation completed also us quelpa tool underneath running package installed shen repl start mx shenrepl getting started get started sample repl session showing define function toggle typechecking evaluate expression load sample file session assumes file called addshen tmp directory containing define add number number x x shen copyright c mark tarver wwwshenlanguageorg shen running elisp implementation elisp port ported aditya siram define sayhelloto name hello name sayhelloto sayhelloto world hello world tc true map x x list number load tmpaddshen add number number run time sec typechecked inference loaded symbol add number add string type error learn shen see website caveat port still alpha repl feature might expect available addressed starting unpleasant multiline definition allowed repl hit return completing function definition example repl spit cryptic error list byte ctrlg work leaf repl state thing delete buffer followed mx shenrepl functionsdatatypes defined repl however saved expressionsfunctions etc compiled elisp bytecompiler spit warning may steal focus away repl repl still emits elisp error occasion comment supported repl documentation port literate program written using orgbabel complete source documented shenelisporg also exported shenelisphtml easy browsing
291,Lobsters,emacs,Emacs editor,Emacs For Writers,https://www.youtube.com/watch?v=FtieBc3KptU,emacs writer,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature emacs writer youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature emacs writer youtube
292,Lobsters,emacs,Emacs editor,Fancy Rust development with Emacs,http://julienblanchard.com/2016/fancy-rust-development-with-emacs/,fancy rust development emacs,rustup installing rust toolchains page crate package need rustmode cargoel cargo rustfmt rustfmt racer racer companymode flycheckrust flycheck wrapping,fancy rust development emacs may rustup beta released week member church emacs needed update config bit inspired write post setup emacs great rust ide installing rust thanks rustup installing rust system even easier first λ curl http shrustuprs ssf sh prompted choose proceed installation default unless special requirement rustup previously named multirust create multirust directory store rust toolchains binary tool installed cargo make sure cargobin path otherwise add export path homecargobin path default project use stable toolchain rust time writing rustup lot functionality find github page crate package need part assume already working emacs know install package organize configuration rustmode rustmode handle syntax highlighting indentation various setting mx packageinstall rustmode cargoel cargo rust package manager cargoel minor mode allows u run cargo command emacs like cc cc cb run cargo build cc cc cr run cargo run cc cc ct run cargo test many others installation nothing fancy mx packageinstall cargo add addhook rustmodehook cargominormode rustfmt rustfmt format code according community style guideline like gofmt go language world automatically handled rustmode first install rustfmt crate λ cargo install rustfmt use cc tab lot emacs automatically indent current buffer would nice key combination would run rustfmt also fix indentation simply added addhook rustmodehook lambda localsetkey kbd cc tab rustformatbuffer ìndentbuffer function mentioned ever need defun indentbuffer indent current buffer according major mode interactive indentregion pointmin pointmax racer racer code completion source code navigation tool rust install racer crate λ cargo install racer rust source code needed autocompletion clone somewhere λ git clone git githubcom rustlangrustgit use racer within emacs mx packageinstall racer set like setq racercmd cargobinracer rustup binary path setq racerrustsrcpath usersjuliencoderustsrc rust source code path addhook rustmodehook racermode addhook racermodehook eldocmode addhook racermodehook companymode note racer relies companymode install flycheckrust flycheck prefered solution fly syntax checking compile code background highlight problematic part let mx packageinstall flycheckrust set like addhook flycheckmodehook flycheckrustsetup wrapping great rust support emacs syntax highlighting cargo handling code formatting error highlighting codecompletion source navigation happy rust hacking
293,Lobsters,emacs,Emacs editor,Why Atom Can’t Replace Vim (2014),https://medium.com/@mkozlows/why-atom-cant-replace-vim-433852f4b4d1,atom replace vim,emacs extensibility savebuffer killregion killregion vi composability forwardword moveendofline endofbuffer forwardparagraph movecursortobeginningofnextword movecursortoendofline movecursortobottom w g killword killline deletetoendofword deleteline dw dg yg g gu gu gug gu dt yt gut vim forever,good year text editor mit richard stallman guy steele wrote first version emacs berkeley bill joy wrote vi though called year yet reductionist say two editor built around one big idea hell let reductionist stand today looking modern editor like sublime text atom emacs big idea thoroughly learned vi big idea temacs extensibilityemacs big idea could modified extended cleanly functionality editor defined library command bound particular keystroke might savebuffer command bound cx c killregion command bound cw onif like key mapping change go ahead make killregion ck want change mapping want additional functionality write function language builtin function lisp case gnu emacs editor ui almost infinitely malleable mutated purpose desireif sound bit commonplace emacs big idea widely influential extensibility today standard feature serious editor sublime text us python instead lisp atom us coffeescript fundamental command keymaps built core even vim absorbed emacs extensibility vim script define new function mapped command keystrokesvi composabilityvi big idea nearly influentialvi fundamentally built command composability favor small generalpurpose command combined object compose larger command contrast emacs philosophical descendant including sublime text atom use monolithic specialpurpose commandslet say want move cursor forward word end line end file end paragraphemacs command motion forwardword moveendofline endofbuffer forwardparagraph respectively atom command three movecursortobeginningofnextword movecursortoendofline movecursortobottom vim got command w g weird function name heritage vi nonprogrammable past key command inextricably bound fundamentally ballparkbut let look delete command let say want delete word delete end line delete end file delete end paragraphemacs two function killword killline atom two le deletetoendofword deleteline vim though different vim one command delete delete name literally command get combined together command movement dw deletes next word end line dg end file end paragraphthis vim composability lead power emacs atom command deleting end file paragraph even command move place vim move location delete locationand composability power also learnability consistency command copying text vim know copy end linefileparagraph course yg respectively command increasing indent instantly know g convert lowercase gu sure enough gu gug gu work way course go learn mean move next occurrence character know dt yt gut composability vim command mean every command learn act target every motionobject learn make every command know powerfulthis philosophy minimalist command composed together fundamental originating philosophy unix vim exemplifies like editorvim forever course vim perfect vim script nobody preferred programming language outofbox experience terrible need install halfdozen thirdparty plugins thirdparty plugin manager get basic functionality working modal nature make difficult approach fundamental limitation extensibility particularly visually new shiny modern editor could oneup vim fixing hopefully issue editor replace vim need learn everything teach lesson emacs also lesson vi
294,Lobsters,emacs,Emacs editor,emacs-scrum | dynamic scrum report generation for org-mode buffers,https://github.com/ianxm/emacs-scrum,emacsscrum dynamic scrum report generation orgmode buffer,org scrum overview emacs orgmode example org ascii report exported html scrum card feature installation melpa manual install umlmodeel setup scrumtemplateorg upgrading usage scrum org file convention boilerplate header block meta data report block updating generated content scrum card customization,org scrum overview emacs text editor extensible one mainly used coding also anything else orgmode extension emacs provides simple way manage todo list organize note maybe project management scrum agile process software development orgscrumel extension orgmode generates table burndown chart may helpful scrum team generated content based existing content org buffer example example org file example ascii report generated file thing exported html section generated orgscrumel example generated scrum card feature orgscrumel generates following scrum board made task arranged column based todo status scrum board label plain text link item tree summary table example section provides following info developer estimatedtotal estimated time task actualtotal actual time spent donesum estimated time task completed remainingsum estimated time task yet completed pencil downdate expect complete task progresspercent task done burndown chart example section show actual progress smooth completion rate burndown chart ascii embedded image size customized see orgscrumasciisize orgscrumimagesize variable graph image want emacs display automatically open file enable orgstartupwithinlineimages task list example section generated orgscrumel columnview provides following info task taskididentifier task ownerlist developer assigned task first name considered owner estimatedhours task owner think task require actualhours spent task convenience orgscrumel also defines command mx orgscrumresettaskids set task id consecutive value orgscrumel also create pdf printing card sticking physical scrum board installation melpa run mx packageinstall ret orgscrum manual install download umlmodeel run mx packageinstallfile ret choose orgscrumel setup install gnuplot copy template scrumtemplateorg file system open emacs run mx orgscrumupdateall export report using one orgexportas command upgrading upgrading version note blockupdateburndown secion longer used remove file usage scrum org file convention several thing orgscrumel expects find org file running something missing let know boilerplate header block add block top file defines parameter orgmode us export defines todo state creating owner estimated actual property task title report title author name email email address column taskid owner todo column scrum board based todo keywords set header well todo todo started done deferred meta data generate report artifact orgscrumel need know find task data many developer team sprint schedule add thing property root headline task tree root headline must following property idset task sprintlengththe number day sprint sprintstartthe date sprint begin root headline must property developer specifying name number hour per day expect work project name prefixed wpd example wpdian mean ian expecting work project hour per day task headline todo owner estimated actual property ownerlist space delimited developer name first name considered owner task estimateda task owner time estimate hour actualthe number actual hour spent report block generated content written dynamic block embedded org file operating orgmode need block begin end statement know write generated content end need somewhere file begin blockupdateboard end begin blockupdatesummary end begin blockupdategraph end begin columnview hlines maxlevel id task end updating generated content generated content updated running mx orgscrumupdateall alternatively individual block updated cc cc point dynamic block begin line mx orgscrumresettaskids set task id consecutive value tree point value two digit starting one prefixed string given variable orgscrumtaskidprefix scrum card orgscrumel generate pdf requires multirowsty task card printed stuck physical scrum board card contains task id owner estimate actual headline text pdf named scrumcardspdf customization orgscrumel defines several variable used customize content generates orgscrumasciigraphif export burndown graph ascii else use embedded svg image orgscrumasciisizefor ascii burndown graph size width height orgscrumimagesizefor svg burndown graph size width height orgscrumtaskidprefixprefix added taskids default orgscrumboardshowownersif true show task owner scrum board orgscrumboardlinksif true make item scrum board link orgscrumboardformatspecify format scrum board item id priority task closedate id priority task closedate id owner closedate id priority task owner closedate
295,Lobsters,emacs,Emacs editor,Emacs Autotetris Mode,http://nullprogram.com/blog/2014/10/19/,emacs autotetris mode,article heuristic number hole maximum height mean height height disparity surface roughness emacsspecific detail problem global state ruleofthumb,october decade emacs come builtin tetri clone originally written xemacs glynn clements run mx tetri time want play anyone busy waste time playing tetri earlier year wrote autotetrismode play emacs game automatically load source autotetrismodeel mx autotetris start builtin tetri make move work best byte compiled time read article interested trying hand tetri ai like thing emacs builtin tetri game hackable also pretty simple easy understand rather write chose build upon one heuristic particularly strong ai pay attention next piece queue know game basic shape try maximize score clearing multiple row goal continue running long possible since able get point game fast ai unable move piece fast enough rate limited like human player mean good enough new piece appears top screen ai memory try placing possible position possible orientation position run heuristic resulting game state summing five metric metric scaled handtuned weight adjust relative priority smaller better position lowest score selected number hole hole open space solid block even hole accessible without passing solid block count hole maximum height add height tallest column column height includes hole column game end column touch top screen something like kept check mean height add mean height column higher closer losing game since row least one hole similar measure hole count height disparity add difference shortest column height tallest column height number large mean making effective use playing area also discourages ai getting annoying situation remember really need piece never seems come brief moment truly believe version playing rigged surface roughness take root mean square column height rougher surface leaf fewer option placing piece measure similar disparity measurement emacsspecific detail position selected ai sends player input limited rate game moving piece place done calling tetrismoveright tetrismoveleft tetrisrotatenext normal game bound arrow key builtin tetrismode quite designed kind extension need little bit help defined two piece advice create hook hook alert ai two specific event game game start fresh new piece defadvice tetrisnewshape autotetrisnewshapehook activate runhooks autotetrisnewshapehook defadvice tetrisstartgame autotetrisstartgamehook activate runhooks autotetrisstartgamehook talked problem global state fortunately tetrismode store game state global variable store everything bufferlocal variable exploited use ai perform memory heuristic check creates copy game state manipulates copy copy made way clonebuffer tetri buffer tetrismode function work equally well clone use existing game rule properly place next piece available position game rule take care clearing row checking collision wrote autotetrissaveexcursion function handle messy detail defmacro autotetrissaveexcursion rest body restore tetri game state body completes declare indent defun withcurrentbuffer tetrisbuffername let autotetrissaved clonebuffer tetrissaved unwindprotect withcurrentbuffer autotetrissaved killlocalvariable killbufferhook body killbuffer autotetrissaved killbufferhook variable also cloned want tetrismode respond clone killed clear hook basically watching feel like making dumb mistake placing piece optimal position recovers well situation almost every time must know currently better player ruleofthumb calling ai successful
297,Lobsters,emacs,Emacs editor,Emacs News,http://sachachua.com/blog/category/emacs-news/,emacs news,,
298,Lobsters,emacs,Emacs editor,Composable editing for Emacs,https://github.com/paldepind/composable.el,composable editing emacs,composableel repeat twice row introduction benefit feature installation basic usage repeat twice row documentation default binding default object binding create custom composable command repeating composable mark mode object binding successively calling composable command prefix argument region command pair movement modeline color indicator whichkey integration whichkey kill specific option,composableel let composable editing composableel brings composable text editing emacs improves basic editing power emacs making command combineable inspired vim implemented way reuses existing emacs concept make simple compatible existing emacs functionality infrastructure composableel brings together existing feature powerful way note composableel early stage healthy amount feature already open idea addition well feedback documentation implementation greatly appreciated aware people emacs community skeptical towards composable editing say topic readme probably write point example usage refer table key binding see entire set default command cw l kill current line mw f save word kill ring comment structured expression cm h h reindent current paragraph next last h repeat action object cw cw kill current line line selected calling composable action twice row composableel ship default set keybindings activated composablemode using composablemode optional contains nothing binding mode overwrites bunch default emacs binding composable variant instance cw bound composablekillregion invocation must proceeded object instance cw ce kill end line introduction composable editing simple abstraction make possible combine action object key insight composableel emacs already provides primitive implement composable editing action emacs command operates region thus killregion commentregion action object specified command move point optionally set mark well example moveendofline markparagraph note people familiar vim composableel call action called operator vim term object cover motion text object vim action object name thing already present emacs primary feature composableel introduces composable command composable command associated action invoking work like region active associated action invoked directly otherwise nothing happens editor listening object activates set binding make convenient input object instance pressing l make action operate current line object entered action invoked specified object benefit one primary benefit composable editing action object orthogonal learn new motion apply existing action vice versa thus use action object need remember binding instead binding additional benefit action need always accessible object bound object layer thus get away regular binding instead feature installation install melpa mx packageinstall composable alternatively download composableel place load path require composable composablemode activates default keybindings composablemarkmode use composable cspc basic usage composableel ship default set keybindings activated composablemode using composablemode optional contains nothing binding mode overwrites bunch default emacs binding composable variant instance cw bound composablekillregion invocation must proceeded object instance cw ce kill end line example usage refer table key binding see entire set default command cw l kill current line mw f save word kill ring comment structured expression cm h h reindent current paragraph next last h repeat action object cw cw kill current line line selected calling composable action twice row cspc mark back indentation documentation default binding default binding overwrite noncomposable default binding emacs instance cw bound composablekillregion instead killregion binding command cw composablekillregion mw composablekillringsave composablecommentoruncommentregion cm composableindentregion cx cu composableupcaseregion cx cl composabledowncaseregion default object binding composable command followed object command move point make sense type character invoking composable command therefore special layer binding activated invoking composable command make easy select object without using modifier note normal binding except one overwritten still usable instance kill word forward cw f cw mf besides binding mentioned bound digitargument ie work numeric prefix argument binding command composableendargument discussed composablebeginargument discussed movebeginningofline f forwardword b backwardword u markwholebuffer n nextline p previousline l composablemarkline backwardparagraph forwardparagraph marksexp w markword composablemarksymbol h markparagraph backtoindentation j composablemarkjoin composablemarkuplist g leave composableobjectmode cg leave composableobjectmode create custom composable command suppose function renamevariableregion replaces occurrence variable name region another name make composable using function composabledef function must passed list action command operate region composabledef renamevariableregion example define composable command composablerenamevariableregion repeating repeating feature allows repeat last action object combination pressing last key sequence repeatedly instance cw l l l effect cw lcw lcw l repetition also combined numeric prefix cw l l l kill line feature disabled setting composablerepeat nil composable mark mode composable mark mode activates object binding mark activated cspc setmarkcommand make possible mark thing easily using object binding example cspc l mark line cspc mark symbol layer active immediately mark set insures composablemarkmode interfere deleteselectionmode one instance perform cspc l h l select line object binding turned subsequent h selfinsertion successively calling composable command composable command called twice row action executed region specified composabletwicemark default composablemarkline thus default cw cw kill one line work repetition well instance cw cw cw kill two line prefix argument composableel defines two prefix argument composablebeginargument composableendargument modify chosen object used idea mark thing know thing start end thus perform action entire thing also point begining end thing similarly pair command move beginning end thing use two unison mark entire thing make possible use binding multiple way instance often perform action entire paragraph rarely beform action point end paragraph region command given prefix argument selecting region command end beginning region used ie instead applying action entire marked region region point begining end region used instance cw l deletes end line break l mark entire line due end marked region used similarly cw h kill one paragraph beginning end cw h kill one paragraph backwards cw h kill one paragraph forward pair movement function composableaddpair define movement command others pair instance following pair defined default composableaddpair forwardword backwardword alternatively multiple several pair defined composableaddpairs prefix argument specified paired movement command begin end treated two command used establish region instance mw f mw f save current word kill ring default defined pair forwardword backwardword select current work moveendofline backtoindentation select line without indentation nextline previousline forwardparagraph backwardparagraph forwardsentence backwardsentence modeline color indicator variable composablemodelinecolor defined change modeline background color composable mode active default value variable cyan set valid color nt want color change modeline set variable nil whichkey integration composable integrates box package whichkey installed whichkeymode enabled composable command show menu listing possible command disable feature add setq composablewhichkeys nil config kill specific option composable implement special version copyregionaskill called composablesaveregion default composable always highlight copied region independently region active calling kill command different copyregionaskill disables region copy composable make sense way user want default behavior set setq composablecopyactiveregionhighlight nil
299,Lobsters,emacs,Emacs editor,Running Emacs on Android,http://endlessparentheses.com/running-emacs-on-android.html,running emacs android,emacs app generous comment termux hacker keyboard keep track userselected package,last night fit boredom far away laptop physical keyboard reasonable person would done decided install emacs phone last attempt crossing bridge year ago resulted nothing absolute failure something felt different time something felt right first stop obvious one emacs app play store claiming exactly needed previous attempt app given inconsistent result crashing often running time however even install play store greeted failure install error instead lost though generous comment lessthangenerous rating point new direction termux beacon hope robust app claim offer powerful terminal emulation extensive linux package collection installing indeed greeted terminal emulator impressed used terminal apps tentatively run command instructed manfromthereview apt update apt install emacs surprisingly played even better expected installing emacs would fine installing version exceptional init file sure incompatible emacs dare even hope could reproduce entire setup minute device proceeding hopped back play store installed hacker keyboard get access modifier key starting emacs terminal worked expected bit slowly streak good fortune end first command issued mx listpackages failed cryptic message nonexistent file happen thanks fredrik patch package menu displayed refused refresh cz emacs try mkdir tmp permission denied ok expected sudo work either issue fg go back emacs try different approach setq temporaryfiledirectory tmp listpackages work try install company gnu repository work fact everything work run mx globalcompanymode popup menu everything point probably way satisfied senseless pursuit high realize next step port real init file fortunately keep sync via dropbox easy make available phone open dropbox app find initel mark available offline thing initorg dropbox save file somewhere deep inside data directory automatically syncs make local change though manually ask pull remote change back termux send emacs background cz cd emacsd ln sdcardandroiddatacomdropboxandroidfilessomegibberishemacsdinitel ln sdcardandroiddatacomdropboxandroidfilessomegibberishemacsdinitorg actually finding file took bit trial error getting file directory tabcomplete way several gibberish directory name finding right one fg back emacs next obstacle package know init file going load install necessary package sadly never foresight rewriting configuration something like usepackage something almost good like mentioned emacs keep track userselected package able go customsetvariables find sizeable list packageselectedpackages ceremony evaluate whole thing cmx issue mx packageinstallselectedpackages take good moment find termux work well background switch youtube app watch couple video switch worked moment truth still feeling high mighty success respect odds init file thousand line elisp involves package whole lot couldgowrong potential take deep breath mentally try lower expectation cx cc back terminal carefully type emacs followed plunge headfirst error something tmp directory solved one bit digging reveals triggered serverstart serversocketdir bound comment variable explain use temporaryfiledirectory emacsclient read init file defvar serversocketdir understandable help impatiently wrap call serverstart ignoreerrors try another error time complaining setfringemode void function lot easier understand emacs binary provided termux compiled terminal many graphical function defined also easy solve add conditional around function call fboundp setfringemode setfringemode nil third time cx cc emacs work error even warning beloved darktooth theme unrecognizable indicative sign emacs setup smartmodeline discretely smile bottom screen beacon eagerly blink soon start scrolling unmistakable coziness personal keybinds reach even limited interface touchscreenkeyboard get point lesser person might feel anticlimax hint perhaps feel safe reassured knowing wherever whenever need emacs always sitting pocket need get one bluetooth keyboard
300,Lobsters,emacs,Emacs editor,Emacs site redesign,https://www.gnu.org/software/emacs/,emacs site redesign,emacs released aug emacs emacs released aug emacs emacs released apr emacs emacs released may emacs emacs released september emacs emacs released april news emacs released september date older release news,emacs released aug emacs wide variety new feature including builtin support arbitrarysize integer text shaping harfbuzz native support json parsing better support cairo drawing portable dumping used instead unexec support xdg convention init file additional earlyinit initialization file builtin support tab bar tabline support resizing rotating image without imagemagick emacs released aug emacs maintenance release new gpg key gnu elpa package signature checking emacs released apr emacs wide variety new feature including emacs module built outside emacs tree source emacs compliant latest version unicode standard dired z command directory name compress file emacs released may emacs wide variety new feature including limited form concurrency lisp thread support optional display line number buffer emacs us double buffering reduce flicker x window system flymake completely redesigned tramp new connection method google drive new singleline horizontal scrolling mode systemd user unit file provided support color capable text terminal emacs released september emacs fix significant security hole emacs released april emacs mostly bugfix release information read news file emacs released september see also date older release emacs wide variety new feature including emacs load shareddynamic library module dynamic emacs module shared library provides additional functionality use emacs lisp program like package written emacs lisp would experimental support cairo drawing enhanced network security tlsssl certificate validity like via new network security manager nsm new minor mode electricquotemode using curved quote type character folding support isearchel new improved facility inserting unicode character cx shorthand several char hyphen nonbreaking hyphen figure dash information read news file
302,Lobsters,emacs,Emacs editor,A Brief Glance at How Various Text Editors Manage Their Textual Data,http://ecc-comp.blogspot.com/2015/05/a-brief-glance-at-how-5-text-editors.html,brief glance various text editor manage textual data,summary foreword gtktextbuffer gtktextview gtktextbuffer tyreese broadway project conclusion,google chinese proverb efficiency efficiency thing right effectiveness right thingspeter f drucker quite chinese sound wise enough summary review gnu moe plan sam bill joy exvi gnome gtktextviewgtktextbuffer gnu emacs due popular demand scintilla manage textual data article subject update foreword short review various text editor manage textual data within single buffer like many programmer fascination text editor want best tool job best mean want editing high physical efficiency using keyboard shortcut command key maybe odd time mouse come handy others want editor virtually efficient make resource ram disk space small race though editor mentioned article allow see author decided go get three choice may choose two editor section includes copy diagram property highlighted note way accurate representation text editor text editor complex application many pro con review ignores cover let begin journey first public release september gnu moe powerful clean console text editor ascii character encoding modeless userfriendly interface online help multiple window unlimited undoredo capability unlimited line length global searchreplace buffer block operation automatic indentation word wrapping file name completion directory browser duplicate removal prompt history delimiter matching text conversion fromto romanization etc tl dr almost like gnu nano surface observation moe small c console text editor easy use code base easy navigate remains small simple took around minute find insertionrelated code like say tl dr nano nt exist moe would certainly replacement moe see text list line column access data array data line col buffer initialized vector line file loaded line surpasses limit editing add amount max line buffer mean moe always us vector line started nt often open file line would wasteful us behavior becomes useful line mark although little wasteful say typing hit line mark moe allocate space line resource efficient unless someone typically type additional line millionth line besides though moe simple interface easy memorable keyboard shortcut small program size make suitable embedded system equipped generous amount ram first public release sam interactive multifile text editor intended bitmap display textual command language supplement mousedriven cutandpaste interface make complex repetitive editing task easy specify sam relatively small compared vim emacs fact probably second smallest editor mentioned review ed successor much generic sam work characterlevel instead linelevel one first editor separate ui actual editor sam used commandline graphical text editor command language make scriptable sam data linear sam manages buffer variablesized block starting expand n byte point n byte greater however many time n fit block remainder byte put final block make sam fairly efficient editor read cache write block disk navigating data preserve ram issue apparent working huge file unlikely occur user decide open gb file bare sam write block disk disk may large half taken monstrous file leaf u let say taken operating system file enough sam caching probably rare case though likely safe ignore overall say sam fairly efficient managing growth buffer requires n time insertdelete text physically efficient either command language definitely help best part sam leaf desired mentioned earlier program size fairly small even statically linked plan first public release vi visual display oriented text editor based ex ex vi run code possible get command mode ex within vi viceversa shocked see original vi code looked like full hack tried clever managing terminal handle separate real terminal using read line back buffer took almost hour find code actually placed text buffer bright side though vi still small compared bigger brother vim fast efficient design baud connection terminal like sam vi also command language scripted keyed meaning command happen type descendant ed vi also linebased text editor vi represents buffer array line simply add deletes line similar gnu moe discussed earlier vi past end buffer request line system support page page nt zero ridiculously high number vi allocate page size divided size line byte resize buffer page size zero ridiculous number extend buffer otherwise none happens vi extend buffer worth line vi us similar method sam grow buffer efficient consequence vi become slow working huge file traverse bigger linear array hard time working large line luckily real world large line common thing encounter source code file vi mostly known powerful physical efficiency though people use rarely care either first public release april gtk extremely powerful framework multiline text editing primary object involved process gtktextbuffer represents text edited gtktextview widget display gtktextbuffer buffer displayed number view one important thing remember text gtk encoding featureful developed year gtktextview coupled gtktextbuffer make extending functionality editor easy good example extending gtksourceview add source code support easy hack build editor scratch night see tyreese simple editor unlike majority editor support separate ui editor actually case go step separate ui editor editor buffer well made essentially definition modern text editing gtktextbuffer actually us gtktextbtree simply binary tree data structure proper term rope data structure text inserted gtktextbtree creates new segment node put new text text deleted segment simply removed issue build editor component make virtual efficiency high consequently terrible physical efficiency invest time creating reliable interface likely vi overlay surprised programmer nt created overlay vi emacs gtktextview definitely opportunity someone another disadvantage order use component include entire gtk library make gtk based editor larger editor although rare surprisingly portable gtk editor good chance running window mac gnulinux bsd even web browser thanks broadway project first public release march gnu emacs extensible customizable text core interpreter emacs lisp dialect lisp programming language extension support text editing better description would probably emacs anything want actually began reuse emacs extensibility unparalleled anything also separate ui editor part allowing different uis restricted terminal absolutely awesome people coming vi one people soon installed emacs get vi functionality mx listpackages navigate evil package install restart emacs boom right home make emacs dangerously powerful able slap front end get emacs functionality awesome emacs us data structure called gap buffer split text three part first part gap second part gap grows shrink depending insert deletion gap becomes small new gap created efficient insertion deletion n navigation make slightly worse rope better majority solution fact simplicity editor creator opt gap buffer make code easier maintain work data emacs physically example install evil package virtually efficient price bigger program size age computer least disk least ram issue opted emacs editor time first public release march scite scintilla based text editor originally built demonstrate scintilla grown generally useful editor facility building running program best used job simple configuration use building test demonstration program well scite scintilla due popular demand added scintilla page scintilla basis many text editor window architecturally similar gtktextviewgtktextbuffer scintilla separate part editor document cellbuffer author scintilla noted best suited prototype simple configuration scintilla unfortunately opts inferior textual data management similar gnu moe using list line unlike gnu moe though scintilla threadsafe us readerwriter architecture huge apology neil messed comment clarifies scintilla really author scintilla scintilla use list line text stored gap buffer substance field code shown like emacs line start position added insertline method also stored gap buffer step enables modification close proximity affect element scintilla par string see return carriage new line control code trying compensate unix window lineendings simply add line buffer mean scintilla nt waste space growing buffer always use optimum amount space storing text memory inefficient giant line scintilla slow right go every character block determine new line copy paste external source could potentially see slow code editor though rarely problem like gtktextview scintilla editor interface lacking key binding overlay allow user use vi emacs keybindings box conclusion interesting see editor approached textual data management problem amazes even feasible fo world project open source would never done study improve knowledge tool use every day work thank fo enthusiast like add editor email leave comment glad look keep awesome
303,Lobsters,emacs,Emacs editor,Emacs multiple cursors plugin epic demo,http://emacsrocks.com/e13.html,emacs multiple cursor plugin epic demo,cæ get cx r hspc get cx cq cæ get cx ce get mx mx,cæ mcmarknextlikethis find mark next part buffer matching currently active region also keeping current region get cx r yankrectangle yank last killed rectangle upper left corner point hspc setrectangularregionanchor think one setmark except marking rectangular region exceedingly quick way adding multiple cursor multiple line get cx cq diredtogglereadonly edit dired buffer wdired set readonly cæ mcmarkalllikethis find mark part buffer matching currently active region also keeping current region get cx ce evalandreplace evaluate last sexp replace result get mx kmacronamelastmacro assign name last keyboard macro defined mx insertkbdmacro insert buffer definition kbd macro name lisp code
304,Lobsters,emacs,Emacs editor,"Evil Mode: Or, How I Learned to Stop Worrying and Love Emacs",https://www.youtube.com/watch?v=JWD1Fpdd4Pc,evil mode learned stop worrying love emacs,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature evil mode learned stop worrying love emacs youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature evil mode learned stop worrying love emacs youtube
306,Lobsters,emacs,Emacs editor,Parinfer for Emacs Lisp,https://github.com/oakmac/parinfer-elisp,parinfer emacs lisp,parinfer emacs lisp parinfer emacs lisp parinferjs test main parinfer repo usage property list parinferjs api testel perfel development license isc license,parinfer emacs lisp parinfer implementation emacs lisp parinfer implementation written emacs lisp allows parinfer reach emacs user easily please note project solely library implement core parinfer algorithm emacs extension used editing basically port parinferjs json file test folder copied directly main parinfer repo first emacs lisp project likely lot room improvement implementation pr welcome usage library namespaced parinferlib expected extension author use namespace parinfer expose two public function parinferlibindentmode txt option parinferlibparenmode txt option txt string text want process optional option property list plist following key cursorline zerobased line number cursor cursorx zerobased xposition cursor cursordx amount cursor moved horizontally something inserted deleted used paren mode previewcursorscope nil set indent mode show cursor scope empty line inserting closeparens read return value plist key success nil indicating input properly formatted enough create valid result text string full text output original text success nil cursorx new xposition cursor since parinfer may shift around changedlines vector plists representing line parinfer changed plist key lineno zerobased line number line full text line error plist success nil containing key name name error message message describing error lineno zerobased line number error occurred x zerobased column error occurred tabstops vector plists representing tab stop populated indent mode cursor position supplied plist key x zerobased xposition tab stop lineno zerobased line number openparen responsible tab stop ch character openparen responsible tab stop eg library closely mirror parinferjs api please see information usage example found testel perfel development run test test performance license isc license
307,Lobsters,emacs,Emacs editor,slime-macrostep,http://kvardek-du.kerno.org/2016/02/slime-macrostep.html,slimemacrostep,jon oddie macrostep cffi via melpa git,slime got new contrib called slimemacrostep courtesy jon oddie also wrote underlying macrostep package slimemacrostep interactive inline macroexpander look quick demo using cffi example start expanding toplevel withforeignobject form expand withalien form regret collapse back proceed expand everything else including compiler macro nice feature slimemacrostep expansion annotated show form expandable macrostepexpand jump automatically next expandable form make stepper pressing e repeadly step macroexpansion plus expands macrolets like try please grab slime bleeding edge via melpa git enabled default use slimefancy meta contrib feedback welcome
308,Lobsters,emacs,Emacs editor,Removing support for Emacs unexec from Glibc,https://lwn.net/SubscriberLink/673724/d9809e674cde21df/,removing support emacs unexec glibc,buying subscription emacs build process would like eliminate posted voiced belief reposted suggest mentioned wonder thought wondered suggested seemed interested making unexec portable message log,know lwnnet subscribersupported publication rely subscriber keep entire operation going please help buying subscription keeping lwn net jake edgejanuary emacs editor requires lot lisp code program state start job led emacs developer add unexec feature quickly load startup unexec always something hack employ fairly ugly intrusive mechanism job nonstandard extension gnu c library glibc required plan eventually eliminate extension met dismay emacs community part emacs build process simpler version editor called temacs built program consists c file emacs comprise emacs lisp interpreter much else run load standard lisp startup file dump copy running program dump used binary user invoke want run emacs mechanism used emacs unexec function convert running program new executable need handle memory allocated malloc also requires glibc internal tracking housekeeping data structure memory allocation preserved dumping restoring mechanism us mallocgetstate mallocsetstate extension glibc developer would like eliminate midjanuary florian weimer posted headsup message change emacsdevel mailing list said likely coming year done allow change heap layout glibc release standard conformance performance security improvement intent existing emacs binary still continue work point emacs build would change continued also noted supporting existing binary cause significant ongoing maintenance overhead glibc upstream basically maintaining separate malloc implementation indefinitely emacs maintainer john wiegley voiced concern alteration needed emacs would rather significant change lowlevel code functioning long time suggested extending timeline change discussing way provide similar functionality weimer though belief time tackle root fixing emacs seen user interface make change make sure replacement available need arises even development pay fairly soon toolchain side change forced emacs another gnu project always likely get attention richard stallman emailed largely list glibc steering committee glibcsc mark brown reposted normal glibc mailing list libcalpha steering committee really exist form list anymore led carlos odonell suggest mailing list closed reposted message stallman largely echoed wiegley consider making change break gnu package way hard fix must decide unilaterally package important emacs need package maintainer cooperate please discussion emacs developer decide together course action best gnu system time scale action fit release schedule best stallman also mentioned contacted glibc maintainer emacsdevel thread led weimer wonder appropriate move discussion private list nt really match glibc development proceeds today stallman though thought would better discussed private sensitive issue best discus without audience particular cat bag point however conversation emacsdevel proceeded looking dumpload functionality whether still needed way implement nt require intimate knowledge internals glibc memoryallocation technique ali bahrami work solaris linker wondered even made sense continue support unexec functionality computer gotten lot faster since optimization added might make sense simply leave behind fight save unexec encourage measure impact see still matter would worthwhile consider mean getting byte memory quickly nt involve second guessing object layout memory allocation process layout speaking linker guy linking going get dynamic complex going forward might glad road game bahrami others set measure difference starting emacs starting temacs must load different startup file became clear still substantial difference half second versus five second though depends various factor different trick tried success main problem remained david caldwell suggested one possible approach taking compiled lisp file elc file temacs load adding binary one smash elc file temacs load part undump process put temacs object maybe relinking giant array portable shoving section objcopy really portable stallman seemed interested idea real test implementing according paul eggert making unexec portable todo list light fire concern emacs might build using new glibc api even written yet came earlier thread problem said emacs still build run even glibc api changed emacs configure probe glibc mallocrelated api fall back malloc implementation otherwise another message eggert outlined emacs us unexec might able get along without emacs could live without current unexec semiportable way xemacs write data mmap later know detail xemacs approach though suggested possibility well discussion continued looking various way emacs accomplish goal without requiring glibc maintain heap layout forever need consider matter privately certainly nt apparent thread many change sort developer side change simply worked thing perhaps glitch road plenty notice seems like direction emacs developer wanted go anyway hard see major pothole road ahead log post comment
310,Lobsters,emacs,Emacs editor,How I set up a new Mac using Emacs and literate programming,https://gist.github.com/stig/c792dc50db17e8ac253d,set new mac using emacs literate programming,set new mac install apps appstore source emacs fish csshx etc story configure system preference terminal system preference keyboard input source date time reload reload,instantly share code note snippet setup new machine set new mac install apps first install apps try use appstore everything buth unfortunately possible ymmv appstore slack tweetbot copyclip xcode fantastical source emacs fish csshx etc precious story configure system preference installs running update preference try manage change default possible make life simpler terminal mark novel default profile default write comappleterminal default window setting novel default write comappleterminal startup window setting novel text tab set default text size set font menlo shell tab change shell exit dropdown close shell exited cleanly keyboard tab tick use option meta key system preference keyboard shortcut tab change press tab move keyboard focus control mission control turn shortcut move left space move right space input source tick show input menu menu bar add dvorak input source date time date time tab use timeeuroapplecom clock tab tick show day week perform action time signed another tab window reload refresh session signed another tab window reload refresh session
311,Lobsters,emacs,Emacs editor,Ymacs (2009),http://www.ymacs.org/,ymacs,introducing ymacs ymacs emacslike editor work browser dynarchlib news interactive code commit log demo much emacslike want become one start dynarchlib clperec hunchentoot clwho similar project codemirror claim emacslike codemirror marijn haverbeke postmodern story writing codemirror read architecture,introducing ymacs ymacs emacslike editor work browser currently starting tag code repository work recent version firefox geckobased browser google chrome apple safari project based dynarchlib ajax toolkit news tagged version thought dead huh smallish fix lately related o clipboard better lisp mode implement additional parser support better forwardsexp cmf backwardsexp cmb added commentdwim commentregion uncommentregion currently work javascript mode lisp mode color theme etc support chrome safari officially tagged version repository added cs mode togglelinenumbers cx l markwholebuffer cx h various small fix improvement tagged version repository lot new stuff although uservisible change big case refactoring needed command separated function interactive command mx completion menu list interactive command support subset emacs interactive code defining command came easiness define command take mg move certain line number also prefix argument cu tagged version code repository look mx mx evalregion even tab completion command name command list nt meant called start refactoring soon new stuff cx b switch buffer tab completion available default value switch previously visited buffer missing using cx b also create new type name use mx javascriptmode xmlmode etc mx htmlizeregion create new buffer put html containing current syntax highlighted code us class inline style check commit log checked new bunch change updated build lisp mode basic syntax highlighting automatic indentation paren matching autoclosing cc text selection using mouse fixed variablewidth font basic markdown mode various fix press ctab demo reach lisp markdown buffer test added support variablewidth font fixed keymap mac o x use command key meta fixed cursor position overlay display firefoxmac added font family font size color theme menu demo application new color theme light background much emacslike course emacs gigantic beast year history ambitious enough nt enough time copy feature however ymacs currently following think worth name emacslike movement key character arrowright arrowleft cf cb line arrowup arrowdown cn cp word carrowright carrowleft mf mb paragraph carrowup carrowdown even balanced expression mode cmf cmb cmn cmp really slow currently beginning buffer chome end buffer cend emacslike text manipulation command transpose char ct transpose word mt transpose line cx ct upcase word mu downcase word ml capitalize word mc center line m word killing md mdelete cbackspace dabbrevexpand autocomplete word point text filling mq emacslike editing mode currently javascript xml lisp markdown mode provide custom keymaps syntax highlighting automatic indentation highlighting matching parenthesis feature implemented emacslike fashion undo queue mark kill ring transient mark minibuffer mode line interactive search multiple buffer split frame cx cx split frame cx deleteotherframes prefix key keymaps marker overlay text property mx course feature nt hardcoded way ca nt change ymacs customizable extensible example happy emacs key bingings fairly trivial define different default keymap mimic say eclipse visual studio however familiar hope implemented contributor want become one start like cool project ymacs started necessity ironic hacking day almost forgot purpose mind kept adding feature make emacslike faster stable currently still nt feature wanted first place however got close easy add decent lispmode started one day wanted learn common lisp read material done trivial application see like next thought ok let website started building pretty simple content management system ajax interface based dynarchlib thing progressing nicely albeit rather slowly implemented database postgresql clperec serious hassling learn use latter almost completely undocumented discovered hunchentoot fine web server written common lisp clwho author hunchentoot btw guy fantastic clwho cool way write xml thus html directly lisp could call template engine really lisp get compiled machine code depending lisp implementation nice template run blazing fast cm using wysiwyg widget editing page pretty cool page one clwho template initially thought template would reside server would editable ajax interface thought quickly hacked new table database hold template threw together simple editor using textarea first tried realized writing lisp textarea unbearable downright impossible count parens look eye hurt find string properly closed editing command etc blaming nt designed saying ca nt write code similar project codemirror looked alternative inbrowser source code editor one even claim emacslike seems joke one worth mentioning codemirror project claim inbrowser code editing made almost bearable stand work pretty well fast enough good syntax highlighting automatic indentation language checked author marijn haverbeke found lisp programmer actually built stuff cm prototype indirectly relies cool postmodern nice library accessing postgresql database lisp codemirror based designmode read marijn story writing codemirror see struggle man went order build editor top interface way good time give proper credit story inspired handling syntax highlighting indentation using resumable parser save state end line first thouhgt using codemirror really wanted emacs keybindings experience designmode know extremely difficult figure caret would necessary implement movement word transposition command upcasedowncasecapitalize seemed crazy rejected idea modify codemirror besides fun without designmode without textarea well draw text draw cursor intercept keypress event figure ymacs read architecture interested
312,Lobsters,emacs,Emacs editor,Reading offline in batches with Org Mode,http://blog.garage-coding.com/2015/12/12/offline-reading-setup.html,reading offline batch org mode,maff web archive opensave maff file ca nt open,looking way read batch mean getting online content easy way archive going offline starting read along way make note summarize make list open question content read repeat whole process majority document read blogposts documentation mailing list wikipedia page newspaper article link people recommend read newsycombinatorcom article lobster article stackoverflow post sure multiple solution nt read writing batch also accumulate time go indexing would required make searchable look thing using let take one one snaplinks extension allows select number link page open new tab maf extension creates maff archive one type web archive store page browser tab including javascript cs image orgmode used view content maff archive open page inside since orgmode also great notetaking tool summarize page take note reading last list orgmafflibsh bash library allows manipulate maff file maff archive easy make open page firefox select link save tab maff archive look examplemaff created zip archive webpage done easily get content archive orgmode like image orgmode link pointing maff file path disk file inside example orgmode link one web page archive look like shell firefox newtab jar file tmpexampleexamplemaff lobster work firefox support jar url chrome hand nt yet ability opensave maff file ca nt open jar url orgmafflibsh bash script composed function maffexport function take content maff lib output orgmode tree compatible listing content open file orgmode maffexport mafffile rdffiles unzip qq l mafffile rdf awk print echo maff file mafffile rdf rdffiles dirname echo rdf perl ne dd print rdfcontent unzip q c mafffile rdf title echo rdfcontent xmlstarlet sel v maf title rdf resource perl pne xchr ychr x g g g origurl echo rdfcontent xmlstarlet sel v maf originalurl rdf resource indexfile echo rdfcontent xmlstarlet sel v maf indexfilename rdf resource echo origurl w fulljarurl echo jar file mafffile dirname indexfile fulljarurl pdf outfile echo origurl cut pdf cmd mkdir devnull unzip c mafffile dirname indexfile outfile nohup bash c okular outfile devnull devnull devnull devnull exit echo todo shell cmd pdf title else cmd firefox newtab fulljarurl echo todo shell cmd title fi done function creates sqlite table used index content page contained maff file us fulltext index mafftablecreate querycreate create virtual table maff using file char path char title text body text origurl char char touch db echo querycreate db devnull function us extract content html file contained maff archive insert sqlite db conversion text done preprocessing step order index content fulltext search package pythonpdfminer package mafftableindex queryinsert maff file path title body origurl mafffile readlink f rdffiles unzip qq l mafffile rdf awk print echo maff file mafffile echo mafffile rdf rdffiles echo rdf dirname echo rdf perl ne dd print rdfcontent unzip q c mafffile rdf title echo rdfcontent xmlstarlet sel v maf title rdf resource perl pne xchr ychr x g g g origurl echo rdfcontent xmlstarlet sel v maf originalurl rdf resource indexfile echo rdfcontent xmlstarlet sel v maf indexfilename rdf resource indexfile html set f contentraw unzip qq c mafffile dirname indexfile content echo contentraw timeout perl pne xchr ychr n x g g echo contentraw awk print query value mafffile dirname indexfile title content origurl echo title echo db set f fi done function allows fulltext search document stored maff file mafftablesearch match query select shell firefox newtab jar file file path title link maff body match match group origurl set f echo query db set f function count many document present maff file maffcount mafffile readlink f rdffiles unzip qq l mafffile rdf awk print count echo rdffiles wc l echo count
313,Lobsters,emacs,Emacs editor,Emacs Is Superman (2013),http://c2.com/cgi/wiki?EmacsIsSuperman,emacs superman,,
314,Lobsters,emacs,Emacs editor,John Wiegley on maintaining Emacs and how you can help,http://sachachua.com/blog/2015/12/2015-12-10-emacs-chat-john-wiegley-maintaining-emacs-can-help/,john wiegley maintaining emacs help,http listsgnuorgmailmanlistinfoemacsdevel event page google ogg vorbis audio audio full blog post email protected emacs channel jwiegley emacsdevel phil hudson play new window download android emacs emacs chat emacschat see index,bug easy keyword note package mode name john wiegley shared us gnu org help volume emacsrelated information people get started emacs development video gnu mail news organizing group topic adaptive scoring prioritization setup mail gmail fetchmail dovecot gnu time hour day communitybuilding using org keep track initiative reading bug report gnu people help test documentation reviewing bug coverage efficiency benchmark magit projectile flycheck following emacsdevel topic ides apis lexical binding guile etc email john wiegley email protected emacsdevel mailing list http listsgnuorgmailmanlistinfoemacsdevel event page google ogg vorbis audio audio view full blog post transcript thanks phil hudson volunteering transcribe hello everyone hi sacha chua another emacs chat december john wiegley since last time talked become emacs maintainer among thing today chat dealing increased workload cool thing john j thank sacha glad opportunity u talk month way question submit question commenting event page found etc etc using q app show pop irc freenode network look emacs channel pose question try remember sneak question appropriate moment want kick thing question new workflow dealing increased workload highvolume mailing listnewsgroup called emacsdevel thing deal emacs maintainer j well certainly emacsdevel mailing list quite highvolume technique approaching customize gnu make manageable source information tweak scoring setup use gnu feature called adaptive scoring observe read read try change ordering presentation thing see summary buffer go newsgroup based reading preference observing reading habit extremely helpful way conversation gotten long realize nothing contribute hit key never see conversation ever unless somebody us sort keyword flag pop thread back meanwhile thread interested one replying go top buffer one read first upon reentering group something automatically prioritizes thread based whether replied something whether decided going way tangent go back ontopic asking keywords bring thing back j right john question mark one pop thread back alright heard folk need get attention say john john wiegley deal whatever going actually since share screen videocast something want quickly demonstrate like work sure work live may read thing j click screensharing button hah technology ok well keep trying try fill j would hmm ok demonstrate ok actually one thing may break system refresh browser might get dropped back conversation thing might work let give shot ok coming back hope work otherwise awkward gnu mail newsreader j yes work perfect right telling people gnu would like go ahead demonstrate help fantastic j seeing emacs screen see screen j ok key bound jump gnu one thing see gnu ability create topic place group topic though actually quite number topic see wow expect j yes normally topic unread group displayed keybinding toggle thing see emacsdevel gotten two email since livecast began hit return display customized right number farthest left score assigned article trying finetune adaptive scoring rule want aware effect action score another key reveal thread go back grab last message example see lengthy thread number column highlight fifth column show many message hidden underneath thread normally start see view thread aggregate highest score go top wow thread score message j well score top message thread might aggregate score hit key see score thread aggregate score score article would gotten score would noticed reading message thread past every time read message thread subject thread get bump must read message within thread already score folk write good subjectline header john take look message j subject line important gnu handy example really long thread like someone want bring side point instituted policy changing subject line change subject line gnu way making appear new thread see casting wide net possible thread actually part first draft emacs website thread poster john yates chose different subject line gnu present independent thread also allows track interest adaptive scoring particular subtopic j right right plug adaptive scoring quite nicely result even though day number unread message emacsdevel group easily reach end day difficult get gnu present roughly order ought read start seeing thread really need involvement start scanning quickly tell gnu want participate thread point onward unless course someone asks getting quite people interested gnu according emacs channel j gnu incredibly wonderful let tell gnu org mainstay emacs two application always running gnu somewhat like emacs learning investment made believe pay many time lars done brilliant job gnu manual highly informative funny worth reading front end technical manual read get quite kick many paragraph gnu manual go read different thing also pointed calc manual also interesting reading turn info manual emacs package tend quite interesting reading useful reading j oh yeah would recommend anyone want get started gnu first acquire brave heart going easy task go setup instruction get connected mail source either reading mail directory using imap find using gnu imap slow put lot people email get delivered gmail excellent spamfiltering service use fetchmail pull mail gmail local machine get queued dovecot server run locally gnu talk dovecot server imap fast connection let local search email even internet connectivity always search email quite lot email dovecot probably close million email message million one thing want mention large part million entire emacsdevel archive right j well emacsdevel archive emacsbugs archive emacshelp archive source usually actively participate mailing list like go download past email people make reference previous discussion see discussion without necessarily online take advantage gnu ability show message within given thread know j right let say message response thread called new update emacs website want see context hit key member part thread come buffer see line blue one see happened let go emacsdevel summary buffer see three line summary buffer hit line buffer get see message reading full context thread appeared right eric question submitted q thing seems like lot reading many hour week spend emacs maintainer stuff j would say reading emacsdevel mailing list one two hour day probably responding spend much time fixing bug writing code contributor project example eli zaretskii spends large amount time addressing bug taking care stability emacs rely upon lot technical expertise spend time reading message trying see people issue thing need changed organization structure resource community effective smoothly head u toward next release lot excellent people excellent developer volunteer contributor necessarily need work excellent people want make sure need get job done interesting approach take term maintaining opensource project le making technical contribution unlocking awesomeness community coordinating people effort reaching people pulling j right specifically want emphasize focus point time feel like much better community taking advantage core emacs development emacs developer moment fewer number maybe even little bit overworked outside core community much larger community people excellent work external project part core emacs elpa might example melpa repository bring people attract outside people core development job get lot easier going much effective becoming another programmer within emacs project get five people come going five time could contributed example awesome guess people might hiding emacsdevel keeping eye people recruit basically bring core j irc twitter people know personally whatever reason outskirt emacsdevel told past issue thing staying ontopic thing getting little hand patch dying get submitted ignored want make sure concern met resolve problem really humanscale problem technical problem people think come back make easier u job see like mailinglist interface thread thing like think mailing list bug tracker got like broken maybe patch needed really trackable middle ground say idea thinking maybe idea getting dropped share little bit starting keep track different ball air different thing go make sure thing falling crack j excellent question guess might say one task maintainer keep eye inchoate intangible thing people request ask necessarily bug necessarily belong bug database idea get discussed mailing list say thread get cold idea might get lost come orgmode file try track idea thing people suggested expressed concern make sure something get done either get addressed get knowledgeably say leave considered going see org file many toplevel category thing issue pertaining community initiative thing might want begin done analysis little subproject within emacs become aware potential bug performance problem might thing bug tracker several keywords labeled project project making improvement within community one thing example ask ambassador keep u aware thing outside core development making sure responsibility aspect emacs development distributed evenly among contributor get burnout elpa changing way use like u rely elpa easier facile way people get code emacs course also release schedule project various todos name mean link directly mailinglist article hit key visit link pop emacsdevel mailing list show message context discussion could also press see although work configured work current group anyway get back original discussion created task see give overview different initiative going let review follow thing might falling crack j right first line activity follow mailing list anything need responded also like read diffs log see change made emacs see anything need attention subscribe bug tracker see every bug come try make sure least response made every bug although always time last thing course thing nonbugtype task tracking good lately keeping top list keeping top mailing list mainly holiday thanksgiving united state work trip put bit behind want get back org file close thing people deserve responded everything file represents something felt legitimate concern people feel responded think encouraged take part core emacs development process file publicly sharing convinced share give people overview j course would like maybe something semiregularly capture state emacs development yet something considered cool got org file create read emacsdevel message bug thing like jump org file back original message mentioned irc also use gnu read bug report think mentioned gnu show bug report specific bug conversation specific bug easily something quickly demonstrate j sure example bug want see context bug command called gnusreadephemeralemacsbuggroup put entering text minibuffer contact debbugs server emacs project show whole conversation history bug ephemeral group mean group gnu created fly disappear left group way read exact conversation history occurred bug see let see entire context add link information org file well j right hit key create capture buffer link back email instantly hit cc cc added hit cc cw prompted emacs org file want put issue orgrefile powerful way gnu org help deal volume coming keep track going thing think either future maintainer emacs maintainer package within emacs tip would find useful j mean use gnu org little script tool found helpful j nothing particular think every maintainer way thing area interest everybody pick whatever tool work let see quick check people let people know emacstangents fairly new mailing list people know yet cool one thing wanted talk workflow dealing emacs also idea improving community taking forward shared term making emacsdevel friendlier bringing people core particular area want encourage people try contributing resource think might help get started j sure think three area particular would really appreciate help first would writing test started creating headless test run part emacs build make check using ert framework elisp framework writing test know use lot thing understand value coverage many part emacs people coming want write new test address area currently testing would incredibly valuable improving documentation especially eye read someone familiar certain subject area would helpful going bug history finding bug never responded longer issue checking one still reproducible making comment bug say discovered trying reproduce bug maybe adding test j well would ideal ideal would find bug add test add something manual appropriate bug three area bug test documentation one would like see addressed emacs core really foundation upon lot thing built part emacs core thing want emacs core necessarily add feature functionality would like stable foundation complex application like org gnu built upon emacs le moving target efficient wellperforming crash bug type thing placing emphasis volunteer contribute bug test documentation help give u stable foundation build application suppose pretty coverage report emacs people look say ok file covered yet people easily see need testing j phillip lord recently rearranged test mirror file testing various source directory see file source directory corresponding test pick file relates feature care see test file exists first person make file create first test every test valuable asking people commit willing write hundred test want come emacs project get familiar development building current version source machine write one two test happy anything maybe one way make process little le intimidating would walk u supersimple emacs core test look like run see work j getting community stuff running something find somebody else corner quick demo j checkout emacs source tree want share screen j oh sorry forgot ok see clone emacs development tree tend build day day make sure everything going sanely test directory see automated directory phil lord put automated testing inside kind automated test example eshell test require ert eshell ertdeftest command execute well define test say result evaluating highlighted form equal way make check run code ensure see test really easy pretty short really simple get deep lot c whatever else write use get started emacs lisp j pulled little let probably good idea mess git j oh pull smartcard authenticates ssh logins card plugged machine cool lot code emacs much yet tested great people contribute test eric another question considering moving stuff core smaller simpler bettertested core thing package j yes yes right area core emacs would like concept within elpa core elpa core elpa package within elpa core emacs code able rely upon happen process core elpa package copied emacs source tree time time core emacs directly depend upon top core elpa tarball elpa package within elpa copied core emacs made part release tarball go finally regular elpa package installable mx listpackages interface tarball distribution right core emacs lot large thing lot package really necessarily belong part foundational api really think core emacs represents want take lot package split one elpa category likely everything currently core emacs either core elpa tarball elpa moving distribution entirely make core smaller look git see changing lately surface area smaller also give contributor outside way get thing tarball distribution without go core emacs see would also simplify update process package j give people way receive subscribe channel package updated frequently even though emacs release might right cool simpler core better tested stabler core kind split important thing elpa core relies thing want break anyone expectation within course regular elpa melpa package archive well universe package choose j right think ultimately destination like end core set functionality without emacs even emacs even edit file defines sort fundamental minimum anything fundamental minimum depends definition package core network dependency among minimum core much possible fit description go tarball elpa example tetri tetri neat module great machine demo cool emacs core foundational api emacs core represents really need tetri moved tarball elpa easily well come objection essential tetri emacs programming good example yes j think good thing always present emacs installation want core developer focus set really matter term defining foundational api also core always documented always tested part automated test every package core emacs today really need level rigor tetri need automated test need lot documentation perfect candidate tarball elpa outrage emacs channel dissing tetri j love tetri module people hear said always present machine emacs sure autotetris count automated testing tetri thing automates j cool people contribute writing test test help stuff happen better maybe point nice graphic show file getting much percentage coverage lovely motivating graph thing like course mentioned documentation write bug see reproduce j one category personally quite interested someone focus sort take ownership efficiency speed emacs would require writing test suite benchmarking suite run give table number say fast certain lisp operation fast buffer manipulation operation fast starting graphical emacs creating whole ton frame closing fast way two build benchmarking suite delta designate build machine somebody volunteer time willing run benchmarking suite current development branch every single day maintain running delta sort graph show u getting slower getting faster certain area area currently worst today thread came emacsdevel saying playing back keyboard macro involve long line character slow thing think well entirely terrible often people would nice know current limitation emacs one want address right someone committed something make something drastically slower drastically j yes noticed release candidate even build full optimization take exactly twice long start emacs difference second versus second would like know happen right benchmarking suite could use git bisect take back day got slower specific profiling analysis find made slower benchmarking suite place think lot consciousness way emacs evolving term performance efficiency hearing part general improvement build tool emacs using idea continuous integration efficiency metric thing like happen people keep building little tool mess j plenty great tool making happen think need right need volunteer willing devote seeing happen keeping going fair bit heavy lifting get started place keep running j right anybody love emacs performance get touch let start going yeah term talking emacs startup time remember conversation usepackage one key motivation able find autoloads load package actually using faster school thought divided people start emacs time people leave running everyone benefit thing work faster j right working emacs module tend start emacs day working module want make sure always testing change clean environment exit restart many many time day led desire faster startup term build tool developmentrelated initiative definitely good news already happening think vaguely mentioned looking github pull request something along line making easier people contribute j would something officially endorsed fsf mirror emacs development tree github people want make pull request copy proper channel hand official portal either receiving bug request pull request ok good play around different way different channel bringing thing thank work hand anyone want take advantage completely unofficial sanctioned way submitting change term people getting started emacs development emacs contribution documentation probably easiest people get started testing little bit emacs lisp digging bug making better course interested performance efficiency actually building infrastructure make testing easier way people contribute thing would like encourage people look contribute term community reaching interesting lot people coming emacs also continued perception hard difficult learn week configuring get somewhere particular thought making easier end well j necessarily think people good work towards making starter kit tutorial videocasts sacha helpful lot people emacs rock different venue creating information attract people interest people emacs spacemacs project making emacs comfortable environment vim user example thing going larger community something want see happen something area focus since really getting core foundation stable responsibility think part wanting act community ambassador help keep eye need greater outside community anything core developer help support remember whenever come across interesting story fold emacswiki seems way back people adding referring good j fantastic resource really recommend anybody continue discover nugget within time time randomly browsing j often randomly browse yes worked hour sometimes wander stumble page link cool let see thing people want pick brain term emacs development last time talked sharing emacs development tip shared quite redshank elrefactor tool found particularly helpful reading lot code guess j well rely heavily magit anybody us git definitely look also application almost constantly dashboard working project projectile another thing also greatly enjoyed mean jumping file project grep ing across file entire project flycheck another excellent project helping keep eye error making buffer typing cool yeah wellreviewed people happy package sure j question coming various source hang oh ok question whether bootstrapping emacs lisp emacs lisp longterm goal get rid divide making c core small possible much possible emacs lisp people contribute even know emacs lisp j answer yes happen happen answer today would love emacs lisp part whole emacs equation large feasibly possible course every often people curious extension language capability j course keeping track emacsdevel conversation though idea thing term big question people like guile emacs multithreading lexicalbinding starting show cooky emacs lisp file j well several different question guile emacs course always progressing curious see become quite position right something seriously need consider integrating curious see go evolves keep eye lexical binding something hope become used prevalent promise resolve certain performance issue right dynamic binding need look symbol within global possible scope every time variable reference see used otherwise today c core work pretty well u base foundation language emacs lisp working pretty well u mean nothing preventing anyone writing great stuff top emacs yes little advantage could made making certain change ass value offer come people particular idea course emacsdevel place bring ok thing happening go ask emacsdevel question j yes encourage anybody deep concern future emacs join emacsdevel part conversation started summarizing longer involved conversation emacsdevel proposal emacswiki right j yes created proposal page distill final result long large thread way people review see final proposal made one long discussion happened around time also discussing maintainership emacs v ides feature missing integration together happening modernization emacs feature set additional idelike feature thing j yes would like core level better api certain general apis feature become common people editing environment notion project membership project navigate within project point lot disparate feature got emacs ecosystem getting completion list autofilling providing automatic documentation thing around point everybody solving different way always necessarily good apis existing currently within core like apis core people reinvent recreate backends looking symbol within project various language make sense moved core becomes something package rely instead depend something somebody else want depend different package similar functionality j right look like end use ideempowered emacs know yet think right first question ask apis enable package author take best advantage information available within environment guess part taking look common package people using trying abstract way allows build top common ground j exactly ultimate hope example underlying api companymode completion api could rely upon backends write provide information companymode could used mode want glean information symbol relevant point within project autocomplete could use helm could use yasnippet dynamicabbrev hippieexpand whatever could use recoded backend subtle little change many time wanted functionality available several package similar exactly refactoring hard always little subtlety want something package quite j right think core emacs better support package author way creating standard standard framework within capture ask information make sense alright get core stable start moving thing core like know c core emacs lisp package emacs lisp make sense thing moved core elpa core elpa tarball easier welltested stable core j end goal make easier job core developer currently make easier new people join huge body code approach wonder opensource project also working expanding core developer community thing like hackathons prereviewed list bug supereasy simple fix maybe even mentor attached remember emacs one thing already vaguely remember browsing debbugs seeing tagged newbie documentation whatever anything like guide people specific small nonintimidating area start making contribution j seem recall hearing keyword similar far hackathon bug bounty list seen yet would love see would excellent way people know right jump maybe yet another way people contribute triage bug say know supereasy bug fix go ahead try get stuck talk promise bite see go hackathons irc channel way people coordinate awesome covered lot ground todaywe talked tool using keep volume keeping overview gnu awesome org awesome thing together even awesomer term community people contribute really remember dropping every massive thread hard keep track thing getting split different subject line much easier emacsdevel various place becoming friendlier place easier keep track course overall movement emacs source code smaller core stable test stuff package go going wrap throat starting give thank much sharing thought tip using tool use keep track going thanks wonderful job maintainer look forward seeing emacs turn j also lastly wanted say anyone difficulty contributing emacs found stumbling block reason become disaffected leave community approach directly thing solving problem right important solving specific technical issue email address email protected always open people concern emacs going vouch awesome person definitely helped get emacs development stuff got started wait see else bring community mentioned find john email protected place people go find case interested finding j freenode usually emacs channel twitter j twitter well jwiegley course emacsdevel mailing list love see alright going wrap recording available place google post usual place well thanks joining u broadcast thanks everyon listening j thank sacha thanks phil hudson transcript podcast play new window downloadsubscribe android post emacs emacs chat tag emacschat see index comment
315,Lobsters,emacs,Emacs editor,Macros in GNU Emacs and mg: Speed Comparison,https://www.youtube.com/watch?v=sWy8zzdbRIY,macro gnu emacs mg speed comparison,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature macro gnu emacs mg speed comparison youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature macro gnu emacs mg speed comparison youtube
316,Lobsters,emacs,Emacs editor,If Your Car Were Emacs,http://c2.com/cgi/wiki?IfYourCarWereEmacs,car emacs,,
317,Lobsters,emacs,Emacs editor,A CEO's Guide to Emacs,https://blog.fugue.co/2015-11-11-guide-to-emacs.html,ceo guide emacs,soma campagnolo http wwwyoutubecomwatch pointyhaired boss lasting advantage context switching language interpreter creating thing peace quiet taking everything keeping forever learning ride emacs technical setup emacs http emacsformacosxcom http wwwgnuorgsoftwareemacs first need learn navigate opinion publication environment learn copy paste next learn ido mode symlinks friend font style http inputfontbureaucom org mode publishing org mode ace jump mode later fuguehq,lived emacs wrote code document managed email calendar shelled editoros quite happy year went moved newer shinier thing result forgot task basic efficiently navigating file without mouse three month ago noticing much time spent switching application computer decided give emacs another try good decision several reason covered post covered emacs dropbox tip set good movable environment nt used emacs something likely hate may love sort rube goldberg machine size house first glance performs function toaster hardly sound like endorsement key phrase first glance grok emacs realize thermonuclear toaster also serve engine well anything want text think much computing life revolves around text rather bold statement bold true perhaps importantly though one application ever used make feel like really instead casting anonymous user whose wallet cleverly targeted product marketing department fancy office somewhere near soma redmond modern productivity authoring application eg page ides like carbon fiber racing bike come kitted nicely fully assembled emacs like box classic campagnolo part beautiful lugged steel frame missing one crank arm brake lever find tiny subculture internet first one faster complete second source endless joy annoyance depending last dying day sort person feel equal joy finding old stash campy part tweaking editor elisp ymmv steel bicycle still ride check comparison frame tube http wwwyoutubecomwatch may give impression emacs anachronistic oldfashioned powerful timeless demand patiently understand term term pretty far beaten path seem odd logic compelling charming emacs feel like future rather past lugged steel frame useful comfortable decade come carbon fiber wunderbike landfill shattered impact emacs persist useful tool latest trendy app long forgotten notion building personal working environment editing lisp code fitslikeaglove environment follow computer appealing may really like emacs like new shiny want get straight work without much investment time mental cycle likely nt write code ludwig emacs lisp many engineer fugue use emacs good effect say engineer emacs ides vim user post emacs ceo pointyhaired boss phb hey anyone curious going explain andor rationalize love use also hope provide enough detail successful experience without hour googling lasting advantage longterm advantage come using emacs make life easier net gain make initial lift entirely worthwhile consider context switching org mode alone worth investing serious time like usually working dozen blog post list need conference employee review modern world computing generally mean using several application distracting user interface different way store sort search result need constantly switch mental context remember minutia hate context switching imposition put due broken interface hate remember thing computer remember rational world providing single environment emacs even powerful phb programmer since programmer tend spend greater percentage day single application switching mental context higher cost often apparent o application vendor tarted interface distract u reality technical access powerful language interpreter single keyboard shortcut especially many application full screened day used edit text emacs singular editor lisp interpreter essence turing complete machine keystroke two away time go business know little lot programming recognize mean anything emacs full power computer available near real time work command memory wo nt want recreate excel elisp thing might excel smaller scope easy accomplish line two code need crunch number likely jump scratch buffer write little code open spreadsheet even email write nt oneliner usually write emacs paste email client context switch flow might start simple calculation two time anything need computed added relative ease emacs perhaps unique application also provide rich feature creating thing human remember magical terminal isaac asimov book emacs closest thing encountered longer decide app use thing instead work real power efficiency great tool committing creating thing peace quiet end result best text editing feature ever found community people making manner useful addition full power lisp keychord away use emacs creative work aside making music image dual monitor set desk one portrait mode emacs full screened day long one web browser researching reading usually terminal open well keep calendar email etc another desktop o x hidden emacs keep notification turned allows actually concentrate found eliminating distraction almost impossible modern ui application due effort helpful easy use nt need constantly reminded operation done ten thousand time need nice clean white sheet paper thoughtful maybe bad living noisy environment due age abuse suggest worth try anyone see like actual peace quiet computing environment course lot apps mode hide interface thankfully apple microsoft meaningful fullscreen mode application powerful enough live thing unless writing code day perhaps working long document like book still going face noise apps also modern application seem simultaneously patronizing lacking functionality application dislike office apps online version desktop arrangement emacs left communicating difference creating communicating substantial much productive set aside distinct time use slack fugue wonderful hellish keep messaging desktop alongside calendar email actually making thing blissfully unaware chatter world take one slackstorm email vc board director immediately throw work thing usually wait hour two taking everything keeping forever third reason find emacs advantageous environment easy take stuff mean rather plethora apps interacting syncing way need one two directory syncing via dropbox like work follow anywhere environment crafted suit purpose across o x window sometimes linux dead simple reliable found capability useful dread dealing page gdocs office kind file application force back finding stuff somewhere filesystem cloud limiting factor keeping thing forever computer file format assuming human solved problem storage good issue face time whether continue access information created text file longlived format computing easily open text file emacs true office application text file also nice smaller office application data file digital pack rat someone make lot little note thing pop head simple light permanent collection stuff always available important feeling ready give emacs try read section follow take place full tutorial operational time finish reading learning ride emacs technical setup price power mental peace quiet steep learning curve emacs everything differently used first make feel like wasting time archaic strange application modern world passed bit like learning ride driven car emacs use plain vanilla emacs gnu o x window get o x version http emacsformacosxcom window version http wwwgnuorgsoftwareemacs bunch version especially mac found learning curve powerful stuff involves lisp lot mode much lower real deal download get started first need learn navigate use emacs convention key combination document c control meta usually mapped alt option hyphen holding key combination ch mean hold control type h release control type command bringing tutorial go ahead nt use arrow key mouse work give week using native navigation command emacs committed muscle memory likely enjoy miss badly everywhere else go emacs tutorial pretty good job walking summarize nt need read whole thing boring stuff instead arrow use cb back cf forward cp previous cn next may thinking world would perfectly good arrow key several reason first nt move hand typing position forward back key used alt meta emacspeak navigate word time handy obvious third good reason want repeat command precede number often use editing document estimating many word need go back line something like cp mb really important navigation command based beginning thing e end thing using cae line using mae sentence sentence command work properly need double space period simultaneously provides useful feature take shibboleth opinion mental table need export document single space publication environment write macro moment genuinely worth going tutorial ship emacs cover important command truly impatient tutorial gold reminder ch tutorial learn copy paste put emacs cua mode work familiar way native emacs way pretty great plenty easy learn mark region like selecting using shift navigation command cf selects one character forward cursor etc copy mw cut cw paste cy actually called killing yanking similar cut paste magic hood kill ring worry cut copy paste start fumbling around point cx u undo next learn ido mode trust ido make working file much easier nt generally use separate finderexplorer window work file emacs instead use editor command create open save file bit pain without ido recommend installing learning way ido come emacs beginning version want make tweak emacs file always used good excuse get environment set feature emacs come mode install given mode need two thing well first need extra thing need done thereafter two thing extra thing need single place put elisp file need tell emacs place suggest make single directory say dropbox emacs home inside want create emacs file emacsd directory inside emacsd make directory called lisp homeemacsemacsd lisp put el file thing like mode homeemacsdlisp directory point emacs like addtolist loadpath emacsdlisp ido mode come emacs wo nt need put el file lisp directory adding stuff soon go symlinks friend wait say emacs emacsd home directory put dumb folder dropbox correct make easy environment anywhere go keep everything dropbox make symbolic link emacs emacsd main document directory o x super easy ln command window pain fortunately emacs provides easy alternative symlinking window home environment variable go environment variable window window hit window key type environment variable find search best part window make home environment variable account point dropbox folder made emacs want make easy navigate local file nt dropbox may instead want make symbolic link dropbox emacs home actual home directory done jiggerypokery needed get machine pointed emacs setup file get new computer use someone else hour day get entire work environment seems little difficult first time ten minute operation know configuring ido cx cf type emacs ret ret create emacs file add line set ido mode require ido setq idoenableflexmatching setq idoeverywhere idomode emacs buffer open mx evaluatebuffer command either get error munged something get ido ido change minibuffer work file operation great documentation point tip use effectively type point minibuffer jump back home implicit stuff short hop home use org noncode stuff code code right directory often collection file different extension especially use org mode publish type period extension want matter file name ido limit choice file extension example writing blog post org mode main file orgblogemacsorg also occasionally push html using org mode publishing got emacshtml file directory want open org file type cx cf ret bl ret ret ret hitting return auto completion ido mode character typed used lot le time opening finderexplorer clicking around ido mode plenty useful really utility mode operating emacs let explore mode useful getting work done font style recommend getting excellent input family typeface use emacs customizable different brace zero character build extra line spacing font file recommend line spacing using excellent proportional font code data use input serif writing funky modern feel find http inputfontbureaucom customize preference manually set font using menu emacs put code emacs file use multiple device may find want different setting set emacs look machine using name configure screen appropriately code set font different os osx toggle full screen setq myfont inputserif cond stringequal systemname sampolocal setfaceattribute default nil font myfont height toggleframefullscreen stringequal systemname morpheuslocal setfaceattribute default nil font myfont height stringequal systemname ilmarinen setfaceattribute default nil font myfont height stringequal systemname ukko setfaceattribute default nil font myfont height replace systemname value get evaluate systemname copy emacs note sampo macbook also set emacs full screen like window well window emacs nt really love always end wonky state try instead fullscreen manually launch also recommend getting rid awful toolbar emacs got sometime cool thing toolbars application also got rid chrome simple productive interface add emacs file get rid toolbar scroll bar keep menu available o x hidden unless mouse top screen anyway fboundp scrollbarmode scrollbarmode fboundp toolbarmode toolbarmode fboundp menubarmode menubarmode org mode pretty much live org mode goto environment authoring document keeping note making todo list everything else org originally conceived combination notetaking todo list utility fellow laptopinmeetings sort use laptop meeting nt use case little different org primarily way handle manner content within structure head subhead etc org mode function like outline org allows expand hide content tree also rearrange tree fit think nicely find pleasure use way org mode also lot little thing make life pleasant example footnote handling excellent latexpdf output great org ability generate agenda based todo document nice way relate datestimes nt use sort external commitment handled shared calendar creating thing keeping track need create future invaluable installing easy adding orgmodeel lisp directory adding line emacs want indent based tree location open document fully expanded set org mode setq orgstartupindented setq orgstartupfolded showall setq orgdirectory org last line org know look file include agenda thing keep org right home directory ie symlink directory life dropbox described earlier stufforg file always open buffer use like notepad org make easy extract thing like todos stuff deadline especially useful inline lisp code evaluate whenever need code content super handy access actual computer emacs liberation publishing org mode care appearance formatting document started career designer think information presented clearly beautifully org great support generating pdfs via latex bit learning curve simple thing pretty easy want use font style typical latex one got thing first want xelatex use normal system font rather latex specific font next want add emacs setq orglatexpdfprocess xelatex interaction nonstopmode f xelatex interaction nonstopmode f put right end org section emacs keep thing tidy allow use formatting option publishing org example often use latexheader usepackage fontspec latexheader setmonofont input mono latexheader setromanfont maison neue latexheader linespread latexheader usepackage geometry title document title simply go somewhere org file corporate font body copy maison neue put whatever appropriate strongly discourage use maison neue terrible font one ever use file example pdf output using setting outofthebox latex always look like fine suppose font boring little odd also use standard format people assume reading something pretend academic paper warned ace jump mode gem major feature want work bit like jef raskin leap feature day gone way work type cc cspc type first letter word want jump highlight occurrence word initial character replacing letter alphabet simply type letter alphabet location want cursor jump find using often typical nav key search download el lisp directory put emacs set acejumpmode addtolist loadpath whichfolderacejumpmodefilein require acejumpmode definekey globalmap kbd cc cspc acejumpmode later enough one may get somewhere like love hear us emacs aside programming programming whether useful likely boneheaded phbisms use emacs want point appreciate probably write update time introduce additional feature mode certainly show use fugue emacs ludwigmode evolve something useful code highlighting send thought fuguehq twitter
318,Lobsters,emacs,Emacs editor,Your Text Editor Is Malware,https://glyph.twistedmatrix.com/2015/11/editor-malware.html,text editor malware,vimballs vimorg elpa melpa vimplug staunch advocate emacs verify tl step make sure package source http step turn tl trust checking step set trust root various form package pypi little website mirror step trust one badsslcom step configure tl verifier appendix window weird update bug comment conclusion,programmer use text editor install functionality text editor use vim probably installed vimballs vimorg website available http vimballs fairly opaque installed one chance audit code use emacs probably installed package elpa melpa using packageel default configuration elpa accessed http recently documentation recommended http well install unsigned code editor downloaded unencrypted unauthenticated transport like http might well installing malware joke exaggeration really might assurance exploited someone local network someone network nsa cia whoever else solution vim relatively simple use vimplug fetch stuff github exclusively via http audited conclusively relatively small codebase includes lot http http git could see relatively proud track record staunch advocate improved security text editor package installation like think contributed little fact melpa available http instructs use http url situation still good emacsland even manage get package source authenticated source http matter emacs verify tl although package signing implemented practically speaking none package signed therefore absolutely trust package signing save plus even package signed business package installing anyway tl shorthand least security acceptable whatever security mechanism like package signing employed always least http unfortunately surprisefilled stepbystep guide actually securing emacs downloads window mac linux step make sure package source http default emacs ship packagearchives list gnu http elpagnuorgpackages obviously good want add melpa surely done anyway since actually useful package change elpa url http use mx customizevariable change packagearchives gnu http elpagnuorgpackages melpa http melpaorgpackages step turn tl trust checking another custom variable emacs tlschecktrust check trust tl connection go ahead turn via mx customizevariable tlschecktrust step set trust root told emacs check certificate valid emacs successfully fetch http url emacs distribute trust root certificate although set cabforum certificate already probably computer various form still acquire format usable emacs somehow variety way interest brevity crossplatform compatibility preferred mechanism get certifi package pypi python pip install user certifi similar tutorial installing python package little scope post hopefully little website help get started point mx customizevariable fails u need start writing elisp code need set tlsprogram string computed output running program want work window use bourne shell escape instead something like emacs wherever like put startup elisp let trustfile replaceregexpinstring replaceregexpinstring n shellcommandtostring python certifi setq tlsprogram list format gnutlscli p p h eq windowsystem exe trustfile run gnutlscli unix gnutlscliexe window need install gnutlscli command line tool course varies per platform o x course homebrew best way go brew install gnutls install window way know get gnutls tl go directly mirror download one binary unzip next emacs bin directory debian derivative aptget install gnutlsbin fedora derivative yum install gnutlsutils great got piece need tool make tl connection certificate verify emacs configuration make thing done right wrong step trust one turn two way tell emacs really actually really secure connection really tell second one need first construct little test see connection properly secured make bad connection want fail make sure little snippet elisp use helpful badsslcom site give knownbad knowngood certificate assuming snooping connection let badhosts loop bad http wronghostbadsslcom http selfsignedbadsslcom conditioncase e urlretrieve bad lambda retrieved error nil collect bad badhosts error format tl misconfigured retrieved ok badhosts urlretrieve http badsslcom lambda retrieved evaluate get error either trust root set right connect valid site emacs still blithely trusting bad certificate might step configure tl verifier one compiletime option whether link gnutls gnutls linked use whatever tl program give might gnutlscli openssl sclient since recent version openssl sclient even attempt verify certificate recommend configured via tlschecktrust tlsprogram however gnutls compiled totally ignore custom variable honor different set gnutlsverifyerror gnutlstrustfiles make matter worse installing package supply gnutlscli program also install package might satisfy dynamic linking gnutls library mean code path could get silently turned tried activate one give variable correct value well revisit previous trust setup let trustfile replaceregexpinstring replaceregexpinstring n shellcommandtostring python certifi setq tlsprogram list format gnutlscli p p h eq windowsystem exe trustfile setq gnutlsverifyerror setq gnutlstrustfiles list trustfile ought set properly try example step ought work probably except um appendix window weird november official window build emacs linked version gnutls rather latest might need download latest microversion instead far tell supposed work commandline tool maybe reason emacs could parse output matter appear universal experience others reported success mileage may vary update thanks astute reader richard copley informed commandline tool even really supposed work window described bug comment tl connection mswindows supported via gnutls library external tl program never work correctly window since use signal communicate emacs little sense fixing issue result work anyway eli zaretskii conclusion nerd sometimes mock securitysavvy even considerate enough voice reaction hear someone got malware window machine think used unix date something along line yet nerdy tool download execute code emacs particular shockingly careless running arbitrary unverified code internet often equally shockingly careless use know better emacs user fully understand post get part work stop using packageel get hang get friend help get environment configured properly since disproportionate number emacs user programmer sysadmins highvalue target risking safety user doublecheck editor package coming least cursorily authenticated source use another text editor nerdy development tool routinely installing software onto system make sure least securing installation properly verified tl
319,Lobsters,emacs,Emacs editor,John Wiegley is the new Emacs maintainer,https://lists.gnu.org/archive/html/emacs-devel/2015-11/msg00118.html,john wiegley new emacs maintainer,date prev date next thread prev thread next date index thread index new emacs maintainer address hidden new emacs maintainer new emacs maintainer new emacs maintainer new emacs maintainer new emacs maintainer new emacs maintainer new emacs maintainer,date prev date next thread prev thread next date index thread index new emacs maintainer john yates subject new emacs maintainer date tue nov actually read end message richard metat mit yesterday officially accepted role maintainer emacsan announcement forthcoming dot cross itsalso switched subscription address toâ address hidden wouldappreciate emacsrelated issue sent rather otheraccounts new thread â thank john stepping whatever comprises may make reach agreement richardâ sure benefit leadershipjohn new emacs maintainer john yates new emacs maintainer john wiegley new emacs maintainer kaushal modi new emacs maintainer john yates new emacs maintainer david kastrup new emacs maintainer nicolas petton new emacs maintainer karl fogel
320,Lobsters,emacs,Emacs editor,The Craft of Text Editing,http://www.finseth.com/craft/,craft text editing,craft text editing emacs modern world craig finseth http wwwfinsethcomcraft version version version gzip file postscript version fekete krisztian latex version fekete krisztian quick content credit trademark table content preface question acknowledgement introduction question one question two question three implementation language question four editing model question five file format question six question seven question eight question nine question ten question epilogue question appendix appendix b appendix c appendix appendix e bibliography book index back content preface http historydcsedacukarchiveappswhitfieldthesisthesishtml question probe understanding acknowledgement back content introduction text editing basic getline version one version two version three version four forest question probe understanding back content one user user category amount experience type experience religion user goal physiological constraint applying physiological constraint user handicap question probe understanding back content two user interface hardware display type tty glass tty basic display advanced display memory mapped display graphic display keyboard special function key extra shift key key placement example keyboard graphical input touch sensitive display tablet mouse trackball joystick different mouse device conclusion communication path issue speed character format flow control echo negotiation fancy modem question probe understanding back content three implementation language general consideration availability implementation quality text handling power support extensibility large project support efficiency specific language note teco lisp c system language fortran pascal basic ada sine custom editor language question probe understanding back content four editing model onedimensional array byte twodimensional array byte list line paged model object dealing real text question probe understanding back content five file format text file line boundary line content end file binary file structured file store extra information inband outofband conclusion additional information font size attribute line paragraph page format nontext object internationalization question probe understanding back content six internal subeditor basic concept definition internal data structure procedure interface definition characteristic implementation method management extra space end buffer gap multiple gap nt work hidden second gap implementation method overview buffer gap linked line paged buffer gap method method comparison storage crash recovery efficiency editing efficiency bufferfile io efficiency searching multiple buffer paged virtual memory conclusion editing extremely large file difference file question probe understanding back content seven redisplay constraint procedure interface definition editor procedure display independent procedure consideration status line end buffer horizontal scrolling line wrap word wrap tab control character proportionally spaced text attribute font script breaking line multiple window redisplay framer basic algorithm subeditor interaction advanced algorithm redisplay memorymapped display question probe understanding back content eight useroriented command command loop core loop read evaluate print evaluate procedure move character insert character secondlevel dispatch accept argument philosophy minimalist command set design error internal error external error exiting argument numeric prefix argument string suffix argument positional argument selection argument rebinding rebinding key rebinding function mode mode dynamic rebinding implementing mode changing mind command set design kill ring undo undo heresy redo macro keystroke recording macro language redisplay interaction question probe understanding back content nine command set design responsiveness consistency permissiveness progress simplicity uniformity extensibility mode use language guideline summary overall mode use language structure editor programing assistance command behavior move point text scrolling v paging page break many way move word moving word deleting word sentence paragraph end search command handle typo capitalization command twiddling question probe understanding back content ten emacstype editor mean emacstype command set extended environment extensibility question probe understanding back content epilogue question probe understanding back content appendix fiveminute introduction c case convention data type declaration constant predefined constant procedure structure statement operator standard library function used book nonstandard library function used book back content appendix b emacs implementation current emacs implementation list http wwwfinsethcomemacshtml back content appendix c emacs command set notation default gnuemacs command list base command help command controlx x command controlx command meta command author command set back content appendix teco command set general notation command ecommands file command fcommands special qregisters name form x f variable back content appendix e ascii chart back content bibliography current thesis emacstype editor emacs lisp machine zwei multics emacs magicsix tvmacs emacstype text editor nonemacs display editor structure editor editor back content book index,craft text editing emacs modern world craig finseth copyright craig finseth contact author question distribution right web site contains full text book craft text editing book published springerverlag co arrangement author publisher book version print right returned author note may slight difference typographic correction version printed one wish cite work please use following url http wwwfinsethcomcraft book also available print form isbn available lulu amazoncom notice typo formatting problem please let know however planning revising updating book anytime soon typo correction minor change continue made indefinitely epub version pretty reasonable created using calibre appears display fine calibre viewer ibooks kobo ereader note pas strict epub verification display well using stanza course nt found anything display well using stanza mobi version created using calibre pdf version contains better bookmarking one lulu gzip tar file contains complete work gz file contains postscript version complete work version frozen june reflect correction made time thanks fekete krisztian conversion gz file contains tar file latex version version complete work version frozen june reflect correction made time thanks fekete krisztian conversion quick content credit chapter quote comprise verse jabberwocky lewis carroll work looking glass trademark annex registered trademark xylogics cpm registered trademark digital research dec vaxvms registered trademark digital equipment corp finalword mince registered trademark mark unicorn ibm ibm pc registered trademark ibm corp apple registered trademark apple computer inc macintosh trademark licensed apple computer inc msdos registered trademark microsoft corp tty registered trademark teletype corp unix registered trademark table content preface question probe understanding acknowledgement introduction text editing basic getline version one version two version three version four forest question probe understanding one user user category amount experience type experience religion user goal physiological constraint applying physiological constraint user handicap question probe understanding two user interface hardware display type tty glass tty basic display advanced display memory mapped display graphic display keyboard special function key extra shift key key placement example keyboard graphical input touch sensitive display tablet mouse trackball joystick different mouse device conclusion communication path issue speed character format flow control echo negotiation fancy modem question probe understanding three implementation language general consideration availability implementation quality text handling power support extensibility large project support efficiency specific language note teco lisp c system language fortran pascal basic ada sine custom editor language question probe understanding four editing model onedimensional array byte twodimensional array byte list line paged model object dealing real text question probe understanding five file format text file line boundary line content end file binary file structured file store extra information inband outofband conclusion additional information font size attribute line paragraph page format nontext object internationalization question probe understanding six internal subeditor basic concept definition internal data structure procedure interface definition characteristic implementation method management extra space end buffer gap multiple gap nt work hidden second gap implementation method overview buffer gap linked line paged buffer gap method method comparison storage crash recovery efficiency editing efficiency bufferfile io efficiency searching multiple buffer paged virtual memory conclusion editing extremely large file difference file question probe understanding seven redisplay constraint procedure interface definition editor procedure display independent procedure consideration status line end buffer horizontal scrolling line wrap word wrap tab control character proportionally spaced text attribute font script breaking line multiple window redisplay framer basic algorithm subeditor interaction advanced algorithm redisplay memorymapped display question probe understanding eight useroriented command command loop core loop read evaluate print evaluate procedure move character insert character secondlevel dispatch accept argument philosophy minimalist command set design error internal error external error exiting argument numeric prefix argument string suffix argument positional argument selection argument rebinding rebinding key rebinding function mode mode dynamic rebinding implementing mode changing mind command set design kill ring undo undo heresy redo macro keystroke recording macro language redisplay interaction question probe understanding nine command set design responsiveness consistency permissiveness progress simplicity uniformity extensibility mode use language guideline summary overall mode use language structure editor programing assistance command behavior move point text scrolling v paging page break many way move word moving word deleting word sentence paragraph end search command handle typo capitalization command twiddling question probe understanding ten emacstype editor mean emacstype command set extended environment extensibility question probe understanding epilogue question probe understanding appendix fiveminute introduction c case convention data type declaration constant predefined constant procedure structure statement operator standard library function used book nonstandard library function used book appendix b emacs implementation appendix c emacs command set notation default gnuemacs command list base command help command controlx x command controlx command meta command author command set appendix teco command set general notation command ecommands file command fcommands special qregisters name form x f variable appendix e ascii chart bibliography current thesis emacstype editor emacs lisp machine zwei multics emacs magicsix tvmacs emacstype text editor nonemacs display editor structure editor editor book index back content preface sep appraised document http historydcsedacukarchiveappswhitfieldthesisthesishtml thesis c h whitfield university edinburgh published put forth many idea later appeared thesis due lack internet time unaware thesis wrote mine craig finseth eleven year ago faced selecting topic thesis time student massachusetts institute technology working bachelor degree computer science engineering one degree requirement thesis ca nt thesis without topic four year mit new type text editor come widespread use type text editor called emacs major step forward many way implementation type editor appearing many computer system people even used implementation basis thesis took different tack idea settled thesis description technology underlies text editor special emphasis emacstype editor thesis written published technical memo finseth ten year later reading usenet news news group compeditors one many facet worldwide electronic bulletin board discussion thread started side discussion citing thesis authority field inquiry reading along showed one group aware document described general textediting technology thesis ten year old predated personal computer workstation even chapter early draft attempted prove possible implement emacstype text editor small computer invented way threw chapter friend started software company market editor oh well clearly time complete rewrite rewrite reading nt copy thesis technical memo two identical content wo nt miss anything book information earlier document updated also whole lot every part completely rewritten expanded major section added thesis book written informal almost chatty style addressed directly assumed care text editor implemented warned however also contains opinion right wrong way thing opinion hold many current direction trend shall say right way keep mind accept everything said gospel truth understand say say make informed judgment book addressed anyone implement large software system want know consideration go system focus around text editor although required understanding programming helpful question probe understanding chapter end set question problem designed probe understanding material presented true socratic method question also introduce new material level difficulty question range easy quite difficult question labeled help gauge much effort required programming issue question single correct answer acknowledgement would like thank people helped various way owen ted anderson joe austin jeff brown bernard greenberg brian hess mike kazar richard kovalcik scott layson jason linhart david moon robert nathaniel lee park jeffrey schiller richard stallman seth steinberg peter steinmetz liba svobodova daniel weinreb plus course people left special thanks wife ann daughter kari put typing away time craig finseth st paul minnesota february copyright craig finseth back content introduction text editing brillig slithy toves gyre gimble wabe mimsy borogoves mome raths outgrabe general form text editing process taking input changing producing output ideally desired change would made immediately effort required beyond mere thought change unfortunately ideal case yet achievable thus consigned using tool computer effect desired change computer physical limitation limitation include nature userinterface device cpu performance memory constraint physical virtual disk capacity transfer speed computer program perform text editing must operate within limitation book examines limitation explores tradeoff among algorithm implement specific tradeoff provides general guidance anyone want understand implement text editor perform editing general present complete source code editor source code available disk least see appendix b matter wo nt even see completely worked algorithm rather book teach craft text editing understand construct editor first chapter discus external constraint human mental process file format interface device later chapter describe memory management redisplay algorithm command set structure detail last chapter explores emacstype editor emacstype editor also used whenever reference specific editor required range topic quite broad easy lose sight forest tree remainder introduction sketch outline forest examining editorinminiature getlineofinput routine start basic version routine make elaborate series step end see complexity text editor arises program example written ansi version c language appendix provides brief introduction c language explains feature used example basic getline getline routine accepts input prompt string buffer accept input buffer must least two character long indication buffer length produce output successfail status status success input stored supplied buffer end input marked nul decimal character status fail buffer may modified contain valid input editing performed routine input buffer first version assumes creating new item scratch time version one flag getline char prompt char buffer int len char cptr buffer int key len return false safety check printf prompt key keyget isprint key cptr buffer len beep else cptr key printf c key else key keyenter cptr nul printf n return true else beep version one accepts input user press enter key user input overflow input buffer input discarded program sound error beep enter key pressed program appends nul character terminate string return true nonprinting character enter also cause program sound error beep simple straightforward useless way user correct typing mistake version two version two add editing flag getline char prompt char buffer int len char cptr buffer int key len return false safety check printf prompt key keyget isprint key cptr buffer len beep else cptr key printf c key else switch key case keyback cptr buffer cptr printf b b break case keyenter cptr nul printf n return true break default beep break version two start developing problem longer swept rug version one glossed exactly meant enter key sort okay keyboard one key labeled enter return something similar almost always sends carriage return character program compare character almost always operate correctly ie user expects however keyboard least two key erasing back space delete people computer system use one people computer system user ignore extra erase delete character key might find program handle problem several way accept one accept operating system support sort terminal parameter configuration ask operating system character use provide configuration option program let user set preferred character option likely default operating system configuration setting one available picked first option half user upset second option much better almost user like part program need operating system specific often select option writing small program minimum operating systemdependent code third option fine solution user like building work ie operating system instead reinventing wheel picked fourth option already learned emacstype editor implicit option recognizing user able control environment much possible yes work write program yes sometimes overlap existing operating system well worth effort another problem appears statement printf b b statement crude attempt erasing character turn pretty powerful convention regarding printing character newlines handled operating system output device character move cursor right start next line however want cursor back way wish control way industrywide convention specifying operation convention rely upon program implement method coping range output device version three version three assumes input buffer contains text text used response user press enter ie text default value flag getline char prompt char buffer int len char cptr buffer flag waskey false int key len return false safety check tostartofline clearline printf prompt buffer key keyget isprint key waskey buffer nul waskey true cptr buffer len beep else cptr key cptr nul else switch key case keyback waskey buffer nul waskey true cptr buffer cptr cptr nul printf b b break case keyenter printf n return true break default beep break version three return supplied response user press enter key otherwise supplied response erased completely first time printing key back space pressed change worth noting prompt moved inside loop terminal interface routine added first one move cursor beginning line next clear line version four version add number feature command move cursor left right insertreplace editing command delete character right cursor command move beginning end response command clear response command clear change restore default way insert arbitrary character including command character response cancel key redisplay key version routine also slight change interface addition separate default value parameter flag getline char prompt char buffer int len char default char cptr buffer flag isinsert true flag waskey true int key len return false safety check strcpy buffer default tostartofline clearline printf prompt buffer positioncursor strlen prompt cptr buffer key keyget isprint key waskey cptr buffer cptr nul waskey true isinsert buffer strlen buffer len beep else move rest line insert memmove cptr cptr strlen cptr cptr key cptr nul else cptr nul end input append buffer buffer strlen buffer len beep else cptr key cptr nul else cptr key replace else switch key case keyback waskey cptr buffer cptr nul waskey true cptr buffer xstrcpy cptr cptr cptr cptr nul break case keydel delete following char cptr buffer strlen buffer xstrcpy cptr cptr else beep break case keyenter printf n return true break case keyleft cptr buffer cptr waskey true break case keyright cptr buffer strlen buffer cptr waskey true break case keystart move start response cptr buffer waskey true break case keyend move end response cptr buffer strlen buffer waskey true break case keyquote insert next character even control char waskey cptr buffer cptr nul waskey true key keyget isinsert buffer strlen buffer len beep else move rest line insert memmove cptr cptr strlen cptr cptr key cptr nul else cptr nul end input append buffer strlen buffer len beep else cptr key cptr nul else cptr key replace break case keyclear erase response cptr buffer cptr nul waskey true break case keydefault restore default response strcpy buffer default cptr buffer waskey false break case keycancel abort editing return false break case keyredisplay redisplay prompt resp break case keyinsert set insert mode isinsert true break case keyreplace set replace mode isinsert false break default beep break version four claimed well one would like particular check ensure default response fit within buffer way user determine whether program insert replace mode except typing character finding happens assumes character width displayed address question command user supposed remember forest example presented chapter bumped problem characteristic display keyboard affect text editing program cope presenting output different display view text presented user text managed large amount text could edited efficiently display updating occur editing change efficiently presented user command set designed meaning various command program designed user change operates question addressed remainder book question probe understanding modify latest version getline accept numeric response sort error message given easy modify latest version getline accept response list passed parameter sort error message given easy two good format list easy familiar c medium otherwise appropriate degree control key definition enable disable feature etc calling program input editing medium back content one user beware jabberwock son jaw bite claw catch saying go business would great nt customer well programming would easy nt user simple case would exactly one user program would use program however used many time many people must take user account designing program chapter review aspect user relevant text editing full discussion user design fill many book listed bibliography chapter book address question nonpeople user user category user placed category category described term amount type experience important understand user user creates model new program work based experience program combined hint program user interface give either match program behavior user model give enough information generate model wellmatched program amount experience amount experience user point continuous scale user start experience accumulate experience learn although scale continuous divided five region order simplify discussion also list intended selfrating scale reading book programmer neophyte user barely know computer lack understanding basic term file file name concept behind term actually quite sophisticated lack understanding mean unintelligent people never reason learn concept designing program type user may feel blessed cursed cursed difficult blessed area program design pressing need good design experience field artificial intelligence shed light issue ai researcher found comparatively easy write program handle advanced mathematics freshman calculus however researcher pushed handle easy people area filling coloring book programming problem got harder harder difficulty due fact task teaching collegelevel course well understood especially college professor teaching coloring example many textbook seen color point computer designed process information certain way one mathematically elegant necessarily related people mind work people write program basic task difference becomes increasingly apparent many program mi designed neophyte user often offer simple command yet leave intact difficult concept file solve wrong problem sort like travelling place foreign language spoken trying communicate speaking native language slowly distinctly program designer must understand thought structure user design program match structure blessing come designing program different conventional program wellmatched user novice user used computer perhaps text editing word processing spread sheet database application event novice user familiarity idea typing thing box seeing response somehow reflects typing understand shift key work lowercase letter l digit forth even understanding idea context key different thing different time user amount experience able operate almost program good design decent manual basic user like novice user understand programming concept thread control variable statement like fact many people call user programmer user operate program even one poor design given source code program able customize extend albeit might awkward fashion power user know one application program thoroughly understand use program fully often go beyond bound original designer intended may write large program often form application macro design program user understand fine point program use programmerlevel user understand theory programming writing large program design program implementing generalize applying experience knowledge one program guess another program operate type experience amountofexperience scale onedimensional people start beginning proceed along scale gain experience type experience scale like collection baseball card user collect experience type card order two people number experience type card may experience type card common experience type necessarily carry experience gained one type system may may prove useful another actually experience gained one system may make difficult learn another user grow like one type system may dislike another one thus making experience transfer problematic experience type major effect design program usually important new program appear operate manner similar existing program thus possibly bad design existing program may carried design program religion section might also titled religious preference computer field religion technical term refers usually irrational extreme preference one program style method another although really anything phenomenon keep mind analyzing comment design observed people often get religion first application example word processor use ca nt recall number people tried convince program discovered ie first one used best one world form religion normal derives fact move manual automated method eg typewriter word processor involves major increase capability even simplest word processor provides vastly capability typewriter new user experience realize program eg word processor equal form religion usually fade away time new user gain experience hauntingly close parallel second system effect brook second program user one watch people started using one program gave program favor second one problem think since second program better first one usually must therefore better rest nothing particular user feel religious program rational argument general ignored however aware user exist recognize dealing one user goal knowing user experience essential program design must incorporate knowledge task task user trying accomplish text editor might want create jotting format important jotting format important jotting within structure eg outliners something specialized format eg business letter poem short narrative document eg school paper short story longer document eg long paper book long document complex formatting eg mathematics textbook computer program data program something else frequency task range occasionally continuously different task performed user different frequency style task also vary one person may one task start next another person may frequently switching among two task physiological constraint user people limit people limit must considered designing program hand limited reach act reaching one key draw hand away key thus command expect follow one another assigned constraint mind function key often difficult find awkward press almost always two shift key keyboard one control equivalent key may one type shift key thus difficult press shifted key controlp one hand nonkeyboard device mouse draw hand far away keyboard nt general know whether left right hand drawn away sequence controlmouse button may difficult ie lefthanded user type eye focus limited area high resolution surrounded large area lower resolution however area strong contrast reverse video still visible lowresolution area blinking item visible draw eye status display therefore change quietly possible draw eye away text edit example may make sense place status area top part display insertdelete line operation cause visible motion bottom part mind brain however place greatest constraint editor design capable processing thought instruction per second order user productive important thought directed much possible useful editing operation several thing consider regarding thought first mental effort thought required translate display representation text edited user internal representation wysiwyg see get principle reduces effort reducing amount thought required note general wysiwyg mean fancy output graphic display rather mean appears le second mind expectation see general sens expects see extreme case something totally unexpected happens take many second mind even recognize unexpected image addition time required process image make decision thus important program anticipate mind expect see arrange display accordingly third take mental effort handle special case example delete operation deletes everything except newlines take effort remember difference monitor command given ensure conforms restriction fourth take mental effort plan ahead design editor make easy user change mind last take mental effort track mode chapter go mode detail time new mode introduced take mental effort track state mode add effort process switching mode mind shortmemory hold five seven chunk information norman chunk organized cachelike form chunk cache fill chunk must stored main memory process take time considering chunk used remember edited editing done context becomes clear editor designed use chunk possible mind poor thinking numerically much easier think term put put object location last two point mean computer much remembering possible user applying physiological constraint let u examine principle apply particular user select example simple reason understand mind work better understand anyone else first almost always work plain ascii file hence take advantage wysiwyg even simple ascii terminal second programcomputer combination use mostly keep typing real time third emacs command set use regular mind need keep track special case fourth basic paradigm behind emacs command set move desired position make desired change paradigm applies even case made mistake simply add mistake list change made continue apply paradigm never change mental gear penalty making mistake thus minimized fifth program minimizes need remember text edited seen exactly state variable track addition emacs command set defined mainly term object character word sentence etc convenient way saying lot whole lot huge amount various aspect emacs command set discussed later chapter going beyond principle used emacs command set long thirteen year quip editing performed spinal cord brain although quip true since spinal cord handle purely reflex action look closely mind function editing text mind experienced user operate similar fashion write text part mind articulating point trying make another part expanding word component character call part source process another part mind translating character finger motion call part keystroke process part mind reading text appears screen turning back word matching word original word stream call feedback process three process work sort writing using computer typewriter pen people write use however resulting text error one two thing must happened either user made mistake thus minimizing number error corrected user must written slowly giving feedback loop enough time recognize error much time elapsed error becomes difficult correct omitted character previous line page advent computer ability make seamless correction third option appeared new fast feedback loop loop operates giving keystroke process ability recognize made mistake extra ability useful without seamless editing take long time use eraser correction tape however lot practice fourth process running editing process editing process take feedback keystroke process insert editing command character stream created source process example editing might operate correct error writing text quick red fox source process generates appropriate character string error occurs actually typed keyboard string teh keystroke process recognizes error h typed editing process take time run time let u suppose character quick space followed quick placed output queue reasonable suppose character word placed queue one operation editing process place string character output queue string correct error emacs command set sequence might bbte sequence mean move back word b move back one character b interchange two switched character swap eh return end line e rest line processed usual character red fox placed queue two chunk eventually typed correctly later time feedback process confirms phrase typed correctly user may variation process example may always delete word error retype word extra fast feedback loop finger kept typing full speed time granted extra five character typed consider would happen without extra loop could well entire phrase would typed error noticed source process would already started next phrase feedback process notice error smooth typing character would stop user mind determines exactly correction required perform must start pipeline going stopping correcting starting take several second fifty wordperminute typist typing five character per second emacs correction string would take one second type thus direct saving second indirect saving due interrupted smooth flow thinking note design command set played important part making loop usable example go backward word operation available editing process would compute many character output buffer operation quite timeconsuming quick many letter brown well well matched mind work recent industry trend illustrate user friendly design clash editing process consider typical modern window system way act frustrate experienced user example user close modified file computer may put dialog box say discard change yes cancel word effect prompt displayed beautiful dialog box neatly centered screen response button unfortunately even user expecting dialog box may wait system catch reason operating system know dialog box program informed box hence mouse button pressed early buttonpress event sent main window dialog box user know dialog box appear center screen general difficult predict precisely dialog box button show able mouse ahead hence mouse button pressed box drawn reason experienced user editing process may interrupted interrupt doubt contribute feeling sluggishness many experienced user still feel using system challenge design program experienced user productively use program step take facilitate use include keep dialog box choice consistent provide keyboard response choice provide typeahead prepared handle misdirected event general goal experienced user able accurately predict response required reliably supply response advance prompt way experienced user continue work without slowed system user handicap someone significantly reduced ability something person considered handicapped area reduced ability might physical reduced hand motion poor eyesight might mental reduced ability remember thing number people severe handicap many area small large number user least limited handicap area important program accommodate wide range user possible program must accommodate user handicap also important keep mind user severe andor multiple handicap benefit greatly use computer sometimes even user without handicap benefit design intended aid user handicap example adding wheelchair ramp old building also allows people roll heavy object ramp instead use stair main design principle follow take account user handicap reduce mental complexity user deal one object concept time reduce visual complexity keep display clean point avoid clutter reduce manual complexity allow user everything one finger mean force user everything one finger keep command simple allow shortcut shorthand applicable provide customization lucky operating system surprising also good design rule user without handicap question probe understanding question refer marketing decision designer must also take account people yet user remember purchaser user consider case higher go organization le computer experience people assume product purchase decision made higher level product user inversion affect product design product marketing medium many product review include feature checklist scoreboard checklist general include feature found related product pro con checklist manufacturer user medium observed thing equal people buy expensive two application program easy productivity fall computer response time increase however falloff linear happens series threshold slight increase response time cause large drop productivity threshold exist information need human physiology order calculate threshold hard would design program best used someone dyslexia entire computer system okay extreme make le usable people medium back content two user interface hardware beware jubjub bird shun frumious bandersnatch user interface hardware collection device use interacting computer currently available user interface hardware usually consists display screen output keyboard perhaps mouse graphical input device input chapter first discus output side screen discus input side keyboard finally discus communication path tie two part together display type old day ie early almost display part characterbased terminal difference capability among terminal often crucial difference play important part type redisplay scheme workable redisplay discussed chapter thus worth reviewing old display type tty glass tty tty canonical printing terminal printing terminal property written never unwritten glass tty tty except us screen instead paper random cursor positioning way backing way changing displayed quieter printing terminal though text editor used one display usually maintains small window eg one line either echo newly typed text else constantly redisplays ie reprint small window user familiar display editor however possible crunch edit terminal type generally pleasant way work although one would hope type display gone good crop time time poorly implemented window scheme window scheme offer window interface resemble printing terminal well may encounter one type write scheme unixstyle output stream editor writer may want check either alter output accordingly nt alter output may want alter output feel user want create sort audit trail type file hand would want alter output user attempting diagnose problem recording data sent display basic display basic display bare minimum sort cursor positioning generally also clear end line operation put blank screen current cursor position end line cursor clear end screen ditto end screen function function simulated necessary sending space newlines typical basic terminal dec display quite usable higher speed example bps connection usability deteriorates rapidly speed decrease requires patience use basic display bps connection dedication bordering insanity use bps advanced display advanced display feature basic display along editing feature insert delete line andor character feature significantly reduce amount data sent display common operation typical advanced circa terminal dec terminal currently manufactured least powerful one subtle difference among advanced terminal insert line operation add one blank line cursor line drop bottom screen lost delete line operation deletes one line cursor blank line inserted bottom scroll window operation move line x updown n line affect specified line one remain stationary scroll window operation pleasing others see stationary text displayed bottom screen insertdelete line appropriate number line must deleted inserted text bottom thus move within display memory jump often visible user scroll window whole thing performed one operation line bottom jump memory mapped display designation cover wide range display common characteristic display memory read written nearbus speed display usually built computer running text editor many personal computer workstation follow design warned computer fast display hardware software used interact display slow probably better redisplay scheme consider display advanced even basic example display rom bios call ibm pc sun workstation case thirdparty driver operate many time faster manufacturersupplied one use fast display several implication redisplay process first many advanced feature typically available however may possible emulate missing feature quickly enough lack advanced feature almost always significant second may possible use display memory copy data screen optimization discussed chapter third reading screen cause flicker writing screen read incremental redisplay process run compare buffer changing necessary finally write screen without flicker redisplay process merely boil copying buffer onto screen copying generally faster comparing graphic display personal computer workstation display actually bitmaporiented graphic display software used make appear display character graphic display appropriate software program display text display text using proportional spacing different letter take different amount space take advantage different size style display font even incorporate graphical element keyboard section present review salient keyboard feature although u wo nt ever get chance design keyboard purchase keyboard importantly design program existing keyboard mind keyboard main way telling computer case way many thousand character entered course normal working session someone type living typist writer computer programmer easily type ten million character year keyboard thus tailored ease typing character statement might seem trite large number keyboard market ie pretty poor entering character discussion various keyboard feature desirable nkey rollover highly desirable feature mean nt let go one key striking next code key strike sent proper order n mean rollover operation occur even though every key keyboard pressed first one released basic premise behind nkey rollover hit key twice row instead hit different key first reach key naturally pull finger initial one nkey rollover loosens timing requirement regarding exactly finger come first key thus typing error reduced note nkey rollover help typing double letter note also shift key handled specially subject rollover keyboard implement rollovernkey lockout mean first two key continuous sequence sent rest ignored key released feature actually way turning statement nt offer nkey rollover positivesounding statement offer autorepeat mean key pressed held code key sent repeatedly desirable feature cause problem say put something keyboard problem worth living older terminal sometimes followed typewriter design certain key would repeat space x dash repeating key useful terminal repeat printing character control character also useful see later control character likely want repeat three parameter associated autorepeat initial delay first repeat rate key repeat acceleration repeat ideally user able set parameter set value selected manufacturer become additional consideration typeability trust english language sunk point considered valid word single critical feature simply ability type useful character without moving finger standard touchtyping position asdf jkl key people use computer keyboard touch typist thus type reasonably fast slowed move hand basic position take one two second locate type outoftheway key row digit way numeric key pad cursor control key one second three ten character time word per minute thus take le time general type four fivecharacter command basic keyboard type one special key desire typeability worth least considering away key shift lock cap lock rarely ever used keyboard space occupy high demand yes realize antiuppercase bias showing keyboard manufacturer done thing reduce typeability two example illustrative first timing shift key blown result foo desired foo foo foo likely result example small sweet spot key missing sweet spot cause desired adjoining key fire thus striking could cause either io nothing sent packaging physical keyboard design also important sharp edge near keyboard tightly packed key cause error fatigue keyboard positioned comfortable palm ledge may either good bad keyboard meet ergonometric standard experience ergonomic standard equate hard use special function key keyboard manufacturer seem decided plethora special key useful adding shift key thus get keyboard insert line cursor gasp key pressed either function name something totally random send usually predefined unchangeable sequence character program advent windowing system manufacturer realized keyboarddisplay combination simply information required properly perform function locally also decided random operation nt sell device well actually change terminal made year ago leaf u character sequence ideally sequence would programmable thus editor could save current set programmed sequence load set would interfere editing command restore user setting upon exit however real world often case sequence programmable given key may may useful example cursor key might send escape e may wish particular sequence perform move end sentence operation thus pressing cursor key move end sentence okay say wo nt use escape e move end sentence look sequence may sent function key design command set around well good try use different keyboard new keyboard general use different sequence old one sequence may even conflict example cursor key new terminal might send escape e got situation two reason major one minor one minor one easy deal tell editor keyboard using editor perform required adjustment unix system example required information found etctermcap terminfo facility major reason situation program tell pressing function key typing sequence character explicitly possible character must shared regular key function key system support directly attached terminal use timing information make determination string character come delay assume usually correctly single functionkey press timing approach work terminal computer coming via network problem could best solved standardizing character sequence sent function key single obscure prefix say escape control consistent syntax device easily determine sequence command set designer would live hole command set would small price pay aside problem compatibility whatever software run placement function key also problem mentioned key one side take long time hit thus typing slowed considerably key best used infrequently used function function extra time significant factor eg help yet one problem additional key free number want pay limited however desirable ability specify large number function ie large number code specified user number function key required grows linearly number code extra shift key way increase number code available user provide extra shift key shift key key modify action key shift control two common example key ibm pc alt key apple macintosh cloverleaf key terminal meta key option example meta key would set top value decimal bit character typed thus typing shifta would send code uppercase decimal metashifta often abbreviated simply metaa would send code decimal user thus specify code instead usual full ascii keyboard number possible code grows exponentially number extra shift key thus even code keyboard extra shift key conceivable use systemdependent technique take advantage extra information finding room basic keyboard extra shift key easy one reason removal shift lock key suggested earlier key must basic keyboard order preserve touchtypeability key placement computer typewriter thing computer simply apply typewriter hence computer keyboard key typewriter yet key must conveniently placed several computer manufacturer achieved good keyboard design unfortunately retired good design favor poor one see next section example criterion good key placement basic qwerty keyboard dvorak keyboard discussed later top row escape second row tab qwertyuiop third row control asdfghjkl fourth row shift zxcvbnm shift extra shift key alt meta etc immediately shift key back space andor delete key upper right close possible key fit right somewhere return enter etc key right close possible third second third row break key far upper right position come accepted standard computer keyboard however manufacturer gotten scared computer might actually resemble computer thus necessary key escape control get moved far reach keyboard character get moved convenient traditional position know dvorak keyboard underground fad proponent swear claim significant performance improvement ie type faster story go standard qwerty layout designed slow typing early typewriter order keep mechanism jamming since jamming longer consideration one dvorak design layout better regardless truth story believe true keyboard layout take advantage improvement technology example modern keyboard actually grid switch switch scanned electronically travel feel characteristic adjusted desired adjusted key travel effort much reduced old manual typewriter hence hand finger motion reduced overall benefit gained switching layout thereby reduced considering hundred million existing keyboard use qwerty layout billion people trained use becomes clear enormous gain productivity eg greater would able justify switch another layout number isolated success story even proponent dvorak layout offer controlled study show requisite gain norman hence keyboard adopted large scale example keyboard section briefly review number widely available keyboard keyboard reviewed one actually named review transfer clone comment course personal opinion dec terminal keyboard layout excellent feel clunky control key nt repeat dec terminal keyboard layout poor badly placed escape key key feel pretty good ibm pc keyboard one sold original ibm pc layout almost excellent key placement little weird make clacking sound happen like although many people feel excellent nt try improve ibm pc keyboard one get ibm enough keep buying new ibm pc escape control key poorly placed feel excellent apple macintosh original slab keyboard layout nt bad consider apple intended machine universe try incorporate outside software whole however suffers quite enough key especially escape terminal emulator program awkward use feel fair apple macintosh standard keyboard perfect layout enough key great feel apple macintosh enhanced keyboard keyboard people like ibm pc keyboard enough said sun microsystems sparcstation keyboard excellent layout poor feel many function key graphical input another way interacting computer mean graphical input device advantage graphical input device reduce number command needed device used pointing section screen possible specify item ie operate without specify numerical address location command string move graphical input device used screen treated one menu device pointing one entry cursor used provide feedback user menu item currently selected usually one flag specified conveniently device flag provide control information analogous shift key basic way use device track position implied graphical input device cursor signal given action implied current position performed screen logically broken two section one section text edited moving cursor provides convenient way move point around typing character could cause inserted wherever cursor portion screen specify menu possible action select graphical input thus sophisticated way specifying position argument function following section discus advantage disadvantage variety graphical input device bear mind comment generalization exception advantage disadvantage mentioned touch sensitive display touch sensitive display tsd sound like screen covered special transparent material grid led receptor device touch finger absolute x coordinate touched reported available flag touchno touch flag actually experimental pressuresensitive display exist report three position three pressure ax wellengineered touchsensitive display quite pleasant use lowusage application highusage purpose text editing tiresome keep raising hand screen finger tends cover interesting part display ie part edit tablet tablet special surface report position input device x coordinate input device puck small box special pen least one flag touchno touch always available puck four sixteen even extra flag tablet handy converting paper document map computer form le useful text editing tend large therefore require long reach lot uncluttered desk space mouse mouse small box wheel case felt pad special pad move around floor desk book leg anything else report relative movement mouse ie moved n unit unit left several flag button although correct number one extra button mean program designer try put extra function function problem advocate extra shift key presence function usually implies poor program design fortunately mouse extra button software easily correct defect making thing trackball trackball upsidedown dead mouse instead moving wheel moving box spin slightly larger wheel directly joystick joystick small stick mounted couple potentiometer typically report either absolute position first derivative relative movement second derivative acceleration stick moved small distance difficult construct one good resolution avoids stickiness jumpiness generally nice use mouse trackball flag simulated regular keyboard key different mouse finally imaginary useful device considered device footoperated mouse perhaps called rat using foot rather hand operate mouse solves one nagging problem device hand must leave keyboard usual aforementioned result course device make harder edit foot desk device new type input device appear time thus listing device ever remain complete example recent device pen input point remember device judged strength weakness device judged help user whether device neat new conclusion device assume reasonably high bandwidth connection computer say bps faster slowspeed connection cursor tracking must performed local display device must somehow programmed knowledge report event cursor sometimes cursor change shape cross one part screen another way possible supply necessary immediate feedback slowspeed connection would quite satisfactory communicating significant event probably satisfactory screen refresh would follow say selection menu communication path issue section cover number miscellaneous issue concerning communication path computer displaykeyboard device speed character format almost go without saying faster communication path better consider said also almost go without saying fullduplex communication path necessary fortunately long past day user forced wait computer let type except automated teller machine communication asynchronous serial path character format issue consideration seven eight data bit pick eight possible way least potential use extra key code choice eight data bit also let use international character set even odd parity pick one go data bit field effect data editor see combination tend find place seven data bit even parity older system eight data bit parity newer system number stop bit one unless system want different number operating system designer make quite valid reasonable assumption processing input character fortunately usually also offer ability turn processing text editor follow step entry editor record current processing parameter turn character processing exit restore saved processing parameter way text editor complete control happens input character place extra burden writer editor must replace operating system handler version mimic existing function hand version probably differ operating system version number crucial way example operating system let suspend process example unix support job control need restore terminal input processing parameter turn control back operating system resumed need return setting back used editor noting change new window size probably refresh display nt replaced normal handler user would find unfriendly program use flow control faster communication path le time display process character speed communication path increased point reached display longer keep real time point flow control required three method currently use implement flow control first inband control two character reserved flow control purpose typically control controlq character first used mean hold ca nt keep buffer almost full second mean okay caught proceed method work part annoying property using two valuable control character using control character cause problem program example exist communication protocol use character allow character reserved second method outofband control method us variety mechanism none interfere sending data example method hardware handshake line network protocol mechanisims method clearly superior inband final method flow control avoidance method take advantage fact display take different amount time process different character character called padding character take little time process program send data mix useful character padding character specific mix computed average time required process character le time taken send character communication path terminal input buffer overflow example let say fairly typical figure communication path speed one character per msec time process printing character msec time process line feed character msec time process pad character msec sending full line text display would send character msec character would take msec msec msec process hence padding would required hand sending singlecharacter line text display would send character msec character would take msec msec msec process padding would required msec processing time greater msec transmission time turn padding character sufficient msec msec msec msec le msec transmission time difficult calculate correct number padding character required given character mix communication path speed third method preferred method text editor work communication path ie even outofband flow control allows full use input character used network disadvantage creating modest additional amount network traffic ideal method would editor determine whether outofband flow control used along entire communication path control use padding character need sent unfortunately usually possible reliably determine type flow control use echo negotiation echo negotiation devised multics computer system protocol use computer network cut response time reducing communication overhead potentially useful environment user terminal one node computer running text editor another environment take long time send character back forth yet take little time send many character echo negotiation requires easy describe exactly done character communication processorterminal combination combination capable enough editing make worthwhile typically echo negotiation used editing point cursor end line text editor sends list approved character terminal nearby processor long user type character reach end screen line thus necessitating wrap terminal safely echo input character display hold onto input text nonapproved character typed line fill terminal report held input character reason input sent ie nonapproved character line wrap text editor editor process input data cycle repeat xylogics annex terminal server incorporates advanced version echo negotiation called leap protocol incorporates design standard echo negotiation leap protocol suffer problem problem severe enough call question desirability using echo negotiation potentially useful terminal separate computer running text editor computer overloaded principle behind echo negotiation waking text editor process character inefficient extreme case wakeup may take long input echoing significantly delayed fix echo negotiation offer perform update batch thus waking text editor process fewer time thereby reducing overhead problem fix inherent success echo negotiation input echoed slowly evenly user typing general much slower processswitching time textediting process tends stay memory echo negotiation input echoed quickly nonapproved character typed comparatively long pause encountered textediting process must woken possibly even swapped talking situation resource tight even though average percharacter processing time might lower variance percharacter time much larger echo negotiation usually case variance high system whole becomes unpleasant impossible use one extreme test performed found variance time great editing impossible stopped typing many second could never tell whether computer processed input hence could nt safely continue typing editing command new text inserted conclusion echo negotiation good feature include fancy modem highspeed modem bps higher starting become quite common main problem advertising focused around filetransfer protocol dumping large quantity text manufacturer add variety compression technique improve modem throughput area however text editing interactive low response time important high throughput compression scheme implemented modem cause problem simple solution turn compression forget turn control controlq flow control question probe understanding devise least three different way encoding cursor positioning coordinate extensible easy characteroriented display handle blinking text easily graphic display matter easy could change one physical attribute display eg size phosphor use would easy give example application make effective use function key easy devise efficient extensible encoding scheme function key easy keyboard used ibm pc compatible computer assign priority shift key pay attention highest priority key pressed example pressing control shift give code pressing control better worse giving different code combination key press easy amount buffering affect need padding matter system additional buffering placed medium fourth way handle flow control used common practice longer called etx ack code character used implement method sender sends block text followed etx character waited receiver return ack character scheme dropped favor interact terminal computer network medium back content three implementation language took vorpal sword hand long time manxome foe sought choice implementation language major effect design text editor environment one language available environment best editor may end different would ideal language available however environment offer least two language thus choice chapter offer guidance making choice course may choice scylla charybdis general consideration general consideration selecting language use implementing text editor availability implementation quality text handling power support extensibility support large project efficiency consideration explored detail availability implementation quality use language supported system text editor first implemented upon nonetheless thinking second third later system text editor ported language system support common addition mere presence language processor system take consideration quality implementation system implementation speed operation quality diagnostics quality code produced factor make large difference usability language particular system text handling power may appear redundant say text editor must handle text consider spread sheet program work handling control flow figuring redisplay setting execute command small fraction time spent floating point instruction user think program real work given moment text editor similar interactive program mainly following waiting user input parsing input setting execute command executing command determining effect command screen updating screen operation involve processing text way text editor differ application executing command item also involves manipulating text important note text handling necessarily mean string handling many case language native string operation sufficient must write string primitive example fortran support string dynamically varying length c support string contain nul decimal character many implementation pascal support arbitrarily long string leading byte count often bit wide support extensibility nothing else text editor change language make easy make maintain change case source code must changed editor recompiled however desirable allow user change editor suit taste language offer support support take many form late binding name procedure indirect call dynamic linking technique retaining using symbol table information run time user think change term name address internal error consistency checking program control user protected mistake ability add code executing editor language offer feature simulate missing feature using language lack large project support text editor apt grow quite large technique useful large project useful example technique division program separate module division program separate file separate compilation way organize global name space way keep object global name space automatic verification procedure calldeclaration compatibility conditional compilation compilation constant way constructing data abstraction package procedure private state information way dynamically allocating memory add favorite list efficiency program spend time simple operation b b b c expression occur often enough matter knuth thus language support common operation well control structure implementation particular procedure call kept efficient language right respect main thing ensure keep simple thing simple specific language note section briefly examines number popular andor interesting language choice important keep mind level language equivalent anything one given sufficient cpu time memory programmer elbow grease however language intended make solving one type problem easy case type problem text editing teco teco text editor corrector developed massachusetts institute technology one first text editor ever written grew year gaining popularity feature one stable period digital equipment corporation took snapshot command produced subset version dec computer teco kept growing along way turned turingcomplete programming language several set editor macro developed used sometime around richard stallman organized editor macro first emacstype text editor teco clearly language capable supporting text editing however unless decsystem computer run luck mit version teco written assembly language run system teco command set described appendix two reason good choice implementation language mentioned implementation series computer implementation machine involve answering question write teco question chapter discus language le readable apl listing teco program passing resemblance transmission line noise writing maintaining teco program definite problem lisp lisp especially common lisp excellent choice readily extensible even compiled lisp code usually provision evaluating new expression thus provides interpretive language readily used write even complex editing macro modern implementation usually excellent string support language feature macro package support large project well lisp program fairly readable nt mind lot parenthesis like compiled lisp code usually efficient language view memory management make well suited linked line form buffer management described chapter c c designed people wrote operating system utility since text editor among utility surprising c would good choice c support extensibility well compiled language better example provides ability call procedure pointer c lack builtin string type lack hindrance would probably need reimplement string anyway strong tradition c creating new data type requirement well supported c support many feature needed large project addition language designed user came widespread use stable large existing base compatible implementation due heritage nt need improvement language order get useful work done c basic data type focused around character integer pointer exactly core data type needed text editor c allows ready manipulation complicated data structure yet remains generally readable c variant c provides much improved support objectoriented programming good choice another example system language thus comment regarding c also apply however main failing lack multiple implementation vendor seriously support ibm corp system language number system language eg modula however like limited availability many designed research project none even distantly approach c number implementation trained programmer fortran well people think great language writing astronomy program even written text editor choice pascal many people consider language good alternative read better c worth reviewing pascal history originally intended language present relatively small algorithm academic setting also targeted introductory programming course purpose excellent choice however standard language targeted towards developing large project provide feature make developing large project practical hand pascal vendor supplied feature unfortunately general chosen different way provide feature thus leading incompatible implementation make porting code difficult basic basic pascal problem core version even standardized industry ansi standard honored breach implementation range tiny basic run kilobyte memory true basic defined kemeny kurtz kemeny offer advanced feature could want omits line number true basic bear little resemblance programmer think basic language ada ada designed language support embedded realtime system many feature allow compiler validate code use external information produce small reliable object module however feature mesh well need extensibility example rarely need reprogram altimeter flight general computing environment home text editor simply outside scope ada intended however seriously examined choice text editor execute embedded realtime system sine sine anderson lisplike language tailored text application implementation date interdata perkinelmer minicomputer running magicsix operating system developed mit architecture machine group interesting language tailored implementing editor example ideal implementation language sine composed two part sine source code assembled compact format object code interpreted allows function rebinding nicety addition interpreter implement thing memory management screen redisplay thus resulting editor nicely structured irrelevant detail hidden away mention sine lead nicely custom editor language traditional language except perhaps common lisp offer complete support text editing solution used virtually every implementation emacstype text editor well many implementation editor creation custom editor language existing language often c selected language used write interpreter custom editor language interpreter manages memory handle display refresh general provides necessary utility function editor language used write logic uservisible command editor language implemented using interpreter command set readily extensible also editor language designed around text editing offer excellent texthandling power division programming task two component provides excellent base supporting large project since interpreter usually implemented language c interpreter quite efficient reason custom editor language preferred method implementing text editor question probe understanding good way implementing command dispatch table c fortran pascal ada easy stringoriented language snobol good choice easy much compilation appropriate custom editor language none interpret text tokenization full medium following previous question would opcodeoriented interpreter compare threadedcode interpreter medium back content four editing model rested tumtum tree stood thought editing model view file editor present user chapter describes several editing model build model varying combining model following discussion review model command available user assume essentially command available model onedimensional array byte general form data file onedimensional array byte onedimensional editing model present form data file directly user byte file displayed uninterpreted user see basic editing operation insert delete byte model pure little difficult user deal text editor appear use model actually use slightly modified form model character particular tab newline character interpreted display process thus text file appear series line model line break may may require special handling whether depends represented various representation described detail next chapter model support insertion replacement editing equally well replacement editing probably best implemented hybrid scheme automatically switch insert mode prevent replacing line break twodimensional array byte model basic twodimensional form instead editing line user editing quarterplane origin usually upperleft corner conceptually user move freely twodimensional quadrant practice editor usually store nonblank portion storing infinitequadrant worth data prohibitively expensive system may impose fixed upper bound width length quadrant line break implicit editing model hence implementation usually provide explicit command split join line insertion replacement editing possible although model lends replacement editing natural manner editor use model often explicit command insert delete row character within row pure form model arranges text rectangle implementation actually impart lefttoright toptobottom one seven combination bias bias affect editing operation example often case implementation offer many command editing within line command editing entire line list line model halfway first two consists onedimensional array line line onedimensional array byte user viewpoint model differs twodimensional model text exists entered user want extend line right must go insert mode type space character twodimensional model hand quadrant assumed filled blank hence concept extending line right line assumed extend infinitely far add text right user simply move desired position implementation use model usually make sharp distinction editing within line editing line example line may maximum length cut paste operation may operate line boundary paged model popular divide text series page editing performed within page explicit command required move another page repaginate text model could used editing within page division thought natural coincidentally happened make easier write editor system limited amount memory modern editor show page break framework float underlying text framework placed underlying editing model object editing general concept reason limit basic object edited character byte line may make sense case provide way editing object word sentence paragraph section chapter natural object explicit object editor provide command manipulate object without affect fundamental editing model object readily simulated example object link document opaque object included object eg bitmap graphical object line box circle etc addition text viewed two dimension example multiple file stacked third dimension multiple version single file combined timelike dimension portion file viewed manipulated tree list structure possibility endless dealing real text model listed le pure form model advantage disadvantage text complex structure represented model one hand text composed hierarchy lexical unit character word phrase sentence paragraph subsection section chapter document unit reflect meaning text user thinking term meaning editor provide editing model command reflect unit since text read sequentially onedimensional model wellmatched mode hand printed page composed character arranged word arranged line arranged page arranged document unit reflect layout text user thinking term appearance editor provide editing model command reflect unit page twodimensional object twodimensional model fit mode well many simple editor word processor support mode thinking mode attractive new user nt whole purpose word processor put character page nt follow user thinking term placing character page one taken extreme user forced make every placement decision situation nt leave user much time energy left decide write layout important directly relate meaning text meaning important user see text particular layout layoutoriented editing also important challenge design editing model editor allows user select appropriate feature model minimal effort thus take advantage best model avoiding disadvantage question probe understanding explore ramification twodimensional editing model origin center document instead upperleft corner additional command might required operation model make easier harder easy provide algorithm transforming onedimensional twodimensional model medium good way support proportionally spaced text pure twodimensional array byte model hard problem encountered trying support one model time easy good solution problem hard back content five file format uffish thought stood jabberwock eye flame chapter survey range file format text editor might encounter text file operating system standard way storing text file text editor must able edit standard system text file user point view file consist series reasonablelength line reasonable character line boundary program point view system text file consist sequence character divided line variety way popular method described card print image file series line exactly length typically character long may also include another form line divisor eg character crlf sequence file mostly found older system newline character marker byte used signal end one line start another popular choice line feed used unix system carriage return used apple computer dec computer carriage returnline feed combination used cpm msdos computer twocharacter sequence awkward use editing usually get away dropping cr appears part crlf sequence use lf newline character put cr back file written editing existing file record whether found cr remove nt put extra cr writing binary file character count system use initial count character typically count one two byte long followed many character may may padding line order align start word boundary record marker operating system store one line per record store record marker band case must read write one line time record line break information somehow operating system let read multiple line must method indicating line boundary lead u one earlier method line content system place restriction content line frequently encountered restriction long line system limit length line others place fixed limit typical limit character program attempt write line exceed system limit system return error others split line still others silently truncate line short line system support zerolength empty line quite well however system allow line others allow theory practice example systemsupplied text editor may allow entry empty line limitation file created line hence code handle line may tested well program may behave properly line encountered partial last line problem occur system use newline character short line systemsupplied text editor may allow entry partial last line ie missing newline character program may behave properly line encountered nonprinting character system generally allow printing character space character appear text file character code range decimal ascii equivalent character ebcdic difficulty arise program handle character example tab character treated one character appropriate number space latter appropriate width limitation nonprinting character usually fall following group tab form feed back space carriage return bare cr control character range decimal decimal meta character decimal typically system allow given group allow preceding group given character allowed next question character displayed typical method send character without translation expand caret notation see appendix e expand octal hexadecimal notation end file system record exact file length make information available program however two special case considered cpm system record file length next multiple byte convention controlz z character used mark end file data first z character ignored note file end exactly boundary program add trailing z character program filled entire remainder block z character program relied convention removed trailing z character msdos system started following cpm convention later changed omit z character safest algorithm use system editing existing file record whether file originally ended z new version written add z file one otherwise add z always user way selecting method binary file text editor point view binary file file text file file none following restriction found text file file may divided line line may length line may contain character general rule nice feature able edit binary file rule followed able read file write identical file back possible move usefully view portion file possible insert character possible precisely control deletion eg delete following three character structured file editor encounter standard systemtext file binary file skip rest chapter describes consideration designing file format holding information addition pure ascii text basic text file use printing character space character also need way indicate line break often user want include bell back space tab form feed character text file thus total character reserved representing leaf code bit character code bit character available us computer manufacturer used ascii character set analysis could stop however ibm corp apple computer corp hewlettpackard vendor support extended character set make use many code worry though world still safe manufacturer support different extended character set previously unused code use extent user wish able make use extended character actually book written many vendor jointly developing character set intended encompass character glyph use although complete job chinese japanese korean store extra information whether extended character set supported likely want store information fit unused character code lead u basic choice affect many aspect implementation extra information stored inband outofband inband storing information inband mean character code used signal presence additional information presence information indicated character code potentially used represent information use character code noncharacter purpose two ramification first code available representing character second character present redisplay must know display associated information user command must know process depending upon purpose extra information user expectation may appropriate allow inband information visible user least display mode may appropriate allow user edit information directly hand best choice might hide information user allow indirect manipulation note program able parse inband information either direction ie working forward buffer working backwards also important representation reasonably easy determine display file starting arbitrary point middle file particular program nt examine entire previous content file order figure display something outofband storing information outofband mean none character code used special purpose rather additional information stored somewhere else tied back text mean pointer offset disadvantage choosing outofband method must find place put information file edited information probably stored special purpose structure within editor however file stored additional information must put somewhere place separate file separate part file either different file fork file beginning end conclusion may enough additional information manipulating require significant overhead technique described next chapter apply additional information text preferred choice inband outofband good point bad choice must made casebycase basis actually almost two end continuous scale difference could also considered like inband data parsed use outofband data parsed file load additional information section describes category additional information may wish store file category illustrative example probably want store type information type different way font size attribute font describes shape character size information describes large character attribute variation font boldface italic underscoring together used word processor provide character formatting three share common quality ability change character boundary ability change one without changing others representation select need take quality account line paragraph page format information determines thing line margin justification type tab stop page heading footing page length forth information major effect redisplay code described chapter nontext object arbitrary nontext object graphical bitmap object spread sheet database excerpt information used noneditor application editor need know thing display much space occupy invoke application defines obtain current updated version internationalization section list u english language bias might encountered text file technique removing bias program outside scope book nature bias hard sort apology missed except section book contains u english language bias however programming design technique described rest book applied pretty much way nonus nonenglish language editor first bias character set used represent information many different international character set tend incorporate u ascii character set presented appendix e differ character second bias character size ie number bit required represent number distinct character stored document limiting user ascii character sufficient however international character set may require even bit per character case larger character size may make sense store character code multiplebyte character others long implementation handle consistently interchange data program system exact representation matter third bias language direction english us lefttoright toptobottom language use different pattern must also properly handle case mix language say english arabic fourth bias general convention handling thing character case language english upperlowercase distinction character changing representation depending upon position within word contextual form forth fifth bias handling number example u number written europe written addition language differ order digit entered left right v right left placement significant digit sixth bias handling date day month year month day year year month day popular differing punctuation character seventh bias handling calendar gregorian julian use quite similar lunar calendar also use eighth bias punctuation character handled example spanish question introduced inverted character terminated last bias hyphenation handled english often difficult impossible determine word hyphenated portuguese example easy determine hyphenate word considered mandatory handle hyphenation properly question probe understanding visible representation line boundary standard systemtext file user easy ability edit binary file useful easy reasonable require font size attribute definition always properly nested medium note program automatically make nonnested change request nested one define representation font size attribute medium define good representation font size attribute hard identify bias missed easy nonus reader probably hard u reader back content six internal subeditor came whiffling tulgey wood burbled came many way decompose implementation text editor smaller piece book analyzes one particular decomposition subeditor manage text edited redisplay useroriented command piece assembled editor complete particular decomposition chosen two reason first natural one relatively simple interface part second chosen many different implementation thus known decomposition work well chapter cover internal subeditor following chapter describe part purpose internal subeditor hide detail text stored redisplay useroriented command chapter begin presenting basic concept definition list internal data need describe procedural interface finally present number way implement actual subeditor discus tradeoff basic concept definition buffer basic unit text edited size zero character largest item manipulated computer system limit size usually set factor address space amount real andor virtual memory mass storage capacity buffer exist associated one file associated file buffer copy content file specific time file hand associated number buffer one copy file content different time write operation replaces content file content buffer thus two identical content least one moment read operation replaces buffer content file two identical content least one moment insert operation add content file buffer two identical content unless buffer empty insertion buffer interface presented follows onedimensional array character model described chapter seen however implementation need follow model stored text buffer line break represented single character called newline one time one one special position within buffer position called point operation change content buffer occur position also operation whose sole purpose move point point exist two character never character display position cursor character convention place point left edge cursor start buffer corresponds first location file considered backward point end buffer considered forward point time time useful able remember position within buffer mark object remember position number mark within buffer one mark remember position point mark always located two character exactly one mark range character point mark called region matter order point mark two example mark used mark may remember specific location future reference example command might paginate file case mark would remember point command invoked thus point could moved repagination returned initial starting place mark serve bound iteration example fill paragraph command might place mark starting place move end paragraph place mark move beginning paragraph performs fill region operation filling point location second mark two type mark differ behave case insertion made location mark normal mark move insertion thus newly inserted character mark fixed mark remain place newly inserted character mark example difference case command identify character inserted command merely need create fixed normal mark place insertion two mark bracket new character mode set alteration useroriented command set example c mode might alter definition word sentence paragraphoriented command apply token language statement block structure mode described detail chapter finally term character denotes basic unit change within buffer character size often eight bit long case term byte may used interchangeably character internal data structure section discus subeditor data structure subeditor state information defined chapter thus implementation retains information across invocation offer user ability resume editing left thus reducing amount work required edit file place state information kept screen manager described following chapter screen manager part software know displayed user screen knowledge retained across invocation information displayed user screen may change user exit reenters editor knowledge retained information recreated exactly specific data structure listed example undoubtedly wish change world contains buffer use editor circular list buffer descriptor variable indicates current buffer c syntax struct struct buffer bufferchain struct buffer currentbuffer world buffer descriptor internal information struct buffer struct buffer nextchainentry char buffername buffernamemax location point int curline int numchars int numlines struct mark marklist struct storage content char filename filenamemax time filetime flag ismodified struct mode modelist nextchainentry mechanism used implementing circular list buffer list circular preferred origin buffer possible get buffer equal ease buffername character string allows user able refer buffer point current location editing operation taking place defined term private data type since different implementation use different representation turn never need code outside subeditor ever aware representation data type curline optional implemented provides highspeed way track current line number numchars optional implemented provides highspeed way track total number character buffer length numlines optional implemented provides highspeed way track total number line buffer marklist list mark defined buffer mark structure defined later content indicates actual buffer content location data type specific vary implementation filename name file associated buffer empty string associated file filetime last time content file buffer identical ie time last read write multiprocess system value used determine whether content file changed another process thus whether copy edited synchronization actual file ismodified indicates whether buffer modified since last written read modelist list mode effect buffer mode structure defined next struct mark struct mark nextmark markname name location whereitis flag isfixed structure linked list repeated every mark chain circular probably good idea keep list sorted order mark appear buffer nextmark pointer next mark chain null pointer indicates end chain name name mark name returned mark creation routine provides way user refer specific mark implementation permit return pointer mark structure instead making name whereitis mark location isfixed indicates whether mark fixed mark struct mode struct mode nextmode char modename status addproc structure linked list repeated every mode effect current buffer chain circular mode defined way matter order invoked probably possible meet requirement actual practice thus list must kept sorted invocation order mode discussed detail chapter nextmode pointer next mode chain null pointer indicates end chain modename nonnull name added list name mode effect list ordinarily displayed somewhere screen note mechanism defining mode displayed name addproc pointer procedure execute whenever command set buffer need created recreated procedure make required modification global command table return successfail status procedure interface definition section defines interface provided subeditor procedure described term logical function leaving specific implementation detail example detail method determining whether operation succeeded undefined type status used indicate place status information especially desirable data type mentioned eg string intended generic specific implementation assumed one question important implementation addressed definition whether caller callee allocates data structure chapter assume callee allocates data name selected mnemonic value actual implementation may forced change conform local limit addition may wish add unique prefix buf se prevent name conflict status worldinit void status worldfini void status worldsave char filename status worldload char filename worldinit basic setuphousekeeping call called upon editor invocation perform required onetime initialization operation subeditor procedure except worldfini legally called unless worldinit return successful status call one empty buffer exists perhaps called scratch something similar worldfini terminates subeditor state information called worldinit must called subeditor call legally made worldsave save editor state information specified file worldload load editor state information specified file two routine implement statesaving across editor invocation possibility retaining multiple saved environment interesting implemented feature receives much use perhaps difficult user keep track multiple editing environment user may prefer able switch among task without perform save load creating stripped editor worldsave worldload routine would anything put stub reasonable possibility editor embellished later status buffercreate char buffername status bufferclear char buffername status bufferdelete char buffername status buffersetcurrent char buffername char buffersetnext void status buffersetname char buffername char buffergetname void routine manipulate buffer object definition assume character string name used specify buffer object mark pointer buffer structure also used implementation permit many question implementation choice whether subeditor retains current buffer whether buffer explicitly provided remaining subeditor call definition chooses former buffer change performed comparatively rarely hence probably helpful subeditor able cache information relating current buffer note call useful single buffer implementation might found resourcelimited environment eg toaster implementation include call reasonable chance expanding multiple buffer editor future buffercreate take name creates empty buffer name note two buffer may name bufferclear remove character mark specified buffer bufferdelete deletes specified buffer specified buffer current one next buffer chain becomes current one buffer left initial scratch buffer automatically recreated buffersetcurrent set current buffer one specified buffersetnext set current buffer next one chain return name new buffer mechanism allows iterating buffer looking one meet arbitrary test buffersetname change name current buffer specified buffergetname return name current buffer status pointset location loc status pointmove int count location pointget void int pointgetline void location bufferstart void location bufferend void pointset set point specified location pointmove move point forward count positive backward negative ab count character pointget return current location pointgetline return number line point note character numbered starting zero line numbered starting one bufferstart return location start buffer bufferend return location end buffer int comparelocations location location int locationtocount location loc location counttolocation int count miscellaneous utility routine comparelocation return location location locationtocount accepts location return number character location beginning buffer point percentage position computed float locationtocount pointget float getnumchars counttolocation accepts nonnegative count convert corresponding location set point position specified absolute character count pointset counttolocation count status markcreate markname name flag isfixed void markdelete markname name status marktopoint markname name status pointtomark markname name location markget markname name status markset markname name location loc flag ispointatmark markname name flag ispointbeforemark markname name flag ispointaftermark markname name status swappointandmark markname name routine manage mark allow creating normal fixed mark deleting mark otherwise manipulating except creating difference usage routine normal mark fixed mark although behavior differ markcreate creates new mark specified type return name new mark positioned point markdelete deletes specified mark marktopoint set location specified mark point pointtomark set point location specified mark markget return location mark actually used much location value change whenever subeditor call made markset move specified mark specified location ispointatmark return true point specified mark ispointbeforemark return true point specified mark ispointaftermark return true point specified mark swappointandmark swap location point specified mark definition basic way something region would like status dosomethingoverregion markname name flag wasbefore ispointbeforemark name markname saved status stat ok ensure point mark wasbefore swappointandmark name remember started markcreate saved ok wasbefore swappointandmark name return notok loop get mark ispointatmark name pointmove something ok stat notok break done put point back pointtomark saved markdelete saved put point mark back started wasbefore swappointandmark name return stat way procedure record initial position point mark flag saved mark little confusing unfortunately le confusing alternative creating two saved mark char getchar void void getstring char string int count int getnumchars void int getnumlines void routine return bufferrelated information getchar return character point result undefined point end buffer getstring return count character starting point return fewer count character end buffer encountered getnumchars return number character buffer ie length buffer getnumlines return number line buffer undefined whether one count incomplete last line void getfilename char filename int size status setfilename char filename status bufferwrite void status bufferread void status bufferinsert char filename flag isfilechanged void void setmodified flag ismodified flag getmodified void routine provide filerelated operation getfilename return file name currently associated current buffer size size buffer allocated returned file name setfilename set file name current buffer bufferwrite writes buffer currently named file making required conversion internal external representation modified flag cleared file time updated current time bufferread clear buffer read currently named file buffer making required conversion external internal representation modified flag cleared file time updated current time bufferinsert insert content specified file buffer point making required conversion external internal representation modified flag set file empty isfilechanged return true file changed since last read written setmodified set state modified flag supplied value often used manually clear modification flag case user sure change discarded flag set insertion deletion change buffer getmodified return modification flag status modeappend char modename status addproc flag isfront status modedelete char modename status modeinvoke void routine manage multiple mode capability modeappend appends mode supplied name add procedure mode list isfront true new mode added front mode list otherwise added end modedelete remove named mode mode list modeinvoke invokes add procedure mode list create command set void insertchar char c void insertstring char string void replacechar char c void replacestring char string status delete int count status deleteregion markname name status copyregion char buffername markname name routine manipulate buffer set modification flag insertchar insert one character point point placed inserted character insertstring insert string character point point placed string replacechar replaces one character another routine logically equivalent insertchar c delete potentially efficient point end buffer routine simply insert replacestring replaces string replacechar called character delete remove specified number character buffer specified number character removed point count positive point count negative specified count extends beyond start end buffer excess ignored deleteregion remove character point mark copyregion copy character point mark specified buffer inserting point basic emacs wipe region command actually implemented copyregion killbuffer mark deleteregion mark example also show even though implementation present single buffer user multiple buffer implementation may actually required status searchforward char string status searchbackward char string flag isamatch char string status findfirstinforward char string status findfirstinbackward char string status findfirstnotinforward char string status findfirstnotinbackward char string routine handle searching matching string possible implement routine term routine already defined repetitive nature help performance built subeditor actually said several routine defined insertstring searchforward search forward first occurence string point found leaf point end found string successive search thus locate successive instance string found point moved type search discussed chapter searchbackward work like searchforward except search proceeds backward point placed start found string ie end closest start buffer isamatch return true string match content buffer starting point word return true searchforward would move point strlen string character forward findfirstinforward search buffer starting point first occurrence character supplied string thus findfirstinforward would leave point first digit found point unlike search routine routine leaf point end buffer character string found typical use find routine sequence skip first number point findfirstinforward findfirstnotinforward findfirstinbackward work obvious way findfirstnotinforward search first occurrence character supplied string thus findfirstnotinforward would leave point first nondigit found point unlike search routine routine leaf point end buffer character string found findfirstnotinbackward work obvious way example using find routine move start next line findfirstinforward newline move start next word findfirstinforward wordchars findfirstnotinforward wordchars int getcolumn void void setcolumn int column flag round getcolumn return zeroorigin column point taking account tab stop variablewidth character special case taking account screen width width display user happens using affect action editing command setcolumn move point desired column stopping end line line long enough specified column reached exactly due tab stop special case us round flag flag set point rounded nearest available column position flag clear point moved next highest available column position characteristic implementation method section describes implementation method may characterized describes three method detail method assumed store buffer equivalent main memory depending upon physical characteristic computer main memory actual memory virtual memory readily mappable virtual memory later section describes method dealing file fit main memory implementation method discussed use twolevel divide conquer strategy first level divide buffer piece size range piece one character small number character eg line large number character eg entire buffer piece kept array linked list structure second level describes piece managed management extra space end buffer gap secondlevel technique described detail management technique piece allocated exactly enough memory hold length piece overhead information deletion done allocating new piece desired smaller size copying nondeleted portion old piece new one insertion done allocating new piece desired larger size copying old piece new one inserting new character way code struct piece int length char data length character delete len character starting start struct piece deletefrompiece struct piece pptr int start int len struct piece newptr int newlen pptr length len allocate new piece newptr struct piece malloc sizeof struct piece newlen newptr null return null copy nondeleted part memmove newptr data pptr data start memmove newptr data start pptr data start len pptr length start len newptr length newlen free pptr return newptr insert len character starting start struct piece insertintopiece struct piece pptr int start int len char chrs struct piece newptr int newlen pptr length len allocate new piece newptr struct piece malloc sizeof struct piece newlen newptr null return null copy existing part memmove newptr data pptr data start memmove newptr data start len pptr data start pptr length start newptr length newlen copy new part memmove newptr data start chrs len free pptr return newptr extra space end technique piece allocated enough memory contain possibly additional memory well length piece amount piece currently use kept overhead information deletion never requires reallocation insertion require reallocation free space used bulk insertion one character time ie user type insertion require reallocation relatively infrequent interval code struct piece int length int used char data length character delete len character starting start struct piece deletefrompiece struct piece pptr int start int len memmove pptr data start pptr data start len pptr used start len pptr used len return pptr insert len character starting start struct piece insertintopiece struct piece pptr int start int len char chrs struct piece newptr int newlen int amt min pptr length pptr used len much fit memmove pptr data start amt pptr data start pptr used start amt memmove pptr data start chrs amt pptr used amt len amt len return pptr done start amt chrs amt newlen rounduptoblocksize pptr length len allocate new piece newptr struct piece malloc sizeof struct piece newlen newptr null return null construct new content memmove newptr data pptr data start memmove newptr data start chrs len memmove newptr data start len pptr data start pptr length start newptr length newlen newptr used pptr used len free pptr return newptr version delete routine compared management version simpler run faster insert routine complex complexity executed rarely path often followed simpler faster technique additional benefit management version memory allocated charactersize unit ranging one character entire piece extra space technique memory allocated typically sixteen byte chunk typical allocation unit range eight byte piecesize limit step sixteen byte actually probably never want allocate piece multiple sixteen byte event dynamic range size allocated unit much smaller management technique thus memory management consume le overhead le memory lost allocation fragmentation buffer gap buffer gap technique system store text two contiguous sequence character possibly null gap change made buffer first moving gap location changed inserting deleting character changing pointer thus us memory efficiently gap kept small high percentage memory devoted actually storing text overhead information includes length piece location start gap location end gap example buffer contains word minneapolis n n e p l p g ge example buffer character long contains space blank l show gap indicate memory space stored point n e location labeled p bottom line legal value point number zero length buffer case also three different set number coordinate system referring content buffer first user coordinate system displayed buffer value run length buffer note gap invisible system coordinate label position character character thought way arithmetic easy thought labeling character arithmetic becomes fraught special case ripe fencepost error second gap coordinate system displayed immediately line value run amount storage available label position character internal arithmetic buffer manager done coordinate system start gap labeled g bottom line position end gap labeled ge position conversion user coordinate system gap coordinate system quite easy location user coordinate system start gap value location start gap end gap corresponding location gap coordinate system gapend gapstart location user coordinate system good idea isolate calculation either macro subroutine order enhance readability routine eg search routine use user coordinate system even though routine essentially internal third coordinate system storage coordinate system bottom row number diagram mean whereby underlying memory location referenced labeled x x amount memory available origin value x chosen help distinguish various coordinate system absolute value make difference note label memory location caution must taken avoid fencepost error technique low overhead examining buffer user coordinate location first converted gap coordinate system memory location looked content returned essentially one comparison addition required purpose conversion make gap invisible note content buffer moved however overhead associated inserting deleting since gap may moved point three case gap point already motion necessary gap point gap must moved point character gap point must moved insertion deletion take place quantity convertusertogap point gapend character must moved quantity numerically point gapstart gap point gap must moved point character point gap must moved insertion deletion take place quantity gapstart convertusertogap point character must moved quantity numerically gapstart point gap moved point insertion deletion performed moving gapstart pointer gapend pointer make difference deletion decrementing gapstart pointer insertion incrementing gapstart pointer followed placing inserted character memory location incremented note first insertion deletion gap already correct place thus insertion deletion follow take place without moving gap point moved away back motion gap taking place thus gap moved insertion deletion take place last modification different location scheme penalty associated gap move often potentially large amount text may shuffled modification made end buffer one made beginning entire content buffer must moved note hand modification made end buffer beginning examined another modification made end motion take place key question must asked considering scheme modification made far point moved since last modification far point moved shuffling delay becomes noticeable assume interval second noticeable editor running dedicated system assume nanosecond wide memory assume also ten memory cycle required every two byte moved load store eight overhead cycle instruction byte moved noticeable delay locality principle file edited le byte size seems reasonable conclude average distance moved le byte shuffling delay noticeable note size gap affect long shuffling take gap large possible multiple gap nt work assume still uncomfortable shuffling delay possible fix put forth fix would say ten different gap spread throughout buffer would effect idea behind discussion help one understand buffer gap system seeing change scheme fail first conversion user gap coordinate system would complex take longer thus ground would lost however small loss every memory reference order smooth large bump might still reasonable thing second average amount shuffling go anywhere near factor ten locality principle shuffling occurs short distance cutting long shot large effect third unless writer careful gap tend lump together smaller number larger gap word two gap meet gapend pointer one gap gapstart pointer next gap much overhead referencing average amount shuffling increase precisely decreased whole extra complexity seem return proportional benefit scheme used hidden second gap computer example twodimensional memory system used multics second gap end buffer provided almost extra overhead key gain buffer stored fixedsize place rather size memory address space precise holding buffer also increase extra overhead check see whether modification taking place end buffer modification made directly motion gap second gap greater effect one might think disproportionately high percentage modification take place end buffer distortion due fact document program etc written beginning end new text inserted changed end buffer increased overhead due second gap method low check end buffer already system hardware problem gap coalescing one pegged place gain great neither cost used supported operating system implementation method overview started internally managing piece added slack space end piece moved buffer gap technique allowed slack space called gap move within piece finally reviewed optimization buffer gap technique case added slack space end table present summary implementation method mean combination make sense mean combination tends inefficient implement indicates combination plausible size separately managed pieceno managementat endextra space buffer gap character char line char buffer combination standard buffer gap management method combination linked line management method combination paged buffer gap management method following section describe method later section compare contrast buffer gap method first used teco method treat entire buffer single object buffer gap technique used handle insertion deletion simple straightforward easy implement easy debug text contiguous buffer transferred file one two system call also translates easily modern world workstation large virtual address space linked line method came common use emacstype editor began implemented top lisp environment method buffer stored doubly linked list line following information might stored line struct line struct line next struct line previous struct piece theline int version optional struct mark marklists optional next previous field implement doublylinked list point following preceding line respectively line field managed using one management technique described earlier characteristic implementation section typically leave space end technique used version field optional implemented use redisplay code discussed chapter marklists field optional implemented record mark located line buffer location method typically represented line pointer offset pair follows representation mark always associated line think mark thus efficiently implemented perline mark list le time required update mark insertion deletion affected line possibly changed operation method straightforward new line created simply spliced list appropriate place note character stored indicate line break new line inserted middle existing line movement text end old line newly allocated line required line typically stored extra space end technique however buffer gap technique could also used regardless technique used important ensure limit placed length line implementation includes automatic word wrap split line soft newlines overhead shuffling line allocation user type large instead use buffer gap technique within line split line hard newlines ie paragraph paged buffer gap method buffer divided page one two kilobyte file read page managed buffer gap technique page organized array linked list method two point favor since page small gap need never moved far since page size memory management kept simple point important resourcelimited environment example method used mince text editor initially ran cpm system kilobyte memory small floppy disk editor implemented complete paged virtual memory environment buffer implementation included thencurrent optimization found virtual memory operating system size buffer limited amount available disk space since main memory limited system three four page could kept memory excess page swapped disk descendant mince editor called finalword used disk storage even greater advantage control information written disk well thus allowing complete editing state saved invocation well recoverable event system crash method method involve tracking small chunk character even individual character principle doable small object size serf increase amount memory cpu overhead unfortunately without offering compensating advantage thus remain largely unused method comparison section compare three main method variety way storage comparison perbuffer basis also assume eightbit character sample buffer consist line buffer gap implementation requires fixedsize header say eight byte plus one byte per character text total size byte linked line implementation requires fixedsize header say eight byte plus fixedsize header per line say twelve byte plus one byte per character text plus average eight byte fragmentation per line total size nt store newline character byte paged buffer gap implementation requires fixedsize header say eight byte plus fixedsize header per page say twelve byte plus page say two kilobyte total size byte linked line method pay large storage price relatively high perline overhead example perline overhead percent paged buffer gap method pay large price example mismatch page size buffer memory tight smaller page size selected however extra overhead paid per buffer since occurs end crash recovery comparison assume recovery program examining core image edit session interrupted buffer gap method crash recovery relatively easy fail safe general start end buffer found marker left around buffer say string sixteen strange value byte buffer everything gap recovered manually deleted user filled special marker automatically deleted linked line method crash recovery harder recovery greatly aided erasing freed memory basically perform recovery picking block random examining parsed line header ie pointer value etc reasonable continue careful selection header format help otherwise pick different block follow next previous pointer parse work three four time row confident handle content header nt parse either part line either pick random go back one chunk try header modified case blocked continuing end chain latter case go direction far possible one half buffer repeat random guess nt pick memory already identified part buffer get half buffer leave user put two half together freed block erased chance finding validlooking header point erroneous data high paged buffer gap method crash recovery easier linked line harder buffer gap buffer gap marker byte help locate buffer page gap recovered either manually automatically page strung together like line fewer page work efficiency editing comparison examine typical type effort required insert character line operation insert characterinsert linemaximum motion buffer gapmove gap pointer update insert characterbuffer linked linemovescroll line pointer updateallocate header line splice linenone paged buffer gapif full split page move gap pointer update insert characterpage might expected buffer gap scheme efficient although occasionally encounter comparatively long pause linked line scheme add lot overhead simple operation cut occasional comparatively long pause often hit badly example insert middle line paged buffer gap method remove pause price moderate increase complexity efficiency bufferfile io section compare way method handle bufferfile io buffer gap method extremely efficient reading file buffer consists operation determine file length allocate enough memory hold file plus extra growth read file system even actually improved example many system map file address space process actual data motion take place modify one page time page copied modification written new copy sometimes called copyonwrite writing file take two call one cover text front gap cover text gap linked line method obvious poor algorithm read file code fragment illustrates algorithm fd fopen file r null error fgets buf sizeof buf fd null allocateline strlen buf error buildline buf fclose fd algorithm system call fgets allocation every line buffer improved algorithm would read whole file memory least read large chunk allocate line memory improvement least reduces switching system program context sufficiently good fgets implementation would effectively unfortunately library come many c compiler sufficiently good paged buffer gap method could efficient reading buffer gap method would operate reading entire file block dividing block without moving data first insert page cause page split though writing would worst case number system call equal twice number page use efficiency searching section compare way three method handle searching implementation search time dominates setup time three method equivalent case setup time dominates search time method perform differently case examined comparison assumes search routine built buffer management code performance reason could call getchar every character would probably efficient given equivalent implementation actual search code main difference among method number time inner search loop called word number distinct piece must searched buffer gap method call inner loop twice text front gap text gap implementation could move gap search routine need called go reason gap first place keep mind searching happens lot example two search done whenever forward word command given whole point buffer gap method avoid moving gap necessary even worse way go astray move gap search replaces one large efficient gap move many smaller one already observed even fairly large gap move noticeable optimizing wise move conclusion invoking search loop twice quite efficient linked line method invokes inner search loop every line buffer earlier example mean would invoked time worse linked line method store newline character rather implied line structure hence whenever newline character search string character must handled special manner optimization made example searching x newline mean look last character line code complexity required make optimization add performance penalty paged buffer gap method lie somewhere two earlier example search routine would invoked ten time enough incur significant performance penalty one reason use method buffer gap work multiple buffer section compare way method handle multiple buffer buffer gap method offer choice buffer must follow one another memory else could arrangement becomes bad total size buffer becomes large enough objectionable pause occurs switching buffer arrangement improved leaving extra gap buffer linked line method two choice first line allocated common pool thus time buffer tend intertwine ie line one buffer mixed line buffer physical memory choice tends maximize density text thus make efficient use memory see also discussion next section paged environment choice allocate memory among buffer allocate line buffer within buffer allocation must course way change buffer allocation paged buffer gap method two choice linked line paged virtual memory section compare way method perform paged virtual memory environment concentrate effect occur main memory full paging going tight memory operation searching entire buffer require buffer accessed sequentially situation entire buffer fit memory management method avoid page swapping type situation analyzed buffer gap method generally work well environment highly compact format allows accessing large portion buffer page memory sequential organization also implies good locality reference nearby page heavily referenced likely around major problem usual worst case situation large gap movement tight memory situation moving whole buffer implies buffer page must swapped likely swapped overall buffer gap method well expected nearby portion buffer tend memory locality reference distant portion may general paged linked line method many disadvantage real advantage tight memory situation first intertwining multiple buffer scheme used time effective page size reduced factor tends increase time equal number buffer reduction due random nature buffer memory allocation fact many line tend fit one virtual memory page consequence time virtual memory page tends hold line many buffer possible however given buffer use storage used buffer consuming memory even separating buffer memory resolve problem buffer get large different part buffer may act fashion separate buffer decrease effective page size extreme case desired target line may memory process following linked list target line may swapped notwithstanding method pack data tightly others earlier example showed overhead linked line method percent thus page size effectively reduced percent factor combined typical linked line system probably reducing effective page size percent result example computer one megabyte memory two kilobyte page linked line method would effectively treat kilobyte memory one kilobyte page paged buffer gap method essentially buffer gap method modified improve performance tight memory situation remove lengthy gap move consequently lower probability thrashing designing system buffer page size set multiple virtual memory page size thus even tightest memory situation insert delete one character affect two page buffer memory conclusion use buffer gap method possible use linked line method implementing environment like manipulate list small object example lisp environment use paged buffer gap method resource tight editing extremely large file section examines technique editing extremely large file first type extremely large file file large reasonable assumption based current workstation mainframe architecture longer valid given current generation computing hardware start happening around megabyte ten year ago set number megabyte size even simple operation string search take several minute run fast processor whole file memory although one two interesting hack stay alive life simply bearable trying edit large unstructured file alternative large data base implementers known year structure file alternative palatable unstructured editor still used edit piece structured file reason limitation bothersome nt many file edit example largest file computer system often use megabyte vast majority file much smaller gigantic file call special tool type extremely large file encountered resourcelimited system case file would otherwise handled easily cause system bog example first generation microprocessor system extremely large file might kilobyte several way dealing file one way divide file chunk fit memory read first chunk edit write read second chunk continue done arbitrary editing done within chunk general back previous chunk without finishing file starting method used original teco editor another way use threefile system user move file file read file written user want back file read holding file written chunk appear reverse order file user move forward hold file read backwards exhausted file read best method use main memory tight paged buffer gap disk storage also tight serial chunking best difference file another type buffer management used good advantage several case called difference file method work best recording relatively change change small compared size buffer method buffer kept memory instead list difference buffer original file kept information retrieved buffer read file needed difference applied method much promise example many case file read buffer looked user buffer deleted example difference file method essentially act file viewer particularly encouraging realize larger file le likely dramatically changed hand method scale well example editing chapter continuously several hour turn current version bear little resemblance original best description change throw everything insert x x entire chapter would expect reasonable description chapter wind several time large chapter hence address question edit description difference let see use buffer gap linked line paged buffer gap addition method work well tight memory situation write chapter occupies kilobyes roughly kilobyte free ram disk space laptop computer simply nt room store amount old new version one might argue nt store old version appears disk well true disk sitting table side floppy drive read conclusion method work well one essentially viewing file however break badly change file accumulate easily end taking several time much memory track change simply store modified version finally change easily become large either real buffer management method must implemented simply track change snapshot file must created change tracked new base hence bother extra overhead question probe understanding rectangular region include character point mark also column point mark define set interface procedure handle rectangular region easy come situation would good idea implement buffer linked list character medium first buffer gap editor teco also among first text editor ever written written early explain many people spent next fifteen year reinventing hardtouse limitedfunctionality line editor medium succeed would like hear explanation devise buffer management scheme better buffer gap hard succeed probably get phd thesis back content seven redisplay one two one two vorpal blade went snickersnack previous chapter described way dividing implementation part covered one part internal subeditor chapter describes redisplay part chapter start discussing general constraint affect redisplay describe external interface internal interface used redisplay procedure interface definition go discus many consideration affect implementation algorithm finally describes redisplay algorithm constraint redisplay incremental redisplay give full name part implementation responsible ensuring change buffer promptly reflected user display evident definition two part redisplay job first part ensure change indeed tracked absence second part part would quite easy second part job ensure change made promptly context promptly mean amount clock time required make update visible minimized clock time combination transmission time cpu time disk access time perceived user delay command entered display updated general buffer content change small amount one command screen thus changed small amount order reflect changed buffer content hence algorithm concentrate incrementally redisplaying buffer entire process thus referred incremental redisplay fortunately turn case buffer changed drastically incrementoriented approach redisplay work quite well need multiple algorithm discussion incremental redisplay assumes model system editing done main processor communicates display main processor display bandwidth cpu display communication channel high however consideration remain unchanged relative weight change incremental redisplay optimization cpu time displayprocessing time communicationschannel time memory consideration thrown first major constraint speed communication channel typical speed available bps memorymapped builtin display run bus speed communication speed essentially infinite typical video display x character screen bps take three second reprint line minute refresh whole screen bps le one second required reprint line sixteen second refresh screen bps take one two second refresh screen speed communication thus greatly affect amount optimization desired bps user may notice even one extra transmitted character bps reprinting entire line take appreciable amount time one dimension optimization thus clear importance optimizing number character sent increase proportion slowness communication line second major constraint speed display device take time display handle command time affect choice command sent display example line ending whale changed narwhale redisplay code could elect position cursor w insert three character send nar alternatively could position place send narwhale latter would efficient unless display could accept perform insert three character command le five character time possible mentioned memorymapped display actually process command slowly effective display speed low important use good redisplay algorithm display user interface consideration also affect command sequence sent example might acceptable pure clocktime point view reprint entire line user like see text changed buffer change reprinted flickering generated reprinting process attracts user attention text undesirable text changed thus avoiding extraneous flickering movement text good amount perceived flicker vary display display highly dependent upon factor display command set display speed internal display datastructures timing phosphor third major constraint cpu speed computer computing optimal redisplay sequence take longer saved optimization optimal considering communication channel display machine correct optimization send lessthanoptimal sequence cpu time must spent order perform optimization cpu time spent exceeds small amount clock time user perceive response sluggish therefore desirable minimize cpu time spent optimizing redisplay however communication channel speed also make difference line slow extra cpu time spent bps worthwhile spend msec cpu time eliminate one character transmitted take msec however higher speed generally practical heavily optimize number character sent easily take longer compute optimization transmit extra data relaxation optimization subject user interface constraint outlined fourth constraint memory size example one technique store copy entire screen character character technique work quite well general however memory tight technique may feasible procedure interface definition section describes two interface first one external interface redisplay present rest editor implementation ie subeditor useroriented command second interface internal interface used redisplay isolate displayspecific portion internal code section term display refers hardware operated user display keyboard screen perhaps graphical input device screen part display show output window logical screen one window occupy entire screen one window share screen perhaps even overlapping window never larger screen editor procedure status windowinit char display status windowfini void status windowsave file fptr status windowload file fptr windowinit basic setuphousekeeping call called upon editor invocation perform required onetime initialization including keyboard screen initialization editor interface call except windowfini legally called unless windowinit return successful status parameter indicates display type presumably parameter null routine determine default display windowfini terminates state information called windowinit must called editor interface call legally made windowsave save current redisplay state information file opened specified file descriptor presumably worldsave opened file called routine windowload load redisplay state information file opened specified file descriptor creating stripped editor routine would anything put stub reasonable possibility editor embellished later void redisplay void void recenter void void refreshscreen void redisplay performs one incremental redisplay run completion screen accurately reflect buffer however routine also check type ahead user type use graphical input device redisplay finished routine notice event abort redisplay safe manner presumably user quit typing ahead point redisplay complete recenter operates redisplay except move point center window technically preferred percentage procedure needed typically userlevel command perform operation refreshscreen operates recenter except assumes screen corrupted thus routine ensures screen correct matter else may happened void setprefpct int percent int getpointrow void int getpointcol void setprefpct set preferred percentage recenter similar operation point line approximately percentage way window good default value forty percent default window point line getpointrow return number row within window point getpointcol return number column within window point may column returned getcolumn routine take account line wrap windowdata windowcreate windowdata wind status windowdestroy windowdata wind status windowgrow windowdata wind int amt int getwindowtopline windowdata wind int getwindowbotline windowdata wind location getwindowtop windowdata wind location getwindowbot windowdata wind routine used manipulate multiple window choose offer feature definition provided allow horizontal window ie window occupy full width display vertical window overlapping window covered although often implemented windowcreate creates new window operates splitting supplied window two window initially show data return window descriptor second window windowdestroy destroys supplied window window one expands occupy vacant screen space note windowdestroy windowcreate wind result change windowgrow grows specified window specified number line window grown moving top line getwindowtopline return screen line contains top line specified window getwindowbotline return screen line one bottom specified window value getwindowtopline next lower window getwindowtop return location buffer character top left part window several user command use information getwindowbot return location buffer character bottom right part window close get location would returned getwindowtop window exactly one window current position several user command use information display independent procedure section describes display function used redisplay routine implement function part redisplay full discussion topic beyond scope book covered linhart essence problem every display manufacturer decided different set feature offer different way accessing feature solve problem set routine needed isolate difference well way selecting among different set routine display change although recommended possible cover lot display assuming display accepts ansi escape sequence ie display dec modern display accept sequence however many older display addition display take amount time process given command thus still perdisplay information consider one piece existing technology mention exemplified curse package available many unix system similar package available name system provides display independent function albeit somewhat different interface also performs redisplay however purpose chapter explain redisplay work package receive mention following set procedure allow displayindependent operation display procedure interface isolate operation used redisplay status keyinit char display status keyfini void char keyget void flag keyisinput void private keyfunctionkeys void keyinit keyfini operate familiar fashion called windowinit windowfini routine particular though routine make sure processing input character turned ie set raw input configuration information loaded keyget wait key pressed return key send multiple character eg function key returned one character time keyisinput return true input available false used example redisplay determine whether abort keyfunctionkeys return information function key available keyboard information includes key placement key labeling code returned key information returned implementationdefined manner ie get invent representation status screeninit char screen status screenfini void int screenrows void int screencolumns void private screenatrributes void screeninit screenfini operate familiar fashion called windowinit windowfini routine particular though routine make sure processing output character turned ie set raw output configuration information loaded screenrows return number row screen case row granularity screen output graphic screen row would one pixel screencolumns return number column screen case column granularity screen output graphic screen column would one pixel screenattributes return information attribute eg boldface reverse video blinking etc screen support information returned implementationdefined manner ie get invent representation void setcursor int row int column void setrow int row void setcolumn int column void setattr private attribute int getrow void int getcolumn void private getattr void void putchar char c void putstring char str void beep void setcursor set cursor specified row column assumed optimal ie least cost command sequence selected setrow set cursor specified row without affecting column instead separate routine could multiplexed onto setcursor say one following setcursor row setcursor row getcolumn setcolumn set cursor specified column without affecting row functionality provided routine could also multiplexed onto setcursor setattr set current attribute specified getrow return row cursor getcolumn return column cursor getattr return current attribute putchar output supplied character screen updating cursor position character always displayed never part command sequence putstring output supplied string leaf cursor string otherwise work per putchar string always displayed even appear contain screen command command may sent screen mean supplied procedure beep ring screen bell flash screen cleol void clearline void cleos void clearscreen void cleol sends command sequence optimally clear current cursor position end current line cursor move clearline sends command sequence optimally clear entire current line leaf cursor column assuming zeroorigin number nt cleos sends command sequence optimally clear current cursor position end screen line current one completely cleared cursor move clearscreen sends command sequence optimally clear entire screen leaf cursor upperleft corner row column void insertstring char str void deletechars int count void insertlines int count void deletelines int count void scrolllines int int int count command available advanced display definition advanced display chapter assumed send optimal command sequence effect purpose insertstring take string determines optimal command sequence required insert insert starting current cursor location line wrap performed excess character dropped right edge screen routine could defined accept count instead string insert blank however easier optimize command sequence string inserted available deletechars accepts count deletes many column line wrap performed blank column inserted right edge screen insertlines accepts count insert number blank line starting line cursor thus insert line top screen deletelines accepts count deletes number line starting line cursor thus line top screen deleted blank line scrolled bottom scrolllines accepts line line count line starting line including line scrolled count line positive scroll line negative scroll line private screentimings private goal screentimings accepts description goal return timing information various choice screen routine could used achieve result description take account current screen status information help redisplay code select best screen routine help screen routine optimize performance optimization assumed done anyway private data type information returned implementationdefined manner ie get invent representation note two private data type procedure definition goal procedure refer different data type different representation consideration section describes various consideration go redisplay algorithm word way algorithm get complicated none way particularly difficult implement collectively would clutter redisplay algorithm presented later hence keep topic mind reviewing algorithm topic section vaguely related particular order status line general buffer line status information addition may general editor status information finally may line separator window one hope small screen ie le say fifty line number one none none use buffer status line window separator order devote many line possible showing text edited event framework information must retained displayed useroriented command routine redisplay must work together provide infrastructure sample type perbuffer status information file name buffer name may file name buffer status unmodified modified readonly current mode point position character andor buffer length point position percentage location top window percentage top bot appropriate point column current attribute current line number line course one editor implementation show information time list definitive sample type editor status information name version number editor copyright information current date time current system load average system information one implementation may show information list definitive end buffer two case must handled first entire buffer fit window run buffer run window caveat ensure case properly detected entire buffer shown start buffer upperleft corner second entire buffer fit window end buffer appears end close bottom window portion window follow end buffer left blank marked fashion rule emacstype editor leave part window blank horizontal scrolling window finite width line fit within width two popular way handling situation horizontal scrolling line wrap ideally editor offer user choice section describe first performing horizontal scrolling line longer window width spill edge part line fit thus visible user user type text displayed adjust text around point always visible addition user provided command move window left right character overlap addition status line contain indicator show whether text currently lost either left right side use separate indicator line wrap performing line wrap window never move left right instead text would clipped right edge window wrapped next line line sufficiently long may wrap two time type display window motion command required addition status indicator also required although may wish mark wrapped line line wrap introduces new problem must handled properly single line wrapped occupy entire window although rare line show time time nontext file horizontal scrolling line wrap compared neither come clear winner offer valuable feature hence assertion implementation support line wrap horizontal scrolling advantage horizontal scrolling easy implement processed quickly one disadvantage requires fast display consider case user line displayed window average window shifted twice per line typing another disadvantage clipped text appears deleted rather disconcerting user text vanish reappear one advantage line wrap text always visible addition editing long line entire window show immediate context contrast editing end long line using horizontal scrolling remainder window blank scrolled left edge main disadvantage line wrap additional complexity redisplay required handle line wrap poor presentation line slightly wider window disconcerting multiline shifting occurs user inserting deleting near start wrapped line word wrap line wrap next logical step break line word boundary instead character boundary offer word wrap feature found almost every word processor available today typically word processor store paragraph text single line simply perform word wrap upon ruler line used adjust margin change type justification nice feature offer pitfall unwary implementer however redisplay handle lookahead going decide break line white space include dash include punctuation user going want ruler line must provide infrastructure track word wrap actually occurs user think hence linemanipulating command operate term line displayed implement word wrap may well go whole way support flushing right centering justification text display tab tab character handled two way first way handle instead convert space upon entry case redisplay code never see character hence nt need deal second far common method treat tab cursor control command effect say think n blank n number unit next tab stop thus redisplay code encounter tab computes n pretend displaying n consecutive blank single blank width n n computed one three way first tab stop set every c column character zeroorigin numbering system tab set every c column set column c c c example c tab column c language expression compute n n c x c x current column second way set tab stop allow set arbitrary column position way often used ruler line simple word processor case must decide representation bit array array column tab set third way set tab stop allow set arbitrary position position measured unit inch millimeter etc way useful graphic screen far traditional tab described might termed left tab left edge text placed tab stop type tab become popular advent word processor right tab adjust position text left tab stop right edge tab stop typically text back previous tab stop start line adjusted decimal tab search decimal point comma europe place character tab stop typically text back previous tab stop start line adjusted tab act right tab text contain decimal point centering tab center preceding text current previous tab stop variation possible note traditional left tab implemented without sort look ahead control character control character printing character space newline tab printing character mean system supported extended enhanced character set character may count control character addition word processor may store information band information would either interpreted skipped redisplay however even word processor system extended character set way view edit pure binary file order view file must standard representation nonprinting character one representation show character octal hexadecimal x however common representation possibly useful one show character caret notation complete list caret notation see appendix e easiest way define notation code excerpt void caret char c c nl handle newlines return c tab handle tab return c putchar c c sp c putchar c putchar c handling multiplecharacter character implementation must consistent example sure cursorpositioning code take extra character account implementation must also properly handle case character span line boundary nt matter choice made ie choice splitting character boundary moving whole character next line implementation handle consistently correctly proportionally spaced text tab control character displaying text proportionally spaced font difficult main variation longer assume printing character width instead look width one display actually even support kerning looking consecutive pair character decide handle main gotcha supporting proportionally spaced text one character longer always exactly overwrites another screen thus change figure extra width fortunately display handle proportionally spaced text mainly graphic display offer highperformance primitive scroll region screen attribute font script next level generality support attribute font script attribute include modifier boldface italic underscoring superscripting font include different typeface time roman helvetica script include language family european japanese support complex wish especially come script time energy going give long provide support language however one fairly simple handle first step store attribute font script information somewhere see chapter second step interpret information breaking line mentioned procedure interface definition redisplay process run completion editing resume instead get convenient spot check user input input arrived redisplay aborted broken input processed important keep mind purpose redisplay provide feedback user user already typed something immediate need feedback hence redisplay broken restarted user input processed order keep amount state information minimum may make sense abort instantly instead finish current chunk redisplay say line checking input minimum must keep track far along proceeded nt wind redisplaying redisplayed text presence betweenline breakout affect redisplay done example resource tight may make sense start redisplaying line point go line time way information important user first get updated lest doubt betweenline breakout important feature left simplest implementation implementation complete even complex redisplay msec multiple window supporting multiple window implies screen divided section section showing possibly different buffer part buffer several way multiple window supported nt support instead rely presumed operating system ability run multiple instance editor desirable different instance may able communicate quickly example may able cut one window paste another support horizontal window horizontal window occupy entire width screen good popular choice difficult implement yet provides large chunk required functionality support vertical horizontal window tiled better support arbitrary overlapped window best supported many windowing package main thing keep mind implementing multiple window two window contain text change made one immediately reflected support multiple window implement status prompt line buffer simply fit additional window displayed way longer consider special case redisplay basic role redisplay ensure change subeditor promptly reflected screen two major approach used implementers performing redisplay user command v v subeditor redisplay first approach first approach routine invoked user tell redisplay code exactly eg deleted character approach clean one prone error information must given twice subeditor redisplay hence implementation must handle situation two set instruction consistent eg application tell subeditor delete line tell redisplay insert line especially important consideration would like encourage novice user write command extra effort getting redisplay correct might discourage effort user command v subeditor redisplay second approach second preferred approach redisplay code communicate subeditor track change approach also two method operation first method might called subeditordriven subeditor call communicate directly redisplay example insertchar would make call display saying inserted character place second method might called redisplaydriven redisplay operate ask subeditor information subeditordriven method appears simple implement upon closer examination turn quite complex complexity arises several reason first desirable operation subeditor offer shown subeditor procedure interface definition match well available operation display hence redisplay code perform conversion example would deleting line code perform delete might void deleteline void markname beg findfirstinbackward newline start line markcreate beg ok return findfirstinforward newline end line pointmove skip newline copyregion kill beg save kill buffer deleteregion beg gone markdelete beg subeditor operation delete region region happens contain line somebody examine region determine contains line delete line call display might correct one use second redisplay code filter subeditor operation subsequent directive happen outside window third every change made buffer necessarily imply change display example buffer contains text line line line line first line deleted following line fact change particular case may rare following happens fairly often line line line line case line string redisplayed fourth change might change example lower case region command applied text people believe unicorn mythical animal might inner loop replacechar tolower getchar pointmove would effect telling redisplay time character changed fact two character changed one might argue replacechar routine could check see whether new character fact different informing redisplay however nt gained anything changed checking inner loop could written c getchar delete insertchar tolower c telling reason using subeditordriven method however fundamental subeditor responsibility handle buffer redisplay redisplay responsibility handle redisplay function algorithm presented remainder chapter illustrate basic algorithm handle possible error case handle many option listed variable width character line wrap betweenline breakout others framer framer part redisplay code decides part buffer appear window redisplay code maintains two mark one top window bottom algorithm fairly simple int numlineswindow number line window int pointpct preferred percentage void framer void markname saved location newstartloc int cnt remember started markcreate saved ok fatal ca nt create mark redisplay findfirstinbackward newline count one window worth line cnt cnt numlineswindow cnt stop start window ispointatmark topofwindow break stop start buffer comparelocations bufferstart pointget break record fresh screen would start case need cnt pointpct numlineswindow newstartloc pointget pointmove findfirstinbackward newline window moved cnt numlineswindow markset topofscreen newstartloc pointtomark saved markdelete saved essence algorithm followed routine long point would still wind window leave start window unchanged point would wind window place preferred percentage version algorithm assumes buffer line always occupy exactly one window line buffer line height basic algorithm basic redisplay algorithm follows int numlineswindow number line window int numcharswindow number character window width char window maxrows maxcols window content void redisplay void markname saved int row int col int int pointrow int pointcol char c remember started markcreate saved ok fatal ca nt create mark redisplay framer pointtomark topofwindow loop whole window row row numlineswindow row col col numcharswindow col save coordinate point put cursor later ispointatmark saved pointrow row pointcol col c getchar c nl newline check whether rest window line blank clear col numcharswindow window row sp setcursor row cleol memset window row sp numcharswindow newline change subeditor else window row col c setcursor row col putchar c window row col c pointmove clean marktopoint bottomofwindow setcursor pointrow pointcol pointtomark saved markdelete saved preceding code show basic garden variety redisplay algorithm work screen support cursor positioning cleol call simulated sending space character work quite well communication channel running bps memory requirement array large enough hold window typically character special redisplay hook subeditor management code algorithm sufficient nearly optimal case cpu memory plentiful screen perform insertdelete line character operation memory tight algorithm modified retain complete copy current line must prepared emulate cleol operation may worthwhile record last nonblank column screen line minimizes number space character must sent subeditor interaction basic algorithm sped tremendously redisplayspecific hook placed subeditor number different way hook introduced method track change made buffer one way another first way keep separate modification flag tell whether change made buffer since last redisplay change made redisplay consist either simple cursor motion complete screen regeneration second way much useful keep modification flag perwindowline basis general interface accomplish work subeditor implementation scheme define third type mark called window mark mark flag associated one window mark line window redisplay completed flag window mark clear time subeditor change buffer content set flag window mark located closest change redisplay code examine flag window line corresponding window mark set need examined closely redisplay note window mark need located start buffer line line wrapped one wrap point horizontal scrolling performed one may start buffer line another right edge window way change made right window wo nt cause redisplay code examine unchanged text interaction easy define implement subeditor inexpensive implement mark examined updating anyway also highly effective reducing cpu overhead command change single line although redisplay examine flag every line time one two show change third way associate unique identifier window mark instead flag identifier would changed subeditor whenever associated text change ie instead setting flag change unique identifier typically identifier integer whenever identifier required current value integer used integer incremented problem arise using unique identifier unique identifier fact unique problem arise unique identifier consumed line window changed subeditor use linkedline scheme use address line structure unique identifier space efficient subeditor must ensure line freed address reused window completely redisplayed finally one flag help redisplay great deal flag useful point located end buffer line flag would say whether buffer modification insert one character performed flag say redisplay need output character situation common save significant amount computation advanced algorithm advancedredisplay algorithm two improvement basic algorithm first provides way efficiently taking advantage insertdelete line character function supplied many screen second provides low cpu overhead way performing redisplay basic display basic idea used algorithm assign unique identifier window line see preceding section redisplay encounter modified line unique identifier nt match performs pattern match unique identifier remainder window us information derived match determine best sequence insertdelete line command issue screen detail algorithm loop window line checking saved unique identifier current identifier returned subeditor match work need done algorithm proceeds next line nt match one three reason first reason could additional line line inserted two window line condition detected comparing windowline unique identifier rest unique identifier returned subeditor finding match remember windowline unique identifier unique identifier returned subeditor one redisplay iteration ago insertion case line ab acb determine many line c know far go find match tell screen insert many line information window screen first delete many line end window second reason could line line deleted condition detected comparing unique identifier returned subeditor next line unique identifier rest window line finding match deletion case line abc ac determine many line b know far go find match tell screen delete many line information window screen eventually insert many line end window third reason could line changed condition detected comparing unique identifier following window line unique identifier returned subeditor case either line abc adc ade word neither insertion condition deletion condition met knowing line changed next step determine exactly line changed algorithm start comparing buffer line window line determining many leading character common whole line common change need made screen algorithm stop example window line abcdef buffer line abcxef two three character common start next step repeat comparison work backwards starting end example string two character common end third step compare line length two line length changed part middle need updated screen example string length optimization done even basic display two line length example buffer line abcxyzef character window line replaced character buffer line rewritten example x replaces requisite number character either inserted deleted remainder change written insert two character yz common text end line buffer line shorter window line cleol call used instead deleting character line wrap pose problem window buffer line may end text common yet insert delete character operation might appropriate one example consider case window width six character window line abcdef buffer line abcxdef buffer line ultimately become two window line abcxde f case detected common portion end noticing line wrap complicated matching process detect situation appropriate action taken entire section considered admittedly common case line character insertion deletion made one place reasonable appropriate use general patternmatching technique properly optimize multiple insertion deletion miller redisplay memorymapped display redisplay memorymapped display boil one three case case relatively simple first case reading writing screen cause flicker solution use basic redisplay algorithm second case reading cause flicker writing solution use basic redisplay scheme change use actual window memory storing window array third case neither reading writing cause flicker redisplay cycle merely copy buffer text window memory forgetting process new line etc needed question probe understanding define set editor procedure handle vertical window easy extend set handle overlapping window medium implement procedure defined hard define representation private data type mentioned function key attribute command time one easy together medium identify place lefttoright toptobottom bias built interface definition english european language bias easy rework interface definition remove bias able handle eight yes eight combination direction medium outlining popular day outlining ability selectively skip part text redisplay example one level might display chapter section title another level might include title first sentence paragraph identify adding outlining would affect redisplay medium identify editor redisplay algorithm change make use unix curse library hard presence ligature contextual form used nonroman language affect cursor motion medium modification redisplay algorithm required handle ligature contextual form used nonroman language hard back content eight useroriented command command loop left dead head went galumphing back previous two chapter described way dividing implementation part covered internal subeditor redisplay chapter describes last part useroriented command last part give editor feel determines overall command structure syntax command semantics command structure large enough topic divided two chapter chapter describes implement command structure next chapter cover command set design issue thus describes command implemented core loop read evaluate print command loop built around basic core core read command evaluates executes print result reading command process accepting user input determining operation user wish perform evaluating command process carrying user wish general done executing series subeditor call printing result redisplay core loop look like char c c keyget evaluate c break redisplay loop accepts user input single character evaluates exit user requested quit editor causing evaluate return true invokes redisplay like program example chapter simplified version one many way implement function meant example limit evaluate procedure flag evaluate char c flag isexit false flag isarg false int arg command c isarg arg isexit c c keyget redisplay return isexit core evaluate routine isexit flag record whether command one exit editor isarg flag record whether user specified repeatcount argument arg variable record repeatcount argument routine editor implementation built around set command dispatch table table array pointer procedure indexed command character thus element command would specify procedure handle command designated character procedure interface interface flag commandprocedure flag isargptr int argptr flag isexitptr char c first three argument pointer three state variable pointer instead value command procedure alter value fourth argument character used invoke procedure procedure return true command completed false command incomplete reason selecting interface made clear four sample command procedure move character insert character secondlevel dispatch accept argument move character procedure move forward arg character arg positive backward arg character arg negative look like flag movebycharacter flag isargptr int argptr flag isexitptr char c pointmove argptr return true insert character procedure insert arg copy character used invoke arg negative absolute value used look like flag insertacharacter flag isargptr int argptr flag isexitptr char c int arg argptr arg arg arg arg insertchar c return true secondlevel dispatch procedure nt implement command rather accepts second character us select command second dispatch table case x character used dispatch flag ctrlxdispatch flag isargptr int argptr flag isexitptr char c char c c delayeddisplay ctrlxdelay x return ctrlxcommands c isargptr argptr isexitptr c delayeddisplay routine wait character return specified amount time pass input prompt string displayed note routine pass argument exit status secondlevel command routine accept argument procedure nt implement command rather performs one step accepting numeric argument purpose example assume digit character specify argument insert flag argument flag isargptr int argptr flag isexitptr char c isargptr arg yet isargptr true argptr argptr argptr c return false routine first one completely execute command rather modifies state information passed command procedure note routine implement emacs universal argument command simplified version purpose example actually performs vistyle argument handling philosophy loop described put theoretical restriction command syntax character raw form mapped procedure turn evaluated state information passed procedure either update state information perform operation arbitrary syntax semantics implemented base theory syntax command word eg delete move etc could implemented structure either large number dispatch table thus implementing symbolstate table architecture procedure par syntax command via conditional statement really want one want invent different internal structure minimalist command set design consider thought every character typed keyboard cause procedure executed first conclusion result silly type insert x anything like want x inserted common operation make sense bind key x insertx function probably insertacharacter procedure defined architecture bind straight printing ascii character command insert character remaining thing entered keyboard control character delete key break key could bound function implement complex syntax bother difficult user learn even large number key binding let u bind control key directly useful function example f could move forward character could delete following character forth note break key ascii value therefore difficult use without writing operating systemspecific code thirtythree function control character plus delete character enough even commonly used function thus key bound function temporarily rebind dispatch table rebinding function new function made available reason printing character secondlevel table bound self insert thus even though began structure command loop impose constraint syntax command thus general possible arrived specific syntax command syntax bind printing character self insert bind control character mixture useful function secondlevel dispatch table three four alternate dispatch table enough supply many hundred command thus command rarely two keystroke long price paid brevity possibly longer time learning use editor effectively note increased time spent learning editor brevity command command learn given conventional editor command set design eg insertreplace mode command line equivalent subset minimalist editor learning time probably comparable number command covered assuming sensible command assignment case error two main type error internal external internal error occur editor example subscript range division zero external error caused user example attempt delete end buffer also nonerror error normal exit condition error detected within editor outside editor example operating system internal error internal error considered first error cause immediate exit operating system question asked delay tolerated internally generated thing arithmetic overflow bad subscript editor might catch process general process section discus nonprocessed one error unpredictable state editor remain intact user also able signal error abort editor might want signaling problem editor eg infinite loop want something else eg suspend process another task signaling usually done help operating system case precise state editor retained resumed exactly left operating system facility differ principally freedom action allow losing state freedom range nothing arbitrarily many thing user discretion editor restartable either exactly left safe restart point point ordinarily portion editor recovers buffer current state information resume command loop note many implementation editor must perform action process suspension resume action must handle saving restoring state restoring saving display mode taking note change environment window resizing external error external error principally user error action ordinarily taken display error message return command level implementation level recovery built procedure implement command variation external error generated manually user typically involve backing undesired state eg unwanted invoking dispatch table rebinding aborting undesired argument g character often used purpose case procedure know character typed implement backout protocol exiting finally provision exit editor must made provision often take form flag variable isexit variable described earlier note various us might multiplexed onto flag signifying varying level exiting example one level could used buffer switching order rebind dispatch table see section mode later chapter alternatively different function could use multiple flag variable ordinary exiting involves several type processing editor might ask user buffer modified written ordinarily assumed state editor preserved across invocation state must saved must sure memory deallocated finally user environment restored found implies varied thing cleaning stack closing file deallocating unneeded storage resetting terminal parameter argument argument specified user modify behavior function emacs argument mechanism described example three diverse way argument obtained three standard argument type first numeric prefix argument invoked string function turn invoked character typed actual command character example using keyfunction binding implement complicated syntax next string suffix argument obtaining string argument editor invoked recursively argument buffer upon return recursive invocation content buffer given requesting procedure last positional argument internal variable editor numeric prefix argument prefix argument entered command whose behavior argument modifying thus syntax depend upon command interpretation prefix argument vary command command emacs type editor limit argument numeric value ordinarily command internal variable available named something like arg value one prefix argument allow user change value positive negative integer useful provide mechanism command procedure determine whether argument given mechanism allows procedure handle default case argument supplied differently case argument supplied command us argument different related purpose first purpose specify repeat count command thus specifying argument forward character command would cause command move forward character second purpose tell command use specific value example nt make sense say move end buffer time instead command might interpret argument line number move specified line buffer case default value would end last line emacstype text editor us u character universal argument function used either two way u command mean supply argument command adding another u mean multiply current argument four thus u u u command mean supply argument command factor selected large go fast might better spacing power known people likely around computer addition x display number character per line screen height use specify value exactly u number command mean supply argument number command example u command mean supply argument command u case serf escape logically rebind digit key want supply argument command normally invoked digit character use quote command located q terminal two set numeric key one set across top row always sends ascii code corresponding digit character another set may form numeric pad key configured send either ascii code digit character different code case number bound directly function set implied argument initial u needed string suffix argument numeric argument made available way command suffix argument however must explicitly requested command use command may also request multiple suffix argument suffix argument string number program notifies user string argument displaying prompt prompt indicates type argument requested user responds entering value including terminating character command proceeds execute using value whatever way appropriate following point taken consideration regarding string argument first prompt clearly state asked example name file read second key key sequence used terminate end string able vary indicated prompt example name file read return string search esc way cleanly abort prompt requesting command command used abort command eg g third order facilitate abort process command first ask user input perform action organization mean abort result effect rather leave inconsistent state information command request string prompt provide default value prompt value used user enters null response value program best guess value user would likely want enter guess available last value entered used example string argument search string ask string search next occurence buffer user enters null string use string last entered write file ask string using file name write content buffer specified file user enters null string use current file name associated buffer change buffer ask string switch buffer whose name user response user enters null string use buffer last current one ie one user one user note default may one whose name last entered example prompt name file write return default homefintest string search forward esc name buffer switch default example requesting character string need always case example enter numeric value requesting procedure merely convert readin character string numeric value example command would go line command one way implement routine accepts string argument use variation getline routine defined introduction however better way implement routine create argument buffer new window display prompt call editor recursively current buffer following scheme full power editor available correct typing mistake otherwise make entry process easier additional advantage creating new mode user free continue editing responding prompt full power editor brought bear problem example suppose someone sends mail message say answer file x reading mail message give find file command command prompt enter file name switch buffer prompt buffer mail message buffer copy file name switch back paste prompt type prompter terminator voila fully integrated modeless environment finally prompt need lifeless passive passive prompt accumulates input complete pass back block interaction lively active prompt offer interaction user example searching search incremental search proceeding user type file name program offer file name completion user enter prefix press key program fill much file name possible different key might display list file name match already typed positional argument positional argument directly specifiable user editor internal state variable variable include required editor eg length buffer location point mark etc specialized purpose eg current value righthand margin tab spacing etc often value used unusual way example horizontal position column point often pleasant way specifying value entering number user indicate want right margin instead count character get number specialized positional argument region range text delimited point mark convention matter whether point mark placed earlier buffer selection argument use graphical input device open new way issuing command specifying argument example cursor moved graphical input device well traditional pointmotion command addition region specified click drag operation whatever sequence used operating system rebinding binding act connecting name meaning rebinding act changing binding case editor two different level binding rebinding occur first key level binding case mean attaching operation key binding often implemented mean dispatch table second function level binding case mean attaching procedure operation binding often implemented mean dispatch table example alphabetic key may bound insert operation operation turn bound variety procedure basic insert character procedure basic procedure one save copy buffer every often basic procedure one performs word wrap inserting hard newlines redisplay often called something like fill mode different basic procedure say one performs replacement overwrite instead insertion implementation perform one two level rebinding static dynamic static rebinding new procedure known time editor invoked implementation perform level rebinding dynamic rebinding possible new procedure defined editor invoked unless otherwise stated discussion assumes dynamic rebinding first approximation editor written compiled language eg c pascal perform static rebinding editor written interpreted language eg lisp also perform dynamic rebinding dynamic linking however allows compiled editor include new procedure run time distinction always proper one make dynamic binding also possible compiled language used implement interpreted language turn implement least user command portion editor rebinding key process key rebinding relatively simple done essentially way implementation set dispatch table used map key represented ascii value respective function language c lisp table contain pointer procedure le powerful language fortran pascal dispatch table branch different part routine contains table procedure call made language supply case statement used instead nway branch command procedure formal parameter invoked calling sequence thus c lisp direct invocation work properly note also simple command separate procedure assigned code execute placed inline place call casestatement equivalent used making substitution loses potential flexibility rebinding function dynamic rebinding ordinarily languagesupplied feature discussed depth two comment however made simulate underlying operating system dynamic linking eg multics new unix system procedure may rebound run time dynamic linking way linking procedure together actual link made procedure executed time procedure located file system brought memory link may either left alone case next call procedure relocated relatively expensive process may snapped snapping link process converting general call instruction kept special writeable part program call instruction appropriate address link snapped must explicitly unsnapped rebinding done operating system support dynamic linking might choose simulate manually process complex thought given desirability rebinding function process tantamount explicit overlaying straightforward bearing rebinding function rebinding function involves changing definition procedure invoked referencing discussed way changing procedure definition note code execute function inserted inline basic editor rebound method dynamic linking available feasible simulate still one way way provide static rebinding instead using one dispatch table indicates procedure called directly use two use first table map key operation performed eg f mapped moving forward one character second table map operation performed procedure perform eg moving forward one character mapped forwardchar procedure mode mode collection command rebindings mode invoked implicitly explicitly automatically implicitly invoked mode one visible user implicit mode used support large infrequently used command example suppose editor command played game adventure probably would nt want code command occupying resource whenever using editor editing however might still want make adventure command available time case would use implicit mode adventure command would take step load module implement command rebind key invoked adventure command run new code run code first time whenever user give adventure command editor directly execute code explicitly invoked mode one user asks use example mode auto fill mode auto save mode alternate command set common element user give command knowing command function persistently alter key binding automatically invoked mode one implementation determines appropriate invoke based command given user appeared something else one example automatically invoked mode language mode example c mode mode automatically invoked whenever user edits c source file convention one whose name end c h mode might following rebind internal variable identifies character legal token ie variable name also include character occur within c name change would make forwardword function treat c variable name word similarly rebind sentence paragraph operation operate statement language block rebind key electric semicolon typing finish one statement would cause editor determine insert appropriate indentation similarly rebind tab return line feed key replace fill reformat paragraph command one prettyprints current language block forth another example automatically invoked mode specialized mode editor place executing command help read mail view directory command user effectively placed specialized application share much possible regular editor command extra command example view directory application key might delete file r key might rename file forth however buffer window switch command still available user perform editing special application active mode dynamic rebinding function rebindings commonly done editor known advance done implementation see preceding section discussion difficulty involved function rebinding fully dynamic rebinding new definition procedure known run time desirable several reason debugging greatly eased trialanderror cycle time reduced compile link whole editor time instead one function recompiled linked space saving achieved unneeded mode autoloaded single function brought memory called editor implemented interpreted language user develop function relatively easily sideline development advantageous allows many people develop useful program thus editor specialized many way reasonable support group could ever implement implementation interpreted language also encourages tailoring editor user taste enhancing productivity implementing mode mode defined perbuffer basis implementation must provide changing binding current buffer switched general technique set default binding editor set current binding buffer set procedure invoked change former latter buffer switch made current binding used dispatch command whenever change mode list made especially one remove mode editor must initialize current binding default binding invoke mode procedure turn make change changing mind section discus method used help user want change mind editing command command set design far effective step take design command set minimize state variable change perspective proper design far effective tool however topic covered next chapter chapter wo nt discussed kill ring basic way user change mind delete something say oops nt want delete user inserted extra text deleting easy straightforward however retyping accidentally deleted text general neither easy straightforward hence important feature provide ability save text user feature added singlelevel save referred kill buffer multiplelevel save kill ring extra benefit deleted text saved feature used cut paste operation addition saved text tied system clipboard similar facility emacstype editor record multiple textdeletions kill ring historical reason command save deleted text called kill command small fixed number successive deletion stored together yank paste command retrieves last deletion inserting point alternate yank command available cycle kill ring redeleting lastyanked text replacing next item ring better single kill buffer store multiple deletion superior stack separate buffer ease various undeletions tried easy implement kill ring buffer designated one hold deleted text command perform deletion simply copy text delete buffer performing actual deletion two fine point implementation first successive deletion command add current deletion create new one thus emacs command u deletes next four word exactly effect ie four successive delete word command case four word part deletion second implementation must take care delete properly deleting following item character word sentence etc add end deleted text deleting previous item add beginning deleted text coincidentally deletion command command set emacstype editor form delete following delete previous exception delete current line command command must take text point end line add end deleted text take text point beginning line add start undo kill ring approach requires explicit support user command provides considerable power yet many way make easy user change mind undo facility general way help user change mind principle undo facility provides mechanism reversing change made user effect simple moving point inserting deleting character complex file write global replace note however may still want provide kill ring offer one intuitive limited type undo well operation undo perform example implement cut paste undo except limited case want paste text exactly cut unlike kill ring requires explicit support user command best place provide support undo subeditor interface note interface subeditor although general undo facility work closely subeditor support work like subeditor procedure make change state variable buffer first make note changed record prechange value finally make change example pointset routine would record point change old current location point would change point location note procedure one delete block text must record arbitrarily large amount state information type recording allows back far like since essence change state information recorded earlier state recoverable reversing state change reverse order course implementing undo recording state change additional item icing cake first undo command operate usercommand subeditor call basis thus must also record new user command given thus undo undoes consecutive change reach command marker way even complex global replace undone note general wish repeated undo command undo successivelyearlier command second probably make sense undo entire consecutive set newly typed character single command third resource available retain undo information may limited design minimizes problem excess undo state simply drop end part retained still consistent fourth operating system may support undoing filelevel operation command case simulate undoing say making backup file general live limit undo undoing print operation printing complete quite difficult fifth state information kept place subeditor place must also incorporated undo facility undo heresy undo nice feature offer yes vital editor probably adding make poorly designed editor good one make editor acceptable maybe said earlier best way help user good command set design minimize need desire undo undo generalpurpose facility good application clear text editor one good design approach using emacs command set example undo approach compared approach moving around text deleting text moving around text simply solving problem x want good design solution involves translating difference sequence command move point x mistake made process implementing solution problem merely restated x want resolved undo solution differs detecting error ie deviation intended solution saying undo put back original path proceeding ordinarily difference two solution great user accidentally moved large distance say start buffer becomes little difficult user recover earlier position emacstype editor resolve issue largemovement command set mark thus interchange point mark sequence recover error keep mind almost time user care mark happens two approach identical text deletion case one hand accidentallydeleted text recovered yank command hand undo command conclusion undo nice extra feature substitute good design redo redo mechanism undoing undo conceptually record undos mostrecent command change nextmostrecent command change nextnextmostrecent command change first invocation undo command undoes next invocation undoes forth redo redoes recent undo repeated redo command moving back undo stack let look implementation flag undo flag isargptr int argptr flag isexitptr char c undoptr null undoptr lastcommandundo undocommand undoptr undoptr previous undoptr return true flag redo flag isargptr int argptr flag isexitptr char c undoptr null error undo redo else redocommand undoptr undoptr next undoptr return true main command loop lastcmd undo lastcmd redo undoptr null undo procedure check nt called recently start latest command undoes command set pointer point undo information previous command redo procedure check undo nt called recently ca nt run undo redo otherwise redoes command set pointer point undo information next command main command loop determines whether undo redo procedure called recently basically last command nt undo redo reset undo pointer null implementation allows arbitrary undoing redoing combination long command given sequentially bear mind change state recording undo information legal apply change correct order implementation ignored argument undo redo command feel free assign reasonable interpretation argument implementation macro sense macro allow user give command specifying implicitly instead explicitly macro fall three general level facility allows user say useful ie easier type retyping command assigned short key sequence ie one shifted key repeat count argument command used instead previous repeat count argument command repeated keystroke recording facility allows user say start recording give series command observing effect typed say stop recording later entire sequence keystroke replayed play recording command repeat count argument play recording command cause recording replayed specified number time note command within recording repeat count argument macro language finally editor provide user full access editor macro language language general provide full programming language thus allowing user specify arbitrary set editing operation well way naming procedure later invocation key rebinding redisplay interaction introduction keystroke recording macro language server underscore separation redisplay code rest editor described previous chapter playback recorded keystroke almost certainly complete intervening redisplay thus code based action current window content would almost certainly execute incorrectly question probe understanding expand main command loop include type input mouse operation easy generalize main command loop related code use general eventdriven mechanism medium write routine move word delete sentence sure consider punctuation white space aspect problem medium good memory management scheme use holding undo information medium fundamental support required editor best implement keystroke recorder easy back content nine command set design hast thou slain jabberwock come arm beamish boy previous chapter discussed external constraint implementation division editor manageable piece understand build editor editor build chapter discus various issue involved designing editor command set editor implementation hope used many people regardless expertise people design principle followed good design incorporates quality responsiveness consistency permissiveness progress simplicity uniformity extensibility quality discussed turn responsiveness responsiveness mean action taken user handled confirmed immediately word application responds well user good response allows skilled user work fast different name responsiveness visible effect say every action taken user visible effect display effect might simple cursor motion change text shown message even internal state variable changed state variable indicator display ringing display bell considered visible effect purpose section following principle user never doubt whether application keeping typing received command consequently never need issue command doubt uncertainty display desire visible effect conflict design goal minimizing display flicker one solution problem delay display visible effect user stop typing second way long user typing presumed know feedback le important however user stop typing application would quickly show current state important ramification responsiveness good errorchecking user input checked soon logically possible entered input pass check sort confirmation given eg message beep input fails check error indicator displayed general rule incorrect input accepted unless infeasible perform check different check naturally performed different time example user asked enter number specified range individual character checked typed ensure digit number whole rangechecked user indicated complete say pressing return key consistency consistency mean part application work way topic covered detail section mode permissiveness permissiveness mean user control application vice versa might sound tautological first principle often honored breach think application used lead stepbystep process limited choice step often application allow review change earlier decision short aborting whole application starting scratch writing permissive application easier harder writing nonpermissive version one harder implementation able handle request time event message object design model make easy handle unpredictable request process multistep application must interlock prohibit processing step order course interlock state variable displayed easier designer anticipate possible path application decide advance one reasonable progress progress mean command meet part user goal example command make progress would command show current line command contribute making change user presumably desire waste user time effort elimination command make screenoriented text editor improvement older one general command user give merely tell application something enough information figure example user move end buffer application display part buffer actually stated principle bit harsh time time application able guess correctly acceptable way user take control example sometimes user want position window include two area particular interest application general detect case happens often design problem simplicity simplicity go sobriquet keep simple thing simple complicated thing complicated simple work simple thing never complicated principle mean basic editing operation insert delete move conceptually simple possible example inserting character conceptually simple operation simplest way expressing operation type character inputedit inputovertype insertreplace mode example making simple thing complicated inputedit mode inserting character becomes insert mode type go insert mode command type character maybe type leave insert mode command hardly simple principle closely related efficiency natural think command set requires fewest user operation best one use unfortunately natural thought remain valid taken extreme extreme basis set editing operation could huffman encoded command set resulting command set would optimally efficient would probably usable example command insert string might x hand simple thing tend efficient reason nt baggage complicated ideally mostoften used command shortest uniformity uniformity also go name regularity predictability orthogonality basically command set uniform user know part predict unknown part another way looking command set fit pattern principle important user freed learning command separately instead user learns command set rule generating rest example basic emacs character command fmove forward character bmove backward character ddelete following character hdelete preceding character keep mind h also back space key word command fmove forward word bmove backward word ddelete following word hdelete preceding word user learns command learning basic command set fmove forward bmove backward ddelete following hdelete preceding rule controlshifted mean character prefixed mean word rare command set ever completely uniform however important take advantage uniformity possible extensibility extensibility mean ability accommodate change principle number aspect first change accommodated designing hole gap user install command second command set made rich large larger number command provides place command placed third uniform command set help extensibility example command set set sentence operation move delete converted set statement operation use programming language mode chapter us word mode different way commandsetoriented use mode earlier chapter unfortunate word used industry different way mode care simply put design mode end user unnecessary action order desired action care mode mode make program harder use programmer used mode deal constantly without conscious thought end user however may confused presence mode thinking might go something like pressed f key command level showed f pressing f key move forward screen definition presented little abstract example order piano device almost mode want piano make sound press key key independent produce note regardless key pressed piano really mode select mode foot pedal easy learn overlap key press foot pedal ups down mode although present interfere playing piano moreover mode great deal overlap basic key manner speaking piano command set quite orthogonal typical scientific calculator many mode example mode degreesradians selection degree mode want compute sine angle radian must first switch radian mode compute sine switching radian part calculation rather something order perform calculation hence calculator mode similar le useful mode text editor would insertoverwrite replace mode example extreme range piano almost modeless device calculator many mode designing editor command set thing mode possible mode aligned activity must mode make visible adding key mouse reduce number mode example sine degree sine radian key would eliminate degreesradians mode however upper limit number key put user input device calculator keyboard rearranging mode coincide natural break activity also reduces confusion example unreasonable text editor mode spread sheet mode two mode correspond completely different application switching mode le confusing end user mentally changing gear time hand modern computer ability rapidly switch different application program valuable different application present interface end user anything else often endusers best interest course provide additional function within text editor difference mode would minimized returning example insertedit mode editor see mode aligned change activity user editing single activity comprises deletion insertion changing insert edit mode thus mode change accompanying activity change text editor offer insertreplace mode affect newly typed text affect existing text insert mode newly typed text inserted replace mode newly typed character usually replaces existing character however many case user want replace character want replace word sentence higherlevel object case simple replacement sufficient since unlikely new text exactly length old correct effect readily achieved insert mode combined operation defines region selection identifies old text mode made visible example older calculator degreesradians mode hidden new calculator indicator display show current mode although mode still indicator reminds operator mode exists even guide operator next input best way make mode visible show state information display way possible knowledgeable end user predict accurately effect next command examining current display course end user knowledgeable could nonknowledgeable user ever succeed knowledgeable one note reason making mode visible dovetail reason mentioned earlier command visible effect use language produce output upper case upper case difficult read lower case proper capitalization punctuation also important would rather read enter city state zip code enter city state zip code use full word phrase abbreviate display large enough output fast enough abbreviation longer required prompt form verb object least english prompt username nt tell user however prompt enter username even please enter username reasonably unambiguous first case user apt feel confused unsure next username go get one whose username second case confusion vanishes error message state whether operation performed something went wrong instead instead file write error gasp file written disk full clear space existing disk try write file different disk longer much better application computer best arithmetic checking recording user best direct application solve problem nt make user count thing keep track done past generous accept delete back space used erasing character accept unless good reason otherwise nt distinguish upper lowercase input general possible way unambiguously determine user want accept guideline summary section present brief summary guideline already presented overall responsiveness reflect input immediately display consistency input always result permissiveness user control application progress user input achieve user goal application benefit simplicity keep simple thing simple uniformity make command easy learn predict extensibility plan growth change mode avoid mode possible mode avoided align mode change activity change remind user mode effect use language use mixed case proper capitalization punctuation use full word phrase abbreviate prompt tell user use full error message program computer best generous accept structure editor one idea keep recurring structure editor general structure editor limit editing valid transformation object edited often used programming language editor case may command insert statement user see something like else example use c language general people nt structure editor c language point positioned character user allowed make syntactically valid transformation continue programming editor often found subject research paper reason described fortunate often found anywhere else course user trouble example decides negate condition make else clause clause user lucky editor command operation user may cut else part paste worse user may forced delete else part retype may well possible create structure editor also good editor design however research never seen one two reason creating editor difficult first structureoriented operation may well suited process writing program well suited process editing one distinction subtle important one example usually shown paper show easy write program way nice typing aid able insert many character language statement short command however work involved programming editing program already written editing operation often ugly involve intermediate state valid language syntax area structureoriented operation start getting way second carryover one part editing task another sure may easier write program task editing text string comment program addressed programminglanguage editing command user still need fullfeature editor handle string constant comment documentation integral part programming project adding structure editor either completely separate editor complicated new mode introduced consistency lost completely skip question handle programmer editing one programming language point worked project editing program written five language time note argument presented address concept structure editor one editor particular programing assistance even structure editor approach best still technique used help write edit program like could said technique adapted structure editor however origin technique lost mist history one know developed first structure editor adaptation general editor typing aid first technique command serve typing aid aid would insert statement statement part typing character presumably fewer statement part way user gain express typing benefit structure editor language mode language mode tailor effect command suit characteristic language example command move manipulate word would adjusted use language token use sentence would adjusted use language statement use paragraph would adjusted use statement block procedure addition command perform indentation also modified handle statement nesting however alteration change command work predictability lost addition alteration would presumably made buffer hold program program include comment hence command need know whether operating comment thus whether use altered behavior even user happy change hence way user turn example prefer disable language mode editing syntax checking structure editor offer good syntax checking even prevent creating syntactically incorrect program possible implement syntax checking clearly appropriate editor given better alternative may available better alternative user able invoke compiler within editor editor able parse compiler error warning message simple syntax checking feature look useful surface turn useful practice good programmer tend make relatively syntax error syntax checking catch error like ovid foo return b example misspelled keyword missing close parenthesis illegal operator combination syntax checking catch last two first syntax level way tell whether ovid misspelled keyword programmerdefined type semantic checking catch ovid problem well missing declaration mismatched type problem program spread across multiple file simply way editor would able assemble information required perform correct analysis language compiler perform function compiler invocation bring best way editor help program development user quickly easily able invoke compiler work result command might compile file move place indicated next error message forth lesser feature syntax checking would used system invoking compiler expensive user time computer power within editor command behavior section describes consideration involved designing command part book purpose section say merely way review different approach considered move point text let say point somewhere middle large buffer large enough neither top bottom display user give move line command say pressing downarrow key happens first point cursor could move one line user thinking want move lo point move variant choice move point one line move text buffer window variant unfortunate property cursor always kept center window another choice cursor could stay place text buffer move effect move point one line moment thought show choice indeed valid interpretation fact implemented many time modern editor use first interpretation fact might wondering anyone would select second interpretation description given reveal two interpretation arose information step world text editing world computer graphic consider following picture quick red fox jump lazy user display buffer view user see text display let u redraw picture abstractly quick ed f red fox ump jump lazy user window buffer view user looking window onto text user see part text seen window question user give move one line command command move window text make sense scrolling v paging closely related previous point whether scroll page screen two choice considering case user giving move one line command case point moving one line time question relates cursor move screen first cursor move one line time reach bottom screen possibly line guard zone whole screen move one page cursor recentered second cursor could stay place screen text could move one line second method offer advantage maximum amount surrounding text always visible however offer much severe disadvantage moving around appears constantly changing text quite distracting user also tie user see user making change thus display screen preferred row line user luck want make change looking text line point line third method would cursor move guard zone scroll screen instead paging method offer better continuity paging especially nice repeatedly give move line command personally find exasperating context gradually reduces size guard zone stay paging context automatically restored onehalf window using editor select method give recenter window command much often like page break issue word processor text editor worth mentioning anyway problem arises program displaying buffer printed form including page break tempting implementer always position page break top display however important user able see text page break time many way move word writing command operate word first question arises word need definition possible easy implement approach definition series refinement first step consider character white space one word definition sequence verystrange test sentence nt would considered eight word good start sufficient following sequence would considered two word phrase sequence would considered four word phrase thus next step define word string letter digit definition three example would considered ten three three word respectively definition advantage something considered word something wordlike ie character considered word addition presence absence extra space around change number word good sign right track refinement stop right considered acceptable change make change uniformly considered improvement first change add character word character language mode example writing c program underscore character legal within token adding character letter digit move word command properly move token second change add character dash quote added special way must surrounded letter digit order considered part word change allows verystrange nt part sequence considered single word however suppose verylonghyphenatedphrase probably make sense consider phrase four separate word particular better err side dividing one word two rather combining two word one example verylonghyphenatedphrase would difficult change hyphenated dashed word motion command considered whole thing one word moving word many topic two popular way moving forward word oddly though one popular way moving backwards one way move forward move end word example text one two three four cursor w mean point w move forward word command given move would leave point one two three four ie white space word method would move point start next word one two three four moving backwards method leave point start word one two three four difference may become slightly clear look code might used implement command assuming constant wordstring contains character comprise word code move backward word findfirstinbackward wordstring findfirstnotinbackward wordstring code move forward end word code backward changed forward findfirstinforward wordstring findfirstnotinforward wordstring finally code move forward start next word findfirstinforward wordstring findfirstnotinforward wordstring findfirstinforward wordstring first method leave point end current word property symmetric respect backward motion second method leave point start following word lack symmetry hand make easier move beginning following word choice strongly prefer first method deleting word question okay decided happens move word happen delete word first answer work well simply delete whatever corresponding move command would move thus motion command move start next word deletion command delete text however consider case text three line later text move forward word command would move however really desirable delete forward word command delete line including row dash well yes want consistent predictable one reason style word motion best one use second answer would intelligent view used apple computer see apple would change exactly deleted based circumstance example text text delete forward word command would delete word following space thus leaving text instead text definition advantage deleting word deletes supporting structure word well thus make text word never also mean sloppy user nt leave stray extra space around disadvantage wanted replace one word new one common operation retype space definition also loses predictability white space treated comma period punctuation mark replace old new following text old word give delete forward word command type new replacement text old word give delete forward word command simply type new explain user quickly painlessly note apple human interface guideline provide wordlevel operation selection fairness apple believe guideline excellent guideline build around keyboardmouse combination user input book assumes keyboard available changing basic assumption result changing conclusion make choice based full understanding option assumption apply situation example operated full word apple guideline guideline handle deleting part word guideline support whole word object however free invent semantics handling partial word intelligent manner sentence paragraph end start cheery statement way correctly determine end possible valid english sentence analyzing syntax alone consider text sequence sentence value close value pi value close value pi dr martin medical doctor hate typing long word prefer abbrev know period used end sentence second example show period occur within sentence third show period end token yet end sentence fourth show token word last show ca nt work list known abbreviation considering example remember applying semantic knowledge statement something beyond ability computer program program point view sequence might well xxxx xx x xxxxxxxx xxx xxxxx xx xxxxx xx xxx xxxxx xx xx xxx xxxxx xx xxxxx xx xxx xxxxx xx xx xx xxxxxx xx x xxxxxxx xxxxxx x xxxx xxxxxx xxxx xxxxx xxx xxxxxx xx xxxxxx xxxx said way definition found work best worked trialanderror refined period year findfirstinforward pointmove findfirstnotinforward xiswhite getchar sentence end definition look sentenceending character colon considered end sentence skip character tend follow sentence end finally check white space definition unfortunate property last three example considered two sentence hand advantage work fairly well noncontrived example word better count one sentence two treat two sentence one note one whitespace character character space tab newline whatever else wish include required end sentence depending upon style manual follow either one two space included end sentence however even style manual requires two space user may use manual may simply forget type extra space hence penalize omission know one implementation make life difficult user endofsentence definition requires two space yet refill paragraph remove second space thus move sentence first refill paragraph entire paragraph treated one sentence paragraph end much easier sentence end using word wrap paragraph one line long thus newline character end paragraph otherwise newline followed whitespace character space tab newline etc mark end paragraph fortunate unfortunate depends outlook enough use text formatter want include formattercommand character paragraphbreak character example using nroff formatter want paragraph break text lp text look newline followed either white space dot moving deleting sentence paragraph involves problem moving deleting word see earlier discussion search topic supply lot choice good question one much work want put implementation correct approach first choice buffered searching incremental searching buffered searching mean implementation prompt search string wait user enter complete string performs search work easy implement good incremental search incremental search mean implementation search user type example user typeswhat done sstart incremental search afind first b find first ab cfind first abc herase c string go back dfind first abd search abd second one ssearch third one hget rid last go back get idea command available powerful like clearly much nicer way search buffered searching clearly work implement next question search string simple case editor search string exactly typed thus string text would match string text buffer simple necessarily useful first alternate way search would simply ignore upper lower case thus string would also match text text text another way search would lowercase character search string match either upper lower case buffer uppercase character search string match uppercase character buffer search string would match text text text way useful one might think enter rom order find rom rom yet still find one search string another search variation wholeword match thus one could search without finding addition would handy able allow varying amount white space match thus text string would match text text get complex like wild card unixstyle regular expression nt forget include way quote special character user search exactly command handle typo two common form typographic error special command helpful capitalization command one typographic error incorrect upperlower case character part word word two different form command defined handle task first form operates move forward word command forcing character moved upper lower capitalized case latter first character upper case others lower case note three separate command required second form rotate case command definition use act differently depending upon whether within word word former case affect character point end word latter case affect entire previous word either case examines current state word rotates among word word word word etc point moved definition turn handy twiddling another typographic error interchanging two character example teh instead three form command fix first form interchange two preceding character thus abcd becomes bacd second form interchange two surrounding character thus original becomes acbd neither first two form move point third form move point original becomes acbd advantage form repeated execution command serve drag character along question probe understanding consider favorite editor command set implementation meet design guideline medium define command would like see editor easy different way handle moving line hint consider handle variablewidth character easy word sentence paragraph problem change language english considered medium define complete command set hard define good structureeditor command set hard back content ten emacstype editor oh frabjous day callooh callay chortled joy thesis subtitle cookbook emacs book subtitle emacs modern time safe bet would get around discussing emacstype editor point first admit biased used emacstype editor exclusively going fifteen year except brief stint durance vile macintosh addition implemented worked implementation halfdozen emacstype editor chapter describe emacstype editor make special mean emacstype chapter discus emacstype editor particular emacs editor due nature nt one definitive emacs editor closest come thing either original emacsonteco gnuemacs command set specific emacs command set always shifting changing even detail basic command operate change however broad outline basic command pretty constant say editor implement considered emacstype editor appendix c list one emacs command set set change large emacs command set follows design guideline presented previous chapter place fall short usually either physical constraint limited number key available design compromise achieve one must trade b everpresent historical reason good idea time know better ingrained change thing considered emacs command set meet design guideline better editor aware editor never get beyond providing command set editor neither extensible provide extended environment limitation may due implementation environment merely amount effort available devote project place editor listed appendix b command set implementer able decide create small editor without feeling obligated spend year project given decision made better use emacs command set least opinion extended environment emacstype editor continue used many thing besides editing text example emulation another user like different editor command set reason emulate emacstype editor thus still power emacs favorite command set well electronic mail text editor primary interface mail system message composed editing buffer sent command mail read managed reading buffer command perform operation move next message summarize message full power editor available make easy undelete accidentally deleted message copy part text message one reply addition minimal additional learning order use system effectively command shell text editor primary interface operating system command line edited full power editor evaluated past record interaction kept part examined reused new command line operating system support advanced terminal display editor offer interface use program program would take advantage terminal independence editor alternatively program would insert output buffer editor would become entire terminalmanagement system function somewhat superseded window system learn two system need learn one compilation text editor work closely compiler speed turnaround developing software debugging text editor used debugger multiple buffer multiple window used examine perhaps multiple source file interact debugger see outputinput program run addition debugger might use window two thing constantly show value selected variable file interface text editor interface complicated file example indexed sequential file updated providing editor command read write entry adding deleting managed well full power editor available editing content entry file system interface text editor provide smooth interface file system directory read editor edited user file deleted otherwise changed smooth manner merely moving file name giving command eg delete binary file text editor used examine absolutely necessary modify binary file thus replace various patching program function currently performed one emacstype editor main advantage building editor even absence feature user spend bulk time using text editor word processor etc extending environment minimal learning required use feature user thus free get work done instead spend time reading manual extended environment one hallmark emacstype editor extensibility final hallmark emacstype editor extensibility emacs born extensibility predecessor teco teco extensible many user took advantage extensibility write command change existing one eventually one person richard stallman took large number extension package created standard package editor macro emacs extensibility heritage even name emacstype editor expected extensible extensibility mean quite simply end user change feature editor feature sufficiently dedicated end user change implies full source code implementation available end user gnuemacs distributed copyleft policy every end user want recode redisplay however principle remains end user want tweak parameter maybe fix command two great encourage change making easy make importance extensibility explained easy see emacs command set standardized user want change way emacs command set compared ball mud add take away still ball mud actually property true extensible system also comparison implementation emacstype editor editor pointless emacstype editor changed may already overcome shortcoming question probe understanding identify way emacs command set meet design guideline listed previous chapter easy medium identify editor similar program offer extended environment easy identify editor similar program extensible easy program would like extensible nt easy back content epilogue brillig slithy toves gyre gimble wabe mimsy borogoves mome raths outgrabe concludes verse jabberwocky lewis carroll piece nonsense verse embedded nonsense work resembles real world much computer program perhaps lewis carroll popular among computer programmer ask chapter structure book worked well fit verse noticed right question probe understanding part jabberwocky fit particularly well chapter lead particularly poorly easy back content appendix fiveminute introduction c appendix provides brief introduction part c programming language used example presented book appendix reference manual describe c rather assumes familiar programming language general need nudge two follow example presented book want learn c language consult ansi kernighan interested c also look c language best way think c programming language consider providing programmer mechanism allocating naming memory control structure extension mechanism many people consider barely highlevel language perhaps reason ideally suited system utility text editor declaration mechanism provides programmer way allocate name memory data type oriented around best suited hardware language statement provide control structure mechanism usual control structure available addition full suite arithmetic bit operator available focusing around best suited hardware procedure definition call mechanism provide extension mechanism many standard c operation string copy inputoutput implemented term mechanism comment enclosed case convention name book follow convention uppercase name predefined constant mixedcase name procedure lowercase name variable convention requirement data type declaration variable procedure used declared declaration following form type variable language support following data type charthe variable hold one character character typically bit wide may either signed range unsigned range implementation discretion intthe variable hold integer size convenient hardware size typically bit floatthe variable hold floating point number file variable hold file descriptor struct name list declaration declaration combined single larger data type named name type name name address procedure return value type type voidno value used indicate procedure return anything accepts argument declaration form type mean variable hold address object specified type variable called pointer specified type declaration form type name constant mean variable hold array object specified data type array constant object long form type name used twodimensional array following data type part language represent type used example implementation would define term existinglanguage data type flagthe variable hold true false value c value considered false nonzero value considered true statusthe variable hold success failure status value value may include warning error information locationthe variable hold value represents point mark location within buffer timethe variable hold value represents time date time privateyou get define constant integer written eg mean value fiftysix hexadecimal constant written form hexadecimal digit character string enclosed double quote nulterminator byte decimal value automatically appended string compiler character string considered type array char character constant enclosed single quote automatically converted integer whose value character example array two character consisting character nul value decimal assuming ascii ai integer whose value assuming ascii abc array four character consisting character b c nul value decimal assuming ascii form abc officially undefined compiler might consider integer whose value nt count character b refers ascii back space character decimal note syntax used code excerpt however normal english typographical convention using followed body text predefined constant newlinethe character string represents systemspecific newline written n nlthe character represents newline decimal spthe space character decimal tabthe horizontal tab character decimal nulthe nul character decimal character string terminated character nullthe null pointer data object address buffernamemaxthe size longest possible buffer name plus trailing nul possibly filenamemaxthe size longest possible file name plus trailing nul typically procedure structure procedure following structure type name argument local variable statement procedure named name return data type type type structure pointer well basic type argument list contains list declaration keyword void procedure take argument local variable declared may initialized procedure invocation last procedure statement statement statement usual one semicolon terminates statement comment start end statement grouped character sequence statement statement statement n equivalent one statement white space column significant condition thenstatement condition thenstatement else elsestatement initializer endtest increment statement execute initializer end test repeat statement increment end test end test becomes true break exit loop immediately continue skip rest loop body nt exit loop endtest statement repeat end test statement end test becomes true statement repeat statement forever break continue return statement used exit loop switch expression case statement break case statement break default statement break execute statement label whose value match expression statement default present label match return expression return value procedure operator possibly unusual language operator assignment test equality test equality assignment test equal logical negation false becomes true abreturns sum b abreturns difference b breturns product b abreturns divided b breturns modulo b breturns bitwise b abreturns bitwise b abreturns bitwise exclusive b construct b operator b except evaluated operator return true false result return true false however true false value required say ifcondition nonzero value mean true zero mean false vreturns address v smselects member structure type struct p mselects member structure pointed p p type struct vincrement value v return new value vincrement value v return preincrement value vdecrement value v return new value v decrement value v return predecrement value construct type expression called cast convert value returned expression specified type standard library function used book fclose fileptr close file opened earlier fopen fgets buffer length fileptr read one line file opened earlier fopen fopen name mode open file reading mode r mean readonly free ptr free memory previously allocated malloc isprint key return true key printing character false malloc size allocates block memory least size character long memmove length move length character working properly area overlap memset start char length set length character starting start character char printf format printf format arg copy character format string screen character encountered sequence mean take next argument send string screen sequence c mean take next argument send single character screen routine lot example book nt use extra functionality strcpy copy string string strlen sting return number character string counting terminating nul nonstandard library function used book fatal message handle fatal error xiswhite c return true supply character whitespace character space tab false xstrcpy work like c strcpy routine copy one string another defined work properly string overlap back content appendix b emacs implementation appendix converted current emacs implementation list maintained online url citation purpose http wwwfinsethcomemacshtml back content appendix c emacs command set first thing official emacs command set one main reason emacstype text editor exist user free change command suit taste another reason many different implementation emacs editor slightly different command set consult documentation come implementation documentation write implementation specific said appendix list default command set come gnuemacs also list alteration default emacstype text editor implement onedimensional array byte editing model line break represented single newline character regardless representation used operating system notation first emacs took advantage particular keyboard feature keyboard allowed type normal character addition control meta key available key acted full shift key allowing user specify control andor metashifts key example one could type notationkey combination c mc last two could also written cm current keyboard send usual ascii character limitation remove possibility typing multiply shifted character hence need unusual notation command set presented thus use familiar caret notation copy listed appendix e still system use extended keyboard like documentation system use original notation escape key usually labeled esc sends escape character used prefix make missing meta shift key convention keyboard extra shift key perhaps labeled meta alt specify meta command setting bit character sent keyboard emacs command convention always upperlower caseindependent thus x b x b refer command exception selfinsert command b insert b b insert b uppercase version listed term sexp defun familiar lisp programmer probably familiar others sexp refers parenthesized list defun refers function definition emacs language mode remap lispspecific command comparable command programming language default gnuemacs command list base command place mark point amove beginning current line bmove backward one character cprefix modespecific command ddelete following character emove end current line fmove forward one character gabort execution return edit loop hhelp itab indentation languagespecific manner jinsert line break indent languagespecific manner kdelete text end current line end line delete line break argument delete many complete line lrebuild display scratch centering point minsert line break leaving point break nmove one line staying nearly column possible end buffer grow buffer oinsert line break leaving point break pmove one line staying nearly column possible qquote insert following character typed rreverse search see ssearch incrementally string rsearch previous occurrence ssearch next occurrence untypes last character including r etc gabort search return starting place complete search qquote search command ctrlxxcomplete search execute xx command otheradd character search string tinterchange character side point leaving point second one uuniversal argument two u u cmd cmd time depending upon number u u multiplier u integer cmd cmd integer time eg u f mean f time vmove bottom current screen top screen ie move one screen wdelete text point mark cut xprefix x command listed ycopy top item kill ring point place mark beginning block point end paste zsuspend program execution return whatever invoked editor prefix meta command listed undefined abort recursive edit undefined undo sp insert delete preceding character bssame h also back space tabsame lfsame j also line feed crsame also carriage return return escsame also escape delsame also delete rubout obsolete help command h cdescribe copying policy h ddescribe distribution policy h hhelp help h nview emacs news h wdescribe lack warranty h help help h aapropos command deal h bdescribe current key binding h cbriefly describe key h ddescribe function h fdescribe function h iinvoke info subsystem h kdescribe key h ldescribe problem current version lossage h mdescribe mode h nview emacs news h sdescribe syntax h ttutorial h vdescribe variable h wwhere controlx x command x flush mouse queue x aadd mode abbreviation x bdisplay list buffer associated information x cexit editor x ddisplay current directory x eevaluate last sexp x fask name file read new buffer whose name derived file name x gcancel x prefix x hremove mode abbreviation x iindent rigidly x lconvert region lower case x nset goal column x odelete blank line around point x pplace point mark around current page x qtoggle read marker x ra x f mark file read x ssave current buffer modified x ttranspose line x uconvert region upper case x vfind alternate file x wask name file write buffer file x xexchange point mark x repeat complex command x set selective display x expand abbreviation x start collecting keyboard macro x end collecting keyboard macro x add global abbreviation x remove global abbreviation x set fill prefix x point register x window x window x window vertically one x window vertically one stay first x controlx command listed x window horizontally one beside x set comment column x scroll window left x display current cursor position x scroll window right x aappend region buffer x bswitch buffer x dedit directory dired x einvoke last keyboard macro x fset fill column horizontal position x ginsert register x hplace point mark around entire buffer x iinsert file x jregister point x kkill buffer x lcount number line page x msend electronic mail x nnarrow editing bound region x oswitch window x pnarrow editing bound page x qkeyboard macro query x rcopy rectangle register x ssave buffer x uadvertised undo x wwiden editing bound x xcopy register x move backward one page x move forward one page x grow current window x move location implied next error message x shrink window horizontally x grow window horizontally x delete beginning current sentence controlx command x ffind file window x find tag window x aadd change log entry window x bswitch buffer window x ddired window x ffind file window x mmail window meta command place point mark around sexp amove beginning current defun bmove backward one sexp cexit recursive edit dmove one level list structure emove end current defun fmove forward one sexp gformat grind current sexp hplace point mark around sexp icomplete lisp symbol jindent new comment line kdelete following sexp nmove forward one list osplit line move rest line vertically pmove backward one list qindent sexp sincremental search forward using regular expression ttranspose adjoining sexp vscroll window wappend next delete top item kill ring xevaluate defun evaluate expression indent region spinsert exactly one space ask execute shell command invoke spelling checker word query replace ask old string new string occurrence old string display ask lredisplay screen rinvoke editor recursively wdelete old string invoke editor recursively exit spreplace old new continue replace wait confirmation replace exit replace rest without asking return previous old string jump mark nt replace continue set abbreviation prefix mark insert paired parenthesis move past closing parenthesis tag loop continue make argument negative find tag abbreviation expand digit argument similar u indent comment move beginning current buffer count line within region move end current buffer place point mark around current word amove beginning current sentence bmove backward one word ccapitalize following word ddelete following word emove end current sentence fmove forward one word gfill text region hplace point mark around current paragraph itab tab stop jindent new comment line kdelete remainder current sentence lconvert following word lower case mmove back indentation qfill current paragraph u q mean justify paragraph rmove window line ttranspose adjoining word uconvert following word upper case vmove top current screen bottom screen ie move one screen wcopy region kill buffer xexecute extended command yafter delete justyanked text yank previously killed text zzap character move beginning current paragraph delete space tab around point move end current paragraph delete indentation current line execute shell command region pipe region shell command clear buffer modified flag delete previous word author command set section list change author make justpresented default command set crotate case word foo foo foo foo hdelete previous character ijust insert tab special indentation jinsert line break indent new line current one kdelete line usual nt treat argument specially mjust insert line break special action nmove next line nt extend buffer talways transpose two preceding character va slightly different move screen zmove screen delete white space indentation current line invoke keyboard macro suspend program execution return whatever invoked editor delete previous character special action x eexecute one shell command x iinsert file x minvoke subshell x nnull prevent typing accident x pnull prevent typing accident x rreread file x treturn toplevel editing exit recursive editor x get rid h string buffer used make unix man page readable x e man title x cinvoke compiler x hhelp x nnull prevent typing accident x pnull prevent typing accident x rread electronic mail hdelete previous word rquery replace null prevent typing accident spset mark move beginning buffer argument move specified line number display number line buffer number line point move end buffer argument move specified line number gask line number go specified line inull prevent typing accident jnull prevent typing accident mnull prevent typing accident nnull prevent typing accident onull prevent typing accident pnull prevent typing accident rreplace string r nt ask scenter current line znull prevent typing accident delete surrounding space tab line break reinsert one space back content appendix teco command set appendix present summary mit teco editor command set actually find system wish run teco appendix useful completely replace full manual teco implement onedimensional array byte editing model line break stored single newline character large file divided page page within file must edited order ie editing first page done second page read edited etc way go backwards finish editing file start hand system large file kilobyte split page command single double character upperlower case ignored basic form command c nc n mc first form executes command c default argument second supply one argument n third supply two argument n command take string argument string consists character command terminator character character called altmode escape character written historical reason course command accumulated command string double altmode terminator entered time command executed one altmodes may serve delimit string example move forward five character command string ithen insert string string move forward five character insert string move backward eight character teco also support concept qregisters variable either hold arbitrarily large string text number qregister either hold string number may change back forth desired however may hold one given time qregisters named single character holding string qregisters act like buffer switch insert delete move around display search qregister name either one alphanumeric character preceded zero one two period name two period reserved system variable variable name form name dollar sign altmodes subscripting expression q index certain command cause return data instead storing expression parenthesis certain command period followed r ascii character teco first written running incompatible timesharing system command set incorporates knowledge system file name syntax briefly file name four part dev dir prtone prttwo part character long stored one word within word character squeezed character set lowercase character folded uppercase equivalent operating system application program maintain default value four part example user specifies name foo default device directory second part file name automatically filled multiple version file kept setting second part file name number successive version maintained incrementing number second part refers earliest version around second part refers latest version around reading one past latest version around writing general notation xdenotes specified control character see appendix e listing ascii character denotes altmode character unless otherwise specified denotes choice either form left form right acceptable n argdenote integer argument cmdan arbitrary command string dirdenotes directory filedenotes file name kdenotes either n n either text range character n n successive line stringdenotes string argument modify operation certain command command n argument n n n n n return value n n return value n alogical xor operator bused cleaning failed search cwhen typed console terminates command string start execution fstring insert string argument deleting last string found inserted fkdistring gexecutes immediately erase command string typed far also abort current command one executing hinserts back space character iinserts tab character jflushes pending value kstring executes string system command mflushes pending value nnsets f line n ntoggle f ttmode flag nndoes nn n ofilename bigprints filename device open output ascii sort command assuming point start record move point start key move point end key move point end record start next record f p case nonzero command ignores case qquotes next character rinvokes real time emacslike mode nsif n sleep n second otherwise sleep system uptime n n ssleeps n second returning immediately input becomes available udisplays current directory user supplied manner executes immediately first character command string vpops next position ring buffer position successive v move ring vreturns value top ring nvpushes n onto ring buffer unless n value top ring n vpushes n onto ring buffer wreturns top level xits value first argument nmq valid inside macro yits value n second argument nmq valid inside macro zsuspends editing process terminates text argument two successive altmodes terminates command string exit innermost macro invocation xspecially process character x xreads return string argument follows kmq valid inside macro xreturns ascii value x spsame except space argument label defines label comment comment command attempt go arg x thencmd conditional check arg according condition x executes command string thencmd condition true arg discarded conditionals bi arg ascii value delimiter ci arg ascii value nondelimiter dis arg ascii value digit eis arg gi arg li arg ni arg uis arg ascii value uppercase character xreverses meaning condition x arg x thencmd elsecmdconditional else logical operator qincrements numeric content q return result logical operator terminates conditional specify precedence argument operator multiplication operator precedence addition operator separate numeric argument subtraction operator specifies position number point see also special qregister name listed division operator precedence digit xxx interpreted base f ibase usually xxx interpreted base f ibase usually modifies action certain command n nothing n otherwise pass control character next word used terminate iteration n null us value last search like revers condition like exit arg like exit arg n cmd command cmd n time indefinitely n null cmd begin errset error occurs inside execution resume ktypes k k type k omits crlf k type k echo area k type k echo area omitting crlf first character error message display last several command character otherwise enters trace mode leaf trace mode modifies action certain command aappends next page input file buffer n aappends next n line page marker input file buffer aappends input file buffer close input file mareturns ascii value character character right point ascii value character point bargument equivalent ie beginning buffer however value modified virtual buffer boundary ncmoves forward n character n csame moving return move succeeds move would fail mddeletes forward character mddeletes backward character equivalent r e see ecommands listed f see fcommands listed gqinserts content qregister q buffer q number string representation inserted f inslen set length inserted text ngqinserts range n qregister q gqreturns copy string qregister q n gqreturns value character position n qregister q hargument whole buffer equivalent b z istring insert string point ixstringxinserts string delimited x character point let insert string contains altmode niinserts character ascii value n niinserts copy character n iqinserts qregister q buffer n iqinserts character ascii value n qregister q n iqinserts copy character n qregister q iqstring insert string qregister q replacing prior content n iqinserts character whose ascii value n qregister q replacing prior content n iqsame n iq insert copy iqxstringxsame iqstring except string delimited character x njsets point specified position bj j move start zj move end n jdoes set return successful nkkills deletes save deleted text character range move point nkkills l would move n kkills l would move klike k lf preceded cr recognized mlmoves start mth line point start current line nlsame mnj used command lmoves end line lmoves end previous line llike l lf preceded cr recognized nmqstring executes content qregister q teco command qregister contains number executes corresponding r mode command mtailrecursive form like current function removed stack new one called mfools called macro thinking called r mode nnstring nsstring p continues search end buffer reached olabel go specified label generates error label found olabel return label found olabel allows label abbreviated npwrites buffer l page mark kill buffer read one page input file repeated n time npwrites specified range buffer kill append input npwwrites buffer l page mark killing reading repeated n time pa p except loworder bit word written preserved cleared used writing binary file qqreturns value qregister q number qregister hold text return pointer text nrmoves backwards n character nc n rsame moving return move succeeds move would fail nsstring search forward nth occurrence string place point string argument null last nonnull argument used special character search bmatches delimiter see odivides string alternate pattern thus sfooobar find first foo bar qxquotes x xmatches character nxmatches character except x x character nbmatches nondelimiter nxmatches nothing note sfooo always succeed move point next three character foo sfooo return nonzero foo nsstring nsstring search backwards leaf point string n sxstringxsame nsstring string delimited character specified x argument null search null string n sstring nsstring return value successful used within n returned nth subpart found kttypes text range n line n character ttypes echo area nuqinserts number n qregister q return value nuqinserts number n qregister q return kvdisplays would type put point processing vdoes standard buffer redisplay kvwdoes v wait one character return ascii code value wflushes current value except part pw vw kxqinserts text range k qregister q replacing prior content k xqsame kxq appends q ykills buffer read one page input file buffer ykills buffer read rest input file buffer zargument specifies length buffer character qpush text number qregister q onto qregister push list move past number return value ninserts printed representation character n base e ni like n pad space column return representation n string instead inserting qpop text number qregister push list qregister q replaced nstring nsstring end buffer reached era last character command string ecommands file command eudir display specified directory userdefined manner e file try open file return successful error code eccloses input file edfile deletes specified file eddeletes currently open file eefile sequence infinitypeffile ec effile close output file change name file eginserts various information buffer successive line date yymmdd time hhmmss current username default file name real name file open input output date text form value day week day week year leap year status phase moon better way getting information eiopens file teco output writing default device eisame ei us current default file name eisame ei set default device dsk ejfile restores complete state file must saved ej ejfile save teco complete state file eltypes listing default directory eminserts listing default directory buffer enold new renames file old file new epfile erfile bigprints file name twice device open writing eqfrom creates link file file erfile open file input etfile set default file name specified file name ewdir ei specified directory ewdir file ew specified file name eydir type listing specified directory ezdir insert listing specified directory buffer e push input channel epush output channel e pop input channel epop output channel eold new copy file old file new eold new copy file old file new preserving old file date fcommands nf return n numerical order new n nf return argument specify range point location n line away faruns every character buffer dispatch table nfbstring search string character whose ascii value n fbstring search buffer forward character string fbstring search buffer backward character string n fbstring search buffer range character string festring overwrites next lengthofstring character string deleting inserting gap need move fkreads string argument within macro nfsqsearches qregister q word contains n starting fxits value k argument nmq valid inside macro fyits value number argument nmq valid inside macro string fdetermines whether string short qregister name argf xsame regular conditional pass arg else command string f dollar return f case insert buffer case shift lock character f case nonzero character converted uppercase lower case input caseshift character cause next character read case caselock character temporarily complement preferred case output f case odd character nonstandard case preceded caseshifts even translation done nf string set f case n set case shift lock character first two character string f like except f return argument making easy use value twice without using qregister f like except f return argument exactly discarding data saved f string read discard string argument fclears screen return string first six character packed word teco running bit machine n ascii string insert buffer n n string f tag throw tag long jump f tag cmds catch throw executes command f tag cmds errset catch time fqstring compare qregister q string return positive q string negative q string value zero value absolute value location difference fqxstringxcompares qregister q string delimited x nfstring compare buffer range n string n fxstringxcompares buffer range n string delimited x f nf mbox control argument bit string bit gap bit garbage collect bit jump cache bit unused core bit gap nfajustifies text within range nfajustifies n line text fafills without justification kfbstring sstring domain defined k k form n n search backwards modifier work kfcconverts text range k lower case k fcconverts text range k upper case n fcreturns uppercase version character whose ascii value n nfdreturns range x x position nth level parenthesis point nfdgoes backward feinserts list teco error message buffer nfeinserts message whose error code n festring return code error whose message string fgprocess error fgprocess error throw away type ahead fireads one character return ascii value fias fi nt flush character reused fias fi return value tv character set fias fi nt flush character reused fjinsert command line used invoke teco buffer fkreturns value f inslen ie length last string inserted found search fw fk always except backwards search fw nflreturns range x x position nth list point nflgoes backward n flas nfw sexpressions nfldsame nflk nflkkills nfl implies nflldoes move implied nfl nflrsame nfll nflxqcombines nfl xq nfmattempts move point cursor appear column n line started fnis n n needed eliminate possibility g within string foqname performs binary search table fixedlength entry intended symbol table qregister q contains table name searched first word table contains number word entry table objectfpreturns number describing object number none number could pure string space number could impure string space dead buffer living buffer qvector pure string impure string fqqits value number character qregister q qregister hold number frupdates display fsname return value specified variable listed ftstring type string argument ftstring type string argument top screen ftstring type string argument echo area ftstring type string argument echo area input available nfureturns range x x position nth level parenthesis point nfugoes backward fvstring display string argument fvstring display string argument clear rest screen nfwreturns range x x position nth word point nfwgoes backward n fwas nfw word n fwas nfw lisp atom word nfwdsame nfwk nfwkkills nfw implies nfwldoes move implied nfw nfwrsame nfwl nfwxqcombines nfw xq kfxqsame x k combined kxqkk fyinserts remains input file point nfyinserts n character fzfile string creates start nonexec fork fz resume inferior fork f flag push value f flag qregister pdl nf flag push set flag new value nf r cmacro push definition character whose number n nf r cmacro push set fmostly keep working regardless setting f disable f flag pop value f flag qregister pdl nf r cmacro pop definition character whose number n flike f string compared converted upper case special qregisters name form x put three argument aholds string represent cursor default bholds macro display user buffer dholds delimiter dispatch table tell several command fw fl b c search b treat ascii character eholds output radix fholds r secretary macro used auto save gholds userspecified directory display macro suppressdisplay flag iholds value start command jholds userspecified label processing kholds deleted text lexecutes teco first start nmacro executed another macro exit othe current buffer pholds userdefined errorhandler macro qholds symbol table used define teco variable zsafety backup copy f variable name six character long space name ignored much name required make unique required although program include entire name saying fsname return value flag saying nfsname nfsname set value flag set want use flag second operand arithmetic operator eg fsname c enclose f parenthesis fsname c name never include control character name leading caret however combination usually relates implied control character bottomsize bottom margin percentage number line displayed centerwhere teco prefer put cursor endsize area bottom screen teco never choose put cursor oplsp read nonzero input coming lisp job topsize top margin analogous bottom tocid read nonzero terminal insert delete character tofci read nonzero terminal generate character tohdx read nonzero terminal halfduplex tolid read nonzero terminal insert delete line tolwr read nonzero terminal generate lower case character tomor read nonzero use want processing toovr read nonzero terminal overprint torol read nonzero user selected scroll mode tosai read nonzero terminal print sail character set rsetinitially set nonzero trace information cleared automatically clrmodnormally negative screen normally cleared automatically automatic screen clear done used debugging positive screen never cleared kilmodnormally f bkill nt actually kill tyi backbacks point f tyi pt one step backing n step use f tyi nxt reget n input character tyi nxtextracts one character ring buffer past input character tyi ptpointer ring buffer contains last input character ej pageis number lowest page used ej shared pure file adlineis line size used fa command altcountis number teco seen interrupt level back args read return argument macro different stack frame ie one macro called eventually called return value way fx argument positive return argument specified frame number outermost negative return argument relative frame number caller back depth read return number stack frame counting back pcreturns pc stack frame specified way f back args nfs back pc set pc back qp ptr read specifies return argument f back args back return write return specified stack frame argument f back args f back return equivalent back string read return pointer string buffer executed argument f back args backtracereturns copy program run stack frame argument f back args bbindis useless f b bind f b bind useful pushing popping temporary buffer bcons n f bcons return new buffer n character long initially filled nuls bcreateis like f bcons u word buffer selected instead returned bkillkills specified buffer bothcaseinitially case significant search case ignored case special character also ignored boundariesreads set virtual buffer boundary b lfif nonzero suppresses lf follows backward motion rubbing r mode printing terminal caselike f neither get set caseshift caselock character clk intervalis interval real time clock tick second active user input clk macrois realtime interrupt handler macro macro type anything must leave h set ctl mtaif negative suppresses r mode definition controlmeta character make easy edit teco command data switch read content console switch date read current date time number filedate format fed f fd convert f cdate deviceis default device name dd fast read nonzero current device fast ie local disk fileis default file name default file name first part default file name second part forcesetting nonzero force complete redisplay everything except mode line used putting temporary display snameis default sname versionis default version number reflection fd latter numeric reading value return corresponding number value respectively numeric return fd numeric setting value set file name otherwise setting ignored waitwhen set nonzero cause display pause slightly line output echo activewhen set nonzero indicates output written echo area echo area need cleaned echo charwhen r mode character executed value hold character caused invocation echo display write f echo output display mode echo errorswhen set nonzero error message printed echo area echo flushwhen set nonzero automatic clearing echo area r mode enabled echo linesthen number line screen bottom used command echoing echo write used output echo area numeric argument argument ascii code character echo string argument string echoed errsame f error read written creates error specified error code errflagwhen negative signal redisplay first n line display contain error message overwritten errorthe error code recent error err throw write return innermost error catcher exit write break fdconvertwith numeric argument convert file date string form ddmmyy hh mm s insert string buffer form n f fdconvert return string argument read string buffer convert numeric form file padis character used pad last word file usually c flushedis set nonzero flushed thus output discarded fnam syntaxcontrols happens one file name present file name used part two file name used part one file name used part one used part two gap length read length gap gap location read buffer position gap height read number line screen help charcontains character used help character normally set help recognized eg useful q help macis macro execute help character typed h position read return column point hsnamethe user home directory chrwhen set nonzero teco try use terminal insert delete character function linewhen set nonzero teco try use terminal insert delete line function ibasethe input radix number ended initially ibasethe input radix number ended initially access write set access pointer input file cdatethe creation data input file device read device input file dumpthe dumped bit input file file read name input file read first name input file read second name input file length read length input file reapthe reap bit input file sname read sname input file version read version number input file f image outoutputs argument superimage mode translation countis old name f tyi count inslenis length last string inserted g found fw negative backward search jname read return jobname jrn execute write open journal file playing back form f jrn execute close file default file name used jrn read nonzero journal file replayed jrn inhibitwhen set nonzero input taken terminal even though journal file replayed f jrn macro work jrn intervalspecifies often journal file recorded updated disk interval unit command jrn macrothis macro called journal file replayed teco encounter colon g file character passed argument case g macro execute r quit f quit case colon macro read character file f jrn read acting upon jrn open write open journal file writing recording default file name used form f jrn open close file jrn read nonzero journal file recorded jrn read read read character journal file replayed file return random value jrn write write output argument either character string journal file written file nothing last page read set file opened set last character read linesis number line used standard buffer redisplay mean use whole screen lisptwhen set nonzero mean text supposed passed teco superior listenreturns nonzero input available read fi given argument input available argument typed machine read return name machine teco running mode changewhen set nonzero f mode macro need run eventually mode macrothe macro update qregister j mode line modifiedwhen set nonzero buffer changed since last read written mp display write output text main program display msnamethe name working directory noop altmodewhen set negative number altmode considered noop set altmode considered error set positive number altmode end execution noquitgives user control g access write set access pointer output file cdatethe creation data output file file read name output file length read length output file version read version number output file f old flushedsaves value f flushed set zero upon returning r old modeis last qregister j actually displayed ospeedthe terminal output speed baud speed known outputwhen set nonzero suppresses output ew file pagenumthe number form feed read input file pjattyset negative value whenever teco detects terminal taken away negative value mean complete redisplay must done promptthe ascii value prompt character pushpt write nv qp homereturns string say qregister pdl push list stack slot n pushed form f qp home return pointer qregister form n f qp home convert pointer returned f qp home string form qp ptrthe qregister pdl pointer qp slotread specified pdl slot qp unwind write like f qp ptr pop slot back qregisters came quitwhen set negative value execution quit next opportunity q vectorreturns n character long newlyconsed qregister vector randomreads set random number generator seed read onlywhen set nonzero attempt modify buffer become error real addressreturns value machine address start buffer refreshwhen set nonzero macro executed whenever teco really clear whole screen executed screen cleared rereadwhen set nonnegative tv code read next invocation fi printing terminal contains tctyp word display terminal rub crlfwhen set nonzero character crlf pair erased together rub macrothe macro called r mode want runtime read teco runtime millisecond sailwhen set nonzero terminal assumed support sail character set errorwhen set nonzero failing search within iteration p sort generate error show modewhen set nonzero fr type mode line printing terminal effect display hposis horizontal position point everything taken account assuming infinitely wide line stringis default search string step macrowhen set nonzero numeric teco display buffer wait start every line program set nonzero string teco executes macro beginning every line program macro start w never stepped step depthwhen set stepping occurs always otherwise number stack level cut stepping superioris macro invoked superior want put text teco valueis value returned last search command top linethe number first line screen teco use tracewhen set nonzero teco trace mode see truncateif negative long line truncated positive long line wrapped next line ttmodewhen set nonzero tell teco normal buffer display display printing terminal tty init initializes teco tty information tty macroperforms userspecified tty initialization ttyopt read ttyopt word terminal use toxxx value instead ttysmt read ttysmt word terminal tyi begthe value f tyi count last time main r command loop tyi countthe number character read far tyi sinkwhen set nonzero macro executed every time character actually read terminal tyi sourcewhen set nonzero macro called obtain terminal input tyo hashreturns hash code screen line n n f tyo hash force line n redisplayed tyo hpos read hold horizontal position type next appear tyo vpos read hold vertical position type next appear typeouttells type next appear next type appear top screen otherwise type appear last type u hsnamedetermines user hsname uindex read user index teco job u mail filethe complete file name user mail file uname read user name teco job uptime read return time system unit second uread read input file open otherwise zero uwrite read output file open otherwise zero var macrowhen set nonzero macro run whenever variable set v bi distance real beginning buffer virtual beginning verbosewhen set nonzero teco print long error message otherwise teco print short message x must typed see long version version read teco version number v zis distance real end buffer virtual end widthwidth terminal character windowthe position first character display window relative virtual beginning buffer wordgets set word current buffer xjname read return xjname teco job x modifiedjust like f modified nt affect display modified flag mode line thus user track whether change made intervening command x promptprinted zeroed printing terminal prompt xuname read return xjname teco job disablewhen set command legal set command always illegal set command treated z read number character buffer h printwhen set negative h output backspace overprint otherwise h type h disablewhen set insert command set illegal set noop l insertwhen set nonzero form feed read file always go buffer p pw never output anything except buffer printwhen set negative output output crlf otherwise type p casewhen set nonzero p ignores case r argis explicit numeric argument argument entered r argpdescribes r command td bit argument specified bit number typed bit argument negative r ccolthe comment column r cmacroconverts ascii value n form required r command dispatch r displaywhen set nonzero macro executed whenever r nontrivial redisplay r exit write exit innermost r invocation r echowhen set character read r echoed set echoed printing terminal set echoed terminal r ec sdwhen set nonzero macro executed whenever space command typed used autofilling r enteredwhen set nonzero macro executed whenever r invoked r exptis u count next r mode command r h min read leftmost horizontal position requiring redisplay r hposthe current horizontal position cursor r indirectgiven character follows alias definition find equivalent r inhibitwhen set nonzero r update display set back zero r catch r initreturns initial definition character whose ascii value n r insertinserts argument r lastholds recent character read r r leavewhen set nonzero macro executed whenever r return r markrecords position mark r maxthe maximum number character insertion deletion printed r printing terminal switch printing description change default r mcntthe secretary mode counter r mdlythe secretary mode limit value r mode read nonzero r mode r morewhen positive used r mode line instead top bot nn used environment space mean show next screenful negative xxx displayed r normalwhen set nonzero macro executed normally selfinsert character r parenwhen set nonzero macro executed every character r previousholds previous second recent command r replacewhen set nonzero r run replace mode instead insert mode r ruboutthe internal r rubout routine r scanwhen set nonzero printing terminal use display character moved past r starwhen set nonzero star appears mode line buffer modified r suppresswhen set positive builtin r mode command suppressed character insert r throwreturns control innermost invocation r r unsuppwhen set one character unsuppressed r v min read topmost line requiring redisplay r vposthe current vertical position cursor disablewhen search yank illegal treated like back content appendix e ascii chart character set specified an standard known ascii character set extended include meta character character top eighth bit turned decimaloctalhexgraphicname meaning nul used padding start header start text end text end transmission enquiry acknowledge bell alarm backspace tab horizontal tab line feed vertical tab form feed new page carriage return shift shift data link escape xon device control device control xoff device control device control negative acknowledge synchronous idle end transmission block cancel end medium substitute esc escape alter mode sel file separator g group separator record separator unit separator space blank exclamation mark double quote number sign hash mark dollar sign percent sign ampersand sign quote apostrophe left parenthesis right parenthesis asterisk star sign comma sign dash decimal point dot right slash zero one two three four five six seven eight nine colon semicolon lessthan sign sign greaterthan sign question mark atsign letter alpha letter bravo letter charlie letter delta letter echo letter foxtrot letter golf letter hotel letter india letter jericho letter kappa letter lima letter mike letter november letter oscar letter pappa letter quebec letter romeo letter sierra letter tango letter unicorn letter victor letter whiskey letter xray letter yankee letter zebra left square bracket slash backslash right square bracket caret single back quote grave accent letter alpha letter bravo letter charlie letter delta letter echo letter foxtrot letter golf letter hotel letter india letter jericho letter kappa letter lima letter mike letter november letter oscar letter pappa letter quebec letter romeo letter sierra letter tango letter unicorn letter victor letter whiskey letter xray letter yankee letter zebra left curly brace bar right curly brace del delete rub meta nul used padding soh start header stx start text etx end text eot end transmission enq enquiry ack ackowledge bel bell alarm b backspace ht tab horizontal tab lf line feed vt vertical tab ff form feed new page cr carriage return shift si shift dle data link escape xon device control device control xoff device control device control nak negative acknowledge syn synchronous idle etb end transmission block cancel em end medium sub substitute meta esc escape alter mode sel f file separator meta g group separator r record separator u unit separator meta space meta exclamation mark meta double quote meta number sign hash mark meta dollar sign meta percent sign meta ampersand sign single quote apostrophe meta left parenthesis meta right parenthesis meta asterisk star plus sign meta comma minus sign dash period decimal point dot right slash numeral zero numeral one numeral two numeral three numeral four numeral five numeral six numeral seven numeral eight numeral nine meta colon meta semicolon meta lessthan sign equal sign meta greaterthan sign meta question mark meta atsign uppercase letter alpha uppercase letter bravo uppercase letter charlie uppercase letter delta uppercase letter echo uppercase letter foxtrot uppercase letter golf uppercase letter hotel uppercase letter india uppercase letter jehricho uppercase letter kappa uppercase letter lima uppercase letter mike uppercase letter november uppercase letter oscar uppercase letter pappa uppercase letter quebec uppercase letter romeo uppercase letter sierra uppercase letter tango uppercase letter unicorn uppercase letter victor uppercase letter whiskey uppercase letter xray uppercase letter yankee uppercase letter zebra meta left square bracket left slash backslash meta right square bracket uparrow caret underscore meta single back quote grave acent lowercase letter alpha lowercase letter bravo lowercase letter charlie lowercase letter delta lowercase letter echo lowercase letter foxtrot lowercase letter golf lowercase letter hotel lowercase letter india lowercase letter jericho lowercase letter kappa lowercase letter lima lowercase letter mike lowercase letter november lowercase letter oscar lowercase letter pappa lowercase letter quebec lowercase letter romeo lowercase letter sierra lowercase letter tango lowercase letter unicorn lowercase letter victor lowercase letter whiskey lowercase letter xray lowercase letter yankee lowercase letter zebra meta left curly brace vertical bar meta right curly brace tilde meta del delete rub form used prevent ambiguity decimaloctalhexgraphiccan printed list basic character abcdefghijklmnopqrstuvwxyz abcdefghijklmnopqrstuvwxyz back content bibliography bibliography two part first part list publication used preparation book second part annotated bibliography thesis document marked especially valuable interesting current american national standard institute programming language c new york ansi american national standard institute reference manual ada programming language new york springerverlag isbn apple computer corp human interface guideline apple desktop interface reading massachusetts addisonwesley isbn ibid release macintosh script management system unreleased preliminary cuptertino california apple computer corp brook frederick p mythical manmonth reading massachusetts addisonwesley isbn caplan ralph design lock bathroom door hotel louis xiv object lesson new york mcgrawhill isbn carroll lewis alice adventure wonderland london macmillian co ibid lookingglass alice found london macmillian co crowley terrence forsdick harry landau matt travers virginia diamond multimedia editor usenix proceeding summer finseth craig june theory practise text editing cookbook emacs cambridge massachusetts mit laboratory computer science technical memo hammer michael ilson richard anderson timothy gilbert edward j good michael niamir bahram rosenstein larry schoichet sandor february etude integrated document processing system cambridge massachusetts mit laboratory computer science office automation group memo ilson richard good michael march etude interactive editor formatter cambridge massachusetts mit laboratory computer science office automation group memo jensen kathleen wirth nikalus pascal user manual report new york springerverlag isbn kemeny john g kurtz thomas e back basic reading massachusetts addisonwesley isbn kernighan brian w ritchie dennis c programming language englewood cliff new jersey prenticehall isbn knuth donald e empirical study fortran program software practise experience vol aprilmay p miller webb software tool sampler englewood cliff new jersey prenticehall isbn myers eugene w december simple rowreplacement method tucson arizona department computer science university arizona technical report tr norman donald design everyday thing new york doubleday isbn oman paul w cook curtis r typographic style cosmetic communication acm vol january p phelps hermann craft log building translation holzbaukunst der blockbau ottawa ontario lee valley tool isbn bound pbk qiao jinan qiao yizheng qiao sanzheng sixdigit coding method communication acm vol january p quarterman john matrix computer network conferencing system worldwide bedford massachusetts digital press isbn reid brian k walker janet h scribe introductory user manual pittsburgh pennsylvania unilogic ltd stallman richard gnu emacs manual cambridge massachusetts free software foundation sixth edition version tayli murat alsalamah abdulla building bilingual microcomputer system communication acm vol january p thorell lg smith wj using computer color effectively illustrated reference englewood cliff new jersey prenticehall isbn tufte edward r envisioning information cheshire connecticut graphic press ibid visual display quantitative information cheshire connecticut graphic press usenet news group compeditors compemacs gnuemacs carry editorrelated material thesis bibliography includes many different type document document user manual various editor others describe implementation specific editor still others discus language tradeoff inputoutput system interface grouped type editor refer entry annotated help place perspective emacstype editor four principal implementation emacstype editor enough document justify separate listing emacs ciccarelli eugene introduction emacs editor cambridge massachusetts mit artificial intelligence laboratory mit ai lab memo january primer editor user interface stallman richard emacs extensible customizable selfdocumenting display editor cambridge massachusetts mit artificial intelligence laboratory ai memo june provides argument emacs philosophy ibid structured editing lisp computing survey vol december p response sanderwall paper referenced later online documentation mitai teco tecord detailed command list teco mitai teco teco primer primer teco mitai emacs emacs chart fourpage command list emacs mitai emacs emacs guide detailed user interface manual mitai emacs emacs order detailed command list emacs lisp machine zwei weinreb daniel l moon david january lisp machine manual cambridge massachusetts mit artificial intelligence laboratory user interface zwei ibid january realtime displayoriented editor lisp machine cambridge massachusetts sb thesis mit electrical engineering computer science department zwei work internally multics emacs greenberg bernard publication emacs extension writer guide honeywell information system inc order write extension ibid december emacs text editor user guide honeywell information system inc order user interface ibid march multics emacs experiment computer interaction honeywell information system proceeding fourth annual honeywell software conference summary mepap referenced also mitai bsg nmepap ibid april realtime editing multics cambridge massachusetts honeywell information system inc multics technical bulletin ibid online documentation mitai bsg lmepap lisp chosen implementation language mitai bsg mepap detailed history emacs general multics implementation specific valuable mitai bsg proposal terminal independent video terminal support package mitai bsg ttywin look good bad feature video terminal magicsix tvmacs anderson owen ted january design implementation displayoriented editor writing system cambridge massachusetts sb thesis mit physic department tvmacs work internally concentrate describing editor rather implementation language sine linhart jason june dynamic multiwindow terminal management magicsix operating system cambridge massachusetts sb thesis mit electrical engineering computer science department video terminal management system contains many useful comment terminal independence redisplay problem emacstype text editor section cover editor general user interface emacs eg screenoriented similar key binding extensible otherwise fall noticeably short emacs philosophy finseth craig august vine primer dallas texas texas instrument inc central research laboratory system information science laboratory user interface manual complete novice schiller jeffrey june tore text oriented editing system cambridge massachusetts revised sb thesis mit electrical engineering computer science department online documentation kazar mike user manual fine running carnegiemellon university fine ms prt nonemacs display editor bilofsky walter december crt text editor ned introduction reference manual rand corporation iron e djorup f crt editing system communication acm vol january p joy william april ex reference manual version berkeley california computer science division dept electrical engineering computer science university california berkeley ibid april introduction display editing vi berkeley california computer science division dept electrical engineering computer science university california berkeley kanerva pentti tvguid user guide tecdatamedia tvedit palo alto california stanford university institute mathematical study social science kelly jeanne july guide ned new online computer editor rand corporation kernighan brian w tutorial introduction ed text editor murray hill new jersey bell laboratory technical report macleod november design implementation displayoriented text editor software practice experience vol november p weiner p et al april yale editor e crtbased editing system yale computer science research report seybold patricia b october tymshare augment heralding new era seybold report word processing vol issn seybold publication inc box medium pennsylvania online documentation sail eals doc user manual stanford university structure editor ackland gillian et al ucsd pascal version reference manual san diego california institute information system university california san diego donzeaugouge v huet g kahn g lang b levy jj april structure oriented program editor first step towards computer assisted programming paris iria re rep teitelbaum r cornell program synthesizer microcomputer implementation plcs ithaca new york department computer science cornell university technical report tr editor benjamin arthur j august extensible editor small machine disk storage communication acm vol p talk editor ibm written fortran extensible bourne r january design text editor software practice experience vol p user manual cecil moll rinde march trix ac set general purpose text editing command lawrence livermore laboratory ucid deutsch l peter lampson butler w online editor communication acm vol december p qed user manual fraser christopher w compact portable crtbased editor software practice experience vol february p front end line editor ibid generalized text editor communication acm vol march p applying text editor nontext object hansen w j june creation hierarchic text computer display palo alto california phd thesis stanford university kai joyce moore july text editor design urbana illinois department computer science university illinois urbanachampaign describes internals external editor however design poor one kernighan brian w plauger p j software tool reading massachusetts addisonwesley book chapter lead hand implementing simple line editor ratfor robert teresa l november evaluation computer text editor system science laboratory xerox parc comparative evaluation four text editor quite well done unfortunately include emacs us dec teco instead sanderwall erik programming interactive environment lisp experience computing survey vol march p talk editor interlisp sneeringer james userinterface design text editing case study software practice experience vol p user manual discussion user interface concept teitelman warren october interlisp reference manual palo alto california xerox palo alto research center use interlisp nondisplay structure editor van dam andries rice david e online text editing survey computing survey vol september p contains general introduction problem text editing outdated technology however back content book index index book number course reflect page number book quaint advanced amount approach asynchronous back backward basic redisplay binary breaking button cap card card caret category center changing character command set communication content control constraint core crash cursor left edge custom editor data decimal delete deleting dialog difference display independent dvorak dynamic echo editor electronic empty end error experience amount type extended character external extra shift extra extremely large file fixed flow format forward function glass goal grahical graphic hidden second horizontal ibm image card implementation insert internal interrupting job keyboard key keystroke language laptop large project layout left line linked list long macintoshsee apple marker meaning memory memorymapped model modification mouse multiple nkey neophyte nonprinting nontext filessee binary file normal novice numeric object onedimensional packaging page paged buffer virtual partial physiological placement positional power prefix print programmerlevel proportionally spaced real record regular religion right ruler screen scroll second level system selection serial shift shift short special function spinal standard system text start state status string structure structured suffix sun suspend system text text structure threefile touch sensitive twodimensional typeability type typing unique universal unix user useroriented virtual visible window word zerolength
321,Lobsters,emacs,Emacs editor,EXWM (Emacs X Window Manager) is a tiling X window manager for Emacs,https://github.com/ch11ng/exwm/wiki,exwm emacs x window manager tiling x window manager emacs,exwm user guide note exwmgnomeflashback logging lxde note prerequisite installation install gnu elpa install source xelb note bootstrap example configuration note convention note keybindings global key binding local key binding simulation key note buttonrelated key binding layout mode note workspace x window handling among workspace note note autohide minibuffer echo area note emacs frame workspace emacs hang randr multiscreen compositing manager system tray note one last thing appendix faq report bug issue tracker remember redact content buffer posting might contain private information eg window buffer name efficiency concurrency send input stuck send term note simulation key note note simulation key make focus follow mouse font size small hidpi display archwiki java application drawing properly wayland port status bar symon set default known issue issue caused singlethreaded nature emacs unable resize x window dragging right edge minor issue related autohide echo area issue issue http desktopsavemode save exit logging lxde arch linux wiki note issue caused using issue xmodmap http githubcomkozikowkeyremaplinux http githubcomsnyballhawck android emulator window flickering tiling mode issue screen tearing compton picom configuration value public interface list commandsfunctions list user option list global variable user option list bufferlocal variable contributing significant change thirdparty extension helmexwm gpastel gpaste desktopenvironment edit exwm changelog,exwm user guide guide serf introduction new user exwm well reference advanced user mainly discus major conception usage configuration exwm updated accordingly exwm evolves please consider helping improve document note tiling window manager like exwm usually configured standalone application without desktop environment session manager however possible substitute window manager certain desktop environment eg lxde exwm even recent gnome eg exwmgnomeflashback content document still apply look section logging lxde note exwm provides customize interface configuration option discussed also available prerequisite specific prerequisite indeed easily satisfied gnu emacs version higher preferably higher version also build build withwideint set preferred probably hide menubar toolbar scrollbar etc make room x window server recent version please optional dbuslaunch optional gnomesettingsdaemon setting daemon installation install gnu elpa install exwm dependency simply invoke mx packageinstall ret exwm ret install source first checkout code xelb exwm add source directory loadpath like addtolist loadpath pathtoxelb addtolist loadpath pathtoexwm note emacs user install clgeneric package gnu elpa well bootstrap impatient might start trying exwm following minimal step revisit document later tweak exwm decide use also example configuration might find useful starting point add following line emacs require exwm require exwmconfig exwmconfigdefault link copy xinitrc source directory xinitrc start exwm console eg note use exwmconfigdefault emacs customized configuration p new user often wonder properly launch application exwm answer nt matter exwm serious x window manager know correctly launch application shellcommand though block emacs therefore freeze exwm defaultexample configuration provides conveniently convention section discus convention make clear going rest document note exwm must enabled exwmenable already taken care exwmconfigdefault first emacs frame spawned thus add exwmenable emacs always safe call exwmenable exwm complain unable start another window manager also possible start exwm emacs daemon emacs daemon f exwmenable x window document exclusively refers toplevel x window created application application may create multiple x window exwm manages respectively exwm see merely toplevel x window care application creates exwmmode major mode provided exwm manage x window buffer created exwmmode record information corresponding x window exwmmode also provides useful feature interact x window thing dedicated exwmmode buffer said local otherwise global exwmmode buffer two input mode linemode charmode phrase borrowed ansimode define key event processed linemode exwm intercept key event sends application key explicitly assigned whereas charmode exwm interception responds globally grabbed key sequence exwmmode buffer created linemode default discus switch input mode later every exwmmode buffer also major mode menu command feature accessible however limitation access buffer use referencereminder rather totally relying tiling x window manger exwm manages x window tiling layout default however x window explicitly requires exwm alternatively manage floating stacking layout several way user switch layout x window discussed later document keybindings exwm keyboarddriven x window manager thus great importance understand key event representation learn specifymodify key binding fortunately exwm us syntax emacs denote key event feel quite comfortable configure besides rather simple find representation key event evaluating readkey readevent sure emacs exwm us key sequence key short rather single key event make key binding indeed key sequence exwm registered either global local keymaps like normally done emacs exwm forward key sequence emacs originally intended x window one thing worth mentioning super modifier key key sequence consisting modifier key least usually unusable emacs working x window manager however exwm full access key sequence though might still rare exception like ctrl alt modifier key frequently used document global key binding global key binding available linemode charmode even work normal buffer take account make global key binding global key binding defined customizing exwminputglobalkeys default global key biding key binding following table recommended however key command remark sr exwmreset switch linemode exit fullscreen mode refresh layout sw exwmworkspaceswitch interactively switch workspace sn exwmworkspaceswitchcreate n switch workspace n n digit decide set exwminputglobalkeys directly example setq exwminputglobalkeys sr exwmreset sw exwmworkspaceswitch mapcar lambda kbd format lambda interactive exwmworkspaceswitchcreate numbersequence local key binding local key binding available linemode way make local key binding modify exwmmodemap eg definekey definekey exwmmodemap cq exwminputsendnextkey defining local key prefixed cc allowed use letter remaining sequence key considered modespecific reserved either exwm minor mode list modespecific key currently found exwm key command remark cc cf exwmlayoutsetfullscreen enter fullscreen mode cc ch exwmfloatinghide hide floating x window cc ck exwminputreleasekeyboard switch charmode cc cm exwmworkspacemovewindow move x window another workspace cc cq exwminputsendnextkey send single key x window prefixed cu send multiple key cc ct cf exwmfloatingtogglefloating toggle tiling floating mode cc ct cm exwmlayouttogglemodeline toggle modeline following snippet used completely disable modespecific key definekey exwmmodemap kbd cc nil simulation key simulation key exploit local key binding map one key sequence another send x window predefined simulation key exwm one may customize exwminputsimulationkeys easily define one may also set value directly setq exwminputsimulationkeys cb left cf right cp cn ca home ce end mv prior cv next cd delete ck send delete example enables emacslike lineediting key normal application likewise one use eg cc cq cv send ctrl v since mapped next pgdn note simulation key currently sent using sendevent x request work minority application configured accept synthetic event however example enable allowsendevents x resource xterm achieve simulation key defined exwminputsimulationkeys shared among application make x windowspecific ie bufferlocal exwminputsetlocalsimulationkeys used instead example following line disable simulation key firefox addhook exwmmanagefinishhook lambda exwmclassname string exwmclassname firefox exwminputsetlocalsimulationkeys nil buttonrelated key binding buttonrelated key binding used movingresizing x window currently two use case key variable remark exwminputmoveevent move x window exwminputresizeevent resize x window may change behavior setting corresponding variable sure include buttondown event eg key sequence make sense layout mode three layout mode supported exwm ie tiling floating inaccurately fullscreen nothing special tiling mode x window shown underlying buffer displayed use cx b cx cx cx whatever normally use switch buffer resize emacs window floating mode bit different extra emacs frame created hold x window default floating x window moved resized holding dragging mouse alternatively move window exwmfloatingmove resize exwmlayout enlarge shrink window horizontally default bound note x window automatically made floating whenever appropriate eg application explicitly request unless exwmmanageforcetiling set nonnil regard fullscreen third layout mode x window either tiling floating mode made fullscreen explicitly invoking cc cf x window provides approach typically like pressing clicking certain menu entry also work one leave fullscreen mode versatile exwmreset workspace exwm support workspace created removed onthefly exwm default creates initial workspace may change number eg setq exwmworkspacenumber exwmworkspaceswitch called argument allows switch workspace interactively provided prompt like switch indicates currently working workspace index zerobased may switch another workspace pressing corresponding index moving lineediting key followed return exwmworkspaceswitch optionally accepts argument directly switch target workspace several way add andor remove workspace workspace related command exwmworkspaceswitch called interactively provide prompt including tag may press create empty workspace end remove selected workspace command exwmworkspaceswitchcreate similar toexwmworkspaceswitch automatically creates missing workspace given outofrange index command exwmworkspaceaddexwmworkspacedelete allow adddelete workspace certain position called interactively exwmworkspaceadd add workspace end switch whereas exwmworkspacedelete deletes current workspace emacs frame key prefixed cx also provide way manage workspace however since kind emacs frame exwm used floating x window careful mess workspace moved another position exwmworkspacemove position two workspace interchanged exwmworkspaceswap x window handling among workspace x window moved another workspace cc cm exwmworkspacemovewindow x window another workspace brought current one exwmworkspaceswitchtobuffer note exwm show x window belonging current workspace default may alter behavior assigning exwmworkspaceshowallbuffers nonnil value also might want set exwmlayoutshowallbuffers allow automatically moving x window inactive workspace switching associated buffer note supposed move floating x window exwmlayoutshowallbuffers nonnil autohide minibuffer echo area normal emacs frame minibuffer echo area sharing miniwindow fixed bottom workspace default detached automatically shownhiddenresized setting exwmworkspaceminibufferposition either bottom top indicates position minibuffer echo area appear minibuffer shown entered hidden exited echo area shown new message hidden certain amount time controlled exwmworkspacedisplayechoareatimeout second autohide minibuffer echo area attached back exwmworkspaceattachminibuffer detached exwmworkspacedetachminibuffer note exwmworkspaceattachminibuffer requires dockpanel place work example exwmworkspaceminibufferposition set bottom nt dockpanel bottom screen want attach autohide minibuffer echo area emacs frame workspace exwm creates new workspace every new emacs frame otherwise emacs hang randr multiscreen randr support optional disabled default enable add following code emacs require exwmrandr setq exwmrandrworkspaceoutputplist addhook exwmrandrscreenchangehook lambda startprocessshellcommand xrandr nil xrandr output leftof auto exwmrandrenable second line actually configures multiple screen support variable exwmrandrworkspaceoutputplist property list form find list output name together info invoking xrandr utility argument third line put output left automatically resizes screen every time monitor attacheddetached please refer xrandr detailed usage xrandr looking automated behavior enable connected external screen automatically revert internal screen disconnection example added exwmrandrscreenchangehook defun exwmchangescreenhook let xrandroutputregexp n connected defaultoutput withtempbuffer callprocess xrandr nil nil gotochar pointmin researchforward xrandroutputregexp nil noerror setq defaultoutput matchstring forwardline researchforward xrandroutputregexp nil noerror callprocess xrandr nil nil nil output defaultoutput auto callprocess xrandr nil nil nil output matchstring primary auto output defaultoutput setq exwmrandrworkspaceoutputplist list matchstring compositing manager exwm support thirdparty compositing manager builtin one longer provided system tray exwm provides simple system tray disabled default enabled following line require exwmsystemtray exwmsystemtrayenable note system tray displayed active workspace one last thing exwm make x window manager must tell x first xinitrc put line launch emacs x start alternatively want run daemon exec emacsclient c want leave exwmenable config harm anyway emacs daemon f exwmenable exec emacsclient c sometimes disable access control prepending line file get protocol specified error xhost si localuser user exwm launched console indicates starting x quitting exwm easy emacs cx cc perhaps also restart exwm place exwmrestart appendix faq report bug make sure using updated code including xelb check issue tracker see whether reportedfixed insert following snippet emacs comment second line bug make emacs frozen use cg quit setq debugonerror setq debugonquit setq edebugallforms turn exwmdebug minor mode try reproduce result would xelbdebug buffer use cc cd ct toggle debugging cc cd cm clear entire log cc cd cm add mark l current log position try reproducing issue minimal configuration emacs q eval progn packageinitialize require exwmconfig exwmconfigdefault open issue descriptive title bug label selected following content detailed description problem perhaps content backtrace xelbdebug buffer remember redact content buffer posting might contain private information eg window buffer name minimal step reproduce possible cause problem like special configuration emacs version architecture ui toolkit system info x server version xorg version efficiency concurrency xelbexwm efficient enough handle transaction also run concurrently send keyboardquit cg input stuck switch tty send signal specified debugonevent default emacs process instance pkill emacs make sure kill emacsclient run send cc term cc frequently used terminal emulator since default prefix key exwm wo nt get received application normally workarounds use ansiterm instead work terminal emulator charmode use exwminputsendnextkey bound cc cq default send cc note see also simulation key note xterm configure exwm send cc cc cc example xterm addhook exwmmanagefinishhook lambda exwmclassname string exwmclassname xterm exwminputsetlocalsimulationkeys cc cc cc note approach work emacs due bug emacs fixed emacs note see also simulation key note xterm make focus follow mouse need set mouseautoselectwindow focusfollowsmouse loading exwm ie setq mouseautoselectwindow focusfollowsmouse packageinitialize require exwm font size small hidpi display x window manager issue please refer archwiki fix problem java application drawing properly java assumes wms reparent x window make java application aware exwm nonreparenting wm please add following line xinitrc export wayland port perhaps emacs wayland port first wayland also network protocol implemented elisp library like xelb indeed made unpublished poc code little turn possible implement wayland compositor server pure elisp find workaround status bar exwm provide status bar known run well together xfpanel dzen put something like xinitrc watch date dock p exec emacs alternatively emacs various modeline minibuffer monitor builtins displaytime displaybatterymode symon package set default input mode charmode simply setq exwmmanageconfigurations charmode known issue issue caused singlethreaded nature emacs exwm run concurrently true event loop emacs blocked however emacs currently singlethreaded seems inevitable situation especially emacs try display ui widget widget menu overrideredirect set may chance work widget like dialog box probably work would keep waiting response x window manager unfortunately exwm would blocked time workaround issue avoid use feature turn textbased alternative instance menu accessed unable resize x window dragging right edge issue occurs nonfloating x window used resize emacs window way please enable windowdividermode workaround setq windowdividerdefaultrightwidth windowdividermode minor issue related autohide echo area autohide echo area activated certain circumstance emacs default echo keystroke echo area slow input seems way detect behavior autohide echo area feature may cause problem user disable keystroke echoing setting echokeystrokes tooltipmode disabled emacs display tooltips echo area hard detect encouraged keep tooltipmode enabled default behavior use autohide minibuffer feature note always use exwmworkspaceattachminibuffer exwmworkspacedetachminibuffer temporarily pin echo area also minibuffer issue idomode switching buffer exwmmode currently displayed another workspace frame idomode would raise workspace instead displaying buffer selected emacs window probably unwanted behavior disabled adding exwmenableidoworkaround emacs issue ediff ediff graphical display creates new frame exwm open new frame workspace result see window displaying source file one workspace ediff control panel new workspace also notice ediff control panel filled workaround issue two mean customize ediff open ediff control panel new window instead new frame setq ediffwindowsetupfunction ediffsetupwindowsplain modify withevalafterload ediffwind setq ediffcontrolframeparameters con unsplittable ediffcontrolframeparameters use option prefer ediff control panel floating frame rather emacs window cf http desktopsavemode save exit depends fire emacs eg daemon cx cc bound savebufferskillterminal exit client daemon latter might forcekilled time run hook killemacshook desktopkill among others simple fix call savebufferskillemacs instead globalsetkey kbd cx cc savebufferskillemacs logging lxde standard way close emacs cx cc savebufferskillterminal running exwm lxde however work since closing emacs afaik allow close lxde cleanly running lxsessionlogout hand give emacs time cleanly close arch linux wiki suggests use function logout defun exwmlogout interactive recentfsavelist savesomebuffers startprocessshellcommand logout nil lxsessionlogout bookmark saved exit emacs also run number function attached killemacshook default also save bookmark exit unknown whether arch linux wiki function see run killemacshooks save bookmark adding bookmarksave function theory solve problem case probably logout process kick quickly give emacs enough time perform command make question whether command always time complete way around run function defun exwmlogout interactive bookmarksave recentfsavelist savesomebuffers add anything else want logging calling lxsessionlogout binding function emacs way usually run program lxde step process assures emacs time complete command properly problem bookmark another option simply save bookmark mx bookmarksave customize variable bookmarksaveflag use arch linux wiki function personally remain worried command may always successfully complete logout prefer step method note tried playing exwmexithook know whether adding bookmarksave would work whether lxde logout process would still interfere command properly executed issue caused using withxtoolkitathena xcape reported remapping key xcape work correctly using emac withxtoolkitathena toolkit solved using toolkit building emacs example withxtoolkitno withxtoolkitgtk issue xmodmap found long delay response xmodmap used changing keyboard mapping xmodmap inefficient handling file many line built around xlib would make individual call xchangekeyboardmapping synchronous effective line beginning keycode may noticeable c implementation really challenge xelb addition xmodmap xcape mentioned wo nt work console neither virtual machine guest vmware two better alternative work every need specify hardware id http githubcomkozikowkeyremaplinux http githubcomsnyballhawck android emulator window flickering tiling mode android emulator wrongfully detected able work tiling mode select window press cc ct cf enable floating mode force created floating mode following configuration setq exwmmanageconfigurations stringmatchp android emulator exwmtitle floating issue screen tearing encounter issue screen tearing one possible way deal install compositor like compton picom couple configuration value set order try mitigate adding forcefullcompositionpipeline nvidia user nvidia graphic card adding configurating compositor help screen tearing may able turn forcefullcompositionpipeline deal parameter need add setupspecific general three thing need amount monitor use identifier monitor offset monitor find running xrandr command screen minimum x current x maximum x connected primary normal left inverted right x axis axis x identifier offset connected normal left inverted right x axis axis x identifier offset disconnected normal left inverted right x axis axis disconnected normal left inverted right x axis axis disconnected normal left inverted right x axis axis disconnected normal left inverted right x axis axis disconnected normal left inverted right x axis axis two monitor connected identifier offset marked snippet case mean monitor offset monitor offset information need open config file usually located nt one yet simply create name file matter long intuitive paste following code section device identifier nvidia card driver nvidia vendorname nvidia corporation option nologo true option triplebuffer true endsection need option metamodes triplebuffer option take following shape option metamodes id monitor nvidiaautoselect offset monitor forcefullcompositionpipeline add multiple monitor simply concatenating case would option metamodes nvidiaautoselect forcefullcompositionpipeline nvidiaautoselect forcefullcompositionpipeline whole config file look similar section device identifier nvidia card driver nvidia vendorname nvidia corporation option nologo true option triplebuffer true option metamodes nvidiaautoselect forcefullcompositionpipeline nvidiaautoselect forcefullcompositionpipeline endsection done restart pc change take effect public interface section contains list public interface might find useful customizing exwm please refer documentation detail list commandsfunctions exwmconfigexample exwmconfigido exwmconfigmisc exwmdebuglogtime exwmdebugloguptime exwmenable exwmexit exwmfloatinghide exwmfloatingmove exwmfloatingtogglefloating exwminit exwminputgrabkeyboard exwminputreleasekeyboard exwminputsendnextkey exwminputsendsimulationkey exwminputsetkey exwminputsetsimulationkey exwminputsetsimulationkeys exwminputtogglekeyboard exwmlayoutenlargewindow exwmlayoutenlargewindowhorizontally exwmlayouthidemodeline exwmlayoutsetfullscreen exwmlayoutshowmodeline exwmlayoutshrinkwindow exwmlayoutshrinkwindowhorizontally exwmlayouttogglefullscreen exwmlayouttogglemodeline exwmlayoutunsetfullscreen exwmrandrenable exwmrandrrefresh exwmreset exwmrestart exwmsystemtrayenable exwmworkspaceadd exwmworkspaceattachminibuffer exwmworkspacedelete exwmworkspacedetachminibuffer exwmworkspacemove exwmworkspacemovewindow exwmworkspacerenamebuffer exwmworkspaceswap exwmworkspaceswitch exwmworkspaceswitchcreate exwmworkspaceswitchtobuffer exwmworkspacetoggleminibuffer exwmximenable list user option exwmblockingsubrs exwmdebuglogtimefunction exwmexithook exwmfloatingbordercolor exwmfloatingborderwidth exwmfloatingexithook exwmfloatingsetuphook exwminithook exwminputglobalkeys exwminputinputmodechangehook exwminputlinemodepassthrough exwminputmoveevent exwminputprefixkeys exwminputprepostcommandblacklist exwminputresizeevent exwminputsimulationkeys exwmlayoutautoiconify exwmlayoutshowallbuffers exwmmanageconfigurations exwmmanagefinishhook exwmmanageforcetiling exwmmanagepingtimeout exwmrandrrefreshhook exwmrandrscreenchangehook exwmrandrworkspacemonitorplist exwmreplace exwmsystemtraybackgroundcolor exwmsystemtrayheight exwmsystemtrayicongap exwmupdateclasshook exwmupdatetitlehook exwmworkspacedisplayechoareatimeout exwmworkspaceindexmap exwmworkspacelistchangehook exwmworkspaceminibufferposition exwmworkspacenumber exwmworkspaceshowallbuffers exwmworkspaceswitchcreatelimit exwmworkspaceswitchhook exwmworkspacewarpcursor list global variable user option exwmmodemap exwmworkspacecurrentindex list bufferlocal variable exwmclassname exwminstancename exwmstate exwmtitle exwmtransientfor exwmwindowtype contributing xelb exwm dualhosted github gnu savannah gnu emacs developer may bypass make change project directly keep repository sync however due copyright issue accept significant change developer want contribute though still several option complete copyright assignment paperwork become gnu contributor instead implementing feature may introduce idea might well present draft implementation reimplement later note copyright restriction apply minor change modification wiki page thirdparty extension helmexwm helm source function browsing switching exwm buffer gpastel emacs package gpastel make sure every copied text gpaste also emacs killring using exwm emacs x window manager gpastel make possible user use killring external application desktopenvironment package let control computer standard key example raise brightness raise volume print take screenshots sl lock screen edit exwm allows edit thing separate emacs buffer changelog brief record major change made release new support accessing keymaps charmode exwminputinvokefactory support customizing systemtray background color exwmsystemtraybackgroundcolor new hook run input mode change exwminputinputmodechangehook major fix various display issue menubarmodetoolbarmode winnermode working properly exwmmode buffer new randr module support monitor mirroring various user option improved major fix xim module drop key new hook afterfocuschangefunction triggered key combination corresponding emacs event one likely work systemtray floating x window positioned incorrectly menubartoolbar enabled impossible answer question emacs charmode false positive application responding alert new new exwmxim module using emacs builtin input method x window keep autohide echo area displayed input received major fix user customized option overridden exwmconfigdefault x window started exwm lose input focus new support randr monitor new exwmrandrrefresh public interface exwm automatically adjusts screen change initiated external tool support managed perapplication configuration allow user specify whether manage x window major fix start single workspace may fail keyboard grab state restored enteringexiting full screen mode floating x window may incorrectly stacked tiling one performance degradation triggering global keybinding new support making binding button event new exwmdebug minor mode debugging major fix x window occasionally rendered wrong workspace x window active workspace occasionally rendered new allow specifying initial workspace application automatically warp cursor switching workspace exwmworkspacewarpcursor major fix local simulation key inaccessible linemode incompatible xorg server full screen x window hidden switching buffer x window properly rendered resizing new add support replacing replaced window manager exwminit exwmexit also used manually startstop exwm customize interface support customizing global key add perapplication support tweaking initial state individual application accessed via exwmmanageconfigurations user option modespecific key enabled default without need add prefix key exwminputprefixkeys exwmworkspaceswitch exwmworkspaceswitchcreate exwmworkspacemove exwmworkspacemovewindow support prefix argument major fix x window hidden switching workspace fullscreen x window misbehaves switching workspace displaybufferinsidewindow working x window new make exwm nonreparenting window manager result thirdparty compositing manager supported builtin one exwmcm thus deprecated add new customize interface accessing feature accessed via mx customize ret selecting application exwm add support focus follows mouse requiring mouseautoselectwindow focusfollowsmouse set add support inputdecodemap localfunctionkeymap keytranslationmap used tweaking linemode add support displaying floating x window workspace setting netwmdesktop major fix wrong contextmenu position firefox global key updated keyboard update dock accessible quitting fullscreen mode emacs crash resizing widthheight floating x window
322,Lobsters,emacs,Emacs editor,An Helm front-end for Lobste.rs,https://github.com/julienXX/helm-lobste.rs,helm frontend lobster,join github today sign file permalink topic resource reload reload,helm frontend lobster dismiss join github today github home million developer working together host review code manage project build software together sign file permalink failed load latest commit information type name latest commit message commit time helm frontend lobster topic resource perform action time signed another tab window reload refresh session signed another tab window reload refresh session
323,Lobsters,emacs,Emacs editor,"RMS Feels There's ""A Systematic Effort To Attack GNU Packages""",http://www.phoronix.com/scan.php?page=news_item&px=RMS-Emacs-Gud-LLVM,rms feel systematic effort attack gnu package,adding basic lldb support gudel lldb excited lldb linux lldb also making way window writing,richard stallman come support basic llvm debugger lldb support within emacs gudel equates attack gnu package andrew moore friday posted mailing list thread adding basic lldb support gudel grand unified debugger mode running gdb debugger proposed patch small would make possible use lldb debugging developing within emacs linux game developer others excited lldb linux offering better easier debugging experience gnu gdb debugger provides least lower barrier entry lldb also making way window patch proposal gudel adding basic lldb support stripping gdb support adding bunch llvm code emacs anything along line supporting lldb alternative debugger richard stallman responded work writing look like systematic effort attack gnu package gnu project need respond strategically mean gnu package cooperate attack please install change talk moore list find situationother emacs stakeholder responded confusion could systematic effort attack gnu package also raised point emacs support microsoft window o x would nt consider basic patch enabling lldb debugger used stallman followed say similar case neither window macos intended push major gnu package use see appears possibly exactly whether case want find pressured criticized situation rms responded mailing list question small part big issue le bad want find think please ask rush conclusion without finding happening thing stand morning llvm lldb debugger support nt added emacs gudel even though basic support alternative gdb richard seemingly frightened compiler competition llvm permissive free software license
324,Lobsters,emacs,Emacs editor,Emacs Major Mode for Sequence Diagrams,https://github.com/josteink/wsd-mode,emacs major mode sequence diagram,wsdmode wwwwebsequencediagramscom travisci buildpage wsdmode explained two screenshots feature issue installation usage websequencediagramscom keybindings websequencediagramscom customization http wwwwebsequencediagramscom orgbabel demoorg flycheck companymode planned feature,wsdmode wsdmode emacs majormode wwwwebsequencediagramscom travisci buildpage buildstatus wsdmode explained two screenshots model process simple sequencescripts like get pretty diagram like generated sound interesting want know work feel free read along feature majormode provides following feature proper syntax highlighting standard wsd syntax almost feature complete syntax proonly feature see issue indentation based nested construct alternative path support running emacs gui terminal autogenerating diagram based source inline rendering emacs frame possible fallback o browser viewing critical feature unavailable orgbabel support use wsd language companymode support limited flycheck support installation wsdmode installed package marmalade melpa melpa stable installation melpa development snapshot always latest version version available marmalade melpa stable match stable version released le frequent interval install package simply start emacs issue following command mx packageinstall ret wsdmode ret usage using wsdmode easy either create new buffer activate using mx wsdmode open new file wsd extension file wsd extension wsdmode activated automatically mode active type along would otherwise websequencediagramscom keybindings keyaction cc cc build diagram display inline emacs possible cc ce export diagram show online websequencediagramscom customization customizable option available normal emacs customize framework mx customizegroup ret wsdmode briefly default variable customized wsdbaseurl default http wwwwebsequencediagramscom url inhouse wsd installation wsdapikey default blank required premiumfeatures wsdformat default png svg requires premium thus apikey wsdstyle default modernblue wsdindentoffset default wsdfontlockkeywords wsdmode support three different fontification level keywords keywords operator keywords operator variable default orgbabel usage orgbabel create beginsrc block wsd language use cc cc evaluate code write diagram disk putting result block optionally use file parameter argument use hardcoded filename instead one generated automatically fly exporting orgdocument html similar ce cc h wsdmode code included document instead rendered diagram see demoorgfile concrete example recommended inspect file emacs github flycheck wsdmode limited support flycheck flycheck general checking type providing realtime feedback wsdmode update errorlist upon scriptcompilation mean using flycheck incur extra processing cost therefore flycheck installed also activated automatically whenever wsdmode due implementation may subject change future companymode wsdmode support companymode completion enable way usually enable initel addhook wsdmodehook companymode currently completion keywords participant supported planned feature following feature considered may eventually implemented autoinsertmode integration websequencediagramcom accountintegration
325,Lobsters,emacs,Emacs editor,Stack Exchange for Emacs,https://github.com/vermiculus/sx.el/,stack exchange emacs,sx stack exchange emacs feature viewing question question list question answer inbox installation authenticating sample keybindings standard prefix key endless parenthesis contributing waffle board resource icon,sx stack exchange emacs sx fullfeatured stack exchange mode gnu emacs using official api provides versatile experience stack exchange network within emacs feature always ch definitive resource functionality highlight viewing question question list view question one sxtab command translate roughly different tab view official site implemented tab include sxtaballquestionsall question sxtabunansweredu unanswered question sxtabunansweredmytagsu unanswered question followed tag sxtabfeaturedf featured question sxtabstarred starred question sxtabfrontpageh frontpage site sxtabmetaormainm toggle meta main site sxtabnewestn newest question first sxtabtopvotedv highestscoring question first sxtabweekw hot question week inside sx buffer switch tab typing followed key listed tab also use sxtabswitch switch tab completion open list question customize ordering list key include n pnavigate list j knavigate viewing question separate buffer sswitch site vvisit thingatpoint browser wcopy thingatpoint usually link u dupvote downvote retopen question buffer question answer u dupvote downvote question answer comment point aadd answer eedit question answer comment usual rule apply star question kdelete questionanswercomment able wcopy code point inbox sxinboxview inbox retvisit inbox item installation sx available melpa stable release development version found install via package menu run mx packageinstall ret sx ret authenticating going askingansweringcommentingupvotingdownvoting etc must use sxauthenticate provide sx authentication token act behalf authentication redirected project page page prominently display authentication token keep secret good password far stackexchange concerned copy paste token prompt emacs sx store authentication token plain text sx folder emacsd please take step necessary protect security account token good password sample keybindings usepackage require usepackage usepackage sx config bindkeys prefix cc prefixmap mysxmap prefixdocstring global keymap sx q sxtaballquestions sxinbox sxopenlink u sxtabunansweredmytags sxask sxsearch standard prefix key shamelessly stolen endless parenthesis defineprefixcommand launchermap globalsetkey kbd sl launchermap definekey launchermap qq sxtaballquestions definekey launchermap qi sxinbox definekey launchermap qo sxopenlink definekey launchermap qu sxtabunansweredmytags definekey launchermap qa sxask definekey launchermap q sxsearch contributing please help contribute following help u immensely better view open issue take look lovely waffle board feel free take torch anything backlog ready thought issue hesitate chime see also contributingorg resource icon sx explicit need icon although standard svg file gathered resource anyone would fancy crack
326,Lobsters,emacs,Emacs editor,Literate DevOps,http://www.howardism.org/Technical/Emacs/literate-devops.html,literate devops,many option literate programming,instead opening terminal virtual machine pop emacs load note file create new header enter shell ruby command text file good unlike traditional terminal allows log document execute command instance screenshot section emacs buffer old bear little brain prose explain background purpose command clicking hyperlink refreshes memory previous discovery keychord executes code yes execute command within emacs hitting cc cc controlc twice run code based language example run shell result placed back file used code block many option instance first half section downloading gpg key repository url placed property shared among code block section shell script block center screenshot us wget download html index file parse extract key file url ruby script parsing since script may bit hairy define another code block one technique literate programming idea one code block inserted another block reference name within double angle bracket donald knuth called feature web since accidentally conflict language like ruby default turn block noweb parameter ruby script separate rubyspecific code block allows turn ruby magic emacs muster last step take url produced first script feed another shell script call wget download keylist name original code block well name result assign list result variable list shell script would access list example demonstrated literate programming weave code data different language
327,Lobsters,emacs,Emacs editor,Gambit in Emacs in the browser,https://feeley.github.io/gambit-in-emacs-in-the-browser/,gambit emacs browser,,
328,Lobsters,emacs,Emacs editor,Getting Organized with Org Mode,http://correl.phoenixinquis.net/2014/11/25/getting-organized-with-org-mode.html,getting organized org mode,project management org mode column view organizing note code exercise structure interpretation computer program babel exporting publishing document sicp note dropped site jekyll graphviz mscgen plantuml emacs configuration emacs configuration making emacs work sacha chua emacs configuration published document tinkering sensitive configuration tracking habit agenda habit repetitive task keeping journal tracking work capture track time task work conclusion sacha chua blog john wiegley,using emacs org mode nearly year mostly used take organize note time discovered incredibly useful tool managing project task writing publishing document keeping track time todo list maintaining journal project management using org mode breaking large project work task subtasks really easy enter project hierarchy task task grouping using column view able dive right scoping individually reporting total estimate major segment work org mode make building modifying outline structure like quick easy usually build modify project org document planning team done manually load information issue tracker get underway occasionally also update tag progress status org document well project progress use document plan subsequent development iteration organizing note code exercise recently looking various way get thing organized org mode stepping structure interpretation computer program folk work discovered org mode ideal fit keeping note exercise work together latter neatly managed babel let embed edit source example excercise solution right org document even export one scheme file load interpreter exporting publishing document publishing note org also breeze published project plan proposal pdf share colleague exported sicp note html dropped site built jekyll embedding graph diagram exported document using graphviz mscgen plantuml also really helped putting together great project plan documentation lot great example using tool found emacs configuration learning cool thing could org mode babel natural end using reorganize emacs configuration point managing configuration single initel file plus directory full mode purposespecific elisp file loop load inspired primarily blog post making emacs work later others sacha chua emacs configuration got configs neatly organized single org file get loaded startup found make far easier keep track got configured give reason document organize thing neatly living double life published document github still got directory lying around autoloaded script simply reserved tinkering sensitive configuration tracking habit another great feature org mode taking advantage lot lately agenda defining org file agenda file org mode examine file todo entry scheduled task deadline build useful agenda view get quick handle need done first started simply syncing google calendar orgfiles using started managing todo list dedicated org file adding task file scheduling setting deadline much better job keeping track thing need get done even importantly need get done work oneshot task also habit repetitive task possible schedule task done every day every day maybe every first sunday month example set repeating task write blog post least month practice guitar every two three day dish every one two day agenda view even show small colorized graph next repeating task paint picture well getting task done time keeping journal tracking work last thing using still getting handle using capture take store note keep journal even track time task work setq orgcapturetemplates j journal entry plain filedatetree orgjournalorg unn emptylinesbefore w log work task entry filedatetree orgworklogorg todo description gn nnadded u clockin clockkeep globalsetkey kbd cc c orgcapture setq orgclockpersist history orgclockpersistenceinsinuate journal configured capture template use write new entry stored time stamp appended org file organized headline year month date work task another capture template configured log tag task another org file also organized date automatically start tracking time task done simply clock check time spent easily find later clock add note update status help keep track gotten done day keep note point time get better idea long take different type task conclusion lot done org mode scratched surface simple outline format provided org mode lends sort thing organizing note keeping private work journal writing book technical document even written blog post org mode ton functionality built top yet underlying format remains simple easy work never great keeping organized org mode delight use help trying anyway work maybe work ton resource finding new way using org mode still discovering cool thing track integrate definitely recommend reading sacha chua blog well post john wiegley always looking stuff try feel free drop line find using something think cool useful
329,Lobsters,emacs,Emacs editor,syl20bnr/spacemacs · Emacs advanced Kit focused on Evil-mode,https://github.com/syl20bnr/spacemacs,emacs advanced kit focused evilmode,philosophy screenshots documentation contribute achievement faq quick install table content introduction feature great documentation beautiful gui excellent ergonomics mnemonic key binding battery included convention documentation general documentation quick start guide faq getting help gitter chat gitter chat irc server prerequisite emacs linux distros note build source macos homebrew emacsplus install process osx layer dotfile osx layer documentation window project stable build stack overflow platinum searcher install default installation source code pro faq alternate installation modify home environment variable modify spacemacsstartdirectory variable spacemacs logo change logo unity download icns version logo change logo dock update automatic update master branch manual update master branch develop branch revert specific version update either manually automatically advised update package clicking button spacemacs home buffer quote quote ashnur quote deuill contribution contribution guideline convention community license spacemacs logo nasser alshammari creative common attributionsharealike international license supporting spacemacs gitter chat spacemacs shop bountysource paypal badge,philosophy screenshots documentation contribute achievement faq quick install git clone http emacsd table content introduction spacemacs new way experience emacs sophisticated polished setup focused ergonomics mnemonic consistency clone launch press space bar explore interactive list carefullychosen key binding also press home buffer button great first key binding try spacemacs used naturally emacs vim user even mix two editing style switching easily input style make spacemacs great tool pairprogramming spacemacs currently beta contribution welcome feature great documentation access documentation emacs spc h spc beautiful gui love distraction free ui functional modeline excellent ergonomics key binding accessible pressing space bar altm mnemonic key binding command mnemonic prefix like spc b buffer command spc p project command battery included discover hundred readytouse package nicely organised configuration layer following set convention documentation comprehensive documentation available layer pressing spc h spc also check general documentation quick start guide faq getting help need help ask question gitter chat member community help prefer irc connect gitter chat irc server join channel prerequisite emacs spacemacs requires emacs development version emacs time writing officially supported nevertheless expected work mode require thirdparty tool install via favorite package manager linux distros install emacs package manager linux distribution install emacs package xemacs package xemacs old fork emacs x name unrelated emacs xemacs graphical support note ubuntu lts repository emacs available build source emacs greater spacemacs wo nt work may true distribution well macos recommended way installing emacs macos using homebrew brew tap brew install emacsplus brew linkapps emacsplus note homebrew command install gnu emacs link application directory still need run git clone mentioned start file populate emacsd directory transforms regular gnu emacs spacemacs note proposed emacsplus tap identical emacs formula build gnu emacs support several feature default along providing spacemacs icon see emacsplus information note title bar match theme background color consider using instead brew install emacsplus head withnaturaltitlebars note completed install process also recommended add osx layer dotfile install instruction available osx layer documentation note powerline separator spaceline different le saturated color rest line add following snippet dotspacemacsuserconfig spacemacs file setq nsusesrgbcolorspace nil keep mind ideal solution affect colour emacs another option use different powerline separator example alternate bar diminishes difference using separator make go away completely without need change colour space order change powerline separator put following snippet dotspacemacsuserconfig setq powerlinedefaultseparator information powerline separator please refer appropriate section documentation window download good quality build project recommended install recent stable build sure declare environment variable named home pointing user directory c user username clone spacemacs directory sometimes get following error first start emacs directory emacsdserver unsafe fix change owner directory emacsdserver property select tab security select button advanced select tab owner change owner account name source stack overflow efficient search recommend install pt platinum searcher pt version higher required install default installation existing emacs configuration back first cd mv emacsd emacsdbak mv emacs emacsbak nt forget backup remove emacs file otherwise spacemacs load since file prevents emacs loading proper initialization file clone repository git clone http emacsd master stable branch immutable make modification break update mechanism want fork spacemacs safely use develop branch handle update manually optional install source code pro font running terminal also need change font setting terminal launch emacs spacemacs automatically install package requires get error regarding package downloads may try disable http protocol starting emacs set dotspacemacselpahttps nil dotfile remove need start emacs insecure argument may wish clear emacsdelpa directory corrupted package may downloaded reinstalled restart emacs complete installation modeline turn red sure consult faq alternate installation may useful clone spacemacs outside emacs dotdirectory emacsd try spacemacs without replacing completely configuration currently two possibility support alternative location spacemacs configuration modify home environment variable solution ideal quickly try spacemacs without compromising existing configuration mkdir spacemacs git clone http spacemacsemacsd homespacemacs emacs note fish shell need modify last command env home homespacemacs emacs modify spacemacsstartdirectory variable solution better suited embed spacemacs configuration say cloned spacemacs emacsdspacemacs drop line emacsdinitel setq spacemacsstartdirectory emacsdspacemacs loadfile concat spacemacsstartdirectory initel spacemacs logo ubuntu user follow guide change logo unity mac user need download icns version logo change logo dock update spacemacs builtin notification new version master branch develop branch update spacemacs manually updating repository automatic update master branch new version available little arrow appears modeline color depends number version available since last update green mean current version recent orange red mean current version older click arrow update spacemacs last version manual update master branch remove angle bracket typing line shell git fetch git reset hard tag version updating develop branch update emacs package clicking press ret update package link starting page close emacs update git repository restart emacs complete upgrade revert specific version revert specific version checkout corresponding branch instance revert last git checkout update either manually automatically advised update package clicking update package button spacemacs home buffer quote quote ashnur feel spacemacs aircraft carrier playing table tennis deck freerider quote deuill love spacemacs magit contribution spacemacs communitydriven project need keep date propose great useful configuration thing contributing sure consult contribution guideline convention community license license part specific spacemacs includes initialization core file layer file documentation package shipped repository refer file header spacemacs logo nasser alshammari released creative common attributionsharealike international license supporting spacemacs best way support spacemacs contribute either reporting bug helping community gitter chat sending pull request show love project getting cool spacemacs tshirts mug spacemacs shop want show support financially contribute bountysource buy drink maintainer clicking paypal badge used spacemacs project want show fact use spacemacs badge markdown built spacemacs http http spacemacsorg html href http spacemacsorg img src http orgmode http spacemacsorg file http thank
330,Lobsters,emacs,Emacs editor,The Animated Guide to Paredit,http://danmidwood.com/content/2014/11/21/animated-paredit.html,animated guide paredit,basic balanced pair opening closing indenting quoting wrapping sexpression deleting probably slurping barfing structural navigation splicing splitting joining bonus lobster hacker news reddit,paredit great brings structural editing lisp maintaining syntactical correctness code fan long time still using small subset functionality available even afer spending time reading manual paper printing cheat sheet lately decided work deliberately paredit really understand mostly learned note included keypresses animation see however shown mac key c shift basic balanced pair opening paredit four opening function applying pair paredit never let buffer become unbalanced open function produce balanced pair pareditopenround pareditopensquare pareditopencurly opening tag default pareditopenangle bound key closing indenting function partner pareditclose roundsquarecurlyangle function move cursor past next closing delimiter also indent moving past closing delimiter pulling closing delimiter onto current line nice feature function delimiter agnostic mean nt need match correct closing character pair opening character quoting paredit treat double quoting similarly opening closing pair character however character used opening closing difference doublequote bound key insert open closing quote cursor quoted space move past closing double quote character cursor end string insert escaped quote inside string double quoting wrapping sexpression paredit variant open pair automatically wrap following sexpression function named pareditwrap roundsquarecurlyangle pareditmetadoublequote pareditwrapround bound pareditmetadoublequote bound function bound key default wrapping sexpression deleting like open close double quote key paredit also take default key combination emacs us deleting pareditforwarddelete bound cd pareditforwardkillword bound md pareditbackwarddelete bound del probably backspace pareditbackwardkillword bound mdel pareditkill bound ck command act regular emacs command hijack key try break balance sexpressions refuse comply paredit ensure integrity code maintained deleting forward character word deleting backward character word killing end current sexpression refusal unbalance code also unfortunately great cause pain people new paredit still transitioning string based tree based editing cause people quitting paredit forever fortunately solution lie slurping barfing say slurping current sexpression string expanded pulling next outer sexpression barfing opposite contracting sexpression pushing lastmost form slurping provided pareditforwardslurpsexp bound c barfing provided pareditforwardbarfsexp bound c slurping barfing notice function name contain word forward paredit also give u ability slurp barf backwards pareditbackwardslurpsexp bound c pareditbackwardbarfsexp bound c slurping barfing backwards structural navigation paredit provides function graceful sexpression navigation allowing move forward backward amongst sibling raise enclosing sexpression descend back child move forward backward inside sexpression using pareditforward pareditbackward bound cmf cmb respectively upon reaching delimiter invocation move cursor outside current sexpression enclosing sexpression moving forward backwards paredit offer two method descent ascent used depending direction want move descend forward use pareditforwarddown bound cmd reverse ascend backwards use pareditbackwardup bound cmu descending forward ascending backwards want descend backward use pareditbackwarddown bound cmp reverse ascend forward use pareditforwardup bound cmn descending backwards ascending forward splicing splicing act removing current sexpression joining content enclosing sexpression two splice kill content current sexpression either front rear cursor kill backwards pareditsplicesexpkillingbackward bound splice kill backwards kill forward pareditsplicesexpkillingforward bound splice kill forward kill variant pareditsplicesexp bound m shown splicing quote string splice string without killing anything splitting joining sexpression split two two sexpressions joining back together one split pareditsplitsexp bound m join pareditjoinsexps bound mj note j uppercase joining two printlns one bonus final treat pareditconvolutesexp bound quite appropriately description function doc convolute sexpressions save sexpressions preceding point delete splice sexpressions following point wrap enclosing list new list prefixed saved text prefix argument n move n list wrapping convoluting expression still waiting day recognise use one discussion lobster hacker news reddit
331,Lobsters,emacs,Emacs editor,Building Dating Site at HappyPancake,http://abdullin.com/long/happypancake/,building dating site happypancake,,
333,Lobsters,emacs,Emacs editor,Towards a Vim-like Emacs,http://nathantypanski.com/blog/2014-08-03-a-vim-like-emacs-config.html,towards vimlike emacs,towards vimlike emacs previously written bling determined vim user first terminology interactive buffer window frame package archive melpa arch linux symbolic expression installing evil mode major mode minor mode state binding key point symbol object official manual symbolp quoting quoted map key minibuffer lisp navigation superior lisp interaction mode hook window movement binding managing buffer stealing keymap couple different way rebinding ranger handling lot buffer key action separating init file dired dired diredx evilleader evilleader emacs leader usepackage usepackage argument meaning daemonizing emacs systemd unit magit tip trick avoid using customize easy customization ditch terminal tmux window manager hide startup message milkbox better word wrapping enforce trailing newlines newsbeuter config github,towards vimlike emacs previously written process transitioning vim emacs fairly highlevel however cover nittygritty long painful hour spent trying smash emacs reasonable keybindings lost get retrospective analysis benefit hindsight gathered since switched unfortunately many resource right people use emacs tool user write percentage emacs user try emulate vim also write even smaller bling vimairline developer switched ultimately convinced give emacs shot tip scratch surface necessary replicate fingerfriendliness modern vim workflow wellknown overstated joke default emacs binding bad reading post probably already agree uninitiated key combo devil time pressing two key hand hundred time per day setting repetitive stress injury programmer need take care hand career going parttutorial part describing configuration little determination take groundzero working evil configuration generic development environment post geared determined vim user willing give evil shot like heavily customized editor number task intended teach right attitude mindset required keep working emacs get familiar enough reading documentation know look want something also elispfocused emphasis modern customization feature emacs ultimately prevent new user groking internals first terminology first fire emacs need learn reference certain object keybindings pretty simple confusing initial introduction mx mean press alt key press x still holding brings emacs command prompt give access function declared interactive elisp function may run interactively user someone give command sequence like mx packageinstall ret evil ret mean mx keybinding type packageinstall press enter type evil press enter often second ret omitted taken implicit buffer place text may go distinct window visual area screen display buffer frame another emacs window window manager attached emacs process basic see go package archive order install package thing besides default repos need define variable called packagearchives url package source initel file located emacsdinitel default setq packagearchives melpa http melpamilkboxnetpackages org http orgmodeorgelpa gnu http elpagnuorgpackages melpa important source uptodate emacs package kind like arch linux emacs package archive build directly upstream time work builtin emacs package manager also code need initialize package manager require package packageinitialize added file evaluate expression inside emacs cx ce evaluate expression position cursor outside following expression hit keybinding run command evallastsexp evaluates symbolic expression cursor prettyprints output need order ie evaluate setq expression first work installing evil finished install evilmode mx packageinstall ret evil ret compilation log pop bottom screen killed cx run function killbufferandwindow also call interactively mx prompt later evil installed emacsd directory enable type mx evilmode vim binding work long kill emacs probably want enable evil permanently add following bottom emacsdinitel file require evil evilmode automatically enable evilmode every time start emacs important go bottom file evil relies starting rest package detect overlay keybindings appropriately break configuration restart emacs emacs debuginit get debug information init file feel bad use vim fix meantime get worried thinking evil firstclass citizen emacs editor built ripped piece competent user interesting part emacs lisp engine score reusable function automating interaction code keybindings one way calling thing mode like vim emacs us word mode refer element state editor unlike vim referring modal editing rather composition various module make current editing environment major mode defines primary interaction buffer emacs one active necessarily editing text example dired major mode editing directory magit git interaction interface important major mode aware fundamental mode major mode discerning feature besides ability type text buffer minor mode compositional one minor mode loaded others override setting previous one evil one example minor mode state evil us term state refer vim call mode state get going evilemacsstate evilinsertstate evilnormalstate evilvisualstate called interactively mx enable way evil work state bound different keymap keymaps change meaning key call different function pressed affords ability remap binding across different state work evilmode enabled evil also right state activate keymap use esc v etc would vim switch evil state play around using mx toggle different state moving binding key get started adding binding evil want switching window easy bind following definekey evilnormalstatemap kbd ch evilwindowleft definekey evilnormalstatemap kbd cj evilwindowdown definekey evilnormalstatemap kbd ck evilwindowup definekey evilnormalstatemap kbd cl evilwindowright bind ctrl hjkl window movement command evil normal state number interesting thing expression first position cursor word definekey call mx describefunction provide default value thing cursor press ret bring buffer help information read help information give move buffer appears helpmode evil binding use q close keep working proper term emacs cursor would point used extensively help documentation worth remembering thing point provided default argument describefunction symbol symbol basically thing emacs lisp name hashed lookup table becomes object lisp object could anything function data text example symbol interesting give name refer later somehow official manual test whether arbitrary lisp object symbol symbolp function symbolp object function return object symbol nil otherwise use mx apropos ret point ret skim list pop evil working properly use q close window done quoting reader keen eye may noticed one argument code apostrophe evilwindowleft name want able call later binding key putting apostrophe passing argument function mean passing quoted form evilwindowleft definekey evaluates since intent pas symbol evilwindowleft definekey evaluated form evilwindowleft right thing argument elisp expression without quoting evaluated passed function call quoting let u avoid pas symbol instead map key two argument keybindings unquoted keymap evilnormalstatemap go directly function since purpose definekey modify map expression kbd ch actually another separate function call happens outside expression evaluated use mx describefunction look help documentation kbd see kbd compiled lisp function subrel kbd key convert key internal emacs key representation key string constant format used saving keyboard macro see edmacromode need use kbd function describe keybindings since contain extra operator ctrl key single character binding looked keymaps directly key sequence like ch stored map form look value kbd ch typing line binding evaluating cx ce minibuffer text area blank line bottom screen h displayed tell expression definekey evilnormalstatemap kbd ch evilwindowleft internally binding h evilwindowleft way shown minibuffer still displayed form different hashed value eventually becomes lisp navigation accessing help documentation using mx describefunction pretty awesome interface fairly clunky make better using elispsimenavmode superior lisp interaction mode emacs install mx packageinstall ret elispslimenav slime mode need enabled used define function tie hook emacslispmode hook function get evaluated something predefined happens editor mode hook already configured need add function call using addhook become useful first require package elispslimenav ensures loaded emacs start require elispslimenav define function defun mylisphook elispslimenavmode turnoneldocmode add init file require call note function definition prefixed emacs package elisp namespaces like python ruby counteract convention define function prefixed package name personal code using uncommon add emacslispmodehook using addhook addhook emacslispmodehook mylisphook make elispslimenavmode turnoneldocmode get called every time emacslispmode enabled go ahead evaluate cx ce make easier surround block progn make whole thing get treated one big expression evaluation progn require elispslimenav defun mylisphook elispslimenavmode turnoneldocmode addhook emacslispmodehook mylisphook progn serve practical purpose might help group block code evaluation hacking since emacslispmode already running el file force evaluation typing mylisphook buffer evaluating manually notice hover function eldocmode show signature minibuffer want see help information like manually though still need type describefunction mx prompt slime simplify another keybinding evildefinekey normal emacslispmodemap kbd k elispslimenavdescribeelispthingatpoint evaluating contextual lookup thing point whenever press k normal state syntax different defined window movement binding earlier want define k call elispslimenavdescribeelispthingatpoint emacslispmodemap evil normal state evildefinekey function let u providing argument evil state keymap binding active tool necessary explore emacs lisp code without getting lost documentation lookup everything see understand great way start familiarizing elisp code move lookup description progn require addhook emacslispmodehook read afraid encounter word understand seeing bigger picture lingo take time help start understand managing buffer list buffer currently open typing mx listbuffers using binding defined earlier switch window opened hit q close done switch one buffer typing mx switchtobuffer bring minibuffer prompt type name buffer switch better listing use mx ibuffer ibuffer default setting default binding care right n p go next previous buffer marking buffer deletion x buffer make go away ret buffer name point take buffer ibuffer sort useful feature browsing filtering editing open buffer least vim user keybindings intuitive typing j accidentally call jumptobuffer almost certainly want felt like typing name buffer prompt probably opened ibuffer begin aside unnatural vim user interface ibuffer actually bad keybindings mostly singlekey sequence unlike poorlydesigned emacs mode function allow quick action save ton work stealing keymap previously wrote experience switching evil mentioned couple different way deal major mode keymaps inconsistent evil covering full remapping approach since benefit major mode tightly integrated evil ability redefine key easily quickly remapping key way offer chance better understanding function major mode might missed otherwise core component emacs like ibuffer dired building useful keymap rewarding learning experience ibuffer open type mx describemode pull help info link ibufferel helpmode following link take source code ibuffer somewhere find keymap default ibuffer keymap one major mode keymaps bound really large reproduce idea redefine map within evil ibuffer respect evil keymaps still functionality evildefinekey function used earlier option taking unlimited number argument copy line like following ibufferel definekey map kbd ibuffermarkforward definekey map kbd ibuffertogglemarks definekey map kbd u ibufferunmarkforward definekey map kbd ibufferdiffwithfile definekey map kbd j ibufferjumptobuffer definekey map kbd mg ibufferjumptobuffer definekey map kbd m c ibufferdoisearch definekey map kbd m mc ibufferdoisearchregexp drop emacsdinitel require evil like follows evildefinekey normal ibuffermodemap kbd ibuffermarkforward kbd ibuffertogglemarks kbd u ibufferunmarkforward kbd ibufferdiffwithfile kbd j ibufferjumptobuffer kbd mg ibufferjumptobuffer kbd m c ibufferdoisearch kbd m mc ibufferdoisearchregexp used vim macro visual block selection rewrite evildefinekey form took minute perform ensure ibuffer use keybindings add line evilsetinitialstate ibuffermode normal init file use set initial state major mode know bind mode sometimes using emacs state bad idea try actually use configuration work reason need ensure evil binding applied ibuffer loaded since need special setup solution surround binding evalafterload block like follows evalafterload ibuffer progn evilsetinitialstate ibuffermode normal evildefinekey normal ibuffermodemap kbd ibuffermarkforward kbd ibuffertogglemarks kbd u ibufferunmarkforward kbd ibufferdiffwithfile kbd j ibufferjumptobuffer kbd mg ibufferjumptobuffer kbd m c ibufferdoisearch kbd m mc ibufferdoisearchregexp ensures custom keymap try set ibuffer already initialized properly goal section read help information evalafterload well ibuffer binding pick one seem interesting worry understand thing read anyway done reading get custom keymap work evaluating block cx ce ensure functional evilnormalstate calling mx evilnormalstate manually within ibuffer rebinding might think crazy place configuration one lone init file get next section keeping thing initel get job done let u focus keybindings obvious thing copied keymap add proper hjkl binding usually major mode like want bind j k evilnextline evilpreviousline respectively since j taken changed ibufferjumptobuffer j rebound j evilnextline binding k le obvious tied ibufferdokilllines looking help documentation ibufferdokilllines interactive autoloaded compiled lisp function ibufextel ibufferdokilllines hide currently marked line ibuffer marking system let select multiple buffer perform action personally care much hiding marked line simply removed binding kbd j evilnextline kbd k evilpreviousline bound cover absolute basic l used ranger viminspired file manager l take current item ibuffer l bound ibufferredisplay useless function redisplays current buffer without loading new one deleting line let u rebind kbd l ibuffervisitbuffer navigate ibuffer much naturally another ranger replication default ibuffertogglemarks bound v bound ibufferdoview open buffer point fullscreen hide others never need added kbd v ibuffertogglemarks config add really necessary duplicate entire keymap init file guess need explicitly define key evil evil would overwrite otherwise replacing something useless need change neither apply get rid binding pasting start trimming binding actually interested give chance examine default keymap rebind thing sound useful handling lot buffer time use emacs end lot garbage buffer ton different command open scratch buffer show thing never kill eventually need learn filter output actually relevant quickly group delete buffer typing ibuffer window start filter command list default filter command remember rebind key action n filter name e filter extension f filter filename save filter negate filter g make filter group save filter group r switch saved filter r switch saved filter group separating init file said putting everything one init file get old emacs variable called loadpath use customize look file similar path variable unixderived shell adding following beginning emacsdinitel file make elisp file directory emacsdconfig available loading addtolist loadpath concat useremacsdirectory config use k normal state look definition concat see concat rest sequence concatenate argument make result string result string whose element element argument since last time see suggest reading doc addtolist well use mx describevariable see definition useremacsdirectory loadpath also tell value hitting k symbol point also take good hard way least create file emacsdconfigmyibufferel move ibuffer configuration loadable default though unless declare bottom file code go provide myibuffer emacsdinitel need require file evil slime loaded automatically require myibuffer ibuffer setting loaded startup clutter main init file dired dired one killer apps fullfeatured file manager built editor package installation necessary default binding evil get core thing wrong respect vimlike preference dired good using singlekey binding important thing changing better easy know function bind first opening subdirectory dired spawn new dired buffer sane action diredfindalternatefile locked behind feature gate prompt first time use rebound l diredfindalternatefile mean moving forward new dired buffer happens buffer window current one wonder cluttering buffer list dead dired exploration repeating step used build new keymap ibuffer hack apart dired map similarily evildefinekey normal diredmodemap h diredupdirectory evildefinekey normal diredmodemap l diredfindalternatefile evildefinekey normal diredmodemap diredsorttoggleoredit evildefinekey normal diredmodemap v diredtogglemarks evildefinekey normal diredmodemap diredmark evildefinekey normal diredmodemap u diredunmark evildefinekey normal diredmodemap u diredunmarkallmarks evildefinekey normal diredmodemap c diredcreatedirectory evildefinekey normal diredmodemap n evilsearchnext evildefinekey normal diredmodemap n evilsearchprevious evildefinekey normal diredmodemap q killthisbuffer notice mark toggling rebound v well give somewhat consistent interface ranger dired ibuffer rebinding n another important thing default n p used navigation within dired hjkl binding set really useful changing n n search command give u vimlike searching within file manager another thing note code made binding explicit expression useful testing new keybindings might want change play around find something work want able evaluate expression independently feel like evaluating time surround progn block visual select code use mx evalregion one problem config l use diredfindalternatefile h keep old dired buffer around fix need write function jump one directory close old dired buffer defun mydiredupdirectory take dired one directory behave like diredfindalternatefile interactive let old currentbuffer diredupdirectory killbuffer old rebinding h new function make buffer navigation behave much closer vimlike file browser evildefinekey normal diredmodemap h mydiredupdirectory diredx many incredibly useful dired feature disabled default like diredjump jump dired buffer place current file adding following init file enable advanced feature making dired much nicer environment work require diredx diredrelated keybindings like diredjump require diredx loaded work evilleader evilleader let define leader key within evil use evil leader key reserved leader key emacs per emacs leader post series usual mx packageinstall ret evilleader install require evilleader run globalevilleadermode evil loaded otherwise work buffer like scratch message first obvious thing bind w q save quit function many people vim evilleadersetleader evilleadersetkey w savebuffer evilleadersetkey q killbufferandwindow useful evilleader binding work package seen far evilleadersetkey h diredjump evilleadersetkey v splitwindowright evilleadersetkey e ppevallastsexp evilleadersetkey otherwindow evilleadersetkey b ibuffer evilleadersetkey x helmmx set eliminate twokey combo daily editing task usepackage start collecting emacs plugins startup time begin grow addition ability deploy multiple machine may plugins installed handle dependency properly decrease significantly time usepackage let avoid problem automating bad part configuring package establishing deferred binding evaluate code given package loaded trigger package loading evaluation arbitrary command opening arbitrary filetypes top section init file look like require package packageinitialize setq packageenableatstartup nil addtolist loadpath concat useremacsdirectory config setq packagearchives melpa http melpamilkboxnetpackages org http orgmodeorgelpa gnu http elpagnuorgpackages unless packageinstalledp usepackage packagerefreshcontents packageinstall usepackage require usepackage effect automatically downloads installs usepackage melpa already present use ensure within usepackage declaration package would normally install manually usepackage evilleader command evilleadermode ensure evilleader demand evilleader init globalevilleadermode config progn evilleadersetleader binding earlier pretty detailed help readme github summarize argument meaning ensure automatically fetch install package already installed mode defer loading given file extension found command define given command load package called init command executed immediatley expression found config command executed package loaded colon necessary optional named argument elisp expression could use usepackage nothing first argument although different using require also note generally want init config wrapped progn since take one command normally task section go get previous code usepackage daemonizing emacs use following systemd unit start emacs daemon machine boot unit descriptionemacs daemon service typeforking workingdirectory h execstartusrbinemacs daemon restartno install wantedbyconsoletarget make simple script like binsh usrbinemacsclient c use spawn emacs attach server process allowing instant startup nonsystemd user still use emacs daemon init script somewhere effect magit talked magit git interface ever liked actual work found year started using git giving proper jk binding simple usepackage magit ensure magit config progn evilsetinitialstate magitmode normal evilsetinitialstate magitstatusmode normal evilsetinitialstate magitdiffmode normal evilsetinitialstate magitlogmode normal evildefinekey normal magitmodemap j magitgotonextsection k magitgotoprevioussection evildefinekey normal magitlogmodemap j magitgotonextsection k magitgotoprevioussection evildefinekey normal magitdiffmodemap j magitgotonextsection k magitgotoprevioussection tip trick avoid using customize easy customization feature emacs autogenerates lisp code place specific file graphical customizations since break customizing emacs programmatically recommend avoiding case better use customize browse useful setting copy generated code real init file way free modify ditch terminal littleknown fact among hardcore tmux user window manager serve useful purpose besides displaying web browser felt least used vim inside shell since graphical version annoying different font clunky menu use copypaste function move text around moving emacs fulltime prepared change mindset emacs better use graphical window actually play nicely graphical environment typing mx newframe open new window window manager emacs attached emacs process behavior give best world use emacs split however like take advantage fancy feature window manager trust give shot promise better hide startup message setq inhibitsplashscreen inhibitstartupechoareamessage inhibitstartupmessage useful managing package dependency controlling load order taken milkbox defmacro feature rest body feature loaded evaluate body declare indent defun evalafterload feature progn body better word wrapping emacs long history terrible word wrapping situation improved lately however visual line mode give sane word wrapping almost case visuallinemode enforce trailing newlines software eg newsbeuter break provide trailing newline setq requirefinalnewline config config file github want explore gone caution follow post exactly may work system broken due versioning build emacs latest upstream source every couple week
334,Lobsters,emacs,Emacs editor,pdf-tools,https://github.com/politza/pdf-tools,pdftools,pdf tool readme package watch known problem feature installation server prerequisite compilation compiling o x freebsd repology list compiling centos compiling fedora compiling alpine linux compiling window compilation installation window compilation compilation installation window install elisp prerequisite letalist tablist installing updating known problem linummode autorevert file notification auctex keybindings,pdf tool readme package pdf tool among thing replacement docview pdf file key difference page prerendered eg ghostscript stored filesystem rather created ondemand stored memory rendering performed special library named whatever reason poppler running inside server program program called epdfinfo job successively read request emacs produce proper result ie png image pdf page actually displaying pdf file one part pdf tool since poppler provide u kind information document also able modify lot watch please read also known problem feature viewview pdf document buffer docviewlike binding isearchinteractively search pdf document like buffer either string pcre occurlist line matching string regexp one pdf document follow click highlighted link moving part different page external file website uri link may also followed keyboard command annotationsdisplay list text markup annotation like underline edit content attribute eg color move around delete create new one save modification back pdf file attachmentssave file attached pdffile list dired buffer outlineuse imenu special buffer examine navigate pdf outline synctexjump position page directly tex source vice versa virtual use collection document one big single pdf misc display pdf metadata mark region kill text pdf keep track visited page via history apply color filter reading low light condition installation package may installed via melpa try build server part activated first time though next section regarding buildprerequisites still relevant rest installation instruction assume build within git repository melpa package different directory structure server prerequisite need gnu emacs form gnulinux o operating system currently supported patch welcome following instruction assume debianbased system prerequisite may installed automatically kind system see compilation first make sure suitable buildsystem installed need least cc compiler gcc g make automake autoconf next need install library pdf tool depends probably already system sudo aptitude install libpngdev sudo aptitude install libpopplerglibdev sudo aptitude install libpopplerprivatedev older ubuntu system final command possibly give error problem since version package contained main package libpopplerdev also note long time called libzdev still may system debian wheezy come libpoppler version pretty old minimally required version feature pdf tool depend recent version library see following table version require want version create modify text search create modify markup case decide install libpoppler source make sure run configure script enablexpdfheaders option finally one feature following link pdf document plain keystroke requires imagemagick convert utility requirement optional may install like sudo aptitude install imagemagick compiling o x although o x officially supported reported successfully compiled need install poppler get homebrew via brew install poppler automake also help pkgconfig find library setting pkgconfigpath eg export usrlocallibpkgconfig likewise within emacs using setenv compilation proceed normal freebsd although officially supported reported pdftools work well freebsd instead building pdftools install one o package eg pkg install see current list pdftools package freebsd visit repology list build pdftools either melpa directly source repository install dependency pkg install autotools gmake popplerglib choose install melpa must substitute gmake make instruction compiling centos possible compile pdftools centos install poppler dependency yum install popplerdevel popplerglibdevel compiling fedora sudo dnf install make automake autoconf gcc gccc imagemagick libpngdevel zlibdevel popplerglibdevel compiling alpine linux apk add buildbase g gcc automake autoconf libpngdev glibdev popplerdev compiling window pdf tool built used window using compiler work native cygwin window build emacs includes standard binary provided gnu project available package numerous thirdparty binary tested emacs instruction provided compilation installation window pdf tool successfully compile using cygwin able open pdfs properly due way binary compiled cygwin handle file path compilationnow time compile source cd pathtopdftools make installserverdeps optional make make installserverdeps command try install necessary program library build package though work sudo aptget available compile source code create emacs lisp package root directory project configure script also tell end feature depending libpoppler version available command give error otherwise trouble compilation installation window using gnu binary window support png zlib must first installed copying appropriate dlls emacs bin directory thirdparty binary come already done first install install update package database core package using instruction provided compile pdf tool open shell update install dependency skipping already pacman syu pacman basedevel pacman pacman pacman pacman pacman install pdf tool emacs try compile server instead get separate copy source somewhere else git clone http githubcompolitzapdftools open shell note must use compile pdftools cd pathtopdftools make produce file serverepdfinfoexe copy file pdftools installation directory emacs start emacs activate package mx pdftoolsinstall ret test mx pdfinfocheckepdfinfo ret successful pdftoolsinstall added emacs config note library gnu utility git window may interfere needed pdf tool pdfinfocheckepdinfo succeed error occur trying view pdf file fixed ensuring msys library always preferred emacs setenv path concat c getenv path elisp prerequisite package depends following elisp package installed installing pdf tool package packagerequired version letalist come emacs tablist installing make produced elp file pdftools version tar fine package contains necessary file emacs may installed either using executing emacs command mx packageinstallfile ret pdftools version tar ret complete installation process need activate package putting somewhere emacs alternatively care startup time may want use instead next probably want take look various feature installed following two command might help mx pdftoolshelp ret mx pdftoolscustomize ret updating day might want update package via git pull reinstall sometimes may fail especially lispmacros involved version changed avoid kind problem delete old package via listpackages restart emacs reinstall package also applies updating via package melpa known problem linummode pdf tool work well together linummode activating pdfviewmode eg via globallinummode might make emacs choke autorevert autorevert work polling filesystem every autorevertinterval second optionally combined eventbased reverting via file notification currently work reliably emacs may revert pdfbuffer corresponding file still written eg latex leading potential error recent auctex installation might want put following somewhere dotemacs revert pdfbuffer tex compilation finished addhook texaftercompilationfinishedfunctions texrevertdocumentbuffer keybindings navigation scroll pagefullspace backspace scroll linecn cp scroll right leftcf cb top page bottom page next page previous pagen p first page last pagem incremental search forward backwardcs cr occur list line containing phrase m jump occur linereturn pick link jumpf incremental search linksf history back forwardsb n display outlineo jump section outlinereturn jump pagemg g display zoom zoom fit height fit width fit pageh w p trim margin set slice bounding box b reset margin r reset annotation list annotationscc ca l jump annotation listspace mark annotation deletiond delete marked annotationsx unmark annotationsu close annotation listq add edit annotationsvia mouse selection leftclick context menu syncing auctex jump pdf location sourcecc cg jump source location miscellaneous refresh file eg recompiling source g print filecc cp
335,Lobsters,emacs,Emacs editor,Outshine 2.0,https://github.com/tj64/outshine,outshine,join github today sign,dismiss join github today github home million developer working together host review code manage project build software together sign
336,Lobsters,emacs,Emacs editor,The Definitive Guide To Syntax Highlighting,http://www.wilfred.me.uk/blog/2014/09/27/the-definitive-guide-to-syntax-highlighting/,definitive guide syntax highlighting,lexical highlighting acme make comment prominent extended lexical highlighting highlightnumbers screenshot highlightquoted highlightescapesequences semantic highlighting sexpression highlighting parenface rainbowdelimeters rainbowblocks highlightstages standard library highlighting j elisp docstring highlighting contextual highlighting hlsexp highlightparentheses highlightsymbol explicit highlighting substitution hashed highlighting article evan brook coloridentifiersmode introspective highlighting highlightdefined pharo conclusion,expect editor highlight different way highlight code without calling external tool whilst editor converged common set base functionality still innovation occurring field limitation highlighting tool use time explore available help choose taking example emacs many available editor limit programming language highlighting editor ignoring lint tool vcs integration lexical highlighting jsmode standard emacs theme programmer typically expects syntax highlighting look like different lexical category function name keywords comment shown different colour virtually editor provide notable exception acme emacs largely done fontlocksyntaxtable though fontlockkeywords usually used simple lexical highlighting already useful syntactic mistake typo keywords unclosed string comment become obvious note screenshots image default colour scheme emacs image customised styling show highlighting related feature mentioned code sample particularly idiomatic elegant simply chosen show relevant part syntax interesting see default emacs colour scheme choose washed grey comment preferring make comment prominent extended lexical highlighting depending taste angry fruit salad highlighting might choose distinguish lexical class emacs fontlockmaximumdecoration adjust many distinct thing highlighted rarely used practice variety minor mode offer additional highlighting specific syntactic feature great minormodes compose nicely allowing reused highlighting many different language highlightnumbers highlightnumbers simple nonintrusive extension highlighting make sense pretty much every language highlightquoted fun fact vim common lisp highlighting mode highlight syntax class emacs screenshot one great feature vim mode highlighting quoted value available highlightquoted pictured highlight quote backticks quoted symbol highlightescapes highlightescapesequences another minor mode simple goal case highlight escape sequence inside string currently support ruby javascript enhrubymode minor mode matter preference major mode developer like extended highlighting tend include major mode anyway example enhrubymode highlight infix operator addition standard ruby highlighting semantic highlighting mode include full parser rather lexer enables sophisticated highlighting technique best example includes fullblown recursivedescent ecmascript parser plus number common j extension enables distinguish syntax type example distinguish parameter global variable pictured amazing achievement even allows editor many check traditionally done lint tool highlighting globals particularly useful use global necessarily error useful information code also configured highlight globals specific current project j platform see sexpression highlighting emacs also offer number specialist highlighting mode sexpressions parenface parenface simple minor mode assigns additional face bracket enabling style bracket separately intended fade bracket focus rest code rainbowdelimeters rainbowdelimeters take opposite approach level bracket assigned unique face enabling give one different colour work particularly well using cond easy spot different boolean expression default allows nine level nesting cycling colour see rainbowdelimetersmaxfacecount choose tradeoff level contrast colour different level settled six level distinct default rather subtle rainbowblocks like rainbowdelimeters rainbowblocks applies technique colour everything according nesting depth fantastic seeing nesting limit much else highlight highlightstages highlightstages specifically target quoted quasiquoted sexpressions enables reader easily spot unquoted part quasiquote particularly useful nesting quasiquotes standard library highlighting another school thought highlight function language standard standard library xah lee subscribes philosophy released j elisp mode provide xahelispmode difficult elisp mode confuse variable function slot list highlighted even used variable pythonmode default python mode emacs take similar approach highlighting builtin function method builtin type hard general pythonmode incorrectly highlight similarlynamed method type method whose name match builtin function docstring highlighting docstrings elisp docstrings conceptually string comment reader like comment available runtime like string emacs expose separate face comment string docstrings fontlockcommentface fontlockstringface fontlockdocface respectively elisp docstrings may also contain additional syntax crossreferences emacs highlight differently though primary purpose linking crossreferences help buffer jsdoc language support elaborate syntax comment help reader aid automatic documentation tool example offer additional highlighting jsdoc comment contextual highlighting another important area highlighting highlight element based cursor point emacs terminology currently located showparenmode basic contextual highlighting showing matching bracket bracket currently cursor part emacs default showparenmode switch hllinemode highlighting current line common feature editor highlighting emacs provides hllinemode work well lineoriented programming language hlsexpmode dealing sexpressions take step hlsexp show entire sexpression point avoiding confusion editing deeply nested expression highlightparenthesesmode highlightparentheses take subtle approach highlight current bracket hot highlight outer bracket progressively cooler colour highlightsymbolmode last example section superb highlightsymbol invaluable showing else current symbol used highlightsymbol conservative point moving set highlightsymbolidledelay override highlightsymbolmode particularly clever able inspect current syntax table prevents becoming confused string like usually single symbol lisp equivalent x many language explicit highlighting hilockmode come point automatic highlighting sufficient want explicitly highlight something emacs provides hilockmode support special comment syntax allows reader see highlighting substitution also possible configure emacs change display text prettysymbolsmode several mode emacs substituting string like lambda mathematical counterpart emacs also include prettifysymbolsmode provides work well editing latex document tricky code case like lambda replacing shorter string mean end indenting differently depending whether substitution switched glassesmode glassesmode fun minor mode user like camelcase display camel case symbol underscore foobar becomes foobar without changing underlying text hashed highlighting coloridentifiersmode one novel approach highlighting code give symbol different colour simply hash string assign colour accordingly mean variable similar spelling get completely different colour popularised recently article evan brook coloridentifiersmode released result pictured kdevelop feature time calling semantic highlighting irc client often use technique nickname highlighting whilst powerful tricky get right colour different symbol end colour many colour hard visually distinguish pair colour image url encodeuricomponent quite similar small code snippet really take full advantage hashedbased highlighting effective larger piece code distinct symbol introspective highlighting highlightdefinedmode finally selfhosting environment emacs smalltalk offer additional highlighting possibility highlightdefined enables highlight function variable macro currently defined work well spotting typo variable name little sophisticated image see fibonacci evaluated recursive call highlighted even see whether forgotten evaluate library import pharo workspace highlighting selector pharo smalltalk implementation also able method class called selector may changed point environment introspect see current selector appropriate value called quite different traditional javastyle ide integration based runtime information current process instead static analysis practice however many benefit introspective highlighting provided calling external languagespecific lint tool editor conclusion really hard compose syntax highlighting tool example intrusive particularly rainbowblocks coloridentifiersmode preventing using addition tool contextual highlighting tool best regard lot information could displayed editor relatively little shown primary option highlighting text colour background colour weight line underline overline strikethrough fringe colour shown left edge editor window writing highlighting tool emacs try define face wherever possible example highlightstages provide face highlight quasiquotes changing background colour already using background colour highlight something else make highlightstages use underline instead similar problem mode dynamically define face customise normal way release highlighting tool please include screenshots amazing many tool listed screenshots github page personally like angry fruit salad lot contrasting colour different lexical class plus ton contextual highlighting sweet spot experiment see suit
337,Lobsters,emacs,Emacs editor,From Vim to Emacs + Evil chaotic migration guide,http://juanjoalvarez.net/es/detail/2014/sep/19/vim-emacsevil-chaotic-migration-guide/,vim emacs evil chaotic migration guide,emacs dotfiles good window version one basic emacs survival key package management evil vim emulation theme terminal color change cursor color depending mode tab leader key session mksession vim accent macro definition vimlike search highlighting extension helm unitectrlp style fuzzy filebufferanything searcher steroid vim mark evil mark emacs bookmark narrowing project management language spell checking relative line number easymotion evil ace jump powerline syntactic checking fly flycheck jk browsing wrapped line escape thing davvil initel github start maximized please ckcj page downup coding style space instead tab autoindent return key show matching paren fill column auto line breaking column limit mark silver searcher ag spanish keyboard remaps create backup file move back cursor one position exiting insert mode remember cursor position file reopening graphical gdb color identifier mode color delimiters diminish clean clutter modeline select last yanked text emacs alternative popular vim plugins james p random thought emacs evil vim,using vim year option serious text work like programming writing totally addicted modal text editing point feel crippled edit text nonmodal editor may argue programming fast write would right imagine somebody programming screen keyboard tablet know modal editor user feel non modal edition many vimmers always curious emacs enemy editor flamewars operatingsysteminawindow lisp virtual machine concept nonmodal editing low quality existing modal editing mode compared vim made keep sane distance evilmode happened evil mode developed perfect vim emulation emacs developer publicly stated vim model something work differently vim marked bug hearing good thing evilmode old vimmers contact made switch knew mode good two week ago installed emacs evil started configure everything liking first objective editing environment efficient one vim plugins shortcut expected really reach point long time heard emacs le plugins vim expected hard time creating dotfiles using elisp two week intense investigation googling elisp accelerated learning reading people dotfiles tinkering say wrong environment lost almost anything highlytuned vim also got gain area still started play famous org mode gnu article pretty chaotic recollection bit turned emacs vim improved item bit elisp code config file info plugins hope article useful vim power user trying emacsevil would loved find article like starting article written help lot random people whose configs article answer luck land internet search mostly stackoverflow github random forum keep article clean always cite source snippet could easily find googling code also check emacs dotfiles interested remember newbie dotfiles probably something stupid see config split several file advise start dump everything emacs file easier experiment change lot starting little like playing lot config le settled config split category oh keep vim hand fix emacs config several time broke good window version use window work lot problem official version emacs window slowness unstability huge memory usage reddit user tuhdo read woe suggested two version third party package window emacs tested say one definitively best solves problem basic emacs survival key vim user installing evil using vimstyle command time install evil first mode evil work like package manager need basic cheatsheet emacs command cg control g time cancel prompt later remap escape key anyone coming vim need retain sanity cx k kill close buffer automatically opened window usually closeable q cx zero rotate window cx create horizontal split window cx create vertical split mx alt pc show minibuffer call emacs function later show improve lot toggle long line wrapping like set wrapnowrap vim mx visuallinemode ret cy yankpaste way paste modeline even using evil package management integrated plugin package emacspeak manager pretty good list downloads update install package breeze tested almost vim plugin manager neither close start mx listpackages enter install delete x execute deletion add source package manager function load package install missing useful move config computer put config file package setq packagearchives gnu http elpagnuorgpackages org http orgmodeorgelpa marmalade http marmaladerepoorgpackages melpastable http melpastablemilkboxnetpackages packageinitialize defun requirepackage package setqdefault highlighttabs install given package unless packageinstalledp package unless assoc package packagearchivecontents packagerefreshcontents packageinstall package note phil suggested comment nonstable melpa repository risky newbie since pull directly git master used melpastable config example want use melpa remove stable name url config evil vim emulation fucking impressive miss text command operator motion work flow vim mark paragraph reformatting visual mode visual block macro register text object split vertical horizontal normal folding etc almost everything course vim plugins work emacs evil alternative theme use mx loadtheme ret check available theme install package manager chosen one theme put emacs loadtheme misterioso terminal color default theme look like shit terminal emacs emacs nw want window open vim theme emacs happens almost improve lot installing colorthemeapproximate package make thing csapprox vim translate color console equivalent installed add emacs colorthemeapproximateon work try put line lower emacs file happened everything still look like shit check correct term environment variable set hint different inside screen tmux change cursor color depending mode something liked vim fortunately also emacs unfortunately unable get working nongui emacs setq evilemacsstatecursor red box setq evilnormalstatecursor green box setq evilvisualstatecursor orange box setq evilinsertstatecursor red bar setq evilreplacestatecursor red bar setq eviloperatorstatecursor red hollow tab install eviltabs package enable globaleviltabsmode tabnew gt friend numbered tab default showing tab number useful feature change tab gt like vim number unfortunately package support gt worked around awesome elisp skill close zero definekey evilnormalstatemap kbd lambda interactive elscreengoto definekey evilnormalstatemap kbd c lambda interactive elscreengoto definekey evilnormalstatemap kbd lambda interactive elscreengoto definekey evilnormalstatemap kbd lambda interactive elscreengoto definekey evilnormalstatemap kbd lambda interactive elscreengoto definekey evilnormalstatemap kbd lambda interactive elscreengoto definekey evilnormalstatemap kbd lambda interactive elscreengoto definekey evilnormalstatemap kbd lambda interactive elscreengoto definekey evilnormalstatemap kbd lambda interactive elscreengoto definekey evilnormalstatemap kbd lambda interactive elscreengoto definekey evilnormalstatemap kbd lambda interactive elscreengoto definekey evilinsertstatemap kbd lambda interactive elscreengoto definekey evilinsertstatemap kbd c lambda interactive elscreengoto definekey evilinsertstatemap kbd lambda interactive elscreengoto definekey evilinsertstatemap kbd lambda interactive elscreengoto definekey evilinsertstatemap kbd lambda interactive elscreengoto definekey evilinsertstatemap kbd lambda interactive elscreengoto definekey evilinsertstatemap kbd lambda interactive elscreengoto definekey evilinsertstatemap kbd lambda interactive elscreengoto definekey evilinsertstatemap kbd lambda interactive elscreengoto definekey evilinsertstatemap kbd lambda interactive elscreengoto definekey evilinsertstatemap kbd lambda interactive elscreengoto somebody better elisp skill please help le kludgy solution work fact one key press le gt leader key order define use leader prefix personal shortcut install package evilleader put line like emacs use comma leader key globalevilleadermode evilleadersetleader later found key work mode like editing emacs file emacslispmode package faq solved problem add globalevilleadermode setting setq evilleaderinallstates session mksession vim emacs command mx desktopsave desktopread automatically savedrestored put emacs desktopsavemode want start emacs without auto loading session configured command emacs nodesktop emacs session know elscreens eviltabs use creating vimlike tab want save restore full session including tab copy function config file assign shortcut save session including tab http defun sessionsave store elscreen tab configuration interactive desktopsave emacsconfigurationdirectory withtempfile elscreentabconfigurationstorefilename insert elscreengetscreentonamealist load session including tab defun sessionload restore elscreen tab configuration interactive desktopread let screen reverse read withtempbuffer insertfilecontents elscreentabconfigurationstorefilename bufferstring screen setq screen car car screen setq buffer splitstring cdr car screen eq screen switchtobuffer car buffer elscreenfindandgotobybuffer car buffer cdr buffer switchtobufferotherwindow car cdr buffer setq buffer cdr buffer setq screen cdr screen accent accent work gui mode text mode fixed adding require isotransl emacs macro definition macro defined copied someone config file remember sorry useful specifiy code executed plugin loaded definition config file macro definition fboundp withevalafterload defmacro feature rest body feature loaded evaluate body declare indent defun withevalafterload feature body defmacro feature rest body feature loaded evaluate body declare indent defun evalafterload feature progn body vimlike search highlighting prefer vim highlight search left highlighted term make another search clean highlighted term tough would easy get turned easy end made first emacs extension first time programmed lisp since university long time turned well extension already melpa brief name evilsearchhighlightpersist enable require evilsearchhighlightpersist globalevilsearchhighlightpersist map shortcut leaderspace clear highlight evilleadersetkey spc evilsearchhighlightpersistremoveall must note another good way search emacs use occur helmoccur show search result list split window occur able jump easily match helm unitectrlp style fuzzy filebufferanything searcher steroid helm thing unitectrlp vim really well also enable helm manage command buffer pretty awesome helmmode emacs file also configured shortcut normal mode space space using vim done definekey evilnormalstatemap helmmini helm really configurable include exclude module helm interface show shortcut associated config example helm setting tab helm window action selected item cspc select item require helmconfig require helmmisc require helmprojectile require helmlocate setq helmquickupdate setq helmbookmarkshowlocation setq helmbuffersfuzzymatching projectile package helmprojectile globalsetkey kbd mx helmmx defun helmmybuffers interactive let helmfftransformershowonlybasename nil helmotherbuffer helmcsourcebufferslist helmcsourceelscreen helmcsourceprojectilefileslist helmcsourcectags helmcsourcerecentf helmcsourcelocate helmmybuffers define helmmybuffers function called assign shortcut show helm interface searching fuzzy real time write unordered open buffer recent file project file see tag inside file tab result linux command locate search quickly database file file system awesome tip iceberg helm power source searching symbol function class globals etc current buffer helmimenu bookmark including chromefirefox bookmark html color showing color name hexadecimal code apt package check source helmmybuffers function see also using helmcsourceprojectilefileslist use another installable third party package called projectile search githgsvn file current directory parent extract current project file linking helm make super easy open file current project providing version control without browse filesystem even file never opened thus emacs recent file list another good combination helm nice emacs feature time included default helmimenu imenu pretty smart minor mode extract location inside buffer code programming language typically class method symbol calling helmimenu instead default imenu make easy jump quickly location inside buffer writing couple letter another great feature helm chance replace default mx menu interface mx use issue emacs command little like vim little ex mode vim evil another kind animal one great thing emacs command mode lot thing helm mx learn example remember show white space character press mx start write helm show first result whitespacemode exactly want also showed whitespacecleanup clear trailing whitespace discovered want check command related spelling mx spell list error code flycheck mx fly error sort line selection mx sort really convenient emacs newbie get lot thing done searching helmmx without search google map helmmx mx globalsetkey kbd mx helmmx another package also help learning use specific mode called discover major discovermymajor melpa invoking command name show function enabled current major mode great discover every mode another package also help learning use specific mode called discover major discovermymajor melpa invoking command name show function enabled current major mode great discover every mode edit thanks tuhdo comment told show full path file helmrecentf source vim mark evil mark emacs bookmark evil mark like vim jump mark mletter set mark muppercaseletter set mark work buffer mark pretty useful example quickly jump two three position inside file coding emacs also concept bookmark like interfile mark set name instead letter elisp bit config file saved session using helmbookmarks see set mapped spcb delete bookmark press tab inside helm subwindow see list action choose delete bookmark save bookmark setq bookmarkdefaultfile emacsdbookmarks bookmarksaveflag save every change narrowing folding evil work expected using operator vim added benefit using helmmx mx ret fold search folding command case forgot vimstyle operator emacs also support interesting feature called narrowing narrowing hide everything else file except narrowed function region pretty useful want make global replaces run macro want affect part buffer use much assigned shortcut use command narrowtoregion narrowtodefun finished working narrowed region display rest buffer widen command project management already mentioned projectile combined helm make searching project file convenient option one projectexplorer pretty much like vim project script enable show side split sorry window project file helm helmprojectile file explorer rarely needed time time nice tree view source code project code window opened command projectexploreropen assign shortcut one thing note using evil shortcut like tab toggle folder subtree work insert mode package projectexplorer projectexplorer setq pecachedirectory emacsdcacheprojectexplorer setq peomitregex concat peomitregex singleemails emacs use tag file format syntax different default ctags called etags generating etags easy since exuberantctags already know generate add e switch emacs distribution usually came etags binary using ctags patched version support language emacs etag binary support generated emacs ask tag file first time use tag command like findtag eviljumptotag jump specified tag loaded remember least current session still need find make remember path session defined createtags function emacs regenerate tag file ask directory use directory root scan place store tag file etags cond eq systemtype windowsnt setq pathtoctags c installsgnuglobalbinctagsexe cond eq systemtype gnulinux setq pathtoctags usrlocalbinctags defun createtags dirname create tag file interactive ddirectory message format f stag er pathtoctags directoryfilename dirname directoryfilename dirname shellcommand format f stag er pathtoctags directoryfilename dirname directoryfilename dirname third party package also support normal ctags file gnu global find etags support convenient need spell checking need install anything ispell system ispellbuffer start spell check current buffer alternative show shortcut ispellchangedictionary use another dictionary check another language prefer spell checking fly underline misspelled word use flyspellmode see alternative misspelled word press alt pc cursor word relative line number install package relativelinenumbers enable globally config file addhook progmodehook relativelinenumbersmode addhook progmodehook linenumbermode addhook progmodehook columnnumbermode easymotion evil ace jump functionality provided awesome easymotion plugin vim actually integrated default evil since incorporates package called ace jump mostly le powerful easymotion jump like backwardsonly forwardonly endofword others missing prefer easymotion show directly two char jump going require instead showing one pressing acejump important mode bidirectional jump word char one mostly using provided unlike easymotion jump word asks letter easily disabled setq acejumpwordmodeusequerychar nil author make case without asking char probably entering key press time probably true want jump random word inside buffer braineye connection already identified word stop lookthink first char end actually faster get jump shortcut word without provide leading character mapped wordlinechar elx evilleadersetkey e evilacejumpwordmode e ace jump word evilleadersetkey l evilacejumplinemode l ace jump line evilleadersetkey x evilacejumpcharmode x ace jump char one annoying thing vim user find emacs jumpy scrolling emacs scroll like vim line line leaving line starting scroll solution install package smoothscrolling add config setq scrollmargin scrollconservatively scrollstep perfect sometimes close start end file still jump powerline supereasy install powerlineevil package put config require powerline powerlineevilvimcolortheme displaytimemode syntactic checking fly flycheck one best vim plugins programmer syntastic run syntactic check auto detecting huge variety linters every time save emacs also similar package called flycheck even better run parallel work wait finish check like happens vim another related package flycheckpostip show error tooltip gui emacs obviously instead minibuffer full flycheck config flycheck package flycheck addhook afterinithook globalflycheckmode flycheck setq flycheckchecksyntaxautomatically save modeenabled setq flycheckcheckers delq emacslispcheckdoc flycheckcheckers setq flycheckcheckers delq htmltidy flycheckcheckers setq flycheckstandarderrornavigation nil globalflycheckmode flycheck error tooltip doesnt work console displaygraphicp selectedframe evalafterload flycheck customsetvariables flycheckdisplayerrorsfunction flycheckpostiperrormessages jk browsing wrapped line evil problem vim browsing jk long wrapped line jump entire real line instead visual line solution also easy definekey evilnormalstatemap kbd j evilnextvisualline definekey evilnormalstatemap kbd k evilpreviousvisualline escape thing one annoying thing emacs mx buffer one call emacs function use cg exit use escape vim user would tend default need hit key like million time like extremely frustrating anyway code emacs copied davvil initel github fixed esc quits defun minibufferkeyboardquit abort recursive edit delete selection mode mark active deactivate take second keyboardquit abort minibuffer interactive deleteselectionmode transientmarkmode markactive setq deactivatemark getbuffer completion deletewindowson completion abortrecursiveedit definekey evilnormalstatemap escape keyboardquit definekey evilvisualstatemap escape keyboardquit definekey minibufferlocalmap escape minibufferkeyboardquit definekey minibufferlocalnsmap escape minibufferkeyboardquit definekey minibufferlocalcompletionmap escape minibufferkeyboardquit definekey minibufferlocalmustmatchmap escape minibufferkeyboardquit definekey minibufferlocalisearchmap escape minibufferkeyboardquit globalsetkey escape evilexitemacsstate start maximized please another minor annoyance emacs gui start maximized default easy fix customsetvariables initialframealist quote fullscreen maximized start maximized ckcj page downup one thing surprised considering complete evil lack vim controldcontrolu page downup probably cu pretty important emacs shortcut give numeric parameter command think fact mapped vimrc ckcj think consistent vim jk movement key mapped emacs definekey evilnormalstatemap kbd ck lambda interactive evilscrollup nil definekey evilnormalstatemap kbd cj lambda interactive evilscrolldown nil coding style space instead tab emacs default really evil thing using tab character indentation right thing use space space per tab setqdefault tabwidth indenttabsmode nil also prefer bsd style code clike language c c java space tab instead also added setqdefault cbasicoffset cdefaultstyle bsd also nice package called dtrtindent automatically determine indentation setting used file currently editting adapt emacs setting great editing external file created reason follow different indentation rule one config file package dtrtindent dtrtindentmode autoindent return key default emacs indent new line press tab key good changed easily enough vim thing adjusting indentation every new line automatically definekey globalmap kbd ret newlineandindent show matching paren want show matching parenthesis brace bracket automatically add option showparenmode also install autopairs package automatically add matching parensbracesetc adding opening one mixed feeling convenient specially lisp also annoying want surround something parent add useless opening one use surround case half time forget enable autopairs put config file installing package require autopair autopairglobalmode fill column auto line breaking column limit mark visually mark configured fillcolumn mode like colorcolumn option vim install package fillcolumnindicator enable every mode want display fcimode see configure auto line breaking line exceed char text markdown file fill indicator line addhook textmodehook lambda turnonautofill fcimode setfillcolumn addhook markdownmodehook lambda turnonautofill fcimode setfillcolumn set nonautoline limit python cmode addhook pythonmodehook lambda fcimode setfillcolumn addhook cmodehook lambda fcimode setfillcolumn addhook dmodehook lambda fcimode setfillcolumn silver searcher ag know silver searcher like ack lot faster ag package allow make search without leaving emacs show result quickfixstyle window select result jump mx ag ret search ret directory ret spanish keyboard remaps use spanish keyboard yes know vim much better english keyboard using spanish layout since mean brain hardwired remaps made vim experience much better minus sign normal mode search escape insert mode want try kj thing remap key emacs know name function shortcut key point fortunately using ch k controlh release k tell name function associated next key press getting name function remaps easy remaps easy definekey evilnormalstatemap evilsearchforward definekey evilnormalstatemap evilex definekey evilinsertstatemap evilnormalstate create backup file use version control compulsive saver need backup file disabled vim also disabled emacs setq makebackupfiles nil move back cursor one position exiting insert mode something hated vim disabled following line vimrc autocmd insertenter let cursorcolumni col autocmd cursormovedi let cursorcolumni col autocmd insertleave col cursorcolumni call cursor col endif get behaviour evil set one option setq evilmovecursorback nil remember cursor position file reopening pretty easy setq saveplacefile emacsdsaveplace setqdefault saveplace require saveplace default emacs put scroll bar every window split imo incredibly ugly already position file powerline need scroll bar scrollbarmode graphical gdb emacs gdb mode enabled mx gdb ret binarypath pretty cool create several window style typical ide debugger enabled default enable setq gdbmanywindows gdb mode binary loaded change source code window use cx switch split mouse click vimstyle cw key binding work gdb mode load source code file want set breakpoints set break point mx gudbreak run program run r gdb window break point advance next n step local var register show one window breakpoints stack frame another one color identifier mode color delimiters plugin colorsidentifiersmode colorize every variable different color mixed feeling code look like fruit salad make really easy visually identify variable used using setup package coloridentifiersmode globalcoloridentifiersmode another firm step total fruitsalarization emacs rainbow delimiters package color nested delimiters different color check easily pair without move cursor lot nested parenthesis help lot see pair without move cursor package rainbowdelimiters addhook progmodehook rainbowdelimitersmode diminish clean clutter modeline diminish remove minor mode indicator mode line powerline example config require diminish diminish visuallinemode autopair diminish autopairmode undotree diminish undotreemode autocomplete diminish autocompletemode projectile diminish projectilemode yasnippet diminish yasminormode guidekey diminish guidekeymode eldoc diminish eldocmode smartparens diminish smartparensmode company diminish companymode elispslimenav diminish elispslimenavmode gitgutter diminish gitguttermode magit diminish magitautorevertmode hsminormode diminish hsminormode coloridentifiersmode diminish coloridentifiersmode select last yanked text pretty useful shotcut vimrc selects last pasted yanked text thanks comment delexi know function emacs called exchangepointandmarkwhich default cx cx remapped leaderv evilleadersetkey v exchangepointandmark emacs alternative popular vim plugins powerline powerlineevil emmet emmetmode mapped emmetexpandline default cj shortcut already defined evil surround evilsurround operator tabularvim mx alignregexp ret regexp ret visual selection rename mx diredjump r rename file ret reopen jdaddy really used prettify json object done function defined james p autocomplete company mode work much like youcompleteme vim give improved completion programming know difference company newer think acdcd package completing language autocomplete using vimdiff mx edifffiles ediffbuffers pretty similar press help use helm use helm file list press tab action list select one marking file ediff much quicker browsing hand file compare netrwnerdtree mx dired included mx dired installable random thought emacs evil vim copy paste system clipboard work without paste register still saved register also default register paste copying desktop program paste without specifying register pull register nice evil pu put paste current line window evil like register use emacs key binding q exit instead vim esc toolbar actually useful newbie like check use toolbar without mouse key binding paralellization nice love syntax checked without pause everything perfectly paralellized example package manager loading information package split sometimes take time interface hang one nice feature emacs almost always cancel long running process controlg
339,Lobsters,emacs,Emacs editor,Emacs may move from Elisp to Common Lisp,https://lists.gnu.org/archive/html/emacs-devel/2014-09/msg00434.html,emacs may move elisp common lisp,date prev date next thread prev thread next date index thread index emacs lisp future guile emacs thread guile emacs thread guile emacs thread guile emacs thread emacs lisp future guile emacs thread emacs lisp future guile emacs thread emacs lisp future guile emacs thread emacs lisp future emacs lisp future guile emacs thread emacs lisp future guile emacs thread emacs lisp future regular expression creation emacs lisp future regular expression creation emacs lisp future regular expression creation emacs lisp future regular expression creation emacs lisp future,date prev date next thread prev thread next date index thread index emacs lisp future guile emacs thread stefan monnier subject emacs lisp future guile emacs thread date tue sep useragent gnu gnulinux email partly chance work towards guilemacs moving official emacs git branch port happening anytime soon anyone running going good question opportunity think bit emacs lisp possible evolution still sure think see different option emacs lisp first course keep evolving elisp worked ok last year terrible choice main problem see elisp slow cpu nt getting faster slowness make noticed often lack feature notably ffi concurrency lack manpower last point strongest motivation try move system could use people work one option guileemacs presumably would give u faster implementation least theory bytecode significantly efficient would give u ffi would give u manpower since benefiting work done guile note guile come support threading nt immediately let u use concurrency guileemacs issue synchronizing access shared data existing emacs code c elisp assuming problem nt exist iow language support concurrency first step way letting emacs lisp use concurrency another detail need spelled difference language implementation guileemacs provides language emacs lip scheme well also provides important many people thinking cool able write extension scheme sure defining emacs editor come n extension language good idea one main reason emacs enduring success large set third party package obviously ca nt drop support elisp time soon much like scheme much unconvinced really much better worth converting package elisp scheme go guileemacs stuck guile ie old new package use elisp new package use scheme maybe yet new package use say javascript language support guile would make work emacs gnu elpa maintenance harder course guile manpower dry emacs would forced keep supporting guile work supporting elisp think ideally want stick elisp evolution thereof sadly nt see evolve elisp scheme closely related language difference large enough seems hard reconcile standard language elisp evolve afaict common lisp reader get disappointed others become excited incompatibility two language imagine working year even living without much trouble could use commonlisp library emacs course language side implementation side nt really know commonlisp implementation could reuse gnu implementation dormant manpower u tap still many commonlisp implementation probably one could work u stefan guile emacs thread christopher allan webber guile emacs thread eli zaretskii guile emacs thread grim schjetne emacs lisp future guile emacs thread stefan monnier emacs lisp future guile emacs thread lennart borgman emacs lisp future guile emacs thread jorgen schaefer emacs lisp future lars brinkhoff emacs lisp future guile emacs thread lally singh emacs lisp future guile emacs thread alexis emacs lisp future daniel colascione regular expression creation emacs lisp future alexis regular expression creation emacs lisp future aptel regular expression creation emacs lisp future alexis regular expression creation emacs lisp future stefan monnier
340,Lobsters,emacs,Emacs editor,Testing Emacs Packages: surprisingly non-awful,http://jamesporter.me/2014/05/15/testing-elisp.html,testing emacs package surprisingly nonawful,virtualenvs package old emacs virtualenv tool ert cask ertrunner ertrunner cask,last summer found dissatisfied existing solution managing python virtualenvs inside emacs wrote package partially exercise learn extending emacs partially attempt improve python programming workflow since time old emacs virtualenv tool deprecated mine become reasonably popular replacement figured people actually using probably start taking thing bit seriously write test accidentally break everyone workflow careless update previous brush emacs lisp development led believe experience going extremely painful happily turned case variety fancy elisp testing framework ended going one built emacs ert along cask ertrunner easily run test command line headless emacs instance describe experience like used nicer part emacs lisp make pleasant first thing wanted simply test activating virtualenv correctly make change ertdeftest macro used define test wrote ertdeftest venvworkonworks venvdeactivate venvworkon science store name correctly equal venvcurrentname science change path python mode scontains science pythonshellvirtualenvpath set path shell subprocesses scontains science getenv path set virtualenv jedi whoever else need scontains science getenv virtualenv add dir execpath scontains science car execpath note use macro state argument invocation evaluate nonnil value without throwing error test fail test work already virtualenv called science would probably fail tried run machine since probably next thing needed sort test fixture mechanism create temporary virtualenv test delete test done surprised find ert fixture mechanism builtin read manual suggested writing macro setup teardown oh course lisp easy forget lot language need thing like test fixture paper lack real metaprogramming capability wrote withtempenv macro use test defmacro withtempenv name rest form let venvlocation temporaryfiledirectory venvmkvirtualenv name form venvrmvirtualenv name macro take name temporary virtualenv create form execute virtualenv letbinds venvlocation value temporaryfiledirectory variable get set emacs startup platform specific location ok put temporary file finally make new temporary virtualenv correct name splicing name executes form splicing let body form destroys virtualenv done complicated seems work fine problem error thrown somewhere execution form temporary virtualenv never cleaned since venvrmvirtualenv never reached realized needed emacs equivalent finally clause mainstream language turn terrible aside confusing unwindprotect macro take form execute cleanup guarantee cleanup form run regardless whether error thrown main form used adjust withtempenv macro following defmacro withtempenv name rest form let venvlocation temporaryfiledirectory unwindprotect progn venvmkvirtualenv name form venvrmvirtualenv name wrap call venvmkvirtualenv form splicing progn order use unwindprotect since requires single form execute first argument overall shabby version robust error execution form able change venvworkonworks test following ertdeftest venvworkonworks withtempenv emacsvenvwrappertest venvdeactivate venvworkon venvtmpenv store name correctly equal venvcurrentname venvtmpenv change path python mode scontains venvtmpenv pythonshellvirtualenvpath set path shell subprocesses scontains venvtmpenv getenv path set virtualenv jedi whoever else need scontains venvtmpenv getenv virtualenv add dir execpath scontains venvtmpenv car execpath work reliably system besides also able use withtmpenv macro unwindprotect test eg ertdeftest venvcdvirtualenvworks withtempenv venvtmpenv let oldwd defaultdirectory unwindprotect progn venvcdvirtualenv scontains venvtmpenv defaultdirectory cd oldwd test venvcdvirtualenv command work correctly one thing missing point good test runner like python nosetests convenient able type one command test collected run nicely reported output end bit complicated emacs world due need spin headless emacs instance nearly bad expecting found ertrunner cask extension running ert test cask project management tool emacs package somewhat like bundler ruby world leiningen clojure somewhat miffed get set bad matter adding short cask file project root directory bonus install dependancies development cask install dev ertrunner automatically detect ert test test directory project root run clean emacs instance type get relatively nice test output loading usersjamesprojectsvirtualenvwrapperelvirtualenvwrapperel source running test deleted virtualenv emacsvenvwrappertest passed venvcdvirtualenvworks deleted virtualenv copyoftmpenv deleted virtualenv emacsvenvwrappertest passed venvcpvirtualenvworks deleted virtualenv emacsvenvwrappertest passed venvdeactivateworks deleted virtualenv emacsvenvwrappertest passed venvlistvirtualenvsworks deleted virtualenv emacsvenvwrappertest passed venvmkvirtualenvworks deleted virtualenv emacsvenvwrappertest passed venvrmvirtualenvworks passed venvworkonerrorsfornonexistance deleted virtualenv emacsvenvwrappertest passed venvworkonworks ran test result expected cool moral story afraid testing emacs lisp code bad
341,Lobsters,emacs,Emacs editor,Webkit in Emacs,http://www.emacswiki.org/emacs/WebKit,webkit emacs,,
343,Lobsters,emacs,Emacs editor,Emacs - The Editor of a Lifetime,http://youtu.be/VADudzQGvU8,emacs editor lifetime,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature editor lifetime youtube,press copyright contact u creator advertise developer term privacy policy safety youtube work test new feature editor lifetime youtube
344,Lobsters,emacs,Emacs editor,Using Emacs with Clojure,http://www.braveclojure.com/4-using-emacs-with-clojure/,using emacs clojure,use emacs anâ excellent clojure editor cursive nightcode installation o x http emacsformacosxcom ubuntu http launchpadnetcassouarchiveemacs window http ftpgnuorggnuemacswindows configuration http http githubcomflyingmachineemacsforclojure emacs escape hatch emacs buffer cx b cx k enter cx b working file cx cf cx c cx k cx cf cx b cx b cx cf cx c cx cf key binding mode emacs lisp interpreter cx b cx c f mx mx mx mode cc ck mx mx installing package mx mx mx http core editing terminology key binding point ck ck c movement ca mm ce cf cb mf mb c c cr c mg g selection region cspc cspc mf c mx killing kill ring mw mw md cy cw mw cy md ck editing help tab cj ch k keybinding ch k ch f cx q using emacs clojure fire repl http githubcomclojureemacscider mx mx interlude emacs window frame cx cx cx cx cx cx cx cx cx b http wwwgnuorgsoftwareemacsmanualhtmlnodeelispwindowshtml window cornucopia useful key binding ce cx ce cx ce cu cx ce cc mn mn cc ck center cc cd cd q cc cd ca http githubcomclojureemacscider cc mn mn cx ce cc ck cc cd cd cc cd ca c c center handle error cx q cc ck q paredit http githubcomgeorgekpareditcheatsheetblobmasterpareditcheatsheetpdf mx wrapping slurping barfing navigation cmf cmb mx c c cmf cmb continue learning summary,title use emacs anâ excellent clojure editor kind chapter book cftbat chapter use emacs anâ excellent clojure editor journey clojure mastery editor closest ally highly recommend working emacs course use editor want follow thorough emacs instruction chapter choose use different editor worthwhile least invest time setting editor work repl two alternative recommend well regarded community cursive nightcode reason recommend emacs offer tight integration clojure repl allows instantly try code write kind tight feedback loop useful learning clojure later writing real clojure program emacs also great working lisp dialect fact emacs written lisp dialect called emacs lisp elisp end chapter emacs setup look something like figure figure typical emacs setup working one side repl theâ get start installing emacs setting newpersonfriendly emacs configuration learn basic open edit save file interact emacs using essential key binding finally learn actually edit clojure code interact repl installation use latest major version emacs emacs platform working o x install vanilla emacs mac app http emacsformacosxcom option like aquamacs supposed make emacs problematic long run set differently standard emacs difficult use emacs manual follow along tutorial ubuntu follow instruction http launchpadnetcassouarchiveemacs window find binary http ftpgnuorggnuemacswindows download unzip latest version run emacs executable binrunemacsexe installed emacs open see something like figure figure screen emacs display open first time welcome cult emacs made richard stallman proud configuration created repository file need configure emacs clojure available http note tool constantly updated instruction nt work want use latest configuration please read instruction http githubcomflyingmachineemacsforclojure following delete existing emacs configuration install clojurefriendly one close emacs delete emacs emacsd exist window user emacs file probably live c usersyourusernameappdataroaming example would delete c usersjasonappdataroamingemacsd emacs look configuration file deleting file directory ensure start clean slate download emacs configuration zip file listed unzip content folder run mv emacsd open emacs open emacs may see lot activity emacs downloads bunch useful package activity stop go ahead quit emacs open nt see activity ok quit restart emacs funsies see window like one figure figure emacs look installing sweet new configuration got everything set learn use emacs emacs escape hatch dig fun stuff need know important emacs key binding ctrlg key binding quits whatever emacs command trying run thing going right hold ctrl press g try close emacs make lose work cancel current action emacs buffer editing happens emacs buffer first start emacs buffer named scratch open emacs always show name current buffer bottom window shown figure figure emacs always show name current buffer default scratch buffer handle parenthesis indentation way optimal lisp development inconvenient writing plain text create fresh buffer play around without unexpected thing happen create buffer hold ctrl press x release ctrl press b express sequence compact format cx b performing key sequence see prompt bottom application shown figure figure minibuffer emacs prompt input area called minibuffer emacs prompt input right prompting u buffer name enter name buffer already open enter new buffer name type emacsfuntimes press enter see completely blank buffer start typing find key mostly work way expect character appear type left right arrow key move expect enter creates new line also notice suddenly sporting bushy unix beard birkenstocks unless begin help ease lingering trepidation feel using emacs done messing around go ahead kill buffer typing cx k enter might come surprise emacs actually quite violent making ample use term kill killed emacsfuntimes buffer back scratch buffer general create many new buffer want cx b also quickly switch buffer using command create new buffer way exists memory save file buffer necessarily backed file creating buffer necessarily create file learn working withâ file working file key binding opening file emacs cx cf notice need hold ctrl pressing x f get another minibuffer prompt navigate emacsdcustomizationsuiel customizes way emacs look interact emacs open file new buffer name filename go line uncomment removing leading semicolon itâ look like setq initialframealist top left width height change value width height set dimension character active window changing value set emacs window open certain size every time start try something small first like setq initialframealist top left width height save file following key binding cx c get message bottom emacs like wrote userssnuffleupagusemacsdcustomizationsuiel also try saving buffer using key binding use application example ctrls cmds emacs configuration downloaded allow work big deal saving file quit emacs start bet tiny see example figure figure configure emacs set height width every time open go process couple time emacs start aâ size like comment line done case emacs open default width height ifâ done editing uiel close buffer cx k either way done saving first file emacs something crazy happens follow instruction page get emacs working want create new file use cx cf enter new path minibuffer soon save buffer emacs create file content path entered recap emacs editing take place buffer switch buffer use cx b enter buffer name minibuffer create new buffer use cx b enter new buffer name open file use cx cf navigate file save buffer file use cx c create new file use cx cf enter new path save buffer emacs create file filesystem key binding mode already come long way use emacs like basic editor help get ever need use emacs server forced pairing emacs nerd however really productive useful know key detail key binding haha introduce emacs mode cover core terminology go bunch super useful key binding emacs lisp interpreter term key binding derives fact emacs bind keystroke command elisp function use command function interchangeably example cx b bound function switchtobuffer likewise cx c bound savefile emacs go even even simple keystroke like f bound function case selfinsertcommand command adding character buffer editing point view function created equal redefine function even core function like savefile probably want redefine core function redefine function core emacs lisp interpreter happens load codeediting facility emacs written elisp perspective emacs savefile function switchtobuffer almost command run function create treated way builtin function even use emacs execute elisp modifying emacs run freedom modify emacs using powerful programming language make emacs flexible people like crazy yes lot surfacelevel complexity take time learn underlying emacs elegant simplicity lisp infinite tinkerability come tinkerability limited creating redefining function also create redefine remove key binding conceptually key binding entry lookup table associating keystroke function lookup table completely modifiable also run command name without specific key binding using mx functionname example mx savebuffer stand meta key modern keyboard posse mapped alt window linux option mac mx run smex command prompt name another command run understand key binding function able understand mode work mode emacs mode collection key binding function packaged together help productive editing different type file mode also thing like tell emacs syntax highlighting secondary importance cover example editing clojure file want load clojure mode right writing markdown file using markdown mode lot useful key binding specific working markdown editing clojure best set clojurespecific key binding like cc ck load current buffer repl compile mode come two flavor major mode minor mode markdown mode clojure mode major mode major mode usually set emacs open file also set mode explicitly running relevant emacs command example mx clojuremode mx majormode one major mode active time whereas major mode specialize emacs certain file type language minor mode usually provide functionality useful across file type example abbrev mode expands text based predefined abbreviation per emacs manual multiple minor mode active time see mode active mode line shown figureâ figure mode line show mode active open file emacs load major mode chance one exists need download package speaking installing package many mode distributed package bundle elisp file stored package repository emacs installed beginning chapter make easy browse install package mx packagelistpackages show almost every package available make sure run mx packagerefreshcontents first get latest list install package mx packageinstall also customize emacs loading elisp file file find internet guide found http good description load customizations section new toward bottom article core editing terminology key binding want use emacs like text editor skip section entirely missing great stuff section go key emacs term select cut copy paste text select cut copy paste text see ha ha ha move buffer efficiently get started open new buffer emacs name jackhandy enter following jackâ handy quotation pirate know would one thing would really make mad treasure chest handle hell supposed carry face child say especially mouth part face boxing like ballet except music choreography dancer hit use example experiment navigation editing section point following along see redorange rectangle emacs buffer cursor graphical representation point point magic happens insert text point editing command happen relation point even though cursor appears rest top character point actually located character previous one example place cursor f pirate point located f use ck text letter f onward disappear ck run command killline kill text point current line talk killing later undo change c also try normal o key binding undo work well movement use arrow key move point like editor many key binding allow navigate efficiently shown tableâ table key binding navigating text key description ca move beginning line mm move first nonwhitespace character line ce move end line cf move forward one character cb move backward one character mf move forward one word use lot mb move backward one word use lot c regex search text current buffer move press c move next match cr c search reverse move beginning buffer move end buffer mg g go line go ahead try key binding jackhandy buffer selection region emacs select text create region setting mark cspc ctrlspacebar move point everything mark point region similar shiftselecting text basic purpose example following jackhandy buffer go beginning file use cspc use mf twice see highlighted region encompassing press backspace delete one cool thing using mark instead shiftselecting text free use movement command set mark example could set mark use c search bit text hundred line buffer would create large region strain pinky holding shift region also let confine operation limited area buffer try create region encompassing face child say use mx replacestring replace face head perform replacement within current region rather entire buffer point default behavior killing kill ring application cut text mildly violent also copy paste cutting copying add selection clipboard pasting copy content clipboard current application emacs take homicidal approach kill region adding kill ring feel braver truer knowing laying waste untold kilobyte text yank inserting recently killed text point also copy text kill ring without actually killing bother morbid terminology well first frightened hear someone talking killing thing emacs important emacs allows task typical cutcopypaste clipboard featureset emacs store multiple block text kill ring cycle cool cycle retrieve text killed long time ago see action create region word treasure first line use mw bound killringsave command general mw like copying add region kill ring without deleting buffer move point word choreography last line use md bound killword command add choreography kill ring deletes buffer use cy yank text killed choreography inserting point use remove choreography yank next item kill ring treasure see useful killyank key binding table table key binding killing yanking text key description cw kill region mw copy region kill ring cy yank cycle kill ring yanking md kill word ck kill line editing help table show additional useful editing key binding know dealing spacing expanding text table useful editing key binding key description tab indent line cj new line indent equivalent enter followed tab hippie expand cycle possible expansion text point delete space tab around point use one lot emacs also excellent builtin help two key binding shown table serve well table key binding builtin help key description ch k keybinding describe function bound key binding get work actually perform key sequence typing ch k ch f describe function help text appears new window concept cover later chapter close help window pressing cx q using emacs clojure next explain use emacs efficiently develop clojure application learn start repl process connected emacs work emacs window cover cornucopia useful key binding evaluating expression compiling file performing handy task finally show handle clojure error introduce feature paredit optional minor mode useful writing editing code lispstyle language want start digging clojure code please skip ahead always return later fire repl learned chapter repl allows interactively write run clojure code repl running clojure program give prompt read input evaluates print result loop back prompt chapter started repl terminal window lein repl section start repl directly clojure connect emacs repl use emacs packagecider available http githubcomclojureemacscider followed configuration instruction earlier chapter already installed also install running mx packageinstall entering cider pressing enter cider allows start repl within emacs provides key binding allow interact repl efficiently go ahead start repl session using emacs open file clojurenoobsrcclojurenoobcoreclj created chapter next use mx ciderjackin start repl creates new buffer interact short wait le minute see something like figure figure emacs look like running mx ciderjackin two window coreclj file open left repl running right never seen emacs split half like worry talk emacs split window second meantime try evaluating code repl type following bolded line result see printed repl press enter shown line code worry code time cover function next chapter map inc reduce pretty nifty use repl used lein repl first chapter also whole lot go explain work splitscreen emacs interlude emacs window frame take quick detour talk emacs handle frame window go useful windowrelated key binding feel free skip section already familiar emacs window emacs invented like something us terminology slightly different used would normally refer window emacs call frame frame split multiple window splitting multiple window allows view one buffer time already saw happen ran ciderjackin see figure figure emacs frame contains window table show several key binding working frame window table emacs window key binding key description cx switch cursor another window try switch clojure file repl cx delete window leaving current window frame close buffer cause lose work cx split frame cx split frame side side cx delete current window encourage try emacs window key binding example put cursor left window one clojure file use cx window disappear see clojure code following use cx split window side side use cx switch right window use cx b ciderrepl switch cider buffer right window experimented bit set emacs contains two sidebyside window clojure code left cider buffer right previous image interested learning window frame emacs manual ton info see http wwwgnuorgsoftwareemacsmanualhtmlnodeelispwindowshtml window navigate emacs window time learn clojure development key binding cornucopia useful key binding ready learn key binding reveal true power using emacs clojure project command let evaluate tweak compile run code dainty keystroke start going quickly evaluate expression bottom coreclj add following println cleanliness next godliness use ce navigate end line use cx cethe text cleanliness next godliness appear cider buffer shown figure figure instantly evaluating code another buffer repl key binding cx ce run command ciderevallastexpression name suggests command sends expression immediately preceding point repl evaluates expression also try cu cx ce print result evaluation point try run main function wrote chapter let world know little teapot coreclj buffer use cc mn mn key binding set namespace namespace listed top current file prompt right window read clojurenoobcore gone detail namespaces yet enough know thatâ namespace organizational mechanism allows u avoid naming conflict next enter main prompt repl print imâ little teapot exciting create new function run bottom coreclj add following defn train println choo choo done save file use cc ck compile current file within repl session compile code repl aware change run train repl echo back choo choo still repl try ctrl plus arrow key cycle repl history includes clojure expression asked repl evaluate note mac user default o x map mission control command change mac key binding opening system preference going keyboardshortcutsmission control finally try type main repl prompt note lack closing parenthesis press center cider close parenthesis evaluate expression nice little convenience cider provides dealing many parenthesis cider also key binding great learning clojure pressing cc cd cd display documentation symbol point huge timesaver done documentation press q close documentation buffer key binding navigate source code symbol point return original buffer position finally cc cd ca let search arbitrary text across function name documentation great way find function exactly remember itsâ name cider readme http githubcomclojureemacscider comprehensive list key binding learn time table contain summary key binding went table clojure buffer key binding key description cc mn mn switch namespace current buffer cx ce evaluate expression immediately preceding point cc ck compile current buffer cc cd cd display documentation symbol point navigate source code symbol point return original buffer cc cd ca apropros search find arbitrary text across function name documentation table cider buffer key binding key description cycle repl history center close parenthesis evaluate handle error section write buggy code see emacs responds recover error continue merry way repl buffer coreclj buffer start repl prompt type map press enter see something like figure figure happens run bad code repl see calling map argument cause clojure lose show arityexception error message repl buffer fill left window text look like raving madman raving stack trace show function actually threw exception along function called function stack function call stack trace difficult decipher starting learn get useful information cider give hand allowing filter stack trace reduces noise zero cause exception line cidererror buffer filter clojure java repl tooling duplicate click option activate filter also click stack trace line jump corresponding source code close stack trace left window use cx switch window press q close stack trace go back cider want view error switch cidererror buffer also get error message trying compile file see go coreclj buffer write buggy code compile add map end use cc ck compile see cidererror buffer similar one saw earlier press q close stack trace paredit writing code clojure buffer may noticed unexpected thing happening example every time type left parenthesis right parenthesis immediately get inserted occurs thanks pareditmode minor mode turn profusion parenthesis liability asset paredit ensures parenthesis double quote bracket closed relieving odious burden paredit also offer key binding easily navigate alter structure created parenthesis next section go useful key binding also check comprehensive cheatâ sheet http githubcomgeorgekpareditcheatsheetblobmasterpareditcheatsheetpdf cheat sheet red pipe represents point however used paredit sometimes annoying think worth take time learn always disable mx pareditmode toggle mode andâ following section show useful key binding wrapping slurping wrapping surround expression point parenthesis slurping move closing parenthesis include next expression right example say start want get wrap add asterisk slurp first place point represented vertical pipe type binding pareditwrapround getting result add asterisk space slurp press make easy add extend parenthesis without wasting precious moment holding arrow key move point barfing suppose preceding example accidentally slurped four unslurp also known barfing place cursor anywhere inner parenthesis use tada know expand contract parenthesis navigation often writing lisp dialect work expression like map comp record first dq find post search fulltext postcontent search post content dbdb q params kind expression useful jump quickly one next put point right opening parenthesis cmf take closing parenthesis similarly point right closing parenthesis cmb take opening parenthesis table summarizes paredit key binding learned table paredit key binding key description mx pareditmode toggle paredit mode surround expression point parenthesis pareditwrapround slurp move closing parenthesis right include next expression barf move closing parenthesis left exclude last expression cmf cmb move openingclosing parenthesis continue learning emacs one longestlived editor adherent often approach fanaticism enthusiasm awkward use first stick amply rewarded lifetime whenever open emacs feel inspired like craftsman entering workshop feel realm possibility open feel comfort environment evolved time fit assortment package key binding help bring idea life day afterâ day resource help continue emacs journey summary whew covered lot ground know true nature lisp interpreter key binding act shortcut execute elisp function mode collection key binding function learned interact emacs term mastered buffer window region killing yanking finally learned easily work clojure using cider paredit hardwon emacs knowledge belt time start learning clojure earnest
345,Lobsters,emacs,Emacs editor,"srclib: a hackable, polyglot source analysis library for making better code tools",https://srclib.org/,srclib hackable polyglot source analysis library making better code tool,problem,problem right people write code editor nt give much programming assistance possible creating editor plugin language analyzer favorite language editor combo lot work done plugin support single language editor maybe half feature wanted standard crosslanguage crosseditor apis data format difficult reuse plugin language editor language n editor need build n different plugins number get large quickly suffer poor developer tool step build language analyzer next build editor plugins
346,Lobsters,emacs,Emacs editor,a GNU doc viewer,https://github.com/nicferrier/gnudoc-js,gnu doc viewer,gnu doc viewer see http gnudocferriermeuk news role elnode,gnu doc viewerthis example gnu doc viewer single page javascript appthat mean webapp use modern browser view context change see using browser page change dom manipulation achieved ajax eventsthe app designed show complex info reader could made little control htmleventually perhaps could info reader browser would useful every smart phone good browser perhaps emacs could even open info page phone second screenthe html proxied gnu website emacs lisp manual simplify thing slightly mostly would difficult make info reader gnu document would require bit code mapping together enhancement suggestion herecan see sure visit http aug menu commandpress get menu completioncomplete tab keypress esc get rid boxthis prerequisite multiple manual aug index lookup system somewhat like gnu infospress get index boxpress esc get rid index boxpress tab index box try completionif completion selection list appearyou click selection simply type narrowthe role elnodeelnode easy make lot different thing app proxying gnu website send emacs info manual node j browserifying javascript browserify particular way combining javascript file together elnode could easily replaced technology using easy mehow todependencies emacs emacs npmthe dockerfile describes build process
347,Lobsters,emacs,Emacs editor,A Package in a league of its own: Helm,https://tuhdo.github.io/helm-intro.html,package league helm,,key binding prefix prefix cx c default cc h set description imenu facility offer way find major definition function definition variable definition file name run imenu command individually semantic package provides languageaware editing command based sourcecode parser enabled file visit automatically parsed semantic provides execellent support cc enable semantic mode execute semanticmode helm offer interface semantic imenu time semanticmode active current buffer use semantic generating tag otherwise fall back imenu point symbol helm feed symbol input prompt default helmsemanticorimenu work many mode like cc java python ruby emacs lisp lisp general shell script enable fuzzy matching semantic imenu listing add following setting setq helmsemanticfuzzymatch helmimenufuzzymatch usage invoke command default cc h use arrow key cpcn move candidate also use c c move selection tag inside helm semantic buffer point move tag location well nice feature helmsemanticorimenu whenever activate command point inside semantic tag function definition selection positioned tag helm buffer work nicely combination c c move definition buffer helm give finer control move function using beginningofdefun bound cma endofdefun bound cme also move point scroll buffer using helmsemanticorimenu similar behavior choice either cg return back position originally invoked helmsemanticorimenu needed look function interface eg see kind parameter function accepts ret jump tag location currently semantic part helmsemanticorimenu supported buffer imenu support command wo nt able use feature helmsemanticorimenu provides type semantic tag dependency dependency current file defined current major mode example dependency cc include header file execute persistent action dependency point move location dependency current window variable variable defined current buffer function function defined current buffer provides module buffer provides example provide expression emacs lisp want filter tag type enter caret character beginning line regex follow first character type example see function tag type f prompt demo demo begin start demo minibuffer first use helmsemanticorimenu move function helmdefinekeywithsubkeys move point start helmsemanticorimenu helmdefinekeywithsubkeys preselected move point variable helmmap execute helmsemanticorimenu two function helmnextsource helmprevioussource time instead showing current semantic tag operating helmmap show two tag helm semantic buffer supplied prefix argument running command demo helmsemanticorimenu action please notice pattern prompt minibuffer press ret visit candidate location example demonstration narrow anything want search pattern separated space eg use two pattern func part function name helm narrow fine demo see thing like class class defined typedef
348,Lobsters,emacs,Emacs editor,Evil Mode: How I Switched From VIM to Emacs,http://blog.jakubarnold.cz/2014/06/23/evil-mode-how-to-switch-from-vim-to-emacs.html,evil mode switched vim emacs,jako hra ale se mohou velice formou bude bavit online naâ trhu python ruby php c java javascript hru tetri ruletu jazyky pro hry pro telefony lego mindstorms programmer lega lego super mario ne na kurzy jako je codeorg aplikaci kodu od microsoftu je zdarma kurz codinggame sololearn khan academy sudoku stylu maria java naleznete zde bez wikipedie wikipedii online pokeru studium na zrychlete si jeho tipy na software zdarma,ministerstvo varuje na vzniknout jako hra ale se mohou velice formou bude bavit foto pixabay online naâ trhu fortuna bonus za tipsport bonus k vkladu za synot tip bonus k vkladu za chance bonus k vkladu za ministerstvo varuje na vzniknout se jako ale sâ se tomuto kâ tomu kdo dispozice kolik je ochoten ale je je si ujasnit co od jestli si chcete napsat webovou aplikaci nebo program pro pc atd podle toho se jazyka se pro na c nebo pascal sice byste zâ nich pochytili ty jsou ale je na jazyku dnes je velice python ruby php c java javascript zcela pro je c je si stanovit se jakmile napsat hru tetri bude se zâ ale zkusit ruletu jazyky java se vâ c nebo net jazyk je trochu ale zase kamkoliv php mezi sâ jazykem se na trhu python velice jednoduchou syntaxi ale je velice pro foto pixabay pro abyste se mohli programovat pochopit logiku stavbu struktury hry pro telefony tablety se lego mindstorms programmer pro io android se tedy programy stavebnici od lega kâ tomu program je ke zdarma jestli je na moc tak lego super mario ne na kurzy jako je codeorg jsou zde kurzy nebo dokonce ty na kolem let se jim logika je videa jsou vâ mohou aplikaci kodu od microsoftu se engine si zâ mohou hru program podporuje se pro ke je zdarma kurz se zapsat kurzu ale celou vâ jsou tyto kurzy na se programovat po kurzy roku rok bychom aplikace dovedou hravou formou jsme codeorg ale projekty jako je codinggame kde se video vâ hned vedle je okno kam zapisujete syntaxi upravujete chod videohry je velice si sami vybrat jazyk si touto formou tento je anglicky zâ lze kâ je sololearn zde se programovat vâ pythonu c nebo vâ lekce absolvovat ale lze si aplikace pro android io se u znalosti pokud se chcete sql potom je dobrou volbou khan academy kde je kurz vâ co si zkusit naprogramovat budete znalosti sudoku stylu maria java pokud chcete proniknout vâ jazyce java pro je velice kapitol naleznete zde pokud byste jen tak potom lze zâ na youtube si pustit rovnou si podle nastavit hned nic je dalo se jako bez jakmile svou posunete na ãºlohy jako je jako optimalizace zde si definici zâ wikipedie jako nebo optimalizace lp se minimum nebo maximum funkce na soustavou nerovnic abyste naplno budete se muset naladit se na je design ze komponent program se pak zâ komponent mohou projekty pro definici wikipedii je jako online pokeru se snadno ale aby se z stal je cesta velmi se natolik studium na zrychlete si jeho tipy na software zdarma hrajte ministerstvo varuje na vzniknout se
349,Lobsters,emacs,Emacs editor,"Read Lisp, Tweak Emacs",http://sachachua.com/blog/series/read-lisp-tweak-emacs/,read lisp tweak emacs,,symbol usually function name unless part list literal number string etc learn recognize literal list later math operator like go number work emacs lisp operator function start expression followed thing going operate argument calculate emacs lisp note multiplication surrounded parenthesis even usually leave parenthesis math emacs lisp function call set parenthesis let take closer look math expression emacs lisp expression see operator beginning whatever working parenthesis enclose everything related operator understanding let read code like call globalhllinemode function highlight current line call showparenmode function show matching parenthesis cursor call blinkcursormode function argument turn blinking cursor call findfile function todoorg file home directory open file creating exist yet turn eldocmode display argument list current function move cursor around see argument list function addhook emacslispmodehook turnoneldocmode turn eldocmode buffer switched emacs lisp mode learn thing section thing taken literally module find something function argument take keyboard shortcut use ch f describefunction command give function name example ch f addhook show documentation addhook ch f showparenmode show documentation documentation showparenmode start showparenmode interactive autoloaded lisp function interactive function function called mx keyboard shortcut usually function find useful interacting emacs noninteractive function tend internal use code emacs lisp code call read description function learn argument pas change behavior mention prefix argument mean change behaviour typing cu call function emacs extensively documented whenever come across strange function check ch f describefunction emacs lisp source installed learn function work follow link documentation use mx findfunction learn fact learn function even know called example know keyboard shortcut see item one menu use ch k describekey learn command emacs show function associated keyboard shortcut menu item also look function keyword use mx apropos use ch f describefunction learn following function describefunction yes also function documentation give alternative keyboard shortcut f findfile use open specific file see function description learn use remote file message example function variable number argument first argument say message displayed rest argument contain value justonespace handy way clean space keyboard shortcut bound look emacs configuration code would like understand use ch f describefunction learn function code example snippet configuration function savehistmode tooltipmode toolbarmode menubarmode scrollbarmode prefercodingsystem
350,Lobsters,emacs,Emacs editor,Why I Use Emacs,http://cs.mcgill.ca/~vfoley1/posts/2014-06-10-why-emacs.html,use emacs,use emacs introduction colleague emacs editor emacs operating system emacs development environment emacs lisp machine conclusion,use emacs introduction day lab friendly argument colleague merit emacs v vim long time ago power vim user could move place file without thinking left wq file edited editor vimrc easily complex configuration file system wo nt get detail switched long story short language interested back common lisp ocaml way better emacs mode vim instead explain reason using emacs past year see sticking many year come emacs editor joke go emacs great operating system lack good text editor usually uttered vim user editor consider superior manipulating text emacs people using editor eg atom sublime text parrot vim user truth emacs great text editor learn use properly beyond basic movement command moving one characterwordsentenceparagraph time emacs many command make manipulating text great sexp manipulation emacs written lisp command work sexpression level great selecting current form currently within moving enclosing one leftright sibling etcadvanced search replace functionality like editor emacs search string also search regular expression searchreplace command power regular expression often helpful perform complex manipulation enough even inject lisp code replacement macro search replace powerful enough requires much hackery work properly one possible avenue use macro macro allow record keystroke replay later careful initial recording use general command possible apply macro entire file successfully modify use macro practically every day use emacshippieexpand often want write word already exists somewhere either current buffer another buffer perhaps filename etc hippieexpand command search many source input try complete partial word written use much another program feel paralyzedmx align often write program multiple consecutive line structure differ content example tabular section latex mx align mx alignregex two command help get different part text properly aligned nice text always better look atrectangular editing though definitely lacking compared vim visual block mode rectangular editing feature often lacking editor cool add delete modify text multiple line interactively mx ibuffer ibuffer allows see file currently opened generally buffer exist emacs manipulate one manipulation mark give edition command perform usually search replace great want modify multiple filesevilmode end day still find vim superior program manipulating text install evilmode vim emulation layer give vast majority vim command inside emacs many editor offer vim compatibility mode always superficial beyond insert normal mode much see evilmode hand support vim command know use text object visual block editing complex ex command eg norm work macro vim undo command etc favorite command yet highly possible worked right several vim plugins ported evilmode eg nerd commenter matchit vim user encourage give try toy serious polished project emacs operating system going back joke emacs great operating system lack good editor turn part emacs great operating system also true diredmode diredmode allows manipulate directory file file system within emacs create directory copymovedelete file rename file etc manipulating file shell using diredmodeembedded shell emacs many way give access shell mx shell basic shell mx eshell shell integrates nicely emacs lisp mx ansiterm actual terminal emulator keyboard shortcut command use cx mx shell cx mx ansiterm quickly switch editing task shellpackage manager emacs mode lisp program give new capability used find download compile mode newlyadded packagemanager mx listpackages repository melpa installing new capability emacs easier using aptgetsystem utility emacs many utility interact unix system use often mx man view man page mx ispell spellcheck document mx grep perform grep file system within emacs visit result mode also exist user ack ag find many utility emacs package manageridomode ido emacs mode make switching buffer easier whereas modern editor use tab represent every opened file emacs without waste screen estate instead ido allows quickly switch one buffer another typing part buffer name want switch support flexmatching also integrates opening writing file even hundred buffer ido make switching easy efficienttramp tramp allows emacs user open file network ftp ssh many others open file using sudo useful want open file remote machine without launch terminal connect sshinfo emacs entire documentation builtin info using ch find information great number subject emacs manual emacs lisp reference documentation many mode installed system etcthemes emacs large collection color theme match mood personal recommendation want something light leuven nice also fan phoenixdarkpink want something dark low contrastirc people nt really using tool different task prefer use one tool per task mostly however irc different use discus member lab conversation another program might miss focused programming task use circe emacs someone talk channel small notification appears modebar shortcut cc cspc allows quickly switch channel read going switch back work emacs development environment programmer emacs feature development really drew emacs support practically known programming language often support better anything else find one great advantage wide support use emacs programming need whatever language may benefit intimate knowledge editor seems like much better deal knowing le detail one editor per language also le annoying le memory hungry happen work many different language eg python django template html cs javascript mode language programming mode usually feature syntax highlighting auto indenting something pretty much standard programmer editor worth mentioning find support language emacs editor programming mode also offer extra functionality specific language switching ml mli ocaml shifting block leftright pythoncompiler integration using mx compile command allows interact build system make emacs able parse output make allows move backandforth different error warning support integrating ant maven available package managerrepl integration many language repl readevalprint loop allows programmer use language interactively emacs great support repls allowing run inside emacs send command source file buffer repl processdebugger support although big fan debugger support emacs gud mode allows emacs become bugfinding stationtags tag mechanism index different identifier program emacs us information allow programmer find declaration site function example ctags basic emacs also support advanced tool cscope gnu globalmagit git took programming world storm year ago today de facto standard vcs tool used million programmer magit emacs userfriendly interface git command supported however basic flow git committing pushing pulling viewing log branching tagging etc supported magit reason switch mercurial gitflymake flymake allows emacs run compilerinterpreter background detect syntax semantic error program report immediatly squiggly line big fan kind thing go emacs lisp machine emacs really lisp machine mode written lisp configure editor using lisp command lisp machine also allows cool mode mentioned need something always use emacs lisp code although emacs lisp greatest language world still powerful sophisticated language used transform problem solution entire community use unbounded extensibility reason gnu emacs still used today year initial release piece software keep time eventually replaced something better giving user emacs power fit anything please author emacs ensured people interested keeping date conclusion emacs may everyone accept strongly suggest give try adopt go back preferred editor bring something new fresh development probably still using emacs start emacs pinkie syndrome always enable evilmode
351,Lobsters,emacs,Emacs editor,"An implementation of Common Lisp, written in Emacs Lisp",https://github.com/larsbrinkhoff/emacs-cl,implementation common lisp written emacs lisp,emacscl,emacscl emacs common lisp implementation common lisp written emacs lisp
352,Lobsters,emacs,Emacs editor,A collection of simple clojure refactoring functions for Emacs,https://github.com/magnars/clj-refactor.el,collection simple clojure refactoring function emacs,cljrefactorel installation melpa melpa stable setup refactornrepl nt need modified anymore usecase installation compatibility middleware case used advanced astbased refactorings analyzer usage list available refactorings hydra changelog contribute cask contribution guideline everyone license magnars gmailcom expez expezcom http wwwgnuorglicenses,cljrefactorel cljrefactor provides refactoring support clojure project complement refactoring functionality find clojuremode cider small teaser helping add missing libspec installation highly recommended install cljrefactor packageel available melpa melpa stable mx packageinstall cljrefactor setup require cljrefactor defun myclojuremodehook cljrefactormode yasminormode adding requireuseimport statement choice keybinding leaf unbound cljraddkeybindingswithprefix cc cm addhook clojuremodehook myclojuremodehook advanced refactorings require nrepl middleware refactornrepl version onwards ciderjackin used injected automatically profilesclj profileboot nt need modified anymore usecase hand standalone repl embedded nrepl server used need manually add dependency see either project projectclj user profile found leinprofilesclj plugins refactornrepl cidercidernrepl check much longer installation page wiki le opinionated approach cljrefactor quite setting tweak change behavior various command read compatibility cljrefactor refactornrepl cider clojure java middleware user need worry wish configure middleware name middleware refactornreplmiddlewarewraprefactor unlike cidernrepl defines many middleware handful related ops refactorrepl defines single middleware house provided nrepl ops case refactornrepl used advanced astbased refactorings analyzer refactornrepl us need eval code order able build ast work cause side effect like writing file opening connection server modifying database etc performing certain refactoring function code default user warned ast dependent feature invoked warning annoyance project evalled without risk set cljrwarnoneval nil cljreagerlybuildastsonstartup take effect create asts namespaces repl start cljrwarnoneval set nil desired set cljreagerlybuildastsonstartup nil emacs configuration ast dependent feature moment find usage rename symbol extract function inline symbol rename file dir change function signature promote function usage function cljrefactor twoletter mnemonic shortcut eg r cljrrenamesymbol given prefix choice example setup call function hitting cc cm r see wiki complete list available refactorings demonstration customization point trouble remembering mnemonic shortcut check hydra powered popup menu described changelog extensive changelog available contribute yes please suite test remember add test specific feature might break later find repo http githubcomclojureemacscljrefactorel fetch test dependency install cask nt already cd pathtocljrefactor cask run test runtestssh submitting patch pull request make sure test passing patch line contribution guideline thanks everyone contributed far license copyright magnar sveen copyright magnar sveen lars andersen benedek fazekas bozhidar batsov author magnar sveen magnars gmailcom lars andersen expez expezcom benedek fazekas keywords convenience clojure cider program free software redistribute andor modify term gnu general public license published free software foundation either version license option later version program distributed hope useful without warranty without even implied warranty merchantability fitness particular purpose see gnu general public license detail received copy gnu general public license along program see http wwwgnuorglicenses
353,Lobsters,emacs,Emacs editor,The EMACS paper by RMS,http://www.gnu.org/software/emacs/emacs-paper.html,emacs paper rms,emacs extensible customizable display editor table content footnote,emacs extensible customizable display editor paper written richard stallman delivered acm conference text processing table content emacs realtime display editor extended user running extensibility mean user add new editing command change old one fit editing need editing emacs written modular fashion composed many separate independent function user extends emacs adding replacing function writing definition language used write original emacs system explain method extension practical use others theoretically equally good discourage use discourage nontrivial use extensibility make emacs flexible editor user limited decision made emacs implementors decide worth add user provide easily provide alternative feature like way work standard system coherent set new redefined function bound library user load together conveniently library enable user publish share extension become effectively part basic system route many people contribute development system part without interfering led emacs system become powerful previous editor user customization help another subtler way making whole user community breeding testing ground new idea user think small change try give user idea becomes popular incorporated core system poll user suggested change respond basis actual experience rather thought experiment help user make effective use copious supply feature emacs provides powerful complete interactive selfdocumentation facility user find available sign success emacs design emacs requested hundred site imitated least ten time display editor mean editor text edited normally visible screen updated automatically user type command explicit command print text needed compared printing terminal editor display editor user much le need paper listing compose code quickly line without writing paper first display editor also easier learn printing terminal editor editing printing terminal requires mental skill like blindfold chess user must keep mental image text editing easily see calculate editing command move change display editor make unnecessary allowing user see board among display editor realtime editor one update display frequently usually one two character command user type matter input command language printing terminal editor read string command process useful feature printing terminal example usually insert command insert string character editor adapted display terminal often update display end command string thus insertion would shown helpful display inserted character position text soon typed realtime display editor primarily short simple command show effect display soon typed emacs text printing character formatting character inserted typing insert command word printing character command insert character command modifying text nonprinting character begin nonprinting character manycharacter command echo typed slowly sufficiently long pause command far echoed rest command echoed typed aside emacs acknowledges command displaying effect emacs first realtime display editor derives much appeal one necessary know program extend emacs use successfully illustrate demonstrate flexibility emacs derives extensibility summary many feature available emacs user without need program extensibility contributed many written user written author could well written user many minor extension done without programming called customizations useful even example editing program comment start end user tell emacs comment manipulation command recognize insert string done setting parameter comment command refer necessary redefine command another sort customization rearrangement command set example user prefer four basic cursor motion command left right key diamond pattern keyboard easy reassign command position also possible rearrange entire command set according different philosophy emacs programmed understand syntax language edited provide operation particular many major mode defined one language understood major mode ability redefine command reset parameter customize emacs language file contain special text string tell emacs major mode use editing example lisp anywhere first nonblank line file say file edited lisp mode string would normally enclosed comment editing english text command written move cursor word sentence paragraph delete fill justify paragraph move block text left right command convert single word whole region upper lower case also command manipulate command string text justifier program insert delete underlining command others insert delete fontchange command many command controlled parameter used adapt particular style formatting example word moving deletion command syntax table say character part word two command edit table one convenient program use interactive one user paragraph command told string appearing beginning line constitute beginning paragraph parameter set user specification file edited normally set automatically major mode telling emacs language file written require attention user powerful extension facility ability redefine graphic formatting character command character include letter digit punctuation normally defined command insert text useful alternate definition character usually insert character usual additional processing way meaningfully associated insertion character single useful command editing text autofill space program intended used definition space character addition inserting space break line two line become long space character redefined way user type endlessly ignoring right margin text divided line reasonable length course feature always desirable turned redefining space command autofill space exist user could write also command turn bolder use redefinition selfinserting character abbreviation facility part standard emacs system still implemented extension maintained user wrote abbreviation facility allows user define abbreviation word type abbreviation order insert word example cd defined abbreviation command typing iocd would insert iocommand text abbreviation expansion preserve case cd would expand command abbreviation work redefining punctuation character list altered customization run program look preceding word defined abbreviation replaces expansion yet another application redefining printing character automatic parenthesismatching feature use every time user insert closeparenthesis cursor move briefly matching openparenthesis back automatic matching especially useful editing lisp code helpful programming language also implemented redefining closeparenthesis character extensibility especially useful editing program one might conceivably design advance editing command needed editing english text programming language set useful syntactic operation suggest useful editing command language differ much simple customization general enough implement familiar operation new language new extension package required emacs command written many language move kill balanced expression move beginning end function definition insert align comment useful editing operation program first one implemented programming language automatic indentation structure program made clear glance adjusting indentation line according level nesting programming community attempt indent code properly manually automatic indentation used mostly lisp programmer automatic indentation traditionally done program would read entire source file rearrange indentation write corrected source file tool several disadvantage one thing processing entire file likely take another tool insists imposing idea proper formatting user override even lot effort put heuristic good indentation user still dissatisfied automatic indentation emacs done incrementally tab character redefined command update indentation current line based existing indentation preceding line tab command used line whose nesting changed user indent code properly first typed agree tab command choice indentation override indentation function must understand syntax programming language edited language requires separate indentation function job major mode programming language redefine tab character run appropriate indenter user always use command indent matter sort program editing addition another editing command indentation calling current definition tab subroutine one function one indent several consecutive line convention vital extensible system enabling unrelated extension avoid interacting wrong one user write indentation function new language another user writes new languageindependent operation requesting indentation two automatically work properly together language support indentation include lisp pascal pli bliss bcpl muddle teco comprehension user program reach greatest height lisp program simplicity lisp syntax make intelligent editing operation easier implement complexity language discourages user implementing similar operation fact emacs offer facility editor interlisp editor operate list structure combined display editing simple syntax lisp together powerful editing feature made possible simple syntax add convenient programming system practical language lisp extensible editor made way see way large program composed many function divided among many file often hard remember file given function emacs extension called tag package know keep track tag package make use file called tag table record function program stating file defined position file tag table made running special program named tag part emacs tag table loaded emacs command meta period find definition function using information tag table select proper file find function position within source file remembered tag table used find function file instantly changing file make remembered position inaccurate happened meta period search direction away remembered position find definition small inaccuracy cause slight delay many new function added moved one file another tag program reprocess tag table updated one make automatic tag table also remembers language source file written information needed recognizing function definition file interactiveness useful many activity aside editing text example reading replying mail user ought interactive many activity occasionally involve text editing example editing text reply special editor implemented purpose easily much work write rest system easier write interactive system within framework extensible editor emacs two extension rmail babyl reading mail command rmail babyl like emacs command typical command include delete message r reply message editing text reply done ordinary emacs command dired used editing file directory normal editing command extended used move cursor directory listing special command defined dired delete move compare examine file whose name cursor info extension designed reading treestructured documentation file file divided textually node contain text representing pointer node info display one node time info command move one node another following pointer primary component emacs system text manipulation io primitive interpreter command dispatcher library system display processor text io primitive used operate text command program interpreter executes program using primitive called command dispatcher remembers program corresponds possible input character read character terminal call associated function library system associate function name documentation allows group related function loaded quickly together display processor update screen match text changed text primitive run whenever nothing else emacs system actually implement two different language editing language programming language editing language contains command user use changing text command implemented program written programming language speak interpreter mean one implement programming language editing language implemented command dispatcher previous attempt programmable editor usually attempted mix programming construct editing one language teco primary example sort design advantage user know edit system need learn programming construct begin programming well however considerable disadvantage good editor command language ugly hard read grossly inefficient programming language good interactive editing language composed primarily single character command command introduce longer name le frequently used operation programming language unreadable editor customizable user must able redefine character programming language would intolerable programming language editing language builtin editing command primitive operation use written another language user change part standard system slightly making small change definition reimplemented scratch macro since primitive available command us editing often impossible necessary primitive internal routine user call primitive extension would like use always editing operation user want implementor macro processor encouraged ignore deficiency use language implementing rest system since traditional designing macro language ignore standard readability power robustness typically applied design programming language deficiency usually considerable original teco good example sort problem emacs language designed purpose editing language singlecharacter redefinable command programming language teco modified extended suitable writing wellstructured robust program provide primitive needed editing program opposed editor user remains hard read descendent emacs generally use lisp instead teco used reason historical convenience information requirement extensibility imposes system programming language next chapter important part practical extensible system ability use one extension one time begin using additional extension time extension able override replace part standard system previous extension emacs library system responsible accomplishing emacs library collection function name definition documentation loaded emacs midsession library readonly positionindependent loaded incorporating virtual memory emacs allows emacss using library share physical memory library contains symbol table connects function name definition also documentation string library generated source file function definition accompanied documentation encourages function documented function name looked loaded library searched recently loaded first sake uniformity standard emacs function also reside library always first one loaded therefore library override replace definition standard emacs function new definition used everywhere place old together fact emacs constructed explicit function call named subroutine many point make easy user change part system modular fashion without replacing subroutine normally called full name user also call command name many command primarily intended used way however common editing operation need easily accessible purpose command dispatcher read one character look dispatch table vector definition find function called definitionobject name function residing dispatch table invoked either character command name function appear dispatch table called name user call function name mean singlecharacter command meta x whose definition read name function call function user pattern use many function emacs accessible name expect user use infrequently particular user us one command often place definition dispatch table using function set key function calling convention designed almost function definition behave reasonably called command dispatcher function try read string argument caller called command dispatcher automatically prompt read argument terminal instead library contain function intended called single character command library arrange place function definition dispatch table defining function called setup called automatically library loaded redefine character command needed however emacs intended customized library reasonably make assumption function belongs particular character without allowing user load library override assumption example library might wish redefine control assumption invokes search function user might prefer keep search control instead might prefer library alter definition control loaded author library anticipate detail idiosyncrasy provide following convention setup function library tag say check variable called tag setup hook exists value called function instead usual setting display processor part emacs maintains display screen uptodate image text inside editor since size screen limited portion window shown display processor prefers continue start display point file minimize amount change necessary screen however text editor cursor located must appear screen terminal cursor show sometimes force new window position computed user also command change window position moving text screen emacs display processor embodies unusual principle make much faster response user display updating lower priority cogitation display editor change display user command simplest strategy implement since command know precisely changed text inefficient computer time user time make user wait completion display update already made obsolete command waiting executed example problem user type carriage return create new line line point need redisplayed new position still going type additional carriage return create another new line rest display update obsolete use displaying rest line second position display third position emacs display processor best understood separate lower priority process run parallel editing process editing process read keyboard input make change text display process always trying change screen match text keep record screen cycle operation find one discrepancy editing buffer screen record corrects cycle display process preempted editing process higher priority display process thought chasing arbitrarily moving target edited text speed limited terminal baud rate multiple process actually used implementation instead line display output display processor update data base poll input additional benefit inputbeforeoutput philosophy us le computer resource system heavily loaded enough computer power available emacs get behind processing user input first command completed input available effort put display updating yet saving computer time way emacs eventually catch user display updating since display updating necessarily done time editing operation necessitates display updating responsibility editing command instead display update must done somehow comparing new text previous displayed text information emacs editing command return information range text changed aside display processor operates independently good extensibility well easier write change editing command contain algorithm updating screen teco language efficient display processor written assembler language get adequate performance unfortunate extension display processor could valuable later implementation emacs display processor written lisp along editing command extended despite syntactic obscurity teco actually one best language use implementing extensible editor traditional programming language simply job implementing extensible system sort requires feature intrinsically lack specifically requires language interpreter ability program access interpreter data structure function definition adherent nonlisp programming language often conceive implementing emacs computer system using pascal pli c etc fact simply impossible implement extensible system language design implementation batchoriented program must compiled linked run online extensible system must able accept execute new code running eliminates popular programming language except lisp apl snobol time lisp interpreter ability treat function data exactly need system written pli pascal modified recompiled extension becomes separate version entire program user must choose invoking program version want combining two independent extension requires comparing merging source file obstacle usually suffice discourage extension way implement extensible system using unsuitable language write interpreter suitable language use one prime implementing emacs using simple lisp written pli technique work editor require efficient interpreter even straightforward lisp interpreter efficient teco interpreter empirically observed good enough would regard implementation original language however pascal pli implementation us interpreter allows user program access interpreter data structure sufficiently could used lisp implementation would used however implementation rare language designed implementor appreciates importance interpreter treating function data usually choose implement lisp also possible use dynamic linking ability load additional module compiled code execution refer subroutine therein name place interpreter however dynamic linking operating system rarer good lisp harder implement convenient job one operating system multics emacs written lisp sine emacs implementation interdata computer us dynamic linking load file compiled language resembles lisp language used implementing extensible system certain control structure data structure feature become vital one difference lisp teco programming language important writing extensible system variable name retained run time lost compilation typical compiled language variable name meaningful compile time compiled code us one variable name become reference one location memory name discarded contrast lisp remembers connection variable name value new program defined global variable essential parameter used customization emacs variable named comment start control string recognized starting comment text edited value supposed string variable used comment indenting command recognize existing comment fact variable name known run time enables user ask see value string change string define redefine major mode various programming language change string define redefine commentmanipulation command refer variable work text various language batch language use lexical scope rule variable name variable referred legally within syntactic construct defines variable lisp teco use dynamic scope rule mean binding variable visible subroutine call level unless binding override example defun x defun x return called within us value x called directly however refers caller value x global value say bind variable x subroutine called see binding made instead global binding say shadowed temporarily return pascal analogous program would erroneous lexically visible definition x dynamic scope useful consider function edit picture used change certain editing command slightly temporarily convenient editing text arranged twodimensional picture example printing character changed replace existing text instead shoving right edit picture work binding value parameter variable dynamically calling editor subroutine editor exit command cause return edit picture subroutine return immediately outer invocation editor process dynamic variable binding unmade dynamic binding especially useful element command dispatch table example rmail command composing reply message temporarily defines character control meta insert text original message reply function implement command always defined control meta call function except reply edited reply command dynamically binding dispatch table entry control meta calling editor subroutine recursive invocation editor return text edited user sent reply necessary dynamic scope scope rule provided useful available language designer believe dynamic binding avoided explicit argument passing used instead imagine function bind variable foo call function b call function c c us value foo supposedly pas value argument b pas argument c done extensible system however author system know parameter imagine function c part user extension b part standard system variable foo exist standard system part extension use explicit argument passing would require adding new argument b mean rewriting b everything call b common case b editor command dispatcher loop called awful number place worse c must also passed additional argument b nt refer c name c exist b written probably find pointer c command dispatch table mean call sometimes call c might equally well call editor command definition editing command must rewritten accept ignore additional argument none original system left suppose one file formatted comment starting column editing file easier variable comment column used convention decide align comment always set whenever file editing emacs provides way request since also provides feature visiting several file must take special care keep file variable straight suppose one file want comment column another formatted solved allowing file local value set variable specially formatted text end file specifies local mode comment end file brought emacs local mode list parsed variable value remembered local symbol table file selected local symbol table contains local value variable file selected local symbol table contains global value real symbol table contains file local value instead extensible system allows user provide function called certain welldefined occasion call hook example already mentioned hook executed whenever certain library loaded tag library hook named tag setup hook another important class hook executed major mode entered major mode hook example text mode hook named text mode hook hook used request arbitrary action advance time text mode entered many user always define hook turn auto fill mode auto fill mode always text mode hook associated variable well time value variable change hook run usually hook used change data structure always correspond value variable often efficient modular checking variable whenever value relevant example changing value auto fill mode turn autofilling call function automatically redefines space character command definition hook attached specific point within interpreter display processor example hook called whenever time read character input terminal hook program supply character hook thought compensating fact part system written assembler language simply redefined user system programming editor command need sophisticated facility handling error exceptional condition programming system provide let u consider error ought happen error first exactly error sometimes user asks something done user error sometimes program asks something done program error program error often accompany user error either one happen without program error defined objectively event executes certain part interpreter program error user error defined objectively way matter attitude toward event rather event command done nothing regard either response error normal functioning choice attitude necessary connection whether command definition required special code make nothing circumstance question program error happens emacs print error message give user chance invoke error handler debug control return innermost error return point program create error return point special construct use lispstyle syntax example clarity errorreturn arbitrarycodehere end errorreturn construct becomes error return point effect code inside construct executed error return usually used loop read execute command sort including builtin one read display editing command doforever errorreturn readandexecuteonecommand sometimes interpreted function called asynchronously unpredictably example one optionally save text every often reduce amount lost system crash function get program error notify user interfere way user explicit command requires construct known lisp errset prevents normal processing error occur within error occurring within errset nothing return control immediately end errset programming system provide uniform handling user error concept user error defined level instead designer editing command must decide condition ought considered error case sometimes command simply nothing sometimes ring terminal bell perhaps throw away type ahead best expect user told something wrong obvious cause error le obvious causing program error deliberately specially chosen error message good way informing special primitive used cause program error arbitrary specified error message errorreturn processing invoked sometimes user error lead naturally error program may handling need program error error message adequate explanation user situation deemed likely enough deserve effort required make anything else happen error handler debugging program error interpreted program possible primitive provided examining function call stack data structure programmer would want examine debugging user actually written extension complete replacement standard error handler program returning example userwritten command loop command exit loop done doforever errorreturn readandexecuteonecommand mean nonlocal control transfer create transfer point mean catch construct around loop catch creates named transfer point end loop accessible within loop catch doforever errorreturn readandexecuteonecommand exitmyloop time loop execution throw exitmyloop transfer control immediately end catch thus exiling loop catch throw construct copied maclisp like variable name catch name dynamic scope program throw catch subroutine called inside catch important ease extension dictate command commandreading loop understands implemented separate function user redefine one command without replacing framework loop complex program much easier learn answer question use program customizable important answer reflect customization done easiest way question answered based table data structure control functioning system emacs include command dispatch table loaded library basic kind question user might want ask command inquire either function name command character library contains documentation string function used answer question question command character dispatch table used find function object currently definition character library system used find name function documentation string ability ask certain command help user know command ask user need ask command might help emacs attempt answer listing function whose name contain given substring since function name tend summarize function forward word indent comment follow systematic convention usually enough list also contains first line function documentation invoke function one two character possible documentation function usually string text also contain program executed print documentation interspersed text printed literally come handy description one function refers another function usually accessed one two character command better tell user short command would actually use name function defines exactly command run function question depends user customization use program middle documentation string search dispatch table print command would invoke desired function another application facility function simply load library call function documentation string function program load library print documentation function would called help user remember ask question make simple standard special character called help character used character used asking help always available help normally followed another character specifies type inquiry user remember character type help see list close remaining loophole confusion emacs print message help character time start help also available middle typing command example start type replace string command forget argument required type help documentation replace string function printed tell next question answered based data structure moment many change emacs require extra effort update documentation necessary update documentation function whose definition changed format emacs library source file encourages requiring documentation string every function function name definition began development emacs improvement teco implementation display processor command dispatcher small fixed set command inspired editor e stanford artificial intelligence lab considered new editor rather one new feature teco join many existing feature user would give teco command controlr enter display editing mode whose command suitable making local change file would exit display editing mode anything else display editing implemented fairly easy allow command redefined call function written teco teco already contained considerable facility text manipulation io programming almost immediately many user began implement large collection editing command powerful enough every part editing one popular system tecmac others included macro rmode tmacs russmode doc need exit display editing mode use teco directly became le le frequent new user longer learned teco still missing many important control programming construct allow program readable maintainable example named function variable early tecobased display editor hard maintain tmacs system experimented adding named function variable good result limited inefficiency implementing teco program inspired implement emacs writing emacs involved simultaneously adding teco feature make library system selfdocumentation permitted new readable programming style writing new set display editing command using style design command based examining command set many tecobased editor inspiration choosing command common operation would take keystroke first operational emacs system existed late since development proceeded steadily new code written teco new feature added teco speed loop table searching sexpression parsing make possible new kind io interface operation emacs developed digital equipment corporation pdp computer using mit incompatible timesharing system outside interest emacs sufficient motivate mike mcmahon sri international adapt digital twenex top operating system emacs use hundred site several postemacs editor implementation copied emacs specific command set user interlace fundamental principle based programmable interpreter motivation project transfer idea emacs computer system two use multics emacs honeywell product zwei editor mit artificial intelligence lab lisp machine emacs supplied implementors clear idea implemented focus making foundation clean essential improvement substitution excellent programming language lisp makeshift extended teco used emacs lisp provides necessary language feature framework much cleaner teco also efficient lisp interpreter intrinsically efficient stringscanning interpreter teco lisp compiler also available efficiency important saving microsecond reduces amount system must written assembler language order obtain reasonable performance open system user extension another improvement data structure used represent editing buffer multics emacs developed technique using doublylinked list line string technique used zwei well many editor imitate emacs command set display updating philosophy without providing extensibility despite deficiency despite greatly reduced set feature result useful editor though useful extensible one computer small address space lacking virtual memory probably best done proliferation superficial facsimile emacs unfortunate confusing effect user knowing using imitation emacs never seen emacs led believe enjoying advantage emacs since realtime display editor tremendous improvement probably believe readily prevent confusion urge everyone refer nonextensible imitation emacs ersatz emacs conventional wisdom program intended multiple user written specification designed advance done result inferior place try anything new research project user see people know better silenced development emacs followed path authority would say direct route disaster continuous deformation teco something totally unlike teco typical user point view whole process teco program containing teco text editor indeed way emacs show result completely thought advance based teco rather lisp still reliable enough widely used imitated disaster would forecast occurred instead new powerful way constructing editor explored shown good believe accident emacs could reached process careful design process arrive goal visible outset whose desirability established bottom line outset neither anyone else visualized extensible editor made one appreciated value experienced emacs exists felt free make individually useful small improvement path whose end sight overall goal small change specific purpose term improving text editor general use step individually well designed reliable helped keep thing right track research project user tend improve state art writing research project rather state art writing usable system tool individual command emacs benefited stage unregulated experimentation also display processor capability extension created many user began write extension developed complete editing environment emacs recent command emacs benefit experimentation many different user customizing editor different way since time experimentation possible programmable display editor existed new implementation emacs carefully designed advantage hindsight based original emacs however implementor must carefully restrict careful design part editor already well understood go beyond original emacs must experiment nt program exploration doomed sidetracked blind alley unrecognized late extensibility flexibility mind solves problem many alley tried blind alley backed minimal real loss traditional attitude towards lisp hold useful esoteric amusement artificial intelligence appearance multics emacs honeywell product death knell view mainframe manufacturer offering system utility program written lisp program intended heavy use general user community special property lisp make extensibility possible key feature even though many user programmer lisp escaped ivory tower forever force reckoned system programming language programmable editor outstanding opportunity learn program beginner see effect simple program text editing feedback fast easily understood form educator found display programming suited child experimenting programming reason see logo programming editor command additional advantage program need large tangibly useful editing first project simple one thus slide smoothly using editor edit learning program large number nontechnical worker using programmable editor tempted constantly begin programming course daytoday life contribute greatly computer literacy especially many people thus exposed secretary taught society incapable mathematics unable imagine moment learn program wo nt stop learning nt know programming learning according bernard greenberg already happening multics emacs way emacs record remains screen compare text edited determined representation used text postemacs editor use better text representation make easier display updating algorithm representation used emacs straightforward linear string character movable gap grow shrink make unnecessary insertion deletion within small region file move half file gap essential making practical insert character one time instead en masse insert command aside made invisible lowest level software essentially representation linear string task display processor auxiliary data make sense amorphous mass text lowest level avoiding wasteful output checksum character displayed line screen screen line rewritten new old checksum compared match rewriting skipped every time leave old incorrect text screen higher level display optimization work preserving information byproduct writing display namely text string beginning screen line come combining information localizes region text string alteration taken place allows restrict display update processing horizontal band screen contains necessary change often one line processing line screen would actual output checksum even time compute checksum noticeable user delay information used decide line screen moved line inserted middle screen much better scroll following line downward terminal rewrite new position record text string change taken place maintained requiring every command return value saying part string changed identify subinterval string contains change made say change made though cursor may moved say nothing requires display processor make assumption better way developed bernard greenberg multics emacs used zwei represent buffer doublylinked list containing pointer string one line newline character actually present implicitly appear line except last requires lowest level insert delete search subroutine complicated example inserting string treat newline character like character finite amount complexity greatly simplifies efficient display computation state screen remembered array pointer string displayed screen line display updated one compare string buffer string display see whether object pointer equal eq lisp see whether content multics emacs never change content string buffer creates new string replace old one text change thus string pointer screen state continue record screen zwei change content existing string make sure fail notice text longer match screen zwei maintains clock increment time change made text line record clock tick last modification screen line record clock tick time displayed line text match line screen record tick count match content line changed line list representation also eliminate requirement command say changed reducing need programmer worry display done desirable another advantage becomes feasible pointer character text relocate insertion deletion done continue point place text emacs sharable library contains first symbol table binary searched name object find object named symbol table point name definition using offset beginning file file valid location memory name definition example teco string data type internal teco format library need translated parsed way loaded symbol table point documentation function library well definition documentation function visit file object entered symbol table name doc visit file also string named directory whose definition contains list name object file library wish advertise used documentation purpose looking name contain name auxiliary object doc file possible search symbol table reverse take definition find name since one tell library object comparing address range memory occupied library make possible find name object one ability important user asks character controlk desirable able tell run function kill line name kept dispatch table looking name loaded library slow implementation reasonable strategy emacs available distribution site running digital equipment corporation twenex operating system distributed basis communal sharing mean improvement must given back incorporated distributed interested contact information emacs work available way complete manual use extension emacs richard stallman emacs manual user artificial intelligence lab memo richard stallman emacs manual twenex user artificial intelligence lab memo various lower level implementation strategy part emacslike editor treated craig finseth theory practice text editor cookbook emacs lcs technical memo tm b thesis may include true extensible descendent emacs editor preceded emacs supplied idea many ersatz emacs editor included multics emacs multics emacs written maclisp bernard greenberg honeywell cambridge information system lab starting first implemented could used author alone necessary privilege patch multics operating system program could read one character keyboard instead waiting complete line seeing new editor operation honeywell people convinced make feature generally available written lisp multics emacs even extensible original emacs result accumulated even powerful feature bernard greenberg multics emacs experiment computer interaction proceeding fourth honeywell international software conference bloomington minn april bernard greenberg prose con multics emacs commercial text processing system lisp proceeding lisp conference stanford university stanford california august bernard greenberg katie kissel multics emacs text editor user guide publication honeywell information system waltham mass bernard greenberg multics emacs extension writer guide publication honeywell information system waltham mass sine sine sine emacs based compiling lisp code run nonlisp editor environment unfortunately interpreter present however user load compiled file running editor design chosen small address space machine interdata mit architecture machine group see owen tanderson design implementation displayoriented editor writing system undergraduate thesis mit physic department january tecmac tecmac first editor implemented teco work display processor developed many idea used emacs user interface retired written teco le suited system programming unable attain either readability efficiency tecmac maintained john l kulp richard l bryan teco pdp teco originally written richard greenblatt stew nelson jack holloway mit artificial intelligence lab based pdp teco written murphy teco emacs implemented direct descendant pdp teco digital typical example teco also descendant early version mit documented digital equipment corporation teco programmer reference manual dec etee revised time time ordinary teco lack many important programming construct mit teco construct may syntactically ugly exist program well organized clean except lowest level detail tmacs tmacs editor implemented teco began develop idea sharable library command could assigned key user tmacs project dave moon charles frankston earl killian eugene c ciccarelli interestingly standard command set implementors unable agree one motivated work making customization easier zwei zwei zwei eine initially editor lisp machine eine eine emacs former editor lisp machine also based emacs operational late redone make cleaner eine zwei primarily work daniel weinreb mike mcmahon see daniel l weinreb realtime displayoriented editor lisp machine undergraduate thesis mit eec department january augment augment formerly known nls display editor whose interesting feature ability structure file tree making tree structure useful required concept viewspec specifies certain level tree structure visible sort feature added user emacs involves modification display processor could added user multics emacs zwei augment popularized graphical input device known mouse small box wheel ball bottom button top user move table hand device copied widely simplicity low cost augment designed sri international supplied tymshare see douglas c engelbart william k english research center augmenting human intellect afips conference proceeding vol fall joint computer conference san francisco december pp patricia b seybold tymshare augment heralding new era seybold report word processing vol october pp issn seybold publication inc box medium pa bravo bravo come xerox palo alto research center orientation toward text formatting display multiple font underlining etc make heavy use graphical pointing device mouse see augment programmable offer special help editing program opposed text information see local industrial espionage agent e editor used stanford artificial intelligence lab e interface line editor used edit within line display terminal also employed edit input program line editor allow command redefined since part timesharing system trivial though possible principle e allows macro written using language used editing powerful turing machine easy program see online documentation file eals doc stanford artificial intelligence laboratory trix trix language similar trac designed lawrence livermore lab specifically writing editor used write command specific particular language write text formatters fatal flaw designed printing terminal see cecil moll rinde trix ac set general purpose text editing command lawrence livermore lab ucid march tvedit tvedit distant relative e used stanford twenex tenex operating system system provide line editor tvedit facility change within line tvedit good example generally reasonable nonprogrammable display editor see pentti kanerva tvguid user guide tecdatamedia tvedit stanford university institute mathematical study social science online document lisp machine mit artificial intelligence laboratory built machine specifically purpose running large lisp program cheaply ever one goal make entire software system interactively extensible writing lisp allowing user redefine function composing innards system part system emacslike editor zwei see written entirely lisp share extensibility see daniel weinreb dave moon lisp machine manual mit artificial intelligence laboratory logo logo language used teaching child think clearly unlike conventional computeraided instruction automates method teaching offer little motivate student logo invite student write program produce interesting picture learn something fun maclisp maclisp language suitable writing extensible interactive program used implementation multics emacs see dave moon maclisp reference manual mit laboratory computer science smalltalk smalltalk language system oriented toward writing extensible program dan hh ingalls smalltalk programming system design implementation proceeding fifth annual acm symposium principle programming language footnote emacs stood editing macro realized emacs composed function written programming language rather macro editor teco meta name shift key ideal emacs terminal terminal key ascii character escape used prefix instead process reading argument terminal implemented function user replace particular sequence event pose problem terminal move text screen problem still result event ok use lisp compiler one count using interpreter time available time normally command reading loop us name command compute name function call example rmail read letter n command call function rmail n way user easily define new command standard emacs system bigger entire address space pdp despite constant strenuous effort reduce size teco equally large postemacs editor even larger incompatible timesharing system document generated febuary using translator version originally located http copyright richard stallman verbatim copying distribution entire article permitted worldwide without royalty medium provided notice preserved
355,Lobsters,emacs,Emacs editor,Writing Go in Emacs,http://dominik.honnef.co/posts/2013/03/writing_go_in_emacs/,writing go emacs,writing go emacs history gomode obtaining go distribution github installation feature reading documentation formatting code managing import navigating code imenu godef roger peppe update godef feature gomode part go repository interacting playground playground onthefly syntax checking flymake doug maceachern goflymake autocompletion gocode nsf snippet yasnippet small number go snippet finding unchecked error goerrcheck goerrcheck errcheck kamil kisiel conclusion contact page,writing go emacs using right tool play big role getting job done efficiently case programming go time spent editor therefore key editor get way optimally assist wherever article talk gomode emacs history feature well useful extension even though article targeted emacs user part mainly feature list might interest user editor well see possible adopt idea want skip history obtaining section though history gomode go including mode emacs long time recently however rather fragile regularly messed indentation syntax highlighting quite time could completely lock editor feel really integrated emacs lacking support function like beginningofdefun also include lot extra feature better use nano much changed around february year rewrote mode scratch took special care build top solid foundation making use parsing facility opposed previous version mode implemented parser apart generally bugfree behavior also allowed building lot function top obtaining two way obtaining gomode similar first way using one come go distribution second way get github push new change find way go repository using one come bundled go sure use one come tip development version go current release includes old outdated version gomode installation using gomode go tip put gomodeel gomodeloadel directory choice add load path via addtolist loadpath placewhereyouputit require via require gomodeload install autoload entry associate go file gomode using gomode git repository procedure similar requires additional step generate gomodeloadel file within emacs run mx updatefileautoloads point gomodeel file tell generate gomodeloadel file point procedure feature emacs programming mode often indentation syntax highlighting integration tool language often key easy navigation code even crossing package boundary appreciated people even rely onthefly syntax checking gomode either directly using work others offer discover read documentation format navigate code use pastebin get syntax checking autocompletion snippet reading documentation using godoc function invoke identically named go tool within emacs read package documentation viewmode buffer additional feature tab complete import path formatting code maybe one important tool go gofmt automatically format code one true coding style used every go developer emacs two way use gofmt one way invoke gofmt manually identically named function gofmt patch current buffer according gofmt way use beforesavehook run gofmt every time save go buffer enabling hook easy addhook beforesavehook gofmtbeforesave used hook complained cursor jumping around worry fixed new gomode cursor placed beginning current line reformatted managing import first glance managing import go seem like much deal either add import statement top file remove rapidly developing new application cause lot jumping around realize forgot import fmt package previously meant going beginning buffer advancing block import statement existed yet going end adding new import realized need repeat procedure remove new gomode three function working import goimportadd goremoveunusedimports gogotoimports goimportadd goimportadd bound cc ca default prompt import path supporting tab completion insert import block creating necessary import already existed commented uncommented prefixed cu ask alias annoying procedure moving around mental context switching reduced keystroke goremoveunusedimports instead offering function removing single import gomode detect unused import delete comment run goremoveunusedimports bound key default bind want personally bound cc cr addhook gomodehook lambda localsetkey kbd cc cr goremoveunusedimports gogotoimports decide want look import edit manually gogotoimports take automatically placing cursor last import bound key either mainly come good default violate emacs guideline bind manually like addhook gomodehook lambda localsetkey kbd cc gogotoimports navigating code also important efficient programming quick navigation code gogotoimports tip iceberg gomode support beginningofdefun cma endofdefun cme two core emacs function navigating function additionally function narrowtodefun markdefun rely two function enough also use imenu jump specific function type declaration even long feature usually provided ides making use etags namely jumping declaration symbol cursor gomode got covered gomode integrates godef amazing little tool written roger peppe godef able parse code code package code go standard library tell exactly symbol looking mean defined gomode make use provide two function godefdescribe godefjump godefdescribe tell looking godefjump take definition yes work across file package standard library without needing tag almost measurable delay godefdescribe bound cc cd godefjump bound cc cj want bind godefjump default key findtag something might already using programming language addhook gomodehook lambda localsetkey kbd godefjump two important note update godef feature gomode part go repository writing article godef function reached go repository yet available git version hopefully change next couple day obviously need install godef easy go get codegooglecomproggoexpcmdgodef browser support video tag interacting playground go pastebin called playground asking help code sharing solution need help often expected use playground especially execute code make sense gomode integrates playground offer goplaybuffer goplayregion send current buffer region playground store link kill ring also directly download paste playground emacs using godownloadplay onthefly syntax checking flymake solution onthefly syntax checking many programming mode offer support easily others case go doug maceachern wrote goflymake consists small go binary elisp integrate emacs go compiles blazingly fast using goflymake cause performance penalty personally letting flymake compile go buffer every time insert newline conservative setting would compile certain amount idle time saving buffer autocompletion gocode written nsf provides kind autocompletion might know ides provides contextsensitive autocompletion work across variety editor including emacs readme includes detailed installation instruction note suggests using autocompletemode mention companymode alternative personally recommend trying companymode first autocompletemode lightweight harder configure snippet people like think useless snippet short word upon pressing tab turn longer word sentence code construct one popular implementation snippet emacs yasnippet yasnippet wrote small number go snippet finding unchecked error goerrcheck last least goerrcheck offering emacs integration errcheck errcheck tool written kamil kisiel finding reporting unchecked error go code goerrcheck offer goerrcheck function run errcheck current package report error compilation buffer additionally support setting errcheck flag default perpackage basis conclusion hope able give good overview feature enjoy writing go code emacs forgot cool package suggestion comment please leave message check contact page find way contacting
356,Lobsters,emacs,Emacs editor,emacs bites (screencasts),http://www.emacsbites.com/,emacs bite screencasts,,
357,Lobsters,emacs,Emacs editor,Modernization of Emacs (Simple Changes Emacs Should Adopt),http://ergoemacs.org/emacs/modernization.html,modernization emacs simple change emacs adopt,emacs modernization simple change emacs adopt problem common user interface common user access simple change emacs feature released frequently asked question find scratch buffer useful suggestion emacs scratch buffer meta key logical nt renamed alt spacecadet keyboard lisp machine keyboard emacs define superhyper key emacs mx key notation v altx notation terminology good glossary gnu emacs manual http emacs undo superior prevalent undoredo system actually loses info http emacs way technically superior change famous programers repetitive strain injury emacs key painful dec terminal flickr history emacs vi key gnu emacs xemacs schism ben wing aquamacs already modernization speak emacs want popular emacs change conform majority tech geekers http yuiblogcomcrockford nt make change easy change costly take much effort spread awareness web resource http wwwhypernewsorgliberte daniellaliberteonemacsdoctxt steve yegge blog steve yegge blog j elisp source lisp programer daniel weinreb died,emacs modernization simple change emacs adopt xah lee date last updated problem emacs great editor perhaps powerful versatile text editor besides text editing also used email reader newsgroup reader ftp client irc client web browser shell interface file management application scientific calculator calendar personal info management application lisp language system among thing seemingly wild functionality employed production daily significant number programers around world call emacs operating system joke technically qualify o implies management hardware emacs great powerful text editor relatively people use vast majority people need write happy use editor emacs ask microsoft window user happy use microsoft word nt m word use notepad wordpad programer happy use graphical editor window platform integrated development environment visual studio eclipse xcode many case willing pay money true operating system new editor spring even though nt much power flexibility emacs example popular one notepad gedit nedit jedit bbedit textmate sublime text many reason made example emacs bundled popular operating system window used computer user worldwide window mac simple text editor bundled satisfy majority computer user nonprofessional computer user notepad wordpad window textedit mac professional computer user secretary graphic artist scientist engineer game developer system administrator programers majority need easy use yet powerful editor also styled text formatting sundry light publishing need table layout simple line graphic drawing embedded image math formula choose adopt microsoft word need tiny percentage might interested emacs programers take survey professional programers defined make living primarily writing code think vast majority perhaps greater use emacs major difficulty among programers use like emacs emacs user interface rather esoteric involving arcane terminology keystroke sharp contrast modern software application used today user interface similar familiar computer user common user interface following excerpt wikipedia article common user access cua detailed specification set strict rule application look function aim part bring harmony msdos application implemented totally different user interface example wordperfect command open file lotus file opened open menu w workspace r retrieve microsoft word file opened escape open menu transfer l load wordstar ctrlko emacs file opened ctrlx followed ctrlf findfile program used escape cancel action used complete one wordperfect used repeat character program used end go end line used complete filling form often help wordperfect insert sometimes toggled overtype inserting character program used thus every program learned individually complete user interface memorized sign expertise learned uis dozen application since novice user facing new program would find existing knowledge similar application absolutely use whatsoever simple change following describe critical change also easy fix emacs may made single elisp programer within single day impact emacs power emacs officially adopt change think make lot people least programers like emacs choose emacs text editor following change proposal simply make emacs sync behavior modern application effect emacs power flexibility simple ui change cut copy paste undo shortcut x c v z key turn cuamode default change undo behavior undo redo bundle undotreeel turn get rid scratch buffer typing delete key deletes text selection one turn deleteselectionmode note following item fixed emacs released see emacs feature released highlight text selection make updown arrow key move cursor visual line newline character text selection done holding shift key pressing arrow key documentation change user documentation emacs emacs lisp doc change terminology replace abbreviation change terminology change terminology use term keybinding binding technical context elisp documentation switch terminology compatible standard terminology emacs notion called emacs notion called reduce use word call appropriate frequently asked question find scratch buffer useful suppose feature software give software large number people use decade chance every feature useful good sized number people people sense adapt work habit feature issue emacs scratch useful vast majority programers wanted scratch pad open new document save way familiar software user scratch primarily designed elisp programers default lispinteractionmode majority people use emacs lisp coder lisp coder simply open new document use scratch default lisp mode scratch intrusive idiosyncrasy persistent closed regenerates foreign programers idiosyncrasy first thing presented user persists detail proposed fix implementation see suggestion emacs scratch buffer meta key logical nt renamed alt meta key simply name special modifier key lisp machine keyboard popularly used emacs lisp machine keyboard see spacecadet keyboard lisp machine keyboard lisp machine keyboard several modifier key including ctrl meta super hyper emacs use term simply referred key keyboard emacs actually also support modifier key super hyper day see emacs define superhyper key lisp machine keyboard fell use along lisp machine ibm pc keyboard decendent microsoft keyboard became popular since keyboard familiar perhaps computer user ibm pc keyboard super hyper key emacs support becomes little known ctrl remains ctrl meta mapped alt key emacs documentation term replaced reflect current usage keyboard computer user understand notation ckey mkey representing keyboard shortcut emacs manual menu similarly updated easytounderstand universal notation ctrlkey altkey detail see emacs mx key notation v altx notation terminology good terminology technical term software programing term irrelevant user software term refers association keystroke command technical software application programing context say programer keystroke event action command function term refers abstract temporary area storing data context programing computer science user text editor work file term appropriate since emacs also used many thing beside reading file writing file example file management ftp shell email irc proper term tab panel window workspace editorsides use term even though technically implemented using buffer term refers typing keycombination activate command also appropriate although concept like seemingly interchangeable context set apart modern software application user manual nt use term reason emacs us technical terminology throughout emacs started concept software application even text editor computer user entirely computer scientist programers note emacs officially recognize term keyboard shortcut following excerpt glossary section official emacs manual emacs see glossary gnu emacs manual keyboard shortcut keyboard shortcut key sequence qv invokes command program call assigning keyboard shortcut emacs call binding key sequence see binding richard stallman emacs frame window terminology http emacs undo superior prevalent undoredo system actually loses info emac undo confusing redo command redo undo people told type something undo twice long time emacs user argue technically superior let user revert possible state past practical problem way emacs undo repeat state action history prevalent undo model action history linear entry unique user easily arrive desired previous state using undo redo think timeline needle like moving needle backward move needle forward user sequence undos redos move needle want start fresh emacs undo like linear timeline emacs every undo push state stack think term timeline unique state emacs may move needle backward may move forward user ever redo typing something immediately undo twice series undos traverse timeline back forth hard user know undo random typing followed get state want using emacs undo like riding rollercoaster particular person random typing followed undo undo record becomes convoluted person keep mind benefit undo facility ruined point take survey among programers use emacs least year perhaps report confusing productive take survey software user emacs think anyone complain unable undo undos reasonable argue people work better simple undoredo model undo practically used erase recent mistake user sequence undos redos assume arrived satisfactory point intends start fresh point need extra revision control proper mechanism one people actually use revert saved version issue frequently debated net usually programer complain emacs undo emacs diehard argue example emacs undo horrible http see also emacs way technically superior change emacs user interface compared modern software application user interface complex unusual however basis whatsoever actually superior design regard sensible metric fact much emacs user interface due historical reason computer example let consider emacs system keyboard shortcut keyboard shortcut system might judge quality based several aspect example consideration easy learn familiar people easy remember ergonomic efficient frequently used command keyboard shortcut easy type frequently used command easier type shortcut le frequently used command frequently used command keyboard shortcut shortcut system consistent extensible emacs keyboard shortcut system good respect consistent extensibility emacs keyboard shortcut perhaps one difficult learn among software also one difficult remember worst aspect emacs keyboard shortcut ergonomically painful emacs control meta combination cited major turnoff potential user among programers see famous programers repetitive strain injury computer keyboard hardware interface mapping command key press combination considered operation research ergonomic point view keyboard hardware designed consideration ergonomics split curved keyboard consideration function map key press also nontrivial software large number function software mission critical software used repetitive long duration humanmachine interaction dataentry programing writing think way consider airplane cockpit filled knob dial button switch job map airplane control function switch issue consider take careful consideration creating keyboard shortcut system emacs difficult create system superior pure technical sense emacs shortcut system detail see emacs key painful aside keyboard shortcut system user interface aspect emacs also questionable example one major aspect emacs operation us single window multiple purpose file emacs way design decision rather due historical reason computer resource limited emacs around graphical system showing practically available emacs method using screen monochrome textonly monitor presenting multiple task actually advanced user interface design available software era graphical system becomes practical drawing window still take lot memory opening multiple window slow impractical dec terminal screen size column line jason scott flickr see history emacs vi key modern software interface say post usually us one window per file task show tab multiple task represented single window however emacs buffer system nt provide tab visual clue compared modern standard tabbed window emacs buffer interface inferior le intuitive arguably emacs operation method may efficient expert user year ago efficiency expert user may weight ease use majority average user today computing era computer standard tool every household efficiency ease use general user important professional user even professional user openly questionable emacs way operation induced default user interface allows efficient operation user interface based modern software convention tested team programmer roughly equally experienced skilled using emacs one team use emacs default ui setup use emacs modernized interface mac aquamacs compare efficiency finishing set coding task note disputing general power flexibility quality emacs emacs powerful embedded language lisp consequently embodies many software application text editing email ftp dired calc induced certain system user interface consistent unique comparison modern software application advocate bad specifically propose trivial item interface documentation change listed article simply turning feature feault changing terminology documentation bearing emacs operate general see gnu emacs xemacs schism ben wing aquamacs already modernization speak aquamacs emacs variant based gnu emacs apple macintosh computer created david reitter aquamacs modifies emacs user interface follows modern mac o x convention example copy cut paste shortcut c x v key open file saving saveas close window undo redo command default shortcut open filebuffer new window following modern user interface almost point mentioned article fixed aquamacs emacs variant help spreading idea emacs user interface modernized however thirdparty variant software change fact gnu emacs need modernized example suppose microsoft word remained do era interface example file opened escape open menu transfer l load suppose microsoft hired third party release variant called m aquaword would help microsoft word software image perceived populace likely complicate issue around microsoft word also aquamacs change emacs conform apple user interface guideline much possible example besides changing many shortcut aquamacs open file new window ie emacs call frame dired opened window opened new window emacs info file mx info opened new window using menu aquamacs launch apple proprietary guibased help application aquamacs make emacs palpable mac user many way aquamacs imposes major change operation people already familiar emacs modernization emacs priority mac way operation emacs way aquamacs mac application user interface change wholly compatible microsoft window user interface guideline minor detail example shortcut modifier different ctrl v shortcut key differ way invoke menu differ computer user world wide familiar window user interface using pc keyboard consider improving emacs user interface important consider familiarity computer user majority summary consider modernization could create version mac version window follows much possible operating system user interface guideline alternatively consider modernization based emacs unique way operation opposed changing emacs conform particular company ui standard currently popular emacs want popular emacs change conform majority attitude plagued unix computer geekers decade early do unix tech geekers would sneer graphical menu mouse horde reason pure text interface command line keyboard operation sufficient superior graphical user interface using mouse seems ridiculous today voice commonly seen newsgroups since linux frenzied race copy wholesale microsoft window user interface kde gnome lindows trying make easytouse douglas crockford documented tech geeker resistance change see crockford javascript volume one early year douglas crockford http yuiblogcomcrockford accessed video javascript volume one early crockford computing history discus programer resistance change like emacs want emacs used people like elisp programers improving emacs side effect emacs also popular popularity contest nt make change easy issue one individual convenience let say lobby greener planet somebody retort nt plant tree backyard change costly take much effort nt take much work make change one suggested article would take one single elisp programer couple day make suggested change note commercial orgs major change order magnitude difficult done response changing industry good example apple computer motorola chip powerpc transition starting mac o mac o x starting powerpc intel chip starting spread awareness please consider modernization proposal spread idea emacs officially adopt simple trivial implement nonradical change perhaps emacs user base increase fold next couple year emacs old timer elisp hacker would nt change working habit bit since trivially make emacs behave old way increased user base tremendous help continued emacs development growth future generation programers web resource addendum collection web resource discussing emacs modernization issue following quote daniel laliberte author emacs lisp debugger edebug coauthor gnu emacs lisp reference manual since web grabbed attention around nt done much anything emacs except continue reluctant user stuck emacs binding brain frustrated archaic ui world move javascript favorite language web browser would environment one might everything except quite yet laliberte http wwwhypernewsorgliberte full text daniellaliberteonemacsdoctxt steve yegge author javascript mode j grammar aware parser author ejacs javascript interpreter written elisp intended make javascript emacs lisp alternative steve yegge blog steve yegge blog j elisp daniel weinreb cofounder symbolics alludes emacs keybinding way source see lisp programer daniel weinreb died xah wrote emacs default cursor moving shortcut ctrlf ctrlb ctrln ctrlp key f b n p scattered around keyboard home row daniel wrote true time guy steele put together emacs default key mapping many people target user community people mit already using key binding would hard get new emacs binding accepted community differed basic command point anyone using emacs easily change based ergonomic preference
